declare module '@angular/platform-browser-dynamic' {
// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @angular/core
//   @angular/compiler

/**
  * @license
  * Copyright Google Inc. All Rights Reserved.
  *
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
export * from '@angular/platform-browser-dynamic/--/--/--/--/--/node_modules/@angular/platform-browser-dynamic/public_api';

/**
    * @module
    * @description
    * Entry point for all public APIs of this package.
    */
export * from '@angular/platform-browser-dynamic/--/--/--/--/--/node_modules/@angular/platform-browser-dynamic/src/platform-browser-dynamic';

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { PlatformRef, Provider, StaticProvider } from '@angular/core';
export * from '@angular/platform-browser-dynamic/--/--/--/--/--/node_modules/@angular/platform-browser-dynamic/src/private_export';
export { VERSION } from '@angular/platform-browser-dynamic/--/--/--/--/--/node_modules/@angular/platform-browser-dynamic/src/version';
export { JitCompilerFactory } from '@angular/platform-browser-dynamic/--/--/--/--/--/node_modules/@angular/platform-browser-dynamic/src/compiler_factory';
/**
    * @publicApi
    */
export declare const RESOURCE_CACHE_PROVIDER: Provider[];
/**
    * @publicApi
    */
export declare const platformBrowserDynamic: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;

/**
  * @license
  * Copyright Google Inc. All Rights Reserved.
  *
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
export { CompilerImpl as ɵCompilerImpl } from '@angular/platform-browser-dynamic/--/--/--/--/--/node_modules/@angular/platform-browser-dynamic/src/compiler_factory';
export { platformCoreDynamic as ɵplatformCoreDynamic } from '@angular/platform-browser-dynamic/--/--/--/--/--/node_modules/@angular/platform-browser-dynamic/src/platform_core_dynamic';
export { INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS } from '@angular/platform-browser-dynamic/--/--/--/--/--/node_modules/@angular/platform-browser-dynamic/src/platform_providers';
export { ResourceLoaderImpl as ɵResourceLoaderImpl } from '@angular/platform-browser-dynamic/--/--/--/--/--/node_modules/@angular/platform-browser-dynamic/src/resource_loader/resource_loader_impl';

/**
    * @module
    * @description
    * Entry point for all public APIs of the common package.
    */
import { Version } from '@angular/core';
/**
    * @publicApi
    */
export declare const VERSION: Version;

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { Compiler, CompilerFactory, ComponentFactory, CompilerOptions, ModuleWithComponentFactories, InjectionToken, StaticProvider, Type, ɵConsole as Console, Injector, NgModuleFactory } from '@angular/core';
import { ViewCompiler, CompileMetadataResolver, TemplateParser, NgModuleCompiler, SummaryResolver, StyleCompiler, CompileReflector, CompilerConfig } from '@angular/compiler';
export declare const ERROR_COLLECTOR_TOKEN: InjectionToken<{}>;
/**
    * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.
    */
export declare const DEFAULT_PACKAGE_URL_PROVIDER: {
        provide: InjectionToken<string>;
        useValue: string;
};
export declare class CompilerImpl implements Compiler {
        readonly injector: Injector;
        constructor(injector: Injector, _metadataResolver: CompileMetadataResolver, templateParser: TemplateParser, styleCompiler: StyleCompiler, viewCompiler: ViewCompiler, ngModuleCompiler: NgModuleCompiler, summaryResolver: SummaryResolver<Type<any>>, compileReflector: CompileReflector, compilerConfig: CompilerConfig, console: Console);
        compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T>;
        compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>>;
        compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T>;
        compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>): Promise<ModuleWithComponentFactories<T>>;
        loadAotSummaries(summaries: () => any[]): void;
        hasAotSummary(ref: Type<any>): boolean;
        getComponentFactory<T>(component: Type<T>): ComponentFactory<T>;
        clearCache(): void;
        clearCacheFor(type: Type<any>): void;
        getModuleId(moduleType: Type<any>): string | undefined;
}
/**
    * A set of providers that provide `JitCompiler` and its dependencies to use for
    * template compilation.
    */
export declare const COMPILER_PROVIDERS: StaticProvider[];
/**
    * @publicApi
    */
export declare class JitCompilerFactory implements CompilerFactory {
        createCompiler(options?: CompilerOptions[]): Compiler;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { PlatformRef, StaticProvider } from '@angular/core';
/**
    * A platform that included corePlatform and the compiler.
    *
    * @publicApi
    */
export declare const platformCoreDynamic: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { StaticProvider } from '@angular/core';
/**
    * @publicApi
    */
export declare const INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: StaticProvider[];

/**
  * @license
  * Copyright Google Inc. All Rights Reserved.
  *
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
import { ResourceLoader } from '@angular/compiler';
export declare class ResourceLoaderImpl extends ResourceLoader {
    get(url: string): Promise<string>;
}


}
