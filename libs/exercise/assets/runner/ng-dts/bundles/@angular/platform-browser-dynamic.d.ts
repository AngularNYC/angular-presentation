declare module '@angular/platform-browser-dynamic' {
// Generated by dts-bundle v0.7.3
// Dependencies for this module:
/// <reference path="@angular/compiler" />
/// <reference path="@angular/core" />

/**
  * Generated bundle index. Do not edit.
  */
/* Removed: $0 */
/* Removed: $0 */

/**
  * @license
  * Copyright Google Inc. All Rights Reserved.
  *
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
/* Removed: $0 */

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
/* Removed: $0 */
/**
    * An implementation of ResourceLoader that uses a template cache to avoid doing an actual
    * ResourceLoader.
    *
    * The template cache needs to be built and loaded into window.$templateCache
    * via a separate mechanism.
    *
    * @publicApi
    */
export declare class CachedResourceLoader extends ResourceLoader {
        constructor();
        get(url: string): Promise<string>;
}

/**
    * @module
    * @description
    * Entry point for all public APIs of this package.
    */
/* Removed: $0 */

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
/* Removed: $0 */
/* Removed: $0 */
/* Removed: $0 */
/* Removed: $0 */
/**
    * @publicApi
    */
export declare const RESOURCE_CACHE_PROVIDER: Provider[];
/**
    * @publicApi
    */
export declare const platformBrowserDynamic: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;

/**
  * @license
  * Copyright Google Inc. All Rights Reserved.
  *
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
/* Removed: $0 */
/* Removed: $0 */
/* Removed: $0 */
/* Removed: $0 */

/**
    * @module
    * @description
    * Entry point for all public APIs of the common package.
    */
/* Removed: $0 */
/**
    * @publicApi
    */
export declare const VERSION: Version;

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
/* Removed: $0 */
/* Removed: $0 */
export declare const ERROR_COLLECTOR_TOKEN: InjectionToken<{}>;
/**
    * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.
    */
export declare const DEFAULT_PACKAGE_URL_PROVIDER: {
        provide: InjectionToken<string>;
        useValue: string;
};
export declare class CompilerImpl implements Compiler {
        readonly injector: Injector;
        constructor(injector: Injector, _metadataResolver: CompileMetadataResolver, templateParser: TemplateParser, styleCompiler: StyleCompiler, viewCompiler: ViewCompiler, ngModuleCompiler: NgModuleCompiler, summaryResolver: SummaryResolver<Type<any>>, compileReflector: CompileReflector, compilerConfig: CompilerConfig, console: Console);
        compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T>;
        compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>>;
        compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T>;
        compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>): Promise<ModuleWithComponentFactories<T>>;
        loadAotSummaries(summaries: () => any[]): void;
        hasAotSummary(ref: Type<any>): boolean;
        getComponentFactory<T>(component: Type<T>): ComponentFactory<T>;
        clearCache(): void;
        clearCacheFor(type: Type<any>): void;
        getModuleId(moduleType: Type<any>): string | undefined;
}
/**
    * A set of providers that provide `JitCompiler` and its dependencies to use for
    * template compilation.
    */
export declare const COMPILER_PROVIDERS: StaticProvider[];
/**
    * @publicApi
    */
export declare class JitCompilerFactory implements CompilerFactory {
        createCompiler(options?: CompilerOptions[]): Compiler;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
/* Removed: $0 */
/**
    * A platform that included corePlatform and the compiler.
    *
    * @publicApi
    */
export declare const platformCoreDynamic: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
/* Removed: $0 */
/**
    * @publicApi
    */
export declare const INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: StaticProvider[];

/**
  * @license
  * Copyright Google Inc. All Rights Reserved.
  *
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
/* Removed: $0 */
export declare class ResourceLoaderImpl extends ResourceLoader {
    get(url: string): Promise<string>;
}


}
