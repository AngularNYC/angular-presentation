declare module '@angular/common' {
// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @angular/core
//   rxjs

/**
  * @license
  * Copyright Google Inc. All Rights Reserved.
  *
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
export * from '@angular/common/--/--/--/--/--/node_modules/@angular/common/public_api';

/**
    * @module
    * @description
    * Entry point for all public APIs of this package.
    */
export * from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/common';
export { registerLocaleData as ɵregisterLocaleData } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/i18n/locale_data';

/**
    * @module
    * @description
    * Entry point for all public APIs of the common package.
    */
export * from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/location/index';
export { formatDate } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/i18n/format_date';
export { formatCurrency, formatNumber, formatPercent } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/i18n/format_number';
export { NgLocaleLocalization, NgLocalization } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/i18n/localization';
export { registerLocaleData } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/i18n/locale_data';
export { Plural, NumberFormatStyle, FormStyle, Time, TranslationWidth, FormatWidth, NumberSymbol, WeekDay, getNumberOfCurrencyDigits, getCurrencySymbol, getLocaleDayPeriods, getLocaleDayNames, getLocaleMonthNames, getLocaleId, getLocaleEraNames, getLocaleWeekEndRange, getLocaleFirstDayOfWeek, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocalePluralCase, getLocaleTimeFormat, getLocaleNumberSymbol, getLocaleNumberFormat, getLocaleCurrencyName, getLocaleCurrencySymbol } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/i18n/locale_data_api';
export { parseCookieValue as ɵparseCookieValue } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/cookie';
export { CommonModule, DeprecatedI18NPipesModule } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/common_module';
export { NgClass, NgForOf, NgForOfContext, NgIf, NgIfContext, NgPlural, NgPluralCase, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgTemplateOutlet, NgComponentOutlet } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/directives/index';
export { DOCUMENT } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/dom_tokens';
export { AsyncPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, JsonPipe, LowerCasePipe, CurrencyPipe, DecimalPipe, PercentPipe, SlicePipe, UpperCasePipe, TitleCasePipe, KeyValuePipe, KeyValue } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/pipes/index';
export { DeprecatedDatePipe, DeprecatedCurrencyPipe, DeprecatedDecimalPipe, DeprecatedPercentPipe } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/pipes/deprecated/index';
export { PLATFORM_BROWSER_ID as ɵPLATFORM_BROWSER_ID, PLATFORM_SERVER_ID as ɵPLATFORM_SERVER_ID, PLATFORM_WORKER_APP_ID as ɵPLATFORM_WORKER_APP_ID, PLATFORM_WORKER_UI_ID as ɵPLATFORM_WORKER_UI_ID, isPlatformBrowser, isPlatformServer, isPlatformWorkerApp, isPlatformWorkerUi } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/platform_id';
export { VERSION } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/version';
export { ViewportScroller, NullViewportScroller as ɵNullViewportScroller } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/viewport_scroller';

/**
    * @publicApi
    */
export declare const LOCALE_DATA: {
        [localeId: string]: any;
};
/**
    * Register global data to be used internally by Angular. See the
    * ["I18n guide"](guide/i18n#i18n-pipes) to know how to import additional locale data.
    *
    * @publicApi
    */
export declare function registerLocaleData(data: any, localeId?: string | any, extraData?: any): void;
/**
    * Index of each type of locale data from the locale data array
    */
export declare const enum LocaleDataIndex {
        LocaleId = 0,
        DayPeriodsFormat = 1,
        DayPeriodsStandalone = 2,
        DaysFormat = 3,
        DaysStandalone = 4,
        MonthsFormat = 5,
        MonthsStandalone = 6,
        Eras = 7,
        FirstDayOfWeek = 8,
        WeekendRange = 9,
        DateFormat = 10,
        TimeFormat = 11,
        DateTimeFormat = 12,
        NumberSymbols = 13,
        NumberFormats = 14,
        CurrencySymbol = 15,
        CurrencyName = 16,
        Currencies = 17,
        PluralCase = 18,
        ExtraData = 19
}
/**
    * Index of each type of locale data from the extra locale data array
    */
export declare const enum ExtraLocaleDataIndex {
        ExtraDayPeriodFormats = 0,
        ExtraDayPeriodStandalone = 1,
        ExtraDayPeriodsRules = 2
}
/**
    * Index of each value in currency data (used to describe CURRENCIES_EN in currencies.ts)
    */
export declare const enum CurrencyIndex {
        Symbol = 0,
        SymbolNarrow = 1,
        NbOfDigits = 2
}

/**
  * @license
  * Copyright Google Inc. All Rights Reserved.
  *
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
export * from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/location/platform_location';
export * from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/location/location_strategy';
export * from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/location/hash_location_strategy';
export * from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/location/path_location_strategy';
export * from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/location/location';

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
export declare const ISO8601_DATE_REGEX: RegExp;
/**
    * @ngModule CommonModule
    * @description
    *
    * Formats a date according to locale rules.
    *
    * Where:
    * - `value` is a Date, a number (milliseconds since UTC epoch) or an ISO string
    *   (https://www.w3.org/TR/NOTE-datetime).
    * - `format` indicates which date/time components to include. See {@link DatePipe} for more
    *   details.
    * - `locale` is a `string` defining the locale to use.
    * - `timezone` to be used for formatting. It understands UTC/GMT and the continental US time zone
    *   abbreviations, but for general use, use a time zone offset (e.g. `'+0430'`).
    *   If not specified, host system settings are used.
    *
    * See {@link DatePipe} for more details.
    *
    * @publicApi
    */
export declare function formatDate(value: string | number | Date, format: string, locale: string, timezone?: string): string;
/**
    * Converts a value to date.
    *
    * Supported input formats:
    * - `Date`
    * - number: timestamp
    * - string: numeric (e.g. "1234"), ISO and date strings in a format supported by
    *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
    *   Note: ISO strings without time return a date without timeoffset.
    *
    * Throws if unable to convert to a date.
    */
export declare function toDate(value: string | number | Date): Date;
/**
    * Converts a date in ISO8601 to a Date.
    * Used instead of `Date.parse` because of browser discrepancies.
    */
export declare function isoStringToDate(match: RegExpMatchArray): Date;
export declare function isDate(value: any): value is Date;

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
export declare const NUMBER_FORMAT_REGEXP: RegExp;
/**
    * @ngModule CommonModule
    * @description
    *
    * Formats a number as currency using locale rules.
    *
    * Use `currency` to format a number as currency.
    *
    * Where:
    * - `value` is a number.
    * - `locale` is a `string` defining the locale to use.
    * - `currency` is the string that represents the currency, it can be its symbol or its name.
    * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
    *    as `USD` for the US dollar and `EUR` for the euro.
    * - `digitInfo` See {@link DecimalPipe} for more details.
    *
    * @publicApi
    */
export declare function formatCurrency(value: number, locale: string, currency: string, currencyCode?: string, digitsInfo?: string): string;
/**
    * @ngModule CommonModule
    * @description
    *
    * Formats a number as a percentage according to locale rules.
    *
    * Where:
    * - `value` is a number.
    * - `locale` is a `string` defining the locale to use.
    * - `digitInfo` See {@link DecimalPipe} for more details.
    *
    * @publicApi
    */
export declare function formatPercent(value: number, locale: string, digitsInfo?: string): string;
/**
    * @ngModule CommonModule
    * @description
    *
    * Formats a number as text. Group sizing and separator and other locale-specific
    * configurations are based on the locale.
    *
    * Where:
    * - `value` is a number.
    * - `locale` is a `string` defining the locale to use.
    * - `digitInfo` See {@link DecimalPipe} for more details.
    *
    * @publicApi
    */
export declare function formatNumber(value: number, locale: string, digitsInfo?: string): string;
export declare function parseIntAutoRadix(text: string): number;

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { InjectionToken } from '@angular/core';
import { Plural } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/i18n/locale_data_api';
/**
    * @deprecated from v5
    */
export declare const DEPRECATED_PLURAL_FN: InjectionToken<boolean>;
/**
    * @publicApi
    */
export declare abstract class NgLocalization {
        abstract getPluralCategory(value: any, locale?: string): string;
}
/**
    * Returns the plural category for a given value.
    * - "=value" when the case exists,
    * - the plural category otherwise
    */
export declare function getPluralCategory(value: number, cases: string[], ngLocalization: NgLocalization, locale?: string): string;
/**
    * Returns the plural case based on the locale
    *
    * @publicApi
    */
export declare class NgLocaleLocalization extends NgLocalization {
        protected locale: string;
        /** @deprecated from v5 */
        protected deprecatedPluralFn?: ((locale: string, value: string | number) => Plural) | null | undefined;
        constructor(locale: string, 
        /** @deprecated from v5 */
        deprecatedPluralFn?: ((locale: string, value: string | number) => Plural) | null | undefined);
        getPluralCategory(value: any, locale?: string): string;
}
/**
    * Returns the plural case based on the locale
    *
    * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts
    * @publicApi
    */
export declare function getPluralCase(locale: string, nLike: number | string): Plural;

/**
    * The different format styles that can be used to represent numbers.
    * Used by the function {@link getLocaleNumberFormat}.
    *
    * @publicApi
    */
export declare enum NumberFormatStyle {
        Decimal = 0,
        Percent = 1,
        Currency = 2,
        Scientific = 3
}
/** @publicApi */
export declare enum Plural {
        Zero = 0,
        One = 1,
        Two = 2,
        Few = 3,
        Many = 4,
        Other = 5
}
/**
    * Some languages use two different forms of strings (standalone and format) depending on the
    * context.
    * Typically the standalone version is the nominative form of the word, and the format version is in
    * the genitive.
    * See [the CLDR website](http://cldr.unicode.org/translation/date-time) for more information.
    *
    * @publicApi
    */
export declare enum FormStyle {
        Format = 0,
        Standalone = 1
}
/**
    * Multiple widths are available for translations: narrow (1 character), abbreviated (3 characters),
    * wide (full length), and short (2 characters, only for days).
    *
    * For example the day `Sunday` will be:
    * - Narrow: `S`
    * - Short: `Su`
    * - Abbreviated: `Sun`
    * - Wide: `Sunday`
    *
    * @publicApi
    */
export declare enum TranslationWidth {
        Narrow = 0,
        Abbreviated = 1,
        Wide = 2,
        Short = 3
}
/**
    * Multiple widths are available for formats: short (minimal amount of data), medium (small amount
    * of data), long (complete amount of data), full (complete amount of data and extra information).
    *
    * For example the date-time formats for the english locale will be:
    *  - `'short'`: `'M/d/yy, h:mm a'` (e.g. `6/15/15, 9:03 AM`)
    *  - `'medium'`: `'MMM d, y, h:mm:ss a'` (e.g. `Jun 15, 2015, 9:03:01 AM`)
    *  - `'long'`: `'MMMM d, y, h:mm:ss a z'` (e.g. `June 15, 2015 at 9:03:01 AM GMT+1`)
    *  - `'full'`: `'EEEE, MMMM d, y, h:mm:ss a zzzz'` (e.g. `Monday, June 15, 2015 at
    * 9:03:01 AM GMT+01:00`)
    *
    * @publicApi
    */
export declare enum FormatWidth {
        Short = 0,
        Medium = 1,
        Long = 2,
        Full = 3
}
/**
    * Number symbol that can be used to replace placeholders in number patterns.
    * The placeholders are based on english values:
    *
    * | Name                   | Example for en-US | Meaning                                     |
    * |------------------------|-------------------|---------------------------------------------|
    * | decimal                | 2,345`.`67        | decimal separator                           |
    * | group                  | 2`,`345.67        | grouping separator, typically for thousands |
    * | plusSign               | `+`23             | the plus sign used with numbers             |
    * | minusSign              | `-`23             | the minus sign used with numbers            |
    * | percentSign            | 23.4`%`           | the percent sign (out of 100)               |
    * | perMille               | 234`‰`            | the permille sign (out of 1000)             |
    * | exponential            | 1.2`E`3           | used in computers for 1.2×10³.              |
    * | superscriptingExponent | 1.2`×`103         | human-readable format of exponential        |
    * | infinity               | `∞`               | used in +∞ and -∞.                          |
    * | nan                    | `NaN`             | "not a number".                             |
    * | timeSeparator          | 10`:`52           | symbol used between time units              |
    * | currencyDecimal        | $2,345`.`67       | decimal separator, fallback to "decimal"    |
    * | currencyGroup          | $2`,`345.67       | grouping separator, fallback to "group"     |
    *
    * @publicApi
    */
export declare enum NumberSymbol {
        Decimal = 0,
        Group = 1,
        List = 2,
        PercentSign = 3,
        PlusSign = 4,
        MinusSign = 5,
        Exponential = 6,
        SuperscriptingExponent = 7,
        PerMille = 8,
        Infinity = 9,
        NaN = 10,
        TimeSeparator = 11,
        CurrencyDecimal = 12,
        CurrencyGroup = 13
}
/**
    * The value for each day of the week, based on the en-US locale
    *
    * @publicApi
    */
export declare enum WeekDay {
        Sunday = 0,
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6
}
/**
    * The locale id for the chosen locale (e.g `en-GB`).
    *
    * @publicApi
    */
export declare function getLocaleId(locale: string): string;
/**
    * Periods of the day (e.g. `[AM, PM]` for en-US).
    *
    * @publicApi
    */
export declare function getLocaleDayPeriods(locale: string, formStyle: FormStyle, width: TranslationWidth): [string, string];
/**
    * Days of the week for the Gregorian calendar (e.g. `[Sunday, Monday, ... Saturday]` for en-US).
    *
    * @publicApi
    */
export declare function getLocaleDayNames(locale: string, formStyle: FormStyle, width: TranslationWidth): string[];
/**
    * Months of the year for the Gregorian calendar (e.g. `[January, February, ...]` for en-US).
    *
    * @publicApi
    */
export declare function getLocaleMonthNames(locale: string, formStyle: FormStyle, width: TranslationWidth): string[];
/**
    * Eras for the Gregorian calendar (e.g. AD/BC).
    *
    * @publicApi
    */
export declare function getLocaleEraNames(locale: string, width: TranslationWidth): [string, string];
/**
    * First day of the week for this locale, based on english days (Sunday = 0, Monday = 1, ...).
    * For example in french the value would be 1 because the first day of the week is Monday.
    *
    * @publicApi
    */
export declare function getLocaleFirstDayOfWeek(locale: string): WeekDay;
/**
    * Range of days in the week that represent the week-end for this locale, based on english days
    * (Sunday = 0, Monday = 1, ...).
    * For example in english the value would be [6,0] for Saturday to Sunday.
    *
    * @publicApi
    */
export declare function getLocaleWeekEndRange(locale: string): [WeekDay, WeekDay];
/**
    * Date format that depends on the locale.
    *
    * There are four basic date formats:
    * - `full` should contain long-weekday (EEEE), year (y), long-month (MMMM), day (d).
    *
    *  For example, English uses `EEEE, MMMM d, y`, corresponding to a date like
    *  "Tuesday, September 14, 1999".
    *
    * - `long` should contain year, long-month, day.
    *
    *  For example, `MMMM d, y`, corresponding to a date like "September 14, 1999".
    *
    * - `medium` should contain year, abbreviated-month (MMM), day.
    *
    *  For example, `MMM d, y`, corresponding to a date like "Sep 14, 1999".
    *  For languages that do not use abbreviated months, use the numeric month (MM/M). For example,
    *  `y/MM/dd`, corresponding to a date like "1999/09/14".
    *
    * - `short` should contain year, numeric-month (MM/M), and day.
    *
    *  For example, `M/d/yy`, corresponding to a date like "9/14/99".
    *
    * @publicApi
    */
export declare function getLocaleDateFormat(locale: string, width: FormatWidth): string;
/**
    * Time format that depends on the locale.
    *
    * The standard formats include four basic time formats:
    * - `full` should contain hour (h/H), minute (mm), second (ss), and zone (zzzz).
    * - `long` should contain hour, minute, second, and zone (z)
    * - `medium` should contain hour, minute, second.
    * - `short` should contain hour, minute.
    *
    * Note: The patterns depend on whether the main country using your language uses 12-hour time or
    * not:
    * - For 12-hour time, use a pattern like `hh:mm a` using h to mean a 12-hour clock cycle running
    * 1 through 12 (midnight plus 1 minute is 12:01), or using K to mean a 12-hour clock cycle
    * running 0 through 11 (midnight plus 1 minute is 0:01).
    * - For 24-hour time, use a pattern like `HH:mm` using H to mean a 24-hour clock cycle running 0
    * through 23 (midnight plus 1 minute is 0:01), or using k to mean a 24-hour clock cycle running
    * 1 through 24 (midnight plus 1 minute is 24:01).
    *
    * @publicApi
    */
export declare function getLocaleTimeFormat(locale: string, width: FormatWidth): string;
/**
    * Date-time format that depends on the locale.
    *
    * The date-time pattern shows how to combine separate patterns for date (represented by {1})
    * and time (represented by {0}) into a single pattern. It usually doesn't need to be changed.
    * What you want to pay attention to are:
    * - possibly removing a space for languages that don't use it, such as many East Asian languages
    * - possibly adding a comma, other punctuation, or a combining word
    *
    * For example:
    * - English uses `{1} 'at' {0}` or `{1}, {0}` (depending on date style), while Japanese uses
    *  `{1}{0}`.
    * - An English formatted date-time using the combining pattern `{1}, {0}` could be
    *  `Dec 10, 2010, 3:59:49 PM`. Notice the comma and space between the date portion and the time
    *  portion.
    *
    * There are four formats (`full`, `long`, `medium`, `short`); the determination of which to use
    * is normally based on the date style. For example, if the date has a full month and weekday
    * name, the full combining pattern will be used to combine that with a time. If the date has
    * numeric month, the short version of the combining pattern will be used to combine that with a
    * time. English uses `{1} 'at' {0}` for full and long styles, and `{1}, {0}` for medium and short
    * styles.
    *
    * @publicApi
    */
export declare function getLocaleDateTimeFormat(locale: string, width: FormatWidth): string;
/**
    * Number symbol that can be used to replace placeholders in number formats.
    * See {@link NumberSymbol} for more information.
    *
    * @publicApi
    */
export declare function getLocaleNumberSymbol(locale: string, symbol: NumberSymbol): string;
/**
    * Number format that depends on the locale.
    *
    * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`
    * when used to format the number 12345.678 could result in "12'345,67". That would happen if the
    * grouping separator for your language is an apostrophe, and the decimal separator is a comma.
    *
    * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders;
    * they stand for the decimal separator, and so on, and are NOT real characters.
    * You must NOT "translate" the placeholders; for example, don't change `.` to `,` even though in
    * your language the decimal point is written with a comma. The symbols should be replaced by the
    * local equivalents, using the Number Symbols for your language.
    *
    * Here are the special characters used in number patterns:
    *
    * | Symbol | Meaning |
    * |--------|---------|
    * | . | Replaced automatically by the character used for the decimal point. |
    * | , | Replaced by the "grouping" (thousands) separator. |
    * | 0 | Replaced by a digit (or zero if there aren't enough digits). |
    * | # | Replaced by a digit (or nothing if there aren't enough). |
    * | ¤ | This will be replaced by a currency symbol, such as $ or USD. |
    * | % | This marks a percent format. The % symbol may change position, but must be retained. |
    * | E | This marks a scientific format. The E symbol may change position, but must be retained. |
    * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |
    *
    * You can find more information
    * [on the CLDR website](http://cldr.unicode.org/translation/number-patterns)
    *
    * @publicApi
    */
export declare function getLocaleNumberFormat(locale: string, type: NumberFormatStyle): string;
/**
    * The symbol used to represent the currency for the main country using this locale (e.g. $ for
    * the locale en-US).
    * The symbol will be `null` if the main country cannot be determined.
    *
    * @publicApi
    */
export declare function getLocaleCurrencySymbol(locale: string): string | null;
/**
    * The name of the currency for the main country using this locale (e.g. 'US Dollar' for the locale
    * en-US).
    * The name will be `null` if the main country cannot be determined.
    *
    * @publicApi
    */
export declare function getLocaleCurrencyName(locale: string): string | null;
/**
    * The locale plural function used by ICU expressions to determine the plural case to use.
    * See {@link NgPlural} for more information.
    *
    * @publicApi
    */
export declare function getLocalePluralCase(locale: string): (value: number) => Plural;
/**
    * Rules used to determine which day period to use (See `dayPeriods` below).
    * The rules can either be an array or a single value. If it's an array, consider it as "from"
    * and "to". If it's a single value then it means that the period is only valid at this exact
    * value.
    * There is always the same number of rules as the number of day periods, which means that the
    * first rule is applied to the first day period and so on.
    * You should fallback to AM/PM when there are no rules available.
    *
    * Note: this is only available if you load the full locale data.
    * See the ["I18n guide"](guide/i18n#i18n-pipes) to know how to import additional locale
    * data.
    *
    * @publicApi
    */
export declare function getLocaleExtraDayPeriodRules(locale: string): (Time | [Time, Time])[];
/**
    * Day Periods indicate roughly how the day is broken up in different languages (e.g. morning,
    * noon, afternoon, midnight, ...).
    * You should use the function {@link getLocaleExtraDayPeriodRules} to determine which period to
    * use.
    * You should fallback to AM/PM when there are no day periods available.
    *
    * Note: this is only available if you load the full locale data.
    * See the ["I18n guide"](guide/i18n#i18n-pipes) to know how to import additional locale
    * data.
    *
    * @publicApi
    */
export declare function getLocaleExtraDayPeriods(locale: string, formStyle: FormStyle, width: TranslationWidth): string[];
/**
    * A representation of the time with hours and minutes
    *
    * @publicApi
    */
export declare type Time = {
        hours: number;
        minutes: number;
};
/**
    * Finds the locale data for a locale id
    *
    * @publicApi
    */
export declare function findLocaleData(locale: string): any;
/**
    * Returns the currency symbol for a given currency code, or the code if no symbol available
    * (e.g.: format narrow = $, format wide = US$, code = USD)
    * If no locale is provided, it uses the locale "en" by default
    *
    * @publicApi
    */
export declare function getCurrencySymbol(code: string, format: 'wide' | 'narrow', locale?: string): string;
/**
    * Returns the number of decimal digits for the given currency.
    * Its value depends upon the presence of cents in that particular currency.
    *
    * @publicApi
    */
export declare function getNumberOfCurrencyDigits(code: string): number;

/**
  * @license
  * Copyright Google Inc. All Rights Reserved.
  *
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
export declare function parseCookieValue(cookieStr: string, name: string): string | null;

/**
    * Exports all the basic Angular directives and pipes,
    * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.
    * Re-exported by `BrowserModule`, which is included automatically in the root
    * `AppModule` when you create a new app with the CLI `new` command.
    *
    * * The `providers` options configure the NgModule's injector to provide
    * localization dependencies to members.
    * * The `exports` options make the declared directives and pipes available for import
    * by other NgModules.
    *
    * @publicApi
    */
export declare class CommonModule {
}
/**
    * A module that contains the deprecated i18n pipes.
    *
    * @deprecated from v5
    * @publicApi
    */
export declare class DeprecatedI18NPipesModule {
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { Provider } from '@angular/core';
import { NgClass } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/directives/ng_class';
import { NgComponentOutlet } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/directives/ng_component_outlet';
import { NgForOf, NgForOfContext } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/directives/ng_for_of';
import { NgIf, NgIfContext } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/directives/ng_if';
import { NgPlural, NgPluralCase } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/directives/ng_plural';
import { NgStyle } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/directives/ng_style';
import { NgSwitch, NgSwitchCase, NgSwitchDefault } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/directives/ng_switch';
import { NgTemplateOutlet } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/directives/ng_template_outlet';
export { NgClass, NgComponentOutlet, NgForOf, NgForOfContext, NgIf, NgIfContext, NgPlural, NgPluralCase, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgTemplateOutlet };
/**
    * A collection of Angular directives that are likely to be used in each and every Angular
    * application.
    */
export declare const COMMON_DIRECTIVES: Provider[];

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { InjectionToken } from '@angular/core';
/**
    * A DI Token representing the main rendering context. In a browser this is the DOM Document.
    *
    * Note: Document might not be available in the Application Context when Application and Rendering
    * Contexts are not the same (e.g. when running the application into a Web Worker).
    *
    * @publicApi
    */
export declare const DOCUMENT: InjectionToken<Document>;

/**
    * @module
    * @description
    * This module provides a set of common Pipes.
    */
import { AsyncPipe } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/pipes/async_pipe';
import { LowerCasePipe, TitleCasePipe, UpperCasePipe } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/pipes/case_conversion_pipes';
import { DatePipe } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/pipes/date_pipe';
import { I18nPluralPipe } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/pipes/i18n_plural_pipe';
import { I18nSelectPipe } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/pipes/i18n_select_pipe';
import { JsonPipe } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/pipes/json_pipe';
import { KeyValue, KeyValuePipe } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/pipes/keyvalue_pipe';
import { CurrencyPipe, DecimalPipe, PercentPipe } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/pipes/number_pipe';
import { SlicePipe } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/pipes/slice_pipe';
export { AsyncPipe, CurrencyPipe, DatePipe, DecimalPipe, KeyValue, KeyValuePipe, I18nPluralPipe, I18nSelectPipe, JsonPipe, LowerCasePipe, PercentPipe, SlicePipe, TitleCasePipe, UpperCasePipe, };
/**
    * A collection of Angular pipes that are likely to be used in each and every application.
    */
export declare const COMMON_PIPES: (typeof AsyncPipe | typeof SlicePipe | typeof DecimalPipe | typeof PercentPipe | typeof CurrencyPipe | typeof DatePipe | typeof I18nPluralPipe | typeof I18nSelectPipe | typeof KeyValuePipe)[];

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { Provider } from '@angular/core';
import { DeprecatedDatePipe } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/pipes/deprecated/date_pipe';
import { DeprecatedCurrencyPipe, DeprecatedDecimalPipe, DeprecatedPercentPipe } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/pipes/deprecated/number_pipe';
export { DeprecatedCurrencyPipe, DeprecatedDatePipe, DeprecatedDecimalPipe, DeprecatedPercentPipe, };
/**
    * A collection of deprecated i18n pipes that require intl api
    *
    * @deprecated from v5
    */
export declare const COMMON_DEPRECATED_I18N_PIPES: Provider[];

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
export declare const PLATFORM_BROWSER_ID = "browser";
export declare const PLATFORM_SERVER_ID = "server";
export declare const PLATFORM_WORKER_APP_ID = "browserWorkerApp";
export declare const PLATFORM_WORKER_UI_ID = "browserWorkerUi";
/**
    * Returns whether a platform id represents a browser platform.
    * @publicApi
    */
export declare function isPlatformBrowser(platformId: Object): boolean;
/**
    * Returns whether a platform id represents a server platform.
    * @publicApi
    */
export declare function isPlatformServer(platformId: Object): boolean;
/**
    * Returns whether a platform id represents a web worker app platform.
    * @publicApi
    */
export declare function isPlatformWorkerApp(platformId: Object): boolean;
/**
    * Returns whether a platform id represents a web worker UI platform.
    * @publicApi
    */
export declare function isPlatformWorkerUi(platformId: Object): boolean;

/**
    * @module
    * @description
    * Entry point for all public APIs of the common package.
    */
import { Version } from '@angular/core';
/**
    * @publicApi
    */
export declare const VERSION: Version;

/**
    * Manages the scroll position.
    *
    * @publicApi
    */
export declare abstract class ViewportScroller {
        /** @nocollapse */
        static ngInjectableDef: never;
        /**
            * Configures the top offset used when scrolling to an anchor.
            *
            * When given a tuple with two number, the service will always use the numbers.
            * When given a function, the service will invoke the function every time it restores scroll
            * position.
            */
        abstract setOffset(offset: [number, number] | (() => [number, number])): void;
        /**
            * Returns the current scroll position.
            */
        abstract getScrollPosition(): [number, number];
        /**
            * Sets the scroll position.
            */
        abstract scrollToPosition(position: [number, number]): void;
        /**
            * Scrolls to the provided anchor.
            */
        abstract scrollToAnchor(anchor: string): void;
        /**
            *
            * Disables automatic scroll restoration provided by the browser.
            *
            * See also [window.history.scrollRestoration
            * info](https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration)
            */
        abstract setHistoryScrollRestoration(scrollRestoration: 'auto' | 'manual'): void;
}
/**
    * Manages the scroll position.
    */
export declare class BrowserViewportScroller implements ViewportScroller {
        constructor(document: any, window: any);
        /**
            * Configures the top offset used when scrolling to an anchor.
            *
            * * When given a number, the service will always use the number.
            * * When given a function, the service will invoke the function every time it restores scroll
            * position.
            */
        setOffset(offset: [number, number] | (() => [number, number])): void;
        /**
            * Returns the current scroll position.
            */
        getScrollPosition(): [number, number];
        /**
            * Sets the scroll position.
            */
        scrollToPosition(position: [number, number]): void;
        /**
            * Scrolls to the provided anchor.
            */
        scrollToAnchor(anchor: string): void;
        /**
            * Disables automatic scroll restoration provided by the browser.
            */
        setHistoryScrollRestoration(scrollRestoration: 'auto' | 'manual'): void;
}
/**
    * Provides an empty implementation of the viewport scroller. This will
    * live in @angular/common as it will be used by both platform-server and platform-webworker.
    */
export declare class NullViewportScroller implements ViewportScroller {
        /**
            * Empty implementation
            */
        setOffset(offset: [number, number] | (() => [number, number])): void;
        /**
            * Empty implementation
            */
        getScrollPosition(): [number, number];
        /**
            * Empty implementation
            */
        scrollToPosition(position: [number, number]): void;
        /**
            * Empty implementation
            */
        scrollToAnchor(anchor: string): void;
        /**
            * Empty implementation
            */
        setHistoryScrollRestoration(scrollRestoration: 'auto' | 'manual'): void;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { InjectionToken } from '@angular/core';
/**
    * This class should not be used directly by an application developer. Instead, use
    * {@link Location}.
    *
    * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
    * agnostic.
    * This means that we can have different implementation of `PlatformLocation` for the different
    * platforms that angular supports. For example, `@angular/platform-browser` provides an
    * implementation specific to the browser environment, while `@angular/platform-webworker` provides
    * one suitable for use with web workers.
    *
    * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}
    * when they need to interact with the DOM apis like pushState, popState, etc...
    *
    * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly
    * by the {@link Router} in order to navigate between routes. Since all interactions between {@link
    * Router} /
    * {@link Location} / {@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
    * class they are all platform independent.
    *
    * @publicApi
    */
export declare abstract class PlatformLocation {
        abstract getBaseHrefFromDOM(): string;
        abstract onPopState(fn: LocationChangeListener): void;
        abstract onHashChange(fn: LocationChangeListener): void;
        abstract readonly pathname: string;
        abstract readonly search: string;
        abstract readonly hash: string;
        abstract replaceState(state: any, title: string, url: string): void;
        abstract pushState(state: any, title: string, url: string): void;
        abstract forward(): void;
        abstract back(): void;
}
/**
    * @description
    * Indicates when a location is initialized.
    *
    * @publicApi
    */
export declare const LOCATION_INITIALIZED: InjectionToken<Promise<any>>;
/**
    * @description
    * A serializable version of the event from `onPopState` or `onHashChange`
    *
    * @publicApi
    */
export interface LocationChangeEvent {
        type: string;
        state: any;
}
/**
    * @publicApi
    */
export interface LocationChangeListener {
        (event: LocationChangeEvent): any;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { InjectionToken } from '@angular/core';
import { LocationChangeListener } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/location/platform_location';
/**
    * `LocationStrategy` is responsible for representing and reading route state
    * from the browser's URL. Angular provides two strategies:
    * {@link HashLocationStrategy} and {@link PathLocationStrategy}.
    *
    * This is used under the hood of the {@link Location} service.
    *
    * Applications should use the {@link Router} or {@link Location} services to
    * interact with application route state.
    *
    * For instance, {@link HashLocationStrategy} produces URLs like
    * `http://example.com#/foo`, and {@link PathLocationStrategy} produces
    * `http://example.com/foo` as an equivalent URL.
    *
    * See these two classes for more.
    *
    * @publicApi
    */
export declare abstract class LocationStrategy {
        abstract path(includeHash?: boolean): string;
        abstract prepareExternalUrl(internal: string): string;
        abstract pushState(state: any, title: string, url: string, queryParams: string): void;
        abstract replaceState(state: any, title: string, url: string, queryParams: string): void;
        abstract forward(): void;
        abstract back(): void;
        abstract onPopState(fn: LocationChangeListener): void;
        abstract getBaseHref(): string;
}
/**
    * The `APP_BASE_HREF` token represents the base href to be used with the
    * {@link PathLocationStrategy}.
    *
    * If you're using {@link PathLocationStrategy}, you must provide a provider to a string
    * representing the URL prefix that should be preserved when generating and recognizing
    * URLs.
    *
    * @usageNotes
    *
    * ### Example
    *
    * ```typescript
    * import {Component, NgModule} from '@angular/core';
    * import {APP_BASE_HREF} from '@angular/common';
    *
    * @NgModule({
    *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
    * })
    * class AppModule {}
    * ```
    *
    * @publicApi
    */
export declare const APP_BASE_HREF: InjectionToken<string>;

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { LocationStrategy } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/location/location_strategy';
import { LocationChangeListener, PlatformLocation } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/location/platform_location';
/**
    * @description
    * A {@link LocationStrategy} used to configure the {@link Location} service to
    * represent its state in the
    * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
    * of the browser's URL.
    *
    * For instance, if you call `location.go('/foo')`, the browser's URL will become
    * `example.com#/foo`.
    *
    * @usageNotes
    *
    * ### Example
    *
    * {@example common/location/ts/hash_location_component.ts region='LocationComponent'}
    *
    * @publicApi
    */
export declare class HashLocationStrategy extends LocationStrategy {
        constructor(_platformLocation: PlatformLocation, _baseHref?: string);
        onPopState(fn: LocationChangeListener): void;
        getBaseHref(): string;
        path(includeHash?: boolean): string;
        prepareExternalUrl(internal: string): string;
        pushState(state: any, title: string, path: string, queryParams: string): void;
        replaceState(state: any, title: string, path: string, queryParams: string): void;
        forward(): void;
        back(): void;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { LocationStrategy } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/location/location_strategy';
import { LocationChangeListener, PlatformLocation } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/location/platform_location';
/**
    * @description
    * A {@link LocationStrategy} used to configure the {@link Location} service to
    * represent its state in the
    * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
    * browser's URL.
    *
    * If you're using `PathLocationStrategy`, you must provide a {@link APP_BASE_HREF}
    * or add a base element to the document. This URL prefix that will be preserved
    * when generating and recognizing URLs.
    *
    * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
    * `location.go('/foo')`, the browser's URL will become
    * `example.com/my/app/foo`.
    *
    * Similarly, if you add `<base href='/my/app'/>` to the document and call
    * `location.go('/foo')`, the browser's URL will become
    * `example.com/my/app/foo`.
    *
    * @usageNotes
    *
    * ### Example
    *
    * {@example common/location/ts/path_location_component.ts region='LocationComponent'}
    *
    * @publicApi
    */
export declare class PathLocationStrategy extends LocationStrategy {
        constructor(_platformLocation: PlatformLocation, href?: string);
        onPopState(fn: LocationChangeListener): void;
        getBaseHref(): string;
        prepareExternalUrl(internal: string): string;
        path(includeHash?: boolean): string;
        pushState(state: any, title: string, url: string, queryParams: string): void;
        replaceState(state: any, title: string, url: string, queryParams: string): void;
        forward(): void;
        back(): void;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { SubscriptionLike } from 'rxjs';
import { LocationStrategy } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/location/location_strategy';
/** @publicApi */
export interface PopStateEvent {
        pop?: boolean;
        state?: any;
        type?: string;
        url?: string;
}
/**
    * @description
    *
    * A service that applications can use to interact with a browser's URL.
    *
    * Depending on which {@link LocationStrategy} is used, `Location` will either persist
    * to the URL's path or the URL's hash segment.
    *
    * @usageNotes
    *
    * It's better to use {@link Router#navigate} service to trigger route changes. Use
    * `Location` only if you need to interact with or create normalized URLs outside of
    * routing.
    *
    * `Location` is responsible for normalizing the URL against the application's base href.
    * A normalized URL is absolute from the URL host, includes the application's base href, and has no
    * trailing slash:
    * - `/my/app/user/123` is normalized
    * - `my/app/user/123` **is not** normalized
    * - `/my/app/user/123/` **is not** normalized
    *
    * ### Example
    *
    * {@example common/location/ts/path_location_component.ts region='LocationComponent'}
    *
    * @publicApi
    */
export declare class Location {
        constructor(platformStrategy: LocationStrategy);
        /**
            * Returns the normalized URL path.
            */
        path(includeHash?: boolean): string;
        /**
            * Normalizes the given path and compares to the current normalized path.
            */
        isCurrentPathEqualTo(path: string, query?: string): boolean;
        /**
            * Given a string representing a URL, returns the normalized URL path without leading or
            * trailing slashes.
            */
        normalize(url: string): string;
        /**
            * Given a string representing a URL, returns the platform-specific external URL path.
            * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
            * before normalizing. This method will also add a hash if `HashLocationStrategy` is
            * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
            */
        prepareExternalUrl(url: string): string;
        /**
            * Changes the browsers URL to the normalized version of the given URL, and pushes a
            * new item onto the platform's history.
            */
        go(path: string, query?: string, state?: any): void;
        /**
            * Changes the browsers URL to the normalized version of the given URL, and replaces
            * the top item on the platform's history stack.
            */
        replaceState(path: string, query?: string, state?: any): void;
        /**
            * Navigates forward in the platform's history.
            */
        forward(): void;
        /**
            * Navigates back in the platform's history.
            */
        back(): void;
        /**
            * Subscribe to the platform's `popState` events.
            */
        subscribe(onNext: (value: PopStateEvent) => void, onThrow?: ((exception: any) => void) | null, onReturn?: (() => void) | null): SubscriptionLike;
        /**
            * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as
            * is.
            */
        static normalizeQueryParams(params: string): string;
        /**
            * Given 2 parts of a url, join them with a slash if needed.
            */
        static joinWithSlash(start: string, end: string): string;
        /**
            * If url has a trailing slash, remove it, otherwise return url as is. This
            * method looks for the first occurrence of either #, ?, or the end of the
            * line as `/` characters after any of these should not be replaced.
            */
        static stripTrailingSlash(url: string): string;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { DoCheck, ElementRef, IterableDiffers, KeyValueDiffers, Renderer2 } from '@angular/core';
/**
    * @ngModule CommonModule
    *
    * @usageNotes
    * ```
    *     <some-element [ngClass]="'first second'">...</some-element>
    *
    *     <some-element [ngClass]="['first', 'second']">...</some-element>
    *
    *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
    *
    *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
    *
    *     <some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>
    * ```
    *
    * @description
    *
    * Adds and removes CSS classes on an HTML element.
    *
    * The CSS classes are updated as follows, depending on the type of the expression evaluation:
    * - `string` - the CSS classes listed in the string (space delimited) are added,
    * - `Array` - the CSS classes declared as Array elements are added,
    * - `Object` - keys are CSS classes that get added when the expression given in the value
    *              evaluates to a truthy value, otherwise they are removed.
    *
    * @publicApi
    */
export declare class NgClass implements DoCheck {
        constructor(_iterableDiffers: IterableDiffers, _keyValueDiffers: KeyValueDiffers, _ngEl: ElementRef, _renderer: Renderer2);
        klass: string;
        ngClass: string | string[] | Set<string> | {
                [klass: string]: any;
        };
        ngDoCheck(): void;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { Injector, NgModuleFactory, OnChanges, OnDestroy, SimpleChanges, Type, ViewContainerRef } from '@angular/core';
/**
    * Instantiates a single {@link Component} type and inserts its Host View into current View.
    * `NgComponentOutlet` provides a declarative approach for dynamic component creation.
    *
    * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and
    * any existing component will get destroyed.
    *
    * @usageNotes
    *
    * ### Fine tune control
    *
    * You can control the component creation process by using the following optional attributes:
    *
    * * `ngComponentOutletInjector`: Optional custom {@link Injector} that will be used as parent for
    * the Component. Defaults to the injector of the current view container.
    *
    * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content
    * section of the component, if exists.
    *
    * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other
    * module, then load a component from that module.
    *
    * ### Syntax
    *
    * Simple
    * ```
    * <ng-container *ngComponentOutlet="componentTypeExpression"></ng-container>
    * ```
    *
    * Customized injector/content
    * ```
    * <ng-container *ngComponentOutlet="componentTypeExpression;
    *                                   injector: injectorExpression;
    *                                   content: contentNodesExpression;">
    * </ng-container>
    * ```
    *
    * Customized ngModuleFactory
    * ```
    * <ng-container *ngComponentOutlet="componentTypeExpression;
    *                                   ngModuleFactory: moduleFactory;">
    * </ng-container>
    * ```
    *
    * ### A simple example
    *
    * {@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}
    *
    * A more complete example with additional options:
    *
    * {@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}

    * A more complete example with ngModuleFactory:
    *
    * {@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}
    *
    * @publicApi
    * @ngModule CommonModule
    */
export declare class NgComponentOutlet implements OnChanges, OnDestroy {
        ngComponentOutlet: Type<any>;
        ngComponentOutletInjector: Injector;
        ngComponentOutletContent: any[][];
        ngComponentOutletNgModuleFactory: NgModuleFactory<any>;
        constructor(_viewContainerRef: ViewContainerRef);
        ngOnChanges(changes: SimpleChanges): void;
        ngOnDestroy(): void;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { DoCheck, IterableDiffers, NgIterable, TemplateRef, TrackByFunction, ViewContainerRef } from '@angular/core';
/**
    * @publicApi
    */
export declare class NgForOfContext<T> {
        $implicit: T;
        ngForOf: NgIterable<T>;
        index: number;
        count: number;
        constructor($implicit: T, ngForOf: NgIterable<T>, index: number, count: number);
        readonly first: boolean;
        readonly last: boolean;
        readonly even: boolean;
        readonly odd: boolean;
}
/**
    * The `NgForOf` directive instantiates a template once per item from an iterable. The context
    * for each instantiated template inherits from the outer context with the given loop variable
    * set to the current item from the iterable.
    *
    * @usageNotes
    *
    * ### Local Variables
    *
    * `NgForOf` provides several exported values that can be aliased to local variables:
    *
    * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).
    * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is
    * more complex then a property access, for example when using the async pipe (`userStreams |
    * async`).
    * - `index: number`: The index of the current item in the iterable.
    * - `first: boolean`: True when the item is the first item in the iterable.
    * - `last: boolean`: True when the item is the last item in the iterable.
    * - `even: boolean`: True when the item has an even index in the iterable.
    * - `odd: boolean`: True when the item has an odd index in the iterable.
    *
    * ```
    * <li *ngFor="let user of userObservable | async as users; index as i; first as isFirst">
    *    {{i}}/{{users.length}}. {{user}} <span *ngIf="isFirst">default</span>
    * </li>
    * ```
    *
    * ### Change Propagation
    *
    * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:
    *
    * * When an item is added, a new instance of the template is added to the DOM.
    * * When an item is removed, its template instance is removed from the DOM.
    * * When items are reordered, their respective templates are reordered in the DOM.
    * * Otherwise, the DOM element for that item will remain the same.
    *
    * Angular uses object identity to track insertions and deletions within the iterator and reproduce
    * those changes in the DOM. This has important implications for animations and any stateful
    * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can
    * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state
    * such as user input.
    *
    * It is possible for the identities of elements in the iterator to change while the data does not.
    * This can happen, for example, if the iterator produced from an RPC to the server, and that
    * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
    * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
    * elements were deleted and all new elements inserted). This is an expensive operation and should
    * be avoided if possible.
    *
    * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.
    * `trackBy` takes a function which has two arguments: `index` and `item`.
    * If `trackBy` is given, Angular tracks changes by the return value of the function.
    *
    * ### Syntax
    *
    * - `<li *ngFor="let item of items; index as i; trackBy: trackByFn">...</li>`
    *
    * With `<ng-template>` element:
    *
    * ```
    * <ng-template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
    *   <li>...</li>
    * </ng-template>
    * ```
    *
    * ### Example
    *
    * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
    * example.
    *
    * @ngModule CommonModule
    * @publicApi
    */
export declare class NgForOf<T> implements DoCheck {
        ngForOf: NgIterable<T>;
        ngForTrackBy: TrackByFunction<T>;
        constructor(_viewContainer: ViewContainerRef, _template: TemplateRef<NgForOfContext<T>>, _differs: IterableDiffers);
        ngForTemplate: TemplateRef<NgForOfContext<T>>;
        ngDoCheck(): void;
        /**
            * Assert the correct type of the context for the template that `NgForOf` will render.
            *
            * The presence of this method is a signal to the Ivy template type check compiler that the
            * `NgForOf` structural directive renders its template with a specific context type.
            */
        static ngTemplateContextGuard<T>(dir: NgForOf<T>, ctx: any): ctx is NgForOfContext<T>;
}
export declare function getTypeNameForDebugging(type: any): string;

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { TemplateRef, ViewContainerRef } from '@angular/core';
/**
    * Conditionally includes a template based on the value of an `expression`.
    *
    * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place
    * when expression is truthy or falsy respectively. Typically the:
    *  - `then` template is the inline template of `ngIf` unless bound to a different value.
    *  - `else` template is blank unless it is bound.
    *
    *
    * @usageNotes
    *
    * ### Most common usage
    *
    * The most common usage of the `ngIf` directive is to conditionally show the inline template as
    * seen in this example:
    * {@example common/ngIf/ts/module.ts region='NgIfSimple'}
    *
    * ### Showing an alternative template using `else`
    *
    * If it is necessary to display a template when the `expression` is falsy use the `else` template
    * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.
    * The template can be defined anywhere in the component view but is typically placed right after
    * `ngIf` for readability.
    *
    * {@example common/ngIf/ts/module.ts region='NgIfElse'}
    *
    * ### Using non-inlined `then` template
    *
    * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using
    * a binding (just like `else`). Because `then` and `else` are bindings, the template references can
    * change at runtime as shown in this example.
    *
    * {@example common/ngIf/ts/module.ts region='NgIfThenElse'}
    *
    * ### Storing conditional result in a variable
    *
    * A common pattern is that we need to show a set of properties from the same object. If the
    * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against
    * dereferencing a `null` value. This is especially the case when waiting on async data such as
    * when using the `async` pipe as shown in following example:
    *
    * ```
    * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!
    * ```
    *
    * There are several inefficiencies in the above example:
    *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the
    *    example above.
    *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.
    *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.
    *  - We have to place the `async` pipe in parenthesis.
    *
    * A better way to do this is to use `ngIf` and store the result of the condition in a local
    * variable as shown in the the example below:
    *
    * {@example common/ngIf/ts/module.ts region='NgIfAs'}
    *
    * Notice that:
    *  - We use only one `async` pipe and hence only one subscription gets created.
    *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.
    *  - The local `user` can then be bound repeatedly in a more efficient way.
    *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only
    *    display the data if `userStream` returns a value.
    *  - We can display an alternative template while waiting for the data.
    *
    * ### Syntax
    *
    * Simple form:
    * - `<div *ngIf="condition">...</div>`
    * - `<ng-template [ngIf]="condition"><div>...</div></ng-template>`
    *
    * Form with an else block:
    * ```
    * <div *ngIf="condition; else elseBlock">...</div>
    * <ng-template #elseBlock>...</ng-template>
    * ```
    *
    * Form with a `then` and `else` block:
    * ```
    * <div *ngIf="condition; then thenBlock else elseBlock"></div>
    * <ng-template #thenBlock>...</ng-template>
    * <ng-template #elseBlock>...</ng-template>
    * ```
    *
    * Form with storing the value locally:
    * ```
    * <div *ngIf="condition as value; else elseBlock">{{value}}</div>
    * <ng-template #elseBlock>...</ng-template>
    * ```
    *
    * @ngModule CommonModule
    * @publicApi
    */
export declare class NgIf {
        constructor(_viewContainer: ViewContainerRef, templateRef: TemplateRef<NgIfContext>);
        ngIf: any;
        ngIfThen: TemplateRef<NgIfContext> | null;
        ngIfElse: TemplateRef<NgIfContext> | null;
        /**
            * Assert the correct type of the expression bound to the `ngIf` input within the template.
            *
            * The presence of this method is a signal to the Ivy template type check compiler that when the
            * `NgIf` structural directive renders its template, the type of the expression bound to `ngIf`
            * should be narrowed in some way. For `NgIf`, it is narrowed to be non-null, which allows the
            * strictNullChecks feature of TypeScript to work with `NgIf`.
            */
        static ngTemplateGuard_ngIf<E>(dir: NgIf, expr: E): expr is NonNullable<E>;
}
/**
    * @publicApi
    */
export declare class NgIfContext {
        $implicit: any;
        ngIf: any;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { TemplateRef, ViewContainerRef } from '@angular/core';
import { NgLocalization } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/i18n/localization';
import { SwitchView } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/directives/ng_switch';
/**
    * @ngModule CommonModule
    *
    * @usageNotes
    * ```
    * <some-element [ngPlural]="value">
    *   <ng-template ngPluralCase="=0">there is nothing</ng-template>
    *   <ng-template ngPluralCase="=1">there is one</ng-template>
    *   <ng-template ngPluralCase="few">there are a few</ng-template>
    * </some-element>
    * ```
    *
    * @description
    *
    * Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
    *
    * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
    * that match the switch expression's pluralization category.
    *
    * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
    * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
    * expression:
    * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
    *   matches the switch expression exactly,
    * - otherwise, the view will be treated as a "category match", and will only display if exact
    *   value matches aren't found and the value maps to its category for the defined locale.
    *
    * See http://cldr.unicode.org/index/cldr-spec/plural-rules
    *
    * @publicApi
    */
export declare class NgPlural {
        constructor(_localization: NgLocalization);
        ngPlural: number;
        addCase(value: string, switchView: SwitchView): void;
}
/**
    * @ngModule CommonModule
    *
    * @description
    *
    * Creates a view that will be added/removed from the parent {@link NgPlural} when the
    * given expression matches the plural expression according to CLDR rules.
    *
    * @usageNotes
    * ```
    * <some-element [ngPlural]="value">
    *   <ng-template ngPluralCase="=0">...</ng-template>
    *   <ng-template ngPluralCase="other">...</ng-template>
    * </some-element>
    *```
    *
    * See {@link NgPlural} for more details and example.
    *
    * @publicApi
    */
export declare class NgPluralCase {
        value: string;
        constructor(value: string, template: TemplateRef<Object>, viewContainer: ViewContainerRef, ngPlural: NgPlural);
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { DoCheck, ElementRef, KeyValueDiffers, Renderer2 } from '@angular/core';
/**
    * @ngModule CommonModule
    *
    * @usageNotes
    * ```
    * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
    *
    * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
    *
    * <some-element [ngStyle]="objExp">...</some-element>
    * ```
    *
    * @description
    *
    * Update an HTML element styles.
    *
    * The styles are updated according to the value of the expression evaluation:
    * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),
    * - values are the values assigned to those properties (expressed in the given unit).
    *
    * @publicApi
    */
export declare class NgStyle implements DoCheck {
        constructor(_differs: KeyValueDiffers, _ngEl: ElementRef, _renderer: Renderer2);
        ngStyle: {
                [key: string]: string;
        };
        ngDoCheck(): void;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { DoCheck, TemplateRef, ViewContainerRef } from '@angular/core';
export declare class SwitchView {
        constructor(_viewContainerRef: ViewContainerRef, _templateRef: TemplateRef<Object>);
        create(): void;
        destroy(): void;
        enforceState(created: boolean): void;
}
/**
    * @ngModule CommonModule
    *
    * @usageNotes
    * ```
    *     <container-element [ngSwitch]="switch_expression">
    *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
    *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
    *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
    *       <ng-container *ngSwitchCase="match_expression_3">
    *         <!-- use a ng-container to group multiple root nodes -->
    *         <inner-element></inner-element>
    *         <inner-other-element></inner-other-element>
    *       </ng-container>
    *       <some-element *ngSwitchDefault>...</some-element>
    *     </container-element>
    * ```
    * @description
    *
    * Adds / removes DOM sub-trees when the nest match expressions matches the switch expression.
    *
    * `NgSwitch` stamps out nested views when their match expression value matches the value of the
    * switch expression.
    *
    * In other words:
    * - you define a container element (where you place the directive with a switch expression on the
    * `[ngSwitch]="..."` attribute)
    * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view
    * root elements.
    *
    * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will
    * be preserved at the location.
    *
    * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the
    * expression is evaluated.
    * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is
    * stamped out.
    *
    * @publicApi
    */
export declare class NgSwitch {
        ngSwitch: any;
}
/**
    * @ngModule CommonModule
    *
    * @usageNotes
    * ```
    * <container-element [ngSwitch]="switch_expression">
    *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
    * </container-element>
    *```
    * @description
    *
    * Creates a view that will be added/removed from the parent {@link NgSwitch} when the
    * given expression evaluate to respectively the same/different value as the switch
    * expression.
    *
    * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch
    * expression.
    *
    * If multiple match expressions match the switch expression value, all of them are displayed.
    *
    * See {@link NgSwitch} for more details and example.
    *
    * @publicApi
    */
export declare class NgSwitchCase implements DoCheck {
        ngSwitchCase: any;
        constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>, ngSwitch: NgSwitch);
        ngDoCheck(): void;
}
/**
    * @ngModule CommonModule
    * @usageNotes
    * ```
    * <container-element [ngSwitch]="switch_expression">
    *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
    *   <some-other-element *ngSwitchDefault>...</some-other-element>
    * </container-element>
    * ```
    *
    * @description
    *
    * Creates a view that is added to the parent {@link NgSwitch} when no case expressions
    * match the switch expression.
    *
    * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch
    * expression.
    *
    * See {@link NgSwitch} for more details and example.
    *
    * @publicApi
    */
export declare class NgSwitchDefault {
        constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>, ngSwitch: NgSwitch);
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { OnChanges, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';
/**
    * @ngModule CommonModule
    *
    * @description
    *
    * Inserts an embedded view from a prepared `TemplateRef`.
    *
    * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.
    * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding
    * by the local template `let` declarations.
    *
    * @usageNotes
    * ```
    * <ng-container *ngTemplateOutlet="templateRefExp; context: contextExp"></ng-container>
    * ```
    *
    * Using the key `$implicit` in the context object will set its value as default.
    *
    * ### Example
    *
    * {@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}
    *
    * @publicApi
    */
export declare class NgTemplateOutlet implements OnChanges {
        ngTemplateOutletContext: Object;
        ngTemplateOutlet: TemplateRef<any>;
        constructor(_viewContainerRef: ViewContainerRef);
        ngOnChanges(changes: SimpleChanges): void;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { ChangeDetectorRef, OnDestroy, PipeTransform } from '@angular/core';
import { Observable } from 'rxjs';
/**
    * @ngModule CommonModule
    * @description
    *
    * Unwraps a value from an asynchronous primitive.
    *
    * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
    * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
    * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
    * potential memory leaks.
    *
    * @usageNotes
    *
    * ### Examples
    *
    * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
    * promise.
    *
    * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
    *
    * It's also possible to use `async` with Observables. The example below binds the `time` Observable
    * to the view. The Observable continuously updates the view with the current time.
    *
    * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
    *
    * @publicApi
    */
export declare class AsyncPipe implements OnDestroy, PipeTransform {
        constructor(_ref: ChangeDetectorRef);
        ngOnDestroy(): void;
        transform<T>(obj: null): null;
        transform<T>(obj: undefined): undefined;
        transform<T>(obj: Observable<T> | null | undefined): T | null;
        transform<T>(obj: Promise<T> | null | undefined): T | null;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { PipeTransform } from '@angular/core';
/**
    * Transforms text to all lower case.
    *
    * @see `UpperCasePipe`
    * @see `TitleCasePipe`
    * @usageNotes
    *
    * The following example defines a view that allows the user to enter
    * text, and then uses the pipe to convert the input text to all lower case.
    *
    * <code-example path="common/pipes/ts/lowerupper_pipe.ts" region='LowerUpperPipe'></code-example>
    *
    * @ngModule CommonModule
    * @publicApi
    */
export declare class LowerCasePipe implements PipeTransform {
        /**
            * @param value The string to transform to lower case.
            */
        transform(value: string): string;
}
/**
    * Transforms text to title case.
    * Capitalizes the first letter of each word, and transforms the
    * rest of the word to lower case.
    * Words are delimited by any whitespace character, such as a space, tab, or line-feed character.
    *
    * @see `LowerCasePipe`
    * @see `UpperCasePipe`
    *
    * @usageNotes
    * The following example shows the result of transforming various strings into title case.
    *
    * <code-example path="common/pipes/ts/titlecase_pipe.ts" region='TitleCasePipe'></code-example>
    *
    * @ngModule CommonModule
    * @publicApi
    */
export declare class TitleCasePipe implements PipeTransform {
        /**
            * @param value The string to transform to title case.
            */
        transform(value: string): string;
}
/**
    * Transforms text to all upper case.
    * @see `LowerCasePipe`
    * @see `TitleCasePipe`
    *
    * @ngModule CommonModule
    * @publicApi
    */
export declare class UpperCasePipe implements PipeTransform {
        /**
            * @param value The string to transform to upper case.
            */
        transform(value: string): string;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { PipeTransform } from '@angular/core';
/**
    * @ngModule CommonModule
    * @description
    *
    * Formats a date value according to locale rules.
    *
    * Only the `en-US` locale data comes with Angular. To localize dates
    * in another language, you must import the corresponding locale data.
    * See the [I18n guide](guide/i18n#i18n-pipes) for more information.
    *
    * @see `formatDate()`
    *
    *
    * @usageNotes
    *
    * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to
    * reformat the date on every change-detection cycle, treat the date as an immutable object
    * and change the reference when the pipe needs to run again.
    *
    * ### Pre-defined format options
    *
    * Examples are given in `en-US` locale.
    *
    * - `'short'`: equivalent to `'M/d/yy, h:mm a'` (`6/15/15, 9:03 AM`).
    * - `'medium'`: equivalent to `'MMM d, y, h:mm:ss a'` (`Jun 15, 2015, 9:03:01 AM`).
    * - `'long'`: equivalent to `'MMMM d, y, h:mm:ss a z'` (`June 15, 2015 at 9:03:01 AM
    * GMT+1`).
    * - `'full'`: equivalent to `'EEEE, MMMM d, y, h:mm:ss a zzzz'` (`Monday, June 15, 2015 at
    * 9:03:01 AM GMT+01:00`).
    * - `'shortDate'`: equivalent to `'M/d/yy'` (`6/15/15`).
    * - `'mediumDate'`: equivalent to `'MMM d, y'` (`Jun 15, 2015`).
    * - `'longDate'`: equivalent to `'MMMM d, y'` (`June 15, 2015`).
    * - `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` (`Monday, June 15, 2015`).
    * - `'shortTime'`: equivalent to `'h:mm a'` (`9:03 AM`).
    * - `'mediumTime'`: equivalent to `'h:mm:ss a'` (`9:03:01 AM`).
    * - `'longTime'`: equivalent to `'h:mm:ss a z'` (`9:03:01 AM GMT+1`).
    * - `'fullTime'`: equivalent to `'h:mm:ss a zzzz'` (`9:03:01 AM GMT+01:00`).
    *
    * ### Custom format options
    *
    * You can construct a format string using symbols to specify the components
    * of a date-time value, as described in the following table.
    * Format details depend on the locale.
    * Fields marked with (*) are only available in the extra data set for the given locale.
    *
    *  | Field type         | Format      | Description                                                   | Example Value                                              |
    *  |--------------------|-------------|---------------------------------------------------------------|------------------------------------------------------------|
    *  | Era                | G, GG & GGG | Abbreviated                                                   | AD                                                         |
    *  |                    | GGGG        | Wide                                                          | Anno Domini                                                |
    *  |                    | GGGGG       | Narrow                                                        | A                                                          |
    *  | Year               | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |
    *  |                    | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |
    *  |                    | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |
    *  |                    | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |
    *  | Month              | M           | Numeric: 1 digit                                              | 9, 12                                                      |
    *  |                    | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |
    *  |                    | MMM         | Abbreviated                                                   | Sep                                                        |
    *  |                    | MMMM        | Wide                                                          | September                                                  |
    *  |                    | MMMMM       | Narrow                                                        | S                                                          |
    *  | Month standalone   | L           | Numeric: 1 digit                                              | 9, 12                                                      |
    *  |                    | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |
    *  |                    | LLL         | Abbreviated                                                   | Sep                                                        |
    *  |                    | LLLL        | Wide                                                          | September                                                  |
    *  |                    | LLLLL       | Narrow                                                        | S                                                          |
    *  | Week of year       | w           | Numeric: minimum digits                                       | 1... 53                                                    |
    *  |                    | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |
    *  | Week of month      | W           | Numeric: 1 digit                                              | 1... 5                                                     |
    *  | Day of month       | d           | Numeric: minimum digits                                       | 1                                                          |
    *  |                    | dd          | Numeric: 2 digits + zero padded                               | 01                                                          |
    *  | Week day           | E, EE & EEE | Abbreviated                                                   | Tue                                                        |
    *  |                    | EEEE        | Wide                                                          | Tuesday                                                    |
    *  |                    | EEEEE       | Narrow                                                        | T                                                          |
    *  |                    | EEEEEE      | Short                                                         | Tu                                                         |
    *  | Period             | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |
    *  |                    | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |
    *  |                    | aaaaa       | Narrow                                                        | a/p                                                        |
    *  | Period*            | B, BB & BBB | Abbreviated                                                   | mid.                                                       |
    *  |                    | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |
    *  |                    | BBBBB       | Narrow                                                        | md                                                         |
    *  | Period standalone* | b, bb & bbb | Abbreviated                                                   | mid.                                                       |
    *  |                    | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |
    *  |                    | bbbbb       | Narrow                                                        | md                                                         |
    *  | Hour 1-12          | h           | Numeric: minimum digits                                       | 1, 12                                                      |
    *  |                    | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |
    *  | Hour 0-23          | H           | Numeric: minimum digits                                       | 0, 23                                                      |
    *  |                    | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |
    *  | Minute             | m           | Numeric: minimum digits                                       | 8, 59                                                      |
    *  |                    | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |
    *  | Second             | s           | Numeric: minimum digits                                       | 0... 59                                                    |
    *  |                    | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |
    *  | Fractional seconds | S           | Numeric: 1 digit                                              | 0... 9                                                     |
    *  |                    | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |
    *  |                    | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |
    *  | Zone               | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |
    *  |                    | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |
    *  |                    | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |
    *  |                    | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |
    *  |                    | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |
    *  |                    | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |
    *  |                    | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |
    *
    * Note that timezone correction is not applied to an ISO string that has no time component, such as "2016-09-19"
    *
    * ### Format examples
    *
    * These examples transform a date into various formats,
    * assuming that `dateObj` is a JavaScript `Date` object for
    * year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,
    * given in the local time for the `en-US` locale.
    *
    * ```
    * {{ dateObj | date }}               // output is 'Jun 15, 2015'
    * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
    * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
    * {{ dateObj | date:'mmss' }}        // output is '43:11'
    * ```
    *
    * ### Usage example
    *
    * The following component uses a date pipe to display the current date in different formats.
    *
    * ```
    * @Component({
    *  selector: 'date-pipe',
    *  template: `<div>
    *    <p>Today is {{today | date}}</p>
    *    <p>Or if you prefer, {{today | date:'fullDate'}}</p>
    *    <p>The time is {{today | date:'h:mm a z'}}</p>
    *  </div>`
    * })
    * // Get the current date and time as a date-time value.
    * export class DatePipeComponent {
    *   today: number = Date.now();
    * }
    * ```
    *
    * @publicApi
    */
export declare class DatePipe implements PipeTransform {
        constructor(locale: string);
        /**
            * @param value The date expression: a `Date` object,  a number
            * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).
            * @param format The date/time components to include, using predefined options or a
            * custom format string.
            * @param timezone A timezone offset (such as `'+0430'`), or a standard
            * UTC/GMT or continental US timezone abbreviation. Default is
            * the local system timezone of the end-user's machine.
            * @param locale A locale code for the locale format rules to use.
            * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
            * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
            * @returns A date string in the desired format.
            */
        transform(value: any, format?: string, timezone?: string, locale?: string): string | null;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { PipeTransform } from '@angular/core';
import { NgLocalization } from '@angular/common/--/--/--/--/--/node_modules/@angular/common/src/i18n/localization';
/**
    * @ngModule CommonModule
    * @description
    *
    * Maps a value to a string that pluralizes the value according to locale rules.
    *
    * @usageNotes
    *
    * ### Example
    *
    * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
    *
    * @publicApi
    */
export declare class I18nPluralPipe implements PipeTransform {
        constructor(_localization: NgLocalization);
        /**
            * @param value the number to be formatted
            * @param pluralMap an object that mimics the ICU format, see
            * http://userguide.icu-project.org/formatparse/messages.
            * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by
            * default).
            */
        transform(value: number, pluralMap: {
                [count: string]: string;
        }, locale?: string): string;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { PipeTransform } from '@angular/core';
/**
    * @ngModule CommonModule
    * @description
    *
    * Generic selector that displays the string that matches the current value.
    *
    * If none of the keys of the `mapping` match the `value`, then the content
    * of the `other` key is returned when present, otherwise an empty string is returned.
    *
    * @usageNotes
    *
    * ### Example
    *
    * {@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
    *
    * @publicApi
    */
export declare class I18nSelectPipe implements PipeTransform {
        /**
            * @param value a string to be internationalized.
            * @param mapping an object that indicates the text that should be displayed
            * for different values of the provided `value`.
            */
        transform(value: string | null | undefined, mapping: {
                [key: string]: string;
        }): string;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { PipeTransform } from '@angular/core';
/**
    * @ngModule CommonModule
    * @description
    *
    * Converts a value into its JSON-format representation.  Useful for debugging.
    *
    * @usageNotes
    *
    * The following component uses a JSON pipe to convert an object
    * to JSON format, and displays the string in both formats for comparison.
    *
    * {@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
    *
    * @publicApi
    */
export declare class JsonPipe implements PipeTransform {
        /**
            * @param value A value of any type to convert into a JSON-format string.
            */
        transform(value: any): string;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { KeyValueDiffers, PipeTransform } from '@angular/core';
/**
    * A key value pair.
    * Usually used to represent the key value pairs from a Map or Object.
    *
    * @publicApi
    */
export interface KeyValue<K, V> {
        key: K;
        value: V;
}
/**
    * @ngModule CommonModule
    * @description
    *
    * Transforms Object or Map into an array of key value pairs.
    *
    * The output array will be ordered by keys.
    * By default the comparator will be by Unicode point value.
    * You can optionally pass a compareFn if your keys are complex types.
    *
    * @usageNotes
    * ### Examples
    *
    * This examples show how an Object or a Map can be iterated by ngFor with the use of this keyvalue
    * pipe.
    *
    * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}
    *
    * @publicApi
    */
export declare class KeyValuePipe implements PipeTransform {
        constructor(differs: KeyValueDiffers);
        transform<K, V>(input: null, compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): null;
        transform<V>(input: {
                [key: string]: V;
        } | Map<string, V>, compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number): Array<KeyValue<string, V>>;
        transform<V>(input: {
                [key: number]: V;
        } | Map<number, V>, compareFn?: (a: KeyValue<number, V>, b: KeyValue<number, V>) => number): Array<KeyValue<number, V>>;
        transform<K, V>(input: Map<K, V>, compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;
}
export declare function defaultComparator<K, V>(keyValueA: KeyValue<K, V>, keyValueB: KeyValue<K, V>): number;

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { PipeTransform } from '@angular/core';
/**
    * @ngModule CommonModule
    * @description
    *
    * Transforms a number into a string,
    * formatted according to locale rules that determine group sizing and
    * separator, decimal-point character, and other locale-specific
    * configurations.
    *
    * If no parameters are specified, the function rounds off to the nearest value using this
    * [rounding method](https://en.wikibooks.org/wiki/Arithmetic/Rounding).
    * The behavior differs from that of the JavaScript ```Math.round()``` function.
    * In the following case for example, the pipe rounds down where
    * ```Math.round()``` rounds up:
    *
    * ```html
    * -2.5 | number:'1.0-0'
    * > -3
    * Math.round(-2.5)
    * > -2
    * ```
    *
    * @see `formatNumber()`
    *
    * @usageNotes
    * The following code shows how the pipe transforms numbers
    * into text strings, according to various format specifications,
    * where the caller's default locale is `en-US`.
    *
    * ### Example
    *
    * <code-example path="common/pipes/ts/number_pipe.ts" region='NumberPipe'></code-example>
    *
    * @publicApi
    */
export declare class DecimalPipe implements PipeTransform {
        constructor(_locale: string);
        /**
            * @param value The number to be formatted.
            * @param digitsInfo Decimal representation options, specified by a string
            * in the following format:<br>
            * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
            *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
            * Default is `1`.
            *   - `minFractionDigits`: The minimum number of digits after the decimal point.
            * Default is `0`.
            *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
            * Default is `3`.
            * @param locale A locale code for the locale format rules to use.
            * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
            * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
            */
        transform(value: any, digitsInfo?: string, locale?: string): string | null;
}
/**
    * @ngModule CommonModule
    * @description
    *
    * Transforms a number to a percentage
    * string, formatted according to locale rules that determine group sizing and
    * separator, decimal-point character, and other locale-specific
    * configurations.
    *
    * @see `formatPercent()`
    *
    * @usageNotes
    * The following code shows how the pipe transforms numbers
    * into text strings, according to various format specifications,
    * where the caller's default locale is `en-US`.
    *
    * <code-example path="common/pipes/ts/percent_pipe.ts" region='PercentPipe'></code-example>
    *
    * @publicApi
    */
export declare class PercentPipe implements PipeTransform {
        constructor(_locale: string);
        /**
            *
            * @param value The number to be formatted as a percentage.
            * @param digitsInfo Decimal representation options, specified by a string
            * in the following format:<br>
            * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
            *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
            * Default is `1`.
            *   - `minFractionDigits`: The minimum number of digits after the decimal point.
            * Default is `0`.
            *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
            * Default is `0`.
            * @param locale A locale code for the locale format rules to use.
            * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
            * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
            */
        transform(value: any, digitsInfo?: string, locale?: string): string | null;
}
/**
    * @ngModule CommonModule
    * @description
    *
    * Transforms a number to a currency string, formatted according to locale rules
    * that determine group sizing and separator, decimal-point character,
    * and other locale-specific configurations.
    *
    * @see `getCurrencySymbol()`
    * @see `formatCurrency()`
    *
    * @usageNotes
    * The following code shows how the pipe transforms numbers
    * into text strings, according to various format specifications,
    * where the caller's default locale is `en-US`.
    *
    * <code-example path="common/pipes/ts/currency_pipe.ts" region='CurrencyPipe'></code-example>
    *
    * @publicApi
    */
export declare class CurrencyPipe implements PipeTransform {
        constructor(_locale: string);
        /**
            *
            * @param value The number to be formatted as currency.
            * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,
            * such as `USD` for the US dollar and `EUR` for the euro.
            * @param display The format for the currency indicator. One of the following:
            *   - `code`: Show the code (such as `USD`).
            *   - `symbol`(default): Show the symbol (such as `$`).
            *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their
            * currency.
            * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the
            * locale has no narrow symbol, uses the standard symbol for the locale.
            *   - String: Use the given string value instead of a code or a symbol.
            * For example, an empty string will suppress the currency & symbol.
            *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.
            *
            * @param digitsInfo Decimal representation options, specified by a string
            * in the following format:<br>
            * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
            *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
            * Default is `1`.
            *   - `minFractionDigits`: The minimum number of digits after the decimal point.
            * Default is `2`.
            *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
            * Default is `2`.
            * If not provided, the number will be formatted with the proper amount of digits,
            * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.
            * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.
            * @param locale A locale code for the locale format rules to use.
            * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
            * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
            */
        transform(value: any, currencyCode?: string, display?: 'code' | 'symbol' | 'symbol-narrow' | string | boolean, digitsInfo?: string, locale?: string): string | null;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { PipeTransform } from '@angular/core';
/**
    * @ngModule CommonModule
    * @description
    *
    * Creates a new `Array` or `String` containing a subset (slice) of the elements.
    *
    * @usageNotes
    *
    * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
    * and `String.prototype.slice()`.
    *
    * When operating on an `Array`, the returned `Array` is always a copy even when all
    * the elements are being returned.
    *
    * When operating on a blank value, the pipe returns the blank value.
    *
    * ### List Example
    *
    * This `ngFor` example:
    *
    * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
    *
    * produces the following:
    *
    * ```html
    * <li>b</li>
    * <li>c</li>
    * ```
    *
    * ### String Examples
    *
    * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
    *
    * @publicApi
    */
export declare class SlicePipe implements PipeTransform {
        /**
            * @param value a list or a string to be sliced.
            * @param start the starting index of the subset to return:
            *   - **a positive integer**: return the item at `start` index and all items after
            *     in the list or string expression.
            *   - **a negative integer**: return the item at `start` index from the end and all items after
            *     in the list or string expression.
            *   - **if positive and greater than the size of the expression**: return an empty list or
            * string.
            *   - **if negative and greater than the size of the expression**: return entire list or string.
            * @param end the ending index of the subset to return:
            *   - **omitted**: return all items until the end.
            *   - **if positive**: return all items before `end` index of the list or string.
            *   - **if negative**: return all items before `end` index from the end of the list or string.
            */
        transform(value: any, start: number, end?: number): any;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
     */
import { PipeTransform } from '@angular/core';
/**
    * @ngModule CommonModule
    * @description
    *
    * Formats a date according to locale rules.
    *
    * Where:
    * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string
    * (https://www.w3.org/TR/NOTE-datetime).
    * - `format` indicates which date/time components to include. The format can be predefined as
    *   shown below or custom as shown in the table.
    *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)
    *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)
    *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)
    *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)
    *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)
    *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)
    *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)
    *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)
    *
    *
    *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |
    *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|
    *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |
    *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |
    *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
    *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |
    *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
    *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |
    *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|
    *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |
    *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |
    *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |
    *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |
    *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |
    *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |
    *
    * In javascript, only the components specified will be respected (not the ordering,
    * punctuations, ...) and details of the formatting will be dependent on the locale.
    *
    * Timezone of the formatted text will be the local system timezone of the end-user's machine.
    *
    * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not
    * applied and the formatted text will have the same day, month and year of the expression.
    *
    * WARNINGS:
    * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
    *   Instead users should treat the date as an immutable object and change the reference when the
    *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run
    *   which would be an expensive operation).
    * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
    *   browsers.
    *
    * @usageNotes
    *
    * ### Examples
    *
    * Assuming `dateObj` is (year: 2010, month: 9, day: 3, hour: 12 PM, minute: 05, second: 08)
    * in the _local_ time and locale is 'en-US':
    *
    * {@example common/pipes/ts/date_pipe.ts region='DeprecatedDatePipe'}
    *
    * @publicApi
    */
export declare class DeprecatedDatePipe implements PipeTransform {
        constructor(_locale: string);
        transform(value: any, pattern?: string): string | null;
}

/**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
import { PipeTransform } from '@angular/core';
/**
    * Formats a number as text. Group sizing and separator and other locale-specific
    * configurations are based on the active locale.
    *
    * where `expression` is a number:
    *  - `digitInfo` is a `string` which has a following format: <br>
    *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>
    *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.
    *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.
    *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.
    *
    * For more information on the acceptable range for each of these numbers and other
    * details see your native internationalization library.
    *
    * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
    * and may require a polyfill. See [Browser Support](guide/browser-support) for details.
    *
    * @usageNotes
    *
    * ### Example
    *
    * {@example common/pipes/ts/number_pipe.ts region='DeprecatedNumberPipe'}
    *
    * @ngModule CommonModule
    * @publicApi
    */
export declare class DeprecatedDecimalPipe implements PipeTransform {
        constructor(_locale: string);
        transform(value: any, digits?: string): string | null;
}
/**
    * @ngModule CommonModule
    *
    * @description
    *
    * Formats a number as percentage according to locale rules.
    *
    * - `digitInfo` See {@link DecimalPipe} for detailed description.
    *
    * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
    * and may require a polyfill. See [Browser Support](guide/browser-support) for details.
    *
    * @usageNotes
    *
    * ### Example
    *
    * {@example common/pipes/ts/percent_pipe.ts region='DeprecatedPercentPipe'}
    *
    * @publicApi
    */
export declare class DeprecatedPercentPipe implements PipeTransform {
        constructor(_locale: string);
        transform(value: any, digits?: string): string | null;
}
/**
    * @ngModule CommonModule
    * @description
    *
    * Formats a number as currency using locale rules.
    *
    * Use `currency` to format a number as currency.
    *
    * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
    *    as `USD` for the US dollar and `EUR` for the euro.
    * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.
    *   - `true`: use symbol (e.g. `$`).
    *   - `false`(default): use code (e.g. `USD`).
    * - `digitInfo` See {@link DecimalPipe} for detailed description.
    *
    * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
    * and may require a polyfill. See [Browser Support](guide/browser-support) for details.
    *
    * @usageNotes
    *
    * ### Example
    *
    * {@example common/pipes/ts/currency_pipe.ts region='DeprecatedCurrencyPipe'}
    *
    * @publicApi
    */
export declare class DeprecatedCurrencyPipe implements PipeTransform {
        constructor(_locale: string);
        transform(value: any, currencyCode?: string, symbolDisplay?: boolean, digits?: string): string | null;
}


}
