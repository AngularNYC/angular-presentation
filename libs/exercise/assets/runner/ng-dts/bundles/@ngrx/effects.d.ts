declare module '@ngrx/effects' {
// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   rxjs
//   @ngrx/store
//   @angular/core

/**
  * DO NOT EDIT
  *
  * This file is automatically generated at build
  */
export * from '@ngrx/effects/--/--/--/--/--/node_modules/@ngrx/effects/public_api';

export * from '@ngrx/effects/--/--/--/--/--/node_modules/@ngrx/effects/src/index';

export { Effect, EffectsMetadata, getEffectsMetadata } from '@ngrx/effects/--/--/--/--/--/node_modules/@ngrx/effects/src/effects_metadata';
export { mergeEffects } from '@ngrx/effects/--/--/--/--/--/node_modules/@ngrx/effects/src/effects_resolver';
export { Actions, ofType } from '@ngrx/effects/--/--/--/--/--/node_modules/@ngrx/effects/src/actions';
export { EffectsModule } from '@ngrx/effects/--/--/--/--/--/node_modules/@ngrx/effects/src/effects_module';
export { EffectSources } from '@ngrx/effects/--/--/--/--/--/node_modules/@ngrx/effects/src/effect_sources';
export { OnRunEffects } from '@ngrx/effects/--/--/--/--/--/node_modules/@ngrx/effects/src/on_run_effects';
export { EffectNotification } from '@ngrx/effects/--/--/--/--/--/node_modules/@ngrx/effects/src/effect_notification';
export { ROOT_EFFECTS_INIT } from '@ngrx/effects/--/--/--/--/--/node_modules/@ngrx/effects/src/effects_root_module';

export interface EffectMetadata<T> {
    propertyName: string;
    dispatch: boolean;
}
export declare function Effect<T>({dispatch}?: {
    dispatch?: boolean;
}): PropertyDecorator;
export declare function getSourceForInstance<T>(instance: T): T;
export declare function getSourceMetadata<T>(instance: T): Array<EffectMetadata<T>>;
export declare type EffectsMetadata<T> = {
    [key: string]: {
        dispatch: boolean;
    };
};
export declare function getEffectsMetadata<T>(instance: T): EffectsMetadata<T>;

import { Observable } from 'rxjs';
import { EffectNotification } from '@ngrx/effects/--/--/--/--/--/node_modules/@ngrx/effects/src/effect_notification';
export declare function mergeEffects(sourceInstance: any): Observable<EffectNotification>;
export declare function resolveEffectSource(sourceInstance: any): Observable<EffectNotification>;

import { Action } from '@ngrx/store';
import { Observable, Operator, OperatorFunction } from 'rxjs';
export declare class Actions<V = Action> extends Observable<V> {
    constructor(source?: Observable<V>);
    lift<R>(operator: Operator<V, R>): Observable<R>;
    /**
      * @deprecated from 6.1.0. Use the pipeable `ofType` operator instead.
      */
    ofType<V2 extends V = V>(...allowedTypes: string[]): Actions<V2>;
}
export declare function ofType<T extends Action>(...allowedTypes: string[]): OperatorFunction<Action, T>;

import { ModuleWithProviders, Type } from '@angular/core';
export declare class EffectsModule {
    static forFeature(featureEffects: Type<any>[]): ModuleWithProviders;
    static forRoot(rootEffects: Type<any>[]): ModuleWithProviders;
}
export declare function createSourceInstances(...instances: any[]): any[];

import { ErrorHandler } from '@angular/core';
import { Subject } from 'rxjs';
export declare class EffectSources extends Subject<any> {
    constructor(errorHandler: ErrorHandler);
    addEffects(effectSourceInstance: any): void;
}

import { Observable } from 'rxjs';
import { EffectNotification } from '@ngrx/effects/--/--/--/--/--/node_modules/@ngrx/effects/src/effect_notification';
export declare type onRunEffectsFn = (resolvedEffects$: Observable<EffectNotification>) => Observable<EffectNotification>;
export interface OnRunEffects {
    ngrxOnRunEffects: onRunEffectsFn;
}
export declare const onRunEffectsKey: keyof OnRunEffects;
export declare function isOnRunEffects(sourceInstance: {
    [onRunEffectsKey]?: onRunEffectsFn;
}): sourceInstance is OnRunEffects;

import { ErrorHandler } from '@angular/core';
import { Action } from '@ngrx/store';
import { Notification, Observable } from 'rxjs';
export interface EffectNotification {
    effect: Observable<any> | (() => Observable<any>);
    propertyName: string;
    sourceName: string;
    sourceInstance: any;
    notification: Notification<Action | null | undefined>;
}
export declare function verifyOutput(output: EffectNotification, reporter: ErrorHandler): void;

import { Store, StoreRootModule, StoreFeatureModule } from '@ngrx/store';
import { EffectsRunner } from '@ngrx/effects/--/--/--/--/--/node_modules/@ngrx/effects/src/effects_runner';
import { EffectSources } from '@ngrx/effects/--/--/--/--/--/node_modules/@ngrx/effects/src/effect_sources';
export declare const ROOT_EFFECTS_INIT = "@ngrx/effects/init";
export declare class EffectsRootModule {
    constructor(sources: EffectSources, runner: EffectsRunner, store: Store<any>, rootEffects: any[], storeRootModule: StoreRootModule, storeFeatureModule: StoreFeatureModule);
    addEffects(effectSourceInstance: any): void;
}

import { OnDestroy } from '@angular/core';
import { Store } from '@ngrx/store';
import { EffectSources } from '@ngrx/effects/--/--/--/--/--/node_modules/@ngrx/effects/src/effect_sources';
export declare class EffectsRunner implements OnDestroy {
    constructor(effectSources: EffectSources, store: Store<any>);
    start(): void;
    ngOnDestroy(): void;
}


}
