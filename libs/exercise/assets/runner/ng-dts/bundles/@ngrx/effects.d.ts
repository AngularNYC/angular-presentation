declare module '@ngrx/effects' {
// Generated by dts-bundle v0.7.3
// Dependencies for this module:
/// <reference path="@ngrx/store" />
/// <reference path="@angular/core" />
/// <reference path="rxjs" />

/**
  * Generated bundle index. Do not edit.
  */
/* Removed: $0 */
/* Removed: $0 */
/* Removed: $0 */
/* Removed: $0 */
/* Removed: $0 */
/* Removed: $0 */

/**
  * DO NOT EDIT
  *
  * This file is automatically generated at build
  */
/* Removed: $0 */

/* Removed: $0 */
/* Removed: $0 */
export declare class EffectsFeatureModule {
    constructor(root: EffectsRootModule, effectSourceGroups: any[][], storeRootModule: StoreRootModule, storeFeatureModule: StoreFeatureModule);
}

/* Removed: $0 */
export declare class EffectsModule {
    static forFeature(featureEffects: Type<any>[]): ModuleWithProviders;
    static forRoot(rootEffects: Type<any>[]): ModuleWithProviders;
}
export declare function createSourceInstances(...instances: any[]): any[];

/* Removed: $0 */
/* Removed: $0 */
/* Removed: $0 */
export declare const ROOT_EFFECTS_INIT = "@ngrx/effects/init";
export declare class EffectsRootModule {
    constructor(sources: EffectSources, runner: EffectsRunner, store: Store<any>, rootEffects: any[], storeRootModule: StoreRootModule, storeFeatureModule: StoreFeatureModule);
    addEffects(effectSourceInstance: any): void;
}

/* Removed: $0 */
/* Removed: $0 */
/* Removed: $0 */
export declare class EffectsRunner implements OnDestroy {
    constructor(effectSources: EffectSources, store: Store<any>);
    start(): void;
    ngOnDestroy(): void;
}

/* Removed: $0 */
export declare const IMMEDIATE_EFFECTS: InjectionToken<any[]>;
export declare const ROOT_EFFECTS: InjectionToken<Type<any>[]>;
export declare const FEATURE_EFFECTS: InjectionToken<any[][]>;

/* Removed: $0 */

/* Removed: $0 */
/* Removed: $0 */
export declare class EffectSources extends Subject<any> {
    constructor(errorHandler: ErrorHandler);
    addEffects(effectSourceInstance: any): void;
}

/* Removed: $0 */
/* Removed: $0 */
/* Removed: $0 */
/* Removed: $0 */
/* Removed: $0 */
/* Removed: $0 */
/* Removed: $0 */
/* Removed: $0 */

export interface EffectMetadata<T> {
    propertyName: string;
    dispatch: boolean;
}
export declare function Effect<T>({dispatch}?: {
    dispatch?: boolean;
}): PropertyDecorator;
export declare function getSourceForInstance<T>(instance: T): T;
export declare function getSourceMetadata<T>(instance: T): Array<EffectMetadata<T>>;
export declare type EffectsMetadata<T> = {
    [key: string]: {
        dispatch: boolean;
    };
};
export declare function getEffectsMetadata<T>(instance: T): EffectsMetadata<T>;

/* Removed: $0 */
/* Removed: $0 */
export declare function mergeEffects(sourceInstance: any): Observable<EffectNotification>;
export declare function resolveEffectSource(sourceInstance: any): Observable<EffectNotification>;

/* Removed: $0 */
/* Removed: $0 */
export declare class Actions<V = Action> extends Observable<V> {
    constructor(source?: Observable<V>);
    lift<R>(operator: Operator<V, R>): Observable<R>;
    /**
      * @deprecated from 6.1.0. Use the pipeable `ofType` operator instead.
      */
    ofType<V2 extends V = V>(...allowedTypes: string[]): Actions<V2>;
}
export declare function ofType<T extends Action>(...allowedTypes: string[]): OperatorFunction<Action, T>;

/* Removed: $0 */
/* Removed: $0 */
export declare type onRunEffectsFn = (resolvedEffects$: Observable<EffectNotification>) => Observable<EffectNotification>;
export interface OnRunEffects {
    ngrxOnRunEffects: onRunEffectsFn;
}
export declare const onRunEffectsKey: keyof OnRunEffects;
export declare function isOnRunEffects(sourceInstance: {
    [onRunEffectsKey]?: onRunEffectsFn;
}): sourceInstance is OnRunEffects;

/* Removed: $0 */
/* Removed: $0 */
/* Removed: $0 */
export interface EffectNotification {
    effect: Observable<any> | (() => Observable<any>);
    propertyName: string;
    sourceName: string;
    sourceInstance: any;
    notification: Notification<Action | null | undefined>;
}
export declare function verifyOutput(output: EffectNotification, reporter: ErrorHandler): void;


}
