[
  {
    "path": "node_modules/@firebase/logger/dist/index.d.ts",
    "content": "/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { LogLevel } from './src/logger';\r\nexport declare function setLogLevel(level: LogLevel): void;\r\nexport { Logger, LogLevel, LogHandler } from './src/logger';\r\n"
  },
  {
    "path": "node_modules/@firebase/util/dist/index.d.ts",
    "content": "/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nexport { assert, assertionError } from './src/assert';\r\nexport { base64, base64Decode, base64Encode } from './src/crypt';\r\nexport { CONSTANTS } from './src/constants';\r\nexport { deepCopy, deepExtend, patchProperty } from './src/deepCopy';\r\nexport { Deferred } from './src/deferred';\r\nexport { getUA, isMobileCordova, isNodeSdk, isReactNative } from './src/environment';\r\nexport { ErrorFactory, ErrorList, FirebaseError, patchCapture, StringLike } from './src/errors';\r\nexport { jsonEval, stringify } from './src/json';\r\nexport { decode, isAdmin, issuedAtTime, isValidFormat, isValidTimestamp } from './src/jwt';\r\nexport { clone, contains, every, extend, findKey, findValue, forEach, getAnyKey, getCount, getValues, isEmpty, isNonNullObject, map, safeGet } from './src/obj';\r\nexport { querystring, querystringDecode } from './src/query';\r\nexport { Sha1 } from './src/sha1';\r\nexport { async, CompleteFn, createSubscribe, ErrorFn, Executor, NextFn, Observable, Observer, PartialObserver, Subscribe, Unsubscribe } from './src/subscribe';\r\nexport { errorPrefix, validateArgCount, validateCallback, validateContextObject, validateNamespace } from './src/validation';\r\nexport { stringLength, stringToByteArray } from './src/utf8';\r\n"
  },
  {
    "path": "node_modules/@firebase/logger/dist/src/logger.d.ts",
    "content": "/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nexport declare const instances: Logger[];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nexport declare enum LogLevel {\r\n    DEBUG = 0,\r\n    VERBOSE = 1,\r\n    INFO = 2,\r\n    WARN = 3,\r\n    ERROR = 4,\r\n    SILENT = 5,\r\n}\r\n/**\r\n * We allow users the ability to pass their own log handler. We will pass the\r\n * type of log, the current log level, and any other arguments passed (i.e. the\r\n * messages that the user wants to log) to this function.\r\n */\r\nexport declare type LogHandler = (loggerInstance: Logger, logType: LogLevel, ...args: any[]) => void;\r\nexport declare class Logger {\r\n    name: string;\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name: string);\r\n    /**\r\n     * The log level of the given Logger instance.\r\n     */\r\n    private _logLevel;\r\n    logLevel: LogLevel;\r\n    /**\r\n     * The log handler for the Logger instance.\r\n     */\r\n    private _logHandler;\r\n    logHandler: LogHandler;\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args: any[]): void;\r\n    log(...args: any[]): void;\r\n    info(...args: any[]): void;\r\n    warn(...args: any[]): void;\r\n    error(...args: any[]): void;\r\n}\r\n"
  },
  {
    "path": "node_modules/rxjs/internal-compatibility/package.json",
    "content": "{\n  \"name\": \"rxjs/internal-compatibility\",\n  \"typings\": \"./index.d.ts\",\n  \"main\": \"./index.js\",\n  \"module\": \"../_esm5/internal-compatibility/index.js\",\n  \"es2015\": \"../_esm2015/internal-compatibility/index.js\",\n  \"sideEffects\": false\n}\n"
  },
  {
    "path": "node_modules/rxjs/operators/package.json",
    "content": "{\n  \"name\": \"rxjs/operators\",\n  \"typings\": \"./index.d.ts\",\n  \"main\": \"./index.js\",\n  \"module\": \"../_esm5/operators/index.js\",\n  \"es2015\": \"../_esm2015/operators/index.js\",\n  \"sideEffects\": false\n}\n"
  },
  {
    "path": "node_modules/rxjs/ajax/package.json",
    "content": "{\n  \"name\": \"rxjs/ajax\",\n  \"typings\": \"./index.d.ts\",\n  \"main\": \"./index.js\",\n  \"module\": \"../_esm5/ajax/index.js\",\n  \"es2015\": \"../_esm2015/ajax/index.js\",\n  \"sideEffects\": false\n}\n"
  },
  {
    "path": "node_modules/rxjs/testing/package.json",
    "content": "{\n  \"name\": \"rxjs/testing\",\n  \"typings\": \"./index.d.ts\",\n  \"main\": \"./index.js\",\n  \"module\": \"../_esm5/testing/index.js\",\n  \"es2015\": \"../_esm2015/testing/index.js\",\n  \"sideEffects\": false\n}\n"
  },
  {
    "path": "node_modules/rxjs/src/operators/package.json",
    "content": "{\n  \"name\": \"rxjs/operators\",\n  \"typings\": \"./index.d.ts\",\n  \"main\": \"./index.js\",\n  \"module\": \"../_esm5/operators/index.js\",\n  \"es2015\": \"../_esm2015/operators/index.js\",\n  \"sideEffects\": false\n}\n"
  },
  {
    "path": "node_modules/rxjs/src/internal-compatibility/package.json",
    "content": "{\n  \"name\": \"rxjs/internal-compatibility\",\n  \"typings\": \"./index.d.ts\",\n  \"main\": \"./index.js\",\n  \"module\": \"../_esm5/internal-compatibility/index.js\",\n  \"es2015\": \"../_esm2015/internal-compatibility/index.js\",\n  \"sideEffects\": false\n}\n"
  },
  {
    "path": "node_modules/rxjs/src/ajax/package.json",
    "content": "{\n  \"name\": \"rxjs/ajax\",\n  \"typings\": \"./index.d.ts\",\n  \"main\": \"./index.js\",\n  \"module\": \"../_esm5/ajax/index.js\",\n  \"es2015\": \"../_esm2015/ajax/index.js\",\n  \"sideEffects\": false\n}\n"
  },
  {
    "path": "node_modules/rxjs/webSocket/package.json",
    "content": "{\n  \"name\": \"rxjs/webSocket\",\n  \"typings\": \"./index.d.ts\",\n  \"main\": \"./index.js\",\n  \"module\": \"../_esm5/webSocket/index.js\",\n  \"es2015\": \"../_esm2015/webSocket/index.js\",\n  \"sideEffects\": false\n}\n"
  },
  {
    "path": "node_modules/rxjs/src/webSocket/package.json",
    "content": "{\n  \"name\": \"rxjs/webSocket\",\n  \"typings\": \"./index.d.ts\",\n  \"main\": \"./index.js\",\n  \"module\": \"../_esm5/webSocket/index.js\",\n  \"es2015\": \"../_esm2015/webSocket/index.js\",\n  \"sideEffects\": false\n}\n"
  },
  {
    "path": "node_modules/rxjs/src/testing/package.json",
    "content": "{\n  \"name\": \"rxjs/testing\",\n  \"typings\": \"./index.d.ts\",\n  \"main\": \"./index.js\",\n  \"module\": \"../_esm5/testing/index.js\",\n  \"es2015\": \"../_esm2015/testing/index.js\",\n  \"sideEffects\": false\n}\n"
  },
  {
    "path": "node_modules/@firebase/util/dist/src/assert.d.ts",
    "content": "/**\r\n * Throws an error if the provided assertion is falsy\r\n * @param {*} assertion The assertion to be tested for falsiness\r\n * @param {!string} message The message to display if the check fails\r\n */\r\nexport declare const assert: (assertion: any, message: any) => void;\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n * @param {string} message\r\n * @return {!Error}\r\n */\r\nexport declare const assertionError: (message: any) => Error;\r\n"
  },
  {
    "path": "node_modules/@firebase/util/dist/src/crypt.d.ts",
    "content": "export declare const base64: {\r\n    byteToCharMap_: any;\r\n    charToByteMap_: any;\r\n    byteToCharMapWebSafe_: any;\r\n    charToByteMapWebSafe_: any;\r\n    ENCODED_VALS_BASE: string;\r\n    readonly ENCODED_VALS: string;\r\n    readonly ENCODED_VALS_WEBSAFE: string;\r\n    HAS_NATIVE_SUPPORT: boolean;\r\n    encodeByteArray(input: any, opt_webSafe?: any): string;\r\n    encodeString(input: any, opt_webSafe: any): any;\r\n    decodeString(input: any, opt_webSafe: any): string;\r\n    decodeStringToByteArray(input: any, opt_webSafe: any): any[];\r\n    init_(): void;\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n * @param {!string} str\r\n * @return {!string}\r\n */\r\nexport declare const base64Encode: (str: string) => string;\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param {string} str To be decoded\r\n * @return {?string} Decoded result, if possible\r\n */\r\nexport declare const base64Decode: (str: string) => string;\r\n"
  },
  {
    "path": "node_modules/@firebase/util/dist/src/deferred.d.ts",
    "content": "/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nexport declare class Deferred<R> {\r\n    promise: Promise<R>;\r\n    reject: any;\r\n    resolve: any;\r\n    constructor();\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     * @param {((?function(?(Error)): (?|undefined))| (?function(?(Error),?=): (?|undefined)))=} callback\r\n     * @return {!function(?(Error), ?=)}\r\n     */\r\n    wrapCallback(callback?: any): (error: any, value?: any) => void;\r\n}\r\n"
  },
  {
    "path": "node_modules/@firebase/util/dist/src/deepCopy.d.ts",
    "content": "/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nexport declare function deepCopy<T>(value: T): T;\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n */\r\nexport declare function deepExtend(target: any, source: any): any;\r\nexport declare function patchProperty(obj: any, prop: string, value: any): void;\r\n"
  },
  {
    "path": "node_modules/@firebase/util/dist/src/errors.d.ts",
    "content": "/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if (e.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nexport declare type ErrorList<T> = {\r\n    [code: string]: string;\r\n};\r\nexport interface StringLike {\r\n    toString: () => string;\r\n}\r\nexport declare function patchCapture(captureFake?: any): any;\r\nexport interface FirebaseError {\r\n    code: string;\r\n    message: string;\r\n    name: string;\r\n    stack: string;\r\n}\r\nexport declare class FirebaseError implements FirebaseError {\r\n    code: string;\r\n    message: string;\r\n    stack: string;\r\n    name: string;\r\n    constructor(code: string, message: string);\r\n}\r\nexport declare class ErrorFactory<T extends string> {\r\n    private service;\r\n    private serviceName;\r\n    private errors;\r\n    pattern: RegExp;\r\n    constructor(service: string, serviceName: string, errors: ErrorList<T>);\r\n    create(code: T, data?: {\r\n        [prop: string]: StringLike;\r\n    }): FirebaseError;\r\n}\r\n"
  },
  {
    "path": "node_modules/@firebase/util/dist/src/environment.d.ts",
    "content": "/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return {string} user agent string\r\n */\r\nexport declare const getUA: () => string;\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap in the Ripple emulator) nor\r\n * Cordova `onDeviceReady`, which would normally wait for a callback.\r\n *\r\n * @return {boolean} isMobileCordova\r\n */\r\nexport declare const isMobileCordova: () => boolean;\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return {boolean} True if ReactNative environment is detected.\r\n */\r\nexport declare const isReactNative: () => boolean;\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return {boolean} True if Node.js environment is detected.\r\n */\r\nexport declare const isNodeSdk: () => boolean;\r\n"
  },
  {
    "path": "node_modules/@firebase/util/dist/src/json.d.ts",
    "content": "/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nexport declare function jsonEval(str: any): any;\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nexport declare function stringify(data: any): string;\r\n"
  },
  {
    "path": "node_modules/@firebase/util/dist/src/obj.d.ts",
    "content": "/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nexport declare const contains: (obj: any, key: any) => any;\r\nexport declare const safeGet: (obj: any, key: any) => any;\r\n/**\r\n * Enumerates the keys/values in an object, excluding keys defined on the prototype.\r\n *\r\n * @param {?Object.<K,V>} obj Object to enumerate.\r\n * @param {!function(K, V)} fn Function to call for each key and value.\r\n * @template K,V\r\n */\r\nexport declare const forEach: (obj: any, fn: any) => void;\r\n/**\r\n * Copies all the (own) properties from one object to another.\r\n * @param {!Object} objTo\r\n * @param {!Object} objFrom\r\n * @return {!Object} objTo\r\n */\r\nexport declare const extend: (objTo: any, objFrom: any) => any;\r\n/**\r\n * Returns a clone of the specified object.\r\n * @param {!Object} obj\r\n * @return {!Object} cloned obj.\r\n */\r\nexport declare const clone: (obj: any) => any;\r\n/**\r\n * Returns true if obj has typeof \"object\" and is not null.  Unlike goog.isObject(), does not return true\r\n * for functions.\r\n *\r\n * @param obj {*} A potential object.\r\n * @returns {boolean} True if it's an object.\r\n */\r\nexport declare const isNonNullObject: (obj: any) => boolean;\r\nexport declare const isEmpty: (obj: any) => boolean;\r\nexport declare const getCount: (obj: any) => number;\r\nexport declare const map: (obj: any, f: any, opt_obj?: any) => {};\r\nexport declare const findKey: (obj: any, fn: any, opt_this?: any) => string;\r\nexport declare const findValue: (obj: any, fn: any, opt_this?: any) => any;\r\nexport declare const getAnyKey: (obj: any) => string;\r\nexport declare const getValues: (obj: any) => any[];\r\n/**\r\n * Tests whether every key/value pair in an object pass the test implemented\r\n * by the provided function\r\n *\r\n * @param {?Object.<K,V>} obj Object to test.\r\n * @param {!function(K, V)} fn Function to call for each key and value.\r\n * @template K,V\r\n */\r\nexport declare const every: <V>(obj: Object, fn: (k: string, v?: V) => boolean) => boolean;\r\n"
  },
  {
    "path": "node_modules/@firebase/util/dist/src/jwt.d.ts",
    "content": "/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {{header: *, claims: *, data: *, signature: string}}\r\n */\r\nexport declare const decode: (token: any) => {\r\n    header: {};\r\n    claims: {};\r\n    data: {};\r\n    signature: string;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nexport declare const isValidTimestamp: (token: any) => boolean;\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {?number}\r\n */\r\nexport declare const issuedAtTime: (token: any) => any;\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time and non-empty\r\n * signature.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nexport declare const isValidFormat: (token: any) => boolean;\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nexport declare const isAdmin: (token: any) => boolean;\r\n"
  },
  {
    "path": "node_modules/@firebase/util/dist/src/sha1.d.ts",
    "content": "/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Hash } from './hash';\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @extends {Hash}\r\n * @final\r\n * @struct\r\n */\r\nexport declare class Sha1 extends Hash {\r\n    /**\r\n     * Holds the previous values of accumulated variables a-e in the compress_\r\n     * function.\r\n     * @type {!Array<number>}\r\n     * @private\r\n     */\r\n    private chain_;\r\n    /**\r\n     * A buffer holding the partially computed hash result.\r\n     * @type {!Array<number>}\r\n     * @private\r\n     */\r\n    private buf_;\r\n    /**\r\n     * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n     * as the message schedule in the docs.\r\n     * @type {!Array<number>}\r\n     * @private\r\n     */\r\n    private W_;\r\n    /**\r\n     * Contains data needed to pad messages less than 64 bytes.\r\n     * @type {!Array<number>}\r\n     * @private\r\n     */\r\n    private pad_;\r\n    /**\r\n     * @private {number}\r\n     */\r\n    private inbuf_;\r\n    /**\r\n     * @private {number}\r\n     */\r\n    private total_;\r\n    constructor();\r\n    reset(): void;\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param {!Array<number>|!Uint8Array|string} buf Block to compress.\r\n     * @param {number=} opt_offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf: any, opt_offset?: any): void;\r\n    update(bytes: any, opt_length?: any): void;\r\n    /** @override */\r\n    digest(): any[];\r\n}\r\n"
  },
  {
    "path": "node_modules/@firebase/util/dist/src/query.d.ts",
    "content": "/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params\r\n * object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n *\r\n * @param {!Object} querystringParams\r\n * @return {string}\r\n */\r\nexport declare const querystring: (querystringParams: any) => string;\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})\r\n *\r\n * @param {string} querystring\r\n * @return {!Object}\r\n */\r\nexport declare const querystringDecode: (querystring: any) => {};\r\n"
  },
  {
    "path": "node_modules/@firebase/util/dist/src/validation.d.ts",
    "content": "/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} minCount The minimum number of arguments to allow for the function call\r\n * @param {!number} maxCount The maximum number of argument to allow for the function call\r\n * @param {!number} argCount The actual number of arguments provided.\r\n */\r\nexport declare const validateArgCount: (fnName: any, minCount: any, maxCount: any, argCount: any) => void;\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} argumentNumber The index of the argument\r\n * @param {boolean} optional Whether or not the argument is optional\r\n * @return {!string} The prefix to add to the error thrown for validation.\r\n */\r\nexport declare function errorPrefix(fnName: any, argumentNumber: any, optional: any): string;\r\n/**\r\n * @param {!string} fnName\r\n * @param {!number} argumentNumber\r\n * @param {!string} namespace\r\n * @param {boolean} optional\r\n */\r\nexport declare function validateNamespace(fnName: any, argumentNumber: any, namespace: any, optional: any): void;\r\nexport declare function validateCallback(fnName: any, argumentNumber: any, callback: any, optional: any): void;\r\nexport declare function validateContextObject(fnName: any, argumentNumber: any, context: any, optional: any): void;\r\n"
  },
  {
    "path": "node_modules/@firebase/util/dist/src/utf8.d.ts",
    "content": "/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nexport declare const stringToByteArray: (str: any) => any[];\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nexport declare const stringLength: (str: any) => number;\r\n"
  },
  {
    "path": "node_modules/@firebase/util/dist/src/subscribe.d.ts",
    "content": "/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nexport declare type NextFn<T> = (value: T) => void;\r\nexport declare type ErrorFn = (error: Error) => void;\r\nexport declare type CompleteFn = () => void;\r\nexport interface Observer<T> {\r\n    next: NextFn<T>;\r\n    error: ErrorFn;\r\n    complete: CompleteFn;\r\n}\r\nexport declare type PartialObserver<T> = Partial<Observer<T>>;\r\nexport declare type Unsubscribe = () => void;\r\n/**\r\n * The Subscribe interface has two forms - passing the inline function\r\n * callbacks, or a object interface with callback properties.\r\n */\r\nexport interface Subscribe<T> {\r\n    (next?: NextFn<T>, error?: ErrorFn, complete?: CompleteFn): Unsubscribe;\r\n    (observer: PartialObserver<T>): Unsubscribe;\r\n}\r\nexport interface Observable<T> {\r\n    subscribe: Subscribe<T>;\r\n}\r\nexport declare type Executor<T> = (observer: Observer<T>) => void;\r\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nexport declare function createSubscribe<T>(executor: Executor<T>, onNoObservers?: Executor<T>): Subscribe<T>;\r\n/** Turn synchronous function into one called asynchronously. */\r\nexport declare function async(fn: Function, onError?: ErrorFn): Function;\r\n"
  },
  {
    "path": "node_modules/@firebase/util/dist/src/constants.d.ts",
    "content": "/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nexport declare const CONSTANTS: {\r\n    NODE_CLIENT: boolean;\r\n    NODE_ADMIN: boolean;\r\n    SDK_VERSION: string;\r\n};\r\n"
  },
  {
    "path": "node_modules/rxjs/index.d.ts",
    "content": "export { Observable } from './internal/Observable';\nexport { ConnectableObservable } from './internal/observable/ConnectableObservable';\nexport { GroupedObservable } from './internal/operators/groupBy';\nexport { Operator } from './internal/Operator';\nexport { observable } from './internal/symbol/observable';\nexport { Subject } from './internal/Subject';\nexport { BehaviorSubject } from './internal/BehaviorSubject';\nexport { ReplaySubject } from './internal/ReplaySubject';\nexport { AsyncSubject } from './internal/AsyncSubject';\nexport { asap as asapScheduler } from './internal/scheduler/asap';\nexport { async as asyncScheduler } from './internal/scheduler/async';\nexport { queue as queueScheduler } from './internal/scheduler/queue';\nexport { animationFrame as animationFrameScheduler } from './internal/scheduler/animationFrame';\nexport { VirtualTimeScheduler, VirtualAction } from './internal/scheduler/VirtualTimeScheduler';\nexport { Scheduler } from './internal/Scheduler';\nexport { Subscription } from './internal/Subscription';\nexport { Subscriber } from './internal/Subscriber';\nexport { Notification } from './internal/Notification';\nexport { pipe } from './internal/util/pipe';\nexport { noop } from './internal/util/noop';\nexport { identity } from './internal/util/identity';\nexport { isObservable } from './internal/util/isObservable';\nexport { ArgumentOutOfRangeError } from './internal/util/ArgumentOutOfRangeError';\nexport { EmptyError } from './internal/util/EmptyError';\nexport { ObjectUnsubscribedError } from './internal/util/ObjectUnsubscribedError';\nexport { UnsubscriptionError } from './internal/util/UnsubscriptionError';\nexport { TimeoutError } from './internal/util/TimeoutError';\nexport { bindCallback } from './internal/observable/bindCallback';\nexport { bindNodeCallback } from './internal/observable/bindNodeCallback';\nexport { combineLatest } from './internal/observable/combineLatest';\nexport { concat } from './internal/observable/concat';\nexport { defer } from './internal/observable/defer';\nexport { empty } from './internal/observable/empty';\nexport { forkJoin } from './internal/observable/forkJoin';\nexport { from } from './internal/observable/from';\nexport { fromEvent } from './internal/observable/fromEvent';\nexport { fromEventPattern } from './internal/observable/fromEventPattern';\nexport { generate } from './internal/observable/generate';\nexport { iif } from './internal/observable/iif';\nexport { interval } from './internal/observable/interval';\nexport { merge } from './internal/observable/merge';\nexport { never } from './internal/observable/never';\nexport { of } from './internal/observable/of';\nexport { onErrorResumeNext } from './internal/observable/onErrorResumeNext';\nexport { pairs } from './internal/observable/pairs';\nexport { race } from './internal/observable/race';\nexport { range } from './internal/observable/range';\nexport { throwError } from './internal/observable/throwError';\nexport { timer } from './internal/observable/timer';\nexport { using } from './internal/observable/using';\nexport { zip } from './internal/observable/zip';\nexport { EMPTY } from './internal/observable/empty';\nexport { NEVER } from './internal/observable/never';\nexport * from './internal/types';\nexport { config } from './internal/config';\n"
  },
  {
    "path": "node_modules/rxjs/testing/index.d.ts",
    "content": "export { TestScheduler } from '../internal/testing/TestScheduler';\n"
  },
  {
    "path": "node_modules/rxjs/ajax/index.d.ts",
    "content": "export { ajax } from '../internal/observable/dom/ajax';\nexport { AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError } from '../internal/observable/dom/AjaxObservable';\n"
  },
  {
    "path": "node_modules/rxjs/internal-compatibility/index.d.ts",
    "content": "export { config } from '../internal/config';\nexport { InnerSubscriber } from '../internal/InnerSubscriber';\nexport { OuterSubscriber } from '../internal/OuterSubscriber';\nexport { Scheduler } from '../internal/Scheduler';\nexport { AnonymousSubject } from '../internal/Subject';\nexport { SubjectSubscription } from '../internal/SubjectSubscription';\nexport { Subscriber } from '../internal/Subscriber';\nexport { fromPromise } from '../internal/observable/fromPromise';\nexport { fromIterable } from '../internal/observable/fromIterable';\nexport { ajax } from '../internal/observable/dom/ajax';\nexport { webSocket } from '../internal/observable/dom/webSocket';\nexport { AjaxRequest, AjaxCreationMethod, ajaxGet, ajaxPost, ajaxDelete, ajaxPut, ajaxPatch, ajaxGetJSON, AjaxObservable, AjaxSubscriber, AjaxResponse, AjaxError, AjaxTimeoutError } from '../internal/observable/dom/AjaxObservable';\nexport { WebSocketSubjectConfig, WebSocketSubject } from '../internal/observable/dom/WebSocketSubject';\nexport { CombineLatestOperator } from '../internal/observable/combineLatest';\nexport { EventTargetLike } from '../internal/observable/fromEvent';\nexport { ConditionFunc, IterateFunc, ResultFunc, GenerateBaseOptions, GenerateOptions } from '../internal/observable/generate';\nexport { dispatch } from '../internal/observable/range';\nexport { SubscribeOnObservable } from '../internal/observable/SubscribeOnObservable';\nexport { Timestamp } from '../internal/operators/timestamp';\nexport { TimeInterval } from '../internal/operators/timeInterval';\nexport { GroupedObservable } from '../internal/operators/groupBy';\nexport { ThrottleConfig, defaultThrottleConfig } from '../internal/operators/throttle';\nexport { rxSubscriber } from '../internal/symbol/rxSubscriber';\nexport { iterator } from '../internal/symbol/iterator';\nexport { observable } from '../internal/symbol/observable';\nexport { ArgumentOutOfRangeError } from '../internal/util/ArgumentOutOfRangeError';\nexport { EmptyError } from '../internal/util/EmptyError';\nexport { Immediate } from '../internal/util/Immediate';\nexport { ObjectUnsubscribedError } from '../internal/util/ObjectUnsubscribedError';\nexport { TimeoutError } from '../internal/util/TimeoutError';\nexport { UnsubscriptionError } from '../internal/util/UnsubscriptionError';\nexport { applyMixins } from '../internal/util/applyMixins';\nexport { errorObject } from '../internal/util/errorObject';\nexport { hostReportError } from '../internal/util/hostReportError';\nexport { identity } from '../internal/util/identity';\nexport { isArray } from '../internal/util/isArray';\nexport { isArrayLike } from '../internal/util/isArrayLike';\nexport { isDate } from '../internal/util/isDate';\nexport { isFunction } from '../internal/util/isFunction';\nexport { isIterable } from '../internal/util/isIterable';\nexport { isNumeric } from '../internal/util/isNumeric';\nexport { isObject } from '../internal/util/isObject';\nexport { isInteropObservable as isObservable } from '../internal/util/isInteropObservable';\nexport { isPromise } from '../internal/util/isPromise';\nexport { isScheduler } from '../internal/util/isScheduler';\nexport { noop } from '../internal/util/noop';\nexport { not } from '../internal/util/not';\nexport { pipe } from '../internal/util/pipe';\nexport { root } from '../internal/util/root';\nexport { subscribeTo } from '../internal/util/subscribeTo';\nexport { subscribeToArray } from '../internal/util/subscribeToArray';\nexport { subscribeToIterable } from '../internal/util/subscribeToIterable';\nexport { subscribeToObservable } from '../internal/util/subscribeToObservable';\nexport { subscribeToPromise } from '../internal/util/subscribeToPromise';\nexport { subscribeToResult } from '../internal/util/subscribeToResult';\nexport { toSubscriber } from '../internal/util/toSubscriber';\nexport { tryCatch } from '../internal/util/tryCatch';\n"
  },
  {
    "path": "node_modules/rxjs/operators/index.d.ts",
    "content": "export { audit } from '../internal/operators/audit';\nexport { auditTime } from '../internal/operators/auditTime';\nexport { buffer } from '../internal/operators/buffer';\nexport { bufferCount } from '../internal/operators/bufferCount';\nexport { bufferTime } from '../internal/operators/bufferTime';\nexport { bufferToggle } from '../internal/operators/bufferToggle';\nexport { bufferWhen } from '../internal/operators/bufferWhen';\nexport { catchError } from '../internal/operators/catchError';\nexport { combineAll } from '../internal/operators/combineAll';\nexport { combineLatest } from '../internal/operators/combineLatest';\nexport { concat } from '../internal/operators/concat';\nexport { concatAll } from '../internal/operators/concatAll';\nexport { concatMap } from '../internal/operators/concatMap';\nexport { concatMapTo } from '../internal/operators/concatMapTo';\nexport { count } from '../internal/operators/count';\nexport { debounce } from '../internal/operators/debounce';\nexport { debounceTime } from '../internal/operators/debounceTime';\nexport { defaultIfEmpty } from '../internal/operators/defaultIfEmpty';\nexport { delay } from '../internal/operators/delay';\nexport { delayWhen } from '../internal/operators/delayWhen';\nexport { dematerialize } from '../internal/operators/dematerialize';\nexport { distinct } from '../internal/operators/distinct';\nexport { distinctUntilChanged } from '../internal/operators/distinctUntilChanged';\nexport { distinctUntilKeyChanged } from '../internal/operators/distinctUntilKeyChanged';\nexport { elementAt } from '../internal/operators/elementAt';\nexport { every } from '../internal/operators/every';\nexport { exhaust } from '../internal/operators/exhaust';\nexport { exhaustMap } from '../internal/operators/exhaustMap';\nexport { expand } from '../internal/operators/expand';\nexport { filter } from '../internal/operators/filter';\nexport { finalize } from '../internal/operators/finalize';\nexport { find } from '../internal/operators/find';\nexport { findIndex } from '../internal/operators/findIndex';\nexport { first } from '../internal/operators/first';\nexport { groupBy } from '../internal/operators/groupBy';\nexport { ignoreElements } from '../internal/operators/ignoreElements';\nexport { isEmpty } from '../internal/operators/isEmpty';\nexport { last } from '../internal/operators/last';\nexport { map } from '../internal/operators/map';\nexport { mapTo } from '../internal/operators/mapTo';\nexport { materialize } from '../internal/operators/materialize';\nexport { max } from '../internal/operators/max';\nexport { merge } from '../internal/operators/merge';\nexport { mergeAll } from '../internal/operators/mergeAll';\nexport { mergeMap } from '../internal/operators/mergeMap';\nexport { mergeMap as flatMap } from '../internal/operators/mergeMap';\nexport { mergeMapTo } from '../internal/operators/mergeMapTo';\nexport { mergeScan } from '../internal/operators/mergeScan';\nexport { min } from '../internal/operators/min';\nexport { multicast } from '../internal/operators/multicast';\nexport { observeOn } from '../internal/operators/observeOn';\nexport { onErrorResumeNext } from '../internal/operators/onErrorResumeNext';\nexport { pairwise } from '../internal/operators/pairwise';\nexport { partition } from '../internal/operators/partition';\nexport { pluck } from '../internal/operators/pluck';\nexport { publish } from '../internal/operators/publish';\nexport { publishBehavior } from '../internal/operators/publishBehavior';\nexport { publishLast } from '../internal/operators/publishLast';\nexport { publishReplay } from '../internal/operators/publishReplay';\nexport { race } from '../internal/operators/race';\nexport { reduce } from '../internal/operators/reduce';\nexport { repeat } from '../internal/operators/repeat';\nexport { repeatWhen } from '../internal/operators/repeatWhen';\nexport { retry } from '../internal/operators/retry';\nexport { retryWhen } from '../internal/operators/retryWhen';\nexport { refCount } from '../internal/operators/refCount';\nexport { sample } from '../internal/operators/sample';\nexport { sampleTime } from '../internal/operators/sampleTime';\nexport { scan } from '../internal/operators/scan';\nexport { sequenceEqual } from '../internal/operators/sequenceEqual';\nexport { share } from '../internal/operators/share';\nexport { shareReplay } from '../internal/operators/shareReplay';\nexport { single } from '../internal/operators/single';\nexport { skip } from '../internal/operators/skip';\nexport { skipLast } from '../internal/operators/skipLast';\nexport { skipUntil } from '../internal/operators/skipUntil';\nexport { skipWhile } from '../internal/operators/skipWhile';\nexport { startWith } from '../internal/operators/startWith';\nexport { subscribeOn } from '../internal/operators/subscribeOn';\nexport { switchAll } from '../internal/operators/switchAll';\nexport { switchMap } from '../internal/operators/switchMap';\nexport { switchMapTo } from '../internal/operators/switchMapTo';\nexport { take } from '../internal/operators/take';\nexport { takeLast } from '../internal/operators/takeLast';\nexport { takeUntil } from '../internal/operators/takeUntil';\nexport { takeWhile } from '../internal/operators/takeWhile';\nexport { tap } from '../internal/operators/tap';\nexport { throttle } from '../internal/operators/throttle';\nexport { throttleTime } from '../internal/operators/throttleTime';\nexport { throwIfEmpty } from '../internal/operators/throwIfEmpty';\nexport { timeInterval } from '../internal/operators/timeInterval';\nexport { timeout } from '../internal/operators/timeout';\nexport { timeoutWith } from '../internal/operators/timeoutWith';\nexport { timestamp } from '../internal/operators/timestamp';\nexport { toArray } from '../internal/operators/toArray';\nexport { window } from '../internal/operators/window';\nexport { windowCount } from '../internal/operators/windowCount';\nexport { windowTime } from '../internal/operators/windowTime';\nexport { windowToggle } from '../internal/operators/windowToggle';\nexport { windowWhen } from '../internal/operators/windowWhen';\nexport { withLatestFrom } from '../internal/operators/withLatestFrom';\nexport { zip } from '../internal/operators/zip';\nexport { zipAll } from '../internal/operators/zipAll';\n"
  },
  {
    "path": "node_modules/rxjs/webSocket/index.d.ts",
    "content": "export { webSocket as webSocket } from '../internal/observable/dom/webSocket';\nexport { WebSocketSubject, WebSocketSubjectConfig } from '../internal/observable/dom/WebSocketSubject';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/package.json",
    "content": "{\n  \"name\": \"@angular/platform-browser/animations\",\n  \"typings\": \"./animations.d.ts\",\n  \"main\": \"../bundles/platform-browser-animations.umd.js\",\n  \"module\": \"../fesm5/animations.js\",\n  \"es2015\": \"../fesm2015/animations.js\",\n  \"esm5\": \"../esm5/animations/animations.js\",\n  \"esm2015\": \"../esm2015/animations/animations.js\",\n  \"fesm5\": \"../fesm5/animations.js\",\n  \"fesm2015\": \"../fesm2015/animations.js\",\n  \"sideEffects\": false\n}"
  },
  {
    "path": "node_modules/@firebase/util/dist/src/hash.d.ts",
    "content": "/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Abstract cryptographic hash interface.\r\n *\r\n * See Sha1 and Md5 for sample implementations.\r\n *\r\n */\r\n/**\r\n * Create a cryptographic hash instance.\r\n *\r\n * @constructor\r\n * @struct\r\n */\r\nexport declare class Hash {\r\n    /**\r\n     * The block size for the hasher.\r\n     * @type {number}\r\n     */\r\n    blockSize: number;\r\n    constructor();\r\n}\r\n"
  },
  {
    "path": "node_modules/@angular/forms/forms.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { InternalFormsSharedModule as ɵangular_packages_forms_forms_bc, REACTIVE_DRIVEN_DIRECTIVES as ɵangular_packages_forms_forms_bb, SHARED_FORM_DIRECTIVES as ɵangular_packages_forms_forms_z, TEMPLATE_DRIVEN_DIRECTIVES as ɵangular_packages_forms_forms_ba } from './src/directives';\nexport { CHECKBOX_VALUE_ACCESSOR as ɵangular_packages_forms_forms_a } from './src/directives/checkbox_value_accessor';\nexport { DEFAULT_VALUE_ACCESSOR as ɵangular_packages_forms_forms_b } from './src/directives/default_value_accessor';\nexport { AbstractControlStatus as ɵangular_packages_forms_forms_c, ngControlStatusHost as ɵangular_packages_forms_forms_d } from './src/directives/ng_control_status';\nexport { formDirectiveProvider as ɵangular_packages_forms_forms_e } from './src/directives/ng_form';\nexport { NG_FORM_SELECTOR_WARNING as ɵangular_packages_forms_forms_f } from './src/directives/ng_form_selector_warning';\nexport { formControlBinding as ɵangular_packages_forms_forms_g } from './src/directives/ng_model';\nexport { modelGroupProvider as ɵangular_packages_forms_forms_h } from './src/directives/ng_model_group';\nexport { NgNoValidate as ɵangular_packages_forms_forms_bh } from './src/directives/ng_no_validate_directive';\nexport { NUMBER_VALUE_ACCESSOR as ɵangular_packages_forms_forms_bd, NumberValueAccessor as ɵangular_packages_forms_forms_be } from './src/directives/number_value_accessor';\nexport { RADIO_VALUE_ACCESSOR as ɵangular_packages_forms_forms_i, RadioControlRegistry as ɵangular_packages_forms_forms_j } from './src/directives/radio_control_value_accessor';\nexport { RANGE_VALUE_ACCESSOR as ɵangular_packages_forms_forms_bf, RangeValueAccessor as ɵangular_packages_forms_forms_bg } from './src/directives/range_value_accessor';\nexport { NG_MODEL_WITH_FORM_CONTROL_WARNING as ɵangular_packages_forms_forms_k, formControlBinding as ɵangular_packages_forms_forms_l } from './src/directives/reactive_directives/form_control_directive';\nexport { controlNameBinding as ɵangular_packages_forms_forms_m } from './src/directives/reactive_directives/form_control_name';\nexport { formDirectiveProvider as ɵangular_packages_forms_forms_n } from './src/directives/reactive_directives/form_group_directive';\nexport { formArrayNameProvider as ɵangular_packages_forms_forms_p, formGroupNameProvider as ɵangular_packages_forms_forms_o } from './src/directives/reactive_directives/form_group_name';\nexport { SELECT_VALUE_ACCESSOR as ɵangular_packages_forms_forms_q } from './src/directives/select_control_value_accessor';\nexport { NgSelectMultipleOption as ɵangular_packages_forms_forms_s, SELECT_MULTIPLE_VALUE_ACCESSOR as ɵangular_packages_forms_forms_r } from './src/directives/select_multiple_control_value_accessor';\nexport { CHECKBOX_REQUIRED_VALIDATOR as ɵangular_packages_forms_forms_u, EMAIL_VALIDATOR as ɵangular_packages_forms_forms_v, MAX_LENGTH_VALIDATOR as ɵangular_packages_forms_forms_x, MIN_LENGTH_VALIDATOR as ɵangular_packages_forms_forms_w, PATTERN_VALIDATOR as ɵangular_packages_forms_forms_y, REQUIRED_VALIDATOR as ɵangular_packages_forms_forms_t } from './src/directives/validators';\n"
  },
  {
    "path": "node_modules/@angular/router/upgrade/package.json",
    "content": "{\n  \"name\": \"@angular/router/upgrade\",\n  \"typings\": \"./upgrade.d.ts\",\n  \"main\": \"../bundles/router-upgrade.umd.js\",\n  \"module\": \"../fesm5/upgrade.js\",\n  \"es2015\": \"../fesm2015/upgrade.js\",\n  \"esm5\": \"../esm5/upgrade/upgrade.js\",\n  \"esm2015\": \"../esm2015/upgrade/upgrade.js\",\n  \"fesm5\": \"../fesm5/upgrade.js\",\n  \"fesm2015\": \"../fesm2015/upgrade.js\",\n  \"sideEffects\": false\n}"
  },
  {
    "path": "node_modules/@angular/router/testing/package.json",
    "content": "{\n  \"name\": \"@angular/router/testing\",\n  \"typings\": \"./testing.d.ts\",\n  \"main\": \"../bundles/router-testing.umd.js\",\n  \"module\": \"../fesm5/testing.js\",\n  \"es2015\": \"../fesm2015/testing.js\",\n  \"esm5\": \"../esm5/testing/testing.js\",\n  \"esm2015\": \"../esm2015/testing/testing.js\",\n  \"fesm5\": \"../fesm5/testing.js\",\n  \"fesm2015\": \"../fesm2015/testing.js\"\n}"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/testing/package.json",
    "content": "{\n  \"name\": \"@angular/platform-browser-dynamic/testing\",\n  \"typings\": \"./testing.d.ts\",\n  \"main\": \"../bundles/platform-browser-dynamic-testing.umd.js\",\n  \"module\": \"../fesm5/testing.js\",\n  \"es2015\": \"../fesm2015/testing.js\",\n  \"esm5\": \"../esm5/testing/testing.js\",\n  \"esm2015\": \"../esm2015/testing/testing.js\",\n  \"fesm5\": \"../fesm5/testing.js\",\n  \"fesm2015\": \"../fesm2015/testing.js\"\n}"
  },
  {
    "path": "node_modules/@angular/platform-browser/testing/package.json",
    "content": "{\n  \"name\": \"@angular/platform-browser/testing\",\n  \"typings\": \"./testing.d.ts\",\n  \"main\": \"../bundles/platform-browser-testing.umd.js\",\n  \"module\": \"../fesm5/testing.js\",\n  \"es2015\": \"../fesm2015/testing.js\",\n  \"esm5\": \"../esm5/testing/testing.js\",\n  \"esm2015\": \"../esm2015/testing/testing.js\",\n  \"fesm5\": \"../fesm5/testing.js\",\n  \"fesm2015\": \"../fesm2015/testing.js\"\n}"
  },
  {
    "path": "node_modules/@angular/core/testing/package.json",
    "content": "{\n  \"name\": \"@angular/core/testing\",\n  \"typings\": \"./testing.d.ts\",\n  \"main\": \"../bundles/core-testing.umd.js\",\n  \"module\": \"../fesm5/testing.js\",\n  \"es2015\": \"../fesm2015/testing.js\",\n  \"esm5\": \"../esm5/testing/testing.js\",\n  \"esm2015\": \"../esm2015/testing/testing.js\",\n  \"fesm5\": \"../fesm5/testing.js\",\n  \"fesm2015\": \"../fesm2015/testing.js\"\n}"
  },
  {
    "path": "node_modules/@angular/common/locales/package.json",
    "content": "{\n  \"description\": \"This directory contains UMD files which by its nature are not side-effect free. The parent package.json marks the whole @angular/common package as side-effect free, so if this directory is not excluded from that, build-optimizer will mark the contents as side-effect free and uglify will incorrectly remove all needed localization code.\",\n  \"sideEffects\": true\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/testing/package.json",
    "content": "{\n  \"name\": \"@angular/compiler/testing\",\n  \"typings\": \"./testing.d.ts\",\n  \"main\": \"../bundles/compiler-testing.umd.js\",\n  \"module\": \"../fesm5/testing.js\",\n  \"es2015\": \"../fesm2015/testing.js\",\n  \"esm5\": \"../esm5/testing/testing.js\",\n  \"esm2015\": \"../esm2015/testing/testing.js\",\n  \"fesm5\": \"../fesm5/testing.js\",\n  \"fesm2015\": \"../fesm2015/testing.js\"\n}"
  },
  {
    "path": "node_modules/rxjs/internal/operators/groupBy.d.ts",
    "content": "import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\nexport declare function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport declare function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport declare function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport declare function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport interface RefCountSubscription {\n    count: number;\n    unsubscribe: () => void;\n    closed: boolean;\n    attemptedToUnsubscribe: boolean;\n}\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport declare class GroupedObservable<K, T> extends Observable<T> {\n    key: K;\n    private groupSubject;\n    private refCountSubscription;\n    /** @deprecated Do not construct this type. Internal use only */\n    constructor(key: K, groupSubject: Subject<T>, refCountSubscription?: RefCountSubscription);\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<T>): Subscription;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/ConnectableObservable.d.ts",
    "content": "import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n/**\n * @class ConnectableObservable<T>\n */\nexport declare class ConnectableObservable<T> extends Observable<T> {\n    source: Observable<T>;\n    protected subjectFactory: () => Subject<T>;\n    protected _subject: Subject<T>;\n    protected _refCount: number;\n    protected _connection: Subscription;\n    /** @internal */\n    _isComplete: boolean;\n    constructor(source: Observable<T>, subjectFactory: () => Subject<T>);\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<T>): Subscription;\n    protected getSubject(): Subject<T>;\n    connect(): Subscription;\n    refCount(): Observable<T>;\n}\nexport declare const connectableObservableDescriptor: PropertyDescriptorMap;\n"
  },
  {
    "path": "node_modules/rxjs/internal/Operator.d.ts",
    "content": "import { Subscriber } from './Subscriber';\nimport { TeardownLogic } from './types';\nexport interface Operator<T, R> {\n    call(subscriber: Subscriber<R>, source: any): TeardownLogic;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/ReplaySubject.d.ts",
    "content": "import { Subject } from './Subject';\nimport { SchedulerLike } from './types';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n/**\n * @class ReplaySubject<T>\n */\nexport declare class ReplaySubject<T> extends Subject<T> {\n    private scheduler;\n    private _events;\n    private _bufferSize;\n    private _windowTime;\n    private _infiniteTimeWindow;\n    constructor(bufferSize?: number, windowTime?: number, scheduler?: SchedulerLike);\n    private nextInfiniteTimeWindow(value);\n    private nextTimeWindow(value);\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<T>): Subscription;\n    _getNow(): number;\n    private _trimBufferThenGetEvents();\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/Subject.d.ts",
    "content": "import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\n/**\n * @class SubjectSubscriber<T>\n */\nexport declare class SubjectSubscriber<T> extends Subscriber<T> {\n    protected destination: Subject<T>;\n    constructor(destination: Subject<T>);\n}\n/**\n * @class Subject<T>\n */\nexport declare class Subject<T> extends Observable<T> implements SubscriptionLike {\n    observers: Observer<T>[];\n    closed: boolean;\n    isStopped: boolean;\n    hasError: boolean;\n    thrownError: any;\n    constructor();\n    /**@nocollapse */\n    static create: Function;\n    lift<R>(operator: Operator<T, R>): Observable<R>;\n    next(value?: T): void;\n    error(err: any): void;\n    complete(): void;\n    unsubscribe(): void;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _trySubscribe(subscriber: Subscriber<T>): TeardownLogic;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<T>): Subscription;\n    asObservable(): Observable<T>;\n}\n/**\n * @class AnonymousSubject<T>\n */\nexport declare class AnonymousSubject<T> extends Subject<T> {\n    protected destination: Observer<T>;\n    constructor(destination?: Observer<T>, source?: Observable<T>);\n    next(value: T): void;\n    error(err: any): void;\n    complete(): void;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<T>): Subscription;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/animationFrame.d.ts",
    "content": "import { AnimationFrameScheduler } from './AnimationFrameScheduler';\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.animationFrame.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\nexport declare const animationFrame: AnimationFrameScheduler;\n"
  },
  {
    "path": "node_modules/rxjs/internal/AsyncSubject.d.ts",
    "content": "import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n/**\n * @class AsyncSubject<T>\n */\nexport declare class AsyncSubject<T> extends Subject<T> {\n    private value;\n    private hasNext;\n    private hasCompleted;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<any>): Subscription;\n    next(value: T): void;\n    error(error: any): void;\n    complete(): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/Scheduler.d.ts",
    "content": "import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\nimport { SchedulerLike, SchedulerAction } from './types';\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}\n */\nexport declare class Scheduler implements SchedulerLike {\n    private SchedulerAction;\n    /** @nocollapse */\n    static now: () => number;\n    constructor(SchedulerAction: typeof Action, now?: () => number);\n    /**\n     * A getter method that returns a number representing the current time\n     * (at the time this function was called) according to the scheduler's own\n     * internal clock.\n     * @return {number} A number that represents the current time. May or may not\n     * have a relation to wall-clock time. May or may not refer to a time unit\n     * (e.g. milliseconds).\n     */\n    now: () => number;\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isObservable.d.ts",
    "content": "import { Observable } from '../Observable';\n/**\n * Tests to see if the object is an RxJS {@link Observable}\n * @param obj the object to test\n */\nexport declare function isObservable<T>(obj: any): obj is Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/identity.d.ts",
    "content": "export declare function identity<T>(x: T): T;\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/VirtualTimeScheduler.d.ts",
    "content": "import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { SchedulerAction } from '../types';\nexport declare class VirtualTimeScheduler extends AsyncScheduler {\n    maxFrames: number;\n    protected static frameTimeFactor: number;\n    frame: number;\n    index: number;\n    constructor(SchedulerAction?: typeof AsyncAction, maxFrames?: number);\n    /**\n     * Prompt the Scheduler to execute all of its queued actions, therefore\n     * clearing its queue.\n     * @return {void}\n     */\n    flush(): void;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class VirtualAction<T> extends AsyncAction<T> {\n    protected scheduler: VirtualTimeScheduler;\n    protected work: (this: SchedulerAction<T>, state?: T) => void;\n    protected index: number;\n    protected active: boolean;\n    constructor(scheduler: VirtualTimeScheduler, work: (this: SchedulerAction<T>, state?: T) => void, index?: number);\n    schedule(state?: T, delay?: number): Subscription;\n    protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay?: number): any;\n    protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay?: number): any;\n    protected _execute(state: T, delay: number): any;\n    static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>): 1 | -1 | 0;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/Subscription.d.ts",
    "content": "import { SubscriptionLike, TeardownLogic } from './types';\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport declare class Subscription implements SubscriptionLike {\n    /** @nocollapse */\n    static EMPTY: Subscription;\n    /**\n     * A flag to indicate whether this Subscription has already been unsubscribed.\n     * @type {boolean}\n     */\n    closed: boolean;\n    /** @internal */\n    protected _parent: Subscription;\n    /** @internal */\n    protected _parents: Subscription[];\n    /** @internal */\n    private _subscriptions;\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    constructor(unsubscribe?: () => void);\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    unsubscribe(): void;\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    add(teardown: TeardownLogic): Subscription;\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    remove(subscription: Subscription): void;\n    /** @internal */\n    private _addParent(parent);\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/pipe.d.ts",
    "content": "import { UnaryFunction } from '../types';\nexport declare function pipe<T>(): UnaryFunction<T, T>;\nexport declare function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport declare function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport declare function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport declare function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport declare function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport declare function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport declare function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport declare function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport declare function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\nexport declare function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/Notification.d.ts",
    "content": "import { PartialObserver } from './types';\nimport { Observable } from './Observable';\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport declare class Notification<T> {\n    kind: string;\n    value: T;\n    error: any;\n    hasValue: boolean;\n    constructor(kind: string, value?: T, error?: any);\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    observe(observer: PartialObserver<T>): any;\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any;\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void): any;\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    toObservable(): Observable<T>;\n    private static completeNotification;\n    private static undefinedValueNotification;\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     * @nocollapse\n     */\n    static createNext<T>(value: T): Notification<T>;\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     * @nocollapse\n     */\n    static createError<T>(err?: any): Notification<T>;\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     * @nocollapse\n     */\n    static createComplete(): Notification<any>;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/noop.d.ts",
    "content": "export declare function noop(): void;\n"
  },
  {
    "path": "node_modules/rxjs/internal/Subscriber.d.ts",
    "content": "import { Observer, PartialObserver } from './types';\nimport { Subscription } from './Subscription';\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport declare class Subscriber<T> extends Subscription implements Observer<T> {\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     * @nocollapse\n     */\n    static create<T>(next?: (x?: T) => void, error?: (e?: any) => void, complete?: () => void): Subscriber<T>;\n    /** @internal */ syncErrorValue: any;\n    /** @internal */ syncErrorThrown: boolean;\n    /** @internal */ syncErrorThrowable: boolean;\n    protected isStopped: boolean;\n    protected destination: PartialObserver<any>;\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void), error?: (e?: any) => void, complete?: () => void);\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    next(value?: T): void;\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    error(err?: any): void;\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    complete(): void;\n    unsubscribe(): void;\n    protected _next(value: T): void;\n    protected _error(err: any): void;\n    protected _complete(): void;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _unsubscribeAndRecycle(): Subscriber<T>;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/TimeoutError.d.ts",
    "content": "/**\n * An error thrown when duetime elapses.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nexport declare class TimeoutError extends Error {\n    constructor();\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/ArgumentOutOfRangeError.d.ts",
    "content": "/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport declare class ArgumentOutOfRangeError extends Error {\n    constructor();\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/async.d.ts",
    "content": "import { AsyncScheduler } from './AsyncScheduler';\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexport declare const async: AsyncScheduler;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/ObjectUnsubscribedError.d.ts",
    "content": "/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport declare class ObjectUnsubscribedError extends Error {\n    constructor();\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/UnsubscriptionError.d.ts",
    "content": "/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport declare class UnsubscriptionError extends Error {\n    errors: any[];\n    constructor(errors: any[]);\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/asap.d.ts",
    "content": "import { AsapScheduler } from './AsapScheduler';\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\nexport declare const asap: AsapScheduler;\n"
  },
  {
    "path": "node_modules/rxjs/internal/BehaviorSubject.d.ts",
    "content": "import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n/**\n * @class BehaviorSubject<T>\n */\nexport declare class BehaviorSubject<T> extends Subject<T> {\n    private _value;\n    constructor(_value: T);\n    readonly value: T;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<T>): Subscription;\n    getValue(): T;\n    next(value: T): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/from.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nexport declare function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport declare function from<T>(input: ObservableInput<ObservableInput<T>>, scheduler?: SchedulerLike): Observable<Observable<T>>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/bindNodeCallback.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n/** @deprecated resultSelector is deprecated, pipe to map instead */\nexport declare function bindNodeCallback(callbackFunc: Function, resultSelector: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\nexport declare function bindNodeCallback<R1, R2, R3, R4>(callbackFunc: (callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport declare function bindNodeCallback<R1, R2, R3>(callbackFunc: (callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2, R3]>;\nexport declare function bindNodeCallback<R1, R2>(callbackFunc: (callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2]>;\nexport declare function bindNodeCallback<R1>(callbackFunc: (callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): () => Observable<R1>;\nexport declare function bindNodeCallback(callbackFunc: (callback: (err: any) => any) => any, scheduler?: SchedulerLike): () => Observable<void>;\nexport declare function bindNodeCallback<A1, R1, R2, R3, R4>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport declare function bindNodeCallback<A1, R1, R2, R3>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2, R3]>;\nexport declare function bindNodeCallback<A1, R1, R2>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2]>;\nexport declare function bindNodeCallback<A1, R1>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<R1>;\nexport declare function bindNodeCallback<A1>(callbackFunc: (arg1: A1, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<void>;\nexport declare function bindNodeCallback<A1, A2, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport declare function bindNodeCallback<A1, A2, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2, R3]>;\nexport declare function bindNodeCallback<A1, A2, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2]>;\nexport declare function bindNodeCallback<A1, A2, R1>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<R1>;\nexport declare function bindNodeCallback<A1, A2>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<void>;\nexport declare function bindNodeCallback<A1, A2, A3, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport declare function bindNodeCallback<A1, A2, A3, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2, R3]>;\nexport declare function bindNodeCallback<A1, A2, A3, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2]>;\nexport declare function bindNodeCallback<A1, A2, A3, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<R1>;\nexport declare function bindNodeCallback<A1, A2, A3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<void>;\nexport declare function bindNodeCallback<A1, A2, A3, A4, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport declare function bindNodeCallback<A1, A2, A3, A4, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2, R3]>;\nexport declare function bindNodeCallback<A1, A2, A3, A4, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2]>;\nexport declare function bindNodeCallback<A1, A2, A3, A4, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<R1>;\nexport declare function bindNodeCallback<A1, A2, A3, A4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<void>;\nexport declare function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport declare function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2, R3]>;\nexport declare function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2]>;\nexport declare function bindNodeCallback<A1, A2, A3, A4, A5, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<R1>;\nexport declare function bindNodeCallback<A1, A2, A3, A4, A5>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<void>;\nexport declare function bindNodeCallback(callbackFunc: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/empty.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * {@link Scheduler}. It is preferrable to use this over `empty()`.\n */\nexport declare const EMPTY: Observable<never>;\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * <img src=\"./img/empty.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * @example <caption>Emit the number 7, then complete.</caption>\n * var result = Rx.Observable.empty().startWith(7);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n * var interval = Rx.Observable.interval(1000);\n * var result = interval.mergeMap(x =>\n *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n *\n * @see {@link create}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throw}\n *\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the complete notification.\n * @return {Observable} An \"empty\" Observable: emits only the complete\n * notification.\n * @static true\n * @name empty\n * @owner Observable\n * @deprecated Deprecated in favor of using EMPTY constant.\n */\nexport declare function empty(scheduler?: SchedulerLike): Observable<never>;\nexport declare function emptyScheduled(scheduler: SchedulerLike): Observable<never>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/forkJoin.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nexport declare function forkJoin<T>(sources: [ObservableInput<T>]): Observable<T[]>;\nexport declare function forkJoin<T, T2>(sources: [ObservableInput<T>, ObservableInput<T2>]): Observable<[T, T2]>;\nexport declare function forkJoin<T, T2, T3>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>]): Observable<[T, T2, T3]>;\nexport declare function forkJoin<T, T2, T3, T4>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>]): Observable<[T, T2, T3, T4]>;\nexport declare function forkJoin<T, T2, T3, T4, T5>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>, ObservableInput<T5>]): Observable<[T, T2, T3, T4, T5]>;\nexport declare function forkJoin<T, T2, T3, T4, T5, T6>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>, ObservableInput<T5>, ObservableInput<T6>]): Observable<[T, T2, T3, T4, T5, T6]>;\nexport declare function forkJoin<T>(sources: Array<ObservableInput<T>>): Observable<T[]>;\nexport declare function forkJoin<T>(v1: ObservableInput<T>): Observable<T[]>;\nexport declare function forkJoin<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport declare function forkJoin<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport declare function forkJoin<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport declare function forkJoin<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport declare function forkJoin<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n/** @deprecated resultSelector is deprecated, pipe to map instead */\nexport declare function forkJoin(...args: Array<ObservableInput<any> | Function>): Observable<any>;\nexport declare function forkJoin<T>(...sources: ObservableInput<T>[]): Observable<T[]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/never.d.ts",
    "content": "import { Observable } from '../Observable';\n/**\n * An Observable that emits no items to the Observer and never completes.\n *\n * <img src=\"./img/never.png\" width=\"100%\">\n *\n * A simple Observable that emits neither values nor errors nor the completion\n * notification. It can be used for testing purposes or for composing with other\n * Observables. Please note that by never emitting a complete notification, this\n * Observable keeps the subscription from being disposed automatically.\n * Subscriptions need to be manually disposed.\n *\n * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n * function info() {\n *   console.log('Will not be called');\n * }\n * var result = NEVER.startWith(7);\n * result.subscribe(x => console.log(x), info, info);\n *\n * @see {@link create}\n * @see {@link EMPTY}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport declare const NEVER: Observable<never>;\n/**\n * @deprecated Deprecated in favor of using NEVER constant.\n */\nexport declare function never(): Observable<never>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/concat.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nexport declare function concat<T>(v1: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport declare function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<T | T2>;\nexport declare function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport declare function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport declare function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport declare function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport declare function concat<T>(...observables: (ObservableInput<T> | SchedulerLike)[]): Observable<T>;\nexport declare function concat<T, R>(...observables: (ObservableInput<any> | SchedulerLike)[]): Observable<R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/fromEvent.d.ts",
    "content": "import { Observable } from '../Observable';\nexport interface NodeStyleEventEmitter {\n    addListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n    removeListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n}\nexport declare type NodeEventHandler = (...args: any[]) => void;\nexport interface JQueryStyleEventEmitter {\n    on: (eventName: string, handler: Function) => void;\n    off: (eventName: string, handler: Function) => void;\n}\nexport interface HasEventTargetAddRemove<E> {\n    addEventListener(type: string, listener: ((evt: E) => void) | null, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener(type: string, listener?: ((evt: E) => void) | null, options?: EventListenerOptions | boolean): void;\n}\nexport declare type EventTargetLike<T> = HasEventTargetAddRemove<T> | NodeStyleEventEmitter | JQueryStyleEventEmitter;\nexport declare type FromEventTarget<T> = EventTargetLike<T> | ArrayLike<EventTargetLike<T>>;\nexport interface EventListenerOptions {\n    capture?: boolean;\n    passive?: boolean;\n    once?: boolean;\n}\nexport interface AddEventListenerOptions extends EventListenerOptions {\n    once?: boolean;\n    passive?: boolean;\n}\nexport declare function fromEvent<T>(target: FromEventTarget<T>, eventName: string): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function fromEvent<T>(target: FromEventTarget<T>, eventName: string, resultSelector: (...args: any[]) => T): Observable<T>;\nexport declare function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions, resultSelector: (...args: any[]) => T): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/range.d.ts",
    "content": "import { SchedulerAction, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\n/**\n * Creates an Observable that emits a sequence of numbers within a specified\n * range.\n *\n * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n *\n * <img src=\"./img/range.png\" width=\"100%\">\n *\n * `range` operator emits a range of sequential integers, in order, where you\n * select the `start` of the range and its `length`. By default, uses no\n * IScheduler and just delivers the notifications synchronously, but may use\n * an optional IScheduler to regulate those deliveries.\n *\n * @example <caption>Emits the numbers 1 to 10</caption>\n * var numbers = Rx.Observable.range(1, 10);\n * numbers.subscribe(x => console.log(x));\n *\n * @see {@link timer}\n * @see {@link interval}\n *\n * @param {number} [start=0] The value of the first integer in the sequence.\n * @param {number} [count=0] The number of sequential integers to generate.\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emissions of the notifications.\n * @return {Observable} An Observable of numbers that emits a finite range of\n * sequential integers.\n * @static true\n * @name range\n * @owner Observable\n */\nexport declare function range(start?: number, count?: number, scheduler?: SchedulerLike): Observable<number>;\n/** @internal */\nexport declare function dispatch(this: SchedulerAction<any>, state: any): void;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/merge.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nexport declare function merge<T>(v1: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport declare function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: SchedulerLike): Observable<T>;\nexport declare function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<T | T2>;\nexport declare function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2>;\nexport declare function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport declare function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport declare function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport declare function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport declare function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport declare function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport declare function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport declare function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport declare function merge<T>(...observables: (ObservableInput<T> | SchedulerLike | number)[]): Observable<T>;\nexport declare function merge<T, R>(...observables: (ObservableInput<any> | SchedulerLike | number)[]): Observable<R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/EmptyError.d.ts",
    "content": "/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport declare class EmptyError extends Error {\n    constructor();\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/fromEventPattern.d.ts",
    "content": "import { Observable } from '../Observable';\nexport declare function fromEventPattern<T>(addHandler: (handler: Function) => any, removeHandler?: (handler: Function, signal?: any) => void): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function fromEventPattern<T>(addHandler: (handler: Function) => any, removeHandler?: (handler: Function, signal?: any) => void, resultSelector?: (...args: any[]) => T): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/iif.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SubscribableOrPromise } from '../types';\n/**\n * Decides at subscription time which Observable will actually be subscribed.\n *\n * <span class=\"informal\">`If` statement for Observables.</span>\n *\n * `if` accepts a condition function and two Observables. When\n * an Observable returned by the operator is subscribed, condition function will be called.\n * Based on what boolean it returns at that moment, consumer will subscribe either to\n * the first Observable (if condition was true) or to the second (if condition was false). Condition\n * function may also not return anything - in that case condition will be evaluated as false and\n * second Observable will be subscribed.\n *\n * Note that Observables for both cases (true and false) are optional. If condition points to an Observable that\n * was left undefined, resulting stream will simply complete immediately. That allows you to, rather\n * then controlling which Observable will be subscribed, decide at runtime if consumer should have access\n * to given Observable or not.\n *\n * If you have more complex logic that requires decision between more than two Observables, {@link defer}\n * will probably be a better choice. Actually `if` can be easily implemented with {@link defer}\n * and exists only for convenience and readability reasons.\n *\n *\n * @example <caption>Change at runtime which Observable will be subscribed</caption>\n * let subscribeToFirst;\n * const firstOrSecond = Rx.Observable.if(\n *   () => subscribeToFirst,\n *   Rx.Observable.of('first'),\n *   Rx.Observable.of('second')\n * );\n *\n * subscribeToFirst = true;\n * firstOrSecond.subscribe(value => console.log(value));\n *\n * // Logs:\n * // \"first\"\n *\n * subscribeToFirst = false;\n * firstOrSecond.subscribe(value => console.log(value));\n *\n * // Logs:\n * // \"second\"\n *\n *\n * @example <caption>Control an access to an Observable</caption>\n * let accessGranted;\n * const observableIfYouHaveAccess = Rx.Observable.if(\n *   () => accessGranted,\n *   Rx.Observable.of('It seems you have an access...') // Note that only one Observable is passed to the operator.\n * );\n *\n * accessGranted = true;\n * observableIfYouHaveAccess.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('The end')\n * );\n *\n * // Logs:\n * // \"It seems you have an access...\"\n * // \"The end\"\n *\n * accessGranted = false;\n * observableIfYouHaveAccess.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('The end')\n * );\n *\n * // Logs:\n * // \"The end\"\n *\n * @see {@link defer}\n *\n * @param {function(): boolean} condition Condition which Observable should be chosen.\n * @param {Observable} [trueObservable] An Observable that will be subscribed if condition is true.\n * @param {Observable} [falseObservable] An Observable that will be subscribed if condition is false.\n * @return {Observable} Either first or second Observable, depending on condition.\n * @static true\n * @name iif\n * @owner Observable\n */\nexport declare function iif<T, F>(condition: () => boolean, trueResult?: SubscribableOrPromise<T>, falseResult?: SubscribableOrPromise<F>): Observable<T | F>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/defer.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SubscribableOrPromise } from '../types';\n/**\n * Creates an Observable that, on subscribe, calls an Observable factory to\n * make an Observable for each new Observer.\n *\n * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n * is subscribed.\n * </span>\n *\n * <img src=\"./img/defer.png\" width=\"100%\">\n *\n * `defer` allows you to create the Observable only when the Observer\n * subscribes, and create a fresh Observable for each Observer. It waits until\n * an Observer subscribes to it, and then it generates an Observable,\n * typically with an Observable factory function. It does this afresh for each\n * subscriber, so although each subscriber may think it is subscribing to the\n * same Observable, in fact each subscriber gets its own individual\n * Observable.\n *\n * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n * var clicksOrInterval = Rx.Observable.defer(function () {\n *   if (Math.random() > 0.5) {\n *     return Rx.Observable.fromEvent(document, 'click');\n *   } else {\n *     return Rx.Observable.interval(1000);\n *   }\n * });\n * clicksOrInterval.subscribe(x => console.log(x));\n *\n * // Results in the following behavior:\n * // If the result of Math.random() is greater than 0.5 it will listen\n * // for clicks anywhere on the \"document\"; when document is clicked it\n * // will log a MouseEvent object to the console. If the result is less\n * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n *\n * @see {@link create}\n *\n * @param {function(): SubscribableOrPromise} observableFactory The Observable\n * factory function to invoke for each Observer that subscribes to the output\n * Observable. May also return a Promise, which will be converted on the fly\n * to an Observable.\n * @return {Observable} An Observable whose Observers' subscriptions trigger\n * an invocation of the given Observable factory function.\n * @static true\n * @name defer\n * @owner Observable\n */\nexport declare function defer<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/throwError.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * <img src=\"./img/throw.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * @example <caption>Emit the number 7, then emit an error.</caption>\n * import { throwError, concat, of } from 'rxjs/create';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n * import { throwError, interval, of } from 'rxjs/create';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 13 ?\n *     throwError('Thirteens are bad') :\n *     of('a', 'b', 'c')\n *   )\n * ).subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link create}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throw\n * @owner Observable\n */\nexport declare function throwError(error: any, scheduler?: SchedulerLike): Observable<never>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/pairs.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n/**\n * Convert an object into an observable sequence of [key, value] pairs\n * using an optional IScheduler to enumerate the object.\n *\n * @example <caption>Converts a javascript object to an Observable</caption>\n * var obj = {\n *   foo: 42,\n *   bar: 56,\n *   baz: 78\n * };\n *\n * var source = Rx.Observable.pairs(obj);\n *\n * var subscription = source.subscribe(\n *   function (x) {\n *     console.log('Next: %s', x);\n *   },\n *   function (err) {\n *     console.log('Error: %s', err);\n *   },\n *   function () {\n *     console.log('Completed');\n *   });\n *\n * @param {Object} obj The object to inspect and turn into an\n * Observable sequence.\n * @param {Scheduler} [scheduler] An optional IScheduler to run the\n * enumeration of the input sequence on.\n * @returns {(Observable<[string, T]>)} An observable sequence of\n * [key, value] pairs from the object.\n */\nexport declare function pairs<T>(obj: Object, scheduler?: SchedulerLike): Observable<[string, T]>;\n/** @internal */\nexport declare function dispatch<T>(this: SchedulerAction<any>, state: {\n    keys: string[];\n    index: number;\n    subscriber: Subscriber<[string, T]>;\n    subscription: Subscription;\n    obj: Object;\n}): void;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/timer.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n/**\n * Creates an Observable that starts emitting after an `initialDelay` and\n * emits ever increasing numbers after each `period` of time thereafter.\n *\n * <span class=\"informal\">Its like {@link interval}, but you can specify when\n * should the emissions start.</span>\n *\n * <img src=\"./img/timer.png\" width=\"100%\">\n *\n * `timer` returns an Observable that emits an infinite sequence of ascending\n * integers, with a constant interval of time, `period` of your choosing\n * between those emissions. The first emission happens after the specified\n * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n * operator uses the `async` IScheduler to provide a notion of time, but you\n * may pass any IScheduler to it. If `period` is not specified, the output\n * Observable emits only one value, `0`. Otherwise, it emits an infinite\n * sequence.\n *\n * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n * var numbers = Rx.Observable.timer(3000, 1000);\n * numbers.subscribe(x => console.log(x));\n *\n * @example <caption>Emits one number after five seconds</caption>\n * var numbers = Rx.Observable.timer(5000);\n * numbers.subscribe(x => console.log(x));\n *\n * @see {@link interval}\n * @see {@link delay}\n *\n * @param {number|Date} [dueTime] The initial delay time to wait before\n * emitting the first value of `0`.\n * @param {number|SchedulerLike} [periodOrScheduler] The period of time between emissions of the\n * subsequent numbers.\n * @param {SchedulerLike} [scheduler=async] The IScheduler to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a `0` after the\n * `initialDelay` and ever increasing numbers after each `period` of time\n * thereafter.\n * @static true\n * @name timer\n * @owner Observable\n */\nexport declare function timer(dueTime?: number | Date, periodOrScheduler?: number | SchedulerLike, scheduler?: SchedulerLike): Observable<number>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/generate.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nexport declare type ConditionFunc<S> = (state: S) => boolean;\nexport declare type IterateFunc<S> = (state: S) => S;\nexport declare type ResultFunc<S, T> = (state: S) => T;\nexport interface GenerateBaseOptions<S> {\n    /**\n     * Initial state.\n     */\n    initialState: S;\n    /**\n     * Condition function that accepts state and returns boolean.\n     * When it returns false, the generator stops.\n     * If not specified, a generator never stops.\n     */\n    condition?: ConditionFunc<S>;\n    /**\n     * Iterate function that accepts state and returns new state.\n     */\n    iterate: IterateFunc<S>;\n    /**\n     * SchedulerLike to use for generation process.\n     * By default, a generator starts immediately.\n     */\n    scheduler?: SchedulerLike;\n}\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n    /**\n     * Result selection function that accepts state and returns a value to emit.\n     */\n    resultSelector: ResultFunc<S, T>;\n}\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n *\n * <img src=\"./img/generate.png\" width=\"100%\">\n *\n * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n *\n * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n * var res = Rx.Observable.generate(1, x => x < 5, x =>  * 2, x => x + 1, Rx.Scheduler.asap);\n *\n * @see {@link from}\n * @see {@link create}\n *\n * @param {S} initialState Initial state.\n * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n * @param {function (state: S): S} iterate Iteration step function.\n * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n * @param {Scheduler} [scheduler] A {@link SchedulerLike} on which to run the generator loop. If not provided, defaults to emit immediately.\n * @returns {Observable<T>} The generated sequence.\n */\nexport declare function generate<T, S>(initialState: S, condition: ConditionFunc<S>, iterate: IterateFunc<S>, resultSelector: ResultFunc<S, T>, scheduler?: SchedulerLike): Observable<T>;\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n * The overload uses state as an emitted value.\n *\n * <img src=\"./img/generate.png\" width=\"100%\">\n *\n * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n *\n * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n * var res = Rx.Observable.generate(1, x => x < 5, x => x  * 2, Rx.Scheduler.asap);\n *\n * @see {@link from}\n * @see {@link create}\n *\n * @param {S} initialState Initial state.\n * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n * @param {function (state: S): S} iterate Iteration step function.\n * @param {Scheduler} [scheduler] A {@link SchedulerLike} on which to run the generator loop. If not provided, defaults to emit immediately.\n * @returns {Observable<S>} The generated sequence.\n */\nexport declare function generate<S>(initialState: S, condition: ConditionFunc<S>, iterate: IterateFunc<S>, scheduler?: SchedulerLike): Observable<S>;\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n * The overload accepts options object that might contain initial state, iterate,\n * condition and scheduler.\n *\n * <img src=\"./img/generate.png\" width=\"100%\">\n *\n * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n * var res = Rx.Observable.generate({\n *   initialState: 0,\n *   condition: x => x < 10,\n *   iterate: x => x + 1\n * });\n *\n * @see {@link from}\n * @see {@link create}\n *\n * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n * @returns {Observable<S>} The generated sequence.\n */\nexport declare function generate<S>(options: GenerateBaseOptions<S>): Observable<S>;\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n * The overload accepts options object that might contain initial state, iterate,\n * condition, result selector and scheduler.\n *\n * <img src=\"./img/generate.png\" width=\"100%\">\n *\n * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n * var res = Rx.Observable.generate({\n *   initialState: 0,\n *   condition: x => x < 10,\n *   iterate: x => x + 1,\n *   resultSelector: x => x\n * });\n *\n * @see {@link from}\n * @see {@link create}\n *\n * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n * @returns {Observable<T>} The generated sequence.\n */\nexport declare function generate<T, S>(options: GenerateOptions<T, S>): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/bindCallback.d.ts",
    "content": "import { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\n/** @deprecated resultSelector is no longer supported, use a mapping function. */\nexport declare function bindCallback(callbackFunc: Function, resultSelector: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\nexport declare function bindCallback<R1, R2, R3, R4>(callbackFunc: (callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): () => Observable<any[]>;\nexport declare function bindCallback<R1, R2, R3>(callbackFunc: (callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2, R3]>;\nexport declare function bindCallback<R1, R2>(callbackFunc: (callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2]>;\nexport declare function bindCallback<R1>(callbackFunc: (callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): () => Observable<R1>;\nexport declare function bindCallback(callbackFunc: (callback: () => any) => any, scheduler?: SchedulerLike): () => Observable<void>;\nexport declare function bindCallback<A1, R1, R2, R3, R4>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<any[]>;\nexport declare function bindCallback<A1, R1, R2, R3>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2, R3]>;\nexport declare function bindCallback<A1, R1, R2>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2]>;\nexport declare function bindCallback<A1, R1>(callbackFunc: (arg1: A1, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<R1>;\nexport declare function bindCallback<A1>(callbackFunc: (arg1: A1, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<void>;\nexport declare function bindCallback<A1, A2, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<any[]>;\nexport declare function bindCallback<A1, A2, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2, R3]>;\nexport declare function bindCallback<A1, A2, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2]>;\nexport declare function bindCallback<A1, A2, R1>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<R1>;\nexport declare function bindCallback<A1, A2>(callbackFunc: (arg1: A1, arg2: A2, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<void>;\nexport declare function bindCallback<A1, A2, A3, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<any[]>;\nexport declare function bindCallback<A1, A2, A3, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2, R3]>;\nexport declare function bindCallback<A1, A2, A3, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2]>;\nexport declare function bindCallback<A1, A2, A3, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<R1>;\nexport declare function bindCallback<A1, A2, A3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<void>;\nexport declare function bindCallback<A1, A2, A3, A4, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<any[]>;\nexport declare function bindCallback<A1, A2, A3, A4, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2, R3]>;\nexport declare function bindCallback<A1, A2, A3, A4, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2]>;\nexport declare function bindCallback<A1, A2, A3, A4, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<R1>;\nexport declare function bindCallback<A1, A2, A3, A4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<void>;\nexport declare function bindCallback<A1, A2, A3, A4, A5, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<any[]>;\nexport declare function bindCallback<A1, A2, A3, A4, A5, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2, R3]>;\nexport declare function bindCallback<A1, A2, A3, A4, A5, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2]>;\nexport declare function bindCallback<A1, A2, A3, A4, A5, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<R1>;\nexport declare function bindCallback<A1, A2, A3, A4, A5>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<void>;\nexport declare function bindCallback<A, R>(callbackFunc: (...args: Array<A | ((result: R) => any)>) => any, scheduler?: SchedulerLike): (...args: A[]) => Observable<R>;\nexport declare function bindCallback<A, R>(callbackFunc: (...args: Array<A | ((...results: R[]) => any)>) => any, scheduler?: SchedulerLike): (...args: A[]) => Observable<R[]>;\nexport declare function bindCallback(callbackFunc: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/onErrorResumeNext.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nexport declare function onErrorResumeNext<R>(v: ObservableInput<R>): Observable<R>;\nexport declare function onErrorResumeNext<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport declare function onErrorResumeNext<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport declare function onErrorResumeNext<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport declare function onErrorResumeNext<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\nexport declare function onErrorResumeNext<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport declare function onErrorResumeNext<R>(array: ObservableInput<any>[]): Observable<R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/race.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../types';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport declare function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport declare function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport declare function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport declare class RaceOperator<T> implements Operator<T, T> {\n    call(subscriber: Subscriber<T>, source: any): TeardownLogic;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n    private hasFirst;\n    private observables;\n    private subscriptions;\n    constructor(destination: Subscriber<T>);\n    protected _next(observable: any): void;\n    protected _complete(): void;\n    notifyNext(outerValue: T, innerValue: T, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, T>): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/types.d.ts",
    "content": "import { Observable } from './Observable';\nimport { Subscription } from './Subscription';\n/** OPERATOR INTERFACES */\nexport interface UnaryFunction<T, R> {\n    (source: T): R;\n}\nexport interface OperatorFunction<T, R> extends UnaryFunction<Observable<T>, Observable<R>> {\n}\nexport declare type FactoryOrValue<T> = T | (() => T);\nexport interface MonoTypeOperatorFunction<T> extends OperatorFunction<T, T> {\n}\nexport interface Timestamp<T> {\n    value: T;\n    timestamp: number;\n}\nexport interface TimeInterval<T> {\n    value: T;\n    interval: number;\n}\n/** SUBSCRIPTION INTERFACES */\nexport interface Unsubscribable {\n    unsubscribe(): void;\n}\nexport declare type TeardownLogic = Unsubscribable | Function | void;\nexport interface SubscriptionLike extends Unsubscribable {\n    unsubscribe(): void;\n    readonly closed: boolean;\n}\nexport declare type SubscribableOrPromise<T> = Subscribable<T> | Subscribable<never> | PromiseLike<T> | InteropObservable<T>;\n/** OBSERVABLE INTERFACES */\nexport interface Subscribable<T> {\n    subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void), error?: (error: any) => void, complete?: () => void): Unsubscribable;\n}\nexport declare type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T> | Iterable<T>;\n/** @deprecated use {@link InteropObservable } */\nexport declare type ObservableLike<T> = InteropObservable<T>;\nexport declare type InteropObservable<T> = {\n    [Symbol.observable]: () => Subscribable<T>;\n};\n/** OBSERVER INTERFACES */\nexport interface NextObserver<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error?: (err: any) => void;\n    complete?: () => void;\n}\nexport interface ErrorObserver<T> {\n    closed?: boolean;\n    next?: (value: T) => void;\n    error: (err: any) => void;\n    complete?: () => void;\n}\nexport interface CompletionObserver<T> {\n    closed?: boolean;\n    next?: (value: T) => void;\n    error?: (err: any) => void;\n    complete: () => void;\n}\nexport declare type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n/** SCHEDULER INTERFACES */\nexport interface SchedulerLike {\n    now(): number;\n    schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\nexport interface SchedulerAction<T> extends Subscription {\n    schedule(state?: T, delay?: number): Subscription;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/zip.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { ObservableInput } from '../types';\nimport { Subscriber } from '../Subscriber';\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport declare function zip<T, R>(v1: ObservableInput<T>, resultSelector: (v1: T) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport declare function zip<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, resultSelector: (v1: T, v2: T2) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport declare function zip<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport declare function zip<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport declare function zip<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport declare function zip<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\nexport declare function zip<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport declare function zip<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport declare function zip<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport declare function zip<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport declare function zip<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\nexport declare function zip<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport declare function zip<R>(array: ObservableInput<any>[]): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport declare function zip<T, R>(array: ObservableInput<T>[], resultSelector: (...values: Array<T>) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport declare function zip<R>(array: ObservableInput<any>[], resultSelector: (...values: Array<any>) => R): Observable<R>;\nexport declare function zip<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport declare function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport declare function zip<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport declare class ZipOperator<T, R> implements Operator<T, R> {\n    resultSelector: (...values: Array<any>) => R;\n    constructor(resultSelector?: (...values: Array<any>) => R);\n    call(subscriber: Subscriber<R>, source: any): any;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class ZipSubscriber<T, R> extends Subscriber<T> {\n    private values;\n    private resultSelector;\n    private iterators;\n    private active;\n    constructor(destination: Subscriber<R>, resultSelector?: (...values: Array<any>) => R, values?: any);\n    protected _next(value: any): void;\n    protected _complete(): void;\n    notifyInactive(): void;\n    checkIterators(): void;\n    protected _tryresultSelector(args: any[]): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/of.d.ts",
    "content": "import { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nexport declare function of<T>(a: T, scheduler?: SchedulerLike): Observable<T>;\nexport declare function of<T, T2>(a: T, b: T2, scheduler?: SchedulerLike): Observable<T | T2>;\nexport declare function of<T, T2, T3>(a: T, b: T2, c: T3, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport declare function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport declare function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport declare function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport declare function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\nexport declare function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\nexport declare function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\nexport declare function of<T>(...args: Array<T | SchedulerLike>): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/using.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { Unsubscribable, ObservableInput } from '../types';\n/**\n * Creates an Observable that uses a resource which will be disposed at the same time as the Observable.\n *\n * <span class=\"informal\">Use it when you catch yourself cleaning up after an Observable.</span>\n *\n * `using` is a factory operator, which accepts two functions. First function returns a disposable resource.\n * It can be an arbitrary object that implements `unsubscribe` method. Second function will be injected with\n * that object and should return an Observable. That Observable can use resource object during its execution.\n * Both functions passed to `using` will be called every time someone subscribes - neither an Observable nor\n * resource object will be shared in any way between subscriptions.\n *\n * When Observable returned by `using` is subscribed, Observable returned from the second function will be subscribed\n * as well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output\n * Observable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,\n * the `unsubscribe` method on resource object will be called. This can be used to do any necessary clean up, which\n * otherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone\n * cancels subscription to an Observable via `unsubscribe`, so `using` can be used as a hook, allowing you to make\n * sure that all resources which need to exist during an Observable execution will be disposed at appropriate time.\n *\n * @see {@link defer}\n *\n * @param {function(): ISubscription} resourceFactory A function which creates any resource object\n * that implements `unsubscribe` method.\n * @param {function(resource: ISubscription): Observable<T>} observableFactory A function which\n * creates an Observable, that can use injected resource object.\n * @return {Observable<T>} An Observable that behaves the same as Observable returned by `observableFactory`, but\n * which - when completed, errored or unsubscribed - will also call `unsubscribe` on created resource object.\n */\nexport declare function using<T>(resourceFactory: () => Unsubscribable | void, observableFactory: (resource: Unsubscribable | void) => ObservableInput<T> | void): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/interval.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n/**\n * Creates an Observable that emits sequential numbers every specified\n * interval of time, on a specified IScheduler.\n *\n * <span class=\"informal\">Emits incremental numbers periodically in time.\n * </span>\n *\n * <img src=\"./img/interval.png\" width=\"100%\">\n *\n * `interval` returns an Observable that emits an infinite sequence of\n * ascending integers, with a constant interval of time of your choosing\n * between those emissions. The first emission is not sent immediately, but\n * only after the first period has passed. By default, this operator uses the\n * `async` IScheduler to provide a notion of time, but you may pass any\n * IScheduler to it.\n *\n * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n * var numbers = Rx.Observable.interval(1000);\n * numbers.subscribe(x => console.log(x));\n *\n * @see {@link timer}\n * @see {@link delay}\n *\n * @param {number} [period=0] The interval size in milliseconds (by default)\n * or the time unit determined by the scheduler's clock.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a sequential number each time\n * interval.\n * @static true\n * @name interval\n * @owner Observable\n */\nexport declare function interval(period?: number, scheduler?: SchedulerLike): Observable<number>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/combineLatest.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Operator } from '../Operator';\nimport { InnerSubscriber } from '../InnerSubscriber';\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function combineLatest<T, R>(v1: ObservableInput<T>, resultSelector: (v1: T) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, resultSelector: (v1: T, v2: T2) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: SchedulerLike): Observable<R>;\nexport declare function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<[T, T2]>;\nexport declare function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<[T, T2, T3]>;\nexport declare function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4]>;\nexport declare function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4, T5]>;\nexport declare function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4, T5, T6]>;\nexport declare function combineLatest<T>(array: ObservableInput<T>[], scheduler?: SchedulerLike): Observable<T[]>;\nexport declare function combineLatest<R>(array: ObservableInput<any>[], scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function combineLatest<T, R>(array: ObservableInput<T>[], resultSelector: (...values: Array<T>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function combineLatest<R>(array: ObservableInput<any>[], resultSelector: (...values: Array<any>) => R, scheduler?: SchedulerLike): Observable<R>;\nexport declare function combineLatest<T>(...observables: Array<ObservableInput<T> | SchedulerLike>): Observable<T[]>;\nexport declare function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | SchedulerLike>): Observable<R>;\nexport declare function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | SchedulerLike>): Observable<R>;\nexport declare class CombineLatestOperator<T, R> implements Operator<T, R> {\n    private resultSelector;\n    constructor(resultSelector?: (...values: Array<any>) => R);\n    call(subscriber: Subscriber<R>, source: any): any;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n    private resultSelector;\n    private active;\n    private values;\n    private observables;\n    private toRespond;\n    constructor(destination: Subscriber<R>, resultSelector?: (...values: Array<any>) => R);\n    protected _next(observable: any): void;\n    protected _complete(): void;\n    notifyComplete(unused: Subscriber<R>): void;\n    notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, R>): void;\n    private _tryResultSelector(values);\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/queue.d.ts",
    "content": "import { QueueScheduler } from './QueueScheduler';\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexport declare const queue: QueueScheduler;\n"
  },
  {
    "path": "node_modules/rxjs/internal/Observable.d.ts",
    "content": "import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic } from './types';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { OperatorFunction, PartialObserver, Subscribable } from '../internal/types';\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport declare class Observable<T> implements Subscribable<T> {\n    /** Internal implementation detail, do not use directly. */\n    _isScalar: boolean;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    source: Observable<any>;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    operator: Operator<any, T>;\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic);\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     * @nocollapse\n     */\n    static create: Function;\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    lift<R>(operator: Operator<T, R>): Observable<R>;\n    subscribe(observer?: PartialObserver<T>): Subscription;\n    subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _trySubscribe(sink: Subscriber<T>): TeardownLogic;\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void>;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<any>): TeardownLogic;\n    /**\n     * @nocollapse\n     * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n     */\n    static if: typeof iif;\n    /**\n     * @nocollapse\n     * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n     */\n    static throw: typeof throwError;\n    pipe(): Observable<T>;\n    pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n    pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n    pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n    pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n    pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n    pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n    pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n    pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n    pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n    pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R>;\n    toPromise<T>(this: Observable<T>): Promise<T>;\n    toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n    toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/config.d.ts",
    "content": "/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport declare const config: {\n    Promise: PromiseConstructorLike;\n    useDeprecatedSynchronousErrorHandling: boolean;\n};\n"
  },
  {
    "path": "node_modules/rxjs/internal/testing/TestScheduler.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { VirtualTimeScheduler } from '../scheduler/VirtualTimeScheduler';\nexport interface RunHelpers {\n    cold: typeof TestScheduler.prototype.createColdObservable;\n    hot: typeof TestScheduler.prototype.createHotObservable;\n    flush: typeof TestScheduler.prototype.flush;\n    expectObservable: typeof TestScheduler.prototype.expectObservable;\n    expectSubscriptions: typeof TestScheduler.prototype.expectSubscriptions;\n}\nexport declare type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport declare type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\nexport declare class TestScheduler extends VirtualTimeScheduler {\n    assertDeepEqual: (actual: any, expected: any) => boolean | void;\n    readonly hotObservables: HotObservable<any>[];\n    readonly coldObservables: ColdObservable<any>[];\n    private flushTests;\n    private runMode;\n    constructor(assertDeepEqual: (actual: any, expected: any) => boolean | void);\n    createTime(marbles: string): number;\n    createColdObservable<T>(marbles: string, values?: any, error?: any): ColdObservable<T>;\n    createHotObservable<T>(marbles: string, values?: any, error?: any): HotObservable<T>;\n    private materializeInnerObservable(observable, outerFrame);\n    expectObservable(observable: Observable<any>, unsubscriptionMarbles?: string): ({\n        toBe: observableToBeFn;\n    });\n    expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({\n        toBe: subscriptionLogsToBeFn;\n    });\n    flush(): void;\n    /** @nocollapse */\n    static parseMarblesAsSubscriptions(marbles: string, runMode?: boolean): SubscriptionLog;\n    /** @nocollapse */\n    static parseMarbles(marbles: string, values?: any, errorValue?: any, materializeInnerObservables?: boolean, runMode?: boolean): TestMessage[];\n    run<T>(callback: (helpers: RunHelpers) => T): T;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/symbol/observable.d.ts",
    "content": "/** Symbol.observable addition */\ndeclare global  {\n    interface SymbolConstructor {\n        observable: symbol;\n    }\n}\n/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport declare const observable: string | symbol;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/dom/ajax.d.ts",
    "content": "import { AjaxCreationMethod } from './AjaxObservable';\nexport declare const ajax: AjaxCreationMethod;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/dom/AjaxObservable.d.ts",
    "content": "import { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../types';\nexport interface AjaxRequest {\n    url?: string;\n    body?: any;\n    user?: string;\n    async?: boolean;\n    method?: string;\n    headers?: Object;\n    timeout?: number;\n    password?: string;\n    hasContent?: boolean;\n    crossDomain?: boolean;\n    withCredentials?: boolean;\n    createXHR?: () => XMLHttpRequest;\n    progressSubscriber?: Subscriber<any>;\n    responseType?: string;\n}\nexport interface AjaxCreationMethod {\n    (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n    get(url: string, headers?: Object): Observable<AjaxResponse>;\n    post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n    put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n    patch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n    delete(url: string, headers?: Object): Observable<AjaxResponse>;\n    getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\nexport declare function ajaxGet(url: string, headers?: Object): AjaxObservable<AjaxResponse>;\nexport declare function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\nexport declare function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse>;\nexport declare function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\nexport declare function ajaxPatch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\nexport declare function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T>;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport declare class AjaxObservable<T> extends Observable<T> {\n    /**\n     * Creates an observable for an Ajax request with either a request object with\n     * url, headers, etc or a string for a URL.\n     *\n     * @example\n     * source = Rx.Observable.ajax('/products');\n     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n     *\n     * @param {string|Object} request Can be one of the following:\n     *   A string of the URL to make the Ajax call.\n     *   An object with the following properties\n     *   - url: URL of the request\n     *   - body: The body of the request\n     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n     *   - async: Whether the request is async\n     *   - headers: Optional headers\n     *   - crossDomain: true if a cross domain request, else false\n     *   - createXHR: a function to override if you need to use an alternate\n     *   XMLHttpRequest implementation.\n     *   - resultSelector: a function to use to alter the output value type of\n     *   the Observable. Gets {@link AjaxResponse} as an argument.\n     * @return {Observable} An observable sequence containing the XMLHttpRequest.\n     * @static true\n     * @name ajax\n     * @owner Observable\n     * @nocollapse\n    */\n    static create: AjaxCreationMethod;\n    private request;\n    constructor(urlOrRequest: string | AjaxRequest);\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<T>): TeardownLogic;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class AjaxSubscriber<T> extends Subscriber<Event> {\n    request: AjaxRequest;\n    private xhr;\n    private done;\n    constructor(destination: Subscriber<T>, request: AjaxRequest);\n    next(e: Event): void;\n    private send();\n    private serializeBody(body, contentType?);\n    private setHeaders(xhr, headers);\n    private setupEvents(xhr, request);\n    unsubscribe(): void;\n}\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport declare class AjaxResponse {\n    originalEvent: Event;\n    xhr: XMLHttpRequest;\n    request: AjaxRequest;\n    /** @type {number} The HTTP status code */\n    status: number;\n    /** @type {string|ArrayBuffer|Document|object|any} The response data */\n    response: any;\n    /** @type {string} The raw responseText */\n    responseText: string;\n    /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n    responseType: string;\n    constructor(originalEvent: Event, xhr: XMLHttpRequest, request: AjaxRequest);\n}\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport declare class AjaxError extends Error {\n    /** @type {XMLHttpRequest} The XHR instance associated with the error */\n    xhr: XMLHttpRequest;\n    /** @type {AjaxRequest} The AjaxRequest associated with the error */\n    request: AjaxRequest;\n    /** @type {number} The HTTP status code */\n    status: number;\n    /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n    responseType: string;\n    /** @type {string|ArrayBuffer|Document|object|any} The response data */\n    response: any;\n    constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest);\n}\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport declare class AjaxTimeoutError extends AjaxError {\n    constructor(xhr: XMLHttpRequest, request: AjaxRequest);\n}\n"
  },
  {
    "path": "node_modules/@angular/common/http/package.json",
    "content": "{\n  \"name\": \"@angular/common/http\",\n  \"typings\": \"./http.d.ts\",\n  \"main\": \"../bundles/common-http.umd.js\",\n  \"module\": \"../fesm5/http.js\",\n  \"es2015\": \"../fesm2015/http.js\",\n  \"esm5\": \"../esm5/http/http.js\",\n  \"esm2015\": \"../esm2015/http/http.js\",\n  \"fesm5\": \"../fesm5/http.js\",\n  \"fesm2015\": \"../fesm2015/http.js\",\n  \"sideEffects\": false\n}"
  },
  {
    "path": "node_modules/@angular/common/testing/package.json",
    "content": "{\n  \"name\": \"@angular/common/testing\",\n  \"typings\": \"./testing.d.ts\",\n  \"main\": \"../bundles/common-testing.umd.js\",\n  \"module\": \"../fesm5/testing.js\",\n  \"es2015\": \"../fesm2015/testing.js\",\n  \"esm5\": \"../esm5/testing/testing.js\",\n  \"esm2015\": \"../esm2015/testing/testing.js\",\n  \"fesm5\": \"../fesm5/testing.js\",\n  \"fesm2015\": \"../fesm2015/testing.js\"\n}"
  },
  {
    "path": "node_modules/@angular/common/http/testing/package.json",
    "content": "{\n  \"name\": \"@angular/common/http/testing\",\n  \"typings\": \"./testing.d.ts\",\n  \"main\": \"../../bundles/common-http-testing.umd.js\",\n  \"module\": \"../../fesm5/http/testing.js\",\n  \"es2015\": \"../../fesm2015/http/testing.js\",\n  \"esm5\": \"../../esm5/http/testing/testing.js\",\n  \"esm2015\": \"../../esm2015/http/testing/testing.js\",\n  \"fesm5\": \"../../fesm5/http/testing.js\",\n  \"fesm2015\": \"../../fesm2015/http/testing.js\"\n}"
  },
  {
    "path": "node_modules/rxjs/internal/SubjectSubscription.d.ts",
    "content": "import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class SubjectSubscription<T> extends Subscription {\n    subject: Subject<T>;\n    subscriber: Observer<T>;\n    closed: boolean;\n    constructor(subject: Subject<T>, subscriber: Observer<T>);\n    unsubscribe(): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/InnerSubscriber.d.ts",
    "content": "import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class InnerSubscriber<T, R> extends Subscriber<R> {\n    private parent;\n    outerValue: T;\n    outerIndex: number;\n    private index;\n    constructor(parent: OuterSubscriber<T, R>, outerValue: T, outerIndex: number);\n    protected _next(value: R): void;\n    protected _error(error: any): void;\n    protected _complete(): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/OuterSubscriber.d.ts",
    "content": "import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class OuterSubscriber<T, R> extends Subscriber<T> {\n    notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, R>): void;\n    notifyError(error: any, innerSub: InnerSubscriber<T, R>): void;\n    notifyComplete(innerSub: InnerSubscriber<T, R>): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/fromIterable.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nexport declare function fromIterable<T>(input: Iterable<T>, scheduler: SchedulerLike): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/fromPromise.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nexport declare function fromPromise<T>(input: PromiseLike<T>, scheduler?: SchedulerLike): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/dom/webSocket.d.ts",
    "content": "import { WebSocketSubject, WebSocketSubjectConfig } from './WebSocketSubject';\n/**\n * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n *\n * @example <caption>Wraps browser WebSocket</caption>\n *\n * import { webSocket } from 'rxjs/webSocket';\n *\n * let socket$ = webSocket('ws://localhost:8081');\n *\n * socket$.subscribe(\n *   (msg) => console.log('message received: ' + msg),\n *   (err) => console.log(err),\n *   () => console.log('complete')\n * );\n *\n * socket$.next(JSON.stringify({ op: 'hello' }));\n *\n * @example <caption>Wraps WebSocket from nodejs-webSocket (using node.js)</caption>\n *\n * import { webSocket } from 'rxjs/webSocket';\n * import { w3cwebSocket } from 'webSocket';\n *\n * let socket$ = webSocket({\n *   url: 'ws://localhost:8081',\n *   WebSocketCtor: w3cwebSocket\n * });\n *\n * socket$.subscribe(\n *   (msg) => console.log('message received: ' + msg),\n *   (err) => console.log(err),\n *   () => console.log('complete')\n * );\n *\n * socket$.next(JSON.stringify({ op: 'hello' }));\n *\n * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the webSocket as an url or a structure defining the webSocket object\n * @return {WebSocketSubject}\n */\nexport declare function webSocket<T>(urlConfigOrSource: string | WebSocketSubjectConfig<T>): WebSocketSubject<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/dom/WebSocketSubject.d.ts",
    "content": "import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { Observer, NextObserver } from '../../types';\nexport interface WebSocketSubjectConfig<T> {\n    /** The url of the socket server to connect to */\n    url: string;\n    /** The protocol to use to connect */\n    protocol?: string | Array<string>;\n    /** @deprecated use {@link deserializer} */\n    resultSelector?: (e: MessageEvent) => T;\n    /**\n     * A serializer used for messages arriving on the over the socket from the\n     * server. Defaults to JSON.parse.\n     */\n    serializer?: (value: T) => WebSocketMessage;\n    /**\n     * A deserializer used to create messages from passed values before the\n     * messages are sent to the server. Defaults to JSON.stringify\n     */\n    deserializer?: (e: MessageEvent) => T;\n    /**\n     * An Observer that watches when open events occur on the underlying web socket.\n     */\n    openObserver?: NextObserver<Event>;\n    /**\n     * An Observer than watches when close events occur on the underlying webSocket\n     */\n    closeObserver?: NextObserver<CloseEvent>;\n    /**\n     * An Observer that watches when a close is about to occur due to\n     * unsubscription.\n     */\n    closingObserver?: NextObserver<void>;\n    /**\n     * A WebSocket constructor to use. This is useful for situations like using a\n     * WebSocket impl in Node (WebSocket is a DOM API), or for mocking a WebSocket\n     * for testing purposes\n     */\n    WebSocketCtor?: {\n        new (url: string, protocols?: string | string[]): WebSocket;\n    };\n    /** Sets the `binaryType` property of the underlying WebSocket. */\n    binaryType?: 'blob' | 'arraybuffer';\n}\nexport declare type WebSocketMessage = string | ArrayBuffer | Blob | ArrayBufferView;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport declare class WebSocketSubject<T> extends AnonymousSubject<T> {\n    private _config;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _output: Subject<T>;\n    private _socket;\n    constructor(urlConfigOrSource: string | WebSocketSubjectConfig<T> | Observable<T>, destination?: Observer<T>);\n    lift<R>(operator: Operator<T, R>): WebSocketSubject<R>;\n    private _resetState();\n    /**\n     * Creates an {@link Observable}, that when subscribed to, sends a message,\n     * defined be the `subMsg` function, to the server over the socket to begin a\n     * subscription to data over that socket. Once data arrives, the\n     * `messageFilter` argument will be used to select the appropriate data for\n     * the resulting Observable. When teardown occurs, either due to\n     * unsubscription, completion or error, a message defined by the `unsubMsg`\n     * argument will be send to the server over the WebSocketSubject.\n     *\n     * @param subMsg A function to generate the subscription message to be sent to\n     * the server. This will still be processed by the serializer in the\n     * WebSocketSubject's config. (Which defaults to JSON serialization)\n     * @param unsubMsg A function to generate the unsubscription message to be\n     * sent to the server at teardown. This will still be processed by the\n     * serializer in the WebSocketSubject's config.\n     * @param messageFilter A predicate for selecting the appropriate messages\n     * from the server for the output stream.\n     */\n    multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean): Observable<any>;\n    private _connectSocket();\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<T>): Subscription;\n    unsubscribe(): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/throttle.d.ts",
    "content": "import { MonoTypeOperatorFunction, SubscribableOrPromise } from '../types';\nexport interface ThrottleConfig {\n    leading?: boolean;\n    trailing?: boolean;\n}\nexport declare const defaultThrottleConfig: ThrottleConfig;\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport declare function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<any>, config?: ThrottleConfig): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/timeInterval.d.ts",
    "content": "import { SchedulerLike, OperatorFunction } from '../types';\nexport declare function timeInterval<T>(scheduler?: SchedulerLike): OperatorFunction<T, TimeInterval<T>>;\nexport declare class TimeInterval<T> {\n    value: T;\n    interval: number;\n    constructor(value: T, interval: number);\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/timestamp.d.ts",
    "content": "import { OperatorFunction, SchedulerLike, Timestamp as TimestampInterface } from '../types';\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport declare function timestamp<T>(scheduler?: SchedulerLike): OperatorFunction<T, Timestamp<T>>;\nexport declare class Timestamp<T> implements TimestampInterface<T> {\n    value: T;\n    timestamp: number;\n    constructor(value: T, timestamp: number);\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/errorObject.d.ts",
    "content": "export declare const errorObject: any;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/hostReportError.d.ts",
    "content": "/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\nexport declare function hostReportError(err: any): void;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isArrayLike.d.ts",
    "content": "export declare const isArrayLike: <T>(x: any) => x is ArrayLike<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isDate.d.ts",
    "content": "export declare function isDate(value: any): value is Date;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isIterable.d.ts",
    "content": "/** Identifies an input as being an Iterable */\nexport declare function isIterable(input: any): input is Iterable<any>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isFunction.d.ts",
    "content": "export declare function isFunction(x: any): x is Function;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isArray.d.ts",
    "content": "export declare const isArray: (arg: any) => arg is any[];\n"
  },
  {
    "path": "node_modules/rxjs/internal/symbol/iterator.d.ts",
    "content": "export declare function getSymbolIterator(): symbol;\nexport declare const iterator: symbol;\n/**\n * @deprecated use {@link iterator} instead\n */\nexport declare const $$iterator: symbol;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isObject.d.ts",
    "content": "export declare function isObject(x: any): x is Object;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/subscribeTo.d.ts",
    "content": "import { ObservableInput } from '../types';\nimport { Subscriber } from '../Subscriber';\nexport declare const subscribeTo: <T>(result: ObservableInput<T>) => (subscriber: Subscriber<T>) => void;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isNumeric.d.ts",
    "content": "export declare function isNumeric(val: any): val is number;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/root.d.ts",
    "content": "declare const _root: any;\nexport { _root as root };\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isPromise.d.ts",
    "content": "export declare function isPromise(value: any): value is PromiseLike<any>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/subscribeToIterable.d.ts",
    "content": "import { Subscriber } from '../Subscriber';\nexport declare const subscribeToIterable: <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => Subscriber<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/SubscribeOnObservable.d.ts",
    "content": "import { SchedulerLike, SchedulerAction } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nexport interface DispatchArg<T> {\n    source: Observable<T>;\n    subscriber: Subscriber<T>;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport declare class SubscribeOnObservable<T> extends Observable<T> {\n    source: Observable<T>;\n    private delayTime;\n    private scheduler;\n    /** @nocollapse */\n    static create<T>(source: Observable<T>, delay?: number, scheduler?: SchedulerLike): Observable<T>;\n    /** @nocollapse */\n    static dispatch<T>(this: SchedulerAction<T>, arg: DispatchArg<T>): Subscription;\n    constructor(source: Observable<T>, delayTime?: number, scheduler?: SchedulerLike);\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<T>): Subscription;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/not.d.ts",
    "content": "export declare function not(pred: Function, thisArg: any): Function;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/subscribeToObservable.d.ts",
    "content": "import { Subscriber } from '../Subscriber';\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport declare const subscribeToObservable: <T>(obj: any) => (subscriber: Subscriber<T>) => any;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/subscribeToPromise.d.ts",
    "content": "import { Subscriber } from '../Subscriber';\nexport declare const subscribeToPromise: <T>(promise: PromiseLike<T>) => (subscriber: Subscriber<T>) => Subscriber<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/Immediate.d.ts",
    "content": "export declare const Immediate: {\n    setImmediate(cb: () => void): number;\n    clearImmediate(handle: number): void;\n};\n"
  },
  {
    "path": "node_modules/rxjs/internal/symbol/rxSubscriber.d.ts",
    "content": "export declare const rxSubscriber: string | symbol;\n/**\n * @deprecated use rxSubscriber instead\n */\nexport declare const $$rxSubscriber: string | symbol;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/subscribeToArray.d.ts",
    "content": "import { Subscriber } from '../Subscriber';\n/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\nexport declare const subscribeToArray: <T>(array: ArrayLike<T>) => (subscriber: Subscriber<T>) => void;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isInteropObservable.d.ts",
    "content": "import { InteropObservable } from '../types';\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport declare function isInteropObservable(input: any): input is InteropObservable<any>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/tryCatch.d.ts",
    "content": "export declare function tryCatch<T extends Function>(fn: T): T;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/applyMixins.d.ts",
    "content": "export declare function applyMixins(derivedCtor: any, baseCtors: any[]): void;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isScheduler.d.ts",
    "content": "import { SchedulerLike } from '../types';\nexport declare function isScheduler(value: any): value is SchedulerLike;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/subscribeToResult.d.ts",
    "content": "import { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nexport declare function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>, result: any, outerValue?: T, outerIndex?: number): Subscription;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/toSubscriber.d.ts",
    "content": "import { Subscriber } from '../Subscriber';\nimport { PartialObserver } from '../types';\nexport declare function toSubscriber<T>(nextOrObserver?: PartialObserver<T> | ((value: T) => void), error?: (error: any) => void, complete?: () => void): Subscriber<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/audit.d.ts",
    "content": "import { MonoTypeOperatorFunction, SubscribableOrPromise } from '../types';\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport declare function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/auditTime.d.ts",
    "content": "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport declare function auditTime<T>(duration: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/buffer.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport declare function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/bufferTime.d.ts",
    "content": "import { OperatorFunction, SchedulerLike } from '../types';\nexport declare function bufferTime<T>(bufferTimeSpan: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\nexport declare function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\nexport declare function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/bufferCount.d.ts",
    "content": "import { OperatorFunction } from '../types';\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport declare function bufferCount<T>(bufferSize: number, startBufferEvery?: number): OperatorFunction<T, T[]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/concat.d.ts",
    "content": "import { ObservableInput, OperatorFunction, MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/** @deprecated Deprecated in favor of static concat. */\nexport declare function concat<T>(scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static concat. */\nexport declare function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;\n/** @deprecated Deprecated in favor of static concat. */\nexport declare function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;\n/** @deprecated Deprecated in favor of static concat. */\nexport declare function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;\n/** @deprecated Deprecated in favor of static concat. */\nexport declare function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\n/** @deprecated Deprecated in favor of static concat. */\nexport declare function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\n/** @deprecated Deprecated in favor of static concat. */\nexport declare function concat<T>(...observables: Array<ObservableInput<T> | SchedulerLike>): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static concat. */\nexport declare function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike>): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/combineLatest.d.ts",
    "content": "import { ObservableInput, OperatorFunction } from '../types';\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/combineAll.d.ts",
    "content": "import { OperatorFunction, ObservableInput } from '../types';\nexport declare function combineAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;\nexport declare function combineAll<T>(): OperatorFunction<any, T[]>;\nexport declare function combineAll<T, R>(project: (...values: T[]) => R): OperatorFunction<ObservableInput<T>, R>;\nexport declare function combineAll<R>(project: (...values: Array<any>) => R): OperatorFunction<any, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/bufferWhen.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport declare function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/bufferToggle.d.ts",
    "content": "import { OperatorFunction, SubscribableOrPromise } from '../types';\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport declare function bufferToggle<T, O>(openings: SubscribableOrPromise<O>, closingSelector: (value: O) => SubscribableOrPromise<any>): OperatorFunction<T, T[]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/concatAll.d.ts",
    "content": "import { OperatorFunction, ObservableInput } from '../types';\nexport declare function concatAll<T>(): OperatorFunction<ObservableInput<T>, T>;\nexport declare function concatAll<R>(): OperatorFunction<any, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/concatMap.d.ts",
    "content": "import { ObservableInput, OperatorFunction } from '../types';\nexport declare function concatMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport declare function concatMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport declare function concatMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/catchError.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ObservableInput, OperatorFunction } from '../types';\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport declare function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/concatMapTo.d.ts",
    "content": "import { ObservableInput, OperatorFunction } from '../types';\nexport declare function concatMapTo<T>(observable: ObservableInput<T>): OperatorFunction<any, T>;\n/** @deprecated */\nexport declare function concatMapTo<T>(observable: ObservableInput<T>, resultSelector: undefined): OperatorFunction<any, T>;\n/** @deprecated */\nexport declare function concatMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/distinctUntilKeyChanged.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\nexport declare function distinctUntilKeyChanged<T>(key: string): MonoTypeOperatorFunction<T>;\nexport declare function distinctUntilKeyChanged<T, K>(key: string, compare: (x: K, y: K) => boolean): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/elementAt.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport declare function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/delayWhen.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport declare function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>, subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/debounceTime.d.ts",
    "content": "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport declare function debounceTime<T>(dueTime: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/defaultIfEmpty.d.ts",
    "content": "import { OperatorFunction, MonoTypeOperatorFunction } from '../types';\nexport declare function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport declare function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/distinctUntilChanged.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\nexport declare function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport declare function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/distinct.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport declare function distinct<T, K>(keySelector?: (value: T) => K, flushes?: Observable<any>): MonoTypeOperatorFunction<T>;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n    private keySelector;\n    private values;\n    constructor(destination: Subscriber<T>, keySelector: (value: T) => K, flushes: Observable<any>);\n    notifyNext(outerValue: T, innerValue: T, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, T>): void;\n    notifyError(error: any, innerSub: InnerSubscriber<T, T>): void;\n    protected _next(value: T): void;\n    private _useKeySelector(value);\n    private _finalizeNext(key, value);\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/count.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport declare function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/dematerialize.d.ts",
    "content": "import { Notification } from '../Notification';\nimport { OperatorFunction } from '../types';\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport declare function dematerialize<T>(): OperatorFunction<Notification<T>, T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/exhaust.d.ts",
    "content": "import { ObservableInput, OperatorFunction } from '../types';\nexport declare function exhaust<T>(): OperatorFunction<ObservableInput<T>, T>;\nexport declare function exhaust<R>(): OperatorFunction<any, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/expand.d.ts",
    "content": "import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { MonoTypeOperatorFunction, OperatorFunction, ObservableInput, SchedulerLike } from '../types';\nexport declare function expand<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, R>;\nexport declare function expand<T>(project: (value: T, index: number) => ObservableInput<T>, concurrent?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport declare class ExpandOperator<T, R> implements Operator<T, R> {\n    private project;\n    private concurrent;\n    private scheduler;\n    constructor(project: (value: T, index: number) => ObservableInput<R>, concurrent: number, scheduler: SchedulerLike);\n    call(subscriber: Subscriber<R>, source: any): any;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n    private project;\n    private concurrent;\n    private scheduler;\n    private index;\n    private active;\n    private hasCompleted;\n    private buffer;\n    constructor(destination: Subscriber<R>, project: (value: T, index: number) => ObservableInput<R>, concurrent: number, scheduler: SchedulerLike);\n    private static dispatch<T, R>(arg);\n    protected _next(value: any): void;\n    private subscribeToProjection(result, value, index);\n    protected _complete(): void;\n    notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, R>): void;\n    notifyComplete(innerSub: Subscription): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/finalize.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport declare function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/findIndex.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport declare function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): OperatorFunction<T, number>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/exhaustMap.d.ts",
    "content": "import { ObservableInput, OperatorFunction } from '../types';\nexport declare function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported. Use inner map instead. */\nexport declare function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported. Use inner map instead. */\nexport declare function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/last.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../../internal/types';\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} [predicate] - The condition any source emitted item has to satisfy.\n * @param {any} [defaultValue] - An optional default value to provide if last\n * predicate isn't met or no values were emitted.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n */\nexport declare function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, defaultValue?: T): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/filter.d.ts",
    "content": "import { OperatorFunction, MonoTypeOperatorFunction } from '../types';\nexport declare function filter<T, S extends T>(predicate: (value: T, index: number) => value is S, thisArg?: any): OperatorFunction<T, S>;\nexport declare function filter<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/isEmpty.d.ts",
    "content": "import { OperatorFunction } from '../types';\nexport declare function isEmpty<T>(): OperatorFunction<T, boolean>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/ignoreElements.d.ts",
    "content": "import { OperatorFunction } from '../types';\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport declare function ignoreElements(): OperatorFunction<any, never>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/delay.d.ts",
    "content": "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport declare function delay<T>(delay: number | Date, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/every.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport declare function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): OperatorFunction<T, boolean>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/first.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../../internal/types';\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport declare function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, defaultValue?: T): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/map.d.ts",
    "content": "import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport declare function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R>;\nexport declare class MapOperator<T, R> implements Operator<T, R> {\n    private project;\n    private thisArg;\n    constructor(project: (value: T, index: number) => R, thisArg: any);\n    call(subscriber: Subscriber<R>, source: any): any;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/debounce.d.ts",
    "content": "import { MonoTypeOperatorFunction, SubscribableOrPromise } from '../types';\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport declare function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/mapTo.d.ts",
    "content": "import { OperatorFunction } from '../types';\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport declare function mapTo<T, R>(value: R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/pairwise.d.ts",
    "content": "import { OperatorFunction } from '../types';\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport declare function pairwise<T>(): OperatorFunction<T, [T, T]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/mergeMapTo.d.ts",
    "content": "import { OperatorFunction } from '../../internal/types';\nimport { ObservableInput } from '../types';\nexport declare function mergeMapTo<T>(innerObservable: ObservableInput<T>, concurrent?: number): OperatorFunction<any, T>;\n/** @deprecated */\nexport declare function mergeMapTo<T, I, R>(innerObservable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/min.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport declare function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/onErrorResumeNext.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ObservableInput, OperatorFunction } from '../types';\nexport declare function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport declare function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport declare function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport declare function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport declare function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R>;\nexport declare function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport declare function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport declare function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport declare function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport declare function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport declare function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport declare function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\nexport declare function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport declare function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/mergeMap.d.ts",
    "content": "import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { ObservableInput, OperatorFunction } from '../types';\nexport declare function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport declare function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport declare function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\nexport declare class MergeMapOperator<T, R> implements Operator<T, R> {\n    private project;\n    private concurrent;\n    constructor(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number);\n    call(observer: Subscriber<R>, source: any): any;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class MergeMapSubscriber<T, R> extends OuterSubscriber<T, R> {\n    private project;\n    private concurrent;\n    private hasCompleted;\n    private buffer;\n    private active;\n    protected index: number;\n    constructor(destination: Subscriber<R>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number);\n    protected _next(value: T): void;\n    protected _tryNext(value: T): void;\n    private _innerSub(ish, value, index);\n    protected _complete(): void;\n    notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, R>): void;\n    notifyComplete(innerSub: Subscription): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/observeOn.d.ts",
    "content": "import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport declare function observeOn<T>(scheduler: SchedulerLike, delay?: number): MonoTypeOperatorFunction<T>;\nexport declare class ObserveOnOperator<T> implements Operator<T, T> {\n    private scheduler;\n    private delay;\n    constructor(scheduler: SchedulerLike, delay?: number);\n    call(subscriber: Subscriber<T>, source: any): TeardownLogic;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class ObserveOnSubscriber<T> extends Subscriber<T> {\n    private scheduler;\n    private delay;\n    /** @nocollapse */\n    static dispatch(this: SchedulerAction<ObserveOnMessage>, arg: ObserveOnMessage): void;\n    constructor(destination: Subscriber<T>, scheduler: SchedulerLike, delay?: number);\n    private scheduleMessage(notification);\n    protected _next(value: T): void;\n    protected _error(err: any): void;\n    protected _complete(): void;\n}\nexport declare class ObserveOnMessage {\n    notification: Notification<any>;\n    destination: PartialObserver<any>;\n    constructor(notification: Notification<any>, destination: PartialObserver<any>);\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/materialize.d.ts",
    "content": "import { Notification } from '../Notification';\nimport { OperatorFunction } from '../types';\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport declare function materialize<T>(): OperatorFunction<T, Notification<T>>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/merge.d.ts",
    "content": "import { ObservableInput, OperatorFunction, MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T>(scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T>(concurrent?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T>(...observables: Array<ObservableInput<T> | SchedulerLike | number>): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number>): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/mergeAll.d.ts",
    "content": "import { OperatorFunction, ObservableInput } from '../types';\nexport declare function mergeAll<T>(concurrent?: number): OperatorFunction<ObservableInput<T>, T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/max.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport declare function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/publish.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../types';\nexport declare function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport declare function publish<T, R>(selector: OperatorFunction<T, R>): OperatorFunction<T, R>;\nexport declare function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/multicast.d.ts",
    "content": "import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../types';\nexport declare function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport declare function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport declare function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport declare function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<R>>;\nexport declare function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\nexport declare class MulticastOperator<T, R> implements Operator<T, R> {\n    private subjectFactory;\n    private selector;\n    constructor(subjectFactory: () => Subject<T>, selector: (source: Observable<T>) => Observable<R>);\n    call(subscriber: Subscriber<R>, source: any): any;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/partition.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { UnaryFunction } from '../types';\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport declare function partition<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/publishReplay.d.ts",
    "content": "import { MonoTypeOperatorFunction, OperatorFunction, SchedulerLike } from '../types';\nexport declare function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport declare function publishReplay<T, R>(bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>, scheduler?: SchedulerLike): OperatorFunction<T, R>;\nexport declare function publishReplay<T>(bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/publishBehavior.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../types';\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport declare function publishBehavior<T>(value: T): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/mergeScan.d.ts",
    "content": "import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { ObservableInput, OperatorFunction } from '../types';\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport declare function mergeScan<T, R>(accumulator: (acc: R, value: T) => ObservableInput<R>, seed: R, concurrent?: number): OperatorFunction<T, R>;\nexport declare class MergeScanOperator<T, R> implements Operator<T, R> {\n    private accumulator;\n    private seed;\n    private concurrent;\n    constructor(accumulator: (acc: R, value: T) => ObservableInput<R>, seed: R, concurrent: number);\n    call(subscriber: Subscriber<R>, source: any): any;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n    private accumulator;\n    private acc;\n    private concurrent;\n    private hasValue;\n    private hasCompleted;\n    private buffer;\n    private active;\n    protected index: number;\n    constructor(destination: Subscriber<R>, accumulator: (acc: R, value: T) => ObservableInput<R>, acc: R, concurrent: number);\n    protected _next(value: any): void;\n    private _innerSub(ish, value, index);\n    protected _complete(): void;\n    notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, R>): void;\n    notifyComplete(innerSub: Subscription): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/publishLast.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../types';\nexport declare function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/pluck.d.ts",
    "content": "import { OperatorFunction } from '../types';\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport declare function pluck<T, R>(...properties: string[]): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/repeatWhen.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport declare function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/repeat.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport declare function repeat<T>(count?: number): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/reduce.d.ts",
    "content": "import { OperatorFunction, MonoTypeOperatorFunction } from '../types';\nexport declare function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport declare function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport declare function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/skip.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport declare function skip<T>(count: number): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/windowToggle.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport declare function windowToggle<T, O>(openings: Observable<O>, closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/skipUntil.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport declare function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/skipWhile.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport declare function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/sampleTime.d.ts",
    "content": "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport declare function sampleTime<T>(period: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/share.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport declare function share<T>(): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/sequenceEqual.d.ts",
    "content": "import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Observer, OperatorFunction } from '../types';\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport declare function sequenceEqual<T>(compareTo: Observable<T>, comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean>;\nexport declare class SequenceEqualOperator<T> implements Operator<T, boolean> {\n    private compareTo;\n    private comparor;\n    constructor(compareTo: Observable<T>, comparor: (a: T, b: T) => boolean);\n    call(subscriber: Subscriber<boolean>, source: any): any;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n    private compareTo;\n    private comparor;\n    private _a;\n    private _b;\n    private _oneComplete;\n    constructor(destination: Observer<R>, compareTo: Observable<T>, comparor: (a: T, b: T) => boolean);\n    protected _next(value: T): void;\n    _complete(): void;\n    checkValues(): void;\n    emit(value: boolean): void;\n    nextB(value: T): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/race.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../types';\nexport declare function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\nexport declare function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\nexport declare function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\nexport declare function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/single.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable\n * emits items but none match the specified predicate then `undefined` is emiited.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate or `undefined` when no items match.\n *\n * @method single\n * @owner Observable\n */\nexport declare function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/switchMap.d.ts",
    "content": "import { ObservableInput, OperatorFunction } from '../types';\nexport declare function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported, use inner map instead */\nexport declare function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported, use inner map instead */\nexport declare function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/sample.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport declare function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/throwIfEmpty.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * If the source observable completes without emitting a value, it will emit\n * an error. The error will be created at that time by the optional\n * `errorFactory` argument, otherwise, the error will be {@link ErrorEmpty}.\n *\n * @example\n *\n * const click$ = fromEvent(button, 'click');\n *\n * clicks$.pipe(\n *   takeUntil(timer(1000)),\n *   throwIfEmpty(\n *     () => new Error('the button was not clicked within 1 second')\n *   ),\n * )\n * .subscribe({\n *   next() { console.log('The button was clicked'); },\n *   error(err) { console.error(err); },\n * });\n * @param {Function} [errorFactory] A factory function called to produce the\n * error to be thrown when the source observable completes without emitting a\n * value.\n */\nexport declare const throwIfEmpty: <T>(errorFactory?: () => any) => MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/find.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../types';\nexport declare function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S, thisArg?: any): OperatorFunction<T, S>;\nexport declare function find<T, S extends T>(predicate: (value: T, index: number) => value is S, thisArg?: any): OperatorFunction<T, S>;\nexport declare function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): MonoTypeOperatorFunction<T>;\nexport declare function find<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): MonoTypeOperatorFunction<T>;\nexport declare class FindValueOperator<T> implements Operator<T, T> {\n    private predicate;\n    private source;\n    private yieldIndex;\n    private thisArg;\n    constructor(predicate: (value: T, index: number, source: Observable<T>) => boolean, source: Observable<T>, yieldIndex: boolean, thisArg?: any);\n    call(observer: Subscriber<T>, source: any): any;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class FindValueSubscriber<T> extends Subscriber<T> {\n    private predicate;\n    private source;\n    private yieldIndex;\n    private thisArg;\n    private index;\n    constructor(destination: Subscriber<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean, source: Observable<T>, yieldIndex: boolean, thisArg?: any);\n    private notifyComplete(value);\n    protected _next(value: T): void;\n    protected _complete(): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/retryWhen.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport declare function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/subscribeOn.d.ts",
    "content": "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport declare function subscribeOn<T>(scheduler: SchedulerLike, delay?: number): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/startWith.d.ts",
    "content": "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nexport declare function startWith<T>(v1: T, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport declare function startWith<T>(v1: T, v2: T, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport declare function startWith<T>(v1: T, v2: T, v3: T, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport declare function startWith<T>(v1: T, v2: T, v3: T, v4: T, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport declare function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport declare function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport declare function startWith<T>(...array: Array<T | SchedulerLike>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/switchMapTo.d.ts",
    "content": "import { ObservableInput, OperatorFunction } from '../types';\nexport declare function switchMapTo<R>(observable: ObservableInput<R>): OperatorFunction<any, R>;\n/** @deprecated resultSelector is no longer supported. Switch to using switchMap with an inner map */\nexport declare function switchMapTo<T, R>(observable: ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported. Switch to using switchMap with an inner map */\nexport declare function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/scan.d.ts",
    "content": "import { OperatorFunction, MonoTypeOperatorFunction } from '../types';\nexport declare function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport declare function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport declare function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/window.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport declare function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/takeUntil.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport declare function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/switchAll.d.ts",
    "content": "import { OperatorFunction, ObservableInput } from '../types';\nexport declare function switchAll<T>(): OperatorFunction<ObservableInput<T>, T>;\nexport declare function switchAll<R>(): OperatorFunction<any, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/windowTime.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction, SchedulerLike } from '../types';\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport declare function windowTime<T>(windowTimeSpan: number, scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\nexport declare function windowTime<T>(windowTimeSpan: number, windowCreationInterval: number, scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\nexport declare function windowTime<T>(windowTimeSpan: number, windowCreationInterval: number, maxWindowSize: number, scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/take.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport declare function take<T>(count: number): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/windowCount.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport declare function windowCount<T>(windowSize: number, startWindowEvery?: number): OperatorFunction<T, Observable<T>>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/timeout.d.ts",
    "content": "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport declare function timeout<T>(due: number | Date, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/throttleTime.d.ts",
    "content": "import { ThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @param {Object} config a configuration object to define `leading` and\n * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport declare function throttleTime<T>(duration: number, scheduler?: SchedulerLike, config?: ThrottleConfig): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/skipLast.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport declare function skipLast<T>(count: number): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/takeLast.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport declare function takeLast<T>(count: number): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/takeWhile.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport declare function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/withLatestFrom.d.ts",
    "content": "import { ObservableInput, OperatorFunction } from '../types';\nexport declare function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport declare function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport declare function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport declare function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport declare function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport declare function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R>;\nexport declare function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport declare function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport declare function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport declare function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport declare function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]>;\nexport declare function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport declare function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport declare function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/windowWhen.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport declare function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/shareReplay.d.ts",
    "content": "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport declare function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/tap.d.ts",
    "content": "import { MonoTypeOperatorFunction, PartialObserver } from '../types';\nexport declare function tap<T>(next?: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport declare function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/zipAll.d.ts",
    "content": "import { OperatorFunction, ObservableInput } from '../types';\nexport declare function zipAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;\nexport declare function zipAll<T>(): OperatorFunction<any, T[]>;\nexport declare function zipAll<T, R>(project: (...values: T[]) => R): OperatorFunction<ObservableInput<T>, R>;\nexport declare function zipAll<R>(project: (...values: Array<any>) => R): OperatorFunction<any, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/refCount.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\nexport declare function refCount<T>(): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/zip.d.ts",
    "content": "import { ObservableInput, OperatorFunction } from '../types';\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/timeoutWith.d.ts",
    "content": "import { ObservableInput, OperatorFunction, SchedulerLike } from '../types';\nexport declare function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: SchedulerLike): OperatorFunction<T, T | R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/toArray.d.ts",
    "content": "import { OperatorFunction } from '../types';\nexport declare function toArray<T>(): OperatorFunction<T, T[]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/AnimationFrameScheduler.d.ts",
    "content": "import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nexport declare class AnimationFrameScheduler extends AsyncScheduler {\n    flush(action?: AsyncAction<any>): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/Action.d.ts",
    "content": "import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport declare class Action<T> extends Subscription {\n    constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void);\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    schedule(state?: T, delay?: number): Subscription;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/AsyncAction.d.ts",
    "content": "import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class AsyncAction<T> extends Action<T> {\n    protected scheduler: AsyncScheduler;\n    protected work: (this: SchedulerAction<T>, state?: T) => void;\n    id: any;\n    state: T;\n    delay: number;\n    protected pending: boolean;\n    constructor(scheduler: AsyncScheduler, work: (this: SchedulerAction<T>, state?: T) => void);\n    schedule(state?: T, delay?: number): Subscription;\n    protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay?: number): any;\n    protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay?: number): any;\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    execute(state: T, delay: number): any;\n    protected _execute(state: T, delay: number): any;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _unsubscribe(): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/AsyncScheduler.d.ts",
    "content": "import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nexport declare class AsyncScheduler extends Scheduler {\n    static delegate?: Scheduler;\n    actions: Array<AsyncAction<any>>;\n    /**\n     * A flag to indicate whether the Scheduler is currently executing a batch of\n     * queued actions.\n     * @type {boolean}\n     * @deprecated internal use only\n     */\n    active: boolean;\n    /**\n     * An internal ID used to track the latest asynchronous task such as those\n     * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n     * others.\n     * @type {any}\n     * @deprecated internal use only\n     */\n    scheduled: any;\n    constructor(SchedulerAction: typeof Action, now?: () => number);\n    schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n    flush(action: AsyncAction<any>): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/AsapScheduler.d.ts",
    "content": "import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nexport declare class AsapScheduler extends AsyncScheduler {\n    flush(action?: AsyncAction<any>): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/testing/testing.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { COMPILER_PROVIDERS as ɵangular_packages_platform_browser_dynamic_testing_testing_a, TestingCompilerFactoryImpl as ɵangular_packages_platform_browser_dynamic_testing_testing_b } from './src/compiler_factory';\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/retry.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport declare function retry<T>(count?: number): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/QueueScheduler.d.ts",
    "content": "import { AsyncScheduler } from './AsyncScheduler';\nexport declare class QueueScheduler extends AsyncScheduler {\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":3,\"metadata\":{},\"exports\":[{\"from\":\"./animations/animations\"}],\"flatModuleIndexRedirect\":true,\"importAs\":\"@angular/platform-browser/animations\"}\n"
  },
  {
    "path": "node_modules/rxjs/internal/testing/ColdObservable.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { Subscriber } from '../Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n    messages: TestMessage[];\n    subscriptions: SubscriptionLog[];\n    scheduler: Scheduler;\n    logSubscribedFrame: () => number;\n    logUnsubscribedFrame: (index: number) => void;\n    constructor(messages: TestMessage[], scheduler: Scheduler);\n    scheduleMessages(subscriber: Subscriber<any>): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/testing/HotObservable.d.ts",
    "content": "import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n    messages: TestMessage[];\n    subscriptions: SubscriptionLog[];\n    scheduler: Scheduler;\n    logSubscribedFrame: () => number;\n    logUnsubscribedFrame: (index: number) => void;\n    constructor(messages: TestMessage[], scheduler: Scheduler);\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<any>): Subscription;\n    setup(): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/testing/SubscriptionLog.d.ts",
    "content": "export declare class SubscriptionLog {\n    subscribedFrame: number;\n    unsubscribedFrame: number;\n    constructor(subscribedFrame: number, unsubscribedFrame?: number);\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/testing/TestMessage.d.ts",
    "content": "import { Notification } from '../Notification';\nexport interface TestMessage {\n    frame: number;\n    notification: Notification<any>;\n    isGhost?: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/number_value_accessor.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor } from './control_value_accessor';\nexport declare const NUMBER_VALUE_ACCESSOR: any;\n/**\n * The accessor for writing a number value and listening to changes that is used by the\n * `NgModel`, `FormControlDirective`, and `FormControlName` directives.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"number\" [(ngModel)]=\"age\">\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nexport declare class NumberValueAccessor implements ControlValueAccessor {\n    private _renderer;\n    private _elementRef;\n    onChange: (_: any) => void;\n    onTouched: () => void;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef);\n    writeValue(value: number): void;\n    registerOnChange(fn: (_: number | null) => void): void;\n    registerOnTouched(fn: () => void): void;\n    setDisabledState(isDisabled: boolean): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/platform-browser.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"ɵangular_packages_platform_browser_platform_browser_a\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ErrorHandler\",\"line\":52,\"character\":13}}},\"ɵangular_packages_platform_browser_platform_browser_b\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"reference\",\"name\":\"document\"}},\"ɵangular_packages_platform_browser_platform_browser_c\":[{\"__symbolic\":\"reference\",\"name\":\"ɵBROWSER_SANITIZATION_PROVIDERS\"},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ɵAPP_ROOT\",\"line\":61,\"character\":12},\"useValue\":true},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ErrorHandler\",\"line\":62,\"character\":12},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_platform_browser_a\"},\"deps\":[]},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"EVENT_MANAGER_PLUGINS\"},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ɵDomEventsPlugin\"},\"multi\":true,\"deps\":[{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgZone\",\"line\":67,\"character\":21},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"PLATFORM_ID\",\"line\":67,\"character\":29}]},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"EVENT_MANAGER_PLUGINS\"},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ɵKeyEventsPlugin\"},\"multi\":true,\"deps\":[{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"}]},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"EVENT_MANAGER_PLUGINS\"},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ɵHammerGesturesPlugin\"},\"multi\":true,\"deps\":[{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"},{\"__symbolic\":\"reference\",\"name\":\"HAMMER_GESTURE_CONFIG\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ɵConsole\",\"line\":74,\"character\":44},[{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":74,\"character\":58}},{\"__symbolic\":\"reference\",\"name\":\"HAMMER_LOADER\"}]]},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"HAMMER_GESTURE_CONFIG\"},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"HammerGestureConfig\"},\"deps\":[]},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ɵDomRendererFactory2\"},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ɵDomRendererFactory2\"},\"deps\":[{\"__symbolic\":\"reference\",\"name\":\"EventManager\"},{\"__symbolic\":\"reference\",\"name\":\"ɵDomSharedStylesHost\"}]},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"RendererFactory2\",\"line\":82,\"character\":12},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"ɵDomRendererFactory2\"}},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ɵSharedStylesHost\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"ɵDomSharedStylesHost\"}},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ɵDomSharedStylesHost\"},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ɵDomSharedStylesHost\"},\"deps\":[{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"}]},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Testability\",\"line\":85,\"character\":12},\"useClass\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Testability\",\"line\":85,\"character\":35},\"deps\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgZone\",\"line\":85,\"character\":55}]},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"EventManager\"},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"EventManager\"},\"deps\":[{\"__symbolic\":\"reference\",\"name\":\"EVENT_MANAGER_PLUGINS\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgZone\",\"line\":86,\"character\":80}]},{\"__symbolic\":\"reference\",\"name\":\"ɵELEMENT_PROBE_PROVIDERS\"}],\"ɵangular_packages_platform_browser_platform_browser_d\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Meta\"},\"arguments\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"inject\",\"line\":36,\"character\":18},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"}]}]}},\"ɵangular_packages_platform_browser_platform_browser_e\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Title\"},\"arguments\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"inject\",\"line\":17,\"character\":19},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"}]}]}},\"ɵangular_packages_platform_browser_platform_browser_f\":{\"__symbolic\":\"function\"},\"ɵangular_packages_platform_browser_platform_browser_g\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}],\"supports\":[{\"__symbolic\":\"method\"}],\"addEventListener\":[{\"__symbolic\":\"method\"}],\"addGlobalEventListener\":[{\"__symbolic\":\"method\"}]}},\"ɵangular_packages_platform_browser_platform_browser_h\":{\"__symbolic\":\"function\",\"parameters\":[\"transitionId\",\"document\",\"injector\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":20,\"character\":9,\"module\":\"./src/browser/server-transition\"}},\"ɵangular_packages_platform_browser_platform_browser_i\":[{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"APP_INITIALIZER\",\"line\":35,\"character\":13},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_platform_browser_h\"},\"deps\":[{\"__symbolic\":\"reference\",\"name\":\"ɵTRANSITION_ID\"},{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injector\",\"line\":37,\"character\":36}],\"multi\":true}],\"ɵangular_packages_platform_browser_platform_browser_j\":{\"__symbolic\":\"function\"},\"BrowserModule\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModule\",\"line\":99,\"character\":1},\"arguments\":[{\"providers\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_platform_browser_c\"},\"exports\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"CommonModule\",\"line\":99,\"character\":58},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ApplicationModule\",\"line\":99,\"character\":72}]}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":101,\"character\":15}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"SkipSelf\",\"line\":101,\"character\":27}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":101,\"character\":39},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"BrowserModule\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"BrowserModule\"}]}]},\"statics\":{\"withServerTransition\":{\"__symbolic\":\"function\",\"parameters\":[\"params\"],\"value\":{\"ngModule\":{\"__symbolic\":\"reference\",\"name\":\"BrowserModule\"},\"providers\":[{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"APP_ID\",\"line\":122,\"character\":18},\"useValue\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"params\"},\"member\":\"appId\"}},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ɵTRANSITION_ID\"},\"useExisting\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"APP_ID\",\"line\":123,\"character\":46}},{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_platform_browser_i\"}]}}}},\"platformBrowser\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"createPlatformFactory\",\"line\":44,\"character\":4},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"platformCore\",\"line\":44,\"character\":26},\"browser\",{\"__symbolic\":\"reference\",\"name\":\"ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS\"}]},\"Meta\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":44,\"character\":1},\"arguments\":[{\"providedIn\":\"root\",\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_platform_browser_d\"},\"deps\":[]}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":47,\"character\":15},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}],\"addTag\":[{\"__symbolic\":\"method\"}],\"addTags\":[{\"__symbolic\":\"method\"}],\"getTag\":[{\"__symbolic\":\"method\"}],\"getTags\":[{\"__symbolic\":\"method\"}],\"updateTag\":[{\"__symbolic\":\"method\"}],\"removeTag\":[{\"__symbolic\":\"method\"}],\"removeTagElement\":[{\"__symbolic\":\"method\"}],\"_getOrCreateElement\":[{\"__symbolic\":\"method\"}],\"_setMetaElementAttributes\":[{\"__symbolic\":\"method\"}],\"_parseSelector\":[{\"__symbolic\":\"method\"}],\"_containsAttributes\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"ngInjectableDef\":{}}},\"MetaDefinition\":{\"__symbolic\":\"interface\"},\"Title\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":30,\"character\":1},\"arguments\":[{\"providedIn\":\"root\",\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_platform_browser_e\"},\"deps\":[]}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":32,\"character\":15},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}],\"getTitle\":[{\"__symbolic\":\"method\"}],\"setTitle\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"ngInjectableDef\":{}}},\"disableDebugTools\":{\"__symbolic\":\"function\"},\"enableDebugTools\":{\"__symbolic\":\"function\"},\"BrowserTransferStateModule\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModule\",\"line\":160,\"character\":1},\"arguments\":[{\"providers\":[{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"TransferState\"},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_platform_browser_f\"},\"deps\":[{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"APP_ID\",\"line\":161,\"character\":87}]}]}]}],\"members\":{}},\"StateKey\":{\"__symbolic\":\"interface\"},\"TransferState\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":80,\"character\":1}}],\"members\":{\"get\":[{\"__symbolic\":\"method\"}],\"set\":[{\"__symbolic\":\"method\"}],\"remove\":[{\"__symbolic\":\"method\"}],\"hasKey\":[{\"__symbolic\":\"method\"}],\"onSerialize\":[{\"__symbolic\":\"method\"}],\"toJson\":[{\"__symbolic\":\"method\"}]}},\"makeStateKey\":{\"__symbolic\":\"function\",\"parameters\":[\"key\"],\"value\":{\"__symbolic\":\"reference\",\"name\":\"key\"}},\"By\":{\"__symbolic\":\"class\",\"members\":{},\"statics\":{\"all\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":27,\"character\":49,\"module\":\"./src/dom/debug/by\"}},\"css\":{\"__symbolic\":\"function\",\"parameters\":[\"selector\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":38,\"character\":11,\"module\":\"./src/dom/debug/by\"}},\"directive\":{\"__symbolic\":\"function\",\"parameters\":[\"type\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":54,\"character\":11,\"module\":\"./src/dom/debug/by\"}}}},\"EVENT_MANAGER_PLUGINS\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":16,\"character\":8},\"arguments\":[\"EventManagerPlugins\"]},\"EventManager\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":22,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":30,\"character\":15},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"EVENT_MANAGER_PLUGINS\"}]}],null],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_platform_browser_g\"}]},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgZone\",\"line\":30,\"character\":91}]}],\"addEventListener\":[{\"__symbolic\":\"method\"}],\"addGlobalEventListener\":[{\"__symbolic\":\"method\"}],\"getZone\":[{\"__symbolic\":\"method\"}],\"_findPluginFor\":[{\"__symbolic\":\"method\"}]}},\"HAMMER_GESTURE_CONFIG\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":61,\"character\":41},\"arguments\":[\"HammerGestureConfig\"]},\"HAMMER_LOADER\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":68,\"character\":33},\"arguments\":[\"HammerLoader\"]},\"HammerGestureConfig\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":81,\"character\":1}}],\"members\":{\"buildHammer\":[{\"__symbolic\":\"method\"}]}},\"HammerLoader\":{\"__symbolic\":\"interface\"},\"DomSanitizer\":{\"__symbolic\":\"class\",\"members\":{\"sanitize\":[{\"__symbolic\":\"method\"}],\"bypassSecurityTrustHtml\":[{\"__symbolic\":\"method\"}],\"bypassSecurityTrustStyle\":[{\"__symbolic\":\"method\"}],\"bypassSecurityTrustScript\":[{\"__symbolic\":\"method\"}],\"bypassSecurityTrustUrl\":[{\"__symbolic\":\"method\"}],\"bypassSecurityTrustResourceUrl\":[{\"__symbolic\":\"method\"}]}},\"SafeHtml\":{\"__symbolic\":\"interface\"},\"SafeResourceUrl\":{\"__symbolic\":\"interface\"},\"SafeScript\":{\"__symbolic\":\"interface\"},\"SafeStyle\":{\"__symbolic\":\"interface\"},\"SafeUrl\":{\"__symbolic\":\"interface\"},\"SafeValue\":{\"__symbolic\":\"interface\"},\"ɵBROWSER_SANITIZATION_PROVIDERS\":[{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Sanitizer\",\"line\":39,\"character\":12},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"DomSanitizer\"}},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"DomSanitizer\"},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ɵDomSanitizerImpl\"},\"deps\":[{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"}]}],\"ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS\":[{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"PLATFORM_ID\",\"line\":26,\"character\":12},\"useValue\":{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"ɵPLATFORM_BROWSER_ID\",\"line\":26,\"character\":35}},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"PLATFORM_INITIALIZER\",\"line\":27,\"character\":12},\"useValue\":{\"__symbolic\":\"reference\",\"name\":\"ɵinitDomAdapter\"},\"multi\":true},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"PlatformLocation\",\"line\":28,\"character\":12},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ɵBrowserPlatformLocation\"},\"deps\":[{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"}]},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_platform_browser_b\"},\"deps\":[]}],\"ɵinitDomAdapter\":{\"__symbolic\":\"function\"},\"ɵBrowserDomAdapter\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_platform_browser_k\"},\"members\":{\"parse\":[{\"__symbolic\":\"method\"}],\"hasProperty\":[{\"__symbolic\":\"method\"}],\"setProperty\":[{\"__symbolic\":\"method\"}],\"getProperty\":[{\"__symbolic\":\"method\"}],\"invoke\":[{\"__symbolic\":\"method\"}],\"logError\":[{\"__symbolic\":\"method\"}],\"log\":[{\"__symbolic\":\"method\"}],\"logGroup\":[{\"__symbolic\":\"method\"}],\"logGroupEnd\":[{\"__symbolic\":\"method\"}],\"contains\":[{\"__symbolic\":\"method\"}],\"querySelector\":[{\"__symbolic\":\"method\"}],\"querySelectorAll\":[{\"__symbolic\":\"method\"}],\"on\":[{\"__symbolic\":\"method\"}],\"onAndCancel\":[{\"__symbolic\":\"method\"}],\"dispatchEvent\":[{\"__symbolic\":\"method\"}],\"createMouseEvent\":[{\"__symbolic\":\"method\"}],\"createEvent\":[{\"__symbolic\":\"method\"}],\"preventDefault\":[{\"__symbolic\":\"method\"}],\"isPrevented\":[{\"__symbolic\":\"method\"}],\"getInnerHTML\":[{\"__symbolic\":\"method\"}],\"getTemplateContent\":[{\"__symbolic\":\"method\"}],\"getOuterHTML\":[{\"__symbolic\":\"method\"}],\"nodeName\":[{\"__symbolic\":\"method\"}],\"nodeValue\":[{\"__symbolic\":\"method\"}],\"type\":[{\"__symbolic\":\"method\"}],\"content\":[{\"__symbolic\":\"method\"}],\"firstChild\":[{\"__symbolic\":\"method\"}],\"nextSibling\":[{\"__symbolic\":\"method\"}],\"parentElement\":[{\"__symbolic\":\"method\"}],\"childNodes\":[{\"__symbolic\":\"method\"}],\"childNodesAsList\":[{\"__symbolic\":\"method\"}],\"clearNodes\":[{\"__symbolic\":\"method\"}],\"appendChild\":[{\"__symbolic\":\"method\"}],\"removeChild\":[{\"__symbolic\":\"method\"}],\"replaceChild\":[{\"__symbolic\":\"method\"}],\"remove\":[{\"__symbolic\":\"method\"}],\"insertBefore\":[{\"__symbolic\":\"method\"}],\"insertAllBefore\":[{\"__symbolic\":\"method\"}],\"insertAfter\":[{\"__symbolic\":\"method\"}],\"setInnerHTML\":[{\"__symbolic\":\"method\"}],\"getText\":[{\"__symbolic\":\"method\"}],\"setText\":[{\"__symbolic\":\"method\"}],\"getValue\":[{\"__symbolic\":\"method\"}],\"setValue\":[{\"__symbolic\":\"method\"}],\"getChecked\":[{\"__symbolic\":\"method\"}],\"setChecked\":[{\"__symbolic\":\"method\"}],\"createComment\":[{\"__symbolic\":\"method\"}],\"createTemplate\":[{\"__symbolic\":\"method\"}],\"createElement\":[{\"__symbolic\":\"method\"}],\"createElementNS\":[{\"__symbolic\":\"method\"}],\"createTextNode\":[{\"__symbolic\":\"method\"}],\"createScriptTag\":[{\"__symbolic\":\"method\"}],\"createStyleElement\":[{\"__symbolic\":\"method\"}],\"createShadowRoot\":[{\"__symbolic\":\"method\"}],\"getShadowRoot\":[{\"__symbolic\":\"method\"}],\"getHost\":[{\"__symbolic\":\"method\"}],\"clone\":[{\"__symbolic\":\"method\"}],\"getElementsByClassName\":[{\"__symbolic\":\"method\"}],\"getElementsByTagName\":[{\"__symbolic\":\"method\"}],\"classList\":[{\"__symbolic\":\"method\"}],\"addClass\":[{\"__symbolic\":\"method\"}],\"removeClass\":[{\"__symbolic\":\"method\"}],\"hasClass\":[{\"__symbolic\":\"method\"}],\"setStyle\":[{\"__symbolic\":\"method\"}],\"removeStyle\":[{\"__symbolic\":\"method\"}],\"getStyle\":[{\"__symbolic\":\"method\"}],\"hasStyle\":[{\"__symbolic\":\"method\"}],\"tagName\":[{\"__symbolic\":\"method\"}],\"attributeMap\":[{\"__symbolic\":\"method\"}],\"hasAttribute\":[{\"__symbolic\":\"method\"}],\"hasAttributeNS\":[{\"__symbolic\":\"method\"}],\"getAttribute\":[{\"__symbolic\":\"method\"}],\"getAttributeNS\":[{\"__symbolic\":\"method\"}],\"setAttribute\":[{\"__symbolic\":\"method\"}],\"setAttributeNS\":[{\"__symbolic\":\"method\"}],\"removeAttribute\":[{\"__symbolic\":\"method\"}],\"removeAttributeNS\":[{\"__symbolic\":\"method\"}],\"templateAwareRoot\":[{\"__symbolic\":\"method\"}],\"createHtmlDocument\":[{\"__symbolic\":\"method\"}],\"getDefaultDocument\":[{\"__symbolic\":\"method\"}],\"getBoundingClientRect\":[{\"__symbolic\":\"method\"}],\"getTitle\":[{\"__symbolic\":\"method\"}],\"setTitle\":[{\"__symbolic\":\"method\"}],\"elementMatches\":[{\"__symbolic\":\"method\"}],\"isTemplateElement\":[{\"__symbolic\":\"method\"}],\"isTextNode\":[{\"__symbolic\":\"method\"}],\"isCommentNode\":[{\"__symbolic\":\"method\"}],\"isElementNode\":[{\"__symbolic\":\"method\"}],\"hasShadowRoot\":[{\"__symbolic\":\"method\"}],\"isShadowRoot\":[{\"__symbolic\":\"method\"}],\"importIntoDoc\":[{\"__symbolic\":\"method\"}],\"adoptNode\":[{\"__symbolic\":\"method\"}],\"getHref\":[{\"__symbolic\":\"method\"}],\"getEventKey\":[{\"__symbolic\":\"method\"}],\"getGlobalEventTarget\":[{\"__symbolic\":\"method\"}],\"getHistory\":[{\"__symbolic\":\"method\"}],\"getLocation\":[{\"__symbolic\":\"method\"}],\"getBaseHref\":[{\"__symbolic\":\"method\"}],\"resetBaseElement\":[{\"__symbolic\":\"method\"}],\"getUserAgent\":[{\"__symbolic\":\"method\"}],\"setData\":[{\"__symbolic\":\"method\"}],\"getData\":[{\"__symbolic\":\"method\"}],\"getComputedStyle\":[{\"__symbolic\":\"method\"}],\"supportsWebAnimation\":[{\"__symbolic\":\"method\"}],\"performanceNow\":[{\"__symbolic\":\"method\"}],\"supportsCookies\":[{\"__symbolic\":\"method\"}],\"getCookie\":[{\"__symbolic\":\"method\"}],\"setCookie\":[{\"__symbolic\":\"method\"}]}},\"ɵBrowserPlatformLocation\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"PlatformLocation\",\"line\":24,\"character\":45},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":23,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":30,\"character\":15},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}],\"_init\":[{\"__symbolic\":\"method\"}],\"getBaseHrefFromDOM\":[{\"__symbolic\":\"method\"}],\"onPopState\":[{\"__symbolic\":\"method\"}],\"onHashChange\":[{\"__symbolic\":\"method\"}],\"pushState\":[{\"__symbolic\":\"method\"}],\"replaceState\":[{\"__symbolic\":\"method\"}],\"forward\":[{\"__symbolic\":\"method\"}],\"back\":[{\"__symbolic\":\"method\"}]}},\"ɵTRANSITION_ID\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":17,\"character\":33},\"arguments\":[\"TRANSITION_ID\"]},\"ɵBrowserGetTestability\":{\"__symbolic\":\"class\",\"members\":{\"addToWindow\":[{\"__symbolic\":\"method\"}],\"findTestabilityInTree\":[{\"__symbolic\":\"method\"}]}},\"ɵescapeHtml\":{\"__symbolic\":\"function\"},\"ɵELEMENT_PROBE_PROVIDERS\":[{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"APP_INITIALIZER\",\"line\":43,\"character\":13},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_platform_browser_j\"},\"deps\":[[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgProbeToken\",\"line\":46,\"character\":7},{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":46,\"character\":30}}]],\"multi\":true}],\"ɵDomAdapter\":{\"__symbolic\":\"class\",\"members\":{\"hasProperty\":[{\"__symbolic\":\"method\"}],\"setProperty\":[{\"__symbolic\":\"method\"}],\"getProperty\":[{\"__symbolic\":\"method\"}],\"invoke\":[{\"__symbolic\":\"method\"}],\"logError\":[{\"__symbolic\":\"method\"}],\"log\":[{\"__symbolic\":\"method\"}],\"logGroup\":[{\"__symbolic\":\"method\"}],\"logGroupEnd\":[{\"__symbolic\":\"method\"}],\"contains\":[{\"__symbolic\":\"method\"}],\"parse\":[{\"__symbolic\":\"method\"}],\"querySelector\":[{\"__symbolic\":\"method\"}],\"querySelectorAll\":[{\"__symbolic\":\"method\"}],\"on\":[{\"__symbolic\":\"method\"}],\"onAndCancel\":[{\"__symbolic\":\"method\"}],\"dispatchEvent\":[{\"__symbolic\":\"method\"}],\"createMouseEvent\":[{\"__symbolic\":\"method\"}],\"createEvent\":[{\"__symbolic\":\"method\"}],\"preventDefault\":[{\"__symbolic\":\"method\"}],\"isPrevented\":[{\"__symbolic\":\"method\"}],\"getInnerHTML\":[{\"__symbolic\":\"method\"}],\"getTemplateContent\":[{\"__symbolic\":\"method\"}],\"getOuterHTML\":[{\"__symbolic\":\"method\"}],\"nodeName\":[{\"__symbolic\":\"method\"}],\"nodeValue\":[{\"__symbolic\":\"method\"}],\"type\":[{\"__symbolic\":\"method\"}],\"content\":[{\"__symbolic\":\"method\"}],\"firstChild\":[{\"__symbolic\":\"method\"}],\"nextSibling\":[{\"__symbolic\":\"method\"}],\"parentElement\":[{\"__symbolic\":\"method\"}],\"childNodes\":[{\"__symbolic\":\"method\"}],\"childNodesAsList\":[{\"__symbolic\":\"method\"}],\"clearNodes\":[{\"__symbolic\":\"method\"}],\"appendChild\":[{\"__symbolic\":\"method\"}],\"removeChild\":[{\"__symbolic\":\"method\"}],\"replaceChild\":[{\"__symbolic\":\"method\"}],\"remove\":[{\"__symbolic\":\"method\"}],\"insertBefore\":[{\"__symbolic\":\"method\"}],\"insertAllBefore\":[{\"__symbolic\":\"method\"}],\"insertAfter\":[{\"__symbolic\":\"method\"}],\"setInnerHTML\":[{\"__symbolic\":\"method\"}],\"getText\":[{\"__symbolic\":\"method\"}],\"setText\":[{\"__symbolic\":\"method\"}],\"getValue\":[{\"__symbolic\":\"method\"}],\"setValue\":[{\"__symbolic\":\"method\"}],\"getChecked\":[{\"__symbolic\":\"method\"}],\"setChecked\":[{\"__symbolic\":\"method\"}],\"createComment\":[{\"__symbolic\":\"method\"}],\"createTemplate\":[{\"__symbolic\":\"method\"}],\"createElement\":[{\"__symbolic\":\"method\"}],\"createElementNS\":[{\"__symbolic\":\"method\"}],\"createTextNode\":[{\"__symbolic\":\"method\"}],\"createScriptTag\":[{\"__symbolic\":\"method\"}],\"createStyleElement\":[{\"__symbolic\":\"method\"}],\"createShadowRoot\":[{\"__symbolic\":\"method\"}],\"getShadowRoot\":[{\"__symbolic\":\"method\"}],\"getHost\":[{\"__symbolic\":\"method\"}],\"getDistributedNodes\":[{\"__symbolic\":\"method\"}],\"clone\":[{\"__symbolic\":\"method\"}],\"getElementsByClassName\":[{\"__symbolic\":\"method\"}],\"getElementsByTagName\":[{\"__symbolic\":\"method\"}],\"classList\":[{\"__symbolic\":\"method\"}],\"addClass\":[{\"__symbolic\":\"method\"}],\"removeClass\":[{\"__symbolic\":\"method\"}],\"hasClass\":[{\"__symbolic\":\"method\"}],\"setStyle\":[{\"__symbolic\":\"method\"}],\"removeStyle\":[{\"__symbolic\":\"method\"}],\"getStyle\":[{\"__symbolic\":\"method\"}],\"hasStyle\":[{\"__symbolic\":\"method\"}],\"tagName\":[{\"__symbolic\":\"method\"}],\"attributeMap\":[{\"__symbolic\":\"method\"}],\"hasAttribute\":[{\"__symbolic\":\"method\"}],\"hasAttributeNS\":[{\"__symbolic\":\"method\"}],\"getAttribute\":[{\"__symbolic\":\"method\"}],\"getAttributeNS\":[{\"__symbolic\":\"method\"}],\"setAttribute\":[{\"__symbolic\":\"method\"}],\"setAttributeNS\":[{\"__symbolic\":\"method\"}],\"removeAttribute\":[{\"__symbolic\":\"method\"}],\"removeAttributeNS\":[{\"__symbolic\":\"method\"}],\"templateAwareRoot\":[{\"__symbolic\":\"method\"}],\"createHtmlDocument\":[{\"__symbolic\":\"method\"}],\"getDefaultDocument\":[{\"__symbolic\":\"method\"}],\"getBoundingClientRect\":[{\"__symbolic\":\"method\"}],\"getTitle\":[{\"__symbolic\":\"method\"}],\"setTitle\":[{\"__symbolic\":\"method\"}],\"elementMatches\":[{\"__symbolic\":\"method\"}],\"isTemplateElement\":[{\"__symbolic\":\"method\"}],\"isTextNode\":[{\"__symbolic\":\"method\"}],\"isCommentNode\":[{\"__symbolic\":\"method\"}],\"isElementNode\":[{\"__symbolic\":\"method\"}],\"hasShadowRoot\":[{\"__symbolic\":\"method\"}],\"isShadowRoot\":[{\"__symbolic\":\"method\"}],\"importIntoDoc\":[{\"__symbolic\":\"method\"}],\"adoptNode\":[{\"__symbolic\":\"method\"}],\"getHref\":[{\"__symbolic\":\"method\"}],\"getEventKey\":[{\"__symbolic\":\"method\"}],\"resolveAndSetHref\":[{\"__symbolic\":\"method\"}],\"supportsDOMEvents\":[{\"__symbolic\":\"method\"}],\"supportsNativeShadowDOM\":[{\"__symbolic\":\"method\"}],\"getGlobalEventTarget\":[{\"__symbolic\":\"method\"}],\"getHistory\":[{\"__symbolic\":\"method\"}],\"getLocation\":[{\"__symbolic\":\"method\"}],\"getBaseHref\":[{\"__symbolic\":\"method\"}],\"resetBaseElement\":[{\"__symbolic\":\"method\"}],\"getUserAgent\":[{\"__symbolic\":\"method\"}],\"setData\":[{\"__symbolic\":\"method\"}],\"getComputedStyle\":[{\"__symbolic\":\"method\"}],\"getData\":[{\"__symbolic\":\"method\"}],\"supportsWebAnimation\":[{\"__symbolic\":\"method\"}],\"performanceNow\":[{\"__symbolic\":\"method\"}],\"getAnimationPrefix\":[{\"__symbolic\":\"method\"}],\"getTransitionEnd\":[{\"__symbolic\":\"method\"}],\"supportsAnimation\":[{\"__symbolic\":\"method\"}],\"supportsCookies\":[{\"__symbolic\":\"method\"}],\"getCookie\":[{\"__symbolic\":\"method\"}],\"setCookie\":[{\"__symbolic\":\"method\"}]}},\"ɵgetDOM\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":10,\"character\":4,\"context\":{\"name\":\"_DOM\"},\"module\":\"./src/dom/dom_adapter\"}},\"ɵsetRootDomAdapter\":{\"__symbolic\":\"function\"},\"ɵDomRendererFactory2\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":60,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"EventManager\"},{\"__symbolic\":\"reference\",\"name\":\"ɵDomSharedStylesHost\"}]}],\"createRenderer\":[{\"__symbolic\":\"method\"}],\"begin\":[{\"__symbolic\":\"method\"}],\"end\":[{\"__symbolic\":\"method\"}]}},\"ɵNAMESPACE_URIS\":{\"svg\":\"http://www.w3.org/2000/svg\",\"xhtml\":\"http://www.w3.org/1999/xhtml\",\"xlink\":\"http://www.w3.org/1999/xlink\",\"xml\":\"http://www.w3.org/XML/1998/namespace\",\"xmlns\":\"http://www.w3.org/2000/xmlns/\",\"$quoted$\":[\"svg\",\"xhtml\",\"xlink\",\"xml\",\"xmlns\"]},\"ɵflattenStyles\":{\"__symbolic\":\"function\"},\"ɵshimContentAttribute\":{\"__symbolic\":\"function\",\"parameters\":[\"componentShortId\"],\"value\":{\"__symbolic\":\"call\",\"expression\":{},\"arguments\":[{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":21,\"character\":6,\"context\":{\"name\":\"COMPONENT_REGEX\"},\"module\":\"./src/dom/dom_renderer\"},{\"__symbolic\":\"reference\",\"name\":\"componentShortId\"}]}},\"ɵshimHostAttribute\":{\"__symbolic\":\"function\",\"parameters\":[\"componentShortId\"],\"value\":{\"__symbolic\":\"call\",\"expression\":{},\"arguments\":[{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":21,\"character\":6,\"context\":{\"name\":\"COMPONENT_REGEX\"},\"module\":\"./src/dom/dom_renderer\"},{\"__symbolic\":\"reference\",\"name\":\"componentShortId\"}]}},\"ɵDomEventsPlugin\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_platform_browser_g\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":102,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":105,\"character\":7},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"}]}],null,[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":106,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":106,\"character\":19},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"PLATFORM_ID\",\"line\":106,\"character\":26}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgZone\",\"line\":105,\"character\":50},{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":106,\"character\":51,\"module\":\"./src/dom/events/dom_events\"}]}],\"patchEvent\":[{\"__symbolic\":\"method\"}],\"supports\":[{\"__symbolic\":\"method\"}],\"addEventListener\":[{\"__symbolic\":\"method\"}],\"removeEventListener\":[{\"__symbolic\":\"method\"}]}},\"ɵHammerGesturesPlugin\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_platform_browser_g\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":144,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":147,\"character\":7},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"}]}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":148,\"character\":7},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"HAMMER_GESTURE_CONFIG\"}]}],null,[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":149,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":149,\"character\":19},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"HAMMER_LOADER\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"},{\"__symbolic\":\"reference\",\"name\":\"HammerGestureConfig\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ɵConsole\",\"line\":148,\"character\":92},{\"__symbolic\":\"error\",\"message\":\"Could not resolve type\",\"line\":149,\"character\":58,\"context\":{\"typeName\":\"HammerLoader\"},\"module\":\"./src/dom/events/hammer_gestures\"}]}],\"supports\":[{\"__symbolic\":\"method\"}],\"addEventListener\":[{\"__symbolic\":\"method\"}],\"isCustomEvent\":[{\"__symbolic\":\"method\"}]}},\"ɵKeyEventsPlugin\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_platform_browser_g\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":34,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":40,\"character\":15},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}],\"supports\":[{\"__symbolic\":\"method\"}],\"addEventListener\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"eventCallback\":{\"__symbolic\":\"function\",\"parameters\":[\"fullKey\",\"handler\",\"zone\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":128,\"character\":11,\"module\":\"./src/dom/events/key_events\"}}}},\"ɵDomSharedStylesHost\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ɵSharedStylesHost\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":33,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":37,\"character\":15},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}],\"_addStylesToHost\":[{\"__symbolic\":\"method\"}],\"addHost\":[{\"__symbolic\":\"method\"}],\"removeHost\":[{\"__symbolic\":\"method\"}],\"onStylesAdded\":[{\"__symbolic\":\"method\"}],\"ngOnDestroy\":[{\"__symbolic\":\"method\"}]}},\"ɵSharedStylesHost\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":12,\"character\":1}}],\"members\":{\"addStyles\":[{\"__symbolic\":\"method\"}],\"onStylesAdded\":[{\"__symbolic\":\"method\"}],\"getAllStyles\":[{\"__symbolic\":\"method\"}]}},\"ɵDomSanitizerImpl\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"DomSanitizer\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":146,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":148,\"character\":15},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"DOCUMENT\",\"module\":\"@angular/common\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}],\"sanitize\":[{\"__symbolic\":\"method\"}],\"checkNotSafeValue\":[{\"__symbolic\":\"method\"}],\"bypassSecurityTrustHtml\":[{\"__symbolic\":\"method\"}],\"bypassSecurityTrustStyle\":[{\"__symbolic\":\"method\"}],\"bypassSecurityTrustScript\":[{\"__symbolic\":\"method\"}],\"bypassSecurityTrustUrl\":[{\"__symbolic\":\"method\"}],\"bypassSecurityTrustResourceUrl\":[{\"__symbolic\":\"method\"}]}},\"VERSION\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Version\",\"line\":16,\"character\":27},\"arguments\":[\"7.0.0\"]},\"ɵangular_packages_platform_browser_platform_browser_k\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ɵDomAdapter\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\"}],\"getDistributedNodes\":[{\"__symbolic\":\"method\"}],\"resolveAndSetHref\":[{\"__symbolic\":\"method\"}],\"supportsDOMEvents\":[{\"__symbolic\":\"method\"}],\"supportsNativeShadowDOM\":[{\"__symbolic\":\"method\"}],\"getAnimationPrefix\":[{\"__symbolic\":\"method\"}],\"getTransitionEnd\":[{\"__symbolic\":\"method\"}],\"supportsAnimation\":[{\"__symbolic\":\"method\"}]}}},\"origins\":{\"ɵangular_packages_platform_browser_platform_browser_a\":\"./src/browser\",\"ɵangular_packages_platform_browser_platform_browser_b\":\"./src/browser\",\"ɵangular_packages_platform_browser_platform_browser_c\":\"./src/browser\",\"ɵangular_packages_platform_browser_platform_browser_d\":\"./src/browser/meta\",\"ɵangular_packages_platform_browser_platform_browser_e\":\"./src/browser/title\",\"ɵangular_packages_platform_browser_platform_browser_f\":\"./src/browser/transfer_state\",\"ɵangular_packages_platform_browser_platform_browser_g\":\"./src/dom/events/event_manager\",\"ɵangular_packages_platform_browser_platform_browser_h\":\"./src/browser/server-transition\",\"ɵangular_packages_platform_browser_platform_browser_i\":\"./src/browser/server-transition\",\"ɵangular_packages_platform_browser_platform_browser_j\":\"./src/dom/debug/ng_probe\",\"BrowserModule\":\"./src/browser\",\"platformBrowser\":\"./src/browser\",\"Meta\":\"./src/browser/meta\",\"MetaDefinition\":\"./src/browser/meta\",\"Title\":\"./src/browser/title\",\"disableDebugTools\":\"./src/browser/tools/tools\",\"enableDebugTools\":\"./src/browser/tools/tools\",\"BrowserTransferStateModule\":\"./src/browser/transfer_state\",\"StateKey\":\"./src/browser/transfer_state\",\"TransferState\":\"./src/browser/transfer_state\",\"makeStateKey\":\"./src/browser/transfer_state\",\"By\":\"./src/dom/debug/by\",\"DOCUMENT\":\"@angular/common\",\"EVENT_MANAGER_PLUGINS\":\"./src/dom/events/event_manager\",\"EventManager\":\"./src/dom/events/event_manager\",\"HAMMER_GESTURE_CONFIG\":\"./src/dom/events/hammer_gestures\",\"HAMMER_LOADER\":\"./src/dom/events/hammer_gestures\",\"HammerGestureConfig\":\"./src/dom/events/hammer_gestures\",\"HammerLoader\":\"./src/dom/events/hammer_gestures\",\"DomSanitizer\":\"./src/security/dom_sanitization_service\",\"SafeHtml\":\"./src/security/dom_sanitization_service\",\"SafeResourceUrl\":\"./src/security/dom_sanitization_service\",\"SafeScript\":\"./src/security/dom_sanitization_service\",\"SafeStyle\":\"./src/security/dom_sanitization_service\",\"SafeUrl\":\"./src/security/dom_sanitization_service\",\"SafeValue\":\"./src/security/dom_sanitization_service\",\"ɵBROWSER_SANITIZATION_PROVIDERS\":\"./src/browser\",\"ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS\":\"./src/browser\",\"ɵinitDomAdapter\":\"./src/browser\",\"ɵBrowserDomAdapter\":\"./src/browser/browser_adapter\",\"ɵBrowserPlatformLocation\":\"./src/browser/location/browser_platform_location\",\"ɵTRANSITION_ID\":\"./src/browser/server-transition\",\"ɵBrowserGetTestability\":\"./src/browser/testability\",\"ɵescapeHtml\":\"./src/browser/transfer_state\",\"ɵELEMENT_PROBE_PROVIDERS\":\"./src/dom/debug/ng_probe\",\"ɵDomAdapter\":\"./src/dom/dom_adapter\",\"ɵgetDOM\":\"./src/dom/dom_adapter\",\"ɵsetRootDomAdapter\":\"./src/dom/dom_adapter\",\"ɵDomRendererFactory2\":\"./src/dom/dom_renderer\",\"ɵNAMESPACE_URIS\":\"./src/dom/dom_renderer\",\"ɵflattenStyles\":\"./src/dom/dom_renderer\",\"ɵshimContentAttribute\":\"./src/dom/dom_renderer\",\"ɵshimHostAttribute\":\"./src/dom/dom_renderer\",\"ɵDomEventsPlugin\":\"./src/dom/events/dom_events\",\"ɵHammerGesturesPlugin\":\"./src/dom/events/hammer_gestures\",\"ɵKeyEventsPlugin\":\"./src/dom/events/key_events\",\"ɵDomSharedStylesHost\":\"./src/dom/shared_styles_host\",\"ɵSharedStylesHost\":\"./src/dom/shared_styles_host\",\"ɵDomSanitizerImpl\":\"./src/security/dom_sanitization_service\",\"VERSION\":\"./src/version\",\"ɵangular_packages_platform_browser_platform_browser_k\":\"./src/browser/generic_browser_adapter\"},\"importAs\":\"@angular/platform-browser\"}"
  },
  {
    "path": "node_modules/@angular/forms/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/ng_form.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterViewInit, EventEmitter } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup, FormHooks } from '../model';\nimport { ControlContainer } from './control_container';\nimport { Form } from './form_interface';\nimport { NgControl } from './ng_control';\nimport { NgModel } from './ng_model';\nimport { NgModelGroup } from './ng_model_group';\nexport declare const formDirectiveProvider: any;\n/**\n * @description\n *\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You can export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * will give you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, you'll want to use `NgModel` with a\n * `name` attribute.  You can also use `NgModelGroup` if you'd like to create\n * sub-groups within the form.\n *\n * You can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * If you want to import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, you can add `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * Support for using `ngForm` element selector has been deprecated in Angular v6 and will be removed\n * in Angular v9.\n *\n * This has been deprecated to keep selectors consistent with other core Angular selectors,\n * as element selectors are typically written in kebab-case.\n *\n * Now deprecated:\n * ```html\n * <ngForm #myForm=\"ngForm\">\n * ```\n *\n * After:\n * ```html\n * <ng-form #myForm=\"ngForm\">\n * ```\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * @ngModule FormsModule\n */\nexport declare class NgForm extends ControlContainer implements Form, AfterViewInit {\n    readonly submitted: boolean;\n    private _directives;\n    form: FormGroup;\n    ngSubmit: EventEmitter<{}>;\n    /**\n     * Options for the `NgForm` instance. Accepts the following properties:\n     *\n     * **updateOn**: Serves as the default `updateOn` value for all child `NgModels` below it\n     * (unless a child has explicitly set its own value for this in `ngModelOptions`).\n     * Potential values: `'change'` | `'blur'` | `'submit'`\n     *\n     * ```html\n     * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n     *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n     * </form>\n     * ```\n     *\n     */\n    options: {\n        updateOn?: FormHooks;\n    };\n    constructor(validators: any[], asyncValidators: any[]);\n    ngAfterViewInit(): void;\n    readonly formDirective: Form;\n    readonly control: FormGroup;\n    readonly path: string[];\n    readonly controls: {\n        [key: string]: AbstractControl;\n    };\n    addControl(dir: NgModel): void;\n    getControl(dir: NgModel): FormControl;\n    removeControl(dir: NgModel): void;\n    addFormGroup(dir: NgModelGroup): void;\n    removeFormGroup(dir: NgModelGroup): void;\n    getFormGroup(dir: NgModelGroup): FormGroup;\n    updateModel(dir: NgControl, value: any): void;\n    setValue(value: {\n        [key: string]: any;\n    }): void;\n    onSubmit($event: Event): boolean;\n    onReset(): void;\n    resetForm(value?: any): void;\n    private _setUpdateStrategy;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/platform-browser-dynamic.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"RESOURCE_CACHE_PROVIDER\":[{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"ResourceLoader\",\"line\":23,\"character\":15},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_dynamic_platform_browser_dynamic_a\"},\"deps\":[]}],\"platformBrowserDynamic\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"createPlatformFactory\",\"line\":25,\"character\":38},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ɵplatformCoreDynamic\"},\"browserDynamic\",{\"__symbolic\":\"reference\",\"name\":\"ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS\"}]},\"ɵCompilerImpl\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injector\",\"line\":36,\"character\":16},{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"CompileMetadataResolver\",\"line\":36,\"character\":53},{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"TemplateParser\",\"line\":37,\"character\":22},{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"StyleCompiler\",\"line\":37,\"character\":53},{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"ViewCompiler\",\"line\":37,\"character\":82},{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"NgModuleCompiler\",\"line\":38,\"character\":24},{\"__symbolic\":\"reference\",\"name\":\"SummaryResolver\",\"module\":\"@angular/compiler\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"Type\",\"module\":\"@angular/core\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}]},{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"CompileReflector\",\"line\":39,\"character\":24},{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"CompilerConfig\",\"line\":39,\"character\":58},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ɵConsole\",\"line\":39,\"character\":83}]}],\"getExtraNgModuleProviders\":[{\"__symbolic\":\"method\"}],\"compileModuleSync\":[{\"__symbolic\":\"method\"}],\"compileModuleAsync\":[{\"__symbolic\":\"method\"}],\"compileModuleAndAllComponentsSync\":[{\"__symbolic\":\"method\"}],\"compileModuleAndAllComponentsAsync\":[{\"__symbolic\":\"method\"}],\"loadAotSummaries\":[{\"__symbolic\":\"method\"}],\"hasAotSummary\":[{\"__symbolic\":\"method\"}],\"getComponentFactory\":[{\"__symbolic\":\"method\"}],\"clearCache\":[{\"__symbolic\":\"method\"}],\"clearCacheFor\":[{\"__symbolic\":\"method\"}],\"getModuleId\":[{\"__symbolic\":\"method\"}]}},\"ɵplatformCoreDynamic\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"createPlatformFactory\",\"line\":16,\"character\":35},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"platformCore\",\"line\":16,\"character\":57},\"coreDynamic\",[{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"COMPILER_OPTIONS\",\"line\":17,\"character\":12},\"useValue\":{},\"multi\":true},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"CompilerFactory\",\"line\":18,\"character\":12},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"JitCompilerFactory\"},\"deps\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"COMPILER_OPTIONS\",\"line\":18,\"character\":66}]}]]},\"ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/platform-browser\",\"name\":\"ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS\",\"line\":17,\"character\":2},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"COMPILER_OPTIONS\",\"line\":19,\"character\":13},\"useValue\":{\"providers\":[{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"ResourceLoader\",\"line\":20,\"character\":37},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ɵResourceLoaderImpl\"},\"deps\":[]}]},\"multi\":true},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"PLATFORM_ID\",\"line\":23,\"character\":12},\"useValue\":{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"ɵPLATFORM_BROWSER_ID\",\"line\":23,\"character\":35}}],\"ɵResourceLoaderImpl\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"ResourceLoader\",\"line\":12,\"character\":40},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":11,\"character\":1}}],\"members\":{\"get\":[{\"__symbolic\":\"method\"}]}},\"VERSION\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Version\",\"line\":16,\"character\":27},\"arguments\":[\"7.0.0\"]},\"JitCompilerFactory\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"CompilerOptions\",\"line\":163,\"character\":30}]}]}],\"createCompiler\":[{\"__symbolic\":\"method\"}]}},\"ɵangular_packages_platform_browser_dynamic_platform_browser_dynamic_a\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"ResourceLoader\",\"line\":18,\"character\":42},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\"}],\"get\":[{\"__symbolic\":\"method\"}]}}},\"origins\":{\"RESOURCE_CACHE_PROVIDER\":\"./src/platform-browser-dynamic\",\"platformBrowserDynamic\":\"./src/platform-browser-dynamic\",\"ɵCompilerImpl\":\"./src/compiler_factory\",\"ɵplatformCoreDynamic\":\"./src/platform_core_dynamic\",\"ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS\":\"./src/platform_providers\",\"ɵResourceLoaderImpl\":\"./src/resource_loader/resource_loader_impl\",\"VERSION\":\"./src/version\",\"JitCompilerFactory\":\"./src/compiler_factory\",\"ɵangular_packages_platform_browser_dynamic_platform_browser_dynamic_a\":\"./src/resource_loader/resource_loader_cache\"},\"importAs\":\"@angular/platform-browser-dynamic\"}"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/ng_model_group.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OnDestroy, OnInit } from '@angular/core';\nimport { AbstractFormGroupDirective } from './abstract_form_group_directive';\nimport { ControlContainer } from './control_container';\nexport declare const modelGroupProvider: any;\n/**\n * @description\n *\n * Creates and binds a `FormGroup` instance to a DOM element.\n *\n * This directive can only be used as a child of `NgForm` (or in other words,\n * within `<form>` tags).\n *\n * Use this directive if you'd like to create a sub-group within a form. This can\n * come in handy if you want to validate a sub-group of your form separately from\n * the rest of your form, or if some values in your domain model make more sense to\n * consume together in a nested object.\n *\n * Pass in the name you'd like this sub-group to have and it will become the key\n * for the sub-group in the form's full value. You can also export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * @ngModule FormsModule\n */\nexport declare class NgModelGroup extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n    name: string;\n    constructor(parent: ControlContainer, validators: any[], asyncValidators: any[]);\n}\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/radio_control_value_accessor.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, Injector, OnDestroy, OnInit, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor } from './control_value_accessor';\nimport { NgControl } from './ng_control';\nexport declare const RADIO_VALUE_ACCESSOR: any;\n/**\n * Internal class used by Angular to uncheck radio buttons with the matching name.\n */\nexport declare class RadioControlRegistry {\n    private _accessors;\n    add(control: NgControl, accessor: RadioControlValueAccessor): void;\n    remove(accessor: RadioControlValueAccessor): void;\n    select(accessor: RadioControlValueAccessor): void;\n    private _isSameGroup;\n}\n/**\n * @description\n *\n * Writes radio control values and listens to radio control changes.\n *\n * Used by `NgModel`, `FormControlDirective`, and `FormControlName`\n * to keep the view synced with the `FormControl` model.\n *\n * If you have imported the `FormsModule` or the `ReactiveFormsModule`, this\n * value accessor will be active on any radio control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * @usageNotes\n * ### How to use radio buttons with form directives\n *\n * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n * in the same group have the same `name` attribute.  Radio buttons with different `name`\n * attributes do not affect each other.\n *\n * {@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n *\n * When using radio buttons in a reactive form, radio buttons in the same group should have the\n * same `formControlName`. You can also add a `name` attribute, but it's optional.\n *\n * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nexport declare class RadioControlValueAccessor implements ControlValueAccessor, OnDestroy, OnInit {\n    private _renderer;\n    private _elementRef;\n    private _registry;\n    private _injector;\n    onChange: () => void;\n    onTouched: () => void;\n    name: string;\n    formControlName: string;\n    value: any;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef, _registry: RadioControlRegistry, _injector: Injector);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: (_: any) => {}): void;\n    fireUncheck(value: any): void;\n    registerOnTouched(fn: () => {}): void;\n    setDisabledState(isDisabled: boolean): void;\n    private _checkName;\n    private _throwNameError;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/platform-browser-dynamic.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { CachedResourceLoader as ɵangular_packages_platform_browser_dynamic_platform_browser_dynamic_a } from './src/resource_loader/resource_loader_cache';\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/ng_control_status.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AbstractControlDirective } from './abstract_control_directive';\nimport { ControlContainer } from './control_container';\nimport { NgControl } from './ng_control';\nexport declare class AbstractControlStatus {\n    private _cd;\n    constructor(cd: AbstractControlDirective);\n    readonly ngClassUntouched: boolean;\n    readonly ngClassTouched: boolean;\n    readonly ngClassPristine: boolean;\n    readonly ngClassDirty: boolean;\n    readonly ngClassValid: boolean;\n    readonly ngClassInvalid: boolean;\n    readonly ngClassPending: boolean;\n}\nexport declare const ngControlStatusHost: {\n    '[class.ng-untouched]': string;\n    '[class.ng-touched]': string;\n    '[class.ng-pristine]': string;\n    '[class.ng-dirty]': string;\n    '[class.ng-valid]': string;\n    '[class.ng-invalid]': string;\n    '[class.ng-pending]': string;\n};\n/**\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status. The following classes are applied as the properties\n * become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nexport declare class NgControlStatus extends AbstractControlStatus {\n    constructor(cd: NgControl);\n}\n/**\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nexport declare class NgControlStatusGroup extends AbstractControlStatus {\n    constructor(cd: ControlContainer);\n}\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/reactive_directives/form_control_directive.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, InjectionToken, OnChanges, SimpleChanges } from '@angular/core';\nimport { FormControl } from '../../model';\nimport { ControlValueAccessor } from '../control_value_accessor';\nimport { NgControl } from '../ng_control';\nimport { AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn } from '../validators';\n/**\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n */\nexport declare const NG_MODEL_WITH_FORM_CONTROL_WARNING: InjectionToken<{}>;\nexport declare const formControlBinding: any;\n/**\n * @description\n *\n * Syncs a standalone `FormControl` instance to a form control element.\n *\n * This directive ensures that any values written to the `FormControl`\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * `FormControl` instance (view -> model).\n *\n * @usageNotes\n * Use this directive if you'd like to create and manage a `FormControl` instance directly.\n * Simply create a `FormControl`, save it to your component class, and pass it into the\n * `FormControlDirective`.\n *\n * This directive is designed to be used as a standalone control.  Unlike `FormControlName`,\n * it does not require that your `FormControl` instance be part of any parent\n * `FormGroup`, and it won't be registered to any `FormGroupDirective` that\n * exists above it.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * `FormControl` instance. See a full list of available properties in\n * `AbstractControl`.\n *\n * **Set the value**: You can pass in an initial value when instantiating the `FormControl`,\n * or you can set it programmatically later using {@link AbstractControl#setValue setValue} or\n * {@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * ### Use with ngModel\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and will be removed in Angular v7.\n *\n * Now deprecated:\n *\n * ```html\n * <input [formControl]=\"control\" [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * This has been deprecated for a few reasons. First, developers have found this pattern\n * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's\n * an input/output property named `ngModel` on the reactive form directive that simply\n * approximates (some of) its behavior. Specifically, it allows getting/setting the value\n * and intercepting value events. However, some of `ngModel`'s other features - like\n * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,\n * which has understandably caused some confusion.\n *\n * In addition, this pattern mixes template-driven and reactive forms strategies, which\n * we generally don't recommend because it doesn't take advantage of the full benefits of\n * either strategy. Setting the value in the template violates the template-agnostic\n * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in\n * the class removes the convenience of defining forms in the template.\n *\n * To update your code before v7, you'll want to decide whether to stick with reactive form\n * directives (and get/set values using reactive forms patterns) or switch over to\n * template-driven directives.\n *\n * After (choice 1 - use reactive forms):\n *\n * ```html\n * <input [formControl]=\"control\">\n * ```\n *\n * ```ts\n * this.control.setValue('some value');\n * ```\n *\n * After (choice 2 - use template-driven forms):\n *\n * ```html\n * <input [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * By default, when you use this pattern, you will see a deprecation warning once in dev\n * mode. You can choose to silence this warning by providing a config for\n * `ReactiveFormsModule` at import time:\n *\n * ```ts\n * imports: [\n *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'});\n * ]\n * ```\n *\n * Alternatively, you can choose to surface a separate warning for each instance of this\n * pattern with a config value of `\"always\"`. This may help to track down where in the code\n * the pattern is being used as the code is being updated.\n *\n * @ngModule ReactiveFormsModule\n */\nexport declare class FormControlDirective extends NgControl implements OnChanges {\n    private _ngModelWarningConfig;\n    viewModel: any;\n    form: FormControl;\n    isDisabled: boolean;\n    /** @deprecated as of v6 */\n    model: any;\n    /** @deprecated as of v6 */\n    update: EventEmitter<{}>;\n    constructor(validators: Array<Validator | ValidatorFn>, asyncValidators: Array<AsyncValidator | AsyncValidatorFn>, valueAccessors: ControlValueAccessor[], _ngModelWarningConfig: string | null);\n    ngOnChanges(changes: SimpleChanges): void;\n    readonly path: string[];\n    readonly validator: ValidatorFn | null;\n    readonly asyncValidator: AsyncValidatorFn | null;\n    readonly control: FormControl;\n    viewToModelUpdate(newValue: any): void;\n    private _isControlChanged;\n}\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/select_control_value_accessor.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, OnDestroy, Renderer2, StaticProvider } from '@angular/core';\nimport { ControlValueAccessor } from './control_value_accessor';\nexport declare const SELECT_VALUE_ACCESSOR: StaticProvider;\n/**\n * @description\n *\n * Writes values and listens to changes on a select element.\n *\n * Used by `NgModel`, `FormControlDirective`, and `FormControlName`\n * to keep the view synced with the `FormControl` model.\n *\n * If you have imported the `FormsModule` or the `ReactiveFormsModule`, this\n * value accessor will be active on any select control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * @usageNotes\n * ### How to use select controls with form directives\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * If your option values are simple strings, you can bind to the normal `value` property\n * on the option.  If your option values happen to be objects (and you'd like to save the\n * selection in your form as an object), use `ngValue` instead:\n *\n * {@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * In reactive forms, you'll also want to add your form directive (`formControlName` or\n * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n * choice of binding to the  `value` or `ngValue` property on the select's options.\n *\n * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Caveat: Option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * ### Syntax\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * Note: We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nexport declare class SelectControlValueAccessor implements ControlValueAccessor {\n    private _renderer;\n    private _elementRef;\n    value: any;\n    onChange: (_: any) => void;\n    onTouched: () => void;\n    compareWith: (o1: any, o2: any) => boolean;\n    private _compareWith;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef);\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => any): void;\n    registerOnTouched(fn: () => any): void;\n    setDisabledState(isDisabled: boolean): void;\n}\n/**\n * @description\n *\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * See docs for `SelectControlValueAccessor` for usage examples.\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nexport declare class NgSelectOption implements OnDestroy {\n    private _element;\n    private _renderer;\n    private _select;\n    id: string;\n    constructor(_element: ElementRef, _renderer: Renderer2, _select: SelectControlValueAccessor);\n    ngValue: any;\n    value: any;\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/forms/forms.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"ɵangular_packages_forms_forms_a\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"NG_VALUE_ACCESSOR\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"CheckboxControlValueAccessor\"},\"multi\":true},\"ɵangular_packages_forms_forms_b\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"NG_VALUE_ACCESSOR\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"DefaultValueAccessor\"},\"multi\":true},\"ɵangular_packages_forms_forms_c\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"AbstractControlDirective\"}]}]}},\"ɵangular_packages_forms_forms_d\":{\"[class.ng-untouched]\":\"ngClassUntouched\",\"[class.ng-touched]\":\"ngClassTouched\",\"[class.ng-pristine]\":\"ngClassPristine\",\"[class.ng-dirty]\":\"ngClassDirty\",\"[class.ng-valid]\":\"ngClassValid\",\"[class.ng-invalid]\":\"ngClassInvalid\",\"[class.ng-pending]\":\"ngClassPending\",\"$quoted$\":[\"[class.ng-untouched]\",\"[class.ng-touched]\",\"[class.ng-pristine]\",\"[class.ng-dirty]\",\"[class.ng-valid]\",\"[class.ng-invalid]\",\"[class.ng-pending]\"]},\"ɵangular_packages_forms_forms_e\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ControlContainer\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"NgForm\"}},\"ɵangular_packages_forms_forms_f\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":14,\"character\":44},\"arguments\":[\"NgFormSelectorWarning\"]},\"ɵangular_packages_forms_forms_g\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"NgControl\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"NgModel\"}},\"ɵangular_packages_forms_forms_h\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ControlContainer\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"NgModelGroup\"}},\"ɵangular_packages_forms_forms_i\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"NG_VALUE_ACCESSOR\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"RadioControlValueAccessor\"},\"multi\":true},\"ɵangular_packages_forms_forms_j\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":22,\"character\":1}}],\"members\":{\"add\":[{\"__symbolic\":\"method\"}],\"remove\":[{\"__symbolic\":\"method\"}],\"select\":[{\"__symbolic\":\"method\"}],\"_isSameGroup\":[{\"__symbolic\":\"method\"}]}},\"ɵangular_packages_forms_forms_k\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":23,\"character\":8},\"arguments\":[\"NgModelWithFormControlWarning\"]},\"ɵangular_packages_forms_forms_l\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"NgControl\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"FormControlDirective\"}},\"ɵangular_packages_forms_forms_m\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"NgControl\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"FormControlName\"}},\"ɵangular_packages_forms_forms_n\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ControlContainer\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"FormGroupDirective\"}},\"ɵangular_packages_forms_forms_o\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ControlContainer\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"FormGroupName\"}},\"ɵangular_packages_forms_forms_p\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ControlContainer\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"FormArrayName\"}},\"ɵangular_packages_forms_forms_q\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"NG_VALUE_ACCESSOR\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"SelectControlValueAccessor\"},\"multi\":true},\"ɵangular_packages_forms_forms_r\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"NG_VALUE_ACCESSOR\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"SelectMultipleControlValueAccessor\"},\"multi\":true},\"ɵangular_packages_forms_forms_s\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":183,\"character\":1},\"arguments\":[{\"selector\":\"option\"}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[null,null,[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":192,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Host\",\"line\":192,\"character\":19}}]],\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ElementRef\",\"line\":100,\"character\":65},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Renderer2\",\"line\":100,\"character\":33},{\"__symbolic\":\"reference\",\"name\":\"SelectMultipleControlValueAccessor\"}]}],\"ngValue\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":198,\"character\":3},\"arguments\":[\"ngValue\"]}]}],\"value\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":206,\"character\":3},\"arguments\":[\"value\"]}]}],\"_setElementValue\":[{\"__symbolic\":\"method\"}],\"_setSelected\":[{\"__symbolic\":\"method\"}],\"ngOnDestroy\":[{\"__symbolic\":\"method\"}]}},\"ɵangular_packages_forms_forms_t\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"NG_VALIDATORS\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"RequiredValidator\"},\"multi\":true},\"ɵangular_packages_forms_forms_u\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"NG_VALIDATORS\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"CheckboxRequiredValidator\"},\"multi\":true},\"ɵangular_packages_forms_forms_v\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"NG_VALIDATORS\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"EmailValidator\"},\"multi\":true},\"ɵangular_packages_forms_forms_w\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"NG_VALIDATORS\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"MinLengthValidator\"},\"multi\":true},\"ɵangular_packages_forms_forms_x\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"NG_VALIDATORS\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"MaxLengthValidator\"},\"multi\":true},\"ɵangular_packages_forms_forms_y\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"NG_VALIDATORS\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"PatternValidator\"},\"multi\":true},\"AbstractControlDirective\":{\"__symbolic\":\"class\",\"members\":{\"reset\":[{\"__symbolic\":\"method\"}],\"hasError\":[{\"__symbolic\":\"method\"}],\"getError\":[{\"__symbolic\":\"method\"}]}},\"AbstractFormGroupDirective\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ControlContainer\"},\"members\":{\"ngOnInit\":[{\"__symbolic\":\"method\"}],\"ngOnDestroy\":[{\"__symbolic\":\"method\"}],\"_checkParentType\":[{\"__symbolic\":\"method\"}]}},\"CheckboxControlValueAccessor\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":31,\"character\":1},\"arguments\":[{\"selector\":\"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\",\"host\":{\"(change)\":\"onChange($event.target.checked)\",\"(blur)\":\"onTouched()\",\"$quoted$\":[\"(change)\",\"(blur)\"]},\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_a\"}]}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Renderer2\",\"line\":41,\"character\":33},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ElementRef\",\"line\":41,\"character\":65}]}],\"writeValue\":[{\"__symbolic\":\"method\"}],\"registerOnChange\":[{\"__symbolic\":\"method\"}],\"registerOnTouched\":[{\"__symbolic\":\"method\"}],\"setDisabledState\":[{\"__symbolic\":\"method\"}]}},\"ControlContainer\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"AbstractControlDirective\"},\"members\":{}},\"ControlValueAccessor\":{\"__symbolic\":\"interface\"},\"NG_VALUE_ACCESSOR\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":137,\"character\":37},\"arguments\":[\"NgValueAccessor\"]},\"COMPOSITION_BUFFER_MODE\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":31,\"character\":43},\"arguments\":[\"CompositionEventMode\"]},\"DefaultValueAccessor\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":47,\"character\":1},\"arguments\":[{\"selector\":\"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\",\"host\":{\"(input)\":\"$any(this)._handleInput($event.target.value)\",\"(blur)\":\"onTouched()\",\"(compositionstart)\":\"$any(this)._compositionStart()\",\"(compositionend)\":\"$any(this)._compositionEnd($event.target.value)\",\"$quoted$\":[\"(input)\",\"(blur)\",\"(compositionstart)\",\"(compositionend)\"]},\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_b\"}]}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[null,null,[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":70,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":70,\"character\":19},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"COMPOSITION_BUFFER_MODE\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Renderer2\",\"line\":69,\"character\":25},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ElementRef\",\"line\":69,\"character\":57},{\"__symbolic\":\"reference\",\"name\":\"boolean\"}]}],\"writeValue\":[{\"__symbolic\":\"method\"}],\"registerOnChange\":[{\"__symbolic\":\"method\"}],\"registerOnTouched\":[{\"__symbolic\":\"method\"}],\"setDisabledState\":[{\"__symbolic\":\"method\"}],\"_handleInput\":[{\"__symbolic\":\"method\"}],\"_compositionStart\":[{\"__symbolic\":\"method\"}],\"_compositionEnd\":[{\"__symbolic\":\"method\"}]}},\"Form\":{\"__symbolic\":\"interface\"},\"NgControl\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"AbstractControlDirective\"},\"members\":{\"viewToModelUpdate\":[{\"__symbolic\":\"method\"}]}},\"NgControlStatus\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_c\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":54,\"character\":1},\"arguments\":[{\"selector\":\"[formControlName],[ngModel],[formControl]\",\"host\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_d\"}}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":56,\"character\":15}}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"NgControl\"}]}]}},\"NgControlStatusGroup\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_c\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":66,\"character\":1},\"arguments\":[{\"selector\":\"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\",\"host\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_d\"}}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":72,\"character\":15}}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ControlContainer\"}]}]}},\"NgForm\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ControlContainer\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":77,\"character\":1},\"arguments\":[{\"selector\":\"form:not([ngNoForm]):not([formGroup]),ngForm,ng-form,[ngForm]\",\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_e\"}],\"host\":{\"(submit)\":\"onSubmit($event)\",\"(reset)\":\"onReset()\",\"$quoted$\":[\"(submit)\",\"(reset)\"]},\"outputs\":[\"ngSubmit\"],\"exportAs\":\"ngForm\"}]}],\"members\":{\"options\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":108,\"character\":3},\"arguments\":[\"ngFormOptions\"]}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":111,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":111,\"character\":19}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":111,\"character\":27},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_VALIDATORS\"}]}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":112,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":112,\"character\":19}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":112,\"character\":27},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_ASYNC_VALIDATORS\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}]}],\"ngAfterViewInit\":[{\"__symbolic\":\"method\"}],\"addControl\":[{\"__symbolic\":\"method\"}],\"getControl\":[{\"__symbolic\":\"method\"}],\"removeControl\":[{\"__symbolic\":\"method\"}],\"addFormGroup\":[{\"__symbolic\":\"method\"}],\"removeFormGroup\":[{\"__symbolic\":\"method\"}],\"getFormGroup\":[{\"__symbolic\":\"method\"}],\"updateModel\":[{\"__symbolic\":\"method\"}],\"setValue\":[{\"__symbolic\":\"method\"}],\"onSubmit\":[{\"__symbolic\":\"method\"}],\"onReset\":[{\"__symbolic\":\"method\"}],\"resetForm\":[{\"__symbolic\":\"method\"}],\"_setUpdateStrategy\":[{\"__symbolic\":\"method\"}],\"_findContainer\":[{\"__symbolic\":\"method\"}]}},\"NgFormSelectorWarning\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":22,\"character\":1},\"arguments\":[{\"selector\":\"ngForm\"}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":32,\"character\":15}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":32,\"character\":27},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_f\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"}]}]},\"statics\":{\"_ngFormWarning\":false}},\"NgModel\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"NgControl\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":101,\"character\":1},\"arguments\":[{\"selector\":\"[ngModel]:not([formControlName]):not([formControl])\",\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_g\"}],\"exportAs\":\"ngModel\"}]}],\"members\":{\"name\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":114,\"character\":3}}]}],\"isDisabled\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":116,\"character\":3},\"arguments\":[\"disabled\"]}]}],\"model\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":117,\"character\":3},\"arguments\":[\"ngModel\"]}]}],\"options\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":157,\"character\":3},\"arguments\":[\"ngModelOptions\"]}]}],\"update\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Output\",\"line\":160,\"character\":3},\"arguments\":[\"ngModelChange\"]}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":162,\"character\":15}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Host\",\"line\":162,\"character\":27}}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":163,\"character\":15}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":163,\"character\":27}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":163,\"character\":35},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_VALIDATORS\"}]}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":164,\"character\":15}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":164,\"character\":27}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":164,\"character\":35},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_ASYNC_VALIDATORS\"}]}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":165,\"character\":15}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":165,\"character\":27}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":165,\"character\":35},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_VALUE_ACCESSOR\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ControlContainer\"},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"AsyncValidator\"}]},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"AsyncValidator\"}]},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ControlValueAccessor\"}]}]}],\"ngOnChanges\":[{\"__symbolic\":\"method\"}],\"ngOnDestroy\":[{\"__symbolic\":\"method\"}],\"viewToModelUpdate\":[{\"__symbolic\":\"method\"}],\"_setUpControl\":[{\"__symbolic\":\"method\"}],\"_setUpdateStrategy\":[{\"__symbolic\":\"method\"}],\"_isStandalone\":[{\"__symbolic\":\"method\"}],\"_setUpStandalone\":[{\"__symbolic\":\"method\"}],\"_checkForErrors\":[{\"__symbolic\":\"method\"}],\"_checkParentType\":[{\"__symbolic\":\"method\"}],\"_checkName\":[{\"__symbolic\":\"method\"}],\"_updateValue\":[{\"__symbolic\":\"method\"}],\"_updateDisabled\":[{\"__symbolic\":\"method\"}]}},\"NgModelGroup\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"AbstractFormGroupDirective\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":43,\"character\":1},\"arguments\":[{\"selector\":\"[ngModelGroup]\",\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_h\"}],\"exportAs\":\"ngModelGroup\"}]}],\"members\":{\"name\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":46,\"character\":3},\"arguments\":[\"ngModelGroup\"]}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Host\",\"line\":49,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"SkipSelf\",\"line\":49,\"character\":15}}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":50,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":50,\"character\":19}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":50,\"character\":27},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_VALIDATORS\"}]}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":51,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":51,\"character\":19}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":51,\"character\":27},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_ASYNC_VALIDATORS\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ControlContainer\"},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}]}],\"_checkParentType\":[{\"__symbolic\":\"method\"}]}},\"RadioControlValueAccessor\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":85,\"character\":1},\"arguments\":[{\"selector\":\"input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]\",\"host\":{\"(change)\":\"onChange()\",\"(blur)\":\"onTouched()\",\"$quoted$\":[\"(change)\",\"(blur)\"]},\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_i\"}]}]}],\"members\":{\"name\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":106,\"character\":3}}]}],\"formControlName\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":108,\"character\":3}}]}],\"value\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":109,\"character\":3}}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Renderer2\",\"line\":112,\"character\":25},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ElementRef\",\"line\":112,\"character\":57},{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_j\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injector\",\"line\":113,\"character\":66}]}],\"ngOnInit\":[{\"__symbolic\":\"method\"}],\"ngOnDestroy\":[{\"__symbolic\":\"method\"}],\"writeValue\":[{\"__symbolic\":\"method\"}],\"registerOnChange\":[{\"__symbolic\":\"method\"}],\"fireUncheck\":[{\"__symbolic\":\"method\"}],\"registerOnTouched\":[{\"__symbolic\":\"method\"}],\"setDisabledState\":[{\"__symbolic\":\"method\"}],\"_checkName\":[{\"__symbolic\":\"method\"}],\"_throwNameError\":[{\"__symbolic\":\"method\"}]}},\"FormControlDirective\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"NgControl\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":136,\"character\":1},\"arguments\":[{\"selector\":\"[formControl]\",\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_l\"}],\"exportAs\":\"ngForm\"}]}],\"members\":{\"form\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":142,\"character\":3},\"arguments\":[\"formControl\"]}]}],\"isDisabled\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":144,\"character\":3},\"arguments\":[\"disabled\"]}]}],\"model\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":150,\"character\":3},\"arguments\":[\"ngModel\"]}]}],\"update\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Output\",\"line\":153,\"character\":3},\"arguments\":[\"ngModelChange\"]}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":171,\"character\":15}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":171,\"character\":27}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":171,\"character\":35},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_VALIDATORS\"}]}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":172,\"character\":15}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":172,\"character\":27}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":172,\"character\":35},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_ASYNC_VALIDATORS\"}]}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":173,\"character\":15}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":173,\"character\":27}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":173,\"character\":35},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_VALUE_ACCESSOR\"}]}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":175,\"character\":15}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":175,\"character\":27},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_k\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"AsyncValidator\"}]},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"AsyncValidator\"}]},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ControlValueAccessor\"}]},{\"__symbolic\":\"reference\",\"name\":\"string\"}]}],\"ngOnChanges\":[{\"__symbolic\":\"method\"}],\"viewToModelUpdate\":[{\"__symbolic\":\"method\"}],\"_isControlChanged\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"_ngModelWarningSentOnce\":false}},\"FormControlName\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"NgControl\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":148,\"character\":1},\"arguments\":[{\"selector\":\"[formControlName]\",\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_m\"}]}]}],\"members\":{\"name\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":157,\"character\":3},\"arguments\":[\"formControlName\"]}]}],\"isDisabled\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":159,\"character\":3},\"arguments\":[\"disabled\"]}]}],\"model\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":165,\"character\":3},\"arguments\":[\"ngModel\"]}]}],\"update\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Output\",\"line\":168,\"character\":3},\"arguments\":[\"ngModelChange\"]}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":187,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Host\",\"line\":187,\"character\":19}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"SkipSelf\",\"line\":187,\"character\":27}}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":188,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":188,\"character\":19}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":188,\"character\":27},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_VALIDATORS\"}]}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":189,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":189,\"character\":19}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":189,\"character\":27},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_ASYNC_VALIDATORS\"}]}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":191,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":191,\"character\":19}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":191,\"character\":27},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_VALUE_ACCESSOR\"}]}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":192,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":192,\"character\":19},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_k\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ControlContainer\"},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"AsyncValidator\"}]},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"AsyncValidator\"}]},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ControlValueAccessor\"}]},{\"__symbolic\":\"reference\",\"name\":\"string\"}]}],\"ngOnChanges\":[{\"__symbolic\":\"method\"}],\"ngOnDestroy\":[{\"__symbolic\":\"method\"}],\"viewToModelUpdate\":[{\"__symbolic\":\"method\"}],\"_checkParentType\":[{\"__symbolic\":\"method\"}],\"_setUpControl\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"_ngModelWarningSentOnce\":false}},\"FormGroupDirective\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ControlContainer\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":57,\"character\":1},\"arguments\":[{\"selector\":\"[formGroup]\",\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_n\"}],\"host\":{\"(submit)\":\"onSubmit($event)\",\"(reset)\":\"onReset()\",\"$quoted$\":[\"(submit)\",\"(reset)\"]},\"exportAs\":\"ngForm\"}]}],\"members\":{\"form\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":71,\"character\":3},\"arguments\":[\"formGroup\"]}]}],\"ngSubmit\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Output\",\"line\":72,\"character\":3}}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":75,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":75,\"character\":19}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":75,\"character\":27},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_VALIDATORS\"}]}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":76,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":76,\"character\":19}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":76,\"character\":27},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_ASYNC_VALIDATORS\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}]}],\"ngOnChanges\":[{\"__symbolic\":\"method\"}],\"addControl\":[{\"__symbolic\":\"method\"}],\"getControl\":[{\"__symbolic\":\"method\"}],\"removeControl\":[{\"__symbolic\":\"method\"}],\"addFormGroup\":[{\"__symbolic\":\"method\"}],\"removeFormGroup\":[{\"__symbolic\":\"method\"}],\"getFormGroup\":[{\"__symbolic\":\"method\"}],\"addFormArray\":[{\"__symbolic\":\"method\"}],\"removeFormArray\":[{\"__symbolic\":\"method\"}],\"getFormArray\":[{\"__symbolic\":\"method\"}],\"updateModel\":[{\"__symbolic\":\"method\"}],\"onSubmit\":[{\"__symbolic\":\"method\"}],\"onReset\":[{\"__symbolic\":\"method\"}],\"resetForm\":[{\"__symbolic\":\"method\"}],\"_updateDomValue\":[{\"__symbolic\":\"method\"}],\"_updateRegistrations\":[{\"__symbolic\":\"method\"}],\"_updateValidators\":[{\"__symbolic\":\"method\"}],\"_checkFormPresent\":[{\"__symbolic\":\"method\"}]}},\"FormArrayName\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ControlContainer\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":138,\"character\":1},\"arguments\":[{\"selector\":\"[formArrayName]\",\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_p\"}]}]}],\"members\":{\"name\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":150,\"character\":3},\"arguments\":[\"formArrayName\"]}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":153,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Host\",\"line\":153,\"character\":19}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"SkipSelf\",\"line\":153,\"character\":27}}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":154,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":154,\"character\":19}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":154,\"character\":27},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_VALIDATORS\"}]}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":155,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":155,\"character\":19}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":155,\"character\":27},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_ASYNC_VALIDATORS\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ControlContainer\"},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}]}],\"ngOnInit\":[{\"__symbolic\":\"method\"}],\"ngOnDestroy\":[{\"__symbolic\":\"method\"}],\"_checkParentType\":[{\"__symbolic\":\"method\"}]}},\"FormGroupName\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"AbstractFormGroupDirective\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":66,\"character\":1},\"arguments\":[{\"selector\":\"[formGroupName]\",\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_o\"}]}]}],\"members\":{\"name\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":69,\"character\":3},\"arguments\":[\"formGroupName\"]}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":72,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Host\",\"line\":72,\"character\":19}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"SkipSelf\",\"line\":72,\"character\":27}}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":73,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":73,\"character\":19}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":73,\"character\":27},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_VALIDATORS\"}]}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":74,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Self\",\"line\":74,\"character\":19}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":74,\"character\":27},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NG_ASYNC_VALIDATORS\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ControlContainer\"},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}]}],\"_checkParentType\":[{\"__symbolic\":\"method\"}]}},\"NgSelectOption\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":169,\"character\":1},\"arguments\":[{\"selector\":\"option\"}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[null,null,[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":176,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Host\",\"line\":176,\"character\":19}}]],\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ElementRef\",\"line\":117,\"character\":65},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Renderer2\",\"line\":117,\"character\":33},{\"__symbolic\":\"reference\",\"name\":\"SelectControlValueAccessor\"}]}],\"ngValue\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":180,\"character\":3},\"arguments\":[\"ngValue\"]}]}],\"value\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":188,\"character\":3},\"arguments\":[\"value\"]}]}],\"_setElementValue\":[{\"__symbolic\":\"method\"}],\"ngOnDestroy\":[{\"__symbolic\":\"method\"}]}},\"SelectControlValueAccessor\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":91,\"character\":1},\"arguments\":[{\"selector\":\"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\",\"host\":{\"(change)\":\"onChange($event.target.value)\",\"(blur)\":\"onTouched()\",\"$quoted$\":[\"(change)\",\"(blur)\"]},\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_q\"}]}]}],\"members\":{\"compareWith\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":107,\"character\":3}}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Renderer2\",\"line\":117,\"character\":33},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ElementRef\",\"line\":117,\"character\":65}]}],\"writeValue\":[{\"__symbolic\":\"method\"}],\"registerOnChange\":[{\"__symbolic\":\"method\"}],\"registerOnTouched\":[{\"__symbolic\":\"method\"}],\"setDisabledState\":[{\"__symbolic\":\"method\"}],\"_registerOption\":[{\"__symbolic\":\"method\"}],\"_getOptionId\":[{\"__symbolic\":\"method\"}],\"_getOptionValue\":[{\"__symbolic\":\"method\"}]}},\"SelectMultipleControlValueAccessor\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":74,\"character\":1},\"arguments\":[{\"selector\":\"select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]\",\"host\":{\"(change)\":\"onChange($event.target)\",\"(blur)\":\"onTouched()\",\"$quoted$\":[\"(change)\",\"(blur)\"]},\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_r\"}]}]}],\"members\":{\"compareWith\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":90,\"character\":3}}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Renderer2\",\"line\":100,\"character\":33},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ElementRef\",\"line\":100,\"character\":65}]}],\"writeValue\":[{\"__symbolic\":\"method\"}],\"registerOnChange\":[{\"__symbolic\":\"method\"}],\"registerOnTouched\":[{\"__symbolic\":\"method\"}],\"setDisabledState\":[{\"__symbolic\":\"method\"}],\"_registerOption\":[{\"__symbolic\":\"method\"}],\"_getOptionId\":[{\"__symbolic\":\"method\"}],\"_getOptionValue\":[{\"__symbolic\":\"method\"}]}},\"AsyncValidator\":{\"__symbolic\":\"interface\"},\"AsyncValidatorFn\":{\"__symbolic\":\"interface\"},\"CheckboxRequiredValidator\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"RequiredValidator\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":181,\"character\":1},\"arguments\":[{\"selector\":\"input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]\",\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_u\"}],\"host\":{\"[attr.required]\":\"required ? \\\"\\\" : null\",\"$quoted$\":[\"[attr.required]\"]}}]}],\"members\":{\"validate\":[{\"__symbolic\":\"method\"}]}},\"EmailValidator\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":219,\"character\":1},\"arguments\":[{\"selector\":\"[email][formControlName],[email][formControl],[email][ngModel]\",\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_v\"}]}]}],\"members\":{\"email\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":229,\"character\":3}}]}],\"validate\":[{\"__symbolic\":\"method\"}],\"registerOnValidatorChange\":[{\"__symbolic\":\"method\"}]}},\"MaxLengthValidator\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":323,\"character\":1},\"arguments\":[{\"selector\":\"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\",\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_x\"}],\"host\":{\"[attr.maxlength]\":\"maxlength ? maxlength : null\",\"$quoted$\":[\"[attr.maxlength]\"]}}]}],\"members\":{\"maxlength\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":336,\"character\":3}}]}],\"ngOnChanges\":[{\"__symbolic\":\"method\"}],\"validate\":[{\"__symbolic\":\"method\"}],\"registerOnValidatorChange\":[{\"__symbolic\":\"method\"}],\"_createValidator\":[{\"__symbolic\":\"method\"}]}},\"MinLengthValidator\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":269,\"character\":1},\"arguments\":[{\"selector\":\"[minlength][formControlName],[minlength][formControl],[minlength][ngModel]\",\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_w\"}],\"host\":{\"[attr.minlength]\":\"minlength ? minlength : null\",\"$quoted$\":[\"[attr.minlength]\"]}}]}],\"members\":{\"minlength\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":282,\"character\":3}}]}],\"ngOnChanges\":[{\"__symbolic\":\"method\"}],\"validate\":[{\"__symbolic\":\"method\"}],\"registerOnValidatorChange\":[{\"__symbolic\":\"method\"}],\"_createValidator\":[{\"__symbolic\":\"method\"}]}},\"PatternValidator\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":380,\"character\":1},\"arguments\":[{\"selector\":\"[pattern][formControlName],[pattern][formControl],[pattern][ngModel]\",\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_y\"}],\"host\":{\"[attr.pattern]\":\"pattern ? pattern : null\",\"$quoted$\":[\"[attr.pattern]\"]}}]}],\"members\":{\"pattern\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":393,\"character\":3}}]}],\"ngOnChanges\":[{\"__symbolic\":\"method\"}],\"validate\":[{\"__symbolic\":\"method\"}],\"registerOnValidatorChange\":[{\"__symbolic\":\"method\"}],\"_createValidator\":[{\"__symbolic\":\"method\"}]}},\"RequiredValidator\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":138,\"character\":1},\"arguments\":[{\"selector\":\":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\",\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_t\"}],\"host\":{\"[attr.required]\":\"required ? \\\"\\\" : null\",\"$quoted$\":[\"[attr.required]\"]}}]}],\"members\":{\"required\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":150,\"character\":3}}]}],\"validate\":[{\"__symbolic\":\"method\"}],\"registerOnValidatorChange\":[{\"__symbolic\":\"method\"}]}},\"ValidationErrors\":{\"__symbolic\":\"interface\"},\"Validator\":{\"__symbolic\":\"interface\"},\"ValidatorFn\":{\"__symbolic\":\"interface\"},\"FormBuilder\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":24,\"character\":1}}],\"members\":{\"group\":[{\"__symbolic\":\"method\"}],\"control\":[{\"__symbolic\":\"method\"}],\"array\":[{\"__symbolic\":\"method\"}],\"_reduceControls\":[{\"__symbolic\":\"method\"}],\"_createControl\":[{\"__symbolic\":\"method\"}]}},\"AbstractControl\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ValidatorFn\"},{\"__symbolic\":\"reference\",\"name\":\"AsyncValidatorFn\"}]}],\"setValidators\":[{\"__symbolic\":\"method\"}],\"setAsyncValidators\":[{\"__symbolic\":\"method\"}],\"clearValidators\":[{\"__symbolic\":\"method\"}],\"clearAsyncValidators\":[{\"__symbolic\":\"method\"}],\"markAsTouched\":[{\"__symbolic\":\"method\"}],\"markAsUntouched\":[{\"__symbolic\":\"method\"}],\"markAsDirty\":[{\"__symbolic\":\"method\"}],\"markAsPristine\":[{\"__symbolic\":\"method\"}],\"markAsPending\":[{\"__symbolic\":\"method\"}],\"disable\":[{\"__symbolic\":\"method\"}],\"enable\":[{\"__symbolic\":\"method\"}],\"_updateAncestors\":[{\"__symbolic\":\"method\"}],\"setParent\":[{\"__symbolic\":\"method\"}],\"setValue\":[{\"__symbolic\":\"method\"}],\"patchValue\":[{\"__symbolic\":\"method\"}],\"reset\":[{\"__symbolic\":\"method\"}],\"updateValueAndValidity\":[{\"__symbolic\":\"method\"}],\"_updateTreeValidity\":[{\"__symbolic\":\"method\"}],\"_setInitialStatus\":[{\"__symbolic\":\"method\"}],\"_runValidator\":[{\"__symbolic\":\"method\"}],\"_runAsyncValidator\":[{\"__symbolic\":\"method\"}],\"_cancelExistingSubscription\":[{\"__symbolic\":\"method\"}],\"setErrors\":[{\"__symbolic\":\"method\"}],\"get\":[{\"__symbolic\":\"method\"}],\"getError\":[{\"__symbolic\":\"method\"}],\"hasError\":[{\"__symbolic\":\"method\"}],\"_updateControlsErrors\":[{\"__symbolic\":\"method\"}],\"_initObservables\":[{\"__symbolic\":\"method\"}],\"_calculateStatus\":[{\"__symbolic\":\"method\"}],\"_updateValue\":[{\"__symbolic\":\"method\"}],\"_forEachChild\":[{\"__symbolic\":\"method\"}],\"_anyControls\":[{\"__symbolic\":\"method\"}],\"_allControlsDisabled\":[{\"__symbolic\":\"method\"}],\"_syncPendingControls\":[{\"__symbolic\":\"method\"}],\"_anyControlsHaveStatus\":[{\"__symbolic\":\"method\"}],\"_anyControlsDirty\":[{\"__symbolic\":\"method\"}],\"_anyControlsTouched\":[{\"__symbolic\":\"method\"}],\"_updatePristine\":[{\"__symbolic\":\"method\"}],\"_updateTouched\":[{\"__symbolic\":\"method\"}],\"_isBoxedValue\":[{\"__symbolic\":\"method\"}],\"_registerOnCollectionChange\":[{\"__symbolic\":\"method\"}],\"_setUpdateStrategy\":[{\"__symbolic\":\"method\"}]}},\"AbstractControlOptions\":{\"__symbolic\":\"interface\"},\"FormArray\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"AbstractControl\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"AbstractControl\"}]},{\"__symbolic\":\"reference\",\"name\":\"ValidatorFn\"},{\"__symbolic\":\"reference\",\"name\":\"AsyncValidatorFn\"}]}],\"at\":[{\"__symbolic\":\"method\"}],\"push\":[{\"__symbolic\":\"method\"}],\"insert\":[{\"__symbolic\":\"method\"}],\"removeAt\":[{\"__symbolic\":\"method\"}],\"setControl\":[{\"__symbolic\":\"method\"}],\"setValue\":[{\"__symbolic\":\"method\"}],\"patchValue\":[{\"__symbolic\":\"method\"}],\"reset\":[{\"__symbolic\":\"method\"}],\"getRawValue\":[{\"__symbolic\":\"method\"}],\"_syncPendingControls\":[{\"__symbolic\":\"method\"}],\"_throwIfControlMissing\":[{\"__symbolic\":\"method\"}],\"_forEachChild\":[{\"__symbolic\":\"method\"}],\"_updateValue\":[{\"__symbolic\":\"method\"}],\"_anyControls\":[{\"__symbolic\":\"method\"}],\"_setUpControls\":[{\"__symbolic\":\"method\"}],\"_checkAllValuesPresent\":[{\"__symbolic\":\"method\"}],\"_allControlsDisabled\":[{\"__symbolic\":\"method\"}],\"_registerControl\":[{\"__symbolic\":\"method\"}]}},\"FormControl\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"AbstractControl\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"},{\"__symbolic\":\"reference\",\"name\":\"ValidatorFn\"},{\"__symbolic\":\"reference\",\"name\":\"AsyncValidatorFn\"}]}],\"setValue\":[{\"__symbolic\":\"method\"}],\"patchValue\":[{\"__symbolic\":\"method\"}],\"reset\":[{\"__symbolic\":\"method\"}],\"_updateValue\":[{\"__symbolic\":\"method\"}],\"_anyControls\":[{\"__symbolic\":\"method\"}],\"_allControlsDisabled\":[{\"__symbolic\":\"method\"}],\"registerOnChange\":[{\"__symbolic\":\"method\"}],\"_clearChangeFns\":[{\"__symbolic\":\"method\"}],\"registerOnDisabledChange\":[{\"__symbolic\":\"method\"}],\"_forEachChild\":[{\"__symbolic\":\"method\"}],\"_syncPendingControls\":[{\"__symbolic\":\"method\"}],\"_applyFormState\":[{\"__symbolic\":\"method\"}]}},\"FormGroup\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"AbstractControl\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":1142,\"character\":23,\"module\":\"./src/model\"},{\"__symbolic\":\"reference\",\"name\":\"ValidatorFn\"},{\"__symbolic\":\"reference\",\"name\":\"AsyncValidatorFn\"}]}],\"registerControl\":[{\"__symbolic\":\"method\"}],\"addControl\":[{\"__symbolic\":\"method\"}],\"removeControl\":[{\"__symbolic\":\"method\"}],\"setControl\":[{\"__symbolic\":\"method\"}],\"contains\":[{\"__symbolic\":\"method\"}],\"setValue\":[{\"__symbolic\":\"method\"}],\"patchValue\":[{\"__symbolic\":\"method\"}],\"reset\":[{\"__symbolic\":\"method\"}],\"getRawValue\":[{\"__symbolic\":\"method\"}],\"_syncPendingControls\":[{\"__symbolic\":\"method\"}],\"_throwIfControlMissing\":[{\"__symbolic\":\"method\"}],\"_forEachChild\":[{\"__symbolic\":\"method\"}],\"_setUpControls\":[{\"__symbolic\":\"method\"}],\"_updateValue\":[{\"__symbolic\":\"method\"}],\"_anyControls\":[{\"__symbolic\":\"method\"}],\"_reduceValue\":[{\"__symbolic\":\"method\"}],\"_reduceChildren\":[{\"__symbolic\":\"method\"}],\"_allControlsDisabled\":[{\"__symbolic\":\"method\"}],\"_checkAllValuesPresent\":[{\"__symbolic\":\"method\"}]}},\"NG_ASYNC_VALIDATORS\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":55,\"character\":8},\"arguments\":[\"NgAsyncValidators\"]},\"NG_VALIDATORS\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":45,\"character\":33},\"arguments\":[\"NgValidators\"]},\"Validators\":{\"__symbolic\":\"class\",\"members\":{},\"statics\":{\"min\":{\"__symbolic\":\"function\",\"parameters\":[\"min\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":91,\"character\":11,\"module\":\"./src/validators\"}},\"max\":{\"__symbolic\":\"function\",\"parameters\":[\"max\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":122,\"character\":11,\"module\":\"./src/validators\"}},\"required\":{\"__symbolic\":\"function\",\"parameters\":[\"control\"],\"value\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"error\",\"message\":\"Reference to a non-exported function\",\"line\":14,\"character\":9,\"context\":{\"name\":\"isEmptyInputValue\"},\"module\":\"./src/validators\"},\"thenExpression\":{\"required\":true,\"$quoted$\":[\"required\"]},\"elseExpression\":null}},\"requiredTrue\":{\"__symbolic\":\"function\",\"parameters\":[\"control\"],\"value\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"binop\",\"operator\":\"===\",\"left\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"control\"},\"member\":\"value\"},\"right\":true},\"thenExpression\":null,\"elseExpression\":{\"required\":true,\"$quoted$\":[\"required\"]}}},\"minLength\":{\"__symbolic\":\"function\",\"parameters\":[\"minLength\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":226,\"character\":11,\"module\":\"./src/validators\"}},\"maxLength\":{\"__symbolic\":\"function\",\"parameters\":[\"maxLength\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":261,\"character\":11,\"module\":\"./src/validators\"}},\"nullValidator\":{\"__symbolic\":\"function\",\"parameters\":[\"control\"],\"value\":null}}},\"VERSION\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Version\",\"line\":16,\"character\":27},\"arguments\":[\"7.0.0\"]},\"FormsModule\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModule\",\"line\":21,\"character\":1},\"arguments\":[{\"declarations\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_ba\"},\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_j\"}],\"exports\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_bc\"},{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_ba\"}]}]}],\"members\":{},\"statics\":{\"withConfig\":{\"__symbolic\":\"function\",\"parameters\":[\"opts\"],\"value\":{\"ngModule\":{\"__symbolic\":\"reference\",\"name\":\"FormsModule\"},\"providers\":[{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_f\"},\"useValue\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"opts\"},\"member\":\"warnOnDeprecatedNgFormSelector\"}}]}}}},\"ReactiveFormsModule\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModule\",\"line\":54,\"character\":1},\"arguments\":[{\"declarations\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_bb\"}],\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"FormBuilder\"},{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_j\"}],\"exports\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_bc\"},{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_bb\"}]}]}],\"members\":{},\"statics\":{\"withConfig\":{\"__symbolic\":\"function\",\"parameters\":[\"opts\"],\"value\":{\"ngModule\":{\"__symbolic\":\"reference\",\"name\":\"ReactiveFormsModule\"},\"providers\":[{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_k\"},\"useValue\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"opts\"},\"member\":\"warnOnNgModelWithFormControl\"}}]}}}},\"ɵangular_packages_forms_forms_z\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_bh\"},{\"__symbolic\":\"reference\",\"name\":\"NgSelectOption\"},{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_s\"},{\"__symbolic\":\"reference\",\"name\":\"DefaultValueAccessor\"},{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_be\"},{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_bg\"},{\"__symbolic\":\"reference\",\"name\":\"CheckboxControlValueAccessor\"},{\"__symbolic\":\"reference\",\"name\":\"SelectControlValueAccessor\"},{\"__symbolic\":\"reference\",\"name\":\"SelectMultipleControlValueAccessor\"},{\"__symbolic\":\"reference\",\"name\":\"RadioControlValueAccessor\"},{\"__symbolic\":\"reference\",\"name\":\"NgControlStatus\"},{\"__symbolic\":\"reference\",\"name\":\"NgControlStatusGroup\"},{\"__symbolic\":\"reference\",\"name\":\"RequiredValidator\"},{\"__symbolic\":\"reference\",\"name\":\"MinLengthValidator\"},{\"__symbolic\":\"reference\",\"name\":\"MaxLengthValidator\"},{\"__symbolic\":\"reference\",\"name\":\"PatternValidator\"},{\"__symbolic\":\"reference\",\"name\":\"CheckboxRequiredValidator\"},{\"__symbolic\":\"reference\",\"name\":\"EmailValidator\"}],\"ɵangular_packages_forms_forms_ba\":[{\"__symbolic\":\"reference\",\"name\":\"NgModel\"},{\"__symbolic\":\"reference\",\"name\":\"NgModelGroup\"},{\"__symbolic\":\"reference\",\"name\":\"NgForm\"},{\"__symbolic\":\"reference\",\"name\":\"NgFormSelectorWarning\"}],\"ɵangular_packages_forms_forms_bb\":[{\"__symbolic\":\"reference\",\"name\":\"FormControlDirective\"},{\"__symbolic\":\"reference\",\"name\":\"FormGroupDirective\"},{\"__symbolic\":\"reference\",\"name\":\"FormControlName\"},{\"__symbolic\":\"reference\",\"name\":\"FormGroupName\"},{\"__symbolic\":\"reference\",\"name\":\"FormArrayName\"}],\"ɵangular_packages_forms_forms_bc\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModule\",\"line\":78,\"character\":1},\"arguments\":[{\"declarations\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_z\"},\"exports\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_z\"}}]}],\"members\":{}},\"ɵangular_packages_forms_forms_bd\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"NG_VALUE_ACCESSOR\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_be\"},\"multi\":true},\"ɵangular_packages_forms_forms_be\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":32,\"character\":1},\"arguments\":[{\"selector\":\"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]\",\"host\":{\"(change)\":\"onChange($event.target.value)\",\"(input)\":\"onChange($event.target.value)\",\"(blur)\":\"onTouched()\",\"$quoted$\":[\"(change)\",\"(input)\",\"(blur)\"]},\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_bd\"}]}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Renderer2\",\"line\":46,\"character\":33},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ElementRef\",\"line\":46,\"character\":65}]}],\"writeValue\":[{\"__symbolic\":\"method\"}],\"registerOnChange\":[{\"__symbolic\":\"method\"}],\"registerOnTouched\":[{\"__symbolic\":\"method\"}],\"setDisabledState\":[{\"__symbolic\":\"method\"}]}},\"ɵangular_packages_forms_forms_bf\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"NG_VALUE_ACCESSOR\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_bg\"},\"multi\":true},\"ɵangular_packages_forms_forms_bg\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":32,\"character\":1},\"arguments\":[{\"selector\":\"input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]\",\"host\":{\"(change)\":\"onChange($event.target.value)\",\"(input)\":\"onChange($event.target.value)\",\"(blur)\":\"onTouched()\",\"$quoted$\":[\"(change)\",\"(input)\",\"(blur)\"]},\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_forms_forms_bf\"}]}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Renderer2\",\"line\":46,\"character\":33},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ElementRef\",\"line\":46,\"character\":65}]}],\"writeValue\":[{\"__symbolic\":\"method\"}],\"registerOnChange\":[{\"__symbolic\":\"method\"}],\"registerOnTouched\":[{\"__symbolic\":\"method\"}],\"setDisabledState\":[{\"__symbolic\":\"method\"}]}},\"ɵangular_packages_forms_forms_bh\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":27,\"character\":1},\"arguments\":[{\"selector\":\"form:not([ngNoForm]):not([ngNativeValidate])\",\"host\":{\"novalidate\":\"\",\"$quoted$\":[\"novalidate\"]}}]}],\"members\":{}}},\"origins\":{\"ɵangular_packages_forms_forms_a\":\"./src/directives/checkbox_value_accessor\",\"ɵangular_packages_forms_forms_b\":\"./src/directives/default_value_accessor\",\"ɵangular_packages_forms_forms_c\":\"./src/directives/ng_control_status\",\"ɵangular_packages_forms_forms_d\":\"./src/directives/ng_control_status\",\"ɵangular_packages_forms_forms_e\":\"./src/directives/ng_form\",\"ɵangular_packages_forms_forms_f\":\"./src/directives/ng_form_selector_warning\",\"ɵangular_packages_forms_forms_g\":\"./src/directives/ng_model\",\"ɵangular_packages_forms_forms_h\":\"./src/directives/ng_model_group\",\"ɵangular_packages_forms_forms_i\":\"./src/directives/radio_control_value_accessor\",\"ɵangular_packages_forms_forms_j\":\"./src/directives/radio_control_value_accessor\",\"ɵangular_packages_forms_forms_k\":\"./src/directives/reactive_directives/form_control_directive\",\"ɵangular_packages_forms_forms_l\":\"./src/directives/reactive_directives/form_control_directive\",\"ɵangular_packages_forms_forms_m\":\"./src/directives/reactive_directives/form_control_name\",\"ɵangular_packages_forms_forms_n\":\"./src/directives/reactive_directives/form_group_directive\",\"ɵangular_packages_forms_forms_o\":\"./src/directives/reactive_directives/form_group_name\",\"ɵangular_packages_forms_forms_p\":\"./src/directives/reactive_directives/form_group_name\",\"ɵangular_packages_forms_forms_q\":\"./src/directives/select_control_value_accessor\",\"ɵangular_packages_forms_forms_r\":\"./src/directives/select_multiple_control_value_accessor\",\"ɵangular_packages_forms_forms_s\":\"./src/directives/select_multiple_control_value_accessor\",\"ɵangular_packages_forms_forms_t\":\"./src/directives/validators\",\"ɵangular_packages_forms_forms_u\":\"./src/directives/validators\",\"ɵangular_packages_forms_forms_v\":\"./src/directives/validators\",\"ɵangular_packages_forms_forms_w\":\"./src/directives/validators\",\"ɵangular_packages_forms_forms_x\":\"./src/directives/validators\",\"ɵangular_packages_forms_forms_y\":\"./src/directives/validators\",\"AbstractControlDirective\":\"./src/directives/abstract_control_directive\",\"AbstractFormGroupDirective\":\"./src/directives/abstract_form_group_directive\",\"CheckboxControlValueAccessor\":\"./src/directives/checkbox_value_accessor\",\"ControlContainer\":\"./src/directives/control_container\",\"ControlValueAccessor\":\"./src/directives/control_value_accessor\",\"NG_VALUE_ACCESSOR\":\"./src/directives/control_value_accessor\",\"COMPOSITION_BUFFER_MODE\":\"./src/directives/default_value_accessor\",\"DefaultValueAccessor\":\"./src/directives/default_value_accessor\",\"Form\":\"./src/directives/form_interface\",\"NgControl\":\"./src/directives/ng_control\",\"NgControlStatus\":\"./src/directives/ng_control_status\",\"NgControlStatusGroup\":\"./src/directives/ng_control_status\",\"NgForm\":\"./src/directives/ng_form\",\"NgFormSelectorWarning\":\"./src/directives/ng_form_selector_warning\",\"NgModel\":\"./src/directives/ng_model\",\"NgModelGroup\":\"./src/directives/ng_model_group\",\"RadioControlValueAccessor\":\"./src/directives/radio_control_value_accessor\",\"FormControlDirective\":\"./src/directives/reactive_directives/form_control_directive\",\"FormControlName\":\"./src/directives/reactive_directives/form_control_name\",\"FormGroupDirective\":\"./src/directives/reactive_directives/form_group_directive\",\"FormArrayName\":\"./src/directives/reactive_directives/form_group_name\",\"FormGroupName\":\"./src/directives/reactive_directives/form_group_name\",\"NgSelectOption\":\"./src/directives/select_control_value_accessor\",\"SelectControlValueAccessor\":\"./src/directives/select_control_value_accessor\",\"SelectMultipleControlValueAccessor\":\"./src/directives/select_multiple_control_value_accessor\",\"AsyncValidator\":\"./src/directives/validators\",\"AsyncValidatorFn\":\"./src/directives/validators\",\"CheckboxRequiredValidator\":\"./src/directives/validators\",\"EmailValidator\":\"./src/directives/validators\",\"MaxLengthValidator\":\"./src/directives/validators\",\"MinLengthValidator\":\"./src/directives/validators\",\"PatternValidator\":\"./src/directives/validators\",\"RequiredValidator\":\"./src/directives/validators\",\"ValidationErrors\":\"./src/directives/validators\",\"Validator\":\"./src/directives/validators\",\"ValidatorFn\":\"./src/directives/validators\",\"FormBuilder\":\"./src/form_builder\",\"AbstractControl\":\"./src/model\",\"AbstractControlOptions\":\"./src/model\",\"FormArray\":\"./src/model\",\"FormControl\":\"./src/model\",\"FormGroup\":\"./src/model\",\"NG_ASYNC_VALIDATORS\":\"./src/validators\",\"NG_VALIDATORS\":\"./src/validators\",\"Validators\":\"./src/validators\",\"VERSION\":\"./src/version\",\"FormsModule\":\"./src/form_providers\",\"ReactiveFormsModule\":\"./src/form_providers\",\"ɵangular_packages_forms_forms_z\":\"./src/directives\",\"ɵangular_packages_forms_forms_ba\":\"./src/directives\",\"ɵangular_packages_forms_forms_bb\":\"./src/directives\",\"ɵangular_packages_forms_forms_bc\":\"./src/directives\",\"ɵangular_packages_forms_forms_bd\":\"./src/directives/number_value_accessor\",\"ɵangular_packages_forms_forms_be\":\"./src/directives/number_value_accessor\",\"ɵangular_packages_forms_forms_bf\":\"./src/directives/range_value_accessor\",\"ɵangular_packages_forms_forms_bg\":\"./src/directives/range_value_accessor\",\"ɵangular_packages_forms_forms_bh\":\"./src/directives/ng_no_validate_directive\"},\"importAs\":\"@angular/forms\"}"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/select_multiple_control_value_accessor.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, OnDestroy, Renderer2, StaticProvider } from '@angular/core';\nimport { ControlValueAccessor } from './control_value_accessor';\nexport declare const SELECT_MULTIPLE_VALUE_ACCESSOR: StaticProvider;\n/**\n * The accessor for writing a value and listening to changes on a select element.\n *\n * @usageNotes\n * ### Caveat: Options selection\n *\n * Angular uses object identity to select options. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select multiple>` supports `compareWith`\n * input. `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects options by the return value of the function.\n *\n * ### Syntax\n *\n * ```\n * <select multiple [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n */\nexport declare class SelectMultipleControlValueAccessor implements ControlValueAccessor {\n    private _renderer;\n    private _elementRef;\n    value: any;\n    onChange: (_: any) => void;\n    onTouched: () => void;\n    compareWith: (o1: any, o2: any) => boolean;\n    private _compareWith;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef);\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => any): void;\n    registerOnTouched(fn: () => any): void;\n    setDisabledState(isDisabled: boolean): void;\n}\n/**\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <select multiple name=\"city\" ngModel>\n *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n * </select>\n * ```\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nexport declare class NgSelectMultipleOption implements OnDestroy {\n    private _element;\n    private _renderer;\n    private _select;\n    id: string;\n    constructor(_element: ElementRef, _renderer: Renderer2, _select: SelectMultipleControlValueAccessor);\n    ngValue: any;\n    value: any;\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/testing/SubscriptionLoggable.d.ts",
    "content": "import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\nexport declare class SubscriptionLoggable {\n    subscriptions: SubscriptionLog[];\n    scheduler: Scheduler;\n    logSubscribedFrame(): number;\n    logUnsubscribedFrame(index: number): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/testing/testing.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"SpyNgModuleFactoryLoader\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":44,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Compiler\",\"line\":67,\"character\":32}]}],\"load\":[{\"__symbolic\":\"method\"}]}},\"setupTestingRouter\":{\"__symbolic\":\"function\"},\"RouterTestingModule\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModule\",\"line\":166,\"character\":1},\"arguments\":[{\"exports\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/router\",\"name\":\"RouterModule\",\"line\":167,\"character\":12}],\"providers\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/router\",\"name\":\"ɵROUTER_PROVIDERS\",\"line\":169,\"character\":4},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"Location\",\"line\":169,\"character\":32},\"useClass\":{\"__symbolic\":\"reference\",\"module\":\"@angular/common/testing\",\"name\":\"SpyLocation\",\"line\":169,\"character\":52}},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"LocationStrategy\",\"line\":170,\"character\":14},\"useClass\":{\"__symbolic\":\"reference\",\"module\":\"@angular/common/testing\",\"name\":\"MockLocationStrategy\",\"line\":170,\"character\":42}},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModuleFactoryLoader\",\"line\":171,\"character\":14},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"SpyNgModuleFactoryLoader\"}},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/router\",\"name\":\"Router\",\"line\":172,\"character\":15},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"setupTestingRouter\"},\"deps\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/router\",\"name\":\"UrlSerializer\",\"line\":175,\"character\":8},{\"__symbolic\":\"reference\",\"module\":\"@angular/router\",\"name\":\"ChildrenOutletContexts\",\"line\":175,\"character\":23},{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"Location\",\"line\":175,\"character\":47},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModuleFactoryLoader\",\"line\":175,\"character\":57},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Compiler\",\"line\":67,\"character\":32},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injector\",\"line\":175,\"character\":90},{\"__symbolic\":\"reference\",\"module\":\"@angular/router\",\"name\":\"ROUTES\",\"line\":176,\"character\":8},{\"__symbolic\":\"reference\",\"module\":\"@angular/router\",\"name\":\"ROUTER_CONFIGURATION\",\"line\":176,\"character\":16},[{\"__symbolic\":\"reference\",\"module\":\"@angular/router\",\"name\":\"UrlHandlingStrategy\",\"line\":176,\"character\":39},{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":176,\"character\":64}}]]},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/router\",\"name\":\"PreloadingStrategy\",\"line\":179,\"character\":14},\"useExisting\":{\"__symbolic\":\"reference\",\"module\":\"@angular/router\",\"name\":\"NoPreloading\",\"line\":179,\"character\":47}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/router\",\"name\":\"provideRoutes\",\"line\":179,\"character\":62},\"arguments\":[[]]}]}]}],\"members\":{},\"statics\":{\"withRoutes\":{\"__symbolic\":\"function\",\"parameters\":[\"routes\",\"config\"],\"value\":{\"ngModule\":{\"__symbolic\":\"reference\",\"name\":\"RouterTestingModule\"},\"providers\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/router\",\"name\":\"provideRoutes\",\"line\":188,\"character\":8},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"routes\"}]},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/router\",\"name\":\"ROUTER_CONFIGURATION\",\"line\":189,\"character\":18},\"useValue\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"reference\",\"name\":\"config\"},\"thenExpression\":{\"__symbolic\":\"reference\",\"name\":\"config\"},\"elseExpression\":{}}}]}}}}},\"origins\":{\"SpyNgModuleFactoryLoader\":\"./src/router_testing_module\",\"setupTestingRouter\":\"./src/router_testing_module\",\"RouterTestingModule\":\"./src/router_testing_module\"},\"importAs\":\"@angular/router/testing\"}"
  },
  {
    "path": "node_modules/@angular/platform-browser/testing/testing.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { createNgZone as ɵangular_packages_platform_browser_testing_testing_a } from './src/browser_util';\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/reactive_directives/form_group_name.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OnDestroy, OnInit } from '@angular/core';\nimport { FormArray } from '../../model';\nimport { AbstractFormGroupDirective } from '../abstract_form_group_directive';\nimport { ControlContainer } from '../control_container';\nimport { AsyncValidatorFn, ValidatorFn } from '../validators';\nimport { FormGroupDirective } from './form_group_directive';\nexport declare const formGroupNameProvider: any;\n/**\n * @description\n *\n * Syncs a nested `FormGroup` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormGroup` you want to link, and\n * will look for a `FormGroup` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Nested form groups can come in handy when you want to validate a sub-group of a\n * form separately from the rest or when you'd like to group the values of certain\n * controls into their own nested object.\n *\n * @usageNotes\n * **Access the group**: You can access the associated `FormGroup` using the\n * {@link AbstractControl#get get} method. Ex: `this.form.get('name')`.\n *\n * You can also access individual controls within the group using dot syntax.\n * Ex: `this.form.get('name.first')`\n *\n * **Get the value**: the `value` property is always synced and available on the\n * `FormGroup`. See a full list of available properties in `AbstractControl`.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the `FormGroup`, or you can set it programmatically later using\n * {@link AbstractControl#setValue setValue} or {@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the group, you can\n * subscribe to the {@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n */\nexport declare class FormGroupName extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n    name: string;\n    constructor(parent: ControlContainer, validators: any[], asyncValidators: any[]);\n}\nexport declare const formArrayNameProvider: any;\n/**\n * @description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Nested form arrays can come in handy when you have a group of form controls but\n * you're not sure how many there will be. Form arrays allow you to create new\n * form controls dynamically.\n *\n * @usageNotes\n * **Access the array**: You can access the associated `FormArray` using the\n * {@link AbstractControl#get get} method on the parent `FormGroup`.\n * Ex: `this.form.get('cities')`.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * `FormArray`. See a full list of available properties in `AbstractControl`.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the `FormArray`, or you can set the value programmatically later using the\n * `FormArray`'s {@link AbstractControl#setValue setValue} or\n * {@link AbstractControl#patchValue patchValue} methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the array, you can\n * subscribe to the `FormArray`'s {@link AbstractControl#valueChanges valueChanges} event.\n * You can also listen to its {@link AbstractControl#statusChanges statusChanges} event to be\n * notified when the validation status is re-calculated.\n *\n * **Add new controls**: You can add new controls to the `FormArray` dynamically by calling\n * its {@link FormArray#push push} method.\n * Ex: `this.form.get('cities').push(new FormControl());`\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n */\nexport declare class FormArrayName extends ControlContainer implements OnInit, OnDestroy {\n    name: string;\n    constructor(parent: ControlContainer, validators: any[], asyncValidators: any[]);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    readonly control: FormArray;\n    readonly formDirective: FormGroupDirective | null;\n    readonly path: string[];\n    readonly validator: ValidatorFn | null;\n    readonly asyncValidator: AsyncValidatorFn | null;\n    private _checkParentType;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/upgrade/upgrade.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/checkbox_value_accessor.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor } from './control_value_accessor';\nexport declare const CHECKBOX_VALUE_ACCESSOR: any;\n/**\n * The accessor for writing a value and listening to changes on a checkbox input element.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nexport declare class CheckboxControlValueAccessor implements ControlValueAccessor {\n    private _renderer;\n    private _elementRef;\n    onChange: (_: any) => void;\n    onTouched: () => void;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef);\n    writeValue(value: any): void;\n    registerOnChange(fn: (_: any) => {}): void;\n    registerOnTouched(fn: () => {}): void;\n    setDisabledState(isDisabled: boolean): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/reactive_directives/form_control_name.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { FormControl } from '../../model';\nimport { ControlContainer } from '../control_container';\nimport { ControlValueAccessor } from '../control_value_accessor';\nimport { NgControl } from '../ng_control';\nimport { AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn } from '../validators';\nexport declare const controlNameBinding: any;\n/**\n * @description\n *\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * This directive ensures that any values written to the `FormControl`\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * `FormControl` instance (view -> model).\n *\n * @usageNotes\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the `FormControl` instance you want to\n * link, and will look for a `FormControl` registered with that name in the\n * closest `FormGroup` or `FormArray` above it.\n *\n * **Access the control**: You can access the `FormControl` associated with\n * this directive by using the {@link AbstractControl#get get} method.\n * Ex: `this.form.get('first');`\n *\n * **Get value**: the `value` property is always synced and available on the `FormControl`.\n * See a full list of available properties in `AbstractControl`.\n *\n *  **Set value**: You can set an initial value for the control when instantiating the\n *  `FormControl`, or you can set it programmatically later using\n *  {@link AbstractControl#setValue setValue} or {@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and will be removed in Angular v7.\n *\n * Now deprecated:\n *\n * ```html\n * <form [formGroup]=\"form\">\n *   <input formControlName=\"first\" [(ngModel)]=\"value\">\n * </form>\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * This has been deprecated for a few reasons. First, developers have found this pattern\n * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's\n * an input/output property named `ngModel` on the reactive form directive that simply\n * approximates (some of) its behavior. Specifically, it allows getting/setting the value\n * and intercepting value events. However, some of `ngModel`'s other features - like\n * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,\n * which has understandably caused some confusion.\n *\n * In addition, this pattern mixes template-driven and reactive forms strategies, which\n * we generally don't recommend because it doesn't take advantage of the full benefits of\n * either strategy. Setting the value in the template violates the template-agnostic\n * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in\n * the class removes the convenience of defining forms in the template.\n *\n * To update your code before v7, you'll want to decide whether to stick with reactive form\n * directives (and get/set values using reactive forms patterns) or switch over to\n * template-driven directives.\n *\n * After (choice 1 - use reactive forms):\n *\n * ```html\n * <form [formGroup]=\"form\">\n *   <input formControlName=\"first\">\n * </form>\n * ```\n *\n * ```ts\n * this.form.get('first').setValue('some value');\n * ```\n *\n * After (choice 2 - use template-driven forms):\n *\n * ```html\n * <input [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * By default, when you use this pattern, you will see a deprecation warning once in dev\n * mode. You can choose to silence this warning by providing a config for\n * `ReactiveFormsModule` at import time:\n *\n * ```ts\n * imports: [\n *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'});\n * ]\n * ```\n *\n * Alternatively, you can choose to surface a separate warning for each instance of this\n * pattern with a config value of `\"always\"`. This may help to track down where in the code\n * the pattern is being used as the code is being updated.\n *\n * @ngModule ReactiveFormsModule\n */\nexport declare class FormControlName extends NgControl implements OnChanges, OnDestroy {\n    private _ngModelWarningConfig;\n    private _added;\n    readonly control: FormControl;\n    name: string;\n    isDisabled: boolean;\n    /** @deprecated as of v6 */\n    model: any;\n    /** @deprecated as of v6 */\n    update: EventEmitter<{}>;\n    constructor(parent: ControlContainer, validators: Array<Validator | ValidatorFn>, asyncValidators: Array<AsyncValidator | AsyncValidatorFn>, valueAccessors: ControlValueAccessor[], _ngModelWarningConfig: string | null);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    viewToModelUpdate(newValue: any): void;\n    readonly path: string[];\n    readonly formDirective: any;\n    readonly validator: ValidatorFn | null;\n    readonly asyncValidator: AsyncValidatorFn;\n    private _checkParentType;\n    private _setUpControl;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/animations.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { BaseAnimationRenderer as ɵangular_packages_platform_browser_animations_animations_g } from './src/animation_renderer';\nexport { BROWSER_ANIMATIONS_PROVIDERS as ɵangular_packages_platform_browser_animations_animations_e, BROWSER_NOOP_ANIMATIONS_PROVIDERS as ɵangular_packages_platform_browser_animations_animations_f, InjectableAnimationEngine as ɵangular_packages_platform_browser_animations_animations_a, instantiateDefaultStyleNormalizer as ɵangular_packages_platform_browser_animations_animations_c, instantiateRendererFactory as ɵangular_packages_platform_browser_animations_animations_d, instantiateSupportedAnimationDriver as ɵangular_packages_platform_browser_animations_animations_b } from './src/providers';\n"
  },
  {
    "path": "node_modules/@angular/router/upgrade.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":3,\"metadata\":{},\"exports\":[{\"from\":\"./upgrade/upgrade\"}],\"flatModuleIndexRedirect\":true,\"importAs\":\"@angular/router/upgrade\"}\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/validators.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OnChanges, SimpleChanges, StaticProvider } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AbstractControl } from '../model';\n/**\n * @description\n * Defines the map of errors returned from failed validation checks\n *\n * @experimental\n */\nexport declare type ValidationErrors = {\n    [key: string]: any;\n};\n/**\n * @description\n * An interface implemented by classes that perform synchronous validation.\n *\n * @usageNotes\n *\n * ### Provide a custom validator\n *\n * The following example implements the `Validator` interface to create a\n * validator directive with a custom error key.\n *\n * ```typescript\n * @Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors|null {\n *     return {'custom': true};\n *   }\n * }\n * ```\n */\nexport interface Validator {\n    /**\n     * @description\n     * Method that performs synchronous validation against the provided control.\n     *\n     * @param c The control to validate against.\n     *\n     * @returns A map of validation errors if validation fails,\n     * otherwise null.\n     */\n    validate(control: AbstractControl): ValidationErrors | null;\n    /**\n     * @description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param fn The callback function\n     */\n    registerOnValidatorChange?(fn: () => void): void;\n}\n/**\n * @description\n * An interface implemented by classes that perform asynchronous validation.\n *\n * @usageNotes\n *\n * ### Provide a custom async validator directive\n *\n * The following example implements the `AsyncValidator` interface to create an\n * async validator directive with a custom error key.\n *\n * ```typescript\n * import { of as observableOf } from 'rxjs';\n *\n * @Directive({\n *   selector: '[customAsyncValidator]',\n *   providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:\n * true}]\n * })\n * class CustomAsyncValidatorDirective implements AsyncValidator {\n *   validate(control: AbstractControl): Observable<ValidationErrors|null> {\n *     return observableOf({'custom': true});\n *   }\n * }\n * ```\n *\n * @experimental\n */\nexport interface AsyncValidator extends Validator {\n    /**\n     * @description\n     * Method that performs async validation against the provided control.\n     *\n     * @param c The control to validate against.\n     *\n     * @returns A promise or observable that resolves a map of validation errors\n     * if validation fails, otherwise null.\n     */\n    validate(control: AbstractControl): Promise<ValidationErrors | null> | Observable<ValidationErrors | null>;\n}\nexport declare const REQUIRED_VALIDATOR: StaticProvider;\nexport declare const CHECKBOX_REQUIRED_VALIDATOR: StaticProvider;\n/**\n * A Directive that adds the `required` validator to any controls marked with the\n * `required` attribute, via the `NG_VALIDATORS` binding.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nexport declare class RequiredValidator implements Validator {\n    private _required;\n    private _onChange;\n    required: boolean | string;\n    validate(control: AbstractControl): ValidationErrors | null;\n    registerOnValidatorChange(fn: () => void): void;\n}\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute, via the `NG_VALIDATORS` binding.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * @experimental\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nexport declare class CheckboxRequiredValidator extends RequiredValidator {\n    validate(control: AbstractControl): ValidationErrors | null;\n}\n/**\n * Provider which adds `EmailValidator` to `NG_VALIDATORS`.\n */\nexport declare const EMAIL_VALIDATOR: any;\n/**\n * A Directive that adds the `email` validator to controls marked with the\n * `email` attribute, via the `NG_VALIDATORS` binding.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * @experimental\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nexport declare class EmailValidator implements Validator {\n    private _enabled;\n    private _onChange;\n    email: boolean | string;\n    validate(control: AbstractControl): ValidationErrors | null;\n    registerOnValidatorChange(fn: () => void): void;\n}\nexport interface ValidatorFn {\n    (control: AbstractControl): ValidationErrors | null;\n}\nexport interface AsyncValidatorFn {\n    (control: AbstractControl): Promise<ValidationErrors | null> | Observable<ValidationErrors | null>;\n}\n/**\n * Provider which adds `MinLengthValidator` to `NG_VALIDATORS`.\n *\n * @usageNotes\n * ### Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='min'}\n */\nexport declare const MIN_LENGTH_VALIDATOR: any;\n/**\n * A directive which installs the `MinLengthValidator` for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nexport declare class MinLengthValidator implements Validator, OnChanges {\n    private _validator;\n    private _onChange;\n    minlength: string;\n    ngOnChanges(changes: SimpleChanges): void;\n    validate(control: AbstractControl): ValidationErrors | null;\n    registerOnValidatorChange(fn: () => void): void;\n    private _createValidator;\n}\n/**\n * Provider which adds `MaxLengthValidator` to `NG_VALIDATORS`.\n *\n * @usageNotes\n * ### Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='max'}\n */\nexport declare const MAX_LENGTH_VALIDATOR: any;\n/**\n * A directive which installs the `MaxLengthValidator` for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `maxlength` attribute.\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nexport declare class MaxLengthValidator implements Validator, OnChanges {\n    private _validator;\n    private _onChange;\n    maxlength: string;\n    ngOnChanges(changes: SimpleChanges): void;\n    validate(control: AbstractControl): ValidationErrors | null;\n    registerOnValidatorChange(fn: () => void): void;\n    private _createValidator;\n}\nexport declare const PATTERN_VALIDATOR: any;\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the `NG_VALIDATORS` binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nexport declare class PatternValidator implements Validator, OnChanges {\n    private _validator;\n    private _onChange;\n    pattern: string | RegExp;\n    ngOnChanges(changes: SimpleChanges): void;\n    validate(control: AbstractControl): ValidationErrors | null;\n    registerOnValidatorChange(fn: () => void): void;\n    private _createValidator;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/upgrade/upgrade.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"RouterUpgradeInitializer\":{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"APP_BOOTSTRAP_LISTENER\",\"line\":37,\"character\":11},\"multi\":true,\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"locationSyncBootstrapListener\"},\"deps\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/upgrade/static\",\"name\":\"UpgradeModule\",\"line\":40,\"character\":9}]},\"locationSyncBootstrapListener\":{\"__symbolic\":\"function\",\"parameters\":[\"ngUpgrade\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":47,\"character\":9,\"module\":\"./src/upgrade\"}},\"setUpLocationSync\":{\"__symbolic\":\"function\"}},\"origins\":{\"RouterUpgradeInitializer\":\"./src/upgrade\",\"locationSyncBootstrapListener\":\"./src/upgrade\",\"setUpLocationSync\":\"./src/upgrade\"},\"importAs\":\"@angular/router/upgrade\"}"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/testing/testing.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"platformBrowserDynamicTesting\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"createPlatformFactory\",\"line\":18,\"character\":45},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ɵplatformCoreDynamicTesting\"},\"browserDynamicTesting\",{\"__symbolic\":\"reference\",\"module\":\"@angular/platform-browser-dynamic\",\"name\":\"ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS\",\"line\":20,\"character\":4}]},\"BrowserDynamicTestingModule\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModule\",\"line\":27,\"character\":1},\"arguments\":[{\"exports\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/platform-browser/testing\",\"name\":\"BrowserTestingModule\",\"line\":28,\"character\":12}],\"providers\":[{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core/testing\",\"name\":\"TestComponentRenderer\",\"line\":30,\"character\":14},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ɵDOMTestComponentRenderer\"}}]}]}],\"members\":{}},\"ɵDOMTestComponentRenderer\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core/testing\",\"name\":\"TestComponentRenderer\",\"line\":16,\"character\":46},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":15,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":17,\"character\":15},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/platform-browser\",\"name\":\"DOCUMENT\",\"line\":17,\"character\":22}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}],\"insertRootElement\":[{\"__symbolic\":\"method\"}]}},\"ɵplatformCoreDynamicTesting\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"createPlatformFactory\",\"line\":20,\"character\":4},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/platform-browser-dynamic\",\"name\":\"ɵplatformCoreDynamic\",\"line\":20,\"character\":26},\"coreDynamicTesting\",[{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"COMPILER_OPTIONS\",\"line\":21,\"character\":16},\"useValue\":{\"providers\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_dynamic_testing_testing_a\"}},\"multi\":true},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core/testing\",\"name\":\"ɵTestingCompilerFactory\",\"line\":22,\"character\":17},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_dynamic_testing_testing_b\"},\"deps\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injector\",\"line\":24,\"character\":15},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"CompilerFactory\",\"line\":24,\"character\":25}]}]]},\"ɵangular_packages_platform_browser_dynamic_testing_testing_a\":[{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler/testing\",\"name\":\"MockPipeResolver\",\"line\":17,\"character\":12},\"deps\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"CompileReflector\",\"line\":17,\"character\":37}]},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"PipeResolver\",\"line\":18,\"character\":12},\"useExisting\":{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler/testing\",\"name\":\"MockPipeResolver\",\"line\":18,\"character\":39}},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler/testing\",\"name\":\"MockDirectiveResolver\",\"line\":19,\"character\":12},\"deps\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"CompileReflector\",\"line\":19,\"character\":42}]},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"DirectiveResolver\",\"line\":20,\"character\":12},\"useExisting\":{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler/testing\",\"name\":\"MockDirectiveResolver\",\"line\":20,\"character\":44}},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler/testing\",\"name\":\"MockNgModuleResolver\",\"line\":21,\"character\":12},\"deps\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"CompileReflector\",\"line\":21,\"character\":41}]},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"NgModuleResolver\",\"line\":22,\"character\":12},\"useExisting\":{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler/testing\",\"name\":\"MockNgModuleResolver\",\"line\":22,\"character\":43}}],\"ɵangular_packages_platform_browser_dynamic_testing_testing_b\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injector\",\"line\":26,\"character\":33},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"CompilerFactory\",\"line\":26,\"character\":69}]}],\"createTestingCompiler\":[{\"__symbolic\":\"method\"}]}}},\"origins\":{\"platformBrowserDynamicTesting\":\"./src/testing\",\"BrowserDynamicTestingModule\":\"./src/testing\",\"ɵDOMTestComponentRenderer\":\"./src/dom_test_component_renderer\",\"ɵplatformCoreDynamicTesting\":\"./src/platform_core_dynamic_testing\",\"ɵangular_packages_platform_browser_dynamic_testing_testing_a\":\"./src/compiler_factory\",\"ɵangular_packages_platform_browser_dynamic_testing_testing_b\":\"./src/compiler_factory\"},\"importAs\":\"@angular/platform-browser-dynamic/testing\"}"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/reactive_directives/form_group_directive.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { FormArray, FormControl, FormGroup } from '../../model';\nimport { ControlContainer } from '../control_container';\nimport { Form } from '../form_interface';\nimport { FormControlName } from './form_control_name';\nimport { FormArrayName, FormGroupName } from './form_group_name';\nexport declare const formDirectiveProvider: any;\n/**\n * @description\n *\n * Binds an existing `FormGroup` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @usageNotes\n * **Set value**: You can set the form's initial value when instantiating the\n * `FormGroup`, or you can set it programmatically later using the `FormGroup`'s\n * {@link AbstractControl#setValue setValue} or {@link AbstractControl#patchValue patchValue}\n * methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n * to the `FormGroup`'s {@link AbstractControl#valueChanges valueChanges} event.  You can also\n * listen to its {@link AbstractControl#statusChanges statusChanges} event to be notified when the\n * validation status is re-calculated.\n *\n * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n */\nexport declare class FormGroupDirective extends ControlContainer implements Form, OnChanges {\n    private _validators;\n    private _asyncValidators;\n    readonly submitted: boolean;\n    private _oldForm;\n    directives: FormControlName[];\n    form: FormGroup;\n    ngSubmit: EventEmitter<{}>;\n    constructor(_validators: any[], _asyncValidators: any[]);\n    ngOnChanges(changes: SimpleChanges): void;\n    readonly formDirective: Form;\n    readonly control: FormGroup;\n    readonly path: string[];\n    addControl(dir: FormControlName): FormControl;\n    getControl(dir: FormControlName): FormControl;\n    removeControl(dir: FormControlName): void;\n    addFormGroup(dir: FormGroupName): void;\n    removeFormGroup(dir: FormGroupName): void;\n    getFormGroup(dir: FormGroupName): FormGroup;\n    addFormArray(dir: FormArrayName): void;\n    removeFormArray(dir: FormArrayName): void;\n    getFormArray(dir: FormArrayName): FormArray;\n    updateModel(dir: FormControlName, value: any): void;\n    onSubmit($event: Event): boolean;\n    onReset(): void;\n    resetForm(value?: any): void;\n    private _updateRegistrations;\n    private _updateValidators;\n    private _checkFormPresent;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/platform-browser.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { BROWSER_MODULE_PROVIDERS as ɵangular_packages_platform_browser_platform_browser_c, _document as ɵangular_packages_platform_browser_platform_browser_b, errorHandler as ɵangular_packages_platform_browser_platform_browser_a } from './src/browser';\nexport { GenericBrowserDomAdapter as ɵangular_packages_platform_browser_platform_browser_k } from './src/browser/generic_browser_adapter';\nexport { createMeta as ɵangular_packages_platform_browser_platform_browser_d } from './src/browser/meta';\nexport { SERVER_TRANSITION_PROVIDERS as ɵangular_packages_platform_browser_platform_browser_i, appInitializerFactory as ɵangular_packages_platform_browser_platform_browser_h } from './src/browser/server-transition';\nexport { createTitle as ɵangular_packages_platform_browser_platform_browser_e } from './src/browser/title';\nexport { initTransferState as ɵangular_packages_platform_browser_platform_browser_f } from './src/browser/transfer_state';\nexport { _createNgProbe as ɵangular_packages_platform_browser_platform_browser_j } from './src/dom/debug/ng_probe';\nexport { EventManagerPlugin as ɵangular_packages_platform_browser_platform_browser_g } from './src/dom/events/event_manager';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/animations.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"ɵangular_packages_platform_browser_animations_animations_a\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"ɵAnimationEngine\",\"line\":18,\"character\":47},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":17,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":20,\"character\":7},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"DOCUMENT\",\"line\":20,\"character\":14}]}],null,null],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"AnimationDriver\",\"line\":20,\"character\":42},{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"ɵAnimationStyleNormalizer\",\"line\":20,\"character\":71}]}]}},\"ɵangular_packages_platform_browser_animations_animations_b\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"ɵsupportsWebAnimations\",\"line\":26,\"character\":9}},\"thenExpression\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"ɵWebAnimationsDriver\",\"line\":26,\"character\":39}},\"elseExpression\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"ɵCssKeyframesDriver\",\"line\":26,\"character\":67}}}},\"ɵangular_packages_platform_browser_animations_animations_c\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"ɵWebAnimationsStyleNormalizer\",\"line\":30,\"character\":13}}},\"ɵangular_packages_platform_browser_animations_animations_d\":{\"__symbolic\":\"function\",\"parameters\":[\"renderer\",\"engine\",\"zone\"],\"value\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵAnimationRendererFactory\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"renderer\"},{\"__symbolic\":\"reference\",\"name\":\"engine\"},{\"__symbolic\":\"reference\",\"name\":\"zone\"}]}},\"ɵangular_packages_platform_browser_animations_animations_e\":[{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"AnimationDriver\",\"line\":20,\"character\":42},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_animations_animations_b\"}},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ANIMATION_MODULE_TYPE\"},\"useValue\":\"BrowserAnimations\"},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/animations\",\"name\":\"AnimationBuilder\",\"line\":45,\"character\":12},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ɵBrowserAnimationBuilder\"}},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"ɵAnimationStyleNormalizer\",\"line\":20,\"character\":71},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_animations_animations_c\"}},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"ɵAnimationEngine\",\"line\":47,\"character\":12},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_animations_animations_a\"}},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"RendererFactory2\",\"line\":48,\"character\":13},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_animations_animations_d\"},\"deps\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/platform-browser\",\"name\":\"ɵDomRendererFactory2\",\"line\":50,\"character\":11},{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"ɵAnimationEngine\",\"line\":50,\"character\":32},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgZone\",\"line\":50,\"character\":49}]}],\"ɵangular_packages_platform_browser_animations_animations_f\":[{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"AnimationDriver\",\"line\":20,\"character\":42},\"useClass\":{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"ɵNoopAnimationDriver\",\"line\":68,\"character\":39}},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ANIMATION_MODULE_TYPE\"},\"useValue\":\"NoopAnimations\"},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/animations\",\"name\":\"AnimationBuilder\",\"line\":45,\"character\":12},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ɵBrowserAnimationBuilder\"}},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"ɵAnimationStyleNormalizer\",\"line\":20,\"character\":71},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_animations_animations_c\"}},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"ɵAnimationEngine\",\"line\":47,\"character\":12},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_animations_animations_a\"}},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"RendererFactory2\",\"line\":48,\"character\":13},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_animations_animations_d\"},\"deps\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/platform-browser\",\"name\":\"ɵDomRendererFactory2\",\"line\":50,\"character\":11},{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"ɵAnimationEngine\",\"line\":50,\"character\":32},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgZone\",\"line\":50,\"character\":49}]}],\"ɵangular_packages_platform_browser_animations_animations_g\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Renderer2\",\"line\":119,\"character\":54},{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"ɵAnimationEngine\",\"line\":24,\"character\":58}]}],\"destroy\":[{\"__symbolic\":\"method\"}],\"createElement\":[{\"__symbolic\":\"method\"}],\"createComment\":[{\"__symbolic\":\"method\"}],\"createText\":[{\"__symbolic\":\"method\"}],\"appendChild\":[{\"__symbolic\":\"method\"}],\"insertBefore\":[{\"__symbolic\":\"method\"}],\"removeChild\":[{\"__symbolic\":\"method\"}],\"selectRootElement\":[{\"__symbolic\":\"method\"}],\"parentNode\":[{\"__symbolic\":\"method\"}],\"nextSibling\":[{\"__symbolic\":\"method\"}],\"setAttribute\":[{\"__symbolic\":\"method\"}],\"removeAttribute\":[{\"__symbolic\":\"method\"}],\"addClass\":[{\"__symbolic\":\"method\"}],\"removeClass\":[{\"__symbolic\":\"method\"}],\"setStyle\":[{\"__symbolic\":\"method\"}],\"removeStyle\":[{\"__symbolic\":\"method\"}],\"setProperty\":[{\"__symbolic\":\"method\"}],\"setValue\":[{\"__symbolic\":\"method\"}],\"listen\":[{\"__symbolic\":\"method\"}],\"disableAnimations\":[{\"__symbolic\":\"method\"}]}},\"BrowserAnimationsModule\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModule\",\"line\":17,\"character\":1},\"arguments\":[{\"exports\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/platform-browser\",\"name\":\"BrowserModule\",\"line\":18,\"character\":12}],\"providers\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_animations_animations_e\"}}]}],\"members\":{}},\"NoopAnimationsModule\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModule\",\"line\":28,\"character\":1},\"arguments\":[{\"exports\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/platform-browser\",\"name\":\"BrowserModule\",\"line\":29,\"character\":12}],\"providers\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_animations_animations_f\"}}]}],\"members\":{}},\"ANIMATION_MODULE_TYPE\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":42,\"character\":8},\"arguments\":[\"AnimationModuleType\"]},\"ɵBrowserAnimationBuilder\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"module\":\"@angular/animations\",\"name\":\"AnimationBuilder\",\"line\":14,\"character\":45},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":13,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[null,[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":18,\"character\":47},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/platform-browser\",\"name\":\"DOCUMENT\",\"line\":18,\"character\":54}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"RendererFactory2\",\"line\":18,\"character\":28},{\"__symbolic\":\"reference\",\"name\":\"any\"}]}],\"build\":[{\"__symbolic\":\"method\"}]}},\"ɵBrowserAnimationFactory\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"module\":\"@angular/animations\",\"name\":\"AnimationFactory\",\"line\":38,\"character\":45},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"ɵAnimationRenderer\"}]}],\"create\":[{\"__symbolic\":\"method\"}]}},\"ɵAnimationRenderer\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_animations_animations_g\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ɵAnimationRendererFactory\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Renderer2\",\"line\":119,\"character\":54},{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"ɵAnimationEngine\",\"line\":24,\"character\":58}]}],\"setProperty\":[{\"__symbolic\":\"method\"}],\"listen\":[{\"__symbolic\":\"method\"}]}},\"ɵAnimationRendererFactory\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":14,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"RendererFactory2\",\"line\":24,\"character\":24},{\"__symbolic\":\"reference\",\"module\":\"@angular/animations/browser\",\"name\":\"ɵAnimationEngine\",\"line\":24,\"character\":58},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgZone\",\"line\":24,\"character\":90}]}],\"createRenderer\":[{\"__symbolic\":\"method\"}],\"begin\":[{\"__symbolic\":\"method\"}],\"_scheduleCountTask\":[{\"__symbolic\":\"method\"}],\"scheduleListenerCallback\":[{\"__symbolic\":\"method\"}],\"end\":[{\"__symbolic\":\"method\"}],\"whenRenderingDone\":[{\"__symbolic\":\"method\"}]}}},\"origins\":{\"ɵangular_packages_platform_browser_animations_animations_a\":\"./src/providers\",\"ɵangular_packages_platform_browser_animations_animations_b\":\"./src/providers\",\"ɵangular_packages_platform_browser_animations_animations_c\":\"./src/providers\",\"ɵangular_packages_platform_browser_animations_animations_d\":\"./src/providers\",\"ɵangular_packages_platform_browser_animations_animations_e\":\"./src/providers\",\"ɵangular_packages_platform_browser_animations_animations_f\":\"./src/providers\",\"ɵangular_packages_platform_browser_animations_animations_g\":\"./src/animation_renderer\",\"BrowserAnimationsModule\":\"./src/module\",\"NoopAnimationsModule\":\"./src/module\",\"ANIMATION_MODULE_TYPE\":\"./src/providers\",\"ɵBrowserAnimationBuilder\":\"./src/animation_builder\",\"ɵBrowserAnimationFactory\":\"./src/animation_builder\",\"ɵAnimationRenderer\":\"./src/animation_renderer\",\"ɵAnimationRendererFactory\":\"./src/animation_renderer\"},\"importAs\":\"@angular/platform-browser/animations\"}"
  },
  {
    "path": "node_modules/@angular/router/testing.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":3,\"metadata\":{},\"exports\":[{\"from\":\"./testing/testing\"}],\"flatModuleIndexRedirect\":true,\"importAs\":\"@angular/router/testing\"}\n"
  },
  {
    "path": "node_modules/@angular/router/testing/testing.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/range_value_accessor.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, Renderer2, StaticProvider } from '@angular/core';\nimport { ControlValueAccessor } from './control_value_accessor';\nexport declare const RANGE_VALUE_ACCESSOR: StaticProvider;\n/**\n * The accessor for writing a range value and listening to changes that is used by the\n * `NgModel`, `FormControlDirective`, and `FormControlName` directives.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"range\" [(ngModel)]=\"age\" >\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nexport declare class RangeValueAccessor implements ControlValueAccessor {\n    private _renderer;\n    private _elementRef;\n    onChange: (_: any) => void;\n    onTouched: () => void;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef);\n    writeValue(value: any): void;\n    registerOnChange(fn: (_: number | null) => void): void;\n    registerOnTouched(fn: () => void): void;\n    setDisabledState(isDisabled: boolean): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/testing.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":3,\"metadata\":{},\"exports\":[{\"from\":\"./testing/testing\"}],\"flatModuleIndexRedirect\":true,\"importAs\":\"@angular/platform-browser-dynamic/testing\"}\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/ng_model.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { FormControl, FormHooks } from '../model';\nimport { ControlContainer } from './control_container';\nimport { ControlValueAccessor } from './control_value_accessor';\nimport { NgControl } from './ng_control';\nimport { AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn } from './validators';\nexport declare const formControlBinding: any;\n/**\n * @description\n *\n * Creates a `FormControl` instance from a domain model and binds it\n * to a form control element.\n *\n * The `FormControl` instance will track the value, user interaction, and\n * validation status of the control and keep the view synced with the model. If used\n * within a parent form, the directive will also register itself with the form as a child\n * control.\n *\n * This directive can be used by itself or as part of a larger form. All you need is the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n * the domain model in your class as well.\n *\n * If you wish to inspect the properties of the associated `FormControl` (like\n * validity state), you can also export the directive into a local template variable using\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n * will fall through to the control anyway, so you can access them directly. You can see a\n * full list of properties directly available in `AbstractControlDirective`.\n *\n * The following is an example of a simple standalone control using `ngModel`:\n *\n * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * It's worth noting that in the context of a parent form, you often can skip one-way or\n * two-way binding because the parent form will sync the value for you. You can access\n * its properties by exporting it into a local template variable using `ngForm` (ex:\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * Take a look at an example of using `ngModel` within a form:\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * To see `ngModel` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * @ngModule FormsModule\n */\nexport declare class NgModel extends NgControl implements OnChanges, OnDestroy {\n    readonly control: FormControl;\n    viewModel: any;\n    name: string;\n    isDisabled: boolean;\n    model: any;\n    /**\n     * Options object for this `ngModel` instance. You can configure the following properties:\n     *\n     * **name**: An alternative to setting the name attribute on the form control element.\n     * Sometimes, especially with custom form components, the name attribute might be used\n     * as an `@Input` property for a different purpose. In cases like these, you can configure\n     * the `ngModel` name through this option.\n     *\n     * ```html\n     * <form>\n     *   <my-person-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n     *   </my-person-control>\n     * </form>\n     * <!-- form value: {user: ''} -->\n     * ```\n     *\n     * **standalone**: Defaults to false. If this is set to true, the `ngModel` will not\n     * register itself with its parent form, and will act as if it's not in the form. This\n     * can be handy if you have form meta-controls, a.k.a. form elements nested in\n     * the `<form>` tag that control the display of the form, but don't contain form data.\n     *\n     * ```html\n     * <form>\n     *   <input name=\"login\" ngModel placeholder=\"Login\">\n     *   <input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n     * </form>\n     * <!-- form value: {login: ''} -->\n     * ```\n     *\n     * **updateOn**: Defaults to `'change'`. Defines the event upon which the form control\n     * value and validity will update. Also accepts `'blur'` and `'submit'`.\n     *\n     * ```html\n     * <input [(ngModel)]=\"firstName\" [ngModelOptions]=\"{updateOn: 'blur'}\">\n     * ```\n     *\n     */\n    options: {\n        name?: string;\n        standalone?: boolean;\n        updateOn?: FormHooks;\n    };\n    update: EventEmitter<{}>;\n    constructor(parent: ControlContainer, validators: Array<Validator | ValidatorFn>, asyncValidators: Array<AsyncValidator | AsyncValidatorFn>, valueAccessors: ControlValueAccessor[]);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    readonly path: string[];\n    readonly formDirective: any;\n    readonly validator: ValidatorFn | null;\n    readonly asyncValidator: AsyncValidatorFn | null;\n    viewToModelUpdate(newValue: any): void;\n    private _setUpControl;\n    private _setUpdateStrategy;\n    private _isStandalone;\n    private _setUpStandalone;\n    private _checkForErrors;\n    private _checkParentType;\n    private _checkName;\n    private _updateValue;\n    private _updateDisabled;\n}\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/ng_no_validate_directive.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * @experimental\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n */\nexport declare class NgNoValidate {\n}\n"
  },
  {
    "path": "node_modules/@angular/router/router.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { ROUTER_FORROOT_GUARD as ɵangular_packages_router_router_a, RouterInitializer as ɵangular_packages_router_router_h, createRouterScroller as ɵangular_packages_router_router_c, getAppInitializer as ɵangular_packages_router_router_i, getBootstrapListener as ɵangular_packages_router_router_j, provideForRootGuard as ɵangular_packages_router_router_e, provideLocationStrategy as ɵangular_packages_router_router_d, provideRouterInitializer as ɵangular_packages_router_router_k, rootRoute as ɵangular_packages_router_router_g, routerNgProbeToken as ɵangular_packages_router_router_b, setupRouter as ɵangular_packages_router_router_f } from './src/router_module';\nexport { RouterScroller as ɵangular_packages_router_router_n } from './src/router_scroller';\nexport { Tree as ɵangular_packages_router_router_l, TreeNode as ɵangular_packages_router_router_m } from './src/utils/tree';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/src/resource_loader/resource_loader_cache.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ResourceLoader } from '@angular/compiler';\n/**\n * An implementation of ResourceLoader that uses a template cache to avoid doing an actual\n * ResourceLoader.\n *\n * The template cache needs to be built and loaded into window.$templateCache\n * via a separate mechanism.\n */\nexport declare class CachedResourceLoader extends ResourceLoader {\n    private _cache;\n    constructor();\n    get(url: string): Promise<string>;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/testing/testing.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"platformBrowserTesting\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"createPlatformFactory\",\"line\":25,\"character\":4},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"platformCore\",\"line\":25,\"character\":26},\"browserTesting\",{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":16,\"character\":6,\"context\":{\"name\":\"_TEST_BROWSER_PLATFORM_PROVIDERS\"},\"module\":\"./src/browser\"}]},\"BrowserTestingModule\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModule\",\"line\":32,\"character\":1},\"arguments\":[{\"exports\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/platform-browser\",\"name\":\"BrowserModule\",\"line\":33,\"character\":12}],\"providers\":[{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"APP_ID\",\"line\":35,\"character\":14},\"useValue\":\"a\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/platform-browser\",\"name\":\"ɵELEMENT_PROBE_PROVIDERS\",\"line\":36,\"character\":4},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgZone\",\"line\":37,\"character\":14},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_platform_browser_testing_testing_a\"}}]}]}],\"members\":{}},\"ɵangular_packages_platform_browser_testing_testing_a\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgZone\",\"line\":157,\"character\":13},\"arguments\":[{\"enableLongStackTrace\":true}]}}},\"origins\":{\"platformBrowserTesting\":\"./src/browser\",\"BrowserTestingModule\":\"./src/browser\",\"ɵangular_packages_platform_browser_testing_testing_a\":\"./src/browser_util\"},\"importAs\":\"@angular/platform-browser/testing\"}"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/testing/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/default_value_accessor.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, InjectionToken, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor } from './control_value_accessor';\nexport declare const DEFAULT_VALUE_ACCESSOR: any;\n/**\n * Turn this mode on if you want form directives to buffer IME input until compositionend\n * @experimental\n */\nexport declare const COMPOSITION_BUFFER_MODE: InjectionToken<boolean>;\n/**\n * The default accessor for writing a value and listening to changes that is used by the\n * `NgModel`, `FormControlDirective`, and `FormControlName` directives.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"text\" name=\"searchQuery\" ngModel>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nexport declare class DefaultValueAccessor implements ControlValueAccessor {\n    private _renderer;\n    private _elementRef;\n    private _compositionMode;\n    onChange: (_: any) => void;\n    onTouched: () => void;\n    /** Whether the user is creating a composition string (IME events). */\n    private _composing;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef, _compositionMode: boolean);\n    writeValue(value: any): void;\n    registerOnChange(fn: (_: any) => void): void;\n    registerOnTouched(fn: () => void): void;\n    setDisabledState(isDisabled: boolean): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/title.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Factory to create Title service.\n */\nexport declare function createTitle(): Title;\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @experimental\n */\nexport declare class Title {\n    private _doc;\n    constructor(_doc: any);\n    /**\n     * Get the title of the current HTML document.\n     */\n    getTitle(): string;\n    /**\n     * Set the title of the current HTML document.\n     * @param newTitle\n     */\n    setTitle(newTitle: string): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/testing/src/compiler_factory.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MockDirectiveResolver, MockNgModuleResolver, MockPipeResolver } from '@angular/compiler/testing';\nimport { CompilerFactory, CompilerOptions, Component, ComponentFactory, Directive, Injector, ModuleWithComponentFactories, NgModule, NgModuleFactory, Pipe, StaticProvider, Type } from '@angular/core';\nimport { MetadataOverride, ɵTestingCompiler as TestingCompiler, ɵTestingCompilerFactory as TestingCompilerFactory } from '@angular/core/testing';\nimport { ɵCompilerImpl as CompilerImpl } from '@angular/platform-browser-dynamic';\nexport declare const COMPILER_PROVIDERS: StaticProvider[];\nexport declare class TestingCompilerFactoryImpl implements TestingCompilerFactory {\n    private _injector;\n    private _compilerFactory;\n    constructor(_injector: Injector, _compilerFactory: CompilerFactory);\n    createTestingCompiler(options: CompilerOptions[]): TestingCompiler;\n}\nexport declare class TestingCompilerImpl implements TestingCompiler {\n    private _compiler;\n    private _directiveResolver;\n    private _pipeResolver;\n    private _moduleResolver;\n    private _overrider;\n    constructor(_compiler: CompilerImpl, _directiveResolver: MockDirectiveResolver, _pipeResolver: MockPipeResolver, _moduleResolver: MockNgModuleResolver);\n    readonly injector: Injector;\n    compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T>;\n    compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>>;\n    compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T>;\n    compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>): Promise<ModuleWithComponentFactories<T>>;\n    getComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n    checkOverrideAllowed(type: Type<any>): void;\n    overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void;\n    overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void;\n    overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void;\n    overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void;\n    loadAotSummaries(summaries: () => any[]): void;\n    clearCache(): void;\n    clearCacheFor(type: Type<any>): void;\n    getComponentFromError(error: Error): any;\n    getModuleId(moduleType: Type<any>): string | undefined;\n}\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/ng_form_selector_warning.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * Token to provide to turn off the warning when using 'ngForm' deprecated selector.\n */\nexport declare const NG_FORM_SELECTOR_WARNING: InjectionToken<{}>;\n/**\n * This directive is solely used to display warnings when the deprecated `ngForm` selector is used.\n *\n * @deprecated in Angular v6 and will be removed in Angular v9.\n * @ngModule FormsModule\n */\nexport declare class NgFormSelectorWarning {\n    constructor(ngFormWarning: string | null);\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/ng_control.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AbstractControlDirective } from './abstract_control_directive';\nimport { ControlValueAccessor } from './control_value_accessor';\nimport { AsyncValidatorFn, ValidatorFn } from './validators';\n/**\n * @description\n * A base class that all control `FormControl`-based directives extend. It binds a `FormControl`\n * object to a DOM element.\n */\nexport declare abstract class NgControl extends AbstractControlDirective {\n    /**\n     * @description\n     * The name for the control\n     */\n    name: string | null;\n    /**\n     * @description\n     * The value accessor for the control\n     */\n    valueAccessor: ControlValueAccessor | null;\n    /**\n     * @description\n     * The registered synchronous validator function for the control\n     *\n     * @throws An exception that this method is not implemented\n     */\n    readonly validator: ValidatorFn | null;\n    /**\n     * @description\n     * The registered async validator function for the control\n     *\n     * @throws An exception that this method is not implemented\n     */\n    readonly asyncValidator: AsyncValidatorFn | null;\n    /**\n     * @description\n     * The callback method to update the model from the view when requested\n     *\n     * @param newValue The new value for the view\n     */\n    abstract viewToModelUpdate(newValue: any): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/form_interface.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FormControl, FormGroup } from '../model';\nimport { AbstractFormGroupDirective } from './abstract_form_group_directive';\nimport { NgControl } from './ng_control';\n/**\n * @description\n * An interface implemented by `FormGroupDirective` and `NgForm` directives.\n *\n * Only used by the `ReactiveFormsModule` and `FormsModule`.\n */\nexport interface Form {\n    /**\n     * @description\n     * Add a control to this form.\n     *\n     * @param dir The control directive to add to the form.\n     */\n    addControl(dir: NgControl): void;\n    /**\n     * @description\n     * Remove a control from this form.\n     *\n     * @param dir: The control directive to remove from the form.\n     */\n    removeControl(dir: NgControl): void;\n    /**\n     * @description\n     * The control directive from which to get the `FormControl`.\n     *\n     * @param dir: The control directive.\n     */\n    getControl(dir: NgControl): FormControl;\n    /**\n     * @description\n     * Add a group of controls to this form.\n     *\n     * @param dir: The control group directive to add.\n     */\n    addFormGroup(dir: AbstractFormGroupDirective): void;\n    /**\n     * @description\n     * Remove a group of controls to this form.\n     *\n     * @param dir: The control group directive to remove.\n     */\n    removeFormGroup(dir: AbstractFormGroupDirective): void;\n    /**\n     * @description\n     * The `FormGroup` associated with a particular `AbstractFormGroupDirective`.\n     *\n     * @param dir: The form group directive from which to get the `FormGroup`.\n     */\n    getFormGroup(dir: AbstractFormGroupDirective): FormGroup;\n    /**\n     * @description\n     * Update the model for a particular control with a new value.\n     *\n     * @param dir: The control directive to update.\n     * @param value: The new value for the control.\n     */\n    updateModel(dir: NgControl, value: any): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/testing.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":3,\"metadata\":{},\"exports\":[{\"from\":\"./testing/testing\"}],\"flatModuleIndexRedirect\":true,\"importAs\":\"@angular/platform-browser/testing\"}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/testing/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/testing/src/browser_util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgZone } from '@angular/core';\nexport declare let browserDetection: BrowserDetection;\nexport declare class BrowserDetection {\n    private _overrideUa;\n    private readonly _ua;\n    static setup(): void;\n    constructor(ua: string | null);\n    readonly isFirefox: boolean;\n    readonly isAndroid: boolean;\n    readonly isEdge: boolean;\n    readonly isIE: boolean;\n    readonly isWebkit: boolean;\n    readonly isIOS7: boolean;\n    readonly isSlow: boolean;\n    readonly supportsNativeIntlApi: boolean;\n    readonly isChromeDesktop: boolean;\n    readonly isOldChrome: boolean;\n    readonly supportsCustomElements: boolean;\n    readonly supportsDeprecatedCustomCustomElementsV0: boolean;\n    readonly supportsShadowDom: boolean;\n    readonly supportsDeprecatedShadowDomV0: boolean;\n}\nexport declare function dispatchEvent(element: any, eventType: any): void;\nexport declare function el(html: string): HTMLElement;\nexport declare function normalizeCSS(css: string): string;\nexport declare function stringifyElement(el: any /** TODO #9100 */): string;\nexport declare function createNgZone(): NgZone;\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/transfer_state.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare function escapeHtml(text: string): string;\nexport declare function unescapeHtml(text: string): string;\n/**\n * A type-safe key to use with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @experimental\n */\nexport declare type StateKey<T> = string & {\n    __not_a_string: never;\n};\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @experimental\n */\nexport declare function makeStateKey<T = void>(key: string): StateKey<T>;\n/**\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * `TransferState` will be available as an injectable token. To use it import\n * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialzied in a\n * non-lossy manner.\n *\n * @experimental\n */\nexport declare class TransferState {\n    private store;\n    private onSerializeCallbacks;\n    /**\n     * Get the value corresponding to a key. Return `defaultValue` if key is not found.\n     */\n    get<T>(key: StateKey<T>, defaultValue: T): T;\n    /**\n     * Set the value corresponding to a key.\n     */\n    set<T>(key: StateKey<T>, value: T): void;\n    /**\n     * Remove a key from the store.\n     */\n    remove<T>(key: StateKey<T>): void;\n    /**\n     * Test whether a key exists in the store.\n     */\n    hasKey<T>(key: StateKey<T>): boolean;\n    /**\n     * Register a callback to provide the value for a key when `toJson` is called.\n     */\n    onSerialize<T>(key: StateKey<T>, callback: () => T): void;\n    /**\n     * Serialize the current state of the store to JSON.\n     */\n    toJson(): string;\n}\nexport declare function initTransferState(doc: Document, appId: string): TransferState;\n/**\n * NgModule to install on the client side while using the `TransferState` to transfer state from\n * server to client.\n *\n * @experimental\n */\nexport declare class BrowserTransferStateModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/server-transition.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Injector, StaticProvider } from '@angular/core';\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nexport declare const TRANSITION_ID: InjectionToken<{}>;\nexport declare function appInitializerFactory(transitionId: string, document: any, injector: Injector): () => void;\nexport declare const SERVER_TRANSITION_PROVIDERS: StaticProvider[];\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/src/animation_renderer.d.ts",
    "content": "import { ɵAnimationEngine as AnimationEngine } from '@angular/animations/browser';\nimport { NgZone, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2 } from '@angular/core';\nexport declare class AnimationRendererFactory implements RendererFactory2 {\n    private delegate;\n    private engine;\n    private _zone;\n    private _currentId;\n    private _microtaskId;\n    private _animationCallbacksBuffer;\n    private _rendererCache;\n    private _cdRecurDepth;\n    private promise;\n    constructor(delegate: RendererFactory2, engine: AnimationEngine, _zone: NgZone);\n    createRenderer(hostElement: any, type: RendererType2): Renderer2;\n    begin(): void;\n    private _scheduleCountTask;\n    end(): void;\n    whenRenderingDone(): Promise<any>;\n}\nexport declare class BaseAnimationRenderer implements Renderer2 {\n    protected namespaceId: string;\n    delegate: Renderer2;\n    engine: AnimationEngine;\n    constructor(namespaceId: string, delegate: Renderer2, engine: AnimationEngine);\n    readonly data: {\n        [key: string]: any;\n    };\n    destroyNode: ((n: any) => void) | null;\n    destroy(): void;\n    createElement(name: string, namespace?: string | null | undefined): any;\n    createComment(value: string): any;\n    createText(value: string): any;\n    appendChild(parent: any, newChild: any): void;\n    insertBefore(parent: any, newChild: any, refChild: any): void;\n    removeChild(parent: any, oldChild: any): void;\n    selectRootElement(selectorOrNode: any, preserveContent?: boolean): any;\n    parentNode(node: any): any;\n    nextSibling(node: any): any;\n    setAttribute(el: any, name: string, value: string, namespace?: string | null | undefined): void;\n    removeAttribute(el: any, name: string, namespace?: string | null | undefined): void;\n    addClass(el: any, name: string): void;\n    removeClass(el: any, name: string): void;\n    setStyle(el: any, style: string, value: any, flags?: RendererStyleFlags2 | undefined): void;\n    removeStyle(el: any, style: string, flags?: RendererStyleFlags2 | undefined): void;\n    setProperty(el: any, name: string, value: any): void;\n    setValue(node: any, value: string): void;\n    listen(target: any, eventName: string, callback: (event: any) => boolean | void): () => void;\n    protected disableAnimations(element: any, value: boolean): void;\n}\nexport declare class AnimationRenderer extends BaseAnimationRenderer implements Renderer2 {\n    factory: AnimationRendererFactory;\n    constructor(factory: AnimationRendererFactory, namespaceId: string, delegate: Renderer2, engine: AnimationEngine);\n    setProperty(el: any, name: string, value: any): void;\n    listen(target: 'window' | 'document' | 'body' | any, eventName: string, callback: (event: any) => any): () => void;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ErrorHandler, ModuleWithProviders, PlatformRef, StaticProvider } from '@angular/core';\nexport declare const INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[];\n/**\n * @security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n * @experimental\n */\nexport declare const BROWSER_SANITIZATION_PROVIDERS: StaticProvider[];\nexport declare const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef;\nexport declare function initDomAdapter(): void;\nexport declare function errorHandler(): ErrorHandler;\nexport declare function _document(): any;\nexport declare const BROWSER_MODULE_PROVIDERS: StaticProvider[];\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by defaults in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n *\n */\nexport declare class BrowserModule {\n    constructor(parentModule: BrowserModule | null);\n    /**\n     * Configures a browser-based app to transition from a server-rendered app, if\n     * one is present on the page.\n     *\n     * @param params An object containing an identifier for the app to transition.\n     * The ID must match between the client and server versions of the app.\n     * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n     *\n     * @experimental\n     */\n    static withServerTransition(params: {\n        appId: string;\n    }): ModuleWithProviders<BrowserModule>;\n}\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '@angular/core';\nexport { CheckboxControlValueAccessor } from './directives/checkbox_value_accessor';\nexport { ControlValueAccessor } from './directives/control_value_accessor';\nexport { DefaultValueAccessor } from './directives/default_value_accessor';\nexport { NgControl } from './directives/ng_control';\nexport { NgControlStatus, NgControlStatusGroup } from './directives/ng_control_status';\nexport { NgForm } from './directives/ng_form';\nexport { NG_FORM_SELECTOR_WARNING, NgFormSelectorWarning } from './directives/ng_form_selector_warning';\nexport { NgModel } from './directives/ng_model';\nexport { NgModelGroup } from './directives/ng_model_group';\nexport { NumberValueAccessor } from './directives/number_value_accessor';\nexport { RadioControlValueAccessor } from './directives/radio_control_value_accessor';\nexport { RangeValueAccessor } from './directives/range_value_accessor';\nexport { FormControlDirective, NG_MODEL_WITH_FORM_CONTROL_WARNING } from './directives/reactive_directives/form_control_directive';\nexport { FormControlName } from './directives/reactive_directives/form_control_name';\nexport { FormGroupDirective } from './directives/reactive_directives/form_group_directive';\nexport { FormArrayName, FormGroupName } from './directives/reactive_directives/form_group_name';\nexport { NgSelectOption, SelectControlValueAccessor } from './directives/select_control_value_accessor';\nexport { NgSelectMultipleOption, SelectMultipleControlValueAccessor } from './directives/select_multiple_control_value_accessor';\nexport declare const SHARED_FORM_DIRECTIVES: Type<any>[];\nexport declare const TEMPLATE_DRIVEN_DIRECTIVES: Type<any>[];\nexport declare const REACTIVE_DRIVEN_DIRECTIVES: Type<any>[];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nexport declare class InternalFormsSharedModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/testing/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/generic_browser_adapter.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DomAdapter } from '../dom/dom_adapter';\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport declare abstract class GenericBrowserDomAdapter extends DomAdapter {\n    private _animationPrefix;\n    private _transitionEnd;\n    constructor();\n    getDistributedNodes(el: HTMLElement): Node[];\n    resolveAndSetHref(el: HTMLAnchorElement, baseUrl: string, href: string): void;\n    supportsDOMEvents(): boolean;\n    supportsNativeShadowDOM(): boolean;\n    getAnimationPrefix(): string;\n    getTransitionEnd(): string;\n    supportsAnimation(): boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/forms/src/model.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { AsyncValidatorFn, ValidationErrors, ValidatorFn } from './directives/validators';\n/**\n * Reports that a FormControl is valid, meaning that no errors exist in the input value.\n *\n * @see `status`\n */\nexport declare const VALID = \"VALID\";\n/**\n * Reports that a FormControl is invalid, meaning that an error exists in the input value.\n *\n * @see `status`\n */\nexport declare const INVALID = \"INVALID\";\n/**\n * Reports that a FormControl is pending, meaning that that async validation is occurring and\n * errors are not yet available for the input value.\n *\n * @see `markAsPending`\n * @see `status`\n */\nexport declare const PENDING = \"PENDING\";\n/**\n * Reports that a FormControl is disabled, meaning that the control is exempt from ancestor\n * calculations of validity or value.\n *\n * @see `markAsDisabled`\n * @see `status`\n */\nexport declare const DISABLED = \"DISABLED\";\nexport declare type FormHooks = 'change' | 'blur' | 'submit';\n/**\n * Interface for options provided to an `AbstractControl`.\n *\n * @experimental\n */\nexport interface AbstractControlOptions {\n    /**\n     * List of validators applied to control.\n     */\n    validators?: ValidatorFn | ValidatorFn[] | null;\n    /**\n     * List of async validators applied to control.\n     */\n    asyncValidators?: AsyncValidatorFn | AsyncValidatorFn[] | null;\n    /**\n     * The event name for control to update upon.\n     */\n    updateOn?: 'change' | 'blur' | 'submit';\n}\n/**\n * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * @see [Forms Guide](/guide/forms)\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n * @see [Dynamic Forms Guide](/guide/dynamic-form)\n *\n */\nexport declare abstract class AbstractControl {\n    validator: ValidatorFn | null;\n    asyncValidator: AsyncValidatorFn | null;\n    private _parent;\n    private _asyncValidationSubscription;\n    /**\n     * The current value of the control.\n     *\n     * * For a `FormControl`, the current value.\n     * * For a `FormGroup`, the values of enabled controls as an object\n     * with a key-value pair for each member of the group.\n     * * For a `FormArray`, the values of enabled controls as an array.\n     *\n     */\n    readonly value: any;\n    /**\n     * Initialize the AbstractControl instance.\n     *\n     * @param validator The function that determines the synchronous validity of this control.\n     * @param asyncValidator The function that determines the asynchronous validity of this\n     * control.\n     */\n    constructor(validator: ValidatorFn | null, asyncValidator: AsyncValidatorFn | null);\n    /**\n     * The parent control.\n     */\n    readonly parent: FormGroup | FormArray;\n    /**\n     * The validation status of the control. There are four possible\n     * validation status values:\n     *\n     * * **VALID**: This control has passed all validation checks.\n     * * **INVALID**: This control has failed at least one validation check.\n     * * **PENDING**: This control is in the midst of conducting a validation check.\n     * * **DISABLED**: This control is exempt from validation checks.\n     *\n     * These status values are mutually exclusive, so a control cannot be\n     * both valid AND invalid or invalid AND disabled.\n     */\n    readonly status: string;\n    /**\n     * A control is `valid` when its `status` is `VALID`.\n     *\n     * @see `status`\n     *\n     * @returns True if the control has passed all of its validation tests,\n     * false otherwise.\n     */\n    readonly valid: boolean;\n    /**\n     * A control is `invalid` when its `status` is `INVALID`.\n     *\n     * @see `status`\n     *\n     * @returns True if this control has failed one or more of its validation checks,\n     * false otherwise.\n     */\n    readonly invalid: boolean;\n    /**\n     * A control is `pending` when its `status` is `PENDING`.\n     *\n     * @see `status`\n     *\n     * @returns True if this control is in the process of conducting a validation check,\n     * false otherwise.\n     */\n    readonly pending: boolean;\n    /**\n     * A control is `disabled` when its `status` is `DISABLED`.\n     *\n     * @see `status`\n     *\n     * Disabled controls are exempt from validation checks and\n     * are not included in the aggregate value of their ancestor\n     * controls.\n     *\n     * @returns True if the control is disabled, false otherwise.\n     */\n    readonly disabled: boolean;\n    /**\n     * A control is `enabled` as long as its `status` is not `DISABLED`.\n     *\n     * @see `status`\n     *\n     * @returns True if the control has any status other than 'DISABLED',\n     * false if the status is 'DISABLED'.\n     *\n     */\n    readonly enabled: boolean;\n    /**\n     * An object containing any errors generated by failing validation,\n     * or null if there are no errors.\n     */\n    readonly errors: ValidationErrors | null;\n    /**\n     * A control is `pristine` if the user has not yet changed\n     * the value in the UI.\n     *\n     * @returns True if the user has not yet changed the value in the UI; compare `dirty`.\n     * Programmatic changes to a control's value do not mark it dirty.\n     */\n    readonly pristine: boolean;\n    /**\n     * A control is `dirty` if the user has changed the value\n     * in the UI.\n     *\n     * @returns True if the user has changed the value of this control in the UI; compare `pristine`.\n     * Programmatic changes to a control's value do not mark it dirty.\n     */\n    readonly dirty: boolean;\n    /**\n     * True if the control is marked as `touched`.\n     *\n     * A control is marked `touched` once the user has triggered\n     * a `blur` event on it.\n     */\n    readonly touched: boolean;\n    /**\n     * True if the control has not been marked as touched\n     *\n     * A control is `untouched` if the user has not yet triggered\n     * a `blur` event on it.\n     */\n    readonly untouched: boolean;\n    /**\n     * A multicasting observable that emits an event every time the value of the control changes, in\n     * the UI or programmatically.\n     */\n    readonly valueChanges: Observable<any>;\n    /**\n     * A multicasting observable that emits an event every time the validation `status` of the control\n     * recalculates.\n     */\n    readonly statusChanges: Observable<any>;\n    /**\n     * Reports the update strategy of the `AbstractControl` (meaning\n     * the event on which the control updates itself).\n     * Possible values: `'change'` | `'blur'` | `'submit'`\n     * Default value: `'change'`\n     */\n    readonly updateOn: FormHooks;\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this overwrites any existing sync validators.\n     */\n    setValidators(newValidator: ValidatorFn | ValidatorFn[] | null): void;\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * overwrites any existing async validators.\n     */\n    setAsyncValidators(newValidator: AsyncValidatorFn | AsyncValidatorFn[] | null): void;\n    /**\n     * Empties out the sync validator list.\n     */\n    clearValidators(): void;\n    /**\n     * Empties out the async validator list.\n     */\n    clearAsyncValidators(): void;\n    /**\n     * Marks the control as `touched`. A control is touched by focus and\n     * blur events that do not change the value; compare `markAsDirty`;\n     *\n     *  @param opts Configuration options that determine how the control propagates changes\n     * and emits events events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsTouched(opts?: {\n        onlySelf?: boolean;\n    }): void;\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, also marks all children as `untouched`\n     * and recalculates the `touched` status of all parent controls.\n     *\n     *  @param opts Configuration options that determine how the control propagates changes\n     * and emits events after the marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsUntouched(opts?: {\n        onlySelf?: boolean;\n    }): void;\n    /**\n     * Marks the control as `dirty`. A control becomes dirty when\n     * the control's is changed through the UI; compare `markAsTouched`.\n     *\n     *  @param opts Configuration options that determine how the control propagates changes\n     * and emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsDirty(opts?: {\n        onlySelf?: boolean;\n    }): void;\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, marks all children as `pristine`,\n     * and recalculates the `pristine` status of all parent\n     * controls.\n     *\n     *  @param opts Configuration options that determine how the control emits events after\n     * marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     */\n    markAsPristine(opts?: {\n        onlySelf?: boolean;\n    }): void;\n    /**\n     * Marks the control as `pending`.\n     *\n     * A control is pending while the control performs async validation.\n     *\n     *  @param opts Configuration options that determine how the control propagates changes and\n     * emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), the `statusChanges`\n     * observable emits an event with the latest status the control is marked pending.\n     * When false, no events are emitted.\n     *\n     */\n    markAsPending(opts?: {\n        onlySelf?: boolean;\n        emitEvent?: boolean;\n    }): void;\n    /**\n     * Disables the control. This means the control is exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children are also disabled.\n     *\n     *  @param opts Configuration options that determine how the control propagates\n     * changes and emits events after the control is disabled.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is disabled.\n     * When false, no events are emitted.\n     */\n    disable(opts?: {\n        onlySelf?: boolean;\n        emitEvent?: boolean;\n    }): void;\n    /**\n     * Enables the control. This means the control is included in validation checks and\n     * the aggregate value of its parent. Its status recalculates based on its value and\n     * its validators.\n     *\n     * By default, if the control has children, all children are enabled.\n     *\n     *  @param opts Configure options that control how the control propagates changes and\n     * emits events when marked as untouched\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is enabled.\n     * When false, no events are emitted.\n     */\n    enable(opts?: {\n        onlySelf?: boolean;\n        emitEvent?: boolean;\n    }): void;\n    private _updateAncestors;\n    /**\n     * @param parent Sets the parent of the control\n     */\n    setParent(parent: FormGroup | FormArray): void;\n    /**\n     * Sets the value of the control. Abstract method (implemented in sub-classes).\n     */\n    abstract setValue(value: any, options?: Object): void;\n    /**\n     * Patches the value of the control. Abstract method (implemented in sub-classes).\n     */\n    abstract patchValue(value: any, options?: Object): void;\n    /**\n     * Resets the control. Abstract method (implemented in sub-classes).\n     */\n    abstract reset(value?: any, options?: Object): void;\n    /**\n     * Recalculates the value and validation status of the control.\n     *\n     * By default, it also updates the value and validity of its ancestors.\n     *\n     * @param opts Configuration options determine how the control propagates changes and emits events\n     * after updates and validity checks are applied.\n     * * `onlySelf`: When true, only update this control. When false or not supplied,\n     * update all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is updated.\n     * When false, no events are emitted.\n     */\n    updateValueAndValidity(opts?: {\n        onlySelf?: boolean;\n        emitEvent?: boolean;\n    }): void;\n    private _setInitialStatus;\n    private _runValidator;\n    private _runAsyncValidator;\n    private _cancelExistingSubscription;\n    /**\n     * Sets errors on a form control when running validations manually, rather than automatically.\n     *\n     * Calling `setErrors` also updates the validity of the parent control.\n     *\n     * @usageNotes\n     * ### Manually set the errors for a control\n     *\n     * ```\n     * const login = new FormControl('someLogin');\n     * login.setErrors({\n     *   notUnique: true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({ notUnique: true });\n     *\n     * login.setValue('someOtherLogin');\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     */\n    setErrors(errors: ValidationErrors | null, opts?: {\n        emitEvent?: boolean;\n    }): void;\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * @param path A dot-delimited string or array of string/number values that define the path to the\n     * control.\n     *\n     * @usageNotes\n     * ### Retrieve a nested control\n     *\n     * For example, to get a `name` control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     */\n    get(path: Array<string | number> | string): AbstractControl | null;\n    /**\n     * Reports error data for a specific error occurring in this control or in another control.\n     *\n     * @param errorCode The error code for which to retrieve data\n     * @param path The path to a control to check. If not supplied, checks for the error in this\n     * control.\n     *\n     * @returns The error data if the control with the given path has the given error, otherwise null\n     * or undefined.\n     */\n    getError(errorCode: string, path?: string[]): any;\n    /**\n     * Reports whether the control with the given path has the error specified.\n     *\n     * @param errorCode The error code for which to retrieve data\n     * @param path The path to a control to check. If not supplied, checks for the error in this\n     * control.\n     * @returns True when the control with the given path has the error, otherwise false.\n     */\n    hasError(errorCode: string, path?: string[]): boolean;\n    /**\n     * Retrieves the top-level ancestor of this control.\n     */\n    readonly root: AbstractControl;\n    private _calculateStatus;\n}\n/**\n * Tracks the value and validation status of an individual form control.\n *\n * This is one of the three fundamental building blocks of Angular forms, along with\n * `FormGroup` and `FormArray`. It extends the `AbstractControl` class that\n * implements most of the base functionality for accessing the value, validation status,\n * user interactions and events.\n *\n * @see `AbstractControl`\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see [Usage Notes](#usage-notes)\n *\n * @usageNotes\n *\n * ### Initializing Form Controls\n *\n * Instantiate a `FormControl`, with an initial value.\n *\n * ```ts\n * const control = new FormControl('some value');\n * console.log(control.value);     // 'some value'\n *```\n *\n * The following example initializes the control with a form state object. The `value`\n * and `disabled` keys are required in this case.\n *\n * ```ts\n * const control = new FormControl({ value: 'n/a', disabled: true });\n * console.log(control.value);     // 'n/a'\n * console.log(control.status);    // 'DISABLED'\n * ```\n *\n * The following example initializes the control with a sync validator.\n *\n * ```ts\n * const control = new FormControl('', Validators.required);\n * console.log(control.value);      // ''\n * console.log(control.status);     // 'INVALID'\n * ```\n *\n * The following example initializes the control using an options object.\n *\n * ```ts\n * const control = new FormControl('', {\n *    validators: Validators.required,\n *    asyncValidators: myAsyncValidator\n * });\n * ```\n *\n * ### Configure the control to update on a blur event\n *\n * Set the `updateOn` option to `'blur'` to update on the blur `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'blur' });\n * ```\n *\n * ### Configure the control to update on a submit event\n *\n * Set the `updateOn` option to `'submit'` to update on a submit `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'submit' });\n * ```\n *\n * ### Reset the control back to an initial value\n *\n * You reset to a specific form state by passing through a standalone\n * value or a form state object that contains both a value and a disabled state\n * (these are the only two properties that cannot be calculated).\n *\n * ```ts\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n *\n * control.reset('Drew');\n *\n * console.log(control.value); // 'Drew'\n * ```\n *\n * ### Reset the control back to an initial value and disabled\n *\n * ```\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n * console.log(control.status); // 'VALID'\n *\n * control.reset({ value: 'Drew', disabled: true });\n *\n * console.log(control.value); // 'Drew'\n * console.log(control.status); // 'DISABLED'\n *\n*/\nexport declare class FormControl extends AbstractControl {\n    /**\n    * Creates a new `FormControl` instance.\n    *\n    * @param formState Initializes the control with an initial value,\n    * or an object that defines the initial value and disabled state.\n    *\n    * @param validatorOrOpts A synchronous validator function, or an array of\n    * such functions, or an `AbstractControlOptions` object that contains validation functions\n    * and a validation trigger.\n    *\n    * @param asyncValidator A single async validator or array of async validator functions\n    *\n    */\n    constructor(formState?: any, validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null);\n    /**\n     * Sets a new value for the form control.\n     *\n     * @param value The new value for the control.\n     * @param options Configuration options that determine how the control proopagates changes\n     * and emits events when the value changes.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an\n     * `onChange` event to\n     * update the view.\n     * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an\n     * `ngModelChange`\n     * event to update the model.\n     *\n     */\n    setValue(value: any, options?: {\n        onlySelf?: boolean;\n        emitEvent?: boolean;\n        emitModelToViewChange?: boolean;\n        emitViewToModelChange?: boolean;\n    }): void;\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     *\n     * @see `setValue` for options\n     */\n    patchValue(value: any, options?: {\n        onlySelf?: boolean;\n        emitEvent?: boolean;\n        emitModelToViewChange?: boolean;\n        emitViewToModelChange?: boolean;\n    }): void;\n    /**\n     * Resets the form control, marking it `pristine` and `untouched`, and setting\n     * the value to null.\n     *\n     * @param formState Resets the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     *\n     */\n    reset(formState?: any, options?: {\n        onlySelf?: boolean;\n        emitEvent?: boolean;\n    }): void;\n    /**\n     * Register a listener for change events.\n     *\n     * @param fn The method that is called when the value changes\n     */\n    registerOnChange(fn: Function): void;\n    /**\n     * Register a listener for disabled events.\n     *\n     * @param fn The method that is called when the disabled status changes.\n     */\n    registerOnDisabledChange(fn: (isDisabled: boolean) => void): void;\n    private _applyFormState;\n}\n/**\n * Tracks the value and validity state of a group of `FormControl` instances.\n *\n * A `FormGroup` aggregates the values of each child `FormControl` into one object,\n * with each control name as the key.  It calculates its status by reducing the status values\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormArray`.\n *\n * When instantiating a `FormGroup`, pass in a collection of child controls as the first\n * argument. The key for each child registers the name for the control.\n *\n * @usageNotes\n *\n * ### Create a form group with 2 controls\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * ### Create a form group with a group-level validator\n *\n * You include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like `FormControl` instances, you choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });\n * ```\n *\n * ### Set the updateOn property for all controls in a form group\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *   one: new FormControl()\n * }, { updateOn: 'blur' });\n * ```\n */\nexport declare class FormGroup extends AbstractControl {\n    controls: {\n        [key: string]: AbstractControl;\n    };\n    /**\n    * Creates a new `FormGroup` instance.\n    *\n    * @param controls A collection of child controls. The key for each child is the name\n    * under which it is registered.\n    *\n    * @param validatorOrOpts A synchronous validator function, or an array of\n    * such functions, or an `AbstractControlOptions` object that contains validation functions\n    * and a validation trigger.\n    *\n    * @param asyncValidator A single async validator or array of async validator functions\n    *\n    */\n    constructor(controls: {\n        [key: string]: AbstractControl;\n    }, validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null);\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control.\n     * Use {@link FormGroup#addControl addControl} instead.\n     *\n     * @param name The control name to register in the collection\n     * @param control Provides the control for the given name\n     */\n    registerControl(name: string, control: AbstractControl): AbstractControl;\n    /**\n     * Add a control to this group.\n     *\n     * This method also updates the value and validity of the control.\n     *\n     * @param name The control name to add to the collection\n     * @param control Provides the control for the given name\n     */\n    addControl(name: string, control: AbstractControl): void;\n    /**\n     * Remove a control from this group.\n     *\n     * @param name The control name to remove from the collection\n     */\n    removeControl(name: string): void;\n    /**\n     * Replace an existing control.\n     *\n     * @param name The control name to replace in the collection\n     * @param control Provides the control for the given name\n     */\n    setControl(name: string, control: AbstractControl): void;\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * Reports false for disabled controls. If you'd like to check for existence in the group\n     * only, use {@link AbstractControl#get get} instead.\n     *\n     * @param name The control name to check for existence in the collection\n     *\n     * @returns false for disabled controls, true otherwise.\n     */\n    contains(controlName: string): boolean;\n    /**\n     * Sets the value of the `FormGroup`. It accepts an object that matches\n     * the structure of the group, with control names as keys.\n     *\n     * @usageNotes\n     * ### Set the complete value for the form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl(),\n     *   last: new FormControl()\n     * });\n     *\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.setValue({first: 'Nancy', last: 'Drew'});\n     * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     * ```\n     *\n     * @throws When strict checks fail, such as setting the value of a control\n     * that doesn't exist or if you excluding the value of a control.\n     *\n     * @param value The new value for the control that matches the structure of the group.\n     * @param options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     */\n    setValue(value: {\n        [key: string]: any;\n    }, options?: {\n        onlySelf?: boolean;\n        emitEvent?: boolean;\n    }): void;\n    /**\n     * Patches the value of the `FormGroup`. It accepts an object with control\n     * names as keys, and does its best to match the values to the correct controls\n     * in the group.\n     *\n     * It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     * @usageNotes\n     * ### Patch the value for a form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *    first: new FormControl(),\n     *    last: new FormControl()\n     * });\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.patchValue({first: 'Nancy'});\n     * console.log(form.value);   // {first: 'Nancy', last: null}\n     * ```\n     *\n     * @param value The object that matches the structure of the group.\n     * @param options Configuration options that determine how the control propagates changes and\n     * emits events after the value is patched.\n     * * `onlySelf`: When true, each change only affects this control and not its parent. Default is\n     * true.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     */\n    patchValue(value: {\n        [key: string]: any;\n    }, options?: {\n        onlySelf?: boolean;\n        emitEvent?: boolean;\n    }): void;\n    /**\n     * Resets the `FormGroup`, marks all descendants are marked `pristine` and `untouched`, and\n     * the value of all descendants to null.\n     *\n     * You reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * is a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * @param formState Resets the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param options Configuration options that determine how the control propagates changes\n     * and emits events when the group is reset.\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * @usageNotes\n     *\n     * ### Reset the form group values\n     *\n     * ```ts\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * console.log(form.value);  // {first: 'first name', last: 'last name'}\n     *\n     * form.reset({ first: 'name', last: 'last name' });\n     *\n     * console.log(form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * ### Reset the form group values and disabled status\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     */\n    reset(value?: any, options?: {\n        onlySelf?: boolean;\n        emitEvent?: boolean;\n    }): void;\n    /**\n     * The aggregate value of the `FormGroup`, including any disabled controls.\n     *\n     * Retrieves all values regardless of disabled status.\n     * The `value` property is the best way to get the value of the group, because\n     * it excludes disabled controls in the `FormGroup`.\n     */\n    getRawValue(): any;\n}\n/**\n * Tracks the value and validity state of an array of `FormControl`,\n * `FormGroup` or `FormArray` instances.\n *\n * A `FormArray` aggregates the values of each child `FormControl` into an array.\n * It calculates its status by reducing the status values of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormGroup`.\n *\n * @usageNotes\n *\n * ### Create an array of form controls\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * ### Create a form array with array-level validators\n *\n * You include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators are passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n  * ### Set the updateOn property for all controls in a form array\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const arr = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls from a form array\n *\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that result in strange and unexpected behavior such\n * as broken change detection.\n *\n *\n */\nexport declare class FormArray extends AbstractControl {\n    controls: AbstractControl[];\n    /**\n    * Creates a new `FormArray` instance.\n    *\n    * @param controls An array of child controls. Each child control is given an index\n    * where it is registered.\n    *\n    * @param validatorOrOpts A synchronous validator function, or an array of\n    * such functions, or an `AbstractControlOptions` object that contains validation functions\n    * and a validation trigger.\n    *\n    * @param asyncValidator A single async validator or array of async validator functions\n    *\n    */\n    constructor(controls: AbstractControl[], validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null);\n    /**\n     * Get the `AbstractControl` at the given `index` in the array.\n     *\n     * @param index Index in the array to retrieve the control\n     */\n    at(index: number): AbstractControl;\n    /**\n     * Insert a new `AbstractControl` at the end of the array.\n     *\n     * @param control Form control to be inserted\n     */\n    push(control: AbstractControl): void;\n    /**\n     * Insert a new `AbstractControl` at the given `index` in the array.\n     *\n     * @param index Index in the array to insert the control\n     * @param control Form control to be inserted\n     */\n    insert(index: number, control: AbstractControl): void;\n    /**\n     * Remove the control at the given `index` in the array.\n     *\n     * @param index Index in the array to remove the control\n     */\n    removeAt(index: number): void;\n    /**\n     * Replace an existing control.\n     *\n     * @param index Index in the array to replace the control\n     * @param control The `AbstractControl` control to replace the existing control\n     */\n    setControl(index: number, control: AbstractControl): void;\n    /**\n     * Length of the control array.\n     */\n    readonly length: number;\n    /**\n     * Sets the value of the `FormArray`. It accepts an array that matches\n     * the structure of the control.\n     *\n     * This method performs strict checks, and throws an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     * @usageNotes\n     * ### Set the values for the controls in the form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *   new FormControl(),\n     *   new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.setValue(['Nancy', 'Drew']);\n     * console.log(arr.value);   // ['Nancy', 'Drew']\n     * ```\n     *\n     * @param value Array of values for the controls\n     * @param options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     */\n    setValue(value: any[], options?: {\n        onlySelf?: boolean;\n        emitEvent?: boolean;\n    }): void;\n    /**\n     * Patches the value of the `FormArray`. It accepts an array that matches the\n     * structure of the control, and does its best to match the values to the correct\n     * controls in the group.\n     *\n     * It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     * @usageNotes\n     * ### Patch the values for controls in a form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.patchValue(['Nancy']);\n     * console.log(arr.value);   // ['Nancy', null]\n     * ```\n     *\n     * @param value Array of latest values for the controls\n     * @param options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     */\n    patchValue(value: any[], options?: {\n        onlySelf?: boolean;\n        emitEvent?: boolean;\n    }): void;\n    /**\n     * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the\n     * value of all descendants to null or null maps.\n     *\n     * You reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state is a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * @usageNotes\n     * ### Reset the values in a form array\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * ### Reset the values in a form array and the disabled status for the first control\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     *\n     * @param value Array of values for the controls\n     * @param options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     */\n    reset(value?: any, options?: {\n        onlySelf?: boolean;\n        emitEvent?: boolean;\n    }): void;\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * Reports all values regardless of disabled status.\n     * For enabled controls only, the `value` property is the best way to get the value of the array.\n     */\n    getRawValue(): any[];\n    private _registerControl;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/events/event_manager.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, NgZone } from '@angular/core';\n/**\n * The injection token for the event-manager plug-in service.\n */\nexport declare const EVENT_MANAGER_PLUGINS: InjectionToken<EventManagerPlugin[]>;\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n */\nexport declare class EventManager {\n    private _zone;\n    private _plugins;\n    private _eventNameToPlugin;\n    /**\n     * Initializes an instance of the event-manager service.\n     */\n    constructor(plugins: EventManagerPlugin[], _zone: NgZone);\n    /**\n     * Registers a handler for a specific element and event.\n     *\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns  A callback function that can be used to remove the handler.\n     */\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    /**\n     * Registers a global handler for an event in a target view.\n     *\n     * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n     * @param eventName The name of the event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns A callback function that can be used to remove the handler.\n     */\n    addGlobalEventListener(target: string, eventName: string, handler: Function): Function;\n    /**\n     * Retrieves the compilation zone in which event listeners are registered.\n     */\n    getZone(): NgZone;\n}\nexport declare abstract class EventManagerPlugin {\n    private _doc;\n    constructor(_doc: any);\n    manager: EventManager;\n    abstract supports(eventName: string): boolean;\n    abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    addGlobalEventListener(element: string, eventName: string, handler: Function): Function;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/router.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"ɵangular_packages_router_router_a\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":54,\"character\":40},\"arguments\":[\"ROUTER_FORROOT_GUARD\"]},\"ɵangular_packages_router_router_b\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgProbeToken\",\"line\":78,\"character\":13},\"arguments\":[\"Router\",{\"__symbolic\":\"reference\",\"name\":\"Router\"}]}},\"ɵangular_packages_router_router_c\":{\"__symbolic\":\"function\"},\"ɵangular_packages_router_router_d\":{\"__symbolic\":\"function\",\"parameters\":[\"platformLocationStrategy\",\"baseHref\",\"options\"],\"defaults\":[null,null,{}],\"value\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"options\"},\"member\":\"useHash\"},\"thenExpression\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"HashLocationStrategy\",\"line\":210,\"character\":31},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"platformLocationStrategy\"},{\"__symbolic\":\"reference\",\"name\":\"baseHref\"}]},\"elseExpression\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"PathLocationStrategy\",\"line\":211,\"character\":31},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"platformLocationStrategy\"},{\"__symbolic\":\"reference\",\"name\":\"baseHref\"}]}}},\"ɵangular_packages_router_router_e\":{\"__symbolic\":\"function\"},\"ɵangular_packages_router_router_f\":{\"__symbolic\":\"function\"},\"ɵangular_packages_router_router_g\":{\"__symbolic\":\"function\",\"parameters\":[\"router\"],\"value\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"router\"},\"member\":\"routerState\"},\"member\":\"root\"}},\"ɵangular_packages_router_router_h\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":520,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injector\",\"line\":525,\"character\":32}]}],\"appInitializer\":[{\"__symbolic\":\"method\"}],\"bootstrapListener\":[{\"__symbolic\":\"method\"}],\"isLegacyEnabled\":[{\"__symbolic\":\"method\"}],\"isLegacyDisabled\":[{\"__symbolic\":\"method\"}]}},\"ɵangular_packages_router_router_i\":{\"__symbolic\":\"function\",\"parameters\":[\"r\"],\"value\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"r\"},\"member\":\"appInitializer\"},\"member\":\"bind\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"r\"}]}},\"ɵangular_packages_router_router_j\":{\"__symbolic\":\"function\",\"parameters\":[\"r\"],\"value\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"r\"},\"member\":\"bootstrapListener\"},\"member\":\"bind\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"r\"}]}},\"ɵangular_packages_router_router_k\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_h\"},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"APP_INITIALIZER\",\"line\":619,\"character\":15},\"multi\":true,\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_i\"},\"deps\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_h\"}]},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ROUTER_INITIALIZER\"},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_j\"},\"deps\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_h\"}]},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"APP_BOOTSTRAP_LISTENER\",\"line\":625,\"character\":14},\"multi\":true,\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"ROUTER_INITIALIZER\"}}]},\"Data\":{\"__symbolic\":\"interface\"},\"LoadChildren\":{\"__symbolic\":\"interface\"},\"LoadChildrenCallback\":{\"__symbolic\":\"interface\"},\"ResolveData\":{\"__symbolic\":\"interface\"},\"Route\":{\"__symbolic\":\"interface\"},\"Routes\":{\"__symbolic\":\"interface\"},\"RunGuardsAndResolvers\":{\"__symbolic\":\"interface\"},\"UrlMatchResult\":{\"__symbolic\":\"interface\"},\"UrlMatcher\":{\"__symbolic\":\"interface\"},\"RouterLink\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":92,\"character\":1},\"arguments\":[{\"selector\":\":not(a)[routerLink]\"}]}],\"members\":{\"queryParams\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":95,\"character\":3}}]}],\"fragment\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":97,\"character\":3}}]}],\"queryParamsHandling\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":99,\"character\":3}}]}],\"preserveFragment\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":101,\"character\":3}}]}],\"skipLocationChange\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":103,\"character\":3}}]}],\"replaceUrl\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":105,\"character\":3}}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[null,null,[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Attribute\",\"line\":112,\"character\":7},\"arguments\":[\"tabindex\"]}],null,null],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Router\"},{\"__symbolic\":\"reference\",\"name\":\"ActivatedRoute\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Renderer2\",\"line\":112,\"character\":57},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ElementRef\",\"line\":112,\"character\":72}]}],\"routerLink\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":118,\"character\":3}}]}],\"preserveQueryParams\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":130,\"character\":3}}]}],\"onClick\":[{\"__symbolic\":\"method\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"HostListener\",\"line\":138,\"character\":3},\"arguments\":[\"click\"]}]}]}},\"RouterLinkWithHref\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":171,\"character\":1},\"arguments\":[{\"selector\":\"a[routerLink]\"}]}],\"members\":{\"target\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"HostBinding\",\"line\":174,\"character\":3},\"arguments\":[\"attr.target\"]},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":174,\"character\":31}}]}],\"queryParams\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":176,\"character\":3}}]}],\"fragment\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":178,\"character\":3}}]}],\"queryParamsHandling\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":180,\"character\":3}}]}],\"preserveFragment\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":182,\"character\":3}}]}],\"skipLocationChange\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":184,\"character\":3}}]}],\"replaceUrl\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":186,\"character\":3}}]}],\"href\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"HostBinding\",\"line\":194,\"character\":3}}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Router\"},{\"__symbolic\":\"reference\",\"name\":\"ActivatedRoute\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"LocationStrategy\",\"line\":198,\"character\":32}]}],\"routerLink\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":206,\"character\":3}}]}],\"preserveQueryParams\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":215,\"character\":3}}]}],\"ngOnChanges\":[{\"__symbolic\":\"method\"}],\"ngOnDestroy\":[{\"__symbolic\":\"method\"}],\"onClick\":[{\"__symbolic\":\"method\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"HostListener\",\"line\":226,\"character\":3},\"arguments\":[\"click\",[\"$event.button\",\"$event.ctrlKey\",\"$event.metaKey\",\"$event.shiftKey\"]]}]}],\"updateTargetUrlAndHref\":[{\"__symbolic\":\"method\"}]}},\"RouterLinkActive\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":74,\"character\":1},\"arguments\":[{\"selector\":\"[routerLinkActive]\",\"exportAs\":\"routerLinkActive\"}]}],\"members\":{\"links\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ContentChildren\",\"line\":81,\"character\":3},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"RouterLink\"},{\"descendants\":true}]}]}],\"linksWithHrefs\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ContentChildren\",\"line\":84,\"character\":3},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"RouterLinkWithHref\"},{\"descendants\":true}]}]}],\"routerLinkActiveOptions\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":91,\"character\":3}}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Router\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ElementRef\",\"line\":94,\"character\":47},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Renderer2\",\"line\":94,\"character\":77},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ChangeDetectorRef\",\"line\":95,\"character\":19}]}],\"ngAfterContentInit\":[{\"__symbolic\":\"method\"}],\"routerLinkActive\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":110,\"character\":3}}]}],\"ngOnChanges\":[{\"__symbolic\":\"method\"}],\"ngOnDestroy\":[{\"__symbolic\":\"method\"}],\"update\":[{\"__symbolic\":\"method\"}],\"isLinkActive\":[{\"__symbolic\":\"method\"}],\"hasActiveLinks\":[{\"__symbolic\":\"method\"}]}},\"RouterOutlet\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":38,\"character\":1},\"arguments\":[{\"selector\":\"router-outlet\",\"exportAs\":\"outlet\"}]}],\"members\":{\"activateEvents\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Output\",\"line\":44,\"character\":3},\"arguments\":[\"activate\"]}]}],\"deactivateEvents\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Output\",\"line\":45,\"character\":3},\"arguments\":[\"deactivate\"]}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[null,null,null,[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Attribute\",\"line\":49,\"character\":51},\"arguments\":[\"name\"]}],null],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ChildrenOutletContexts\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ViewContainerRef\",\"line\":48,\"character\":72},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ComponentFactoryResolver\",\"line\":49,\"character\":24},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ChangeDetectorRef\",\"line\":50,\"character\":30}]}],\"ngOnDestroy\":[{\"__symbolic\":\"method\"}],\"ngOnInit\":[{\"__symbolic\":\"method\"}],\"detach\":[{\"__symbolic\":\"method\"}],\"attach\":[{\"__symbolic\":\"method\"}],\"deactivate\":[{\"__symbolic\":\"method\"}],\"activateWith\":[{\"__symbolic\":\"method\"}]}},\"ActivationEnd\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ActivatedRouteSnapshot\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"ActivationStart\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ActivatedRouteSnapshot\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"ChildActivationEnd\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ActivatedRouteSnapshot\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"ChildActivationStart\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ActivatedRouteSnapshot\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"Event\":{\"__symbolic\":\"interface\"},\"GuardsCheckEnd\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"RouterEvent\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"RouterStateSnapshot\"},{\"__symbolic\":\"reference\",\"name\":\"boolean\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"GuardsCheckStart\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"RouterEvent\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"RouterStateSnapshot\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"NavigationCancel\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"RouterEvent\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"string\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"NavigationEnd\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"RouterEvent\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"string\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"NavigationError\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"RouterEvent\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"any\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"NavigationStart\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"RouterEvent\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":89,\"character\":25,\"module\":\"./src/events\"},{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":91,\"character\":21,\"module\":\"./src/events\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"ResolveEnd\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"RouterEvent\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"RouterStateSnapshot\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"ResolveStart\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"RouterEvent\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"RouterStateSnapshot\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"RouteConfigLoadEnd\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Route\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"RouteConfigLoadStart\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Route\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"RouterEvent\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"string\"}]}]}},\"RoutesRecognized\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"RouterEvent\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"RouterStateSnapshot\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"Scroll\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"NavigationEnd\"},{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":414,\"character\":25,\"module\":\"./src/events\"},{\"__symbolic\":\"reference\",\"name\":\"string\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"CanActivate\":{\"__symbolic\":\"interface\"},\"CanActivateChild\":{\"__symbolic\":\"interface\"},\"CanDeactivate\":{\"__symbolic\":\"interface\"},\"CanLoad\":{\"__symbolic\":\"interface\"},\"Resolve\":{\"__symbolic\":\"interface\"},\"DetachedRouteHandle\":{\"__symbolic\":\"interface\"},\"RouteReuseStrategy\":{\"__symbolic\":\"class\",\"members\":{\"shouldDetach\":[{\"__symbolic\":\"method\"}],\"store\":[{\"__symbolic\":\"method\"}],\"shouldAttach\":[{\"__symbolic\":\"method\"}],\"retrieve\":[{\"__symbolic\":\"method\"}],\"shouldReuseRoute\":[{\"__symbolic\":\"method\"}]}},\"NavigationExtras\":{\"__symbolic\":\"interface\"},\"Router\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Type\",\"module\":\"@angular/core\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]},{\"__symbolic\":\"reference\",\"name\":\"UrlSerializer\"},{\"__symbolic\":\"reference\",\"name\":\"ChildrenOutletContexts\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"Location\",\"line\":323,\"character\":70},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injector\",\"line\":323,\"character\":90},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModuleFactoryLoader\",\"line\":324,\"character\":14},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Compiler\",\"line\":324,\"character\":47},{\"__symbolic\":\"reference\",\"name\":\"Routes\"}]}],\"setupNavigations\":[{\"__symbolic\":\"method\"}],\"resetRootComponentType\":[{\"__symbolic\":\"method\"}],\"getTransition\":[{\"__symbolic\":\"method\"}],\"setTransition\":[{\"__symbolic\":\"method\"}],\"initialNavigation\":[{\"__symbolic\":\"method\"}],\"setUpLocationChangeListener\":[{\"__symbolic\":\"method\"}],\"triggerEvent\":[{\"__symbolic\":\"method\"}],\"resetConfig\":[{\"__symbolic\":\"method\"}],\"ngOnDestroy\":[{\"__symbolic\":\"method\"}],\"dispose\":[{\"__symbolic\":\"method\"}],\"createUrlTree\":[{\"__symbolic\":\"method\"}],\"navigateByUrl\":[{\"__symbolic\":\"method\"}],\"navigate\":[{\"__symbolic\":\"method\"}],\"serializeUrl\":[{\"__symbolic\":\"method\"}],\"parseUrl\":[{\"__symbolic\":\"method\"}],\"isActive\":[{\"__symbolic\":\"method\"}],\"removeEmptyProps\":[{\"__symbolic\":\"method\"}],\"processNavigations\":[{\"__symbolic\":\"method\"}],\"scheduleNavigation\":[{\"__symbolic\":\"method\"}],\"setBrowserUrl\":[{\"__symbolic\":\"method\"}],\"resetStateAndUrl\":[{\"__symbolic\":\"method\"}],\"resetUrlToCurrentUrlTree\":[{\"__symbolic\":\"method\"}]}},\"ROUTES\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":19,\"character\":26},\"arguments\":[\"ROUTES\"]},\"ExtraOptions\":{\"__symbolic\":\"interface\"},\"ROUTER_CONFIGURATION\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":49,\"character\":40},\"arguments\":[\"ROUTER_CONFIGURATION\"]},\"ROUTER_INITIALIZER\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":613,\"character\":8},\"arguments\":[\"Router Initializer\"]},\"RouterModule\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModule\",\"line\":132,\"character\":1},\"arguments\":[{\"declarations\":[{\"__symbolic\":\"reference\",\"name\":\"RouterOutlet\"},{\"__symbolic\":\"reference\",\"name\":\"RouterLink\"},{\"__symbolic\":\"reference\",\"name\":\"RouterLinkWithHref\"},{\"__symbolic\":\"reference\",\"name\":\"RouterLinkActive\"},{\"__symbolic\":\"reference\",\"name\":\"ɵEmptyOutletComponent\"}],\"exports\":[{\"__symbolic\":\"reference\",\"name\":\"RouterOutlet\"},{\"__symbolic\":\"reference\",\"name\":\"RouterLink\"},{\"__symbolic\":\"reference\",\"name\":\"RouterLinkWithHref\"},{\"__symbolic\":\"reference\",\"name\":\"RouterLinkActive\"},{\"__symbolic\":\"reference\",\"name\":\"ɵEmptyOutletComponent\"}],\"entryComponents\":[{\"__symbolic\":\"reference\",\"name\":\"ɵEmptyOutletComponent\"}]}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":139,\"character\":15}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":139,\"character\":27},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_a\"}]}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":139,\"character\":69}}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"},{\"__symbolic\":\"reference\",\"name\":\"Router\"}]}]},\"statics\":{\"forRoot\":{\"__symbolic\":\"function\",\"parameters\":[\"routes\",\"config\"],\"value\":{\"ngModule\":{\"__symbolic\":\"reference\",\"name\":\"RouterModule\"},\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵROUTER_PROVIDERS\"},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"provideRoutes\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"routes\"}]},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_a\"},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_e\"},\"deps\":[[{\"__symbolic\":\"reference\",\"name\":\"Router\"},{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":166,\"character\":30}},{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"SkipSelf\",\"line\":166,\"character\":46}}]]},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ROUTER_CONFIGURATION\"},\"useValue\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"reference\",\"name\":\"config\"},\"thenExpression\":{\"__symbolic\":\"reference\",\"name\":\"config\"},\"elseExpression\":{}}},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"LocationStrategy\",\"line\":170,\"character\":19},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_d\"},\"deps\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"PlatformLocation\",\"line\":173,\"character\":12},[{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":173,\"character\":35},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"APP_BASE_HREF\",\"line\":173,\"character\":42}]},{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":173,\"character\":62}}],{\"__symbolic\":\"reference\",\"name\":\"ROUTER_CONFIGURATION\"}]},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_n\"},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_c\"},\"deps\":[{\"__symbolic\":\"reference\",\"name\":\"Router\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"ViewportScroller\",\"line\":179,\"character\":25},{\"__symbolic\":\"reference\",\"name\":\"ROUTER_CONFIGURATION\"}]},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"PreloadingStrategy\"},\"useExisting\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"binop\",\"operator\":\"&&\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"config\"},\"right\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"config\"},\"member\":\"preloadingStrategy\"}},\"thenExpression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"config\"},\"member\":\"preloadingStrategy\"},\"elseExpression\":{\"__symbolic\":\"reference\",\"name\":\"NoPreloading\"}}},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgProbeToken\",\"line\":186,\"character\":18},\"multi\":true,\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_b\"}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_k\"}}]}},\"forChild\":{\"__symbolic\":\"function\",\"parameters\":[\"routes\"],\"value\":{\"ngModule\":{\"__symbolic\":\"reference\",\"name\":\"RouterModule\"},\"providers\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"provideRoutes\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"routes\"}]}]}}}},\"provideRoutes\":{\"__symbolic\":\"function\",\"parameters\":[\"routes\"],\"value\":[{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ANALYZE_FOR_ENTRY_COMPONENTS\",\"line\":242,\"character\":14},\"multi\":true,\"useValue\":{\"__symbolic\":\"reference\",\"name\":\"routes\"}},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ROUTES\"},\"multi\":true,\"useValue\":{\"__symbolic\":\"reference\",\"name\":\"routes\"}}]},\"ChildrenOutletContexts\":{\"__symbolic\":\"class\",\"members\":{\"onChildOutletCreated\":[{\"__symbolic\":\"method\"}],\"onChildOutletDestroyed\":[{\"__symbolic\":\"method\"}],\"onOutletDeactivated\":[{\"__symbolic\":\"method\"}],\"onOutletReAttached\":[{\"__symbolic\":\"method\"}],\"getOrCreateContext\":[{\"__symbolic\":\"method\"}],\"getContext\":[{\"__symbolic\":\"method\"}]}},\"OutletContext\":{\"__symbolic\":\"class\",\"members\":{}},\"NoPreloading\":{\"__symbolic\":\"class\",\"members\":{\"preload\":[{\"__symbolic\":\"method\"}]}},\"PreloadAllModules\":{\"__symbolic\":\"class\",\"members\":{\"preload\":[{\"__symbolic\":\"method\"}]}},\"PreloadingStrategy\":{\"__symbolic\":\"class\",\"members\":{\"preload\":[{\"__symbolic\":\"method\"}]}},\"RouterPreloader\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":71,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Router\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModuleFactoryLoader\",\"line\":78,\"character\":44},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Compiler\",\"line\":78,\"character\":77},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injector\",\"line\":79,\"character\":24},{\"__symbolic\":\"reference\",\"name\":\"PreloadingStrategy\"}]}],\"setUpPreloading\":[{\"__symbolic\":\"method\"}],\"preload\":[{\"__symbolic\":\"method\"}],\"ngOnDestroy\":[{\"__symbolic\":\"method\"}],\"processRoutes\":[{\"__symbolic\":\"method\"}],\"preloadConfig\":[{\"__symbolic\":\"method\"}]}},\"ActivatedRoute\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Observable\",\"module\":\"rxjs\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"Data\"}]},{\"__symbolic\":\"reference\",\"name\":\"Observable\",\"module\":\"rxjs\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"Data\"}]},{\"__symbolic\":\"reference\",\"name\":\"Observable\",\"module\":\"rxjs\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"Data\"}]},{\"__symbolic\":\"reference\",\"name\":\"Observable\",\"module\":\"rxjs\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"Data\"}]},{\"__symbolic\":\"reference\",\"name\":\"Observable\",\"module\":\"rxjs\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"Data\"}]},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"Type\",\"module\":\"@angular/core\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]},{\"__symbolic\":\"reference\",\"name\":\"ActivatedRouteSnapshot\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"ActivatedRouteSnapshot\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"UrlSegment\"}]},{\"__symbolic\":\"reference\",\"name\":\"Params\"},{\"__symbolic\":\"reference\",\"name\":\"Params\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"Data\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"Type\",\"module\":\"@angular/core\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]},{\"__symbolic\":\"reference\",\"name\":\"Route\"},{\"__symbolic\":\"reference\",\"name\":\"UrlSegmentGroup\"},{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"ResolveData\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"RouterState\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_l\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_m\"},{\"__symbolic\":\"reference\",\"name\":\"RouterStateSnapshot\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"RouterStateSnapshot\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_l\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_m\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"PRIMARY_OUTLET\":\"primary\",\"ParamMap\":{\"__symbolic\":\"interface\"},\"Params\":{\"__symbolic\":\"interface\"},\"convertToParamMap\":{\"__symbolic\":\"function\",\"parameters\":[\"params\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to non-exported class\",\"line\":62,\"character\":0,\"context\":{\"className\":\"ParamsAsMap\"},\"module\":\"./src/shared\"}},\"UrlHandlingStrategy\":{\"__symbolic\":\"class\",\"members\":{\"shouldProcessUrl\":[{\"__symbolic\":\"method\"}],\"extract\":[{\"__symbolic\":\"method\"}],\"merge\":[{\"__symbolic\":\"method\"}]}},\"DefaultUrlSerializer\":{\"__symbolic\":\"class\",\"members\":{\"parse\":[{\"__symbolic\":\"method\"}],\"serialize\":[{\"__symbolic\":\"method\"}]}},\"UrlSegment\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":204,\"character\":25,\"module\":\"./src/url_tree\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"UrlSegmentGroup\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"UrlSegment\"}]},{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":153,\"character\":23,\"module\":\"./src/url_tree\"}]}],\"hasChildren\":[{\"__symbolic\":\"method\"}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"UrlSerializer\":{\"__symbolic\":\"class\",\"members\":{\"parse\":[{\"__symbolic\":\"method\"}],\"serialize\":[{\"__symbolic\":\"method\"}]}},\"UrlTree\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"UrlSegmentGroup\"},{\"__symbolic\":\"reference\",\"name\":\"Params\"},{\"__symbolic\":\"reference\",\"name\":\"string\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"VERSION\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Version\",\"line\":16,\"character\":27},\"arguments\":[\"7.0.0\"]},\"ɵEmptyOutletComponent\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Component\",\"line\":19,\"character\":1},\"arguments\":[{\"template\":\"<router-outlet></router-outlet>\"}]}],\"members\":{}},\"ɵROUTER_PROVIDERS\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"Location\",\"line\":57,\"character\":2},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"UrlSerializer\"},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"DefaultUrlSerializer\"}},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"Router\"},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_f\"},\"deps\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ApplicationRef\",\"line\":63,\"character\":6},{\"__symbolic\":\"reference\",\"name\":\"UrlSerializer\"},{\"__symbolic\":\"reference\",\"name\":\"ChildrenOutletContexts\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"Location\",\"line\":63,\"character\":61},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injector\",\"line\":63,\"character\":71},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModuleFactoryLoader\",\"line\":64,\"character\":6},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Compiler\",\"line\":64,\"character\":29},{\"__symbolic\":\"reference\",\"name\":\"ROUTES\"},{\"__symbolic\":\"reference\",\"name\":\"ROUTER_CONFIGURATION\"},[{\"__symbolic\":\"reference\",\"name\":\"UrlHandlingStrategy\"},{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":65,\"character\":32}}],[{\"__symbolic\":\"reference\",\"name\":\"RouteReuseStrategy\"},{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":65,\"character\":70}}]]},{\"__symbolic\":\"reference\",\"name\":\"ChildrenOutletContexts\"},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ActivatedRoute\"},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_g\"},\"deps\":[{\"__symbolic\":\"reference\",\"name\":\"Router\"}]},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModuleFactoryLoader\",\"line\":70,\"character\":12},\"useClass\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"SystemJsNgModuleLoader\",\"line\":70,\"character\":45}},{\"__symbolic\":\"reference\",\"name\":\"RouterPreloader\"},{\"__symbolic\":\"reference\",\"name\":\"NoPreloading\"},{\"__symbolic\":\"reference\",\"name\":\"PreloadAllModules\"},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ROUTER_CONFIGURATION\"},\"useValue\":{\"enableTracing\":false}}],\"ɵflatten\":{\"__symbolic\":\"function\",\"parameters\":[\"arr\"],\"value\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Array\"},\"member\":\"prototype\"},\"member\":\"concat\"},\"member\":\"apply\"},\"arguments\":[[],{\"__symbolic\":\"reference\",\"name\":\"arr\"}]}},\"ɵangular_packages_router_router_l\":{\"__symbolic\":\"class\",\"arity\":1,\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_m\"}]}],\"parent\":[{\"__symbolic\":\"method\"}],\"children\":[{\"__symbolic\":\"method\"}],\"firstChild\":[{\"__symbolic\":\"method\"}],\"siblings\":[{\"__symbolic\":\"method\"}],\"pathFromRoot\":[{\"__symbolic\":\"method\"}]}},\"ɵangular_packages_router_router_m\":{\"__symbolic\":\"class\",\"arity\":1,\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"error\",\"message\":\"Could not resolve type\",\"line\":86,\"character\":28,\"context\":{\"typeName\":\"T\"},\"module\":\"./src/utils/tree\"},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_router_router_m\"}]}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"ɵangular_packages_router_router_n\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Router\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"ViewportScroller\",\"line\":28,\"character\":64},{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":28,\"character\":99,\"module\":\"./src/router_scroller\"}]}],\"init\":[{\"__symbolic\":\"method\"}],\"createScrollEvents\":[{\"__symbolic\":\"method\"}],\"consumeScrollEvents\":[{\"__symbolic\":\"method\"}],\"scheduleScrollEvent\":[{\"__symbolic\":\"method\"}],\"ngOnDestroy\":[{\"__symbolic\":\"method\"}]}}},\"origins\":{\"ɵangular_packages_router_router_a\":\"./src/router_module\",\"ɵangular_packages_router_router_b\":\"./src/router_module\",\"ɵangular_packages_router_router_c\":\"./src/router_module\",\"ɵangular_packages_router_router_d\":\"./src/router_module\",\"ɵangular_packages_router_router_e\":\"./src/router_module\",\"ɵangular_packages_router_router_f\":\"./src/router_module\",\"ɵangular_packages_router_router_g\":\"./src/router_module\",\"ɵangular_packages_router_router_h\":\"./src/router_module\",\"ɵangular_packages_router_router_i\":\"./src/router_module\",\"ɵangular_packages_router_router_j\":\"./src/router_module\",\"ɵangular_packages_router_router_k\":\"./src/router_module\",\"Data\":\"./src/config\",\"LoadChildren\":\"./src/config\",\"LoadChildrenCallback\":\"./src/config\",\"ResolveData\":\"./src/config\",\"Route\":\"./src/config\",\"Routes\":\"./src/config\",\"RunGuardsAndResolvers\":\"./src/config\",\"UrlMatchResult\":\"./src/config\",\"UrlMatcher\":\"./src/config\",\"RouterLink\":\"./src/directives/router_link\",\"RouterLinkWithHref\":\"./src/directives/router_link\",\"RouterLinkActive\":\"./src/directives/router_link_active\",\"RouterOutlet\":\"./src/directives/router_outlet\",\"ActivationEnd\":\"./src/events\",\"ActivationStart\":\"./src/events\",\"ChildActivationEnd\":\"./src/events\",\"ChildActivationStart\":\"./src/events\",\"Event\":\"./src/events\",\"GuardsCheckEnd\":\"./src/events\",\"GuardsCheckStart\":\"./src/events\",\"NavigationCancel\":\"./src/events\",\"NavigationEnd\":\"./src/events\",\"NavigationError\":\"./src/events\",\"NavigationStart\":\"./src/events\",\"ResolveEnd\":\"./src/events\",\"ResolveStart\":\"./src/events\",\"RouteConfigLoadEnd\":\"./src/events\",\"RouteConfigLoadStart\":\"./src/events\",\"RouterEvent\":\"./src/events\",\"RoutesRecognized\":\"./src/events\",\"Scroll\":\"./src/events\",\"CanActivate\":\"./src/interfaces\",\"CanActivateChild\":\"./src/interfaces\",\"CanDeactivate\":\"./src/interfaces\",\"CanLoad\":\"./src/interfaces\",\"Resolve\":\"./src/interfaces\",\"DetachedRouteHandle\":\"./src/route_reuse_strategy\",\"RouteReuseStrategy\":\"./src/route_reuse_strategy\",\"NavigationExtras\":\"./src/router\",\"Router\":\"./src/router\",\"ROUTES\":\"./src/router_config_loader\",\"ExtraOptions\":\"./src/router_module\",\"ROUTER_CONFIGURATION\":\"./src/router_module\",\"ROUTER_INITIALIZER\":\"./src/router_module\",\"RouterModule\":\"./src/router_module\",\"provideRoutes\":\"./src/router_module\",\"ChildrenOutletContexts\":\"./src/router_outlet_context\",\"OutletContext\":\"./src/router_outlet_context\",\"NoPreloading\":\"./src/router_preloader\",\"PreloadAllModules\":\"./src/router_preloader\",\"PreloadingStrategy\":\"./src/router_preloader\",\"RouterPreloader\":\"./src/router_preloader\",\"ActivatedRoute\":\"./src/router_state\",\"ActivatedRouteSnapshot\":\"./src/router_state\",\"RouterState\":\"./src/router_state\",\"RouterStateSnapshot\":\"./src/router_state\",\"PRIMARY_OUTLET\":\"./src/shared\",\"ParamMap\":\"./src/shared\",\"Params\":\"./src/shared\",\"convertToParamMap\":\"./src/shared\",\"UrlHandlingStrategy\":\"./src/url_handling_strategy\",\"DefaultUrlSerializer\":\"./src/url_tree\",\"UrlSegment\":\"./src/url_tree\",\"UrlSegmentGroup\":\"./src/url_tree\",\"UrlSerializer\":\"./src/url_tree\",\"UrlTree\":\"./src/url_tree\",\"VERSION\":\"./src/version\",\"ɵEmptyOutletComponent\":\"./src/components/empty_outlet\",\"ɵROUTER_PROVIDERS\":\"./src/router_module\",\"ɵflatten\":\"./src/utils/collection\",\"ɵangular_packages_router_router_l\":\"./src/utils/tree\",\"ɵangular_packages_router_router_m\":\"./src/utils/tree\",\"ɵangular_packages_router_router_n\":\"./src/router_scroller\"},\"importAs\":\"@angular/router\"}"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/src/providers.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationDriver, ɵAnimationEngine as AnimationEngine, ɵAnimationStyleNormalizer as AnimationStyleNormalizer, ɵCssKeyframesDriver as CssKeyframesDriver, ɵWebAnimationsDriver as WebAnimationsDriver, ɵWebAnimationsStyleNormalizer as WebAnimationsStyleNormalizer } from '@angular/animations/browser';\nimport { InjectionToken, NgZone, Provider } from '@angular/core';\nimport { ɵDomRendererFactory2 as DomRendererFactory2 } from '@angular/platform-browser';\nimport { AnimationRendererFactory } from './animation_renderer';\nexport declare class InjectableAnimationEngine extends AnimationEngine {\n    constructor(doc: any, driver: AnimationDriver, normalizer: AnimationStyleNormalizer);\n}\nexport declare function instantiateSupportedAnimationDriver(): WebAnimationsDriver | CssKeyframesDriver;\nexport declare function instantiateDefaultStyleNormalizer(): WebAnimationsStyleNormalizer;\nexport declare function instantiateRendererFactory(renderer: DomRendererFactory2, engine: AnimationEngine, zone: NgZone): AnimationRendererFactory;\n/**\n * @experimental Animation support is experimental.\n */\nexport declare const ANIMATION_MODULE_TYPE: InjectionToken<\"NoopAnimations\" | \"BrowserAnimations\">;\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserModule.\n */\nexport declare const BROWSER_ANIMATIONS_PROVIDERS: Provider[];\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserTestingModule.\n */\nexport declare const BROWSER_NOOP_ANIMATIONS_PROVIDERS: Provider[];\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/debug/ng_probe.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as core from '@angular/core';\n/**\n * Returns a {@link DebugElement} for the given native DOM element, or\n * null if the given native element does not have an Angular view associated\n * with it.\n */\nexport declare function inspectNativeElement(element: any): core.DebugNode | null;\nexport declare function _createNgProbe(coreTokens: core.NgProbeToken[]): any;\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n */\nexport declare const ELEMENT_PROBE_PROVIDERS: core.Provider[];\n"
  },
  {
    "path": "node_modules/@angular/router/src/router_scroller.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewportScroller } from '@angular/common';\nimport { OnDestroy } from '@angular/core';\nimport { Router } from './router';\nexport declare class RouterScroller implements OnDestroy {\n    private router;\n    /** @docsNotRequired */ readonly viewportScroller: ViewportScroller;\n    private options;\n    private routerEventsSubscription;\n    private scrollEventsSubscription;\n    private lastId;\n    private lastSource;\n    private restoredId;\n    private store;\n    constructor(router: Router, \n    /** @docsNotRequired */ viewportScroller: ViewportScroller, options?: {\n        scrollPositionRestoration?: 'disabled' | 'enabled' | 'top';\n        anchorScrolling?: 'disabled' | 'enabled';\n    });\n    init(): void;\n    private createScrollEvents;\n    private consumeScrollEvents;\n    private scheduleScrollEvent;\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/platform-browser-dynamic';\n"
  },
  {
    "path": "node_modules/@angular/router/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/router/testing/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/forms/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/forms';\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/abstract_form_group_directive.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '../model';\nimport { ControlContainer } from './control_container';\nimport { Form } from './form_interface';\nimport { AsyncValidatorFn, ValidatorFn } from './validators';\n/**\n * @description\n * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.\n *\n */\nexport declare class AbstractFormGroupDirective extends ControlContainer implements OnInit, OnDestroy {\n    /**\n     * @description\n     * An internal callback method triggered on the instance after the inputs are set.\n     * Registers the group with its parent group.\n     */\n    ngOnInit(): void;\n    /**\n     * @description\n     * An internal callback method triggered before the instance is destroyed.\n     * Removes the group from its parent group.\n     */\n    ngOnDestroy(): void;\n    /**\n     * @description\n     * The `FormGroup` bound to this directive.\n     */\n    readonly control: FormGroup;\n    /**\n     * @description\n     * The path to this group from the top-level directive.\n     */\n    readonly path: string[];\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    readonly formDirective: Form | null;\n    /**\n     * @description\n     * The synchronous validators registered with this group.\n     */\n    readonly validator: ValidatorFn | null;\n    /**\n     * @description\n     * The async validators registered with this group.\n     */\n    readonly asyncValidator: AsyncValidatorFn | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/abstract_control_directive.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { AbstractControl } from '../model';\nimport { ValidationErrors } from './validators';\n/**\n * @description\n * Base class for control directives.\n *\n * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.\n *\n */\nexport declare abstract class AbstractControlDirective {\n    /**\n     * @description\n     * A reference to the underlying control.\n     *\n     * @returns the control that backs this directive. Most properties fall through to that instance.\n     */\n    abstract readonly control: AbstractControl | null;\n    /**\n     * @description\n     * Reports the value of the control if it is present, otherwise null.\n     */\n    readonly value: any;\n    /**\n     * @description\n     * Reports whether the control is valid. A control is considered valid if no\n     * validation errors exist with the current value.\n     * If the control is not present, null is returned.\n     */\n    readonly valid: boolean | null;\n    /**\n     * @description\n     * Reports whether the control is invalid, meaning that an error exists in the input value.\n     * If the control is not present, null is returned.\n     */\n    readonly invalid: boolean | null;\n    /**\n     * @description\n     * Reports whether a control is pending, meaning that that async validation is occurring and\n     * errors are not yet available for the input value. If the control is not present, null is\n     * returned.\n     */\n    readonly pending: boolean | null;\n    /**\n     * @description\n     * Reports whether the control is disabled, meaning that the control is disabled\n     * in the UI and is exempt from validation checks and excluded from aggregate\n     * values of ancestor controls. If the control is not present, null is returned.\n     */\n    readonly disabled: boolean | null;\n    /**\n     * @description\n     * Reports whether the control is enabled, meaning that the control is included in ancestor\n     * calculations of validity or value. If the control is not present, null is returned.\n     */\n    readonly enabled: boolean | null;\n    /**\n     * @description\n     * Reports the control's validation errors. If the control is not present, null is returned.\n     */\n    readonly errors: ValidationErrors | null;\n    /**\n     * @description\n     * Reports whether the control is pristine, meaning that the user has not yet changed\n     * the value in the UI. If the control is not present, null is returned.\n     */\n    readonly pristine: boolean | null;\n    /**\n     * @description\n     * Reports whether the control is dirty, meaning that the user has changed\n     * the value in the UI. If the control is not present, null is returned.\n     */\n    readonly dirty: boolean | null;\n    /**\n     * @description\n     * Reports whether the control is touched, meaning that the user has triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     */\n    readonly touched: boolean | null;\n    /**\n     * @description\n     * Reports the validation status of the control. Possible values include:\n     * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.\n     * If the control is not present, null is returned.\n     */\n    readonly status: string | null;\n    /**\n     * @description\n     * Reports whether the control is untouched, meaning that the user has not yet triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     */\n    readonly untouched: boolean | null;\n    /**\n     * @description\n     * Returns a multicasting observable that emits a validation status whenever it is\n     * calculated for the control. If the control is not present, null is returned.\n     */\n    readonly statusChanges: Observable<any> | null;\n    /**\n     * @description\n     * Returns a multicasting observable of value changes for the control that emits every time the\n     * value of the control changes in the UI or programmatically.\n     * If the control is not present, null is returned.\n     */\n    readonly valueChanges: Observable<any> | null;\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    readonly path: string[] | null;\n    /**\n     * @description\n     * Resets the control with the provided value if the control is present.\n     */\n    reset(value?: any): void;\n    /**\n     * @description\n     * Reports whether the control with the given path has the error specified.\n     * If no path is given, it checks for the error on the present control.\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode: string, path?: string[]): boolean;\n    /**\n     * @description\n     * Reports error data for the control with the given path.\n     * If the control is not present, null is returned.\n     */\n    getError(errorCode: string, path?: string[]): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/router_module.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HashLocationStrategy, Location, PathLocationStrategy, PlatformLocation, ViewportScroller } from '@angular/common';\nimport { ApplicationRef, Compiler, ComponentRef, InjectionToken, Injector, ModuleWithProviders, NgModuleFactoryLoader, NgProbeToken, Provider } from '@angular/core';\nimport { Route, Routes } from './config';\nimport { RouteReuseStrategy } from './route_reuse_strategy';\nimport { ErrorHandler, Router } from './router';\nimport { ChildrenOutletContexts } from './router_outlet_context';\nimport { RouterScroller } from './router_scroller';\nimport { ActivatedRoute } from './router_state';\nimport { UrlHandlingStrategy } from './url_handling_strategy';\nimport { UrlSerializer, UrlTree } from './url_tree';\n/**\n * @description\n *\n * Is used in DI to configure the router.\n *\n *\n */\nexport declare const ROUTER_CONFIGURATION: InjectionToken<ExtraOptions>;\n/**\n * @docsNotRequired\n */\nexport declare const ROUTER_FORROOT_GUARD: InjectionToken<void>;\nexport declare const ROUTER_PROVIDERS: Provider[];\nexport declare function routerNgProbeToken(): NgProbeToken;\n/**\n * @usageNotes\n *\n * RouterModule can be imported multiple times: once per lazily-loaded bundle.\n * Since the router deals with a global shared resource--location, we cannot have\n * more than one router service active.\n *\n * That is why there are two ways to create the module: `RouterModule.forRoot` and\n * `RouterModule.forChild`.\n *\n * * `forRoot` creates a module that contains all the directives, the given routes, and the router\n *   service itself.\n * * `forChild` creates a module that contains all the directives and the given routes, but does not\n *   include the router service.\n *\n * When registered at the root, the module should be used as follows\n *\n * ```\n * @NgModule({\n *   imports: [RouterModule.forRoot(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * For submodules and lazy loaded submodules the module should be used as follows:\n *\n * ```\n * @NgModule({\n *   imports: [RouterModule.forChild(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * @description\n *\n * Adds router directives and providers.\n *\n * Managing state transitions is one of the hardest parts of building applications. This is\n * especially true on the web, where you also need to ensure that the state is reflected in the URL.\n * In addition, we often want to split applications into multiple bundles and load them on demand.\n * Doing this transparently is not trivial.\n *\n * The Angular router solves these problems. Using the router, you can declaratively specify\n * application states, manage state transitions while taking care of the URL, and load bundles on\n * demand.\n *\n * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an\n * overview of how the router should be used.\n *\n *\n */\nexport declare class RouterModule {\n    constructor(guard: any, router: Router);\n    /**\n     * Creates a module with all the router providers and directives. It also optionally sets up an\n     * application listener to perform an initial navigation.\n     *\n     * Options (see `ExtraOptions`):\n     * * `enableTracing` makes the router log all its internal events to the console.\n     * * `useHash` enables the location strategy that uses the URL fragment instead of the history\n     * API.\n     * * `initialNavigation` disables the initial navigation.\n     * * `errorHandler` provides a custom error handler.\n     * * `preloadingStrategy` configures a preloading strategy (see `PreloadAllModules`).\n     * * `onSameUrlNavigation` configures how the router handles navigation to the current URL. See\n     * `ExtraOptions` for more details.\n     * * `paramsInheritanceStrategy` defines how the router merges params, data and resolved data\n     * from parent to child routes.\n     */\n    static forRoot(routes: Routes, config?: ExtraOptions): ModuleWithProviders<RouterModule>;\n    /**\n     * Creates a module with all the router directives and a provider registering routes.\n     */\n    static forChild(routes: Routes): ModuleWithProviders<RouterModule>;\n}\nexport declare function createRouterScroller(router: Router, viewportScroller: ViewportScroller, config: ExtraOptions): RouterScroller;\nexport declare function provideLocationStrategy(platformLocationStrategy: PlatformLocation, baseHref: string, options?: ExtraOptions): HashLocationStrategy | PathLocationStrategy;\nexport declare function provideForRootGuard(router: Router): any;\n/**\n * @description\n *\n * Registers routes.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @NgModule({\n *   imports: [RouterModule.forChild(ROUTES)],\n *   providers: [provideRoutes(EXTRA_ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n *\n */\nexport declare function provideRoutes(routes: Routes): any;\n/**\n * @description\n *\n * Represents an option to configure when the initial navigation is performed.\n *\n * * 'enabled' - the initial navigation starts before the root component is created.\n * The bootstrap is blocked until the initial navigation is complete.\n * * 'disabled' - the initial navigation is not performed. The location listener is set up before\n * the root component gets created.\n * * 'legacy_enabled'- the initial navigation starts after the root component has been created.\n * The bootstrap is not blocked until the initial navigation is complete. @deprecated\n * * 'legacy_disabled'- the initial navigation is not performed. The location listener is set up\n * after @deprecated\n * the root component gets created.\n * * `true` - same as 'legacy_enabled'. @deprecated since v4\n * * `false` - same as 'legacy_disabled'. @deprecated since v4\n *\n * The 'enabled' option should be used for applications unless there is a reason to have\n * more control over when the router starts its initial navigation due to some complex\n * initialization logic. In this case, 'disabled' should be used.\n *\n * The 'legacy_enabled' and 'legacy_disabled' should not be used for new applications.\n *\n * @experimental\n */\nexport declare type InitialNavigation = true | false | 'enabled' | 'disabled' | 'legacy_enabled' | 'legacy_disabled';\n/**\n * @description\n *\n * Represents options to configure the router.\n *\n *\n */\nexport interface ExtraOptions {\n    /**\n     * Makes the router log all its internal events to the console.\n     */\n    enableTracing?: boolean;\n    /**\n     * Enables the location strategy that uses the URL fragment instead of the history API.\n     */\n    useHash?: boolean;\n    /**\n     * Disables the initial navigation.\n     */\n    initialNavigation?: InitialNavigation;\n    /**\n     * A custom error handler.\n     */\n    errorHandler?: ErrorHandler;\n    /**\n     * Configures a preloading strategy. See `PreloadAllModules`.\n     */\n    preloadingStrategy?: any;\n    /**\n     * Define what the router should do if it receives a navigation request to the current URL.\n     * By default, the router will ignore this navigation. However, this prevents features such\n     * as a \"refresh\" button. Use this option to configure the behavior when navigating to the\n     * current URL. Default is 'ignore'.\n     */\n    onSameUrlNavigation?: 'reload' | 'ignore';\n    /**\n     * Configures if the scroll position needs to be restored when navigating back.\n     *\n     * * 'disabled'--does nothing (default).\n     * * 'top'--set the scroll position to 0,0..\n     * * 'enabled'--set the scroll position to the stored position. This option will be the default in\n     * the future.\n     *\n     * When enabled, the router stores and restores scroll positions during navigation.\n     * When navigating forward, the scroll position will be set to [0, 0], or to the anchor\n     * if one is provided.\n     *\n     * You can implement custom scroll restoration behavior as follows.\n     * ```typescript\n     * class AppModule {\n     *  constructor(router: Router, viewportScroller: ViewportScroller, store: Store<AppState>) {\n     *    router.events.pipe(filter(e => e instanceof Scroll), switchMap(e => {\n     *      return store.pipe(first(), timeout(200), map(() => e));\n     *    }).subscribe(e => {\n     *      if (e.position) {\n     *        viewportScroller.scrollToPosition(e.position);\n     *      } else if (e.anchor) {\n     *        viewportScroller.scrollToAnchor(e.anchor);\n     *      } else {\n     *        viewportScroller.scrollToPosition([0, 0]);\n     *      }\n     *    });\n     *  }\n     * }\n     * ```\n     *\n     * You can also implement component-specific scrolling like this:\n     *\n     * ```typescript\n     * class ListComponent {\n     *   list: any[];\n     *   constructor(router: Router, viewportScroller: ViewportScroller, fetcher: ListFetcher) {\n     *     const scrollEvents = router.events.filter(e => e instanceof Scroll);\n     *     listFetcher.fetch().pipe(withLatestFrom(scrollEvents)).subscribe(([list, e]) => {\n     *       this.list = list;\n     *       if (e.position) {\n     *         viewportScroller.scrollToPosition(e.position);\n     *       } else {\n     *         viewportScroller.scrollToPosition([0, 0]);\n     *       }\n     *     });\n     *   }\n     * }\n     */\n    scrollPositionRestoration?: 'disabled' | 'enabled' | 'top';\n    /**\n     * Configures if the router should scroll to the element when the url has a fragment.\n     *\n     * * 'disabled'--does nothing (default).\n     * * 'enabled'--scrolls to the element. This option will be the default in the future.\n     *\n     * Anchor scrolling does not happen on 'popstate'. Instead, we restore the position\n     * that we stored or scroll to the top.\n     */\n    anchorScrolling?: 'disabled' | 'enabled';\n    /**\n     * Configures the scroll offset the router will use when scrolling to an element.\n     *\n     * When given a tuple with two numbers, the router will always use the numbers.\n     * When given a function, the router will invoke the function every time it restores scroll\n     * position.\n     */\n    scrollOffset?: [number, number] | (() => [number, number]);\n    /**\n     * Defines how the router merges params, data and resolved data from parent to child\n     * routes. Available options are:\n     *\n     * - `'emptyOnly'`, the default, only inherits parent params for path-less or component-less\n     *   routes.\n     * - `'always'`, enables unconditional inheritance of parent params.\n     */\n    paramsInheritanceStrategy?: 'emptyOnly' | 'always';\n    /**\n     * A custom malformed uri error handler function. This handler is invoked when encodedURI contains\n     * invalid character sequences. The default implementation is to redirect to the root url dropping\n     * any path or param info. This function passes three parameters:\n     *\n     * - `'URIError'` - Error thrown when parsing a bad URL\n     * - `'UrlSerializer'` - UrlSerializer that’s configured with the router.\n     * - `'url'` -  The malformed URL that caused the URIError\n     * */\n    malformedUriErrorHandler?: (error: URIError, urlSerializer: UrlSerializer, url: string) => UrlTree;\n    /**\n     * Defines when the router updates the browser URL. The default behavior is to update after\n     * successful navigation. However, some applications may prefer a mode where the URL gets\n     * updated at the beginning of navigation. The most common use case would be updating the\n     * URL early so if navigation fails, you can show an error message with the URL that failed.\n     * Available options are:\n     *\n     * - `'deferred'`, the default, updates the browser URL after navigation has finished.\n     * - `'eager'`, updates browser URL at the beginning of navigation.\n     */\n    urlUpdateStrategy?: 'deferred' | 'eager';\n    /**\n     * Enables a bug fix that corrects relative link resolution in components with empty paths.\n     * Example:\n     *\n     * ```\n     * const routes = [\n     *   {\n     *     path: '',\n     *     component: ContainerComponent,\n     *     children: [\n     *       { path: 'a', component: AComponent },\n     *       { path: 'b', component: BComponent },\n     *     ]\n     *   }\n     * ];\n     * ```\n     *\n     * From the `ContainerComponent`, this will not work:\n     *\n     * `<a [routerLink]=\"['./a']\">Link to A</a>`\n     *\n     * However, this will work:\n     *\n     * `<a [routerLink]=\"['../a']\">Link to A</a>`\n     *\n     * In other words, you're required to use `../` rather than `./`. The current default in v6\n     * is `legacy`, and this option will be removed in v7 to default to the corrected behavior.\n     */\n    relativeLinkResolution?: 'legacy' | 'corrected';\n}\nexport declare function setupRouter(ref: ApplicationRef, urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts, location: Location, injector: Injector, loader: NgModuleFactoryLoader, compiler: Compiler, config: Route[][], opts?: ExtraOptions, urlHandlingStrategy?: UrlHandlingStrategy, routeReuseStrategy?: RouteReuseStrategy): Router;\nexport declare function rootRoute(router: Router): ActivatedRoute;\n/**\n * To initialize the router properly we need to do in two steps:\n *\n * We need to start the navigation in a APP_INITIALIZER to block the bootstrap if\n * a resolver or a guards executes asynchronously. Second, we need to actually run\n * activation in a BOOTSTRAP_LISTENER. We utilize the afterPreactivation\n * hook provided by the router to do that.\n *\n * The router navigation starts, reaches the point when preactivation is done, and then\n * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.\n */\nexport declare class RouterInitializer {\n    private injector;\n    private initNavigation;\n    private resultOfPreactivationDone;\n    constructor(injector: Injector);\n    appInitializer(): Promise<any>;\n    bootstrapListener(bootstrappedComponentRef: ComponentRef<any>): void;\n    private isLegacyEnabled;\n    private isLegacyDisabled;\n}\nexport declare function getAppInitializer(r: RouterInitializer): any;\nexport declare function getBootstrapListener(r: RouterInitializer): any;\n/**\n * A token for the router initializer that will be called after the app is bootstrapped.\n *\n * @experimental\n */\nexport declare const ROUTER_INITIALIZER: InjectionToken<(compRef: ComponentRef<any>) => void>;\nexport declare function provideRouterInitializer(): (typeof RouterInitializer | {\n    provide: InjectionToken<(() => void)[]>;\n    multi: boolean;\n    useFactory: typeof getAppInitializer;\n    deps: (typeof RouterInitializer)[];\n    useExisting?: undefined;\n} | {\n    provide: InjectionToken<(compRef: ComponentRef<any>) => void>;\n    useFactory: typeof getBootstrapListener;\n    deps: (typeof RouterInitializer)[];\n    multi?: undefined;\n    useExisting?: undefined;\n} | {\n    provide: InjectionToken<((compRef: ComponentRef<any>) => void)[]>;\n    multi: boolean;\n    useExisting: InjectionToken<(compRef: ComponentRef<any>) => void>;\n    useFactory?: undefined;\n    deps?: undefined;\n})[];\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/core/core.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { APPLICATION_MODULE_PROVIDERS as ɵangular_packages_core_core_l, _iterableDiffersFactory as ɵangular_packages_core_core_i, _keyValueDiffersFactory as ɵangular_packages_core_core_j, _localeFactory as ɵangular_packages_core_core_k } from './src/application_module';\nexport { _appIdRandomProviderFactory as ɵangular_packages_core_core_f } from './src/application_tokens';\nexport { DefaultIterableDifferFactory as ɵangular_packages_core_core_g } from './src/change_detection/differs/default_iterable_differ';\nexport { DefaultKeyValueDifferFactory as ɵangular_packages_core_core_h } from './src/change_detection/differs/default_keyvalue_differ';\nexport { ReflectiveInjector_ as ɵangular_packages_core_core_c } from './src/di/reflective_injector';\nexport { ReflectiveDependency as ɵangular_packages_core_core_d, resolveReflectiveProviders as ɵangular_packages_core_core_e } from './src/di/reflective_provider';\nexport { wtfEnabled as ɵangular_packages_core_core_m } from './src/profile/profile';\nexport { createScope as ɵangular_packages_core_core_o, detectWTF as ɵangular_packages_core_core_n, endTimeRange as ɵangular_packages_core_core_r, leave as ɵangular_packages_core_core_p, startTimeRange as ɵangular_packages_core_core_q } from './src/profile/wtf_impl';\nexport { NG_INJECTABLE_DEF as ɵangular_packages_core_core_bb } from './src/render3/fields';\nexport { _getViewData as ɵangular_packages_core_core_w, bindingUpdated as ɵangular_packages_core_core_x, getPreviousOrParentTNode as ɵangular_packages_core_core_v } from './src/render3/instructions';\nexport { LViewData as ɵangular_packages_core_core_bd } from './src/render3/interfaces/view';\nexport { getOrCreatePlayerContext as ɵangular_packages_core_core_bf } from './src/render3/styling/util';\nexport { loadInternal as ɵangular_packages_core_core_be } from './src/render3/util';\nexport { createElementRef as ɵangular_packages_core_core_y, createTemplateRef as ɵangular_packages_core_core_z, createViewRef as ɵangular_packages_core_core_ba } from './src/render3/view_engine_compatibility';\nexport { makeParamDecorator as ɵangular_packages_core_core_a, makePropDecorator as ɵangular_packages_core_core_b } from './src/util/decorators';\nexport { getClosureSafeProperty as ɵangular_packages_core_core_bc } from './src/util/property';\nexport { _def as ɵangular_packages_core_core_s } from './src/view/provider';\nexport { DebugRendererFactory2 as ɵangular_packages_core_core_t } from './src/view/services';\nexport { DebugContext as ɵangular_packages_core_core_u } from './src/view/types';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/testing/src/testing.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PlatformRef, StaticProvider } from '@angular/core';\nexport * from './private_export_testing';\nexport declare const platformBrowserDynamicTesting: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;\n/**\n * NgModule for testing.\n *\n *\n */\nexport declare class BrowserDynamicTestingModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/core/core.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"ɵangular_packages_core_core_a\":{\"__symbolic\":\"function\"},\"ɵangular_packages_core_core_b\":{\"__symbolic\":\"function\"},\"ɵangular_packages_core_core_c\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ResolvedReflectiveProvider\"}]},{\"__symbolic\":\"reference\",\"name\":\"Injector\"}]}],\"get\":[{\"__symbolic\":\"method\"}],\"resolveAndCreateChild\":[{\"__symbolic\":\"method\"}],\"createChildFromResolved\":[{\"__symbolic\":\"method\"}],\"resolveAndInstantiate\":[{\"__symbolic\":\"method\"}],\"instantiateResolved\":[{\"__symbolic\":\"method\"}],\"getProviderAtIndex\":[{\"__symbolic\":\"method\"}],\"_new\":[{\"__symbolic\":\"method\"}],\"_getMaxNumberOfObjects\":[{\"__symbolic\":\"method\"}],\"_instantiateProvider\":[{\"__symbolic\":\"method\"}],\"_instantiate\":[{\"__symbolic\":\"method\"}],\"_getByReflectiveDependency\":[{\"__symbolic\":\"method\"}],\"_getByKey\":[{\"__symbolic\":\"method\"}],\"_getObjByKeyId\":[{\"__symbolic\":\"method\"}],\"_throwOrNull\":[{\"__symbolic\":\"method\"}],\"_getByKeySelf\":[{\"__symbolic\":\"method\"}],\"_getByKeyDefault\":[{\"__symbolic\":\"method\"}],\"toString\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"INJECTOR_KEY\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"./reflective_key\",\"name\":\"ReflectiveKey\",\"line\":270,\"character\":32},\"member\":\"get\"},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"./injector\",\"name\":\"Injector\",\"line\":270,\"character\":50}]}}},\"ɵangular_packages_core_core_d\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ReflectiveKey\"},{\"__symbolic\":\"reference\",\"name\":\"boolean\"},{\"__symbolic\":\"reference\",\"name\":\"Self\"}]}]},\"statics\":{\"fromKey\":{\"__symbolic\":\"function\",\"parameters\":[\"key\"],\"value\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_d\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"key\"},false,null]}}}},\"ɵangular_packages_core_core_e\":{\"__symbolic\":\"function\"},\"ɵangular_packages_core_core_f\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to a non-exported function\",\"line\":38,\"character\":9,\"context\":{\"name\":\"_randomChar\"},\"module\":\"./src/application_tokens\"}},\"ɵangular_packages_core_core_g\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\"}],\"supports\":[{\"__symbolic\":\"method\"}],\"create\":[{\"__symbolic\":\"method\"}]}},\"ɵangular_packages_core_core_h\":{\"__symbolic\":\"class\",\"arity\":2,\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\"}],\"supports\":[{\"__symbolic\":\"method\"}],\"create\":[{\"__symbolic\":\"method\"}]}},\"ɵangular_packages_core_core_i\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"reference\",\"name\":\"ɵdefaultIterableDiffers\"}},\"ɵangular_packages_core_core_j\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"reference\",\"name\":\"ɵdefaultKeyValueDiffers\"}},\"ɵangular_packages_core_core_k\":{\"__symbolic\":\"function\",\"parameters\":[\"locale\"],\"value\":{\"__symbolic\":\"binop\",\"operator\":\"||\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"locale\"},\"right\":\"en-US\"}},\"ɵangular_packages_core_core_l\":[{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ApplicationRef\"},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ApplicationRef\"},\"deps\":[{\"__symbolic\":\"reference\",\"name\":\"NgZone\"},{\"__symbolic\":\"reference\",\"name\":\"ɵConsole\"},{\"__symbolic\":\"reference\",\"name\":\"Injector\"},{\"__symbolic\":\"reference\",\"name\":\"ErrorHandler\"},{\"__symbolic\":\"reference\",\"name\":\"ComponentFactoryResolver\"},{\"__symbolic\":\"reference\",\"name\":\"ApplicationInitStatus\"}]},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ApplicationInitStatus\"},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ApplicationInitStatus\"},\"deps\":[[{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Optional\"}},{\"__symbolic\":\"reference\",\"name\":\"APP_INITIALIZER\"}]]},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"Compiler\"},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"Compiler\"},\"deps\":[]},{\"__symbolic\":\"reference\",\"name\":\"ɵAPP_ID_RANDOM_PROVIDER\"},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"IterableDiffers\"},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_i\"},\"deps\":[]},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"KeyValueDiffers\"},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_j\"},\"deps\":[]},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"LOCALE_ID\"},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_k\"},\"deps\":[[{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Inject\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"LOCALE_ID\"}]},{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Optional\"}},{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"SkipSelf\"}}]]}],\"ɵangular_packages_core_core_m\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_n\"}},\"ɵangular_packages_core_core_n\":{\"__symbolic\":\"function\"},\"ɵangular_packages_core_core_o\":{\"__symbolic\":\"function\",\"parameters\":[\"signature\",\"flags\"],\"defaults\":[null,null],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":37,\"character\":4,\"context\":{\"name\":\"events\"},\"module\":\"./src/profile/wtf_impl\"}},\"ɵangular_packages_core_core_p\":{\"__symbolic\":\"function\"},\"ɵangular_packages_core_core_q\":{\"__symbolic\":\"function\",\"parameters\":[\"rangeType\",\"action\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":36,\"character\":4,\"context\":{\"name\":\"trace\"},\"module\":\"./src/profile/wtf_impl\"}},\"ɵangular_packages_core_core_r\":{\"__symbolic\":\"function\"},\"ɵangular_packages_core_core_s\":{\"__symbolic\":\"function\"},\"ɵangular_packages_core_core_t\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"RendererFactory2\"}]}],\"createRenderer\":[{\"__symbolic\":\"method\"}],\"begin\":[{\"__symbolic\":\"method\"}],\"end\":[{\"__symbolic\":\"method\"}],\"whenRenderingDone\":[{\"__symbolic\":\"method\"}]}},\"ɵangular_packages_core_core_u\":{\"__symbolic\":\"class\",\"members\":{\"logError\":[{\"__symbolic\":\"method\"}]}},\"ɵangular_packages_core_core_v\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":140,\"character\":4,\"context\":{\"name\":\"previousOrParentTNode\"},\"module\":\"./src/render3/instructions\"}},\"ɵangular_packages_core_core_w\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":199,\"character\":4,\"context\":{\"name\":\"viewData\"},\"module\":\"./src/render3/instructions\"}},\"ɵangular_packages_core_core_x\":{\"__symbolic\":\"function\"},\"ɵangular_packages_core_core_y\":{\"__symbolic\":\"function\"},\"ɵangular_packages_core_core_z\":{\"__symbolic\":\"function\"},\"ɵangular_packages_core_core_ba\":{\"__symbolic\":\"function\"},\"ANALYZE_FOR_ENTRY_COMPONENTS\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"InjectionToken\"},\"arguments\":[\"AnalyzeForEntryComponents\"]},\"Attribute\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_a\"},\"arguments\":[\"Attribute\",{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":110,\"character\":36,\"module\":\"./src/metadata/di\"}]},\"ContentChild\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_b\"},\"arguments\":[\"ContentChild\",{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":246,\"character\":20,\"module\":\"./src/metadata/di\"},{\"__symbolic\":\"reference\",\"name\":\"Query\"}]},\"ContentChildDecorator\":{\"__symbolic\":\"interface\"},\"ContentChildren\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_b\"},\"arguments\":[\"ContentChildren\",{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":190,\"character\":4,\"module\":\"./src/metadata/di\"},{\"__symbolic\":\"reference\",\"name\":\"Query\"}]},\"ContentChildrenDecorator\":{\"__symbolic\":\"interface\"},\"Query\":{\"__symbolic\":\"class\",\"members\":{}},\"ViewChild\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_b\"},\"arguments\":[\"ViewChild\",{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":363,\"character\":17,\"module\":\"./src/metadata/di\"},{\"__symbolic\":\"reference\",\"name\":\"Query\"}]},\"ViewChildDecorator\":{\"__symbolic\":\"interface\"},\"ViewChildren\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_b\"},\"arguments\":[\"ViewChildren\",{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":299,\"character\":20,\"module\":\"./src/metadata/di\"},{\"__symbolic\":\"reference\",\"name\":\"Query\"}]},\"ViewChildrenDecorator\":{\"__symbolic\":\"interface\"},\"Component\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵmakeDecorator\"},\"arguments\":[\"Component\",{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":635,\"character\":17,\"module\":\"./src/metadata/directives\"},{\"__symbolic\":\"reference\",\"name\":\"any\"},{\"__symbolic\":\"reference\",\"name\":\"undefined\"},{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":636,\"character\":26,\"module\":\"./src/metadata/directives\"}]},\"ComponentDecorator\":{\"__symbolic\":\"interface\"},\"Directive\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵmakeDecorator\"},\"arguments\":[\"Directive\",{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":351,\"character\":17,\"module\":\"./src/metadata/directives\"},{\"__symbolic\":\"reference\",\"name\":\"undefined\"},{\"__symbolic\":\"reference\",\"name\":\"undefined\"},{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":352,\"character\":4,\"module\":\"./src/metadata/directives\"}]},\"DirectiveDecorator\":{\"__symbolic\":\"interface\"},\"HostBinding\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_b\"},\"arguments\":[\"HostBinding\",{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":893,\"character\":37,\"module\":\"./src/metadata/directives\"}]},\"HostListener\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_b\"},\"arguments\":[\"HostListener\",{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":950,\"character\":38,\"module\":\"./src/metadata/directives\"}]},\"Input\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_b\"},\"arguments\":[\"Input\",{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":805,\"character\":13,\"module\":\"./src/metadata/directives\"},{\"__symbolic\":\"reference\",\"name\":\"undefined\"},{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":787,\"character\":6,\"context\":{\"name\":\"updateBaseDefFromIOProp\"},\"module\":\"./src/metadata/directives\"}]},\"Output\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_b\"},\"arguments\":[\"Output\",{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":841,\"character\":14,\"module\":\"./src/metadata/directives\"},{\"__symbolic\":\"reference\",\"name\":\"undefined\"},{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":787,\"character\":6,\"context\":{\"name\":\"updateBaseDefFromIOProp\"},\"module\":\"./src/metadata/directives\"}]},\"Pipe\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵmakeDecorator\"},\"arguments\":[\"Pipe\",{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":683,\"character\":12,\"module\":\"./src/metadata/directives\"},{\"__symbolic\":\"reference\",\"name\":\"undefined\"},{\"__symbolic\":\"reference\",\"name\":\"undefined\"},{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":684,\"character\":4,\"module\":\"./src/metadata/directives\"}]},\"AfterContentChecked\":{\"__symbolic\":\"interface\"},\"AfterContentInit\":{\"__symbolic\":\"interface\"},\"AfterViewChecked\":{\"__symbolic\":\"interface\"},\"AfterViewInit\":{\"__symbolic\":\"interface\"},\"DoCheck\":{\"__symbolic\":\"interface\"},\"OnChanges\":{\"__symbolic\":\"interface\"},\"OnDestroy\":{\"__symbolic\":\"interface\"},\"OnInit\":{\"__symbolic\":\"interface\"},\"CUSTOM_ELEMENTS_SCHEMA\":{\"name\":\"custom-elements\"},\"DoBootstrap\":{\"__symbolic\":\"interface\"},\"ModuleWithProviders\":{\"__symbolic\":\"interface\"},\"NO_ERRORS_SCHEMA\":{\"name\":\"no-errors-schema\"},\"NgModule\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵmakeDecorator\"},\"arguments\":[\"NgModule\",{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":324,\"character\":16,\"module\":\"./src/metadata/ng_module\"},{\"__symbolic\":\"reference\",\"name\":\"undefined\"},{\"__symbolic\":\"reference\",\"name\":\"undefined\"},{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":336,\"character\":4,\"module\":\"./src/metadata/ng_module\"}]},\"SchemaMetadata\":{\"__symbolic\":\"interface\"},\"ViewEncapsulation\":{\"Emulated\":0,\"Native\":1,\"None\":2,\"ShadowDom\":3},\"Version\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"}]}]}},\"VERSION\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Version\"},\"arguments\":[\"7.0.0\"]},\"TypeDecorator\":{\"__symbolic\":\"interface\"},\"InjectDecorator\":{\"__symbolic\":\"interface\"},\"Inject\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_a\"},\"arguments\":[\"Inject\",{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":55,\"character\":68,\"module\":\"./src/di/metadata\"}]},\"OptionalDecorator\":{\"__symbolic\":\"interface\"},\"Optional\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_a\"},\"arguments\":[\"Optional\"]},\"SelfDecorator\":{\"__symbolic\":\"interface\"},\"Self\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_a\"},\"arguments\":[\"Self\"]},\"SkipSelfDecorator\":{\"__symbolic\":\"interface\"},\"SkipSelf\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_a\"},\"arguments\":[\"SkipSelf\"]},\"HostDecorator\":{\"__symbolic\":\"interface\"},\"Host\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_a\"},\"arguments\":[\"Host\"]},\"InjectableType\":{\"__symbolic\":\"interface\"},\"InjectorType\":{\"__symbolic\":\"interface\"},\"defineInjectable\":{\"__symbolic\":\"function\",\"parameters\":[\"opts\"],\"value\":{\"providedIn\":{\"__symbolic\":\"binop\",\"operator\":\"||\",\"left\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"opts\"},\"member\":\"providedIn\"},\"right\":null},\"factory\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"opts\"},\"member\":\"factory\"},\"value\":{\"__symbolic\":\"reference\",\"name\":\"undefined\"}}},\"defineInjector\":{\"__symbolic\":\"function\",\"parameters\":[\"options\"],\"value\":{\"factory\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"options\"},\"member\":\"factory\"},\"providers\":{\"__symbolic\":\"binop\",\"operator\":\"||\",\"left\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"options\"},\"member\":\"providers\"},\"right\":[]},\"imports\":{\"__symbolic\":\"binop\",\"operator\":\"||\",\"left\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"options\"},\"member\":\"imports\"},\"right\":[]}}},\"forwardRef\":{\"__symbolic\":\"function\"},\"resolveForwardRef\":{\"__symbolic\":\"function\"},\"ForwardRefFn\":{\"__symbolic\":\"interface\"},\"Injectable\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵmakeDecorator\"},\"arguments\":[\"Injectable\",{\"__symbolic\":\"reference\",\"name\":\"undefined\"},{\"__symbolic\":\"reference\",\"name\":\"undefined\"},{\"__symbolic\":\"reference\",\"name\":\"undefined\"},{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":63,\"character\":4,\"module\":\"./src/di/injectable\"}]},\"InjectableDecorator\":{\"__symbolic\":\"interface\"},\"InjectableProvider\":{\"__symbolic\":\"interface\"},\"inject\":{\"__symbolic\":\"function\"},\"InjectFlags\":{\"Default\":0,\"Host\":1,\"Self\":2,\"SkipSelf\":4,\"Optional\":8},\"INJECTOR\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"InjectionToken\"},\"arguments\":[\"INJECTOR\"]},\"Injector\":{\"__symbolic\":\"class\",\"members\":{\"get\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}]},\"statics\":{\"THROW_IF_NOT_FOUND\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Object\"}},\"NULL\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"NullInjector\"}},\"ngInjectableDef\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"./defs\",\"name\":\"defineInjectable\",\"line\":102,\"character\":27},\"arguments\":[{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":104,\"character\":13}]}}},\"ReflectiveInjector\":{\"__symbolic\":\"class\",\"members\":{\"resolveAndCreateChild\":[{\"__symbolic\":\"method\"}],\"createChildFromResolved\":[{\"__symbolic\":\"method\"}],\"resolveAndInstantiate\":[{\"__symbolic\":\"method\"}],\"instantiateResolved\":[{\"__symbolic\":\"method\"}],\"get\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"resolve\":{\"__symbolic\":\"function\",\"parameters\":[\"providers\"],\"value\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_e\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"providers\"}]}},\"fromResolvedProviders\":{\"__symbolic\":\"function\",\"parameters\":[\"providers\",\"parent\"],\"value\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_c\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"providers\"},{\"__symbolic\":\"reference\",\"name\":\"parent\"}]}}}},\"StaticProvider\":{\"__symbolic\":\"interface\"},\"ValueProvider\":{\"__symbolic\":\"interface\"},\"ConstructorSansProvider\":{\"__symbolic\":\"interface\"},\"ExistingProvider\":{\"__symbolic\":\"interface\"},\"FactoryProvider\":{\"__symbolic\":\"interface\"},\"Provider\":{\"__symbolic\":\"interface\"},\"TypeProvider\":{\"__symbolic\":\"interface\"},\"ClassProvider\":{\"__symbolic\":\"interface\"},\"createInjector\":{\"__symbolic\":\"function\"},\"ResolvedReflectiveFactory\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Function\"},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_d\"}]}]}]}},\"ResolvedReflectiveProvider\":{\"__symbolic\":\"interface\"},\"ReflectiveKey\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Object\"},{\"__symbolic\":\"reference\",\"name\":\"number\"}]}]},\"statics\":{\"get\":{\"__symbolic\":\"function\",\"parameters\":[\"token\"],\"value\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"_globalKeyRegistry\"},\"member\":\"get\"},\"arguments\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"resolveForwardRef\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"token\"}]}]}},\"numberOfKeys\":{\"__symbolic\":\"error\",\"message\":\"Variable not initialized\",\"line\":50,\"character\":13}}},\"InjectionToken\":{\"__symbolic\":\"class\",\"arity\":1,\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":56,\"character\":49,\"module\":\"./src/di/injection_token\"}]}],\"toString\":[{\"__symbolic\":\"method\"}]}},\"createPlatform\":{\"__symbolic\":\"function\"},\"assertPlatform\":{\"__symbolic\":\"function\"},\"destroyPlatform\":{\"__symbolic\":\"function\"},\"getPlatform\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"binop\",\"operator\":\"&&\",\"left\":{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":31,\"character\":4,\"context\":{\"name\":\"_platform\"},\"module\":\"./src/application_ref\"},\"right\":{\"__symbolic\":\"pre\",\"operator\":\"!\",\"operand\":{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":31,\"character\":4,\"context\":{\"name\":\"_platform\"},\"module\":\"./src/application_ref\"}}},\"thenExpression\":{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":31,\"character\":4,\"context\":{\"name\":\"_platform\"},\"module\":\"./src/application_ref\"},\"elseExpression\":null}},\"PlatformRef\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Injectable\"}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Injector\"}]}],\"bootstrapModuleFactory\":[{\"__symbolic\":\"method\"}],\"bootstrapModule\":[{\"__symbolic\":\"method\"}],\"_moduleDoBootstrap\":[{\"__symbolic\":\"method\"}],\"onDestroy\":[{\"__symbolic\":\"method\"}],\"destroy\":[{\"__symbolic\":\"method\"}]}},\"ApplicationRef\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Injectable\"}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"NgZone\"},{\"__symbolic\":\"reference\",\"name\":\"ɵConsole\"},{\"__symbolic\":\"reference\",\"name\":\"Injector\"},{\"__symbolic\":\"reference\",\"name\":\"ErrorHandler\"},{\"__symbolic\":\"reference\",\"name\":\"ComponentFactoryResolver\"},{\"__symbolic\":\"reference\",\"name\":\"ApplicationInitStatus\"}]}],\"bootstrap\":[{\"__symbolic\":\"method\"}],\"tick\":[{\"__symbolic\":\"method\"}],\"attachView\":[{\"__symbolic\":\"method\"}],\"detachView\":[{\"__symbolic\":\"method\"}],\"_loadComponent\":[{\"__symbolic\":\"method\"}],\"_unloadComponent\":[{\"__symbolic\":\"method\"}],\"ngOnDestroy\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"_tickScope\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"./profile/profile\",\"name\":\"wtfCreateScope\",\"line\":352,\"character\":34},\"arguments\":[\"ApplicationRef#tick()\"]}}},\"createPlatformFactory\":{\"__symbolic\":\"function\"},\"NgProbeToken\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"any\"}]}]}},\"enableProdMode\":{\"__symbolic\":\"function\"},\"isDevMode\":{\"__symbolic\":\"function\"},\"APP_ID\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"InjectionToken\"},\"arguments\":[\"AppId\"]},\"PACKAGE_ROOT_URL\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"InjectionToken\"},\"arguments\":[\"Application Packages Root URL\"]},\"PLATFORM_INITIALIZER\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"InjectionToken\"},\"arguments\":[\"Platform Initializer\"]},\"PLATFORM_ID\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"InjectionToken\"},\"arguments\":[\"Platform ID\"]},\"APP_BOOTSTRAP_LISTENER\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"InjectionToken\"},\"arguments\":[\"appBootstrapListener\"]},\"APP_INITIALIZER\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"InjectionToken\"},\"arguments\":[\"Application Initializer\"]},\"ApplicationInitStatus\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Injectable\"}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Inject\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"APP_INITIALIZER\"}]},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Optional\"}}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":31,\"character\":69,\"module\":\"./src/application_init\"}]}]}],\"runInitializers\":[{\"__symbolic\":\"method\"}]}},\"NgZone\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[null]}],\"run\":[{\"__symbolic\":\"method\"}],\"runTask\":[{\"__symbolic\":\"method\"}],\"runGuarded\":[{\"__symbolic\":\"method\"}],\"runOutsideAngular\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"isInAngularZone\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"binop\",\"operator\":\"===\",\"left\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Zone\"},\"member\":\"current\"},\"member\":\"get\"},\"arguments\":[\"isAngularZone\"]},\"right\":true}}}},\"ɵNoopNgZone\":{\"__symbolic\":\"class\",\"members\":{\"run\":[{\"__symbolic\":\"method\"}],\"runGuarded\":[{\"__symbolic\":\"method\"}],\"runOutsideAngular\":[{\"__symbolic\":\"method\"}],\"runTask\":[{\"__symbolic\":\"method\"}]}},\"RenderComponentType\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"ViewEncapsulation\"},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"string\"}]},{\"__symbolic\":\"reference\",\"name\":\"any\"}]}]}},\"Renderer\":{\"__symbolic\":\"class\",\"members\":{\"selectRootElement\":[{\"__symbolic\":\"method\"}],\"createElement\":[{\"__symbolic\":\"method\"}],\"createViewRoot\":[{\"__symbolic\":\"method\"}],\"createTemplateAnchor\":[{\"__symbolic\":\"method\"}],\"createText\":[{\"__symbolic\":\"method\"}],\"projectNodes\":[{\"__symbolic\":\"method\"}],\"attachViewAfter\":[{\"__symbolic\":\"method\"}],\"detachView\":[{\"__symbolic\":\"method\"}],\"destroyView\":[{\"__symbolic\":\"method\"}],\"listen\":[{\"__symbolic\":\"method\"}],\"listenGlobal\":[{\"__symbolic\":\"method\"}],\"setElementProperty\":[{\"__symbolic\":\"method\"}],\"setElementAttribute\":[{\"__symbolic\":\"method\"}],\"setBindingDebugInfo\":[{\"__symbolic\":\"method\"}],\"setElementClass\":[{\"__symbolic\":\"method\"}],\"setElementStyle\":[{\"__symbolic\":\"method\"}],\"invokeElementMethod\":[{\"__symbolic\":\"method\"}],\"setText\":[{\"__symbolic\":\"method\"}],\"animate\":[{\"__symbolic\":\"method\"}]}},\"Renderer2\":{\"__symbolic\":\"class\",\"members\":{\"destroy\":[{\"__symbolic\":\"method\"}],\"createElement\":[{\"__symbolic\":\"method\"}],\"createComment\":[{\"__symbolic\":\"method\"}],\"createText\":[{\"__symbolic\":\"method\"}],\"appendChild\":[{\"__symbolic\":\"method\"}],\"insertBefore\":[{\"__symbolic\":\"method\"}],\"removeChild\":[{\"__symbolic\":\"method\"}],\"selectRootElement\":[{\"__symbolic\":\"method\"}],\"parentNode\":[{\"__symbolic\":\"method\"}],\"nextSibling\":[{\"__symbolic\":\"method\"}],\"setAttribute\":[{\"__symbolic\":\"method\"}],\"removeAttribute\":[{\"__symbolic\":\"method\"}],\"addClass\":[{\"__symbolic\":\"method\"}],\"removeClass\":[{\"__symbolic\":\"method\"}],\"setStyle\":[{\"__symbolic\":\"method\"}],\"removeStyle\":[{\"__symbolic\":\"method\"}],\"setProperty\":[{\"__symbolic\":\"method\"}],\"setValue\":[{\"__symbolic\":\"method\"}],\"listen\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"__NG_ELEMENT_ID__\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":372,\"character\":46}}},\"RendererFactory2\":{\"__symbolic\":\"class\",\"members\":{\"createRenderer\":[{\"__symbolic\":\"method\"}],\"begin\":[{\"__symbolic\":\"method\"}],\"end\":[{\"__symbolic\":\"method\"}],\"whenRenderingDone\":[{\"__symbolic\":\"method\"}]}},\"RendererStyleFlags2\":{\"Important\":1,\"DashCase\":2},\"RendererType2\":{\"__symbolic\":\"interface\"},\"RootRenderer\":{\"__symbolic\":\"class\",\"members\":{\"renderComponent\":[{\"__symbolic\":\"method\"}]}},\"COMPILER_OPTIONS\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"InjectionToken\"},\"arguments\":[\"compilerOptions\"]},\"Compiler\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Injectable\"}}],\"members\":{\"compileModuleSync\":[{\"__symbolic\":\"method\"}],\"compileModuleAsync\":[{\"__symbolic\":\"method\"}],\"compileModuleAndAllComponentsSync\":[{\"__symbolic\":\"method\"}],\"compileModuleAndAllComponentsAsync\":[{\"__symbolic\":\"method\"}],\"clearCache\":[{\"__symbolic\":\"method\"}],\"clearCacheFor\":[{\"__symbolic\":\"method\"}],\"getModuleId\":[{\"__symbolic\":\"method\"}]}},\"CompilerFactory\":{\"__symbolic\":\"class\",\"members\":{\"createCompiler\":[{\"__symbolic\":\"method\"}]}},\"CompilerOptions\":{\"__symbolic\":\"interface\"},\"ModuleWithComponentFactories\":{\"__symbolic\":\"class\",\"arity\":1,\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"NgModuleFactory\"},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ɵComponentFactory\"}]}]}]}},\"ComponentFactory\":{\"__symbolic\":\"class\",\"arity\":1,\"members\":{\"create\":[{\"__symbolic\":\"method\"}]}},\"ComponentRef\":{\"__symbolic\":\"class\",\"arity\":1,\"members\":{\"destroy\":[{\"__symbolic\":\"method\"}],\"onDestroy\":[{\"__symbolic\":\"method\"}]}},\"ComponentFactoryResolver\":{\"__symbolic\":\"class\",\"members\":{\"resolveComponentFactory\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"NULL\":{\"__symbolic\":\"error\",\"message\":\"Reference to non-exported class\",\"line\":29,\"character\":0,\"context\":{\"className\":\"_NullComponentFactoryResolver\"}}}},\"ElementRef\":{\"__symbolic\":\"class\",\"arity\":1,\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"error\",\"message\":\"Could not resolve type\",\"line\":49,\"character\":29,\"context\":{\"typeName\":\"T\"},\"module\":\"./src/linker/element_ref\"}]}]},\"statics\":{\"__NG_ELEMENT_ID__\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":52,\"character\":47}}},\"NgModuleFactory\":{\"__symbolic\":\"class\",\"arity\":1,\"members\":{\"create\":[{\"__symbolic\":\"method\"}]}},\"NgModuleRef\":{\"__symbolic\":\"class\",\"arity\":1,\"members\":{\"destroy\":[{\"__symbolic\":\"method\"}],\"onDestroy\":[{\"__symbolic\":\"method\"}]}},\"NgModuleFactoryLoader\":{\"__symbolic\":\"class\",\"members\":{\"load\":[{\"__symbolic\":\"method\"}]}},\"getModuleFactory\":{\"__symbolic\":\"function\"},\"QueryList\":{\"__symbolic\":\"class\",\"arity\":1,\"members\":{\"map\":[{\"__symbolic\":\"method\"}],\"filter\":[{\"__symbolic\":\"method\"}],\"find\":[{\"__symbolic\":\"method\"}],\"reduce\":[{\"__symbolic\":\"method\"}],\"forEach\":[{\"__symbolic\":\"method\"}],\"some\":[{\"__symbolic\":\"method\"}],\"toArray\":[{\"__symbolic\":\"method\"}],\"toString\":[{\"__symbolic\":\"method\"}],\"reset\":[{\"__symbolic\":\"method\"}],\"notifyOnChanges\":[{\"__symbolic\":\"method\"}],\"setDirty\":[{\"__symbolic\":\"method\"}],\"destroy\":[{\"__symbolic\":\"method\"}]}},\"SystemJsNgModuleLoader\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Injectable\"}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[null,[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Optional\"}}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Compiler\"},{\"__symbolic\":\"reference\",\"name\":\"SystemJsNgModuleLoaderConfig\"}]}],\"load\":[{\"__symbolic\":\"method\"}],\"loadAndCompile\":[{\"__symbolic\":\"method\"}],\"loadFactory\":[{\"__symbolic\":\"method\"}]}},\"SystemJsNgModuleLoaderConfig\":{\"__symbolic\":\"class\",\"members\":{}},\"TemplateRef\":{\"__symbolic\":\"class\",\"arity\":1,\"members\":{\"createEmbeddedView\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"__NG_ELEMENT_ID__\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":55,\"character\":31}}},\"ViewContainerRef\":{\"__symbolic\":\"class\",\"members\":{\"clear\":[{\"__symbolic\":\"method\"}],\"get\":[{\"__symbolic\":\"method\"}],\"createEmbeddedView\":[{\"__symbolic\":\"method\"}],\"createComponent\":[{\"__symbolic\":\"method\"}],\"insert\":[{\"__symbolic\":\"method\"}],\"move\":[{\"__symbolic\":\"method\"}],\"indexOf\":[{\"__symbolic\":\"method\"}],\"remove\":[{\"__symbolic\":\"method\"}],\"detach\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"__NG_ELEMENT_ID__\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":146,\"character\":31}}},\"EmbeddedViewRef\":{\"__symbolic\":\"class\",\"arity\":1,\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ViewRef\"},\"members\":{}},\"ViewRef\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ChangeDetectorRef\"},\"members\":{\"destroy\":[{\"__symbolic\":\"method\"}],\"onDestroy\":[{\"__symbolic\":\"method\"}]}},\"DebugElement\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"DebugNode\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"},{\"__symbolic\":\"reference\",\"name\":\"any\"},{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_u\"}]}],\"addChild\":[{\"__symbolic\":\"method\"}],\"removeChild\":[{\"__symbolic\":\"method\"}],\"insertChildrenAfter\":[{\"__symbolic\":\"method\"}],\"insertBefore\":[{\"__symbolic\":\"method\"}],\"query\":[{\"__symbolic\":\"method\"}],\"queryAll\":[{\"__symbolic\":\"method\"}],\"queryAllNodes\":[{\"__symbolic\":\"method\"}],\"triggerEventHandler\":[{\"__symbolic\":\"method\"}]}},\"DebugNode\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"},{\"__symbolic\":\"reference\",\"name\":\"DebugNode\"},{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_u\"}]}]}},\"asNativeElements\":{\"__symbolic\":\"function\",\"parameters\":[\"debugEls\"],\"value\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"debugEls\"},\"member\":\"map\"},\"arguments\":[{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":131,\"character\":22,\"module\":\"./src/debug/debug_node\"}]}},\"getDebugNode\":{\"__symbolic\":\"function\",\"parameters\":[\"nativeNode\"],\"value\":{\"__symbolic\":\"binop\",\"operator\":\"||\",\"left\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Map\"}},\"member\":\"get\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"nativeNode\"}]},\"right\":null}},\"Predicate\":{\"__symbolic\":\"interface\"},\"GetTestability\":{\"__symbolic\":\"interface\"},\"Testability\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Injectable\"}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"NgZone\"}]}],\"_watchAngularEvents\":[{\"__symbolic\":\"method\"}],\"increasePendingRequestCount\":[{\"__symbolic\":\"method\"}],\"decreasePendingRequestCount\":[{\"__symbolic\":\"method\"}],\"isStable\":[{\"__symbolic\":\"method\"}],\"_runCallbacksIfReady\":[{\"__symbolic\":\"method\"}],\"getPendingTasks\":[{\"__symbolic\":\"method\"}],\"addCallback\":[{\"__symbolic\":\"method\"}],\"whenStable\":[{\"__symbolic\":\"method\"}],\"getPendingRequestCount\":[{\"__symbolic\":\"method\"}],\"findProviders\":[{\"__symbolic\":\"method\"}]}},\"TestabilityRegistry\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Injectable\"}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\"}],\"registerApplication\":[{\"__symbolic\":\"method\"}],\"unregisterApplication\":[{\"__symbolic\":\"method\"}],\"unregisterAllApplications\":[{\"__symbolic\":\"method\"}],\"getTestability\":[{\"__symbolic\":\"method\"}],\"getAllTestabilities\":[{\"__symbolic\":\"method\"}],\"getAllRootElements\":[{\"__symbolic\":\"method\"}],\"findTestabilityInTree\":[{\"__symbolic\":\"method\"}]}},\"setTestabilityGetter\":{\"__symbolic\":\"function\"},\"ChangeDetectionStrategy\":{\"OnPush\":0,\"Default\":1},\"ChangeDetectorRef\":{\"__symbolic\":\"class\",\"members\":{\"markForCheck\":[{\"__symbolic\":\"method\"}],\"detach\":[{\"__symbolic\":\"method\"}],\"detectChanges\":[{\"__symbolic\":\"method\"}],\"checkNoChanges\":[{\"__symbolic\":\"method\"}],\"reattach\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"__NG_ELEMENT_ID__\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":109,\"character\":54}}},\"CollectionChangeRecord\":{\"__symbolic\":\"interface\"},\"DefaultIterableDiffer\":{\"__symbolic\":\"class\",\"arity\":1,\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"TrackByFunction\"}]}],\"forEachItem\":[{\"__symbolic\":\"method\"}],\"forEachOperation\":[{\"__symbolic\":\"method\"}],\"forEachPreviousItem\":[{\"__symbolic\":\"method\"}],\"forEachAddedItem\":[{\"__symbolic\":\"method\"}],\"forEachMovedItem\":[{\"__symbolic\":\"method\"}],\"forEachRemovedItem\":[{\"__symbolic\":\"method\"}],\"forEachIdentityChange\":[{\"__symbolic\":\"method\"}],\"diff\":[{\"__symbolic\":\"method\"}],\"onDestroy\":[{\"__symbolic\":\"method\"}],\"check\":[{\"__symbolic\":\"method\"}],\"_reset\":[{\"__symbolic\":\"method\"}],\"_mismatch\":[{\"__symbolic\":\"method\"}],\"_verifyReinsertion\":[{\"__symbolic\":\"method\"}],\"_truncate\":[{\"__symbolic\":\"method\"}],\"_reinsertAfter\":[{\"__symbolic\":\"method\"}],\"_moveAfter\":[{\"__symbolic\":\"method\"}],\"_addAfter\":[{\"__symbolic\":\"method\"}],\"_insertAfter\":[{\"__symbolic\":\"method\"}],\"_remove\":[{\"__symbolic\":\"method\"}],\"_unlink\":[{\"__symbolic\":\"method\"}],\"_addToMoves\":[{\"__symbolic\":\"method\"}],\"_addToRemovals\":[{\"__symbolic\":\"method\"}],\"_addIdentityChange\":[{\"__symbolic\":\"method\"}]}},\"IterableChangeRecord\":{\"__symbolic\":\"interface\"},\"IterableChanges\":{\"__symbolic\":\"interface\"},\"IterableDiffer\":{\"__symbolic\":\"interface\"},\"IterableDifferFactory\":{\"__symbolic\":\"interface\"},\"IterableDiffers\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}]}],\"find\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"ngInjectableDef\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"../../di/defs\",\"name\":\"defineInjectable\",\"line\":139,\"character\":27},\"arguments\":[{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":141,\"character\":13}]},\"extend\":{\"__symbolic\":\"function\",\"parameters\":[\"factories\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":182,\"character\":18,\"module\":\"./src/change_detection/differs/iterable_differs\"}}}},\"KeyValueChangeRecord\":{\"__symbolic\":\"interface\"},\"KeyValueChanges\":{\"__symbolic\":\"interface\"},\"KeyValueDiffer\":{\"__symbolic\":\"interface\"},\"KeyValueDifferFactory\":{\"__symbolic\":\"interface\"},\"KeyValueDiffers\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}]}],\"find\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"extend\":{\"__symbolic\":\"function\",\"parameters\":[\"factories\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":155,\"character\":18,\"module\":\"./src/change_detection/differs/keyvalue_differs\"}}}},\"NgIterable\":{\"__symbolic\":\"interface\"},\"PipeTransform\":{\"__symbolic\":\"interface\"},\"SimpleChange\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"},{\"__symbolic\":\"reference\",\"name\":\"any\"},{\"__symbolic\":\"reference\",\"name\":\"boolean\"}]}],\"isFirstChange\":[{\"__symbolic\":\"method\"}]}},\"SimpleChanges\":{\"__symbolic\":\"interface\"},\"TrackByFunction\":{\"__symbolic\":\"interface\"},\"WrappedValue\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}]},\"statics\":{\"wrap\":{\"__symbolic\":\"function\",\"parameters\":[\"value\"],\"value\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"WrappedValue\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"value\"}]}},\"unwrap\":{\"__symbolic\":\"function\",\"parameters\":[\"value\"],\"value\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"WrappedValue\"},\"member\":\"isWrapped\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"value\"}]},\"thenExpression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"value\"},\"member\":\"wrapped\"},\"elseExpression\":{\"__symbolic\":\"reference\",\"name\":\"value\"}}},\"isWrapped\":{\"__symbolic\":\"function\",\"parameters\":[\"value\"],\"value\":{\"__symbolic\":\"binop\",\"operator\":\"instanceof\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"value\"},\"right\":{\"__symbolic\":\"reference\",\"name\":\"WrappedValue\"}}}}},\"platformCore\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"createPlatformFactory\"},\"arguments\":[null,\"core\",[{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"PLATFORM_ID\"},\"useValue\":\"unknown\"},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"PlatformRef\"},\"deps\":[{\"__symbolic\":\"reference\",\"name\":\"Injector\"}]},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"TestabilityRegistry\"},\"deps\":[]},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ɵConsole\"},\"deps\":[]}]]},\"TRANSLATIONS\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"InjectionToken\"},\"arguments\":[\"Translations\"]},\"TRANSLATIONS_FORMAT\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"InjectionToken\"},\"arguments\":[\"TranslationsFormat\"]},\"LOCALE_ID\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"InjectionToken\"},\"arguments\":[\"LocaleId\"]},\"MissingTranslationStrategy\":{\"Error\":0,\"Warning\":1,\"Ignore\":2},\"ApplicationModule\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"NgModule\"},\"arguments\":[{\"providers\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_l\"}}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ApplicationRef\"}]}]}},\"wtfCreateScope\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_m\"},\"thenExpression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_o\"},\"elseExpression\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":53,\"character\":31,\"module\":\"./src/profile/profile\"}},\"wtfLeave\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_m\"},\"thenExpression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_p\"},\"elseExpression\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":65,\"character\":25,\"module\":\"./src/profile/profile\"}},\"wtfStartTimeRange\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_m\"},\"thenExpression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_q\"},\"elseExpression\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":81,\"character\":34,\"module\":\"./src/profile/profile\"}},\"wtfEndTimeRange\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_m\"},\"thenExpression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_r\"},\"elseExpression\":{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":89,\"character\":81,\"module\":\"./src/profile/profile\"}},\"WtfScopeFn\":{\"__symbolic\":\"interface\"},\"Type\":{\"__symbolic\":\"interface\"},\"EventEmitter\":{\"__symbolic\":\"class\",\"arity\":1,\"extends\":{\"__symbolic\":\"reference\",\"module\":\"rxjs\",\"name\":\"Subject\",\"line\":62,\"character\":37},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"boolean\"}]}],\"emit\":[{\"__symbolic\":\"method\"}],\"subscribe\":[{\"__symbolic\":\"method\"}]}},\"ErrorHandler\":{\"__symbolic\":\"class\",\"members\":{\"handleError\":[{\"__symbolic\":\"method\"}],\"_findContext\":[{\"__symbolic\":\"method\"}],\"_findOriginalError\":[{\"__symbolic\":\"method\"}]}},\"ɵALLOW_MULTIPLE_PLATFORMS\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"InjectionToken\"},\"arguments\":[\"AllowMultipleToken\"]},\"ɵAPP_ID_RANDOM_PROVIDER\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"APP_ID\"},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_f\"},\"deps\":[]},\"ɵdefaultIterableDiffers\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"IterableDiffers\"},\"arguments\":[[{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_g\"}}]]},\"ɵdefaultKeyValueDiffers\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"KeyValueDiffers\"},\"arguments\":[[{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_h\"}}]]},\"ɵdevModeEqual\":{\"__symbolic\":\"function\"},\"ɵisListLikeIterable\":{\"__symbolic\":\"function\"},\"ɵChangeDetectorStatus\":{\"CheckOnce\":0,\"Checked\":1,\"CheckAlways\":2,\"Detached\":3,\"Errored\":4,\"Destroyed\":5},\"ɵisDefaultChangeDetectionStrategy\":{\"__symbolic\":\"function\",\"parameters\":[\"changeDetectionStrategy\"],\"value\":{\"__symbolic\":\"binop\",\"operator\":\"||\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"==\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"changeDetectionStrategy\"},\"right\":null},\"right\":{\"__symbolic\":\"binop\",\"operator\":\"===\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"changeDetectionStrategy\"},\"right\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ChangeDetectionStrategy\"},\"member\":\"Default\"}}}},\"ɵConsole\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"Injectable\"}}],\"members\":{\"log\":[{\"__symbolic\":\"method\"}],\"warn\":[{\"__symbolic\":\"method\"}]}},\"ɵInjectableDef\":{\"__symbolic\":\"interface\"},\"ɵInjectorDef\":{\"__symbolic\":\"interface\"},\"ɵgetInjectableDef\":{\"__symbolic\":\"function\",\"parameters\":[\"type\"],\"value\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"type\"},\"member\":\"hasOwnProperty\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_bb\"}]},\"thenExpression\":{\"__symbolic\":\"index\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"type\"},\"index\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_bb\"}},\"elseExpression\":null}},\"ɵinject\":{\"__symbolic\":\"reference\",\"name\":\"inject\"},\"ɵsetCurrentInjector\":{\"__symbolic\":\"function\"},\"ɵAPP_ROOT\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"InjectionToken\"},\"arguments\":[\"The presence of this token marks an injector as being the root injector.\"]},\"ɵComponentFactory\":{\"__symbolic\":\"reference\",\"name\":\"ComponentFactory\"},\"ɵCodegenComponentFactoryResolver\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ɵComponentFactory\"}]},{\"__symbolic\":\"reference\",\"name\":\"ComponentFactoryResolver\"},{\"__symbolic\":\"reference\",\"name\":\"NgModuleRef\"}]}],\"resolveComponentFactory\":[{\"__symbolic\":\"method\"}]}},\"ɵresolveComponentResources\":{\"__symbolic\":\"function\"},\"ɵReflectionCapabilities\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}],\"isReflectionEnabled\":[{\"__symbolic\":\"method\"}],\"factory\":[{\"__symbolic\":\"method\"}],\"_zipTypesAndAnnotations\":[{\"__symbolic\":\"method\"}],\"_ownParameters\":[{\"__symbolic\":\"method\"}],\"parameters\":[{\"__symbolic\":\"method\"}],\"_ownAnnotations\":[{\"__symbolic\":\"method\"}],\"annotations\":[{\"__symbolic\":\"method\"}],\"_ownPropMetadata\":[{\"__symbolic\":\"method\"}],\"propMetadata\":[{\"__symbolic\":\"method\"}],\"hasLifecycleHook\":[{\"__symbolic\":\"method\"}],\"guards\":[{\"__symbolic\":\"method\"}],\"getter\":[{\"__symbolic\":\"method\"}],\"setter\":[{\"__symbolic\":\"method\"}],\"method\":[{\"__symbolic\":\"method\"}],\"importUri\":[{\"__symbolic\":\"method\"}],\"resourceUri\":[{\"__symbolic\":\"method\"}],\"resolveIdentifier\":[{\"__symbolic\":\"method\"}],\"resolveEnum\":[{\"__symbolic\":\"method\"}]}},\"ɵGetterFn\":{\"__symbolic\":\"interface\"},\"ɵMethodFn\":{\"__symbolic\":\"interface\"},\"ɵSetterFn\":{\"__symbolic\":\"interface\"},\"ɵDirectRenderer\":{\"__symbolic\":\"interface\"},\"ɵRenderDebugInfo\":{\"__symbolic\":\"class\",\"members\":{}},\"ɵ_sanitizeHtml\":{\"__symbolic\":\"function\"},\"ɵ_sanitizeStyle\":{\"__symbolic\":\"function\"},\"ɵ_sanitizeUrl\":{\"__symbolic\":\"function\"},\"ɵglobal\":{\"__symbolic\":\"binop\",\"operator\":\"||\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"||\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"&&\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"!==\",\"left\":{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":17,\"character\":17,\"module\":\"./src/util\"},\"right\":\"undefined\"},\"right\":{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":13,\"character\":12,\"context\":{\"name\":\"global\"},\"module\":\"./src/util\"}},\"right\":{\"__symbolic\":\"binop\",\"operator\":\"&&\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"!==\",\"left\":{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":14,\"character\":17,\"module\":\"./src/util\"},\"right\":\"undefined\"},\"right\":{\"__symbolic\":\"reference\",\"name\":\"window\"}}},\"right\":{\"__symbolic\":\"binop\",\"operator\":\"&&\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"&&\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"&&\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"!==\",\"left\":{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":15,\"character\":15,\"module\":\"./src/util\"},\"right\":\"undefined\"},\"right\":{\"__symbolic\":\"binop\",\"operator\":\"!==\",\"left\":{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":15,\"character\":46,\"module\":\"./src/util\"},\"right\":\"undefined\"}},\"right\":{\"__symbolic\":\"binop\",\"operator\":\"instanceof\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"self\"},\"right\":{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":9,\"character\":12,\"context\":{\"name\":\"WorkerGlobalScope\"},\"module\":\"./src/util\"}}},\"right\":{\"__symbolic\":\"reference\",\"name\":\"self\"}}},\"ɵlooseIdentical\":{\"__symbolic\":\"function\",\"parameters\":[\"a\",\"b\"],\"value\":{\"__symbolic\":\"binop\",\"operator\":\"||\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"===\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"a\"},\"right\":{\"__symbolic\":\"reference\",\"name\":\"b\"}},\"right\":{\"__symbolic\":\"binop\",\"operator\":\"&&\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"&&\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"&&\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"===\",\"left\":{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":65,\"character\":20,\"module\":\"./src/util\"},\"right\":\"number\"},\"right\":{\"__symbolic\":\"binop\",\"operator\":\"===\",\"left\":{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":65,\"character\":45,\"module\":\"./src/util\"},\"right\":\"number\"}},\"right\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"isNaN\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"a\"}]}},\"right\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"isNaN\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"b\"}]}}}},\"ɵstringify\":{\"__symbolic\":\"function\"},\"ɵmakeDecorator\":{\"__symbolic\":\"function\"},\"ɵisObservable\":{\"__symbolic\":\"function\",\"parameters\":[\"obj\"],\"value\":{\"__symbolic\":\"binop\",\"operator\":\"&&\",\"left\":{\"__symbolic\":\"pre\",\"operator\":\"!\",\"operand\":{\"__symbolic\":\"pre\",\"operator\":\"!\",\"operand\":{\"__symbolic\":\"reference\",\"name\":\"obj\"}}},\"right\":{\"__symbolic\":\"binop\",\"operator\":\"===\",\"left\":{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":25,\"character\":18,\"module\":\"./src/util/lang\"},\"right\":\"function\"}}},\"ɵisPromise\":{\"__symbolic\":\"function\",\"parameters\":[\"obj\"],\"value\":{\"__symbolic\":\"binop\",\"operator\":\"&&\",\"left\":{\"__symbolic\":\"pre\",\"operator\":\"!\",\"operand\":{\"__symbolic\":\"pre\",\"operator\":\"!\",\"operand\":{\"__symbolic\":\"reference\",\"name\":\"obj\"}}},\"right\":{\"__symbolic\":\"binop\",\"operator\":\"===\",\"left\":{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":16,\"character\":18,\"module\":\"./src/util/lang\"},\"right\":\"function\"}}},\"ɵclearOverrides\":{\"__symbolic\":\"function\"},\"ɵinitServicesIfNeeded\":{\"__symbolic\":\"function\"},\"ɵoverrideComponentView\":{\"__symbolic\":\"function\"},\"ɵoverrideProvider\":{\"__symbolic\":\"function\"},\"ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR\":{},\"ɵdefineBase\":{\"__symbolic\":\"function\"},\"ɵdefineComponent\":{\"__symbolic\":\"function\"},\"ɵdefineDirective\":{\"__symbolic\":\"reference\",\"name\":\"ɵdefineComponent\"},\"ɵdefinePipe\":{\"__symbolic\":\"function\",\"parameters\":[\"pipeDef\"],\"value\":{\"name\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"pipeDef\"},\"member\":\"name\"},\"factory\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"pipeDef\"},\"member\":\"factory\"},\"pure\":{\"__symbolic\":\"binop\",\"operator\":\"!==\",\"left\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"pipeDef\"},\"member\":\"pure\"},\"right\":false},\"onDestroy\":{\"__symbolic\":\"binop\",\"operator\":\"||\",\"left\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"pipeDef\"},\"member\":\"type\"},\"member\":\"prototype\"},\"member\":\"ngOnDestroy\"},\"right\":null}}},\"ɵdefineNgModule\":{\"__symbolic\":\"function\"},\"ɵdetectChanges\":{\"__symbolic\":\"function\"},\"ɵrenderComponent\":{\"__symbolic\":\"function\"},\"ɵComponentType\":{\"__symbolic\":\"interface\"},\"ɵRender3ComponentFactory\":{\"__symbolic\":\"class\",\"arity\":1,\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ɵComponentFactory\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ɵComponentDef\"}]}],\"create\":[{\"__symbolic\":\"method\"}]}},\"ɵRender3ComponentRef\":{\"__symbolic\":\"class\",\"arity\":1,\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ComponentRef\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Type\"},{\"__symbolic\":\"error\",\"message\":\"Could not resolve type\",\"line\":220,\"character\":40,\"context\":{\"typeName\":\"T\"},\"module\":\"./src/render3/component_ref\"},{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_bd\"},{\"__symbolic\":\"reference\",\"name\":\"Injector\"},{\"__symbolic\":\"reference\",\"name\":\"ElementRef\"}]}],\"destroy\":[{\"__symbolic\":\"method\"}],\"onDestroy\":[{\"__symbolic\":\"method\"}]}},\"ɵDirectiveType\":{\"__symbolic\":\"interface\"},\"ɵRenderFlags\":{\"Create\":1,\"Update\":2},\"ɵdirectiveInject\":{\"__symbolic\":\"function\"},\"ɵinjectAttribute\":{\"__symbolic\":\"function\"},\"ɵgetFactoryOf\":{\"__symbolic\":\"function\"},\"ɵgetInheritedFactory\":{\"__symbolic\":\"function\"},\"ɵtemplateRefExtractor\":{\"__symbolic\":\"function\",\"parameters\":[\"tNode\",\"currentView\"],\"value\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_z\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"TemplateRef\"},{\"__symbolic\":\"reference\",\"name\":\"ElementRef\"},{\"__symbolic\":\"reference\",\"name\":\"tNode\"},{\"__symbolic\":\"reference\",\"name\":\"currentView\"}]}},\"ɵPublicFeature\":{\"__symbolic\":\"function\"},\"ɵInheritDefinitionFeature\":{\"__symbolic\":\"function\"},\"ɵNgOnChangesFeature\":{\"__symbolic\":\"function\"},\"ɵNgModuleType\":{\"__symbolic\":\"interface\"},\"ɵRender3NgModuleRef\":{\"__symbolic\":\"class\",\"arity\":1,\"extends\":{\"__symbolic\":\"reference\",\"name\":\"NgModuleRef\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Type\"},{\"__symbolic\":\"reference\",\"name\":\"Injector\"}]}],\"destroy\":[{\"__symbolic\":\"method\"}],\"onDestroy\":[{\"__symbolic\":\"method\"}]}},\"ɵCssSelectorList\":{\"__symbolic\":\"interface\"},\"ɵmarkDirty\":{\"__symbolic\":\"function\"},\"ɵNgModuleFactory\":{\"__symbolic\":\"class\",\"arity\":1,\"extends\":{\"__symbolic\":\"reference\",\"name\":\"NgModuleFactory\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Type\"}]}],\"create\":[{\"__symbolic\":\"method\"}]}},\"ɵNO_CHANGE\":{},\"ɵcontainer\":{\"__symbolic\":\"function\"},\"ɵnextContext\":{\"__symbolic\":\"function\"},\"ɵelementStart\":{\"__symbolic\":\"function\"},\"ɵnamespaceHTML\":{\"__symbolic\":\"function\"},\"ɵnamespaceMathML\":{\"__symbolic\":\"function\"},\"ɵnamespaceSVG\":{\"__symbolic\":\"function\"},\"ɵelement\":{\"__symbolic\":\"function\"},\"ɵlistener\":{\"__symbolic\":\"function\"},\"ɵtext\":{\"__symbolic\":\"function\"},\"ɵembeddedViewStart\":{\"__symbolic\":\"function\"},\"ɵquery\":{\"__symbolic\":\"function\"},\"ɵregisterContentQuery\":{\"__symbolic\":\"function\"},\"ɵprojection\":{\"__symbolic\":\"function\"},\"ɵbind\":{\"__symbolic\":\"function\",\"parameters\":[\"value\"],\"value\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_x\"},\"arguments\":[{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":2584,\"character\":24,\"module\":\"./src/render3/instructions\"},{\"__symbolic\":\"reference\",\"name\":\"value\"}]},\"thenExpression\":{\"__symbolic\":\"reference\",\"name\":\"value\"},\"elseExpression\":{\"__symbolic\":\"reference\",\"name\":\"any\"}}},\"ɵinterpolation1\":{\"__symbolic\":\"function\"},\"ɵinterpolation2\":{\"__symbolic\":\"function\"},\"ɵinterpolation3\":{\"__symbolic\":\"function\"},\"ɵinterpolation4\":{\"__symbolic\":\"function\"},\"ɵinterpolation5\":{\"__symbolic\":\"function\"},\"ɵinterpolation6\":{\"__symbolic\":\"function\"},\"ɵinterpolation7\":{\"__symbolic\":\"function\"},\"ɵinterpolation8\":{\"__symbolic\":\"function\"},\"ɵinterpolationV\":{\"__symbolic\":\"function\"},\"ɵpipeBind1\":{\"__symbolic\":\"function\"},\"ɵpipeBind2\":{\"__symbolic\":\"function\"},\"ɵpipeBind3\":{\"__symbolic\":\"function\"},\"ɵpipeBind4\":{\"__symbolic\":\"function\"},\"ɵpipeBindV\":{\"__symbolic\":\"function\"},\"ɵpureFunction0\":{\"__symbolic\":\"function\"},\"ɵpureFunction1\":{\"__symbolic\":\"function\"},\"ɵpureFunction2\":{\"__symbolic\":\"function\"},\"ɵpureFunction3\":{\"__symbolic\":\"function\"},\"ɵpureFunction4\":{\"__symbolic\":\"function\"},\"ɵpureFunction5\":{\"__symbolic\":\"function\"},\"ɵpureFunction6\":{\"__symbolic\":\"function\"},\"ɵpureFunction7\":{\"__symbolic\":\"function\"},\"ɵpureFunction8\":{\"__symbolic\":\"function\"},\"ɵpureFunctionV\":{\"__symbolic\":\"function\"},\"ɵgetCurrentView\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"reference\",\"name\":\"viewData\"}},\"ɵrestoreView\":{\"__symbolic\":\"function\"},\"ɵcontainerRefreshStart\":{\"__symbolic\":\"function\"},\"ɵcontainerRefreshEnd\":{\"__symbolic\":\"function\"},\"ɵqueryRefresh\":{\"__symbolic\":\"function\"},\"ɵloadQueryList\":{\"__symbolic\":\"function\"},\"ɵelementEnd\":{\"__symbolic\":\"function\"},\"ɵelementProperty\":{\"__symbolic\":\"function\"},\"ɵprojectionDef\":{\"__symbolic\":\"function\"},\"ɵreference\":{\"__symbolic\":\"function\",\"parameters\":[\"index\"],\"value\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_be\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"index\"},{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":217,\"character\":4,\"context\":{\"name\":\"contextViewData\"},\"module\":\"./src/render3/instructions\"}]}},\"ɵenableBindings\":{\"__symbolic\":\"function\"},\"ɵdisableBindings\":{\"__symbolic\":\"function\"},\"ɵelementAttribute\":{\"__symbolic\":\"function\"},\"ɵelementStyling\":{\"__symbolic\":\"function\"},\"ɵelementStylingMap\":{\"__symbolic\":\"function\"},\"ɵelementStyleProp\":{\"__symbolic\":\"function\"},\"ɵelementStylingApply\":{\"__symbolic\":\"function\"},\"ɵelementClassProp\":{\"__symbolic\":\"function\"},\"ɵtextBinding\":{\"__symbolic\":\"function\"},\"ɵtemplate\":{\"__symbolic\":\"function\"},\"ɵembeddedViewEnd\":{\"__symbolic\":\"function\"},\"ɵstore\":{\"__symbolic\":\"function\"},\"ɵload\":{\"__symbolic\":\"function\",\"parameters\":[\"index\"],\"value\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_be\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"index\"},{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":199,\"character\":4,\"context\":{\"name\":\"viewData\"},\"module\":\"./src/render3/instructions\"}]}},\"ɵpipe\":{\"__symbolic\":\"function\"},\"ɵBaseDef\":{\"__symbolic\":\"interface\"},\"ɵComponentDef\":{\"__symbolic\":\"interface\"},\"ɵComponentDefWithMeta\":{\"__symbolic\":\"interface\"},\"ɵDirectiveDef\":{\"__symbolic\":\"interface\"},\"ɵDirectiveDefWithMeta\":{\"__symbolic\":\"interface\"},\"ɵPipeDef\":{\"__symbolic\":\"interface\"},\"ɵPipeDefWithMeta\":{\"__symbolic\":\"interface\"},\"ɵwhenRendered\":{\"__symbolic\":\"function\",\"parameters\":[\"component\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to a non-exported function\",\"line\":242,\"character\":9,\"context\":{\"name\":\"getRootContext\"},\"module\":\"./src/render3/component\"}},\"ɵi18nAttribute\":{\"__symbolic\":\"function\"},\"ɵi18nExp\":{\"__symbolic\":\"function\"},\"ɵi18nStart\":{\"__symbolic\":\"function\"},\"ɵi18nEnd\":{\"__symbolic\":\"function\"},\"ɵi18nApply\":{\"__symbolic\":\"function\"},\"ɵi18nExpMapping\":{\"__symbolic\":\"function\"},\"ɵi18nInterpolation1\":{\"__symbolic\":\"function\"},\"ɵi18nInterpolation2\":{\"__symbolic\":\"function\"},\"ɵi18nInterpolation3\":{\"__symbolic\":\"function\"},\"ɵi18nInterpolation4\":{\"__symbolic\":\"function\"},\"ɵi18nInterpolation5\":{\"__symbolic\":\"function\"},\"ɵi18nInterpolation6\":{\"__symbolic\":\"function\"},\"ɵi18nInterpolation7\":{\"__symbolic\":\"function\"},\"ɵi18nInterpolation8\":{\"__symbolic\":\"function\"},\"ɵi18nInterpolationV\":{\"__symbolic\":\"function\"},\"ɵi18nMapping\":{\"__symbolic\":\"function\"},\"ɵI18nInstruction\":{\"__symbolic\":\"interface\"},\"ɵI18nExpInstruction\":{\"__symbolic\":\"interface\"},\"ɵWRAP_RENDERER_FACTORY2\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"InjectionToken\"},\"arguments\":[\"WRAP_RENDERER_FACTORY2\"]},\"ɵRender3DebugRendererFactory2\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_t\"},\"members\":{\"createRenderer\":[{\"__symbolic\":\"method\"}]}},\"ɵcompileNgModuleDefs\":{\"__symbolic\":\"function\"},\"ɵpatchComponentDefWithScope\":{\"__symbolic\":\"function\"},\"ɵcompileComponent\":{\"__symbolic\":\"function\"},\"ɵcompileDirective\":{\"__symbolic\":\"function\"},\"ɵcompilePipe\":{\"__symbolic\":\"function\"},\"ɵNgModuleDef\":{\"__symbolic\":\"interface\"},\"ɵNgModuleDefWithMeta\":{\"__symbolic\":\"interface\"},\"ɵNgModuleTransitiveScopes\":{\"__symbolic\":\"interface\"},\"ɵsanitizeHtml\":{\"__symbolic\":\"function\"},\"ɵsanitizeStyle\":{\"__symbolic\":\"function\"},\"ɵsanitizeUrl\":{\"__symbolic\":\"function\"},\"ɵsanitizeResourceUrl\":{\"__symbolic\":\"function\"},\"ɵbypassSanitizationTrustHtml\":{\"__symbolic\":\"function\",\"parameters\":[\"trustedHtml\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to a non-exported function\",\"line\":138,\"character\":9,\"context\":{\"name\":\"bypassSanitizationTrustString\"},\"module\":\"./src/sanitization/bypass\"}},\"ɵbypassSanitizationTrustStyle\":{\"__symbolic\":\"function\",\"parameters\":[\"trustedStyle\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to a non-exported function\",\"line\":138,\"character\":9,\"context\":{\"name\":\"bypassSanitizationTrustString\"},\"module\":\"./src/sanitization/bypass\"}},\"ɵbypassSanitizationTrustScript\":{\"__symbolic\":\"function\",\"parameters\":[\"trustedScript\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to a non-exported function\",\"line\":138,\"character\":9,\"context\":{\"name\":\"bypassSanitizationTrustString\"},\"module\":\"./src/sanitization/bypass\"}},\"ɵbypassSanitizationTrustUrl\":{\"__symbolic\":\"function\",\"parameters\":[\"trustedUrl\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to a non-exported function\",\"line\":138,\"character\":9,\"context\":{\"name\":\"bypassSanitizationTrustString\"},\"module\":\"./src/sanitization/bypass\"}},\"ɵbypassSanitizationTrustResourceUrl\":{\"__symbolic\":\"function\",\"parameters\":[\"trustedResourceUrl\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to a non-exported function\",\"line\":138,\"character\":9,\"context\":{\"name\":\"bypassSanitizationTrustString\"},\"module\":\"./src/sanitization/bypass\"}},\"ɵgetContext\":{\"__symbolic\":\"function\"},\"ɵPlayer\":{\"__symbolic\":\"interface\"},\"ɵPlayState\":{\"Pending\":0,\"Running\":1,\"Paused\":2,\"Finished\":100,\"Destroyed\":200},\"ɵPlayerHandler\":{\"__symbolic\":\"interface\"},\"ɵLContext\":{\"__symbolic\":\"interface\"},\"ɵaddPlayer\":{\"__symbolic\":\"function\"},\"ɵgetPlayers\":{\"__symbolic\":\"function\",\"parameters\":[\"ref\"],\"value\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_bf\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ref\"}]}},\"ɵcompileNgModuleFactory__POST_NGCC__\":{\"__symbolic\":\"function\"},\"ɵR3_COMPILE_COMPONENT__POST_NGCC__\":{\"__symbolic\":\"reference\",\"name\":\"ɵcompileComponent\"},\"ɵR3_COMPILE_DIRECTIVE__POST_NGCC__\":{\"__symbolic\":\"reference\",\"name\":\"ɵcompileDirective\"},\"ɵR3_COMPILE_INJECTABLE__POST_NGCC__\":{\"__symbolic\":\"function\"},\"ɵR3_COMPILE_NGMODULE__POST_NGCC__\":{\"__symbolic\":\"function\"},\"ɵR3_COMPILE_PIPE__POST_NGCC__\":{\"__symbolic\":\"reference\",\"name\":\"ɵcompilePipe\"},\"ɵivyEnable__POST_NGCC__\":true,\"ɵR3_ELEMENT_REF_FACTORY__POST_NGCC__\":{\"__symbolic\":\"function\",\"parameters\":[\"ElementRefToken\"],\"value\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_y\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ElementRefToken\"},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_v\"}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_w\"}}]}},\"ɵR3_TEMPLATE_REF_FACTORY__POST_NGCC__\":{\"__symbolic\":\"function\",\"parameters\":[\"TemplateRefToken\",\"ElementRefToken\"],\"value\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_z\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"TemplateRefToken\"},{\"__symbolic\":\"reference\",\"name\":\"ElementRefToken\"},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_v\"}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_w\"}}]}},\"ɵR3_CHANGE_DETECTOR_REF_FACTORY__POST_NGCC__\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_ba\"},\"arguments\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_v\"}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_w\"}},null]}},\"ɵR3_VIEW_CONTAINER_REF_FACTORY__POST_NGCC__\":{\"__symbolic\":\"function\"},\"ɵR3_RENDERER2_FACTORY__POST_NGCC__\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to a non-exported function\",\"line\":336,\"character\":9,\"context\":{\"name\":\"getOrCreateRenderer2\"},\"module\":\"./src/render3/view_engine_compatibility\"}},\"Sanitizer\":{\"__symbolic\":\"class\",\"members\":{\"sanitize\":[{\"__symbolic\":\"method\"}]}},\"SecurityContext\":{\"NONE\":0,\"HTML\":1,\"STYLE\":2,\"SCRIPT\":3,\"URL\":4,\"RESOURCE_URL\":5},\"ɵregisterModuleFactory\":{\"__symbolic\":\"function\"},\"ɵArgumentType\":{\"Inline\":0,\"Dynamic\":1},\"ɵBindingFlags\":{\"TypeElementAttribute\":1,\"TypeElementClass\":2,\"TypeElementStyle\":4,\"TypeProperty\":8,\"SyntheticProperty\":16,\"SyntheticHostProperty\":32,\"CatSyntheticProperty\":{\"__symbolic\":\"binop\",\"operator\":\"|\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"SyntheticProperty\"},\"right\":{\"__symbolic\":\"reference\",\"name\":\"SyntheticHostProperty\"}},\"Types\":{\"__symbolic\":\"binop\",\"operator\":\"|\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"|\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"|\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"TypeElementAttribute\"},\"right\":{\"__symbolic\":\"reference\",\"name\":\"TypeElementClass\"}},\"right\":{\"__symbolic\":\"reference\",\"name\":\"TypeElementStyle\"}},\"right\":{\"__symbolic\":\"reference\",\"name\":\"TypeProperty\"}}},\"ɵDepFlags\":{\"None\":0,\"SkipSelf\":1,\"Optional\":2,\"Self\":4,\"Value\":8},\"ɵEMPTY_ARRAY\":[],\"ɵEMPTY_MAP\":{},\"ɵNodeFlags\":{\"None\":0,\"TypeElement\":1,\"TypeText\":2,\"ProjectedTemplate\":4,\"CatRenderNode\":{\"__symbolic\":\"binop\",\"operator\":\"|\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"TypeElement\"},\"right\":{\"__symbolic\":\"reference\",\"name\":\"TypeText\"}},\"TypeNgContent\":8,\"TypePipe\":16,\"TypePureArray\":32,\"TypePureObject\":64,\"TypePurePipe\":128,\"CatPureExpression\":{\"__symbolic\":\"binop\",\"operator\":\"|\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"|\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"TypePureArray\"},\"right\":{\"__symbolic\":\"reference\",\"name\":\"TypePureObject\"}},\"right\":{\"__symbolic\":\"reference\",\"name\":\"TypePurePipe\"}},\"TypeValueProvider\":256,\"TypeClassProvider\":512,\"TypeFactoryProvider\":1024,\"TypeUseExistingProvider\":2048,\"LazyProvider\":4096,\"PrivateProvider\":8192,\"TypeDirective\":16384,\"Component\":32768,\"CatProviderNoDirective\":{\"__symbolic\":\"binop\",\"operator\":\"|\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"|\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"|\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"TypeValueProvider\"},\"right\":{\"__symbolic\":\"reference\",\"name\":\"TypeClassProvider\"}},\"right\":{\"__symbolic\":\"reference\",\"name\":\"TypeFactoryProvider\"}},\"right\":{\"__symbolic\":\"reference\",\"name\":\"TypeUseExistingProvider\"}},\"CatProvider\":{\"__symbolic\":\"binop\",\"operator\":\"|\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"CatProviderNoDirective\"},\"right\":{\"__symbolic\":\"reference\",\"name\":\"TypeDirective\"}},\"OnInit\":65536,\"OnDestroy\":131072,\"DoCheck\":262144,\"OnChanges\":524288,\"AfterContentInit\":1048576,\"AfterContentChecked\":2097152,\"AfterViewInit\":4194304,\"AfterViewChecked\":8388608,\"EmbeddedViews\":16777216,\"ComponentView\":33554432,\"TypeContentQuery\":67108864,\"TypeViewQuery\":134217728,\"StaticQuery\":268435456,\"DynamicQuery\":536870912,\"TypeNgModule\":1073741824,\"CatQuery\":{\"__symbolic\":\"binop\",\"operator\":\"|\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"TypeContentQuery\"},\"right\":{\"__symbolic\":\"reference\",\"name\":\"TypeViewQuery\"}},\"Types\":{\"__symbolic\":\"binop\",\"operator\":\"|\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"|\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"|\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"|\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"|\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"CatRenderNode\"},\"right\":{\"__symbolic\":\"reference\",\"name\":\"TypeNgContent\"}},\"right\":{\"__symbolic\":\"reference\",\"name\":\"TypePipe\"}},\"right\":{\"__symbolic\":\"reference\",\"name\":\"CatPureExpression\"}},\"right\":{\"__symbolic\":\"reference\",\"name\":\"CatProvider\"}},\"right\":{\"__symbolic\":\"reference\",\"name\":\"CatQuery\"}}},\"ɵQueryBindingType\":{\"First\":0,\"All\":1},\"ɵQueryValueType\":{\"ElementRef\":0,\"RenderElement\":1,\"TemplateRef\":2,\"ViewContainerRef\":3,\"Provider\":4},\"ɵViewDefinition\":{\"__symbolic\":\"interface\"},\"ɵViewFlags\":{\"None\":0,\"OnPush\":2},\"ɵand\":{\"__symbolic\":\"function\"},\"ɵccf\":{\"__symbolic\":\"function\",\"parameters\":[\"selector\",\"componentType\",\"viewDefFactory\",\"inputs\",\"outputs\",\"ngContentSelectors\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to non-exported class\",\"line\":45,\"character\":0,\"context\":{\"className\":\"ComponentFactory_\"},\"module\":\"./src/view/refs\"}},\"ɵcmf\":{\"__symbolic\":\"function\",\"parameters\":[\"ngModuleType\",\"bootstrapComponents\",\"defFactory\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to non-exported class\",\"line\":54,\"character\":0,\"context\":{\"className\":\"NgModuleFactory_\"},\"module\":\"./src/view/entrypoint\"}},\"ɵcrt\":{\"__symbolic\":\"function\",\"parameters\":[\"values\"],\"value\":{\"id\":\"$$undefined\",\"styles\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"values\"},\"member\":\"styles\"},\"encapsulation\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"values\"},\"member\":\"encapsulation\"},\"data\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"values\"},\"member\":\"data\"}}},\"ɵdid\":{\"__symbolic\":\"function\"},\"ɵeld\":{\"__symbolic\":\"function\"},\"ɵelementEventFullName\":{\"__symbolic\":\"function\",\"parameters\":[\"target\",\"name\"],\"value\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"reference\",\"name\":\"target\"},\"thenExpression\":{\"__symbolic\":\"binop\",\"operator\":\"+\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"+\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"target\"},\"right\":\":\"},\"right\":{\"__symbolic\":\"reference\",\"name\":\"name\"}},\"elseExpression\":{\"__symbolic\":\"reference\",\"name\":\"name\"}}},\"ɵgetComponentViewDefinitionFactory\":{\"__symbolic\":\"function\",\"parameters\":[\"componentFactory\"],\"value\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"componentFactory\"},\"member\":\"viewDefFactory\"}},\"ɵinlineInterpolate\":{\"__symbolic\":\"function\"},\"ɵinterpolate\":{\"__symbolic\":\"function\"},\"ɵmod\":{\"__symbolic\":\"function\"},\"ɵmpd\":{\"__symbolic\":\"function\"},\"ɵncd\":{\"__symbolic\":\"function\",\"parameters\":[\"ngContentIndex\",\"index\"],\"value\":{\"nodeIndex\":-1,\"parent\":null,\"renderParent\":null,\"bindingIndex\":-1,\"outputIndex\":-1,\"checkIndex\":-1,\"flags\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵNodeFlags\"},\"member\":\"TypeNgContent\"},\"childFlags\":0,\"directChildFlags\":0,\"childMatchedQueries\":0,\"matchedQueries\":{},\"matchedQueryIds\":0,\"references\":{},\"ngContentIndex\":{\"__symbolic\":\"reference\",\"name\":\"ngContentIndex\"},\"childCount\":0,\"bindings\":[],\"bindingFlags\":0,\"outputs\":[],\"element\":null,\"provider\":null,\"text\":null,\"query\":null,\"ngContent\":{\"index\":{\"__symbolic\":\"reference\",\"name\":\"index\"}}}},\"ɵnov\":{\"__symbolic\":\"function\"},\"ɵpid\":{\"__symbolic\":\"function\"},\"ɵprd\":{\"__symbolic\":\"function\",\"parameters\":[\"flags\",\"matchedQueries\",\"token\",\"value\",\"deps\"],\"value\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_s\"},\"arguments\":[-1,{\"__symbolic\":\"reference\",\"name\":\"flags\"},{\"__symbolic\":\"reference\",\"name\":\"matchedQueries\"},0,{\"__symbolic\":\"reference\",\"name\":\"token\"},{\"__symbolic\":\"reference\",\"name\":\"value\"},{\"__symbolic\":\"reference\",\"name\":\"deps\"}]}},\"ɵpad\":{\"__symbolic\":\"function\",\"parameters\":[\"checkIndex\",\"argCount\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to a non-exported function\",\"line\":33,\"character\":9,\"context\":{\"name\":\"_pureExpressionDef\"},\"module\":\"./src/view/pure_expression\"}},\"ɵpod\":{\"__symbolic\":\"function\"},\"ɵppd\":{\"__symbolic\":\"function\",\"parameters\":[\"checkIndex\",\"argCount\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to a non-exported function\",\"line\":33,\"character\":9,\"context\":{\"name\":\"_pureExpressionDef\"},\"module\":\"./src/view/pure_expression\"}},\"ɵqud\":{\"__symbolic\":\"function\"},\"ɵted\":{\"__symbolic\":\"function\"},\"ɵunv\":{\"__symbolic\":\"function\"},\"ɵvid\":{\"__symbolic\":\"function\"},\"ɵangular_packages_core_core_bb\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_bc\"},\"arguments\":[{\"ngInjectableDef\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_core_bc\"}}]},\"ɵangular_packages_core_core_bc\":{\"__symbolic\":\"function\"},\"ɵangular_packages_core_core_bd\":{\"__symbolic\":\"interface\"},\"ɵangular_packages_core_core_be\":{\"__symbolic\":\"function\"},\"ɵangular_packages_core_core_bf\":{\"__symbolic\":\"function\"}},\"origins\":{\"ɵangular_packages_core_core_a\":\"./src/util/decorators\",\"ɵangular_packages_core_core_b\":\"./src/util/decorators\",\"ɵangular_packages_core_core_c\":\"./src/di/reflective_injector\",\"ɵangular_packages_core_core_d\":\"./src/di/reflective_provider\",\"ɵangular_packages_core_core_e\":\"./src/di/reflective_provider\",\"ɵangular_packages_core_core_f\":\"./src/application_tokens\",\"ɵangular_packages_core_core_g\":\"./src/change_detection/differs/default_iterable_differ\",\"ɵangular_packages_core_core_h\":\"./src/change_detection/differs/default_keyvalue_differ\",\"ɵangular_packages_core_core_i\":\"./src/application_module\",\"ɵangular_packages_core_core_j\":\"./src/application_module\",\"ɵangular_packages_core_core_k\":\"./src/application_module\",\"ɵangular_packages_core_core_l\":\"./src/application_module\",\"ɵangular_packages_core_core_m\":\"./src/profile/profile\",\"ɵangular_packages_core_core_n\":\"./src/profile/wtf_impl\",\"ɵangular_packages_core_core_o\":\"./src/profile/wtf_impl\",\"ɵangular_packages_core_core_p\":\"./src/profile/wtf_impl\",\"ɵangular_packages_core_core_q\":\"./src/profile/wtf_impl\",\"ɵangular_packages_core_core_r\":\"./src/profile/wtf_impl\",\"ɵangular_packages_core_core_s\":\"./src/view/provider\",\"ɵangular_packages_core_core_t\":\"./src/view/services\",\"ɵangular_packages_core_core_u\":\"./src/view/types\",\"ɵangular_packages_core_core_v\":\"./src/render3/instructions\",\"ɵangular_packages_core_core_w\":\"./src/render3/instructions\",\"ɵangular_packages_core_core_x\":\"./src/render3/instructions\",\"ɵangular_packages_core_core_y\":\"./src/render3/view_engine_compatibility\",\"ɵangular_packages_core_core_z\":\"./src/render3/view_engine_compatibility\",\"ɵangular_packages_core_core_ba\":\"./src/render3/view_engine_compatibility\",\"ANALYZE_FOR_ENTRY_COMPONENTS\":\"./src/metadata/di\",\"Attribute\":\"./src/metadata/di\",\"ContentChild\":\"./src/metadata/di\",\"ContentChildDecorator\":\"./src/metadata/di\",\"ContentChildren\":\"./src/metadata/di\",\"ContentChildrenDecorator\":\"./src/metadata/di\",\"Query\":\"./src/metadata/di\",\"ViewChild\":\"./src/metadata/di\",\"ViewChildDecorator\":\"./src/metadata/di\",\"ViewChildren\":\"./src/metadata/di\",\"ViewChildrenDecorator\":\"./src/metadata/di\",\"Component\":\"./src/metadata/directives\",\"ComponentDecorator\":\"./src/metadata/directives\",\"Directive\":\"./src/metadata/directives\",\"DirectiveDecorator\":\"./src/metadata/directives\",\"HostBinding\":\"./src/metadata/directives\",\"HostListener\":\"./src/metadata/directives\",\"Input\":\"./src/metadata/directives\",\"Output\":\"./src/metadata/directives\",\"Pipe\":\"./src/metadata/directives\",\"AfterContentChecked\":\"./src/metadata/lifecycle_hooks\",\"AfterContentInit\":\"./src/metadata/lifecycle_hooks\",\"AfterViewChecked\":\"./src/metadata/lifecycle_hooks\",\"AfterViewInit\":\"./src/metadata/lifecycle_hooks\",\"DoCheck\":\"./src/metadata/lifecycle_hooks\",\"OnChanges\":\"./src/metadata/lifecycle_hooks\",\"OnDestroy\":\"./src/metadata/lifecycle_hooks\",\"OnInit\":\"./src/metadata/lifecycle_hooks\",\"CUSTOM_ELEMENTS_SCHEMA\":\"./src/metadata/ng_module\",\"DoBootstrap\":\"./src/metadata/ng_module\",\"ModuleWithProviders\":\"./src/metadata/ng_module\",\"NO_ERRORS_SCHEMA\":\"./src/metadata/ng_module\",\"NgModule\":\"./src/metadata/ng_module\",\"SchemaMetadata\":\"./src/metadata/ng_module\",\"ViewEncapsulation\":\"./src/metadata/view\",\"Version\":\"./src/version\",\"VERSION\":\"./src/version\",\"TypeDecorator\":\"./src/util/decorators\",\"InjectDecorator\":\"./src/di/metadata\",\"Inject\":\"./src/di/metadata\",\"OptionalDecorator\":\"./src/di/metadata\",\"Optional\":\"./src/di/metadata\",\"SelfDecorator\":\"./src/di/metadata\",\"Self\":\"./src/di/metadata\",\"SkipSelfDecorator\":\"./src/di/metadata\",\"SkipSelf\":\"./src/di/metadata\",\"HostDecorator\":\"./src/di/metadata\",\"Host\":\"./src/di/metadata\",\"InjectableType\":\"./src/di/defs\",\"InjectorType\":\"./src/di/defs\",\"defineInjectable\":\"./src/di/defs\",\"defineInjector\":\"./src/di/defs\",\"forwardRef\":\"./src/di/forward_ref\",\"resolveForwardRef\":\"./src/di/forward_ref\",\"ForwardRefFn\":\"./src/di/forward_ref\",\"Injectable\":\"./src/di/injectable\",\"InjectableDecorator\":\"./src/di/injectable\",\"InjectableProvider\":\"./src/di/injectable\",\"inject\":\"./src/di/injector\",\"InjectFlags\":\"./src/di/injector\",\"INJECTOR\":\"./src/di/injector\",\"Injector\":\"./src/di/injector\",\"ReflectiveInjector\":\"./src/di/reflective_injector\",\"StaticProvider\":\"./src/di/provider\",\"ValueProvider\":\"./src/di/provider\",\"ConstructorSansProvider\":\"./src/di/provider\",\"ExistingProvider\":\"./src/di/provider\",\"FactoryProvider\":\"./src/di/provider\",\"Provider\":\"./src/di/provider\",\"TypeProvider\":\"./src/di/provider\",\"ClassProvider\":\"./src/di/provider\",\"createInjector\":\"./src/di/r3_injector\",\"ResolvedReflectiveFactory\":\"./src/di/reflective_provider\",\"ResolvedReflectiveProvider\":\"./src/di/reflective_provider\",\"ReflectiveKey\":\"./src/di/reflective_key\",\"InjectionToken\":\"./src/di/injection_token\",\"createPlatform\":\"./src/application_ref\",\"assertPlatform\":\"./src/application_ref\",\"destroyPlatform\":\"./src/application_ref\",\"getPlatform\":\"./src/application_ref\",\"PlatformRef\":\"./src/application_ref\",\"ApplicationRef\":\"./src/application_ref\",\"createPlatformFactory\":\"./src/application_ref\",\"NgProbeToken\":\"./src/application_ref\",\"enableProdMode\":\"./src/is_dev_mode\",\"isDevMode\":\"./src/is_dev_mode\",\"APP_ID\":\"./src/application_tokens\",\"PACKAGE_ROOT_URL\":\"./src/application_tokens\",\"PLATFORM_INITIALIZER\":\"./src/application_tokens\",\"PLATFORM_ID\":\"./src/application_tokens\",\"APP_BOOTSTRAP_LISTENER\":\"./src/application_tokens\",\"APP_INITIALIZER\":\"./src/application_init\",\"ApplicationInitStatus\":\"./src/application_init\",\"NgZone\":\"./src/zone/ng_zone\",\"ɵNoopNgZone\":\"./src/zone/ng_zone\",\"RenderComponentType\":\"./src/render/api\",\"Renderer\":\"./src/render/api\",\"Renderer2\":\"./src/render/api\",\"RendererFactory2\":\"./src/render/api\",\"RendererStyleFlags2\":\"./src/render/api\",\"RendererType2\":\"./src/render/api\",\"RootRenderer\":\"./src/render/api\",\"COMPILER_OPTIONS\":\"./src/linker/compiler\",\"Compiler\":\"./src/linker/compiler\",\"CompilerFactory\":\"./src/linker/compiler\",\"CompilerOptions\":\"./src/linker/compiler\",\"ModuleWithComponentFactories\":\"./src/linker/compiler\",\"ComponentFactory\":\"./src/linker/component_factory\",\"ComponentRef\":\"./src/linker/component_factory\",\"ComponentFactoryResolver\":\"./src/linker/component_factory_resolver\",\"ElementRef\":\"./src/linker/element_ref\",\"NgModuleFactory\":\"./src/linker/ng_module_factory\",\"NgModuleRef\":\"./src/linker/ng_module_factory\",\"NgModuleFactoryLoader\":\"./src/linker/ng_module_factory_loader\",\"getModuleFactory\":\"./src/linker/ng_module_factory_loader\",\"QueryList\":\"./src/linker/query_list\",\"SystemJsNgModuleLoader\":\"./src/linker/system_js_ng_module_factory_loader\",\"SystemJsNgModuleLoaderConfig\":\"./src/linker/system_js_ng_module_factory_loader\",\"TemplateRef\":\"./src/linker/template_ref\",\"ViewContainerRef\":\"./src/linker/view_container_ref\",\"EmbeddedViewRef\":\"./src/linker/view_ref\",\"ViewRef\":\"./src/linker/view_ref\",\"DebugElement\":\"./src/debug/debug_node\",\"DebugNode\":\"./src/debug/debug_node\",\"asNativeElements\":\"./src/debug/debug_node\",\"getDebugNode\":\"./src/debug/debug_node\",\"Predicate\":\"./src/debug/debug_node\",\"GetTestability\":\"./src/testability/testability\",\"Testability\":\"./src/testability/testability\",\"TestabilityRegistry\":\"./src/testability/testability\",\"setTestabilityGetter\":\"./src/testability/testability\",\"ChangeDetectionStrategy\":\"./src/change_detection/constants\",\"ChangeDetectorRef\":\"./src/change_detection/change_detector_ref\",\"CollectionChangeRecord\":\"./src/change_detection/differs/iterable_differs\",\"DefaultIterableDiffer\":\"./src/change_detection/differs/default_iterable_differ\",\"IterableChangeRecord\":\"./src/change_detection/differs/iterable_differs\",\"IterableChanges\":\"./src/change_detection/differs/iterable_differs\",\"IterableDiffer\":\"./src/change_detection/differs/iterable_differs\",\"IterableDifferFactory\":\"./src/change_detection/differs/iterable_differs\",\"IterableDiffers\":\"./src/change_detection/differs/iterable_differs\",\"KeyValueChangeRecord\":\"./src/change_detection/differs/keyvalue_differs\",\"KeyValueChanges\":\"./src/change_detection/differs/keyvalue_differs\",\"KeyValueDiffer\":\"./src/change_detection/differs/keyvalue_differs\",\"KeyValueDifferFactory\":\"./src/change_detection/differs/keyvalue_differs\",\"KeyValueDiffers\":\"./src/change_detection/differs/keyvalue_differs\",\"NgIterable\":\"./src/change_detection/differs/iterable_differs\",\"PipeTransform\":\"./src/change_detection/pipe_transform\",\"SimpleChange\":\"./src/change_detection/change_detection_util\",\"SimpleChanges\":\"./src/metadata/lifecycle_hooks\",\"TrackByFunction\":\"./src/change_detection/differs/iterable_differs\",\"WrappedValue\":\"./src/change_detection/change_detection_util\",\"platformCore\":\"./src/platform_core_providers\",\"TRANSLATIONS\":\"./src/i18n/tokens\",\"TRANSLATIONS_FORMAT\":\"./src/i18n/tokens\",\"LOCALE_ID\":\"./src/i18n/tokens\",\"MissingTranslationStrategy\":\"./src/i18n/tokens\",\"ApplicationModule\":\"./src/application_module\",\"wtfCreateScope\":\"./src/profile/profile\",\"wtfLeave\":\"./src/profile/profile\",\"wtfStartTimeRange\":\"./src/profile/profile\",\"wtfEndTimeRange\":\"./src/profile/profile\",\"WtfScopeFn\":\"./src/profile/wtf_impl\",\"Type\":\"./src/type\",\"EventEmitter\":\"./src/event_emitter\",\"ErrorHandler\":\"./src/error_handler\",\"ɵALLOW_MULTIPLE_PLATFORMS\":\"./src/application_ref\",\"ɵAPP_ID_RANDOM_PROVIDER\":\"./src/application_tokens\",\"ɵdefaultIterableDiffers\":\"./src/change_detection/change_detection\",\"ɵdefaultKeyValueDiffers\":\"./src/change_detection/change_detection\",\"ɵdevModeEqual\":\"./src/change_detection/change_detection_util\",\"ɵisListLikeIterable\":\"./src/change_detection/change_detection_util\",\"ɵChangeDetectorStatus\":\"./src/change_detection/constants\",\"ɵisDefaultChangeDetectionStrategy\":\"./src/change_detection/constants\",\"ɵConsole\":\"./src/console\",\"ɵInjectableDef\":\"./src/di/defs\",\"ɵInjectorDef\":\"./src/di/defs\",\"ɵgetInjectableDef\":\"./src/di/defs\",\"ɵinject\":\"./src/di/injector\",\"ɵsetCurrentInjector\":\"./src/di/injector\",\"ɵAPP_ROOT\":\"./src/di/scope\",\"ɵivyEnabled\":\"./src/ivy_switch/compiler/legacy\",\"ɵComponentFactory\":\"./src/linker/component_factory\",\"ɵCodegenComponentFactoryResolver\":\"./src/linker/component_factory_resolver\",\"ɵresolveComponentResources\":\"./src/metadata/resource_loading\",\"ɵReflectionCapabilities\":\"./src/reflection/reflection_capabilities\",\"ɵGetterFn\":\"./src/reflection/types\",\"ɵMethodFn\":\"./src/reflection/types\",\"ɵSetterFn\":\"./src/reflection/types\",\"ɵDirectRenderer\":\"./src/render/api\",\"ɵRenderDebugInfo\":\"./src/render/api\",\"ɵ_sanitizeHtml\":\"./src/sanitization/html_sanitizer\",\"ɵ_sanitizeStyle\":\"./src/sanitization/style_sanitizer\",\"ɵ_sanitizeUrl\":\"./src/sanitization/url_sanitizer\",\"ɵglobal\":\"./src/util\",\"ɵlooseIdentical\":\"./src/util\",\"ɵstringify\":\"./src/util\",\"ɵmakeDecorator\":\"./src/util/decorators\",\"ɵisObservable\":\"./src/util/lang\",\"ɵisPromise\":\"./src/util/lang\",\"ɵclearOverrides\":\"./src/view/entrypoint\",\"ɵinitServicesIfNeeded\":\"./src/view/services\",\"ɵoverrideComponentView\":\"./src/view/entrypoint\",\"ɵoverrideProvider\":\"./src/view/entrypoint\",\"ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR\":\"./src/view/provider\",\"ɵdefineBase\":\"./src/render3/definition\",\"ɵdefineComponent\":\"./src/render3/definition\",\"ɵdefineDirective\":\"./src/render3/definition\",\"ɵdefinePipe\":\"./src/render3/definition\",\"ɵdefineNgModule\":\"./src/render3/definition\",\"ɵdetectChanges\":\"./src/render3/instructions\",\"ɵrenderComponent\":\"./src/render3/component\",\"ɵComponentType\":\"./src/render3/interfaces/definition\",\"ɵRender3ComponentFactory\":\"./src/render3/component_ref\",\"ɵRender3ComponentRef\":\"./src/render3/component_ref\",\"ɵDirectiveType\":\"./src/render3/interfaces/definition\",\"ɵRenderFlags\":\"./src/render3/interfaces/definition\",\"ɵdirectiveInject\":\"./src/render3/di\",\"ɵinjectAttribute\":\"./src/render3/di\",\"ɵgetFactoryOf\":\"./src/render3/di\",\"ɵgetInheritedFactory\":\"./src/render3/di\",\"ɵtemplateRefExtractor\":\"./src/render3/view_engine_compatibility_prebound\",\"ɵPublicFeature\":\"./src/render3/features/public_feature\",\"ɵInheritDefinitionFeature\":\"./src/render3/features/inherit_definition_feature\",\"ɵNgOnChangesFeature\":\"./src/render3/features/ng_onchanges_feature\",\"ɵNgModuleType\":\"./src/render3/ng_module_ref\",\"ɵRender3NgModuleRef\":\"./src/render3/ng_module_ref\",\"ɵCssSelectorList\":\"./src/render3/interfaces/projection\",\"ɵmarkDirty\":\"./src/render3/instructions\",\"ɵNgModuleFactory\":\"./src/render3/ng_module_ref\",\"ɵNO_CHANGE\":\"./src/render3/instructions\",\"ɵcontainer\":\"./src/render3/instructions\",\"ɵnextContext\":\"./src/render3/instructions\",\"ɵelementStart\":\"./src/render3/instructions\",\"ɵnamespaceHTML\":\"./src/render3/instructions\",\"ɵnamespaceMathML\":\"./src/render3/instructions\",\"ɵnamespaceSVG\":\"./src/render3/instructions\",\"ɵelement\":\"./src/render3/instructions\",\"ɵlistener\":\"./src/render3/instructions\",\"ɵtext\":\"./src/render3/instructions\",\"ɵembeddedViewStart\":\"./src/render3/instructions\",\"ɵquery\":\"./src/render3/query\",\"ɵregisterContentQuery\":\"./src/render3/instructions\",\"ɵprojection\":\"./src/render3/instructions\",\"ɵbind\":\"./src/render3/instructions\",\"ɵinterpolation1\":\"./src/render3/instructions\",\"ɵinterpolation2\":\"./src/render3/instructions\",\"ɵinterpolation3\":\"./src/render3/instructions\",\"ɵinterpolation4\":\"./src/render3/instructions\",\"ɵinterpolation5\":\"./src/render3/instructions\",\"ɵinterpolation6\":\"./src/render3/instructions\",\"ɵinterpolation7\":\"./src/render3/instructions\",\"ɵinterpolation8\":\"./src/render3/instructions\",\"ɵinterpolationV\":\"./src/render3/instructions\",\"ɵpipeBind1\":\"./src/render3/pipe\",\"ɵpipeBind2\":\"./src/render3/pipe\",\"ɵpipeBind3\":\"./src/render3/pipe\",\"ɵpipeBind4\":\"./src/render3/pipe\",\"ɵpipeBindV\":\"./src/render3/pipe\",\"ɵpureFunction0\":\"./src/render3/pure_function\",\"ɵpureFunction1\":\"./src/render3/pure_function\",\"ɵpureFunction2\":\"./src/render3/pure_function\",\"ɵpureFunction3\":\"./src/render3/pure_function\",\"ɵpureFunction4\":\"./src/render3/pure_function\",\"ɵpureFunction5\":\"./src/render3/pure_function\",\"ɵpureFunction6\":\"./src/render3/pure_function\",\"ɵpureFunction7\":\"./src/render3/pure_function\",\"ɵpureFunction8\":\"./src/render3/pure_function\",\"ɵpureFunctionV\":\"./src/render3/pure_function\",\"ɵgetCurrentView\":\"./src/render3/instructions\",\"ɵrestoreView\":\"./src/render3/instructions\",\"ɵcontainerRefreshStart\":\"./src/render3/instructions\",\"ɵcontainerRefreshEnd\":\"./src/render3/instructions\",\"ɵqueryRefresh\":\"./src/render3/query\",\"ɵloadQueryList\":\"./src/render3/instructions\",\"ɵelementEnd\":\"./src/render3/instructions\",\"ɵelementProperty\":\"./src/render3/instructions\",\"ɵprojectionDef\":\"./src/render3/instructions\",\"ɵreference\":\"./src/render3/instructions\",\"ɵenableBindings\":\"./src/render3/instructions\",\"ɵdisableBindings\":\"./src/render3/instructions\",\"ɵelementAttribute\":\"./src/render3/instructions\",\"ɵelementStyling\":\"./src/render3/instructions\",\"ɵelementStylingMap\":\"./src/render3/instructions\",\"ɵelementStyleProp\":\"./src/render3/instructions\",\"ɵelementStylingApply\":\"./src/render3/instructions\",\"ɵelementClassProp\":\"./src/render3/instructions\",\"ɵtextBinding\":\"./src/render3/instructions\",\"ɵtemplate\":\"./src/render3/instructions\",\"ɵembeddedViewEnd\":\"./src/render3/instructions\",\"ɵstore\":\"./src/render3/instructions\",\"ɵload\":\"./src/render3/instructions\",\"ɵpipe\":\"./src/render3/pipe\",\"ɵBaseDef\":\"./src/render3/interfaces/definition\",\"ɵComponentDef\":\"./src/render3/interfaces/definition\",\"ɵComponentDefWithMeta\":\"./src/render3/interfaces/definition\",\"ɵDirectiveDef\":\"./src/render3/interfaces/definition\",\"ɵDirectiveDefWithMeta\":\"./src/render3/interfaces/definition\",\"ɵPipeDef\":\"./src/render3/interfaces/definition\",\"ɵPipeDefWithMeta\":\"./src/render3/interfaces/definition\",\"ɵwhenRendered\":\"./src/render3/component\",\"ɵi18nAttribute\":\"./src/render3/i18n\",\"ɵi18nExp\":\"./src/render3/i18n\",\"ɵi18nStart\":\"./src/render3/i18n\",\"ɵi18nEnd\":\"./src/render3/i18n\",\"ɵi18nApply\":\"./src/render3/i18n\",\"ɵi18nExpMapping\":\"./src/render3/i18n\",\"ɵi18nInterpolation1\":\"./src/render3/i18n\",\"ɵi18nInterpolation2\":\"./src/render3/i18n\",\"ɵi18nInterpolation3\":\"./src/render3/i18n\",\"ɵi18nInterpolation4\":\"./src/render3/i18n\",\"ɵi18nInterpolation5\":\"./src/render3/i18n\",\"ɵi18nInterpolation6\":\"./src/render3/i18n\",\"ɵi18nInterpolation7\":\"./src/render3/i18n\",\"ɵi18nInterpolation8\":\"./src/render3/i18n\",\"ɵi18nInterpolationV\":\"./src/render3/i18n\",\"ɵi18nMapping\":\"./src/render3/i18n\",\"ɵI18nInstruction\":\"./src/render3/i18n\",\"ɵI18nExpInstruction\":\"./src/render3/i18n\",\"ɵWRAP_RENDERER_FACTORY2\":\"./src/render3/component_ref\",\"ɵRender3DebugRendererFactory2\":\"./src/render3/debug\",\"ɵcompileNgModuleDefs\":\"./src/render3/jit/module\",\"ɵpatchComponentDefWithScope\":\"./src/render3/jit/module\",\"ɵcompileComponent\":\"./src/render3/jit/directive\",\"ɵcompileDirective\":\"./src/render3/jit/directive\",\"ɵcompilePipe\":\"./src/render3/jit/pipe\",\"ɵNgModuleDef\":\"./src/metadata/ng_module\",\"ɵNgModuleDefWithMeta\":\"./src/metadata/ng_module\",\"ɵNgModuleTransitiveScopes\":\"./src/metadata/ng_module\",\"ɵsanitizeHtml\":\"./src/sanitization/sanitization\",\"ɵsanitizeStyle\":\"./src/sanitization/sanitization\",\"ɵsanitizeUrl\":\"./src/sanitization/sanitization\",\"ɵsanitizeResourceUrl\":\"./src/sanitization/sanitization\",\"ɵbypassSanitizationTrustHtml\":\"./src/sanitization/bypass\",\"ɵbypassSanitizationTrustStyle\":\"./src/sanitization/bypass\",\"ɵbypassSanitizationTrustScript\":\"./src/sanitization/bypass\",\"ɵbypassSanitizationTrustUrl\":\"./src/sanitization/bypass\",\"ɵbypassSanitizationTrustResourceUrl\":\"./src/sanitization/bypass\",\"ɵgetContext\":\"./src/render3/context_discovery\",\"ɵPlayer\":\"./src/render3/interfaces/player\",\"ɵPlayState\":\"./src/render3/interfaces/player\",\"ɵPlayerHandler\":\"./src/render3/interfaces/player\",\"ɵLContext\":\"./src/render3/interfaces/context\",\"ɵaddPlayer\":\"./src/render3/player\",\"ɵgetPlayers\":\"./src/render3/player\",\"ɵcompileNgModuleFactory__POST_NGCC__\":\"./src/application_ref\",\"ɵR3_COMPILE_COMPONENT__POST_NGCC__\":\"./src/render3/jit/directive\",\"ɵR3_COMPILE_DIRECTIVE__POST_NGCC__\":\"./src/render3/jit/directive\",\"ɵR3_COMPILE_INJECTABLE__POST_NGCC__\":\"./src/render3/jit/injectable\",\"ɵR3_COMPILE_NGMODULE__POST_NGCC__\":\"./src/render3/jit/module\",\"ɵR3_COMPILE_PIPE__POST_NGCC__\":\"./src/render3/jit/pipe\",\"ɵivyEnable__POST_NGCC__\":\"./src/ivy_switch/compiler/ivy_switch_on\",\"ɵR3_ELEMENT_REF_FACTORY__POST_NGCC__\":\"./src/render3/view_engine_compatibility\",\"ɵR3_TEMPLATE_REF_FACTORY__POST_NGCC__\":\"./src/render3/view_engine_compatibility\",\"ɵR3_CHANGE_DETECTOR_REF_FACTORY__POST_NGCC__\":\"./src/render3/view_engine_compatibility\",\"ɵR3_VIEW_CONTAINER_REF_FACTORY__POST_NGCC__\":\"./src/render3/view_engine_compatibility\",\"ɵR3_RENDERER2_FACTORY__POST_NGCC__\":\"./src/render3/view_engine_compatibility\",\"Sanitizer\":\"./src/sanitization/security\",\"SecurityContext\":\"./src/sanitization/security\",\"ɵregisterModuleFactory\":\"./src/linker/ng_module_factory_loader\",\"ɵArgumentType\":\"./src/view/types\",\"ɵBindingFlags\":\"./src/view/types\",\"ɵDepFlags\":\"./src/view/types\",\"ɵEMPTY_ARRAY\":\"./src/view/util\",\"ɵEMPTY_MAP\":\"./src/view/util\",\"ɵNodeFlags\":\"./src/view/types\",\"ɵQueryBindingType\":\"./src/view/types\",\"ɵQueryValueType\":\"./src/view/types\",\"ɵViewDefinition\":\"./src/view/types\",\"ɵViewFlags\":\"./src/view/types\",\"ɵand\":\"./src/view/element\",\"ɵccf\":\"./src/view/refs\",\"ɵcmf\":\"./src/view/entrypoint\",\"ɵcrt\":\"./src/view/util\",\"ɵdid\":\"./src/view/provider\",\"ɵeld\":\"./src/view/element\",\"ɵelementEventFullName\":\"./src/view/util\",\"ɵgetComponentViewDefinitionFactory\":\"./src/view/refs\",\"ɵinlineInterpolate\":\"./src/view/util\",\"ɵinterpolate\":\"./src/view/util\",\"ɵmod\":\"./src/view/ng_module\",\"ɵmpd\":\"./src/view/ng_module\",\"ɵncd\":\"./src/view/ng_content\",\"ɵnov\":\"./src/view/refs\",\"ɵpid\":\"./src/view/provider\",\"ɵprd\":\"./src/view/provider\",\"ɵpad\":\"./src/view/pure_expression\",\"ɵpod\":\"./src/view/pure_expression\",\"ɵppd\":\"./src/view/pure_expression\",\"ɵqud\":\"./src/view/query\",\"ɵted\":\"./src/view/text\",\"ɵunv\":\"./src/view/util\",\"ɵvid\":\"./src/view/view\",\"ɵangular_packages_core_core_bb\":\"./src/render3/fields\",\"ɵangular_packages_core_core_bc\":\"./src/util/property\",\"ɵangular_packages_core_core_bd\":\"./src/render3/interfaces/view\",\"ɵangular_packages_core_core_be\":\"./src/render3/util\",\"ɵangular_packages_core_core_bf\":\"./src/render3/styling/util\"},\"importAs\":\"@angular/core\"}"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/meta.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a meta element.\n *\n * @experimental\n */\nexport declare type MetaDefinition = {\n    charset?: string;\n    content?: string;\n    httpEquiv?: string;\n    id?: string;\n    itemprop?: string;\n    name?: string;\n    property?: string;\n    scheme?: string;\n    url?: string;\n} & {\n    [prop: string]: string;\n};\n/**\n * Factory to create Meta service.\n */\nexport declare function createMeta(): Meta;\n/**\n * A service that can be used to get and add meta tags.\n *\n * @experimental\n */\nexport declare class Meta {\n    private _doc;\n    private _dom;\n    constructor(_doc: any);\n    addTag(tag: MetaDefinition, forceCreation?: boolean): HTMLMetaElement | null;\n    addTags(tags: MetaDefinition[], forceCreation?: boolean): HTMLMetaElement[];\n    getTag(attrSelector: string): HTMLMetaElement | null;\n    getTags(attrSelector: string): HTMLMetaElement[];\n    updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement | null;\n    removeTag(attrSelector: string): void;\n    removeTagElement(meta: HTMLMetaElement): void;\n    private _getOrCreateElement;\n    private _setMetaElementAttributes;\n    private _parseSelector;\n    private _containsAttributes;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/testing/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/platform-browser';\n"
  },
  {
    "path": "node_modules/@angular/core/testing/testing.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"ɵangular_packages_core_testing_testing_a\":{\"__symbolic\":\"class\",\"members\":{\"initTestEnvironment\":[{\"__symbolic\":\"method\"}],\"resetTestEnvironment\":[{\"__symbolic\":\"method\"}],\"resetTestingModule\":[{\"__symbolic\":\"method\"}],\"configureCompiler\":[{\"__symbolic\":\"method\"}],\"configureTestingModule\":[{\"__symbolic\":\"method\"}],\"compileComponents\":[{\"__symbolic\":\"method\"}],\"_initIfNeeded\":[{\"__symbolic\":\"method\"}],\"_createCompilerAndModule\":[{\"__symbolic\":\"method\"}],\"_assertNotInstantiated\":[{\"__symbolic\":\"method\"}],\"get\":[{\"__symbolic\":\"method\"}],\"execute\":[{\"__symbolic\":\"method\"}],\"overrideModule\":[{\"__symbolic\":\"method\"}],\"overrideComponent\":[{\"__symbolic\":\"method\"}],\"overrideDirective\":[{\"__symbolic\":\"method\"}],\"overridePipe\":[{\"__symbolic\":\"method\"}],\"overrideProvider\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}],\"deprecatedOverrideProvider\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}],\"overrideProviderImpl\":[{\"__symbolic\":\"method\"}],\"overrideTemplateUsingTestingModule\":[{\"__symbolic\":\"method\"}],\"createComponent\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"compileComponents\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"getTestBed\"}},\"member\":\"compileComponents\"}}},\"get\":{\"__symbolic\":\"function\",\"parameters\":[\"token\",\"notFoundValue\"],\"defaults\":[null,{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injector\",\"line\":245,\"character\":46},\"member\":\"THROW_IF_NOT_FOUND\"}],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to a non-exported function\",\"line\":652,\"character\":9,\"context\":{\"name\":\"_getTestBedViewEngine\"},\"module\":\"./src/test_bed\"}},\"createComponent\":{\"__symbolic\":\"function\",\"parameters\":[\"component\"],\"value\":{\"__symbolic\":\"error\",\"message\":\"Reference to a non-exported function\",\"line\":652,\"character\":9,\"context\":{\"name\":\"_getTestBedViewEngine\"},\"module\":\"./src/test_bed\"}}}},\"async\":{\"__symbolic\":\"function\"},\"ComponentFixture\":{\"__symbolic\":\"class\",\"arity\":1,\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ComponentRef\",\"module\":\"@angular/core\",\"arguments\":[{\"__symbolic\":\"error\",\"message\":\"Could not resolve type\",\"line\":53,\"character\":40,\"context\":{\"typeName\":\"T\"},\"module\":\"./src/component_fixture\"}]},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgZone\",\"line\":53,\"character\":59},{\"__symbolic\":\"reference\",\"name\":\"boolean\"}]}],\"_tick\":[{\"__symbolic\":\"method\"}],\"detectChanges\":[{\"__symbolic\":\"method\"}],\"checkNoChanges\":[{\"__symbolic\":\"method\"}],\"autoDetectChanges\":[{\"__symbolic\":\"method\"}],\"isStable\":[{\"__symbolic\":\"method\"}],\"whenStable\":[{\"__symbolic\":\"method\"}],\"_getRenderer\":[{\"__symbolic\":\"method\"}],\"whenRenderingDone\":[{\"__symbolic\":\"method\"}],\"destroy\":[{\"__symbolic\":\"method\"}]}},\"resetFakeAsyncZone\":{\"__symbolic\":\"function\"},\"fakeAsync\":{\"__symbolic\":\"function\"},\"tick\":{\"__symbolic\":\"function\"},\"flush\":{\"__symbolic\":\"function\"},\"discardPeriodicTasks\":{\"__symbolic\":\"function\"},\"flushMicrotasks\":{\"__symbolic\":\"function\"},\"TestBed\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ɵivyEnabled\",\"line\":639,\"character\":4},\"thenExpression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_testing_testing_b\"},\"elseExpression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_testing_testing_a\"}},\"getTestBed\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ɵivyEnabled\",\"line\":648,\"character\":41},\"thenExpression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_testing_testing_c\"},\"elseExpression\":{\"__symbolic\":\"error\",\"message\":\"Reference to a non-exported function\",\"line\":652,\"character\":9,\"context\":{\"name\":\"_getTestBedViewEngine\"},\"module\":\"./src/test_bed\"}},\"inject\":{\"__symbolic\":\"function\"},\"InjectSetupWrapper\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":703,\"character\":34,\"module\":\"./src/test_bed\"}]}],\"_addModule\":[{\"__symbolic\":\"method\"}],\"inject\":[{\"__symbolic\":\"method\"}]}},\"withModule\":{\"__symbolic\":\"function\"},\"TestComponentRenderer\":{\"__symbolic\":\"class\",\"members\":{\"insertRootElement\":[{\"__symbolic\":\"method\"}]}},\"ComponentFixtureAutoDetect\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":27,\"character\":8},\"arguments\":[\"ComponentFixtureAutoDetect\"]},\"ComponentFixtureNoNgZone\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":32,\"character\":44},\"arguments\":[\"ComponentFixtureNoNgZone\"]},\"TestModuleMetadata\":{\"__symbolic\":\"interface\"},\"TestBedStatic\":{\"__symbolic\":\"interface\"},\"MetadataOverride\":{\"__symbolic\":\"interface\"},\"ɵMetadataOverrider\":{\"__symbolic\":\"class\",\"members\":{\"overrideMetadata\":[{\"__symbolic\":\"method\"}]}},\"ɵTestingCompiler\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Compiler\",\"line\":22,\"character\":37},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":21,\"character\":1}}],\"members\":{\"overrideModule\":[{\"__symbolic\":\"method\"}],\"overrideDirective\":[{\"__symbolic\":\"method\"}],\"overrideComponent\":[{\"__symbolic\":\"method\"}],\"overridePipe\":[{\"__symbolic\":\"method\"}],\"loadAotSummaries\":[{\"__symbolic\":\"method\"}],\"getComponentFactory\":[{\"__symbolic\":\"method\"}],\"getComponentFromError\":[{\"__symbolic\":\"method\"}]}},\"ɵTestingCompilerFactory\":{\"__symbolic\":\"class\",\"members\":{\"createTestingCompiler\":[{\"__symbolic\":\"method\"}]}},\"ɵangular_packages_core_testing_testing_b\":{\"__symbolic\":\"class\",\"members\":{\"overrideTemplateUsingTestingModule\":[{\"__symbolic\":\"method\"}],\"initTestEnvironment\":[{\"__symbolic\":\"method\"}],\"resetTestEnvironment\":[{\"__symbolic\":\"method\"}],\"resetTestingModule\":[{\"__symbolic\":\"method\"}],\"configureCompiler\":[{\"__symbolic\":\"method\"}],\"configureTestingModule\":[{\"__symbolic\":\"method\"}],\"compileComponents\":[{\"__symbolic\":\"method\"}],\"get\":[{\"__symbolic\":\"method\"}],\"execute\":[{\"__symbolic\":\"method\"}],\"overrideModule\":[{\"__symbolic\":\"method\"}],\"overrideComponent\":[{\"__symbolic\":\"method\"}],\"overrideDirective\":[{\"__symbolic\":\"method\"}],\"overridePipe\":[{\"__symbolic\":\"method\"}],\"overrideProvider\":[{\"__symbolic\":\"method\"}],\"deprecatedOverrideProvider\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}],\"createComponent\":[{\"__symbolic\":\"method\"}],\"_initIfNeeded\":[{\"__symbolic\":\"method\"}],\"_getResolvers\":[{\"__symbolic\":\"method\"}],\"_assertNotInstantiated\":[{\"__symbolic\":\"method\"}],\"_createTestModule\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"compileComponents\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_testing_testing_c\"}},\"member\":\"compileComponents\"}}},\"get\":{\"__symbolic\":\"function\",\"parameters\":[\"token\",\"notFoundValue\"],\"defaults\":[null,{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injector\",\"line\":151,\"character\":46},\"member\":\"THROW_IF_NOT_FOUND\"}],\"value\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_testing_testing_c\"}},\"member\":\"get\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"token\"},{\"__symbolic\":\"reference\",\"name\":\"notFoundValue\"}]}},\"createComponent\":{\"__symbolic\":\"function\",\"parameters\":[\"component\"],\"value\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_testing_testing_c\"}},\"member\":\"createComponent\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"component\"}]}}}},\"ɵangular_packages_core_testing_testing_c\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"binop\",\"operator\":\"=\",\"left\":{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":439,\"character\":4,\"context\":{\"name\":\"testBed\"},\"module\":\"./src/r3_test_bed\"},\"right\":{\"__symbolic\":\"binop\",\"operator\":\"||\",\"left\":{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":439,\"character\":4,\"context\":{\"name\":\"testBed\"},\"module\":\"./src/r3_test_bed\"},\"right\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_core_testing_testing_b\"}}}}}},\"origins\":{\"ɵangular_packages_core_testing_testing_a\":\"./src/test_bed\",\"async\":\"./src/async\",\"ComponentFixture\":\"./src/component_fixture\",\"resetFakeAsyncZone\":\"./src/fake_async\",\"fakeAsync\":\"./src/fake_async\",\"tick\":\"./src/fake_async\",\"flush\":\"./src/fake_async\",\"discardPeriodicTasks\":\"./src/fake_async\",\"flushMicrotasks\":\"./src/fake_async\",\"TestBed\":\"./src/test_bed\",\"getTestBed\":\"./src/test_bed\",\"inject\":\"./src/test_bed\",\"InjectSetupWrapper\":\"./src/test_bed\",\"withModule\":\"./src/test_bed\",\"TestComponentRenderer\":\"./src/test_bed_common\",\"ComponentFixtureAutoDetect\":\"./src/test_bed_common\",\"ComponentFixtureNoNgZone\":\"./src/test_bed_common\",\"TestModuleMetadata\":\"./src/test_bed_common\",\"TestBedStatic\":\"./src/test_bed_common\",\"__core_private_testing_placeholder__\":\"./src/before_each\",\"MetadataOverride\":\"./src/metadata_override\",\"ɵMetadataOverrider\":\"./src/metadata_overrider\",\"ɵTestingCompiler\":\"./src/test_compiler\",\"ɵTestingCompilerFactory\":\"./src/test_compiler\",\"ɵangular_packages_core_testing_testing_b\":\"./src/r3_test_bed\",\"ɵangular_packages_core_testing_testing_c\":\"./src/r3_test_bed\"},\"importAs\":\"@angular/core/testing\"}"
  },
  {
    "path": "node_modules/@angular/compiler/testing/testing.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\n"
  },
  {
    "path": "node_modules/@angular/router/src/utils/tree.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class Tree<T> {\n    constructor(root: TreeNode<T>);\n    readonly root: T;\n}\nexport declare class TreeNode<T> {\n    value: T;\n    children: TreeNode<T>[];\n    constructor(value: T, children: TreeNode<T>[]);\n    toString(): string;\n}\nexport declare function nodeChildrenAsMap<T extends {\n    outlet: string;\n}>(node: TreeNode<T> | null): {\n    [outlet: string]: TreeNode<T>;\n};\n"
  },
  {
    "path": "node_modules/@angular/router/upgrade/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/dom_adapter.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '@angular/core';\nexport declare function getDOM(): DomAdapter;\nexport declare function setDOM(adapter: DomAdapter): void;\nexport declare function setRootDomAdapter(adapter: DomAdapter): void;\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport declare abstract class DomAdapter {\n    resourceLoaderType: Type<any>;\n    abstract hasProperty(element: any, name: string): boolean;\n    abstract setProperty(el: Element, name: string, value: any): any;\n    abstract getProperty(el: Element, name: string): any;\n    abstract invoke(el: Element, methodName: string, args: any[]): any;\n    abstract logError(error: any): any;\n    abstract log(error: any): any;\n    abstract logGroup(error: any): any;\n    abstract logGroupEnd(): any;\n    /**\n     * Maps attribute names to their corresponding property names for cases\n     * where attribute name doesn't match property name.\n     */\n    attrToPropMap: {\n        [key: string]: string;\n    };\n    abstract contains(nodeA: any, nodeB: any): boolean;\n    abstract parse(templateHtml: string): any;\n    abstract querySelector(el: any, selector: string): any;\n    abstract querySelectorAll(el: any, selector: string): any[];\n    abstract on(el: any, evt: any, listener: any): any;\n    abstract onAndCancel(el: any, evt: any, listener: any): Function;\n    abstract dispatchEvent(el: any, evt: any): any;\n    abstract createMouseEvent(eventType: any): any;\n    abstract createEvent(eventType: string): any;\n    abstract preventDefault(evt: any): any;\n    abstract isPrevented(evt: any): boolean;\n    abstract getInnerHTML(el: any): string;\n    /** Returns content if el is a <template> element, null otherwise. */\n    abstract getTemplateContent(el: any): any;\n    abstract getOuterHTML(el: any): string;\n    abstract nodeName(node: any): string;\n    abstract nodeValue(node: any): string | null;\n    abstract type(node: any): string;\n    abstract content(node: any): any;\n    abstract firstChild(el: any): Node | null;\n    abstract nextSibling(el: any): Node | null;\n    abstract parentElement(el: any): Node | null;\n    abstract childNodes(el: any): Node[];\n    abstract childNodesAsList(el: any): Node[];\n    abstract clearNodes(el: any): any;\n    abstract appendChild(el: any, node: any): any;\n    abstract removeChild(el: any, node: any): any;\n    abstract replaceChild(el: any, newNode: any, oldNode: any): any;\n    abstract remove(el: any): Node;\n    abstract insertBefore(parent: any, ref: any, node: any): any;\n    abstract insertAllBefore(parent: any, ref: any, nodes: any): any;\n    abstract insertAfter(parent: any, el: any, node: any): any;\n    abstract setInnerHTML(el: any, value: any): any;\n    abstract getText(el: any): string | null;\n    abstract setText(el: any, value: string): any;\n    abstract getValue(el: any): string;\n    abstract setValue(el: any, value: string): any;\n    abstract getChecked(el: any): boolean;\n    abstract setChecked(el: any, value: boolean): any;\n    abstract createComment(text: string): any;\n    abstract createTemplate(html: any): HTMLElement;\n    abstract createElement(tagName: any, doc?: any): HTMLElement;\n    abstract createElementNS(ns: string, tagName: string, doc?: any): Element;\n    abstract createTextNode(text: string, doc?: any): Text;\n    abstract createScriptTag(attrName: string, attrValue: string, doc?: any): HTMLElement;\n    abstract createStyleElement(css: string, doc?: any): HTMLStyleElement;\n    abstract createShadowRoot(el: any): any;\n    abstract getShadowRoot(el: any): any;\n    abstract getHost(el: any): any;\n    abstract getDistributedNodes(el: any): Node[];\n    abstract clone(node: Node): Node;\n    abstract getElementsByClassName(element: any, name: string): HTMLElement[];\n    abstract getElementsByTagName(element: any, name: string): HTMLElement[];\n    abstract classList(element: any): any[];\n    abstract addClass(element: any, className: string): any;\n    abstract removeClass(element: any, className: string): any;\n    abstract hasClass(element: any, className: string): boolean;\n    abstract setStyle(element: any, styleName: string, styleValue: string): any;\n    abstract removeStyle(element: any, styleName: string): any;\n    abstract getStyle(element: any, styleName: string): string;\n    abstract hasStyle(element: any, styleName: string, styleValue?: string): boolean;\n    abstract tagName(element: any): string;\n    abstract attributeMap(element: any): Map<string, string>;\n    abstract hasAttribute(element: any, attribute: string): boolean;\n    abstract hasAttributeNS(element: any, ns: string, attribute: string): boolean;\n    abstract getAttribute(element: any, attribute: string): string | null;\n    abstract getAttributeNS(element: any, ns: string, attribute: string): string | null;\n    abstract setAttribute(element: any, name: string, value: string): any;\n    abstract setAttributeNS(element: any, ns: string, name: string, value: string): any;\n    abstract removeAttribute(element: any, attribute: string): any;\n    abstract removeAttributeNS(element: any, ns: string, attribute: string): any;\n    abstract templateAwareRoot(el: any): any;\n    abstract createHtmlDocument(): HTMLDocument;\n    abstract getDefaultDocument(): Document;\n    abstract getBoundingClientRect(el: any): any;\n    abstract getTitle(doc: Document): string;\n    abstract setTitle(doc: Document, newTitle: string): any;\n    abstract elementMatches(n: any, selector: string): boolean;\n    abstract isTemplateElement(el: any): boolean;\n    abstract isTextNode(node: any): boolean;\n    abstract isCommentNode(node: any): boolean;\n    abstract isElementNode(node: any): boolean;\n    abstract hasShadowRoot(node: any): boolean;\n    abstract isShadowRoot(node: any): boolean;\n    abstract importIntoDoc(node: Node): Node;\n    abstract adoptNode(node: Node): Node;\n    abstract getHref(element: any): string;\n    abstract getEventKey(event: any): string;\n    abstract resolveAndSetHref(element: any, baseUrl: string, href: string): any;\n    abstract supportsDOMEvents(): boolean;\n    abstract supportsNativeShadowDOM(): boolean;\n    abstract getGlobalEventTarget(doc: Document, target: string): any;\n    abstract getHistory(): History;\n    abstract getLocation(): Location;\n    abstract getBaseHref(doc: Document): string | null;\n    abstract resetBaseElement(): void;\n    abstract getUserAgent(): string;\n    abstract setData(element: any, name: string, value: string): any;\n    abstract getComputedStyle(element: any): any;\n    abstract getData(element: any, name: string): string | null;\n    abstract supportsWebAnimation(): boolean;\n    abstract performanceNow(): number;\n    abstract getAnimationPrefix(): string;\n    abstract getTransitionEnd(): string;\n    abstract supportsAnimation(): boolean;\n    abstract supportsCookies(): boolean;\n    abstract getCookie(name: string): string | null;\n    abstract setCookie(name: string, value: string): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/control_container.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AbstractControlDirective } from './abstract_control_directive';\nimport { Form } from './form_interface';\n/**\n * @description\n * A base class for directives that contain multiple registered instances of `NgControl`.\n * Only used by the forms module.\n */\nexport declare abstract class ControlContainer extends AbstractControlDirective {\n    /**\n     * @description\n     * The name for the control\n     */\n    name: string;\n    /**\n     * @description\n     * The top-level form directive for the control.\n     */\n    readonly formDirective: Form | null;\n    /**\n     * @description\n     * The path to this group.\n     */\n    readonly path: string[] | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/src/platform-browser-dynamic.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PlatformRef, Provider, StaticProvider } from '@angular/core';\nexport * from './private_export';\nexport { VERSION } from './version';\nexport { JitCompilerFactory } from './compiler_factory';\n/**\n * @experimental\n */\nexport declare const RESOURCE_CACHE_PROVIDER: Provider[];\nexport declare const platformBrowserDynamic: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;\n"
  },
  {
    "path": "node_modules/@angular/router/src/config.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModuleFactory, NgModuleRef, Type } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UrlSegment, UrlSegmentGroup } from './url_tree';\n/**\n * @description\n *\n * Represents router configuration.\n *\n * `Routes` is an array of route configurations. Each one has the following properties:\n *\n * - `path` is a string that uses the route matcher DSL.\n * - `pathMatch` is a string that specifies the matching strategy.\n * - `matcher` defines a custom strategy for path matching and supersedes `path` and `pathMatch`.\n * - `component` is a component type.\n * - `redirectTo` is the url fragment which will replace the current matched segment.\n * - `outlet` is the name of the outlet the component should be placed into.\n * - `canActivate` is an array of DI tokens used to look up CanActivate handlers. See\n *   `CanActivate` for more info.\n * - `canActivateChild` is an array of DI tokens used to look up CanActivateChild handlers. See\n *   `CanActivateChild` for more info.\n * - `canDeactivate` is an array of DI tokens used to look up CanDeactivate handlers. See\n *   `CanDeactivate` for more info.\n * - `canLoad` is an array of DI tokens used to look up CanLoad handlers. See\n *   `CanLoad` for more info.\n * - `data` is additional data provided to the component via `ActivatedRoute`.\n * - `resolve` is a map of DI tokens used to look up data resolvers. See `Resolve` for more\n *   info.\n * - `runGuardsAndResolvers` defines when guards and resolvers will be run. By default they run only\n *    when the matrix parameters of the route change. When set to `paramsOrQueryParamsChange` they\n *    will also run when query params change. And when set to `always`, they will run every time.\n * - `children` is an array of child route definitions.\n * - `loadChildren` is a reference to lazy loaded child routes. See `LoadChildren` for more\n *   info.\n *\n * @usageNotes\n * ### Simple Configuration\n *\n * ```\n * [{\n *   path: 'team/:id',\n  *  component: Team,\n *   children: [{\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * When navigating to `/team/11/user/bob`, the router will create the team component with the user\n * component in it.\n *\n * ### Multiple Outlets\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team\n * }, {\n *   path: 'chat/:user',\n *   component: Chat\n *   outlet: 'aux'\n * }]\n * ```\n *\n * When navigating to `/team/11(aux:chat/jim)`, the router will create the team component next to\n * the chat component. The chat component will be placed into the aux outlet.\n *\n * ### Wild Cards\n *\n * ```\n * [{\n *   path: '**',\n *   component: Sink\n * }]\n * ```\n *\n * Regardless of where you navigate to, the router will instantiate the sink component.\n *\n * ### Redirects\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: 'legacy/user/:name',\n *     redirectTo: 'user/:name'\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * When navigating to '/team/11/legacy/user/jim', the router will change the url to\n * '/team/11/user/jim', and then will instantiate the team component with the user component\n * in it.\n *\n * If the `redirectTo` value starts with a '/', then it is an absolute redirect. E.g., if in the\n * example above we change the `redirectTo` to `/user/:name`, the result url will be '/user/jim'.\n *\n * ### Empty Path\n *\n * Empty-path route configurations can be used to instantiate components that do not 'consume'\n * any url segments. Let's look at the following configuration:\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: AllUsers\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * When navigating to `/team/11`, the router will instantiate the AllUsers component.\n *\n * Empty-path routes can have children.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: WrapperCmp,\n *     children: [{\n *       path: 'user/:name',\n *       component: User\n *     }]\n *   }]\n * }]\n * ```\n *\n * When navigating to `/team/11/user/jim`, the router will instantiate the wrapper component with\n * the user component in it.\n *\n * An empty path route inherits its parent's params and data. This is because it cannot have its\n * own params, and, as a result, it often uses its parent's params and data as its own.\n *\n * ### Matching Strategy\n *\n * By default the router will look at what is left in the url, and check if it starts with\n * the specified path (e.g., `/team/11/user` starts with `team/:id`).\n *\n * We can change the matching strategy to make sure that the path covers the whole unconsumed url,\n * which is akin to `unconsumedUrl === path` or `$` regular expressions.\n *\n * This is particularly important when redirecting empty-path routes.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'prefix', //default\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * Since an empty path is a prefix of any url, even when navigating to '/main', the router will\n * still apply the redirect.\n *\n * If `pathMatch: full` is provided, the router will apply the redirect if and only if navigating to\n * '/'.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'full',\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * ### Componentless Routes\n *\n * It is useful at times to have the ability to share parameters between sibling components.\n *\n * Say we have two components--ChildCmp and AuxCmp--that we want to put next to each other and both\n * of them require some id parameter.\n *\n * One way to do that would be to have a bogus parent component, so both the siblings can get the id\n * parameter from it. This is not ideal. Instead, you can use a componentless route.\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: 'a', component: MainChild },\n *      { path: 'b', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * So when navigating to `parent/10/(a//aux:b)`, the route will instantiate the main child and aux\n * child components next to each other. In this example, the application component\n * has to have the primary and aux outlets defined.\n *\n * The router will also merge the `params`, `data`, and `resolve` of the componentless parent into\n * the `params`, `data`, and `resolve` of the children. This is done because there is no component\n * that can inject the activated route of the componentless parent.\n *\n * This is especially useful when child components are defined as follows:\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: '', component: MainChild },\n *      { path: '', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * With this configuration in place, navigating to '/parent/10' will create the main child and aux\n * components.\n *\n * ### Lazy Loading\n *\n * Lazy loading speeds up our application load time by splitting it into multiple bundles, and\n * loading them on demand. The router is designed to make lazy loading simple and easy. Instead of\n * providing the children property, you can provide the `loadChildren` property, as follows:\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   loadChildren: 'team'\n * }]\n * ```\n *\n * The router will use registered NgModuleFactoryLoader to fetch an NgModule associated with 'team'.\n * Then it will extract the set of routes defined in that NgModule, and will transparently add\n * those routes to the main configuration.\n *\n */\nexport declare type Routes = Route[];\n/**\n * @description Represents the results of the URL matching.\n *\n * * `consumed` is an array of the consumed URL segments.\n * * `posParams` is a map of positional parameters.\n *\n * @experimental\n */\nexport declare type UrlMatchResult = {\n    consumed: UrlSegment[];\n    posParams?: {\n        [name: string]: UrlSegment;\n    };\n};\n/**\n * @description\n *\n * A function matching URLs\n *\n * A custom URL matcher can be provided when a combination of `path` and `pathMatch` isn't\n * expressive enough.\n *\n * For instance, the following matcher matches html files.\n *\n * ```\n * export function htmlFiles(url: UrlSegment[]) {\n *   return url.length === 1 && url[0].path.endsWith('.html') ? ({consumed: url}) : null;\n * }\n *\n * export const routes = [{ matcher: htmlFiles, component: AnyComponent }];\n * ```\n *\n * @experimental\n */\nexport declare type UrlMatcher = (segments: UrlSegment[], group: UrlSegmentGroup, route: Route) => UrlMatchResult;\n/**\n * @description\n *\n * Represents the static data associated with a particular route.\n *\n * See `Routes` for more details.\n *\n */\nexport declare type Data = {\n    [name: string]: any;\n};\n/**\n * @description\n *\n * Represents the resolved data associated with a particular route.\n *\n * See `Routes` for more details.\n *\n */\nexport declare type ResolveData = {\n    [name: string]: any;\n};\n/**\n * @description\n *\n * The type of `loadChildren`.\n *\n * See `Routes` for more details.\n *\n */\nexport declare type LoadChildrenCallback = () => Type<any> | NgModuleFactory<any> | Promise<Type<any>> | Observable<Type<any>>;\n/**\n * @description\n *\n * The type of `loadChildren`.\n *\n * See `Routes` for more details.\n *\n */\nexport declare type LoadChildren = string | LoadChildrenCallback;\n/**\n * @description\n *\n * The type of `queryParamsHandling`.\n *\n * See `RouterLink` for more details.\n *\n */\nexport declare type QueryParamsHandling = 'merge' | 'preserve' | '';\n/**\n * @description\n *\n * The type of `runGuardsAndResolvers`.\n *\n * See `Routes` for more details.\n * @experimental\n */\nexport declare type RunGuardsAndResolvers = 'paramsChange' | 'paramsOrQueryParamsChange' | 'always';\n/**\n * See `Routes` for more details.\n *\n */\nexport interface Route {\n    path?: string;\n    pathMatch?: string;\n    matcher?: UrlMatcher;\n    component?: Type<any>;\n    redirectTo?: string;\n    outlet?: string;\n    canActivate?: any[];\n    canActivateChild?: any[];\n    canDeactivate?: any[];\n    canLoad?: any[];\n    data?: Data;\n    resolve?: ResolveData;\n    children?: Routes;\n    loadChildren?: LoadChildren;\n    runGuardsAndResolvers?: RunGuardsAndResolvers;\n}\nexport declare class LoadedRouterConfig {\n    routes: Route[];\n    module: NgModuleRef<any>;\n    constructor(routes: Route[], module: NgModuleRef<any>);\n}\nexport declare function validateConfig(config: Routes, parentPath?: string): void;\n/**\n * Makes a copy of the config and adds any default required properties.\n */\nexport declare function standardizeConfig(r: Route): Route;\n"
  },
  {
    "path": "node_modules/@angular/core/testing/testing.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { TestBedRender3 as ɵangular_packages_core_testing_testing_b, _getTestBedRender3 as ɵangular_packages_core_testing_testing_c } from './src/r3_test_bed';\nexport { TestBedViewEngine as ɵangular_packages_core_testing_testing_a } from './src/test_bed';\n"
  },
  {
    "path": "node_modules/@angular/common/testing.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":3,\"metadata\":{},\"exports\":[{\"from\":\"./testing/testing\"}],\"flatModuleIndexRedirect\":true,\"importAs\":\"@angular/common/testing\"}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/animations';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/src/version.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\nimport { Version } from '@angular/core';\nexport declare const VERSION: Version;\n"
  },
  {
    "path": "node_modules/@angular/router/src/url_handling_strategy.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { UrlTree } from './url_tree';\n/**\n * @description\n *\n * Provides a way to migrate AngularJS applications to Angular.\n *\n * @experimental\n */\nexport declare abstract class UrlHandlingStrategy {\n    /**\n     * Tells the router if this URL should be processed.\n     *\n     * When it returns true, the router will execute the regular navigation.\n     * When it returns false, the router will set the router state to an empty state.\n     * As a result, all the active components will be destroyed.\n     *\n     */\n    abstract shouldProcessUrl(url: UrlTree): boolean;\n    /**\n     * Extracts the part of the URL that should be handled by the router.\n     * The rest of the URL will remain untouched.\n     */\n    abstract extract(url: UrlTree): UrlTree;\n    /**\n     * Merges the URL fragment with the rest of the URL.\n     */\n    abstract merge(newUrlPart: UrlTree, rawUrl: UrlTree): UrlTree;\n}\n/**\n * @experimental\n */\nexport declare class DefaultUrlHandlingStrategy implements UrlHandlingStrategy {\n    shouldProcessUrl(url: UrlTree): boolean;\n    extract(url: UrlTree): UrlTree;\n    merge(newUrlPart: UrlTree, wholeUrl: UrlTree): UrlTree;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/router.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Location } from '@angular/common';\nimport { Compiler, Injector, NgModuleFactoryLoader, Type } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { QueryParamsHandling, Routes } from './config';\nimport { Event, NavigationTrigger } from './events';\nimport { RouteReuseStrategy } from './route_reuse_strategy';\nimport { ChildrenOutletContexts } from './router_outlet_context';\nimport { ActivatedRoute, RouterState, RouterStateSnapshot } from './router_state';\nimport { Params } from './shared';\nimport { UrlHandlingStrategy } from './url_handling_strategy';\nimport { UrlSerializer, UrlTree } from './url_tree';\nimport { Checks } from './utils/preactivation';\n/**\n * @description\n *\n * Represents the extra options used during navigation.\n *\n *\n */\nexport interface NavigationExtras {\n    /**\n     * Enables relative navigation from the current ActivatedRoute.\n     *\n     * Configuration:\n     *\n     * ```\n     * [{\n    *   path: 'parent',\n    *   component: ParentComponent,\n    *   children: [{\n    *     path: 'list',\n    *     component: ListComponent\n    *   },{\n    *     path: 'child',\n    *     component: ChildComponent\n    *   }]\n    * }]\n     * ```\n     *\n     * Navigate to list route from child route:\n     *\n     * ```\n     *  @Component({...})\n     *  class ChildComponent {\n    *    constructor(private router: Router, private route: ActivatedRoute) {}\n    *\n    *    go() {\n    *      this.router.navigate(['../list'], { relativeTo: this.route });\n    *    }\n    *  }\n     * ```\n     */\n    relativeTo?: ActivatedRoute | null;\n    /**\n     * Sets query parameters to the URL.\n     *\n     * ```\n     * // Navigate to /results?page=1\n     * this.router.navigate(['/results'], { queryParams: { page: 1 } });\n     * ```\n     */\n    queryParams?: Params | null;\n    /**\n     * Sets the hash fragment for the URL.\n     *\n     * ```\n     * // Navigate to /results#top\n     * this.router.navigate(['/results'], { fragment: 'top' });\n     * ```\n     */\n    fragment?: string;\n    /**\n     * Preserves the query parameters for the next navigation.\n     *\n     * deprecated, use `queryParamsHandling` instead\n     *\n     * ```\n     * // Preserve query params from /results?page=1 to /view?page=1\n     * this.router.navigate(['/view'], { preserveQueryParams: true });\n     * ```\n     *\n     * @deprecated since v4\n     */\n    preserveQueryParams?: boolean;\n    /**\n     *  config strategy to handle the query parameters for the next navigation.\n     *\n     * ```\n     * // from /results?page=1 to /view?page=1&page=2\n     * this.router.navigate(['/view'], { queryParams: { page: 2 },  queryParamsHandling: \"merge\" });\n     * ```\n     */\n    queryParamsHandling?: QueryParamsHandling | null;\n    /**\n     * Preserves the fragment for the next navigation\n     *\n     * ```\n     * // Preserve fragment from /results#top to /view#top\n     * this.router.navigate(['/view'], { preserveFragment: true });\n     * ```\n     */\n    preserveFragment?: boolean;\n    /**\n     * Navigates without pushing a new state into history.\n     *\n     * ```\n     * // Navigate silently to /view\n     * this.router.navigate(['/view'], { skipLocationChange: true });\n     * ```\n     */\n    skipLocationChange?: boolean;\n    /**\n     * Navigates while replacing the current state in history.\n     *\n     * ```\n     * // Navigate to /view\n     * this.router.navigate(['/view'], { replaceUrl: true });\n     * ```\n     */\n    replaceUrl?: boolean;\n}\n/**\n * @description\n *\n * Error handler that is invoked when a navigation errors.\n *\n * If the handler returns a value, the navigation promise will be resolved with this value.\n * If the handler throws an exception, the navigation promise will be rejected with\n * the exception.\n *\n *\n */\nexport declare type ErrorHandler = (error: any) => any;\nexport declare type NavigationTransition = {\n    id: number;\n    currentUrlTree: UrlTree;\n    currentRawUrl: UrlTree;\n    extractedUrl: UrlTree;\n    urlAfterRedirects: UrlTree;\n    rawUrl: UrlTree;\n    extras: NavigationExtras;\n    resolve: any;\n    reject: any;\n    promise: Promise<boolean>;\n    source: NavigationTrigger;\n    state: {\n        navigationId: number;\n    } | null;\n    currentSnapshot: RouterStateSnapshot;\n    targetSnapshot: RouterStateSnapshot | null;\n    currentRouterState: RouterState;\n    targetRouterState: RouterState | null;\n    guards: Checks;\n    guardsResult: boolean | null;\n};\n/**\n * @description\n *\n * Provides the navigation and url manipulation capabilities.\n *\n * See `Routes` for more details and examples.\n *\n * @ngModule RouterModule\n *\n *\n */\nexport declare class Router {\n    private rootComponentType;\n    private urlSerializer;\n    private rootContexts;\n    private location;\n    config: Routes;\n    private currentUrlTree;\n    private rawUrlTree;\n    private readonly transitions;\n    private navigations;\n    private locationSubscription;\n    private navigationId;\n    private configLoader;\n    private ngModule;\n    private console;\n    private isNgZoneEnabled;\n    readonly events: Observable<Event>;\n    readonly routerState: RouterState;\n    /**\n     * Error handler that is invoked when a navigation errors.\n     *\n     * See `ErrorHandler` for more information.\n     */\n    errorHandler: ErrorHandler;\n    /**\n     * Malformed uri error handler is invoked when `Router.parseUrl(url)` throws an\n     * error due to containing an invalid character. The most common case would be a `%` sign\n     * that's not encoded and is not part of a percent encoded sequence.\n     */\n    malformedUriErrorHandler: (error: URIError, urlSerializer: UrlSerializer, url: string) => UrlTree;\n    /**\n     * Indicates if at least one navigation happened.\n     */\n    navigated: boolean;\n    private lastSuccessfulId;\n    /**\n     * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n     */\n    urlHandlingStrategy: UrlHandlingStrategy;\n    routeReuseStrategy: RouteReuseStrategy;\n    /**\n     * Define what the router should do if it receives a navigation request to the current URL.\n     * By default, the router will ignore this navigation. However, this prevents features such\n     * as a \"refresh\" button. Use this option to configure the behavior when navigating to the\n     * current URL. Default is 'ignore'.\n     */\n    onSameUrlNavigation: 'reload' | 'ignore';\n    /**\n     * Defines how the router merges params, data and resolved data from parent to child\n     * routes. Available options are:\n     *\n     * - `'emptyOnly'`, the default, only inherits parent params for path-less or component-less\n     *   routes.\n     * - `'always'`, enables unconditional inheritance of parent params.\n     */\n    paramsInheritanceStrategy: 'emptyOnly' | 'always';\n    /**\n     * Defines when the router updates the browser URL. The default behavior is to update after\n     * successful navigation. However, some applications may prefer a mode where the URL gets\n     * updated at the beginning of navigation. The most common use case would be updating the\n     * URL early so if navigation fails, you can show an error message with the URL that failed.\n     * Available options are:\n     *\n     * - `'deferred'`, the default, updates the browser URL after navigation has finished.\n     * - `'eager'`, updates browser URL at the beginning of navigation.\n     */\n    urlUpdateStrategy: 'deferred' | 'eager';\n    /**\n     * See {@link RouterModule} for more information.\n     */\n    relativeLinkResolution: 'legacy' | 'corrected';\n    /**\n     * Creates the router service.\n     */\n    constructor(rootComponentType: Type<any> | null, urlSerializer: UrlSerializer, rootContexts: ChildrenOutletContexts, location: Location, injector: Injector, loader: NgModuleFactoryLoader, compiler: Compiler, config: Routes);\n    private setupNavigations;\n    private getTransition;\n    private setTransition;\n    /**\n     * Sets up the location change listener and performs the initial navigation.\n     */\n    initialNavigation(): void;\n    /**\n     * Sets up the location change listener.\n     */\n    setUpLocationChangeListener(): void;\n    /** The current url */\n    readonly url: string;\n    /**\n     * Resets the configuration used for navigation and generating links.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.resetConfig([\n     *  { path: 'team/:id', component: TeamCmp, children: [\n     *    { path: 'simple', component: SimpleCmp },\n     *    { path: 'user/:name', component: UserCmp }\n     *  ]}\n     * ]);\n     * ```\n     */\n    resetConfig(config: Routes): void;\n    /** @docsNotRequired */\n    ngOnDestroy(): void;\n    /** Disposes of the router */\n    dispose(): void;\n    /**\n     * Applies an array of commands to the current url tree and creates a new url tree.\n     *\n     * When given an activate route, applies the given commands starting from the route.\n     * When not given a route, applies the given command starting from the root.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * // create /team/33/user/11\n     * router.createUrlTree(['/team', 33, 'user', 11]);\n     *\n     * // create /team/33;expand=true/user/11\n     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n     *\n     * // you can collapse static segments like this (this works only with the first passed-in value):\n     * router.createUrlTree(['/team/33/user', userId]);\n     *\n     * // If the first segment can contain slashes, and you do not want the router to split it, you\n     * // can do the following:\n     *\n     * router.createUrlTree([{segmentPath: '/one/two'}]);\n     *\n     * // create /team/33/(user/11//right:chat)\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n     *\n     * // remove the right secondary node\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n     *\n     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n     *\n     * // navigate to /team/33/user/11/details\n     * router.createUrlTree(['details'], {relativeTo: route});\n     *\n     * // navigate to /team/33/user/22\n     * router.createUrlTree(['../22'], {relativeTo: route});\n     *\n     * // navigate to /team/44/user/22\n     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n     * ```\n     */\n    createUrlTree(commands: any[], navigationExtras?: NavigationExtras): UrlTree;\n    /**\n     * Navigate based on the provided url. This navigation is always absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.navigateByUrl(\"/team/33/user/11\");\n     *\n     * // Navigate without updating the URL\n     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n     * ```\n     *\n     * Since `navigateByUrl()` takes an absolute URL as the first parameter,\n     * it will not apply any delta to the current URL and ignores any properties\n     * in the second parameter (the `NavigationExtras`) that would change the\n     * provided URL.\n     */\n    navigateByUrl(url: string | UrlTree, extras?: NavigationExtras): Promise<boolean>;\n    /**\n     * Navigate based on the provided array of commands and a starting point.\n     * If no starting route is provided, the navigation is absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n     *\n     * // Navigate without updating the URL\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n     * ```\n     *\n     * The first parameter of `navigate()` is a delta to be applied to the current URL\n     * or the one provided in the `relativeTo` property of the second parameter (the\n     * `NavigationExtras`).\n     */\n    navigate(commands: any[], extras?: NavigationExtras): Promise<boolean>;\n    /** Serializes a `UrlTree` into a string */\n    serializeUrl(url: UrlTree): string;\n    /** Parses a string into a `UrlTree` */\n    parseUrl(url: string): UrlTree;\n    /** Returns whether the url is activated */\n    isActive(url: string | UrlTree, exact: boolean): boolean;\n    private removeEmptyProps;\n    private processNavigations;\n    private scheduleNavigation;\n    private setBrowserUrl;\n    private resetStateAndUrl;\n    private resetUrlToCurrentUrlTree;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/router_state.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Data, Route } from './config';\nimport { ParamMap, Params } from './shared';\nimport { UrlSegment, UrlTree } from './url_tree';\nimport { Tree } from './utils/tree';\n/**\n * @description\n *\n * Represents the state of the router.\n *\n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments, the extracted parameters, and the resolved data.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * See `ActivatedRoute` for more information.\n *\n *\n */\nexport declare class RouterState extends Tree<ActivatedRoute> {\n    /** The current snapshot of the router state */\n    snapshot: RouterStateSnapshot;\n    toString(): string;\n}\nexport declare function createEmptyState(urlTree: UrlTree, rootComponent: Type<any> | null): RouterState;\nexport declare function createEmptyStateSnapshot(urlTree: UrlTree, rootComponent: Type<any> | null): RouterStateSnapshot;\n/**\n * @description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet.  An `ActivatedRoute` can also be used to traverse the router state tree.\n *\n * ```\n * @Component({...})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n *     // route.data includes both `data` and `resolve`\n *     const user = route.data.map(d => d.user);\n *   }\n * }\n * ```\n *\n *\n */\nexport declare class ActivatedRoute {\n    /** An observable of the URL segments matched by this route */\n    url: Observable<UrlSegment[]>;\n    /** An observable of the matrix parameters scoped to this route */\n    params: Observable<Params>;\n    /** An observable of the query parameters shared by all the routes */\n    queryParams: Observable<Params>;\n    /** An observable of the URL fragment shared by all the routes */\n    fragment: Observable<string>;\n    /** An observable of the static and resolved data of this route. */\n    data: Observable<Data>;\n    /** The outlet name of the route. It's a constant */\n    outlet: string;\n    /** The component of the route. It's a constant */\n    component: Type<any> | string | null;\n    /** The current snapshot of this route */\n    snapshot: ActivatedRouteSnapshot;\n    /** The configuration used to match this route */\n    readonly routeConfig: Route | null;\n    /** The root of the router state */\n    readonly root: ActivatedRoute;\n    /** The parent of this route in the router state tree */\n    readonly parent: ActivatedRoute | null;\n    /** The first child of this route in the router state tree */\n    readonly firstChild: ActivatedRoute | null;\n    /** The children of this route in the router state tree */\n    readonly children: ActivatedRoute[];\n    /** The path from the root of the router state tree to this route */\n    readonly pathFromRoot: ActivatedRoute[];\n    readonly paramMap: Observable<ParamMap>;\n    readonly queryParamMap: Observable<ParamMap>;\n    toString(): string;\n}\nexport declare type ParamsInheritanceStrategy = 'emptyOnly' | 'always';\n/**\n * @description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * ```\n * @Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n *\n */\nexport declare class ActivatedRouteSnapshot {\n    /** The URL segments matched by this route */\n    url: UrlSegment[];\n    /** The matrix parameters scoped to this route */\n    params: Params;\n    /** The query parameters shared by all the routes */\n    queryParams: Params;\n    /** The URL fragment shared by all the routes */\n    fragment: string;\n    /** The static and resolved data of this route */\n    data: Data;\n    /** The outlet name of the route */\n    outlet: string;\n    /** The component of the route */\n    component: Type<any> | string | null;\n    /** The configuration used to match this route **/\n    readonly routeConfig: Route | null;\n    /** The root of the router state */\n    readonly root: ActivatedRouteSnapshot;\n    /** The parent of this route in the router state tree */\n    readonly parent: ActivatedRouteSnapshot | null;\n    /** The first child of this route in the router state tree */\n    readonly firstChild: ActivatedRouteSnapshot | null;\n    /** The children of this route in the router state tree */\n    readonly children: ActivatedRouteSnapshot[];\n    /** The path from the root of the router state tree to this route */\n    readonly pathFromRoot: ActivatedRouteSnapshot[];\n    readonly paramMap: ParamMap;\n    readonly queryParamMap: ParamMap;\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n *\n */\nexport declare class RouterStateSnapshot extends Tree<ActivatedRouteSnapshot> {\n    /** The url from which this snapshot was created */\n    url: string;\n    toString(): string;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n */\nexport declare function advanceActivatedRoute(route: ActivatedRoute): void;\nexport declare function equalParamsAndUrlSegments(a: ActivatedRouteSnapshot, b: ActivatedRouteSnapshot): boolean;\n"
  },
  {
    "path": "node_modules/@angular/router/src/route_reuse_strategy.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActivatedRouteSnapshot } from './router_state';\n/**\n * @description\n *\n * Represents the detached route tree.\n *\n * This is an opaque value the router will give to a custom route reuse strategy\n * to store and retrieve later on.\n *\n * @experimental\n */\nexport declare type DetachedRouteHandle = {};\n/**\n * @description\n *\n * Provides a way to customize when activated routes get reused.\n *\n * @experimental\n */\nexport declare abstract class RouteReuseStrategy {\n    /** Determines if this route (and its subtree) should be detached to be reused later */\n    abstract shouldDetach(route: ActivatedRouteSnapshot): boolean;\n    /**\n     * Stores the detached route.\n     *\n     * Storing a `null` value should erase the previously stored value.\n     */\n    abstract store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle | null): void;\n    /** Determines if this route (and its subtree) should be reattached */\n    abstract shouldAttach(route: ActivatedRouteSnapshot): boolean;\n    /** Retrieves the previously stored route */\n    abstract retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null;\n    /** Determines if a route should be reused */\n    abstract shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean;\n}\n/**\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n */\nexport declare class DefaultRouteReuseStrategy implements RouteReuseStrategy {\n    shouldDetach(route: ActivatedRouteSnapshot): boolean;\n    store(route: ActivatedRouteSnapshot, detachedTree: DetachedRouteHandle): void;\n    shouldAttach(route: ActivatedRouteSnapshot): boolean;\n    retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null;\n    shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/router_outlet_context.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentFactoryResolver, ComponentRef } from '@angular/core';\nimport { RouterOutlet } from './directives/router_outlet';\nimport { ActivatedRoute } from './router_state';\n/**\n * Store contextual information about a `RouterOutlet`\n *\n *\n */\nexport declare class OutletContext {\n    outlet: RouterOutlet | null;\n    route: ActivatedRoute | null;\n    resolver: ComponentFactoryResolver | null;\n    children: ChildrenOutletContexts;\n    attachRef: ComponentRef<any> | null;\n}\n/**\n * Store contextual information about the children (= nested) `RouterOutlet`\n *\n *\n */\nexport declare class ChildrenOutletContexts {\n    private contexts;\n    /** Called when a `RouterOutlet` directive is instantiated */\n    onChildOutletCreated(childName: string, outlet: RouterOutlet): void;\n    /**\n     * Called when a `RouterOutlet` directive is destroyed.\n     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n     * re-created later.\n     */\n    onChildOutletDestroyed(childName: string): void;\n    /**\n     * Called when the corresponding route is deactivated during navigation.\n     * Because the component get destroyed, all children outlet are destroyed.\n     */\n    onOutletDeactivated(): Map<string, OutletContext>;\n    onOutletReAttached(contexts: Map<string, OutletContext>): void;\n    getOrCreateContext(childName: string): OutletContext;\n    getContext(childName: string): OutletContext | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/testing/src/private_export_testing.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { DOMTestComponentRenderer as ɵDOMTestComponentRenderer } from './dom_test_component_renderer';\nexport { platformCoreDynamicTesting as ɵplatformCoreDynamicTesting } from './platform_core_dynamic_testing';\n"
  },
  {
    "path": "node_modules/@angular/router/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/index';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/testing/src/testing.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser/testing package.\n */\nexport * from './browser';\n"
  },
  {
    "path": "node_modules/@angular/forms/src/directives/control_value_accessor.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * @description\n * Defines an interface that acts as a bridge between the Angular forms API and a\n * native element in the DOM.\n *\n * Implement this interface to create a custom form control directive\n * that integrates with Angular forms.\n *\n * @see DefaultValueAccessor\n */\nexport interface ControlValueAccessor {\n    /**\n     * @description\n     * Writes a new value to the element.\n     *\n     * This method is called by the forms API to write to the view when programmatic\n     * changes from model to view are requested.\n     *\n     * @usageNotes\n     * ### Write a value to the element\n     *\n     * The following example writes a value to the native DOM element.\n     *\n     * ```ts\n     * writeValue(value: any): void {\n     *   this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n     * }\n     * ```\n     *\n     * @param obj The new value for the element\n     */\n    writeValue(obj: any): void;\n    /**\n     * @description\n     * Registers a callback function that is called when the control's value\n     * changes in the UI.\n     *\n     * This method is called by the forms API on initialization to update the form\n     * model when values propagate from the view to the model.\n     *\n     * When implementing the `registerOnChange` method in your own value accessor,\n     * save the given function so your class calls it at the appropriate time.\n     *\n     * @usageNotes\n     * ### Store the change function\n     *\n     * The following example stores the provided function as an internal method.\n     *\n     * ```ts\n     * registerOnChange(fn: (_: any) => void): void {\n     *   this._onChange = fn;\n     * }\n     * ```\n     *\n     * When the value changes in the UI, call the registered\n     * function to allow the forms API to update itself:\n     *\n     * ```ts\n     * host: {\n     *    (change): '_onChange($event.target.value)'\n     * }\n     * ```\n     *\n     * @param fn The callback function to register\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * @description\n     * Registers a callback function is called by the forms API on initialization\n     * to update the form model on blur.\n     *\n     * When implementing `registerOnTouched` in your own value accessor, save the given\n     * function so your class calls it when the control should be considered\n     * blurred or \"touched\".\n     *\n     * @usageNotes\n     * ### Store the callback function\n     *\n     * The following example stores the provided function as an internal method.\n     *\n     * ```ts\n     * registerOnTouched(fn: any): void {\n     *   this._onTouched = fn;\n     * }\n     * ```\n     *\n     * On blur (or equivalent), your class should call the registered function to allow\n     * the forms API to update itself:\n     *\n     * ```ts\n     * host: {\n     *    '(blur)': '_onTouched()'\n     * }\n     * ```\n     *\n     * @param fn The callback function to register\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * @description\n     * Function that is called by the forms API when the control status changes to\n     * or from 'DISABLED'. Depending on the status, it enables or disables the\n     * appropriate DOM element.\n     *\n     * @usageNotes\n     * The following is an example of writing the disabled property to a native DOM element:\n     *\n     * ```ts\n     * setDisabledState(isDisabled: boolean): void {\n     *   this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n     * }\n     * ```\n     *\n     * @param isDisabled The disabled status to set on the element\n     */\n    setDisabledState?(isDisabled: boolean): void;\n}\n/**\n * Used to provide a `ControlValueAccessor` for form controls.\n *\n * See `DefaultValueAccessor` for how to implement one.\n *\n */\nexport declare const NG_VALUE_ACCESSOR: InjectionToken<ControlValueAccessor>;\n"
  },
  {
    "path": "node_modules/@angular/common/common.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { COMMON_DIRECTIVES as ɵangular_packages_common_common_e } from './src/directives/index';\nexport { LocaleDataIndex as ɵangular_packages_common_common_c } from './src/i18n/locale_data';\nexport { findLocaleData as ɵangular_packages_common_common_d } from './src/i18n/locale_data_api';\nexport { DEPRECATED_PLURAL_FN as ɵangular_packages_common_common_a, getPluralCase as ɵangular_packages_common_common_b } from './src/i18n/localization';\nexport { COMMON_DEPRECATED_I18N_PIPES as ɵangular_packages_common_common_g } from './src/pipes/deprecated/index';\nexport { COMMON_PIPES as ɵangular_packages_common_common_f } from './src/pipes/index';\n"
  },
  {
    "path": "node_modules/@angular/common/http/http.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { NoopInterceptor as ɵangular_packages_common_http_http_a } from './src/interceptor';\nexport { JsonpCallbackContext as ɵangular_packages_common_http_http_b } from './src/jsonp';\nexport { jsonpCallbackContext as ɵangular_packages_common_http_http_c } from './src/module';\nexport { BrowserXhr as ɵangular_packages_common_http_http_d } from './src/xhr';\nexport { HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f } from './src/xsrf';\n"
  },
  {
    "path": "node_modules/@angular/router/src/url_tree.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ParamMap, Params } from './shared';\nexport declare function createEmptyUrlTree(): UrlTree;\nexport declare function containsTree(container: UrlTree, containee: UrlTree, exact: boolean): boolean;\n/**\n * @description\n *\n * Represents the parsed URL.\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n *\n */\nexport declare class UrlTree {\n    /** The root segment group of the URL tree */\n    root: UrlSegmentGroup;\n    /** The query params of the URL */\n    queryParams: Params;\n    /** The fragment of the URL */\n    fragment: string | null;\n    readonly queryParamMap: ParamMap;\n    /** @docsNotRequired */\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the parsed URL segment group.\n *\n * See `UrlTree` for more information.\n *\n *\n */\nexport declare class UrlSegmentGroup {\n    /** The URL segments of this group. See `UrlSegment` for more information */\n    segments: UrlSegment[];\n    /** The list of children of this group */\n    children: {\n        [key: string]: UrlSegmentGroup;\n    };\n    /** The parent node in the url tree */\n    parent: UrlSegmentGroup | null;\n    constructor(\n    /** The URL segments of this group. See `UrlSegment` for more information */\n    segments: UrlSegment[], \n    /** The list of children of this group */\n    children: {\n        [key: string]: UrlSegmentGroup;\n    });\n    /** Whether the segment has child segments */\n    hasChildren(): boolean;\n    /** Number of child segments */\n    readonly numberOfChildren: number;\n    /** @docsNotRequired */\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents a single URL segment.\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n *\n */\nexport declare class UrlSegment {\n    /** The path part of a URL segment */\n    path: string;\n    /** The matrix parameters associated with a segment */\n    parameters: {\n        [name: string]: string;\n    };\n    constructor(\n    /** The path part of a URL segment */\n    path: string, \n    /** The matrix parameters associated with a segment */\n    parameters: {\n        [name: string]: string;\n    });\n    readonly parameterMap: ParamMap;\n    /** @docsNotRequired */\n    toString(): string;\n}\nexport declare function equalSegments(as: UrlSegment[], bs: UrlSegment[]): boolean;\nexport declare function equalPath(as: UrlSegment[], bs: UrlSegment[]): boolean;\nexport declare function mapChildrenIntoArray<T>(segment: UrlSegmentGroup, fn: (v: UrlSegmentGroup, k: string) => T[]): T[];\n/**\n * @description\n *\n * Serializes and deserializes a URL string into a URL tree.\n *\n * The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See `DefaultUrlSerializer` for an example of a URL serializer.\n *\n *\n */\nexport declare abstract class UrlSerializer {\n    /** Parse a url into a `UrlTree` */\n    abstract parse(url: string): UrlTree;\n    /** Converts a `UrlTree` into a url */\n    abstract serialize(tree: UrlTree): string;\n}\n/**\n * @description\n *\n * A default implementation of the `UrlSerializer`.\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n *\n */\nexport declare class DefaultUrlSerializer implements UrlSerializer {\n    /** Parses a url into a `UrlTree` */\n    parse(url: string): UrlTree;\n    /** Converts a `UrlTree` into a url */\n    serialize(tree: UrlTree): string;\n}\nexport declare function serializePaths(segment: UrlSegmentGroup): string;\n/**\n * This function should be used to encode both keys and values in a query string key/value. In\n * the following URL, you need to call encodeUriQuery on \"k\" and \"v\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport declare function encodeUriQuery(s: string): string;\n/**\n * This function should be used to encode a URL fragment. In the following URL, you need to call\n * encodeUriFragment on \"f\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport declare function encodeUriFragment(s: string): string;\n/**\n * This function should be run on any URI segment as well as the key and value in a key/value\n * pair for matrix params. In the following URL, you need to call encodeUriSegment on \"html\",\n * \"mk\", and \"mv\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport declare function encodeUriSegment(s: string): string;\nexport declare function decode(s: string): string;\nexport declare function decodeQuery(s: string): string;\nexport declare function serializePath(path: UrlSegment): string;\n"
  },
  {
    "path": "node_modules/@angular/common/http/http.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"ɵangular_packages_common_http_http_a\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":67,\"character\":1}}],\"members\":{\"intercept\":[{\"__symbolic\":\"method\"}]}},\"ɵangular_packages_common_http_http_b\":{\"__symbolic\":\"class\",\"members\":{}},\"ɵangular_packages_common_http_http_c\":{\"__symbolic\":\"function\"},\"ɵangular_packages_common_http_http_d\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":44,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\"}],\"build\":[{\"__symbolic\":\"method\"}]}},\"ɵangular_packages_common_http_http_e\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":17,\"character\":36},\"arguments\":[\"XSRF_COOKIE_NAME\"]},\"ɵangular_packages_common_http_http_f\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":18,\"character\":36},\"arguments\":[\"XSRF_HEADER_NAME\"]},\"ɵangular_packages_common_http_http_g\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":37,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":48,\"character\":7},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"DOCUMENT\",\"line\":48,\"character\":14}]}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":48,\"character\":43},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"PLATFORM_ID\",\"line\":48,\"character\":50}]}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":49,\"character\":7},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_http_e\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"string\"}]}],\"getToken\":[{\"__symbolic\":\"method\"}]}},\"ɵangular_packages_common_http_http_h\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":68,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[null,[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":72,\"character\":7},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_http_f\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"HttpXsrfTokenExtractor\"},{\"__symbolic\":\"reference\",\"name\":\"string\"}]}],\"intercept\":[{\"__symbolic\":\"method\"}]}},\"HttpBackend\":{\"__symbolic\":\"class\",\"members\":{\"handle\":[{\"__symbolic\":\"method\"}]}},\"HttpHandler\":{\"__symbolic\":\"class\",\"members\":{\"handle\":[{\"__symbolic\":\"method\"}]}},\"HttpClient\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":55,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"HttpHandler\"}]}],\"request\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}],\"delete\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}],\"get\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}],\"head\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}],\"jsonp\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}],\"options\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}],\"patch\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}],\"post\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}],\"put\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}]}},\"HttpHeaders\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":43,\"character\":31,\"module\":\"./src/headers\"}]}],\"has\":[{\"__symbolic\":\"method\"}],\"get\":[{\"__symbolic\":\"method\"}],\"keys\":[{\"__symbolic\":\"method\"}],\"getAll\":[{\"__symbolic\":\"method\"}],\"append\":[{\"__symbolic\":\"method\"}],\"set\":[{\"__symbolic\":\"method\"}],\"delete\":[{\"__symbolic\":\"method\"}],\"maybeSetNormalizedName\":[{\"__symbolic\":\"method\"}],\"init\":[{\"__symbolic\":\"method\"}],\"copyFrom\":[{\"__symbolic\":\"method\"}],\"clone\":[{\"__symbolic\":\"method\"}],\"applyUpdate\":[{\"__symbolic\":\"method\"}],\"forEach\":[{\"__symbolic\":\"method\"}]}},\"HTTP_INTERCEPTORS\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":65,\"character\":37},\"arguments\":[\"HTTP_INTERCEPTORS\"]},\"HttpInterceptor\":{\"__symbolic\":\"interface\"},\"JsonpClientBackend\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":46,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[null,[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":48,\"character\":58},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"DOCUMENT\",\"line\":48,\"character\":65}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_http_b\"},{\"__symbolic\":\"reference\",\"name\":\"any\"}]}],\"nextCallback\":[{\"__symbolic\":\"method\"}],\"handle\":[{\"__symbolic\":\"method\"}]}},\"JsonpInterceptor\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":210,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"JsonpClientBackend\"}]}],\"intercept\":[{\"__symbolic\":\"method\"}]}},\"HttpClientJsonpModule\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModule\",\"line\":179,\"character\":1},\"arguments\":[{\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"JsonpClientBackend\"},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_http_b\"},\"useFactory\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_http_c\"}},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"HTTP_INTERCEPTORS\"},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"JsonpInterceptor\"},\"multi\":true}]}]}],\"members\":{}},\"HttpClientModule\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModule\",\"line\":142,\"character\":1},\"arguments\":[{\"imports\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"HttpClientXsrfModule\"},\"member\":\"withOptions\"},\"arguments\":[{\"cookieName\":\"XSRF-TOKEN\",\"headerName\":\"X-XSRF-TOKEN\"}]}],\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"HttpClient\"},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"HttpHandler\"},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ɵHttpInterceptingHandler\"}},{\"__symbolic\":\"reference\",\"name\":\"HttpXhrBackend\"},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"HttpBackend\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"HttpXhrBackend\"}},{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_http_d\"},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"XhrFactory\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_http_d\"}}]}]}],\"members\":{}},\"HttpClientXsrfModule\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModule\",\"line\":89,\"character\":1},\"arguments\":[{\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_http_h\"},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"HTTP_INTERCEPTORS\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_http_h\"},\"multi\":true},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"HttpXsrfTokenExtractor\"},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_http_g\"}},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_http_e\"},\"useValue\":\"XSRF-TOKEN\"},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_http_f\"},\"useValue\":\"X-XSRF-TOKEN\"}]}]}],\"members\":{},\"statics\":{\"disable\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"ngModule\":{\"__symbolic\":\"reference\",\"name\":\"HttpClientXsrfModule\"},\"providers\":[{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_http_h\"},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_http_a\"}}]}},\"withOptions\":{\"__symbolic\":\"function\",\"parameters\":[\"options\"],\"defaults\":[{}],\"value\":{\"ngModule\":{\"__symbolic\":\"reference\",\"name\":\"HttpClientXsrfModule\"},\"providers\":[{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"options\"},\"member\":\"cookieName\"},\"thenExpression\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_http_e\"},\"useValue\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"options\"},\"member\":\"cookieName\"}},\"elseExpression\":[]},{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"options\"},\"member\":\"headerName\"},\"thenExpression\":{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_http_f\"},\"useValue\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"options\"},\"member\":\"headerName\"}},\"elseExpression\":[]}]}}}},\"ɵHttpInterceptingHandler\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":29,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"HttpBackend\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injector\",\"line\":33,\"character\":62}]}],\"handle\":[{\"__symbolic\":\"method\"}]}},\"HttpParameterCodec\":{\"__symbolic\":\"interface\"},\"HttpParams\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}],\"has\":[{\"__symbolic\":\"method\"}],\"get\":[{\"__symbolic\":\"method\"}],\"getAll\":[{\"__symbolic\":\"method\"}],\"keys\":[{\"__symbolic\":\"method\"}],\"append\":[{\"__symbolic\":\"method\"}],\"set\":[{\"__symbolic\":\"method\"}],\"delete\":[{\"__symbolic\":\"method\"}],\"toString\":[{\"__symbolic\":\"method\"}],\"clone\":[{\"__symbolic\":\"method\"}],\"init\":[{\"__symbolic\":\"method\"}]}},\"HttpUrlEncodingCodec\":{\"__symbolic\":\"class\",\"members\":{\"encodeKey\":[{\"__symbolic\":\"method\"}],\"encodeValue\":[{\"__symbolic\":\"method\"}],\"decodeKey\":[{\"__symbolic\":\"method\"}],\"decodeValue\":[{\"__symbolic\":\"method\"}]}},\"HttpRequest\":{\"__symbolic\":\"class\",\"arity\":1,\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":130,\"character\":22,\"module\":\"./src/request\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":130,\"character\":83,\"module\":\"./src/request\"}]},{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":137,\"character\":22,\"module\":\"./src/request\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"error\",\"message\":\"Could not resolve type\",\"line\":137,\"character\":63,\"context\":{\"typeName\":\"T\"},\"module\":\"./src/request\"},{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":137,\"character\":78,\"module\":\"./src/request\"}]},{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"error\",\"message\":\"Could not resolve type\",\"line\":144,\"character\":49,\"context\":{\"typeName\":\"T\"},\"module\":\"./src/request\"},{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":144,\"character\":64,\"module\":\"./src/request\"}]},{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"error\",\"message\":\"Could not resolve type\",\"line\":152,\"character\":52,\"context\":{\"typeName\":\"T\"},\"module\":\"./src/request\"},{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":159,\"character\":15,\"module\":\"./src/request\"}]}],\"serializeBody\":[{\"__symbolic\":\"method\"}],\"detectContentTypeHeader\":[{\"__symbolic\":\"method\"}],\"clone\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}]}},\"HttpDownloadProgressEvent\":{\"__symbolic\":\"interface\"},\"HttpErrorResponse\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"HttpResponseBase\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":312,\"character\":20,\"module\":\"./src/response\"}]}]}},\"HttpEvent\":{\"__symbolic\":\"interface\"},\"HttpEventType\":{\"Sent\":0,\"UploadProgress\":1,\"ResponseHeader\":2,\"DownloadProgress\":3,\"Response\":4,\"User\":5},\"HttpHeaderResponse\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"HttpResponseBase\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":215,\"character\":20,\"module\":\"./src/response\"}]}],\"clone\":[{\"__symbolic\":\"method\"}]}},\"HttpProgressEvent\":{\"__symbolic\":\"interface\"},\"HttpResponse\":{\"__symbolic\":\"class\",\"arity\":1,\"extends\":{\"__symbolic\":\"reference\",\"name\":\"HttpResponseBase\"},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":261,\"character\":20,\"module\":\"./src/response\"}]}],\"clone\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}]}},\"HttpResponseBase\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":183,\"character\":12,\"module\":\"./src/response\"},{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"string\"}]}]}},\"HttpSentEvent\":{\"__symbolic\":\"interface\"},\"HttpUserEvent\":{\"__symbolic\":\"interface\"},\"HttpXhrBackend\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":66,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"XhrFactory\"}]}],\"handle\":[{\"__symbolic\":\"method\"}]}},\"XhrFactory\":{\"__symbolic\":\"class\",\"members\":{\"build\":[{\"__symbolic\":\"method\"}]}},\"HttpXsrfTokenExtractor\":{\"__symbolic\":\"class\",\"members\":{\"getToken\":[{\"__symbolic\":\"method\"}]}}},\"origins\":{\"ɵangular_packages_common_http_http_a\":\"./src/interceptor\",\"ɵangular_packages_common_http_http_b\":\"./src/jsonp\",\"ɵangular_packages_common_http_http_c\":\"./src/module\",\"ɵangular_packages_common_http_http_d\":\"./src/xhr\",\"ɵangular_packages_common_http_http_e\":\"./src/xsrf\",\"ɵangular_packages_common_http_http_f\":\"./src/xsrf\",\"ɵangular_packages_common_http_http_g\":\"./src/xsrf\",\"ɵangular_packages_common_http_http_h\":\"./src/xsrf\",\"HttpBackend\":\"./src/backend\",\"HttpHandler\":\"./src/backend\",\"HttpClient\":\"./src/client\",\"HttpHeaders\":\"./src/headers\",\"HTTP_INTERCEPTORS\":\"./src/interceptor\",\"HttpInterceptor\":\"./src/interceptor\",\"JsonpClientBackend\":\"./src/jsonp\",\"JsonpInterceptor\":\"./src/jsonp\",\"HttpClientJsonpModule\":\"./src/module\",\"HttpClientModule\":\"./src/module\",\"HttpClientXsrfModule\":\"./src/module\",\"ɵHttpInterceptingHandler\":\"./src/module\",\"HttpParameterCodec\":\"./src/params\",\"HttpParams\":\"./src/params\",\"HttpUrlEncodingCodec\":\"./src/params\",\"HttpRequest\":\"./src/request\",\"HttpDownloadProgressEvent\":\"./src/response\",\"HttpErrorResponse\":\"./src/response\",\"HttpEvent\":\"./src/response\",\"HttpEventType\":\"./src/response\",\"HttpHeaderResponse\":\"./src/response\",\"HttpProgressEvent\":\"./src/response\",\"HttpResponse\":\"./src/response\",\"HttpResponseBase\":\"./src/response\",\"HttpSentEvent\":\"./src/response\",\"HttpUserEvent\":\"./src/response\",\"HttpXhrBackend\":\"./src/xhr\",\"XhrFactory\":\"./src/xhr\",\"HttpXsrfTokenExtractor\":\"./src/xsrf\"},\"importAs\":\"@angular/common/http\"}"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/platform-browser.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { BrowserModule, platformBrowser } from './browser';\nexport { Meta, MetaDefinition } from './browser/meta';\nexport { Title } from './browser/title';\nexport { disableDebugTools, enableDebugTools } from './browser/tools/tools';\nexport { BrowserTransferStateModule, StateKey, TransferState, makeStateKey } from './browser/transfer_state';\nexport { By } from './dom/debug/by';\nexport { DOCUMENT } from './dom/dom_tokens';\nexport { EVENT_MANAGER_PLUGINS, EventManager } from './dom/events/event_manager';\nexport { HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerLoader } from './dom/events/hammer_gestures';\nexport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle, SafeUrl, SafeValue } from './security/dom_sanitization_service';\nexport * from './private_export';\nexport { VERSION } from './version';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/src/animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all animation APIs of the animation browser package.\n */\nexport { BrowserAnimationsModule, NoopAnimationsModule } from './module';\nexport { ANIMATION_MODULE_TYPE } from './providers';\nexport * from './private_export';\n"
  },
  {
    "path": "node_modules/@angular/router/src/shared.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Route, UrlMatchResult } from './config';\nimport { UrlSegment, UrlSegmentGroup } from './url_tree';\n/**\n * @description\n *\n * Name of the primary outlet.\n *\n *\n */\nexport declare const PRIMARY_OUTLET = \"primary\";\n/**\n * A collection of parameters.\n *\n *\n */\nexport declare type Params = {\n    [key: string]: any;\n};\n/**\n * Matrix and Query parameters.\n *\n * `ParamMap` makes it easier to work with parameters as they could have either a single value or\n * multiple value. Because this should be known by the user, calling `get` or `getAll` returns the\n * correct type (either `string` or `string[]`).\n *\n * The API is inspired by the URLSearchParams interface.\n * see https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n *\n *\n */\nexport interface ParamMap {\n    has(name: string): boolean;\n    /**\n     * Return a single value for the given parameter name:\n     * - the value when the parameter has a single value,\n     * - the first value if the parameter has multiple values,\n     * - `null` when there is no such parameter.\n     */\n    get(name: string): string | null;\n    /**\n     * Return an array of values for the given parameter name.\n     *\n     * If there is no such parameter, an empty array is returned.\n     */\n    getAll(name: string): string[];\n    /** Name of the parameters */\n    readonly keys: string[];\n}\n/**\n * Convert a `Params` instance to a `ParamMap`.\n *\n *\n */\nexport declare function convertToParamMap(params: Params): ParamMap;\nexport declare function navigationCancelingError(message: string): Error;\nexport declare function isNavigationCancelingError(error: Error): any;\nexport declare function defaultUrlMatcher(segments: UrlSegment[], segmentGroup: UrlSegmentGroup, route: Route): UrlMatchResult | null;\n"
  },
  {
    "path": "node_modules/@angular/compiler/testing.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":3,\"metadata\":{},\"exports\":[{\"from\":\"./testing/testing\"}],\"flatModuleIndexRedirect\":true,\"importAs\":\"@angular/compiler/testing\"}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/src/compiler_factory.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Compiler, CompilerFactory, ComponentFactory, CompilerOptions, ModuleWithComponentFactories, InjectionToken, StaticProvider, Type, ɵConsole as Console, Injector, NgModuleFactory } from '@angular/core';\nimport { ViewCompiler, CompileMetadataResolver, TemplateParser, NgModuleCompiler, SummaryResolver, StyleCompiler, CompileReflector, CompilerConfig } from '@angular/compiler';\nexport declare const ERROR_COLLECTOR_TOKEN: InjectionToken<{}>;\n/**\n * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.\n */\nexport declare const DEFAULT_PACKAGE_URL_PROVIDER: {\n    provide: InjectionToken<string>;\n    useValue: string;\n};\nexport declare class CompilerImpl implements Compiler {\n    private _metadataResolver;\n    private _delegate;\n    readonly injector: Injector;\n    constructor(injector: Injector, _metadataResolver: CompileMetadataResolver, templateParser: TemplateParser, styleCompiler: StyleCompiler, viewCompiler: ViewCompiler, ngModuleCompiler: NgModuleCompiler, summaryResolver: SummaryResolver<Type<any>>, compileReflector: CompileReflector, compilerConfig: CompilerConfig, console: Console);\n    private getExtraNgModuleProviders;\n    compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T>;\n    compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>>;\n    compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T>;\n    compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>): Promise<ModuleWithComponentFactories<T>>;\n    loadAotSummaries(summaries: () => any[]): void;\n    hasAotSummary(ref: Type<any>): boolean;\n    getComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n    clearCache(): void;\n    clearCacheFor(type: Type<any>): void;\n    getModuleId(moduleType: Type<any>): string | undefined;\n}\n/**\n * A set of providers that provide `JitCompiler` and its dependencies to use for\n * template compilation.\n */\nexport declare const COMPILER_PROVIDERS: StaticProvider[];\n/**\n * @experimental\n */\nexport declare class JitCompilerFactory implements CompilerFactory {\n    private _defaultOptions;\n    createCompiler(options?: CompilerOptions[]): Compiler;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/testing.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":3,\"metadata\":{},\"exports\":[{\"from\":\"./testing/testing\"}],\"flatModuleIndexRedirect\":true,\"importAs\":\"@angular/core/testing\"}\n"
  },
  {
    "path": "node_modules/@angular/common/http.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":3,\"metadata\":{},\"exports\":[{\"from\":\"./http/http\"}],\"flatModuleIndexRedirect\":true,\"importAs\":\"@angular/common/http\"}\n"
  },
  {
    "path": "node_modules/@angular/common/testing/testing.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"SpyLocation\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":18,\"character\":1}}],\"members\":{\"setInitialPath\":[{\"__symbolic\":\"method\"}],\"setBaseHref\":[{\"__symbolic\":\"method\"}],\"path\":[{\"__symbolic\":\"method\"}],\"state\":[{\"__symbolic\":\"method\"}],\"isCurrentPathEqualTo\":[{\"__symbolic\":\"method\"}],\"simulateUrlPop\":[{\"__symbolic\":\"method\"}],\"simulateHashChange\":[{\"__symbolic\":\"method\"}],\"prepareExternalUrl\":[{\"__symbolic\":\"method\"}],\"go\":[{\"__symbolic\":\"method\"}],\"replaceState\":[{\"__symbolic\":\"method\"}],\"forward\":[{\"__symbolic\":\"method\"}],\"back\":[{\"__symbolic\":\"method\"}],\"subscribe\":[{\"__symbolic\":\"method\"}],\"normalize\":[{\"__symbolic\":\"method\"}]}},\"MockLocationStrategy\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"module\":\"@angular/common\",\"name\":\"LocationStrategy\",\"line\":20,\"character\":42},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":19,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\"}],\"simulatePopState\":[{\"__symbolic\":\"method\"}],\"path\":[{\"__symbolic\":\"method\"}],\"prepareExternalUrl\":[{\"__symbolic\":\"method\"}],\"pushState\":[{\"__symbolic\":\"method\"}],\"replaceState\":[{\"__symbolic\":\"method\"}],\"onPopState\":[{\"__symbolic\":\"method\"}],\"getBaseHref\":[{\"__symbolic\":\"method\"}],\"back\":[{\"__symbolic\":\"method\"}],\"forward\":[{\"__symbolic\":\"method\"}]}}},\"origins\":{\"SpyLocation\":\"./src/location_mock\",\"MockLocationStrategy\":\"./src/mock_location_strategy\"},\"importAs\":\"@angular/common/testing\"}"
  },
  {
    "path": "node_modules/@angular/platform-browser/testing/src/browser.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PlatformRef, StaticProvider } from '@angular/core';\n/**\n * Platform for testing\n *\n *\n */\nexport declare const platformBrowserTesting: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;\n/**\n * NgModule for testing.\n *\n *\n */\nexport declare class BrowserTestingModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/forms/src/forms.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * This module is used for handling user input, by defining and building a `FormGroup` that\n * consists of `FormControl` objects, and mapping them onto the DOM. `FormControl`\n * objects can then be used to read information from the form DOM elements.\n *\n * Forms providers are not included in default providers; you must import these providers\n * explicitly.\n */\nexport { AbstractControlDirective } from './directives/abstract_control_directive';\nexport { AbstractFormGroupDirective } from './directives/abstract_form_group_directive';\nexport { CheckboxControlValueAccessor } from './directives/checkbox_value_accessor';\nexport { ControlContainer } from './directives/control_container';\nexport { ControlValueAccessor, NG_VALUE_ACCESSOR } from './directives/control_value_accessor';\nexport { COMPOSITION_BUFFER_MODE, DefaultValueAccessor } from './directives/default_value_accessor';\nexport { Form } from './directives/form_interface';\nexport { NgControl } from './directives/ng_control';\nexport { NgControlStatus, NgControlStatusGroup } from './directives/ng_control_status';\nexport { NgForm } from './directives/ng_form';\nexport { NgFormSelectorWarning } from './directives/ng_form_selector_warning';\nexport { NgModel } from './directives/ng_model';\nexport { NgModelGroup } from './directives/ng_model_group';\nexport { RadioControlValueAccessor } from './directives/radio_control_value_accessor';\nexport { FormControlDirective } from './directives/reactive_directives/form_control_directive';\nexport { FormControlName } from './directives/reactive_directives/form_control_name';\nexport { FormGroupDirective } from './directives/reactive_directives/form_group_directive';\nexport { FormArrayName } from './directives/reactive_directives/form_group_name';\nexport { FormGroupName } from './directives/reactive_directives/form_group_name';\nexport { NgSelectOption, SelectControlValueAccessor } from './directives/select_control_value_accessor';\nexport { SelectMultipleControlValueAccessor } from './directives/select_multiple_control_value_accessor';\nexport { AsyncValidator, AsyncValidatorFn, CheckboxRequiredValidator, EmailValidator, MaxLengthValidator, MinLengthValidator, PatternValidator, RequiredValidator, ValidationErrors, Validator, ValidatorFn } from './directives/validators';\nexport { FormBuilder } from './form_builder';\nexport { AbstractControl, AbstractControlOptions, FormArray, FormControl, FormGroup } from './model';\nexport { NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators } from './validators';\nexport { VERSION } from './version';\nexport * from './form_providers';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/testing/src/dom_test_component_renderer.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TestComponentRenderer } from '@angular/core/testing';\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\nexport declare class DOMTestComponentRenderer extends TestComponentRenderer {\n    private _doc;\n    constructor(_doc: any);\n    insertRootElement(rootElId: string): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/http/testing/testing.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { HttpClientTestingBackend as ɵangular_packages_common_http_testing_testing_a } from './src/backend';\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/reflective_provider.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Self, SkipSelf } from './metadata';\nimport { Provider } from './provider';\nimport { ReflectiveKey } from './reflective_key';\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nexport declare class ReflectiveDependency {\n    key: ReflectiveKey;\n    optional: boolean;\n    visibility: Self | SkipSelf | null;\n    constructor(key: ReflectiveKey, optional: boolean, visibility: Self | SkipSelf | null);\n    static fromKey(key: ReflectiveKey): ReflectiveDependency;\n}\n/**\n * An internal resolved representation of a `Provider` used by the `Injector`.\n *\n * @usageNotes\n * This is usually created automatically by `Injector.resolveAndCreate`.\n *\n * It can be created manually, as follows:\n *\n * ### Example\n *\n * ```typescript\n * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);\n * var injector = Injector.fromResolvedProviders(resolvedProviders);\n *\n * expect(injector.get('message')).toEqual('Hello');\n * ```\n *\n * @experimental\n */\nexport interface ResolvedReflectiveProvider {\n    /**\n     * A key, usually a `Type<any>`.\n     */\n    key: ReflectiveKey;\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     */\n    resolvedFactories: ResolvedReflectiveFactory[];\n    /**\n     * Indicates if the provider is a multi-provider or a regular provider.\n     */\n    multiProvider: boolean;\n}\nexport declare class ResolvedReflectiveProvider_ implements ResolvedReflectiveProvider {\n    key: ReflectiveKey;\n    resolvedFactories: ResolvedReflectiveFactory[];\n    multiProvider: boolean;\n    readonly resolvedFactory: ResolvedReflectiveFactory;\n    constructor(key: ReflectiveKey, resolvedFactories: ResolvedReflectiveFactory[], multiProvider: boolean);\n}\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * @experimental\n */\nexport declare class ResolvedReflectiveFactory {\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     */\n    factory: Function;\n    /**\n     * Arguments (dependencies) to the `factory` function.\n     */\n    dependencies: ReflectiveDependency[];\n    constructor(\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     */\n    factory: Function, \n    /**\n     * Arguments (dependencies) to the `factory` function.\n     */\n    dependencies: ReflectiveDependency[]);\n}\n/**\n * Resolve a list of Providers.\n */\nexport declare function resolveReflectiveProviders(providers: Provider[]): ResolvedReflectiveProvider[];\n/**\n * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n * multi providers have been merged.\n */\nexport declare function mergeResolvedReflectiveProviders(providers: ResolvedReflectiveProvider[], normalizedProvidersMap: Map<number, ResolvedReflectiveProvider>): Map<number, ResolvedReflectiveProvider>;\nexport declare function constructDependencies(typeOrFunc: any, dependencies?: any[]): ReflectiveDependency[];\n"
  },
  {
    "path": "node_modules/@angular/router/src/utils/preactivation.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '@angular/core';\nimport { ChildrenOutletContexts } from '../router_outlet_context';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '../router_state';\nexport declare class CanActivate {\n    path: ActivatedRouteSnapshot[];\n    readonly route: ActivatedRouteSnapshot;\n    constructor(path: ActivatedRouteSnapshot[]);\n}\nexport declare class CanDeactivate {\n    component: Object | null;\n    route: ActivatedRouteSnapshot;\n    constructor(component: Object | null, route: ActivatedRouteSnapshot);\n}\nexport declare type Checks = {\n    canDeactivateChecks: CanDeactivate[];\n    canActivateChecks: CanActivate[];\n};\nexport declare function getAllRouteGuards(future: RouterStateSnapshot, curr: RouterStateSnapshot, parentContexts: ChildrenOutletContexts): Checks;\nexport declare function getCanActivateChild(p: ActivatedRouteSnapshot): {\n    node: ActivatedRouteSnapshot;\n    guards: any[];\n} | null;\nexport declare function getToken(token: any, snapshot: ActivatedRouteSnapshot, moduleInjector: Injector): any;\n"
  },
  {
    "path": "node_modules/@angular/router/src/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { Data, LoadChildren, LoadChildrenCallback, ResolveData, Route, Routes, RunGuardsAndResolvers, UrlMatchResult, UrlMatcher } from './config';\nexport { RouterLink, RouterLinkWithHref } from './directives/router_link';\nexport { RouterLinkActive } from './directives/router_link_active';\nexport { RouterOutlet } from './directives/router_outlet';\nexport { ActivationEnd, ActivationStart, ChildActivationEnd, ChildActivationStart, Event, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouterEvent, RoutesRecognized, Scroll } from './events';\nexport { CanActivate, CanActivateChild, CanDeactivate, CanLoad, Resolve } from './interfaces';\nexport { DetachedRouteHandle, RouteReuseStrategy } from './route_reuse_strategy';\nexport { NavigationExtras, Router } from './router';\nexport { ROUTES } from './router_config_loader';\nexport { ExtraOptions, ROUTER_CONFIGURATION, ROUTER_INITIALIZER, RouterModule, provideRoutes } from './router_module';\nexport { ChildrenOutletContexts, OutletContext } from './router_outlet_context';\nexport { NoPreloading, PreloadAllModules, PreloadingStrategy, RouterPreloader } from './router_preloader';\nexport { ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot } from './router_state';\nexport { PRIMARY_OUTLET, ParamMap, Params, convertToParamMap } from './shared';\nexport { UrlHandlingStrategy } from './url_handling_strategy';\nexport { DefaultUrlSerializer, UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree } from './url_tree';\nexport { VERSION } from './version';\nexport * from './private_export';\n"
  },
  {
    "path": "node_modules/@angular/core/src/util/decorators.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\n/**\n * An interface implemented by all Angular type decorators, which allows them to be used as ES7\n * decorators as well as\n * Angular DSL syntax.\n *\n * ES7 syntax:\n *\n * ```\n * @ng.Component({...})\n * class MyClass {...}\n * ```\n *\n */\nexport interface TypeDecorator {\n    /**\n     * Invoke as ES7 decorator.\n     */\n    <T extends Type<any>>(type: T): T;\n    (target: Object, propertyKey?: string | symbol, parameterIndex?: number): void;\n}\nexport declare const ANNOTATIONS = \"__annotations__\";\nexport declare const PARAMETERS = \"__parameters__\";\nexport declare const PROP_METADATA = \"__prop__metadata__\";\n/**\n * @suppress {globalThis}\n */\nexport declare function makeDecorator<T>(name: string, props?: (...args: any[]) => any, parentClass?: any, additionalProcessing?: (type: Type<T>) => void, typeFn?: (type: Type<T>, ...args: any[]) => void): {\n    new (...args: any[]): any;\n    (...args: any[]): any;\n    (...args: any[]): (cls: any) => any;\n};\nexport declare function makeParamDecorator(name: string, props?: (...args: any[]) => any, parentClass?: any): any;\nexport declare function makePropDecorator(name: string, props?: (...args: any[]) => any, parentClass?: any, additionalProcessing?: (target: any, name: string, ...args: any[]) => void): any;\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/src/private_export.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { CompilerImpl as ɵCompilerImpl } from './compiler_factory';\nexport { platformCoreDynamic as ɵplatformCoreDynamic } from './platform_core_dynamic';\nexport { INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS } from './platform_providers';\nexport { ResourceLoaderImpl as ɵResourceLoaderImpl } from './resource_loader/resource_loader_impl';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/private_export.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { BROWSER_SANITIZATION_PROVIDERS as ɵBROWSER_SANITIZATION_PROVIDERS, INTERNAL_BROWSER_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS, initDomAdapter as ɵinitDomAdapter } from './browser';\nexport { BrowserDomAdapter as ɵBrowserDomAdapter } from './browser/browser_adapter';\nexport { BrowserPlatformLocation as ɵBrowserPlatformLocation } from './browser/location/browser_platform_location';\nexport { TRANSITION_ID as ɵTRANSITION_ID } from './browser/server-transition';\nexport { BrowserGetTestability as ɵBrowserGetTestability } from './browser/testability';\nexport { escapeHtml as ɵescapeHtml } from './browser/transfer_state';\nexport { ELEMENT_PROBE_PROVIDERS as ɵELEMENT_PROBE_PROVIDERS } from './dom/debug/ng_probe';\nexport { DomAdapter as ɵDomAdapter, getDOM as ɵgetDOM, setRootDomAdapter as ɵsetRootDomAdapter } from './dom/dom_adapter';\nexport { DomRendererFactory2 as ɵDomRendererFactory2, NAMESPACE_URIS as ɵNAMESPACE_URIS, flattenStyles as ɵflattenStyles, shimContentAttribute as ɵshimContentAttribute, shimHostAttribute as ɵshimHostAttribute } from './dom/dom_renderer';\nexport { DomEventsPlugin as ɵDomEventsPlugin } from './dom/events/dom_events';\nexport { HammerGesturesPlugin as ɵHammerGesturesPlugin } from './dom/events/hammer_gestures';\nexport { KeyEventsPlugin as ɵKeyEventsPlugin } from './dom/events/key_events';\nexport { DomSharedStylesHost as ɵDomSharedStylesHost, SharedStylesHost as ɵSharedStylesHost } from './dom/shared_styles_host';\nexport { DomSanitizerImpl as ɵDomSanitizerImpl } from './security/dom_sanitization_service';\n"
  },
  {
    "path": "node_modules/@angular/common/common.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"ɵangular_packages_common_common_a\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":15,\"character\":40},\"arguments\":[\"UseV4Plurals\"]},\"ɵangular_packages_common_common_b\":{\"__symbolic\":\"function\"},\"ɵangular_packages_common_common_c\":{\"LocaleId\":0,\"DayPeriodsFormat\":1,\"DayPeriodsStandalone\":2,\"DaysFormat\":3,\"DaysStandalone\":4,\"MonthsFormat\":5,\"MonthsStandalone\":6,\"Eras\":7,\"FirstDayOfWeek\":8,\"WeekendRange\":9,\"DateFormat\":10,\"TimeFormat\":11,\"DateTimeFormat\":12,\"NumberSymbols\":13,\"NumberFormats\":14,\"CurrencySymbol\":15,\"CurrencyName\":16,\"Currencies\":17,\"PluralCase\":18,\"ExtraData\":19},\"ɵangular_packages_common_common_d\":{\"__symbolic\":\"function\"},\"ɵangular_packages_common_common_e\":[{\"__symbolic\":\"reference\",\"name\":\"NgClass\"},{\"__symbolic\":\"reference\",\"name\":\"NgComponentOutlet\"},{\"__symbolic\":\"reference\",\"name\":\"NgForOf\"},{\"__symbolic\":\"reference\",\"name\":\"NgIf\"},{\"__symbolic\":\"reference\",\"name\":\"NgTemplateOutlet\"},{\"__symbolic\":\"reference\",\"name\":\"NgStyle\"},{\"__symbolic\":\"reference\",\"name\":\"NgSwitch\"},{\"__symbolic\":\"reference\",\"name\":\"NgSwitchCase\"},{\"__symbolic\":\"reference\",\"name\":\"NgSwitchDefault\"},{\"__symbolic\":\"reference\",\"name\":\"NgPlural\"},{\"__symbolic\":\"reference\",\"name\":\"NgPluralCase\"}],\"ɵangular_packages_common_common_f\":[{\"__symbolic\":\"reference\",\"name\":\"AsyncPipe\"},{\"__symbolic\":\"reference\",\"name\":\"UpperCasePipe\"},{\"__symbolic\":\"reference\",\"name\":\"LowerCasePipe\"},{\"__symbolic\":\"reference\",\"name\":\"JsonPipe\"},{\"__symbolic\":\"reference\",\"name\":\"SlicePipe\"},{\"__symbolic\":\"reference\",\"name\":\"DecimalPipe\"},{\"__symbolic\":\"reference\",\"name\":\"PercentPipe\"},{\"__symbolic\":\"reference\",\"name\":\"TitleCasePipe\"},{\"__symbolic\":\"reference\",\"name\":\"CurrencyPipe\"},{\"__symbolic\":\"reference\",\"name\":\"DatePipe\"},{\"__symbolic\":\"reference\",\"name\":\"I18nPluralPipe\"},{\"__symbolic\":\"reference\",\"name\":\"I18nSelectPipe\"},{\"__symbolic\":\"reference\",\"name\":\"KeyValuePipe\"}],\"ɵangular_packages_common_common_g\":[{\"__symbolic\":\"reference\",\"name\":\"DeprecatedDecimalPipe\"},{\"__symbolic\":\"reference\",\"name\":\"DeprecatedPercentPipe\"},{\"__symbolic\":\"reference\",\"name\":\"DeprecatedCurrencyPipe\"},{\"__symbolic\":\"reference\",\"name\":\"DeprecatedDatePipe\"}],\"PlatformLocation\":{\"__symbolic\":\"class\",\"members\":{\"getBaseHrefFromDOM\":[{\"__symbolic\":\"method\"}],\"onPopState\":[{\"__symbolic\":\"method\"}],\"onHashChange\":[{\"__symbolic\":\"method\"}],\"replaceState\":[{\"__symbolic\":\"method\"}],\"pushState\":[{\"__symbolic\":\"method\"}],\"forward\":[{\"__symbolic\":\"method\"}],\"back\":[{\"__symbolic\":\"method\"}]}},\"LOCATION_INITIALIZED\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":53,\"character\":40},\"arguments\":[\"Location Initialized\"]},\"LocationChangeEvent\":{\"__symbolic\":\"interface\"},\"LocationChangeListener\":{\"__symbolic\":\"interface\"},\"LocationStrategy\":{\"__symbolic\":\"class\",\"members\":{\"path\":[{\"__symbolic\":\"method\"}],\"prepareExternalUrl\":[{\"__symbolic\":\"method\"}],\"pushState\":[{\"__symbolic\":\"method\"}],\"replaceState\":[{\"__symbolic\":\"method\"}],\"forward\":[{\"__symbolic\":\"method\"}],\"back\":[{\"__symbolic\":\"method\"}],\"onPopState\":[{\"__symbolic\":\"method\"}],\"getBaseHref\":[{\"__symbolic\":\"method\"}]}},\"APP_BASE_HREF\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":65,\"character\":33},\"arguments\":[\"appBaseHref\"]},\"HashLocationStrategy\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"LocationStrategy\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":35,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[null,[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":40,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":40,\"character\":19},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"APP_BASE_HREF\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"PlatformLocation\"},{\"__symbolic\":\"reference\",\"name\":\"string\"}]}],\"onPopState\":[{\"__symbolic\":\"method\"}],\"getBaseHref\":[{\"__symbolic\":\"method\"}],\"path\":[{\"__symbolic\":\"method\"}],\"prepareExternalUrl\":[{\"__symbolic\":\"method\"}],\"pushState\":[{\"__symbolic\":\"method\"}],\"replaceState\":[{\"__symbolic\":\"method\"}],\"forward\":[{\"__symbolic\":\"method\"}],\"back\":[{\"__symbolic\":\"method\"}]}},\"PathLocationStrategy\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"LocationStrategy\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":44,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[null,[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":50,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":50,\"character\":19},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"APP_BASE_HREF\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"PlatformLocation\"},{\"__symbolic\":\"reference\",\"name\":\"string\"}]}],\"onPopState\":[{\"__symbolic\":\"method\"}],\"getBaseHref\":[{\"__symbolic\":\"method\"}],\"prepareExternalUrl\":[{\"__symbolic\":\"method\"}],\"path\":[{\"__symbolic\":\"method\"}],\"pushState\":[{\"__symbolic\":\"method\"}],\"replaceState\":[{\"__symbolic\":\"method\"}],\"forward\":[{\"__symbolic\":\"method\"}],\"back\":[{\"__symbolic\":\"method\"}]}},\"PopStateEvent\":{\"__symbolic\":\"interface\"},\"Location\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":47,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"LocationStrategy\"}]}],\"path\":[{\"__symbolic\":\"method\"}],\"isCurrentPathEqualTo\":[{\"__symbolic\":\"method\"}],\"normalize\":[{\"__symbolic\":\"method\"}],\"prepareExternalUrl\":[{\"__symbolic\":\"method\"}],\"go\":[{\"__symbolic\":\"method\"}],\"replaceState\":[{\"__symbolic\":\"method\"}],\"forward\":[{\"__symbolic\":\"method\"}],\"back\":[{\"__symbolic\":\"method\"}],\"subscribe\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"normalizeQueryParams\":{\"__symbolic\":\"function\",\"parameters\":[\"params\"],\"value\":{\"__symbolic\":\"if\",\"condition\":{\"__symbolic\":\"binop\",\"operator\":\"&&\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"params\"},\"right\":{\"__symbolic\":\"binop\",\"operator\":\"!==\",\"left\":{\"__symbolic\":\"index\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"params\"},\"index\":0},\"right\":\"?\"}},\"thenExpression\":{\"__symbolic\":\"binop\",\"operator\":\"+\",\"left\":\"?\",\"right\":{\"__symbolic\":\"reference\",\"name\":\"params\"}},\"elseExpression\":{\"__symbolic\":\"reference\",\"name\":\"params\"}}}}},\"formatDate\":{\"__symbolic\":\"function\"},\"formatCurrency\":{\"__symbolic\":\"function\"},\"formatNumber\":{\"__symbolic\":\"function\"},\"formatPercent\":{\"__symbolic\":\"function\"},\"NgLocaleLocalization\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"NgLocalization\"},\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":56,\"character\":1}}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":59,\"character\":7},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"LOCALE_ID\",\"line\":59,\"character\":14}]}],[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Optional\",\"line\":61,\"character\":7}},{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":61,\"character\":19},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_common_a\"}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":62,\"character\":10,\"module\":\"./src/i18n/localization\"}]}],\"getPluralCategory\":[{\"__symbolic\":\"method\"}]}},\"NgLocalization\":{\"__symbolic\":\"class\",\"members\":{\"getPluralCategory\":[{\"__symbolic\":\"method\"}]}},\"registerLocaleData\":{\"__symbolic\":\"function\"},\"Plural\":{\"Zero\":0,\"One\":1,\"Two\":2,\"Few\":3,\"Many\":4,\"Other\":5},\"NumberFormatStyle\":{\"Decimal\":0,\"Percent\":1,\"Currency\":2,\"Scientific\":3},\"FormStyle\":{\"Format\":0,\"Standalone\":1},\"Time\":{\"__symbolic\":\"interface\"},\"TranslationWidth\":{\"Narrow\":0,\"Abbreviated\":1,\"Wide\":2,\"Short\":3},\"FormatWidth\":{\"Short\":0,\"Medium\":1,\"Long\":2,\"Full\":3},\"NumberSymbol\":{\"Decimal\":0,\"Group\":1,\"List\":2,\"PercentSign\":3,\"PlusSign\":4,\"MinusSign\":5,\"Exponential\":6,\"SuperscriptingExponent\":7,\"PerMille\":8,\"Infinity\":9,\"NaN\":10,\"TimeSeparator\":11,\"CurrencyDecimal\":12,\"CurrencyGroup\":13},\"WeekDay\":{\"Sunday\":0,\"Monday\":1,\"Tuesday\":2,\"Wednesday\":3,\"Thursday\":4,\"Friday\":5,\"Saturday\":6},\"getNumberOfCurrencyDigits\":{\"__symbolic\":\"function\"},\"getCurrencySymbol\":{\"__symbolic\":\"function\"},\"getLocaleDayPeriods\":{\"__symbolic\":\"function\"},\"getLocaleDayNames\":{\"__symbolic\":\"function\"},\"getLocaleMonthNames\":{\"__symbolic\":\"function\"},\"getLocaleId\":{\"__symbolic\":\"function\",\"parameters\":[\"locale\"],\"value\":{\"__symbolic\":\"index\",\"expression\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_common_d\"},\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"locale\"}]},\"index\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_common_c\"},\"member\":\"LocaleId\"}}},\"getLocaleEraNames\":{\"__symbolic\":\"function\"},\"getLocaleWeekEndRange\":{\"__symbolic\":\"function\"},\"getLocaleFirstDayOfWeek\":{\"__symbolic\":\"function\"},\"getLocaleDateFormat\":{\"__symbolic\":\"function\"},\"getLocaleDateTimeFormat\":{\"__symbolic\":\"function\"},\"getLocaleExtraDayPeriodRules\":{\"__symbolic\":\"function\"},\"getLocaleExtraDayPeriods\":{\"__symbolic\":\"function\"},\"getLocalePluralCase\":{\"__symbolic\":\"function\"},\"getLocaleTimeFormat\":{\"__symbolic\":\"function\"},\"getLocaleNumberSymbol\":{\"__symbolic\":\"function\"},\"getLocaleNumberFormat\":{\"__symbolic\":\"function\"},\"getLocaleCurrencyName\":{\"__symbolic\":\"function\"},\"getLocaleCurrencySymbol\":{\"__symbolic\":\"function\"},\"ɵparseCookieValue\":{\"__symbolic\":\"function\"},\"CommonModule\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModule\",\"line\":29,\"character\":1},\"arguments\":[{\"declarations\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_common_e\"},{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_common_f\"}],\"exports\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_common_e\"},{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_common_f\"}],\"providers\":[{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"NgLocalization\"},\"useClass\":{\"__symbolic\":\"reference\",\"name\":\"NgLocaleLocalization\"}}]}]}],\"members\":{}},\"DeprecatedI18NPipesModule\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModule\",\"line\":44,\"character\":1},\"arguments\":[{\"declarations\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_common_g\"}],\"exports\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_common_g\"}],\"providers\":[{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_common_a\"},\"useValue\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_common_b\"}}]}]}],\"members\":{}},\"NgClass\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":38,\"character\":1},\"arguments\":[{\"selector\":\"[ngClass]\"}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"IterableDiffers\",\"line\":49,\"character\":32},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"KeyValueDiffers\",\"line\":49,\"character\":75},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ElementRef\",\"line\":50,\"character\":21},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Renderer2\",\"line\":50,\"character\":52}]}],\"klass\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":52,\"character\":3},\"arguments\":[\"class\"]}]}],\"ngClass\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":60,\"character\":3}}]}],\"ngDoCheck\":[{\"__symbolic\":\"method\"}],\"_applyKeyValueChanges\":[{\"__symbolic\":\"method\"}],\"_applyIterableChanges\":[{\"__symbolic\":\"method\"}],\"_applyClasses\":[{\"__symbolic\":\"method\"}],\"_removeClasses\":[{\"__symbolic\":\"method\"}],\"_toggleClass\":[{\"__symbolic\":\"method\"}]}},\"NgForOf\":{\"__symbolic\":\"class\",\"arity\":1,\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":96,\"character\":1},\"arguments\":[{\"selector\":\"[ngFor][ngForOf]\"}]}],\"members\":{\"ngForOf\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":98,\"character\":3}}]}],\"ngForTrackBy\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":103,\"character\":3}}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ViewContainerRef\",\"line\":126,\"character\":30},{\"__symbolic\":\"reference\",\"name\":\"TemplateRef\",\"module\":\"@angular/core\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NgForOfContext\"}]},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"IterableDiffers\",\"line\":127,\"character\":24}]}],\"ngForTemplate\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":129,\"character\":3}}]}],\"ngDoCheck\":[{\"__symbolic\":\"method\"}],\"_applyChanges\":[{\"__symbolic\":\"method\"}],\"_perViewChange\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"ngTemplateContextGuard\":{\"__symbolic\":\"function\",\"parameters\":[\"dir\",\"ctx\"],\"value\":true}}},\"NgForOfContext\":{\"__symbolic\":\"class\",\"arity\":1,\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"error\",\"message\":\"Could not resolve type\",\"line\":12,\"character\":24,\"context\":{\"typeName\":\"T\"},\"module\":\"./src/directives/ng_for_of\"},{\"__symbolic\":\"reference\",\"name\":\"NgIterable\",\"module\":\"@angular/core\",\"arguments\":[{\"__symbolic\":\"error\",\"message\":\"Could not resolve type\",\"line\":12,\"character\":54,\"context\":{\"typeName\":\"T\"},\"module\":\"./src/directives/ng_for_of\"}]},{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"number\"}]}]}},\"NgIf\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":103,\"character\":1},\"arguments\":[{\"selector\":\"[ngIf]\"}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ViewContainerRef\",\"line\":111,\"character\":38},{\"__symbolic\":\"reference\",\"name\":\"TemplateRef\",\"module\":\"@angular/core\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"NgIfContext\"}]}]}],\"ngIf\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":115,\"character\":3}}]}],\"ngIfThen\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":121,\"character\":3}}]}],\"ngIfElse\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":129,\"character\":3}}]}],\"_updateView\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"ngIfUseIfTypeGuard\":{\"__symbolic\":\"error\",\"message\":\"Variable not initialized\",\"line\":160,\"character\":16},\"ngTemplateGuard_ngIf\":{\"__symbolic\":\"function\",\"parameters\":[\"dir\",\"expr\"],\"value\":true}}},\"NgIfContext\":{\"__symbolic\":\"class\",\"members\":{}},\"NgPlural\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":46,\"character\":1},\"arguments\":[{\"selector\":\"[ngPlural]\"}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"NgLocalization\"}]}],\"ngPlural\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":56,\"character\":3}}]}],\"addCase\":[{\"__symbolic\":\"method\"}],\"_updateView\":[{\"__symbolic\":\"method\"}],\"_clearViews\":[{\"__symbolic\":\"method\"}],\"_activateView\":[{\"__symbolic\":\"method\"}]}},\"NgPluralCase\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":104,\"character\":1},\"arguments\":[{\"selector\":\"[ngPluralCase]\"}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Attribute\",\"line\":107,\"character\":7},\"arguments\":[\"ngPluralCase\"]}],null,null,[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Host\",\"line\":108,\"character\":40}}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"TemplateRef\",\"module\":\"@angular/core\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"Object\"}]},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ViewContainerRef\",\"line\":108,\"character\":21},{\"__symbolic\":\"reference\",\"name\":\"NgPlural\"}]}]}},\"NgStyle\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":32,\"character\":1},\"arguments\":[{\"selector\":\"[ngStyle]\"}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"KeyValueDiffers\",\"line\":40,\"character\":24},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ElementRef\",\"line\":40,\"character\":56},{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Renderer2\",\"line\":40,\"character\":87}]}],\"ngStyle\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":42,\"character\":3}}]}],\"ngDoCheck\":[{\"__symbolic\":\"method\"}],\"_applyChanges\":[{\"__symbolic\":\"method\"}],\"_setStyle\":[{\"__symbolic\":\"method\"}]}},\"NgSwitch\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":75,\"character\":1},\"arguments\":[{\"selector\":\"[ngSwitch]\"}]}],\"members\":{\"ngSwitch\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":85,\"character\":3}}]}],\"_addCase\":[{\"__symbolic\":\"method\"}],\"_addDefault\":[{\"__symbolic\":\"method\"}],\"_matchCase\":[{\"__symbolic\":\"method\"}],\"_updateDefaultCases\":[{\"__symbolic\":\"method\"}]}},\"NgSwitchCase\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":152,\"character\":1},\"arguments\":[{\"selector\":\"[ngSwitchCase]\"}]}],\"members\":{\"ngSwitchCase\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":156,\"character\":3}}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[null,null,[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Host\",\"line\":161,\"character\":7}}]],\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ViewContainerRef\",\"line\":14,\"character\":33},{\"__symbolic\":\"reference\",\"name\":\"TemplateRef\",\"module\":\"@angular/core\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"Object\"}]},{\"__symbolic\":\"reference\",\"name\":\"NgSwitch\"}]}],\"ngDoCheck\":[{\"__symbolic\":\"method\"}]}},\"NgSwitchDefault\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":191,\"character\":1},\"arguments\":[{\"selector\":\"[ngSwitchDefault]\"}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[null,null,[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Host\",\"line\":195,\"character\":7}}]],\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ViewContainerRef\",\"line\":14,\"character\":33},{\"__symbolic\":\"reference\",\"name\":\"TemplateRef\",\"module\":\"@angular/core\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"Object\"}]},{\"__symbolic\":\"reference\",\"name\":\"NgSwitch\"}]}]}},\"NgTemplateOutlet\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":33,\"character\":1},\"arguments\":[{\"selector\":\"[ngTemplateOutlet]\"}]}],\"members\":{\"ngTemplateOutletContext\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":39,\"character\":3}}]}],\"ngTemplateOutlet\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":42,\"character\":3}}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ViewContainerRef\",\"line\":44,\"character\":41}]}],\"ngOnChanges\":[{\"__symbolic\":\"method\"}],\"_shouldRecreateView\":[{\"__symbolic\":\"method\"}],\"_hasContextShapeChanged\":[{\"__symbolic\":\"method\"}],\"_updateExistingContext\":[{\"__symbolic\":\"method\"}]}},\"NgComponentOutlet\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Directive\",\"line\":70,\"character\":1},\"arguments\":[{\"selector\":\"[ngComponentOutlet]\"}]}],\"members\":{\"ngComponentOutlet\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":73,\"character\":3}}]}],\"ngComponentOutletInjector\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":75,\"character\":3}}]}],\"ngComponentOutletContent\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":77,\"character\":3}}]}],\"ngComponentOutletNgModuleFactory\":[{\"__symbolic\":\"property\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Input\",\"line\":79,\"character\":3}}]}],\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ViewContainerRef\",\"line\":84,\"character\":41}]}],\"ngOnChanges\":[{\"__symbolic\":\"method\"}],\"ngOnDestroy\":[{\"__symbolic\":\"method\"}]}},\"DOCUMENT\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"InjectionToken\",\"line\":18,\"character\":28},\"arguments\":[\"DocumentToken\"]},\"AsyncPipe\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Pipe\",\"line\":68,\"character\":1},\"arguments\":[{\"name\":\"async\",\"pure\":false}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"ChangeDetectorRef\",\"line\":77,\"character\":28}]}],\"ngOnDestroy\":[{\"__symbolic\":\"method\"}],\"transform\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}],\"_subscribe\":[{\"__symbolic\":\"method\"}],\"_selectStrategy\":[{\"__symbolic\":\"method\"}],\"_dispose\":[{\"__symbolic\":\"method\"}],\"_updateLatestValue\":[{\"__symbolic\":\"method\"}]}},\"DatePipe\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Pipe\",\"line\":151,\"character\":1},\"arguments\":[{\"name\":\"date\",\"pure\":true}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":153,\"character\":15},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"LOCALE_ID\",\"line\":153,\"character\":22}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"}]}],\"transform\":[{\"__symbolic\":\"method\"}]}},\"I18nPluralPipe\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Pipe\",\"line\":28,\"character\":1},\"arguments\":[{\"name\":\"i18nPlural\",\"pure\":true}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"NgLocalization\"}]}],\"transform\":[{\"__symbolic\":\"method\"}]}},\"I18nSelectPipe\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Pipe\",\"line\":28,\"character\":1},\"arguments\":[{\"name\":\"i18nSelect\",\"pure\":true}]}],\"members\":{\"transform\":[{\"__symbolic\":\"method\"}]}},\"JsonPipe\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Pipe\",\"line\":24,\"character\":1},\"arguments\":[{\"name\":\"json\",\"pure\":false}]}],\"members\":{\"transform\":[{\"__symbolic\":\"method\"}]}},\"LowerCasePipe\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Pipe\",\"line\":25,\"character\":1},\"arguments\":[{\"name\":\"lowercase\"}]}],\"members\":{\"transform\":[{\"__symbolic\":\"method\"}]}},\"CurrencyPipe\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Pipe\",\"line\":154,\"character\":1},\"arguments\":[{\"name\":\"currency\"}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":156,\"character\":15},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"LOCALE_ID\",\"line\":156,\"character\":22}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"}]}],\"transform\":[{\"__symbolic\":\"method\"}]}},\"DecimalPipe\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Pipe\",\"line\":47,\"character\":1},\"arguments\":[{\"name\":\"number\"}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":49,\"character\":15},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"LOCALE_ID\",\"line\":49,\"character\":22}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"}]}],\"transform\":[{\"__symbolic\":\"method\"}]}},\"PercentPipe\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Pipe\",\"line\":100,\"character\":1},\"arguments\":[{\"name\":\"percent\"}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":102,\"character\":15},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"LOCALE_ID\",\"line\":102,\"character\":22}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"}]}],\"transform\":[{\"__symbolic\":\"method\"}]}},\"SlicePipe\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Pipe\",\"line\":46,\"character\":1},\"arguments\":[{\"name\":\"slice\",\"pure\":false}]}],\"members\":{\"transform\":[{\"__symbolic\":\"method\"}],\"supports\":[{\"__symbolic\":\"method\"}]}},\"UpperCasePipe\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Pipe\",\"line\":90,\"character\":1},\"arguments\":[{\"name\":\"uppercase\"}]}],\"members\":{\"transform\":[{\"__symbolic\":\"method\"}]}},\"TitleCasePipe\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Pipe\",\"line\":67,\"character\":1},\"arguments\":[{\"name\":\"titlecase\"}]}],\"members\":{\"transform\":[{\"__symbolic\":\"method\"}]}},\"KeyValuePipe\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Pipe\",\"line\":41,\"character\":1},\"arguments\":[{\"name\":\"keyvalue\",\"pure\":false}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"KeyValueDiffers\",\"line\":43,\"character\":40}]}],\"transform\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}]}},\"KeyValue\":{\"__symbolic\":\"interface\"},\"DeprecatedDatePipe\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Pipe\",\"line\":77,\"character\":1},\"arguments\":[{\"name\":\"date\",\"pure\":true}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":91,\"character\":15},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"LOCALE_ID\",\"line\":91,\"character\":22}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"}]}],\"transform\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"_ALIASES\":{\"medium\":\"yMMMdjms\",\"short\":\"yMdjm\",\"fullDate\":\"yMMMMEEEEd\",\"longDate\":\"yMMMMd\",\"mediumDate\":\"yMMMd\",\"shortDate\":\"yMd\",\"mediumTime\":\"jms\",\"shortTime\":\"jm\",\"$quoted$\":[\"medium\",\"short\",\"fullDate\",\"longDate\",\"mediumDate\",\"shortDate\",\"mediumTime\",\"shortTime\"]}}},\"DeprecatedCurrencyPipe\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Pipe\",\"line\":152,\"character\":1},\"arguments\":[{\"name\":\"currency\"}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":154,\"character\":15},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"LOCALE_ID\",\"line\":154,\"character\":22}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"}]}],\"transform\":[{\"__symbolic\":\"method\"}]}},\"DeprecatedDecimalPipe\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Pipe\",\"line\":86,\"character\":1},\"arguments\":[{\"name\":\"number\"}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":88,\"character\":15},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"LOCALE_ID\",\"line\":88,\"character\":22}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"}]}],\"transform\":[{\"__symbolic\":\"method\"}]}},\"DeprecatedPercentPipe\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Pipe\",\"line\":116,\"character\":1},\"arguments\":[{\"name\":\"percent\"}]}],\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameterDecorators\":[[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Inject\",\"line\":118,\"character\":15},\"arguments\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"LOCALE_ID\",\"line\":118,\"character\":22}]}]],\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"string\"}]}],\"transform\":[{\"__symbolic\":\"method\"}]}},\"ɵPLATFORM_BROWSER_ID\":\"browser\",\"ɵPLATFORM_SERVER_ID\":\"server\",\"ɵPLATFORM_WORKER_APP_ID\":\"browserWorkerApp\",\"ɵPLATFORM_WORKER_UI_ID\":\"browserWorkerUi\",\"isPlatformBrowser\":{\"__symbolic\":\"function\",\"parameters\":[\"platformId\"],\"value\":{\"__symbolic\":\"binop\",\"operator\":\"===\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"platformId\"},\"right\":\"browser\"}},\"isPlatformServer\":{\"__symbolic\":\"function\",\"parameters\":[\"platformId\"],\"value\":{\"__symbolic\":\"binop\",\"operator\":\"===\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"platformId\"},\"right\":\"server\"}},\"isPlatformWorkerApp\":{\"__symbolic\":\"function\",\"parameters\":[\"platformId\"],\"value\":{\"__symbolic\":\"binop\",\"operator\":\"===\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"platformId\"},\"right\":\"browserWorkerApp\"}},\"isPlatformWorkerUi\":{\"__symbolic\":\"function\",\"parameters\":[\"platformId\"],\"value\":{\"__symbolic\":\"binop\",\"operator\":\"===\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"platformId\"},\"right\":\"browserWorkerUi\"}},\"VERSION\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Version\",\"line\":16,\"character\":27},\"arguments\":[\"7.0.0\"]},\"ViewportScroller\":{\"__symbolic\":\"class\",\"members\":{\"setOffset\":[{\"__symbolic\":\"method\"}],\"getScrollPosition\":[{\"__symbolic\":\"method\"}],\"scrollToPosition\":[{\"__symbolic\":\"method\"}],\"scrollToAnchor\":[{\"__symbolic\":\"method\"}],\"setHistoryScrollRestoration\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"ngInjectableDef\":{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"defineInjectable\",\"line\":19,\"character\":27},\"arguments\":[{\"__symbolic\":\"error\",\"message\":\"Lambda not supported\",\"line\":20,\"character\":36}]}}},\"ɵNullViewportScroller\":{\"__symbolic\":\"class\",\"members\":{\"setOffset\":[{\"__symbolic\":\"method\"}],\"getScrollPosition\":[{\"__symbolic\":\"method\"}],\"scrollToPosition\":[{\"__symbolic\":\"method\"}],\"scrollToAnchor\":[{\"__symbolic\":\"method\"}],\"setHistoryScrollRestoration\":[{\"__symbolic\":\"method\"}]}},\"ɵregisterLocaleData\":{\"__symbolic\":\"reference\",\"name\":\"registerLocaleData\"}},\"origins\":{\"ɵangular_packages_common_common_a\":\"./src/i18n/localization\",\"ɵangular_packages_common_common_b\":\"./src/i18n/localization\",\"ɵangular_packages_common_common_c\":\"./src/i18n/locale_data\",\"ɵangular_packages_common_common_d\":\"./src/i18n/locale_data_api\",\"ɵangular_packages_common_common_e\":\"./src/directives/index\",\"ɵangular_packages_common_common_f\":\"./src/pipes/index\",\"ɵangular_packages_common_common_g\":\"./src/pipes/deprecated/index\",\"PlatformLocation\":\"./src/location/platform_location\",\"LOCATION_INITIALIZED\":\"./src/location/platform_location\",\"LocationChangeEvent\":\"./src/location/platform_location\",\"LocationChangeListener\":\"./src/location/platform_location\",\"LocationStrategy\":\"./src/location/location_strategy\",\"APP_BASE_HREF\":\"./src/location/location_strategy\",\"HashLocationStrategy\":\"./src/location/hash_location_strategy\",\"PathLocationStrategy\":\"./src/location/path_location_strategy\",\"PopStateEvent\":\"./src/location/location\",\"Location\":\"./src/location/location\",\"formatDate\":\"./src/i18n/format_date\",\"formatCurrency\":\"./src/i18n/format_number\",\"formatNumber\":\"./src/i18n/format_number\",\"formatPercent\":\"./src/i18n/format_number\",\"NgLocaleLocalization\":\"./src/i18n/localization\",\"NgLocalization\":\"./src/i18n/localization\",\"registerLocaleData\":\"./src/i18n/locale_data\",\"Plural\":\"./src/i18n/locale_data_api\",\"NumberFormatStyle\":\"./src/i18n/locale_data_api\",\"FormStyle\":\"./src/i18n/locale_data_api\",\"Time\":\"./src/i18n/locale_data_api\",\"TranslationWidth\":\"./src/i18n/locale_data_api\",\"FormatWidth\":\"./src/i18n/locale_data_api\",\"NumberSymbol\":\"./src/i18n/locale_data_api\",\"WeekDay\":\"./src/i18n/locale_data_api\",\"getNumberOfCurrencyDigits\":\"./src/i18n/locale_data_api\",\"getCurrencySymbol\":\"./src/i18n/locale_data_api\",\"getLocaleDayPeriods\":\"./src/i18n/locale_data_api\",\"getLocaleDayNames\":\"./src/i18n/locale_data_api\",\"getLocaleMonthNames\":\"./src/i18n/locale_data_api\",\"getLocaleId\":\"./src/i18n/locale_data_api\",\"getLocaleEraNames\":\"./src/i18n/locale_data_api\",\"getLocaleWeekEndRange\":\"./src/i18n/locale_data_api\",\"getLocaleFirstDayOfWeek\":\"./src/i18n/locale_data_api\",\"getLocaleDateFormat\":\"./src/i18n/locale_data_api\",\"getLocaleDateTimeFormat\":\"./src/i18n/locale_data_api\",\"getLocaleExtraDayPeriodRules\":\"./src/i18n/locale_data_api\",\"getLocaleExtraDayPeriods\":\"./src/i18n/locale_data_api\",\"getLocalePluralCase\":\"./src/i18n/locale_data_api\",\"getLocaleTimeFormat\":\"./src/i18n/locale_data_api\",\"getLocaleNumberSymbol\":\"./src/i18n/locale_data_api\",\"getLocaleNumberFormat\":\"./src/i18n/locale_data_api\",\"getLocaleCurrencyName\":\"./src/i18n/locale_data_api\",\"getLocaleCurrencySymbol\":\"./src/i18n/locale_data_api\",\"ɵparseCookieValue\":\"./src/cookie\",\"CommonModule\":\"./src/common_module\",\"DeprecatedI18NPipesModule\":\"./src/common_module\",\"NgClass\":\"./src/directives/ng_class\",\"NgForOf\":\"./src/directives/ng_for_of\",\"NgForOfContext\":\"./src/directives/ng_for_of\",\"NgIf\":\"./src/directives/ng_if\",\"NgIfContext\":\"./src/directives/ng_if\",\"NgPlural\":\"./src/directives/ng_plural\",\"NgPluralCase\":\"./src/directives/ng_plural\",\"NgStyle\":\"./src/directives/ng_style\",\"NgSwitch\":\"./src/directives/ng_switch\",\"NgSwitchCase\":\"./src/directives/ng_switch\",\"NgSwitchDefault\":\"./src/directives/ng_switch\",\"NgTemplateOutlet\":\"./src/directives/ng_template_outlet\",\"NgComponentOutlet\":\"./src/directives/ng_component_outlet\",\"DOCUMENT\":\"./src/dom_tokens\",\"AsyncPipe\":\"./src/pipes/async_pipe\",\"DatePipe\":\"./src/pipes/date_pipe\",\"I18nPluralPipe\":\"./src/pipes/i18n_plural_pipe\",\"I18nSelectPipe\":\"./src/pipes/i18n_select_pipe\",\"JsonPipe\":\"./src/pipes/json_pipe\",\"LowerCasePipe\":\"./src/pipes/case_conversion_pipes\",\"CurrencyPipe\":\"./src/pipes/number_pipe\",\"DecimalPipe\":\"./src/pipes/number_pipe\",\"PercentPipe\":\"./src/pipes/number_pipe\",\"SlicePipe\":\"./src/pipes/slice_pipe\",\"UpperCasePipe\":\"./src/pipes/case_conversion_pipes\",\"TitleCasePipe\":\"./src/pipes/case_conversion_pipes\",\"KeyValuePipe\":\"./src/pipes/keyvalue_pipe\",\"KeyValue\":\"./src/pipes/keyvalue_pipe\",\"DeprecatedDatePipe\":\"./src/pipes/deprecated/date_pipe\",\"DeprecatedCurrencyPipe\":\"./src/pipes/deprecated/number_pipe\",\"DeprecatedDecimalPipe\":\"./src/pipes/deprecated/number_pipe\",\"DeprecatedPercentPipe\":\"./src/pipes/deprecated/number_pipe\",\"ɵPLATFORM_BROWSER_ID\":\"./src/platform_id\",\"ɵPLATFORM_SERVER_ID\":\"./src/platform_id\",\"ɵPLATFORM_WORKER_APP_ID\":\"./src/platform_id\",\"ɵPLATFORM_WORKER_UI_ID\":\"./src/platform_id\",\"isPlatformBrowser\":\"./src/platform_id\",\"isPlatformServer\":\"./src/platform_id\",\"isPlatformWorkerApp\":\"./src/platform_id\",\"isPlatformWorkerUi\":\"./src/platform_id\",\"VERSION\":\"./src/version\",\"ViewportScroller\":\"./src/viewport_scroller\",\"ɵNullViewportScroller\":\"./src/viewport_scroller\",\"ɵregisterLocaleData\":\"./src/i18n/locale_data\"},\"importAs\":\"@angular/common\"}"
  },
  {
    "path": "node_modules/@angular/router/testing/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/src/private_export.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { BrowserAnimationBuilder as ɵBrowserAnimationBuilder, BrowserAnimationFactory as ɵBrowserAnimationFactory } from './animation_builder';\nexport { AnimationRenderer as ɵAnimationRenderer, AnimationRendererFactory as ɵAnimationRendererFactory } from './animation_renderer';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/dom_tokens.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n *\n * @deprecated import from `@angular/common` instead.\n */\nexport declare const DOCUMENT: InjectionToken<Document>;\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/testing/src/platform_core_dynamic_testing.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PlatformRef } from '@angular/core';\n/**\n * Platform for dynamic tests\n *\n * @experimental\n */\nexport declare const platformCoreDynamicTesting: (extraProviders?: any[]) => PlatformRef;\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/version.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\nimport { Version } from '@angular/core';\nexport declare const VERSION: Version;\n"
  },
  {
    "path": "node_modules/@angular/common/http/testing.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":3,\"metadata\":{},\"exports\":[{\"from\":\"./testing/testing\"}],\"flatModuleIndexRedirect\":true,\"importAs\":\"@angular/common/http/testing\"}\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/provider.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { BindingDef, DepDef, DepFlags, NodeDef, NodeFlags, OutputDef, QueryValueType, ViewData } from './types';\nexport declare function directiveDef(checkIndex: number, flags: NodeFlags, matchedQueries: null | [string | number, QueryValueType][], childCount: number, ctor: any, deps: ([DepFlags, any] | any)[], props?: null | {\n    [name: string]: [number, string];\n}, outputs?: null | {\n    [name: string]: string;\n}): NodeDef;\nexport declare function pipeDef(flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef;\nexport declare function providerDef(flags: NodeFlags, matchedQueries: null | [string | number, QueryValueType][], token: any, value: any, deps: ([DepFlags, any] | any)[]): NodeDef;\nexport declare function _def(checkIndex: number, flags: NodeFlags, matchedQueriesDsl: [string | number, QueryValueType][] | null, childCount: number, token: any, value: any, deps: ([DepFlags, any] | any)[], bindings?: BindingDef[], outputs?: OutputDef[]): NodeDef;\nexport declare function createProviderInstance(view: ViewData, def: NodeDef): any;\nexport declare function createPipeInstance(view: ViewData, def: NodeDef): any;\nexport declare function createDirectiveInstance(view: ViewData, def: NodeDef): any;\nexport declare function checkAndUpdateDirectiveInline(view: ViewData, def: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any, v9: any): boolean;\nexport declare function checkAndUpdateDirectiveDynamic(view: ViewData, def: NodeDef, values: any[]): boolean;\nexport declare const NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR: {};\nexport declare function resolveDep(view: ViewData, elDef: NodeDef, allowPrivateServices: boolean, depDef: DepDef, notFoundValue?: any): any;\nexport declare function callLifecycleHooksChildrenFirst(view: ViewData, lifecycles: NodeFlags): void;\n"
  },
  {
    "path": "node_modules/@angular/compiler/testing/testing.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"MockResourceLoader\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"ResourceLoader\",\"line\":14,\"character\":40},\"members\":{\"get\":[{\"__symbolic\":\"method\"}],\"hasPendingRequests\":[{\"__symbolic\":\"method\"}],\"expect\":[{\"__symbolic\":\"method\"}],\"when\":[{\"__symbolic\":\"method\"}],\"flush\":[{\"__symbolic\":\"method\"}],\"verifyNoOutstandingExpectations\":[{\"__symbolic\":\"method\"}],\"_processRequest\":[{\"__symbolic\":\"method\"}]}},\"MockSchemaRegistry\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":12,\"character\":33,\"module\":\"./src/schema_registry_mock\"},{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":13,\"character\":30,\"module\":\"./src/schema_registry_mock\"},{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":14,\"character\":31,\"module\":\"./src/schema_registry_mock\"},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"string\"}]},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"string\"}]}]}],\"hasProperty\":[{\"__symbolic\":\"method\"}],\"hasElement\":[{\"__symbolic\":\"method\"}],\"allKnownElementNames\":[{\"__symbolic\":\"method\"}],\"securityContext\":[{\"__symbolic\":\"method\"}],\"getMappedPropName\":[{\"__symbolic\":\"method\"}],\"getDefaultComponentElementName\":[{\"__symbolic\":\"method\"}],\"validateProperty\":[{\"__symbolic\":\"method\"}],\"validateAttribute\":[{\"__symbolic\":\"method\"}],\"normalizeAnimationStyleProperty\":[{\"__symbolic\":\"method\"}],\"normalizeAnimationStyleValue\":[{\"__symbolic\":\"method\"}]}},\"MockDirectiveResolver\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"DirectiveResolver\",\"line\":13,\"character\":43},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"CompileReflector\",\"line\":16,\"character\":25}]}],\"resolve\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}],\"setDirective\":[{\"__symbolic\":\"method\"}]}},\"MockNgModuleResolver\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"NgModuleResolver\",\"line\":10,\"character\":42},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"CompileReflector\",\"line\":13,\"character\":25}]}],\"setNgModule\":[{\"__symbolic\":\"method\"}],\"resolve\":[{\"__symbolic\":\"method\"}]}},\"MockPipeResolver\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"PipeResolver\",\"line\":10,\"character\":38},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/compiler\",\"name\":\"CompileReflector\",\"line\":13,\"character\":24}]}],\"setPipe\":[{\"__symbolic\":\"method\"}],\"resolve\":[{\"__symbolic\":\"method\"}]}}},\"origins\":{\"MockResourceLoader\":\"./src/resource_loader_mock\",\"MockSchemaRegistry\":\"./src/schema_registry_mock\",\"MockDirectiveResolver\":\"./src/directive_resolver_mock\",\"MockNgModuleResolver\":\"./src/ng_module_resolver_mock\",\"MockPipeResolver\":\"./src/pipe_resolver_mock\"},\"importAs\":\"@angular/compiler/testing\"}"
  },
  {
    "path": "node_modules/@angular/forms/src/form_providers.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ModuleWithProviders } from '@angular/core';\n/**\n * Exports the required providers and directives for template-driven forms,\n * making them available for import by NgModules that import this module.\n * @see [Forms](guide/forms)\n *\n * @see [Forms Guide](/guide/forms)\n */\nexport declare class FormsModule {\n    /**\n     * @description\n     * Provides options for configuring the template-driven forms module.\n     *\n     * @param opts An object of configuration options\n     * * `warnOnDeprecatedNgFormSelector` Configures when to emit a warning when the deprecated\n     * `ngForm` selector is used.\n     */\n    static withConfig(opts: {\n        /** @deprecated as of v6 */ warnOnDeprecatedNgFormSelector?: 'never' | 'once' | 'always';\n    }): ModuleWithProviders<FormsModule>;\n}\n/**\n * Exports the required infrastructure and directives for reactive forms,\n * making them available for import by NgModules that import this module.\n * @see [Forms](guide/reactive-forms)\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n */\nexport declare class ReactiveFormsModule {\n    /**\n     * @description\n     * Provides options for configuring the reactive forms module.\n     *\n     * @param opts An object of configuration options\n     * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`\n     * binding is used with reactive form directives.\n     */\n    static withConfig(opts: {\n        /** @deprecated as of v6 */ warnOnNgModelWithFormControl: 'never' | 'once' | 'always';\n    }): ModuleWithProviders<ReactiveFormsModule>;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/events/key_events.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgZone } from '@angular/core';\nimport { EventManagerPlugin } from './event_manager';\n/**\n * @experimental\n * A browser plug-in that provides support for handling of key events in Angular.\n */\nexport declare class KeyEventsPlugin extends EventManagerPlugin {\n    /**\n     * Initializes an instance of the browser plug-in.\n     * @param doc The document in which key events will be detected.\n     */\n    constructor(doc: any);\n    /**\n      * Reports whether a named key event is supported.\n      * @param eventName The event name to query.\n      * @return True if the named key event is supported.\n     */\n    supports(eventName: string): boolean;\n    /**\n     * Registers a handler for a specific element and key event.\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the key event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns The key event that was registered.\n    */\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    static parseEventName(eventName: string): {\n        [key: string]: string;\n    } | null;\n    static getEventFullKey(event: KeyboardEvent): string;\n    /**\n     * Configures a handler callback for a key event.\n     * @param fullKey The event name that combines all simultaneous keystrokes.\n     * @param handler The function that responds to the key event.\n     * @param zone The zone in which the event occurred.\n     * @returns A callback function.\n     */\n    static eventCallback(fullKey: any, handler: Function, zone: NgZone): Function;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/debug/by.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DebugElement, Predicate, Type } from '@angular/core';\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @experimental All debugging apis are currently experimental.\n */\nexport declare class By {\n    /**\n     * Match all elements.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n     */\n    static all(): Predicate<DebugElement>;\n    /**\n     * Match elements by the given CSS selector.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n     */\n    static css(selector: string): Predicate<DebugElement>;\n    /**\n     * Match elements that have the given directive present.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n     */\n    static directive(type: Type<any>): Predicate<DebugElement>;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/src/platform_core_dynamic.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PlatformRef, StaticProvider } from '@angular/core';\n/**\n * A platform that included corePlatform and the compiler.\n *\n * @experimental\n */\nexport declare const platformCoreDynamic: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;\n"
  },
  {
    "path": "node_modules/@angular/router/src/directives/router_outlet.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, EventEmitter, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\nimport { Data } from '../config';\nimport { ChildrenOutletContexts } from '../router_outlet_context';\nimport { ActivatedRoute } from '../router_state';\n/**\n * @description\n *\n * Acts as a placeholder that Angular dynamically fills based on the current router state.\n *\n * ```\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n *\n * A router outlet will emit an activate event any time a new component is being instantiated,\n * and a deactivate event when it is being destroyed.\n *\n * ```\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'></router-outlet>\n * ```\n * @ngModule RouterModule\n *\n *\n */\nexport declare class RouterOutlet implements OnDestroy, OnInit {\n    private parentContexts;\n    private location;\n    private resolver;\n    private changeDetector;\n    private activated;\n    private _activatedRoute;\n    private name;\n    activateEvents: EventEmitter<any>;\n    deactivateEvents: EventEmitter<any>;\n    constructor(parentContexts: ChildrenOutletContexts, location: ViewContainerRef, resolver: ComponentFactoryResolver, name: string, changeDetector: ChangeDetectorRef);\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    readonly isActivated: boolean;\n    readonly component: Object;\n    readonly activatedRoute: ActivatedRoute;\n    readonly activatedRouteData: Data;\n    /**\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\n     */\n    detach(): ComponentRef<any>;\n    /**\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n     */\n    attach(ref: ComponentRef<any>, activatedRoute: ActivatedRoute): void;\n    deactivate(): void;\n    activateWith(activatedRoute: ActivatedRoute, resolver: ComponentFactoryResolver | null): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/fields.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare const NG_COMPONENT_DEF: string;\nexport declare const NG_DIRECTIVE_DEF: string;\nexport declare const NG_INJECTABLE_DEF: string;\nexport declare const NG_INJECTOR_DEF: string;\nexport declare const NG_PIPE_DEF: string;\nexport declare const NG_MODULE_DEF: string;\nexport declare const NG_BASE_DEF: string;\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\nexport declare const NG_ELEMENT_ID: string;\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/dom_renderer.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Renderer2, RendererFactory2, RendererType2 } from '@angular/core';\nimport { EventManager } from './events/event_manager';\nimport { DomSharedStylesHost } from './shared_styles_host';\nexport declare const NAMESPACE_URIS: {\n    [ns: string]: string;\n};\nexport declare const COMPONENT_VARIABLE = \"%COMP%\";\nexport declare const HOST_ATTR: string;\nexport declare const CONTENT_ATTR: string;\nexport declare function shimContentAttribute(componentShortId: string): string;\nexport declare function shimHostAttribute(componentShortId: string): string;\nexport declare function flattenStyles(compId: string, styles: Array<any | any[]>, target: string[]): string[];\nexport declare class DomRendererFactory2 implements RendererFactory2 {\n    private eventManager;\n    private sharedStylesHost;\n    private rendererByCompId;\n    private defaultRenderer;\n    constructor(eventManager: EventManager, sharedStylesHost: DomSharedStylesHost);\n    createRenderer(element: any, type: RendererType2 | null): Renderer2;\n    begin(): void;\n    end(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/src/resource_loader/resource_loader_impl.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ResourceLoader } from '@angular/compiler';\nexport declare class ResourceLoaderImpl extends ResourceLoader {\n    get(url: string): Promise<string>;\n}\n"
  },
  {
    "path": "node_modules/@angular/forms/src/validators.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AsyncValidatorFn, ValidationErrors, Validator, ValidatorFn } from './directives/validators';\nimport { AbstractControl } from './model';\n/**\n * @description\n * An `InjectionToken` for registering additional synchronous validators used with `AbstractControl`s.\n *\n * @see `NG_ASYNC_VALIDATORS`\n *\n * @usageNotes\n *\n * ### Providing a custom validator\n *\n * The following example registers a custom validator directive. Adding the validator to the\n * existing collection of validators requires the `multi: true` option.\n *\n * ```typescript\n * @Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return { 'custom': true };\n *   }\n * }\n * ```\n *\n */\nexport declare const NG_VALIDATORS: InjectionToken<(Function | Validator)[]>;\n/**\n * @description\n * An `InjectionToken` for registering additional asynchronous validators used with `AbstractControl`s.\n *\n * @see `NG_VALIDATORS`\n *\n */\nexport declare const NG_ASYNC_VALIDATORS: InjectionToken<(Function | Validator)[]>;\n/**\n * @description\n * Provides a set of built-in validators that can be used by form controls.\n *\n * A validator is a function that processes a `FormControl` or collection of\n * controls and returns an error map or null. A null map means that validation has passed.\n *\n * @see [Form Validation](/guide/form-validation)\n *\n */\nexport declare class Validators {\n    /**\n     * @description\n     * Validator that requires the control's value to be greater than or equal to the provided number.\n     * The validator exists only as a function and not as a directive.\n     *\n     * @usageNotes\n     *\n     * ### Validate against a minimum of 3\n     *\n     * ```typescript\n     * const control = new FormControl(2, Validators.min(3));\n     *\n     * console.log(control.errors); // {min: {min: 3, actual: 2}}\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `min` property if the validation check fails, otherwise `null`.\n     *\n     */\n    static min(min: number): ValidatorFn;\n    /**\n     * @description\n     * Validator that requires the control's value to be less than or equal to the provided number.\n     * The validator exists only as a function and not as a directive.\n     *\n     * @usageNotes\n     *\n     * ### Validate against a maximum of 15\n     *\n     * ```typescript\n     * const control = new FormControl(16, Validators.max(15));\n     *\n     * console.log(control.errors); // {max: {max: 15, actual: 16}}\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `max` property if the validation check fails, otherwise `null`.\n     *\n     */\n    static max(max: number): ValidatorFn;\n    /**\n     * @description\n     * Validator that requires the control have a non-empty value.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field is non-empty\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.required);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @returns An error map with the `required` property\n     * if the validation check fails, otherwise `null`.\n     *\n     */\n    static required(control: AbstractControl): ValidationErrors | null;\n    /**\n     * @description\n     * Validator that requires the control's value be true. This validator is commonly\n     * used for required checkboxes.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field value is true\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.requiredTrue);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @returns An error map that contains the `required` property\n     * set to `true` if the validation check fails, otherwise `null`.\n     */\n    static requiredTrue(control: AbstractControl): ValidationErrors | null;\n    /**\n     * @description\n     * Validator that requires the control's value pass an email validation test.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field matches a valid email pattern\n     *\n     * ```typescript\n     * const control = new FormControl('bad@', Validators.email);\n     *\n     * console.log(control.errors); // {email: true}\n     * ```\n     *\n     * @returns An error map with the `email` property\n     * if the validation check fails, otherwise `null`.\n     *\n     */\n    static email(control: AbstractControl): ValidationErrors | null;\n    /**\n     * @description\n     * Validator that requires the length of the control's value to be greater than or equal\n     * to the provided minimum length. This validator is also provided by default if you use the\n     * the HTML5 `minlength` attribute.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field has a minimum of 3 characters\n     *\n     * ```typescript\n     * const control = new FormControl('ng', Validators.minLength(3));\n     *\n     * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\n     * ```\n     *\n     * ```html\n     * <input minlength=\"5\">\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `minlength` if the validation check fails, otherwise `null`.\n     */\n    static minLength(minLength: number): ValidatorFn;\n    /**\n     * @description\n     * Validator that requires the length of the control's value to be less than or equal\n     * to the provided maximum length. This validator is also provided by default if you use the\n     * the HTML5 `maxlength` attribute.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field has maximum of 5 characters\n     *\n     * ```typescript\n     * const control = new FormControl('Angular', Validators.maxLength(5));\n     *\n     * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\n     * ```\n     *\n     * ```html\n     * <input maxlength=\"5\">\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `maxlength` property if the validation check fails, otherwise `null`.\n     */\n    static maxLength(maxLength: number): ValidatorFn;\n    /**\n     * @description\n     * Validator that requires the control's value to match a regex pattern. This validator is also\n     * provided\n     * by default if you use the HTML5 `pattern` attribute.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field only contains letters or spaces\n     *\n     * ```typescript\n     * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));\n     *\n     * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}\n     * ```\n     *\n     * ```html\n     * <input pattern=\"[a-zA-Z ]*\">\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `pattern` property if the validation check fails, otherwise `null`.\n     */\n    static pattern(pattern: string | RegExp): ValidatorFn;\n    /**\n     * @description\n     * Validator that performs no operation.\n     */\n    static nullValidator(control: AbstractControl): ValidationErrors | null;\n    /**\n     * @description\n     * Compose multiple validators into a single function that returns the union\n     * of the individual error maps for the provided control.\n     *\n     * @returns A validator function that returns an error map with the\n     * merged error maps of the validators if the validation check fails, otherwise `null`.\n     */\n    static compose(validators: null): null;\n    static compose(validators: (ValidatorFn | null | undefined)[]): ValidatorFn | null;\n    /**\n     * @description\n     * Compose multiple async validators into a single function that returns the union\n     * of the individual error objects for the provided control.\n     *\n     * @returns A validator function that returns an error map with the\n     * merged error objects of the async validators if the validation check fails, otherwise `null`.\n    */\n    static composeAsync(validators: (AsyncValidatorFn | null)[]): AsyncValidatorFn | null;\n}\nexport declare function toObservable(r: any): Observable<any>;\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/events/hammer_gestures.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, ɵConsole as Console } from '@angular/core';\nimport { EventManagerPlugin } from './event_manager';\n/**\n * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * @experimental\n */\nexport declare const HAMMER_GESTURE_CONFIG: InjectionToken<HammerGestureConfig>;\n/** Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded. */\nexport declare type HammerLoader = () => Promise<void>;\n/** Injection token used to provide a {@link HammerLoader} to Angular. */\nexport declare const HAMMER_LOADER: InjectionToken<HammerLoader>;\nexport interface HammerInstance {\n    on(eventName: string, callback?: Function): void;\n    off(eventName: string, callback?: Function): void;\n    destroy?(): void;\n}\n/**\n * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n * for gesture recognition. Configures specific event recognition.\n * @experimental\n */\nexport declare class HammerGestureConfig {\n    /**\n     * A set of supported event names for gestures to be used in Angular.\n     * Angular supports all built-in recognizers, as listed in\n     * [HammerJS documentation](http://hammerjs.github.io/).\n     */\n    events: string[];\n    /**\n    * Maps gesture event names to a set of configuration options\n    * that specify overrides to the default values for specific properties.\n    *\n    * The key is a supported event name to be configured,\n    * and the options object contains a set of properties, with override values\n    * to be applied to the named recognizer event.\n    * For example, to disable recognition of the rotate event, specify\n    *  `{\"rotate\": {\"enable\": false}}`.\n    *\n    * Properties that are not present take the HammerJS default values.\n    * For information about which properties are supported for which events,\n    * and their allowed and default values, see\n    * [HammerJS documentation](http://hammerjs.github.io/).\n    *\n    */\n    overrides: {\n        [key: string]: Object;\n    };\n    /**\n     * Properties whose default values can be overridden for a given event.\n     * Different sets of properties apply to different events.\n     * For information about which properties are supported for which events,\n     * and their allowed and default values, see\n     * [HammerJS documentation](http://hammerjs.github.io/).\n     */\n    options?: {\n        cssProps?: any;\n        domEvents?: boolean;\n        enable?: boolean | ((manager: any) => boolean);\n        preset?: any[];\n        touchAction?: string;\n        recognizers?: any[];\n        inputClass?: any;\n        inputTarget?: EventTarget;\n    };\n    /**\n     * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n     * and attaches it to a given HTML element.\n     * @param element The element that will recognize gestures.\n     * @returns A HammerJS event-manager object.\n     */\n    buildHammer(element: HTMLElement): HammerInstance;\n}\nexport declare class HammerGesturesPlugin extends EventManagerPlugin {\n    private _config;\n    private console;\n    private loader?;\n    constructor(doc: any, _config: HammerGestureConfig, console: Console, loader?: HammerLoader | null | undefined);\n    supports(eventName: string): boolean;\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    isCustomEvent(eventName: string): boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/router_preloader.d.ts",
    "content": "/**\n*@license\n*Copyright Google Inc. All Rights Reserved.\n*\n*Use of this source code is governed by an MIT-style license that can be\n*found in the LICENSE file at https://angular.io/license\n*/\nimport { Compiler, Injector, NgModuleFactoryLoader, OnDestroy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Route } from './config';\nimport { Router } from './router';\n/**\n * @description\n *\n * Provides a preloading strategy.\n *\n * @experimental\n */\nexport declare abstract class PreloadingStrategy {\n    abstract preload(route: Route, fn: () => Observable<any>): Observable<any>;\n}\n/**\n * @description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * @experimental\n */\nexport declare class PreloadAllModules implements PreloadingStrategy {\n    preload(route: Route, fn: () => Observable<any>): Observable<any>;\n}\n/**\n * @description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * @experimental\n */\nexport declare class NoPreloading implements PreloadingStrategy {\n    preload(route: Route, fn: () => Observable<any>): Observable<any>;\n}\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n *\n */\nexport declare class RouterPreloader implements OnDestroy {\n    private router;\n    private injector;\n    private preloadingStrategy;\n    private loader;\n    private subscription;\n    constructor(router: Router, moduleLoader: NgModuleFactoryLoader, compiler: Compiler, injector: Injector, preloadingStrategy: PreloadingStrategy);\n    setUpPreloading(): void;\n    preload(): Observable<any>;\n    ngOnDestroy(): void;\n    private processRoutes;\n    private preloadConfig;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/compiler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser-dynamic/src/platform_providers.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StaticProvider } from '@angular/core';\nexport declare const INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: StaticProvider[];\n"
  },
  {
    "path": "node_modules/@angular/core/src/profile/profile.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { WtfScopeFn } from './wtf_impl';\nexport { WtfScopeFn } from './wtf_impl';\n/**\n * True if WTF is enabled.\n */\nexport declare const wtfEnabled: boolean;\n/**\n * Create trace scope.\n *\n * Scopes must be strictly nested and are analogous to stack frames, but\n * do not have to follow the stack frames. Instead it is recommended that they follow logical\n * nesting. You may want to use\n * [Event\n * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n * as they are defined in WTF.\n *\n * Used to mark scope entry. The return value is used to leave the scope.\n *\n *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n *\n *     someMethod() {\n *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n *        // DO SOME WORK HERE\n *        return wtfLeave(s, 123); // Return value 123\n *     }\n *\n * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n * negatively impact the performance of your application. For this reason we recommend that\n * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n * exception, will produce incorrect trace, but presence of exception signifies logic error which\n * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n * an exception is expected during normal execution while profiling.\n *\n * @experimental\n */\nexport declare const wtfCreateScope: (signature: string, flags?: any) => WtfScopeFn;\n/**\n * Used to mark end of Scope.\n *\n * - `scope` to end.\n * - `returnValue` (optional) to be passed to the WTF.\n *\n * Returns the `returnValue for easy chaining.\n * @experimental\n */\nexport declare const wtfLeave: <T>(scope: any, returnValue?: T) => T;\n/**\n * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n * enabled.\n *\n *     someMethod() {\n *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n *        var future = new Future.delay(5).then((_) {\n *          wtfEndTimeRange(s);\n *        });\n *     }\n * @experimental\n */\nexport declare const wtfStartTimeRange: (rangeType: string, action: string) => any;\n/**\n * Ends a async time range operation.\n * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n * enabled.\n * @experimental\n */\nexport declare const wtfEndTimeRange: (range: any) => void;\n"
  },
  {
    "path": "node_modules/@angular/common/testing/testing.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\n"
  },
  {
    "path": "node_modules/@angular/router/src/private_export.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { EmptyOutletComponent as ɵEmptyOutletComponent } from './components/empty_outlet';\nexport { ROUTER_PROVIDERS as ɵROUTER_PROVIDERS } from './router_module';\nexport { flatten as ɵflatten } from './utils/collection';\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/instructions.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { QueryList } from '../linker';\nimport { Sanitizer } from '../sanitization/security';\nimport { StyleSanitizeFn } from '../sanitization/style_sanitizer';\nimport { LContainer } from './interfaces/container';\nimport { ComponentDef, ComponentQuery, ComponentTemplate, DirectiveDef, DirectiveDefListOrFactory, InitialStylingFlags, PipeDefListOrFactory, RenderFlags } from './interfaces/definition';\nimport { LocalRefExtractor, TAttributes, TContainerNode, TElementContainerNode, TElementNode, TNode, TNodeType, TProjectionNode, TViewNode } from './interfaces/node';\nimport { CssSelectorList } from './interfaces/projection';\nimport { LQueries } from './interfaces/query';\nimport { RComment, RElement, RNode, RText, Renderer3, RendererFactory3 } from './interfaces/renderer';\nimport { CurrentMatchesList, LViewData, LViewFlags, OpaqueViewState, RootContext, TView } from './interfaces/view';\n/**\n * Function used to sanitize the value before writing it into the renderer.\n */\nexport declare type SanitizerFn = (value: any) => string;\n/**\n * Token set in currentMatches while dependencies are being resolved.\n *\n * If we visit a directive that has a value set to CIRCULAR, we know we've\n * already seen it, and thus have a circular dependency.\n */\nexport declare const CIRCULAR = \"__CIRCULAR__\";\nexport declare function getRenderer(): Renderer3;\nexport declare function getRendererFactory(): RendererFactory3;\nexport declare function getCurrentSanitizer(): Sanitizer | null;\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n */\nexport declare function getCurrentView(): OpaqueViewState;\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n */\nexport declare function restoreView(viewToRestore: OpaqueViewState): void;\nexport declare function getPreviousOrParentTNode(): TNode;\nexport declare function setEnvironment(tNode: TNode, view: LViewData): void;\n/**\n * Query instructions can ask for \"current queries\" in 2 different cases:\n * - when creating view queries (at the root of a component view, before any node is created - in\n * this case currentQueries points to view queries)\n * - when creating content queries (i.e. this previousOrParentTNode points to a node on which we\n * create content queries).\n */\nexport declare function getOrCreateCurrentQueries(QueryType: {\n    new (parent: null, shallow: null, deep: null): LQueries;\n}): LQueries;\nexport declare function getCreationMode(): boolean;\n/**\n * Internal function that returns the current LViewData instance.\n *\n * The getCurrentView() instruction should be used for anything public.\n */\nexport declare function _getViewData(): LViewData;\nexport declare function getBindingRoot(): number;\n/**\n * Swap the current state with a new state.\n *\n * For performance reasons we store the state in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the state for later, and when the view is\n * exited the state has to be restored\n *\n * @param newView New state to become active\n * @param host Element to which the View is a child of\n * @returns the previous state;\n */\nexport declare function enterView(newView: LViewData, hostTNode: TElementNode | TViewNode | null): LViewData;\n/**\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n * the direction of traversal (up or down the view tree) a bit clearer.\n *\n * @param newView New state to become active\n * @param creationOnly An optional boolean to indicate that the view was processed in creation mode\n * only, i.e. the first update will be done later. Only possible for dynamically created views.\n */\nexport declare function leaveView(newView: LViewData, creationOnly?: boolean): void;\n/** Sets the host bindings for the current view. */\nexport declare function setHostBindings(): void;\nexport declare function executeInitAndContentHooks(): void;\nexport declare function createLViewData<T>(renderer: Renderer3, tView: TView, context: T | null, flags: LViewFlags, sanitizer?: Sanitizer | null): LViewData;\n/**\n * Create and stores the TNode, and hooks it up to the tree.\n *\n * @param index The index at which the TNode should be saved (null if view, since they are not\n * saved).\n * @param type The type of TNode to create\n * @param native The native element for this node, if applicable\n * @param name The tag name of the associated native element, if applicable\n * @param attrs Any attrs for the native element, if applicable\n */\nexport declare function createNodeAtIndex(index: number, type: TNodeType.Element, native: RElement | RText | null, name: string | null, attrs: TAttributes | null): TElementNode;\nexport declare function createNodeAtIndex(index: number, type: TNodeType.Container, native: RComment, name: string | null, attrs: TAttributes | null): TContainerNode;\nexport declare function createNodeAtIndex(index: number, type: TNodeType.Projection, native: null, name: null, attrs: TAttributes | null): TProjectionNode;\nexport declare function createNodeAtIndex(index: number, type: TNodeType.ElementContainer, native: RComment, name: null, attrs: TAttributes | null): TElementContainerNode;\nexport declare function createViewNode(index: number, view: LViewData): TViewNode;\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n * template passes.\n */\nexport declare function adjustBlueprintForNewNode(view: LViewData): void;\n/**\n * Resets the application state.\n */\nexport declare function resetComponentState(): void;\n/**\n *\n * @param hostNode Existing node to render into.\n * @param templateFn Template function with the instructions.\n * @param consts The number of nodes, local refs, and pipes in this template\n * @param context to pass into the template.\n * @param providedRendererFactory renderer factory to use\n * @param host The host element node to use\n * @param directives Directive defs that should be used for matching\n * @param pipes Pipe defs that should be used for matching\n */\nexport declare function renderTemplate<T>(hostNode: RElement, templateFn: ComponentTemplate<T>, consts: number, vars: number, context: T, providedRendererFactory: RendererFactory3, hostView: LViewData | null, directives?: DirectiveDefListOrFactory | null, pipes?: PipeDefListOrFactory | null, sanitizer?: Sanitizer | null): LViewData;\n/**\n * Used for creating the LViewNode of a dynamic embedded view,\n * either through ViewContainerRef.createEmbeddedView() or TemplateRef.createEmbeddedView().\n * Such lViewNode will then be renderer with renderEmbeddedTemplate() (see below).\n */\nexport declare function createEmbeddedViewAndNode<T>(tView: TView, context: T, declarationView: LViewData, renderer: Renderer3, queries: LQueries | null, injectorIndex: number): LViewData;\n/**\n * Used for rendering embedded views (e.g. dynamically created views)\n *\n * Dynamically created views must store/retrieve their TViews differently from component views\n * because their template functions are nested in the template functions of their hosts, creating\n * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor inside\n * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\n * can't store TViews in the template function itself (as we do for comps). Instead, we store the\n * TView for dynamically created views on their host TNode, which only has one instance.\n */\nexport declare function renderEmbeddedTemplate<T>(viewToRender: LViewData, tView: TView, context: T, rf: RenderFlags): void;\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @param level The relative level of the view from which to grab context compared to contextVewData\n * @returns context\n */\nexport declare function nextContext<T = any>(level?: number): T;\nexport declare function renderComponentOrTemplate<T>(hostView: LViewData, componentOrContext: T, templateFn?: ComponentTemplate<T>): void;\nexport declare function namespaceSVG(): void;\nexport declare function namespaceMathML(): void;\nexport declare function namespaceHTML(): void;\n/**\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\n *\n * @param index Index of the element in the data array\n * @param name Name of the DOM Node\n * @param attrs Statically bound set of attributes to be written into the DOM element on creation.\n * @param localRefs A set of local reference bindings on the element.\n */\nexport declare function element(index: number, name: string, attrs?: TAttributes | null, localRefs?: string[] | null): void;\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param index Index of the element in the LViewData array\n * @param attrs Set of attributes to be used when matching directives.\n * @param localRefs A set of local reference bindings on the element.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n */\nexport declare function elementContainerStart(index: number, attrs?: TAttributes | null, localRefs?: string[] | null): void;\n/** Mark the end of the <ng-container>. */\nexport declare function elementContainerEnd(): void;\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param index Index of the element in the LViewData array\n * @param name Name of the DOM Node\n * @param attrs Statically bound set of attributes to be written into the DOM element on creation.\n * @param localRefs A set of local reference bindings on the element.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n */\nexport declare function elementStart(index: number, name: string, attrs?: TAttributes | null, localRefs?: string[] | null): void;\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param name the tag name\n * @param overriddenRenderer Optional A renderer to override the default one\n * @returns the element created\n */\nexport declare function elementCreate(name: string, overriddenRenderer?: Renderer3): RElement;\n/**\n * On the first template pass, we need to reserve space for host binding values\n * after directives are matched (so all directives are saved, then bindings).\n * Because we are updating the blueprint, we only need to do this once.\n */\nexport declare function prefillHostVars(totalHostVars: number): void;\nexport declare function resolveDirective(def: DirectiveDef<any>, valueIndex: number, matches: CurrentMatchesList): any;\n/** Stores index of directive and host element so it will be queued for binding refresh during CD.\n */\nexport declare function queueHostBindingForCheck(dirIndex: number, def: DirectiveDef<any> | ComponentDef<any>): void;\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param templateFn The template from which to get static data\n * @param consts The number of nodes, local refs, and pipes in this view\n * @param vars The number of bindings and pure function bindings in this view\n * @param directives Directive defs that should be saved on TView\n * @param pipes Pipe defs that should be saved on TView\n * @returns TView\n */\nexport declare function getOrCreateTView(templateFn: ComponentTemplate<any>, consts: number, vars: number, directives: DirectiveDefListOrFactory | null, pipes: PipeDefListOrFactory | null, viewQuery: ComponentQuery<any> | null): TView;\n/**\n * Creates a TView instance\n *\n * @param viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n * @param templateFn Template function\n * @param consts The number of nodes, local refs, and pipes in this template\n * @param directives Registry of directives for this view\n * @param pipes Registry of pipes for this view\n */\nexport declare function createTView(viewIndex: number, templateFn: ComponentTemplate<any> | null, consts: number, vars: number, directives: DirectiveDefListOrFactory | null, pipes: PipeDefListOrFactory | null, viewQuery: ComponentQuery<any> | null): TView;\nexport declare function createError(text: string, token: any): Error;\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param elementOrSelector Render element or CSS selector to locate the element.\n */\nexport declare function locateHostElement(factory: RendererFactory3, elementOrSelector: RElement | string): RElement | null;\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener.\n */\nexport declare function listener(eventName: string, listenerFn: (e?: any) => any, useCapture?: boolean): void;\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n */\nexport declare function storeCleanupWithContext(view: LViewData | null, context: any, cleanupFn: Function): void;\n/**\n * Saves the cleanup function itself in LView.cleanupInstances.\n *\n * This is necessary for functions that are wrapped with their contexts, like in renderer2\n * listeners.\n *\n * On the first template pass, the index of the cleanup function is saved in TView.\n */\nexport declare function storeCleanupFn(view: LViewData, cleanupFn: Function): void;\n/** Mark the end of the element. */\nexport declare function elementEnd(): void;\n/**\n * Updates the value of removes an attribute on an Element.\n *\n * @param number index The index of the element in the data array\n * @param name name The name of the attribute.\n * @param value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param sanitizer An optional function used to sanitize the value.\n */\nexport declare function elementAttribute(index: number, name: string, value: any, sanitizer?: SanitizerFn): void;\n/**\n * Update a property on an Element.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new @Inputs don't have to be re-compiled.\n *\n * @param index The index of the element to update in the data array\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n */\nexport declare function elementProperty<T>(index: number, propName: string, value: T | NO_CHANGE, sanitizer?: SanitizerFn): void;\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n */\nexport declare function enableBindings(): void;\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n */\nexport declare function disableBindings(): void;\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param type The type of the node\n * @param adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param tagName The tag name of the node\n * @param attrs The attributes defined on this node\n * @param tViews Any TViews attached to this node\n * @returns the TNode object\n */\nexport declare function createTNode(type: TNodeType, adjustedIndex: number, tagName: string | null, attrs: TAttributes | null, tViews: TView[] | null): TNode;\n/**\n * Add or remove a class in a `classList` on a DOM element.\n *\n * This instruction is meant to handle the [class.foo]=\"exp\" case\n *\n * @param index The index of the element to update in the data array\n * @param className Name of class to toggle. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value A value indicating if a given class should be added or removed.\n */\nexport declare function elementClassProp<T>(index: number, stylingIndex: number, value: T | NO_CHANGE): void;\n/**\n * Assign any inline style values to the element during creation mode.\n *\n * This instruction is meant to be called during creation mode to apply all styling\n * (e.g. `style=\"...\"`) values to the element. This is also where the provided index\n * value is allocated for the styling details for its corresponding element (the element\n * index is the previous index value from this one).\n *\n * (Note this function calls `elementStylingApply` immediately when called.)\n *\n *\n * @param index Index value which will be allocated to store styling data for the element.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @param classDeclarations A key/value array of CSS classes that will be registered on the element.\n *   Each individual style will be used on the element as long as it is not overridden\n *   by any classes placed on the element by multiple (`[class]`) or singular (`[class.named]`)\n *   bindings. If a class binding changes its value to a falsy value then the matching initial\n *   class value that are passed in here will be applied to the element (if matched).\n * @param styleDeclarations A key/value array of CSS styles that will be registered on the element.\n *   Each individual style will be used on the element as long as it is not overridden\n *   by any styles placed on the element by multiple (`[style]`) or singular (`[style.prop]`)\n *   bindings. If a style binding changes its value to null then the initial styling\n *   values that are passed in here will be applied to the element (if matched).\n * @param styleSanitizer An optional sanitizer function that will be used (if provided)\n *   to sanitize the any CSS property values that are applied to the element (during rendering).\n */\nexport declare function elementStyling<T>(classDeclarations?: (string | boolean | InitialStylingFlags)[] | null, styleDeclarations?: (string | boolean | InitialStylingFlags)[] | null, styleSanitizer?: StyleSanitizeFn | null): void;\n/**\n * Apply all styling values to the element which have been queued by any styling instructions.\n *\n * This instruction is meant to be run once one or more `elementStyle` and/or `elementStyleProp`\n * have been issued against the element. This function will also determine if any styles have\n * changed and will then skip the operation if there is nothing new to render.\n *\n * Once called then all queued styles will be flushed.\n *\n * @param index Index of the element's styling storage that will be rendered.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n */\nexport declare function elementStylingApply<T>(index: number): void;\n/**\n * Queue a given style to be rendered on an Element.\n *\n * If the style value is `null` then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `elementStyle` or any styles that are present\n * from when the element was created (with `elementStyling`).\n *\n * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n *\n * @param index Index of the element's styling storage to change in the data array.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @param styleIndex Index of the style property on this element. (Monotonically increasing.)\n * @param value New value to write (null to remove).\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *        Note that when a suffix is provided then the underlying sanitizer will\n *        be ignored.\n */\nexport declare function elementStyleProp<T>(index: number, styleIndex: number, value: T | null, suffix?: string): void;\n/**\n * Queue a key/value map of styles to be rendered on an Element.\n *\n * This instruction is meant to handle the `[style]=\"exp\"` usage. When styles are applied to\n * the Element they will then be placed with respect to any styles set with `elementStyleProp`.\n * If any styles are set to `null` then they will be removed from the element (unless the same\n * style properties have been assigned to the element during creation using `elementStyling`).\n *\n * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n *\n * @param index Index of the element's styling storage to change in the data array.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @param classes A key/value style map of CSS classes that will be added to the given element.\n *        Any missing classes (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's list of CSS classes.\n * @param styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n */\nexport declare function elementStylingMap<T>(index: number, classes: {\n    [key: string]: any;\n} | string | null, styles?: {\n    [styleName: string]: any;\n} | null): void;\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Value to write. This value will be stringified.\n */\nexport declare function text(index: number, value?: any): void;\n/**\n * Create text node with binding\n * Bindings should be handled externally with the proper interpolation(1-8) method\n *\n * @param index Index of the node in the data array.\n * @param value Stringified value to write.\n */\nexport declare function textBinding<T>(index: number, value: T | NO_CHANGE): void;\n/**\n * Create a directive and their associated content queries.\n *\n * NOTE: directives can be created in order other than the index order. They can also\n *       be retrieved before they are created in which case the value will be null.\n *\n * @param directive The directive instance.\n * @param directiveDef DirectiveDef object which contains information about the template.\n */\nexport declare function directiveCreate<T>(directiveDefIdx: number, directive: T, directiveDef: DirectiveDef<T> | ComponentDef<T>): T;\n/**\n * A lighter version of directiveCreate() that is used for the root component\n *\n * This version does not contain features that we don't already support at root in\n * current Angular. Example: local refs and inputs on root component.\n */\nexport declare function baseDirectiveCreate<T>(index: number, directive: T, directiveDef: DirectiveDef<T> | ComponentDef<T>, native: RNode | null): T;\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param hostNative The host element for the LContainer\n * @param hostTNode The host TNode for the LContainer\n * @param currentView The parent view of the LContainer\n * @param native The native comment element\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @returns LContainer\n */\nexport declare function createLContainer(hostNative: RElement | RComment, hostTNode: TElementNode | TContainerNode | TElementContainerNode, currentView: LViewData, native: RComment, isForViewContainerRef?: boolean): LContainer;\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param consts The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrs The attrs attached to the container, if applicable\n * @param localRefs A set of local reference bindings on the element.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n */\nexport declare function template(index: number, templateFn: ComponentTemplate<any> | null, consts: number, vars: number, tagName?: string | null, attrs?: TAttributes | null, localRefs?: string[] | null, localRefExtractor?: LocalRefExtractor): void;\n/**\n * Creates an LContainer for inline views, e.g.\n *\n * % if (showing) {\n *   <div></div>\n * % }\n *\n * @param index The index of the container in the data array\n */\nexport declare function container(index: number): void;\n/**\n * Sets a container up to receive views.\n *\n * @param index The index of the container in the data array\n */\nexport declare function containerRefreshStart(index: number): void;\n/**\n * Marks the end of the LContainer.\n *\n * Marking the end of LContainer is the time when to child views get inserted or removed.\n */\nexport declare function containerRefreshEnd(): void;\n/**\n * Marks the start of an embedded view.\n *\n * @param viewBlockId The ID of this view\n * @return boolean Whether or not this view is in creation mode\n */\nexport declare function embeddedViewStart(viewBlockId: number, consts: number, vars: number): RenderFlags;\n/** Marks the end of an embedded view. */\nexport declare function embeddedViewEnd(): void;\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @param adjustedElementIndex  Element index in LViewData[] (adjusted for HEADER_OFFSET)\n */\nexport declare function componentRefresh<T>(adjustedElementIndex: number, parentFirstTemplatePass: boolean): void;\n/** Returns a boolean for whether the view is attached */\nexport declare function viewAttached(view: LViewData): boolean;\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param selectors A collection of parsed CSS selectors\n * @param rawSelectors A collection of CSS selectors in the raw, un-parsed form\n */\nexport declare function projectionDef(selectors?: CssSelectorList[], textSelectors?: string[]): void;\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param nodeIndex\n * @param selectorIndex:\n *        - 0 when the selector is `*` (or unspecified as this is the default value),\n *        - 1 based index of the selector from the {@link projectionDef}\n */\nexport declare function projection(nodeIndex: number, selectorIndex?: number, attrs?: string[]): void;\n/**\n * Adds LViewData or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @param currentView The view where LViewData or LContainer should be added\n * @param adjustedHostIndex Index of the view's host node in LViewData[], adjusted for header\n * @param state The LViewData or LContainer to add to the view tree\n * @returns The state passed in\n */\nexport declare function addToViewTree<T extends LViewData | LContainer>(currentView: LViewData, adjustedHostIndex: number, state: T): T;\n/** If node is an OnPush component, marks its LViewData dirty. */\nexport declare function markDirtyIfOnPush(viewIndex: number): void;\n/** Wraps an event listener with preventDefault behavior. */\nexport declare function wrapListenerWithPreventDefault(listenerFn: (e?: any) => any): EventListener;\n/** Marks current view and all ancestors dirty */\nexport declare function markViewDirty(view: LViewData): void;\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n */\nexport declare function scheduleTick<T>(rootContext: RootContext): void;\n/**\n * Used to perform change detection on the whole application.\n *\n * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`\n * executes lifecycle hooks and conditionally checks components based on their\n * `ChangeDetectionStrategy` and dirtiness.\n *\n * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally\n * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a\n * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can\n * be changed when calling `renderComponent` and providing the `scheduler` option.\n */\nexport declare function tick<T>(component: T): void;\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component. There should\n * be very little reason to call this function directly since a preferred way to do change\n * detection is to {@link markDirty} the component and wait for the scheduler to call this method\n * at some future point in time. This is because a single user action often results in many\n * components being invalidated and calling change detection on each component synchronously\n * would be inefficient. It is better to wait until all components are marked as dirty and\n * then perform single change detection across all of the components\n *\n * @param component The component which the change detection should be performed on.\n */\nexport declare function detectChanges<T>(component: T): void;\n/**\n * Synchronously perform change detection on a root view and its components.\n *\n * @param lViewData The view which the change detection should be performed on.\n */\nexport declare function detectChangesInRootView(lViewData: LViewData): void;\n/**\n * Checks the change detector and its children, and throws if any changes are detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n */\nexport declare function checkNoChanges<T>(component: T): void;\n/**\n * Checks the change detector on a root view and its components, and throws if any changes are\n * detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n *\n * @param lViewData The view which the change detection should be checked on.\n */\nexport declare function checkNoChangesInRootView(lViewData: LViewData): void;\n/** Checks the view of the component provided. Does not gate on dirty checks or execute doCheck. */\nexport declare function detectChangesInternal<T>(hostView: LViewData, component: T): void;\n/**\n * Mark the component as dirty (needing change detection).\n *\n * Marking a component dirty will schedule a change detection on this\n * component at some point in the future. Marking an already dirty\n * component as dirty is a noop. Only one outstanding change detection\n * can be scheduled per component tree. (Two components bootstrapped with\n * separate `renderComponent` will have separate schedulers)\n *\n * When the root component is bootstrapped with `renderComponent`, a scheduler\n * can be provided.\n *\n * @param component Component to mark as dirty.\n */\nexport declare function markDirty<T>(component: T): void;\nexport interface NO_CHANGE {\n    brand: 'NO_CHANGE';\n}\n/** A special value which designates that a value has not changed. */\nexport declare const NO_CHANGE: NO_CHANGE;\n/**\n * Creates a single value binding.\n *\n * @param value Value to diff\n */\nexport declare function bind<T>(value: T): T | NO_CHANGE;\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport declare function interpolationV(values: any[]): string | NO_CHANGE;\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param prefix static value used for concatenation only.\n * @param v0 value checked for change.\n * @param suffix static value used for concatenation only.\n */\nexport declare function interpolation1(prefix: string, v0: any, suffix: string): string | NO_CHANGE;\n/** Creates an interpolation binding with 2 expressions. */\nexport declare function interpolation2(prefix: string, v0: any, i0: string, v1: any, suffix: string): string | NO_CHANGE;\n/** Creates an interpolation binding with 3 expressions. */\nexport declare function interpolation3(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, suffix: string): string | NO_CHANGE;\n/** Create an interpolation binding with 4 expressions. */\nexport declare function interpolation4(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, suffix: string): string | NO_CHANGE;\n/** Creates an interpolation binding with 5 expressions. */\nexport declare function interpolation5(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, suffix: string): string | NO_CHANGE;\n/** Creates an interpolation binding with 6 expressions. */\nexport declare function interpolation6(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string): string | NO_CHANGE;\n/** Creates an interpolation binding with 7 expressions. */\nexport declare function interpolation7(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string): string | NO_CHANGE;\n/** Creates an interpolation binding with 8 expressions. */\nexport declare function interpolation8(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any, suffix: string): string | NO_CHANGE;\n/** Store a value in the `data` at a given `index`. */\nexport declare function store<T>(index: number, value: T): void;\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @param index The index of the local ref in contextViewData.\n */\nexport declare function reference<T>(index: number): T;\nexport declare function loadQueryList<T>(queryListIdx: number): QueryList<T>;\n/** Retrieves a value from current `viewData`. */\nexport declare function load<T>(index: number): T;\n/** Gets the current binding value. */\nexport declare function getBinding(bindingIndex: number): any;\n/** Updates binding if changed, then returns whether it was updated. */\nexport declare function bindingUpdated(bindingIndex: number, value: any): boolean;\n/** Updates binding and returns the value. */\nexport declare function updateBinding(bindingIndex: number, value: any): any;\n/** Updates 2 bindings if changed, then returns whether either was updated. */\nexport declare function bindingUpdated2(bindingIndex: number, exp1: any, exp2: any): boolean;\n/** Updates 3 bindings if changed, then returns whether any was updated. */\nexport declare function bindingUpdated3(bindingIndex: number, exp1: any, exp2: any, exp3: any): boolean;\n/** Updates 4 bindings if changed, then returns whether any was updated. */\nexport declare function bindingUpdated4(bindingIndex: number, exp1: any, exp2: any, exp3: any, exp4: any): boolean;\nexport declare function getTView(): TView;\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n */\nexport declare function registerContentQuery<Q>(queryList: QueryList<Q>): void;\nexport declare function assertPreviousIsParent(): void;\nexport declare const CLEAN_PROMISE: Promise<null>;\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/events/dom_events.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgZone } from '@angular/core';\nimport { EventManagerPlugin } from './event_manager';\nexport declare class DomEventsPlugin extends EventManagerPlugin {\n    private ngZone;\n    constructor(doc: any, ngZone: NgZone, platformId: {} | null);\n    private patchEvent;\n    supports(eventName: string): boolean;\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    removeEventListener(target: any, eventName: string, callback: Function): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/shared_styles_host.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OnDestroy } from '@angular/core';\nexport declare class SharedStylesHost {\n    addStyles(styles: string[]): void;\n    onStylesAdded(additions: Set<string>): void;\n    getAllStyles(): string[];\n}\nexport declare class DomSharedStylesHost extends SharedStylesHost implements OnDestroy {\n    private _doc;\n    private _hostNodes;\n    private _styleNodes;\n    constructor(_doc: any);\n    private _addStylesToHost;\n    addHost(hostNode: Node): void;\n    removeHost(hostNode: Node): void;\n    onStylesAdded(additions: Set<string>): void;\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/services.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2 } from '../render/api';\nimport { DebugContext } from './types';\nexport declare function initServicesIfNeeded(): void;\nexport declare function getCurrentDebugContext(): DebugContext | null;\nexport declare class DebugRendererFactory2 implements RendererFactory2 {\n    private delegate;\n    constructor(delegate: RendererFactory2);\n    createRenderer(element: any, renderData: RendererType2 | null): Renderer2;\n    begin(): void;\n    end(): void;\n    whenRenderingDone(): Promise<any>;\n}\nexport declare class DebugRenderer2 implements Renderer2 {\n    private delegate;\n    readonly data: {\n        [key: string]: any;\n    };\n    private createDebugContext;\n    /**\n     * Factory function used to create a `DebugContext` when a node is created.\n     *\n     * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n     *\n     * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n     * or a Render context.\n     */\n    debugContextFactory: (nativeElement?: any) => DebugContext | null;\n    constructor(delegate: Renderer2);\n    destroyNode(node: any): void;\n    destroy(): void;\n    createElement(name: string, namespace?: string): any;\n    createComment(value: string): any;\n    createText(value: string): any;\n    appendChild(parent: any, newChild: any): void;\n    insertBefore(parent: any, newChild: any, refChild: any): void;\n    removeChild(parent: any, oldChild: any): void;\n    selectRootElement(selectorOrNode: string | any, preserveContent?: boolean): any;\n    setAttribute(el: any, name: string, value: string, namespace?: string): void;\n    removeAttribute(el: any, name: string, namespace?: string): void;\n    addClass(el: any, name: string): void;\n    removeClass(el: any, name: string): void;\n    setStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void;\n    removeStyle(el: any, style: string, flags: RendererStyleFlags2): void;\n    setProperty(el: any, name: string, value: any): void;\n    listen(target: 'document' | 'windows' | 'body' | any, eventName: string, callback: (event: any) => boolean): () => void;\n    parentNode(node: any): any;\n    nextSibling(node: any): any;\n    setValue(node: any, value: string): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/application_tokens.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from './di';\nimport { ComponentRef } from './linker/component_factory';\n/**\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n * using this token.\n * @experimental\n */\nexport declare const APP_ID: InjectionToken<string>;\nexport declare function _appIdRandomProviderFactory(): string;\n/**\n * Providers that will generate a random APP_ID_TOKEN.\n * @experimental\n */\nexport declare const APP_ID_RANDOM_PROVIDER: {\n    provide: InjectionToken<string>;\n    useFactory: typeof _appIdRandomProviderFactory;\n    deps: any[];\n};\n/**\n * A function that will be executed when a platform is initialized.\n * @experimental\n */\nexport declare const PLATFORM_INITIALIZER: InjectionToken<(() => void)[]>;\n/**\n * A token that indicates an opaque platform id.\n * @experimental\n */\nexport declare const PLATFORM_ID: InjectionToken<Object>;\n/**\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * @experimental\n */\nexport declare const APP_BOOTSTRAP_LISTENER: InjectionToken<((compRef: ComponentRef<any>) => void)[]>;\n/**\n * A token which indicates the root directory of the application\n * @experimental\n */\nexport declare const PACKAGE_ROOT_URL: InjectionToken<string>;\n"
  },
  {
    "path": "node_modules/@angular/router/src/router_config_loader.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Compiler, InjectionToken, Injector, NgModuleFactoryLoader } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { LoadedRouterConfig, Route } from './config';\n/**\n * @docsNotRequired\n * @experimental\n */\nexport declare const ROUTES: InjectionToken<Route[][]>;\nexport declare class RouterConfigLoader {\n    private loader;\n    private compiler;\n    private onLoadStartListener?;\n    private onLoadEndListener?;\n    constructor(loader: NgModuleFactoryLoader, compiler: Compiler, onLoadStartListener?: ((r: Route) => void) | undefined, onLoadEndListener?: ((r: Route) => void) | undefined);\n    load(parentInjector: Injector, route: Route): Observable<LoadedRouterConfig>;\n    private loadModuleFactory;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/testing/src/testing.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the router/testing package.\n */\nexport * from './router_testing_module';\n"
  },
  {
    "path": "node_modules/@angular/forms/src/version.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\nimport { Version } from '@angular/core';\nexport declare const VERSION: Version;\n"
  },
  {
    "path": "node_modules/@angular/core/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/security/dom_sanitization_service.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Sanitizer, SecurityContext } from '@angular/core';\nexport { SecurityContext };\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n *\n */\nexport interface SafeValue {\n}\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n *\n */\nexport interface SafeHtml extends SafeValue {\n}\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n *\n */\nexport interface SafeStyle extends SafeValue {\n}\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n *\n */\nexport interface SafeScript extends SafeValue {\n}\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n *\n */\nexport interface SafeUrl extends SafeValue {\n}\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n *\n */\nexport interface SafeResourceUrl extends SafeValue {\n}\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n *\n *\n */\nexport declare abstract class DomSanitizer implements Sanitizer {\n    /**\n     * Sanitizes a value for use in the given SecurityContext.\n     *\n     * If value is trusted for the context, this method will unwrap the contained safe value and use\n     * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n     * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n     * is responsible to make sure that the value can definitely be safely used in the given context.\n     */\n    abstract sanitize(context: SecurityContext, value: SafeValue | string | null): string | null;\n    /**\n     * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n     * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n     * leave safe HTML intact, so in most situations this method should not be used.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n    /**\n     * Bypass security and trust the given value to be safe style value (CSS).\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n    /**\n     * Bypass security and trust the given value to be safe JavaScript.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustScript(value: string): SafeScript;\n    /**\n     * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n     * in hyperlinks or `<img src>`.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n    /**\n     * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n     * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\nexport declare class DomSanitizerImpl extends DomSanitizer {\n    private _doc;\n    constructor(_doc: any);\n    sanitize(ctx: SecurityContext, value: SafeValue | string | null): string | null;\n    private checkNotSafeValue;\n    bypassSecurityTrustHtml(value: string): SafeHtml;\n    bypassSecurityTrustStyle(value: string): SafeStyle;\n    bypassSecurityTrustScript(value: string): SafeScript;\n    bypassSecurityTrustUrl(value: string): SafeUrl;\n    bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/interfaces.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { Route } from './config';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from './router_state';\nimport { UrlSegment } from './url_tree';\n/**\n * @description\n *\n * Interface that a class can implement to be a guard deciding if a route can be activated.\n *\n * ```\n * class UserToken {}\n * class Permissions {\n *   canActivate(user: UserToken, id: string): boolean {\n *     return true;\n *   }\n * }\n *\n * @Injectable()\n * class CanActivateTeam implements CanActivate {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canActivate(\n *     route: ActivatedRouteSnapshot,\n *     state: RouterStateSnapshot\n *   ): Observable<boolean>|Promise<boolean>|boolean {\n *     return this.permissions.canActivate(this.currentUser, route.params.id);\n *   }\n * }\n *\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         canActivate: [CanActivateTeam]\n *       }\n *     ])\n *   ],\n *   providers: [CanActivateTeam, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n *\n * You can alternatively provide a function with the `canActivate` signature:\n *\n * ```\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         canActivate: ['canActivateTeam']\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'canActivateTeam',\n *       useValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => true\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n *\n *\n */\nexport interface CanActivate {\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean;\n}\n/**\n * @description\n *\n * Interface that a class can implement to be a guard deciding if a child route can be activated.\n *\n * ```\n * class UserToken {}\n * class Permissions {\n *   canActivate(user: UserToken, id: string): boolean {\n *     return true;\n *   }\n * }\n *\n * @Injectable()\n * class CanActivateTeam implements CanActivateChild {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canActivateChild(\n *     route: ActivatedRouteSnapshot,\n *     state: RouterStateSnapshot\n *   ): Observable<boolean>|Promise<boolean>|boolean {\n *     return this.permissions.canActivate(this.currentUser, route.params.id);\n *   }\n * }\n *\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'root',\n *         canActivateChild: [CanActivateTeam],\n *         children: [\n *           {\n *              path: 'team/:id',\n *              component: Team\n *           }\n *         ]\n *       }\n *     ])\n *   ],\n *   providers: [CanActivateTeam, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n *\n * You can alternatively provide a function with the `canActivateChild` signature:\n *\n * ```\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'root',\n *         canActivateChild: ['canActivateTeam'],\n *         children: [\n *           {\n *             path: 'team/:id',\n *             component: Team\n *           }\n *         ]\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'canActivateTeam',\n *       useValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => true\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n *\n *\n */\nexport interface CanActivateChild {\n    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean;\n}\n/**\n * @description\n *\n * Interface that a class can implement to be a guard deciding if a route can be deactivated.\n *\n * ```\n * class UserToken {}\n * class Permissions {\n *   canDeactivate(user: UserToken, id: string): boolean {\n *     return true;\n *   }\n * }\n *\n * @Injectable()\n * class CanDeactivateTeam implements CanDeactivate<TeamComponent> {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canDeactivate(\n *     component: TeamComponent,\n *     currentRoute: ActivatedRouteSnapshot,\n *     currentState: RouterStateSnapshot,\n *     nextState: RouterStateSnapshot\n *   ): Observable<boolean>|Promise<boolean>|boolean {\n *     return this.permissions.canDeactivate(this.currentUser, route.params.id);\n *   }\n * }\n *\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         canDeactivate: [CanDeactivateTeam]\n *       }\n *     ])\n *   ],\n *   providers: [CanDeactivateTeam, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n *\n * You can alternatively provide a function with the `canDeactivate` signature:\n *\n * ```\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         canDeactivate: ['canDeactivateTeam']\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'canDeactivateTeam',\n *       useValue: (component: TeamComponent, currentRoute: ActivatedRouteSnapshot, currentState:\n * RouterStateSnapshot, nextState: RouterStateSnapshot) => true\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n *\n *\n */\nexport interface CanDeactivate<T> {\n    canDeactivate(component: T, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot, nextState?: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean;\n}\n/**\n * @description\n *\n * Interface that class can implement to be a data provider.\n *\n * ```\n * class Backend {\n *   fetchTeam(id: string) {\n *     return 'someTeam';\n *   }\n * }\n *\n * @Injectable()\n * class TeamResolver implements Resolve<Team> {\n *   constructor(private backend: Backend) {}\n *\n *   resolve(\n *     route: ActivatedRouteSnapshot,\n *     state: RouterStateSnapshot\n *   ): Observable<any>|Promise<any>|any {\n *     return this.backend.fetchTeam(route.params.id);\n *   }\n * }\n *\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         resolve: {\n *           team: TeamResolver\n *         }\n *       }\n *     ])\n *   ],\n *   providers: [TeamResolver]\n * })\n * class AppModule {}\n * ```\n *\n * You can alternatively provide a function with the `resolve` signature:\n *\n * ```\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         resolve: {\n *           team: 'teamResolver'\n *         }\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'teamResolver',\n *       useValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => 'team'\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n *\n */\nexport interface Resolve<T> {\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<T> | Promise<T> | T;\n}\n/**\n * @description\n *\n * Interface that a class can implement to be a guard deciding if a children can be loaded.\n *\n * ```\n * class UserToken {}\n * class Permissions {\n *   canLoadChildren(user: UserToken, id: string, segments: UrlSegment[]): boolean {\n *     return true;\n *   }\n * }\n *\n * @Injectable()\n * class CanLoadTeamSection implements CanLoad {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canLoad(route: Route, segments: UrlSegment[]): Observable<boolean>|Promise<boolean>|boolean {\n *     return this.permissions.canLoadChildren(this.currentUser, route, segments);\n *   }\n * }\n *\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         loadChildren: 'team.js',\n *         canLoad: [CanLoadTeamSection]\n *       }\n *     ])\n *   ],\n *   providers: [CanLoadTeamSection, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n *\n * You can alternatively provide a function with the `canLoad` signature:\n *\n * ```\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         loadChildren: 'team.js',\n *         canLoad: ['canLoadTeamSection']\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'canLoadTeamSection',\n *       useValue: (route: Route, segments: UrlSegment[]) => true\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n *\n *\n */\nexport interface CanLoad {\n    canLoad(route: Route, segments: UrlSegment[]): Observable<boolean> | Promise<boolean> | boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/src/animation_builder.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationBuilder, AnimationFactory, AnimationMetadata, AnimationOptions, AnimationPlayer } from '@angular/animations';\nimport { RendererFactory2 } from '@angular/core';\nimport { AnimationRenderer } from './animation_renderer';\nexport declare class BrowserAnimationBuilder extends AnimationBuilder {\n    private _nextAnimationId;\n    private _renderer;\n    constructor(rootRenderer: RendererFactory2, doc: any);\n    build(animation: AnimationMetadata | AnimationMetadata[]): AnimationFactory;\n}\nexport declare class BrowserAnimationFactory extends AnimationFactory {\n    private _id;\n    private _renderer;\n    constructor(_id: string, _renderer: AnimationRenderer);\n    create(element: any, options?: AnimationOptions): AnimationPlayer;\n}\nexport declare class RendererAnimationPlayer implements AnimationPlayer {\n    id: string;\n    element: any;\n    private _renderer;\n    parentPlayer: AnimationPlayer | null;\n    private _started;\n    constructor(id: string, element: any, options: AnimationOptions, _renderer: AnimationRenderer);\n    private _listen;\n    private _command;\n    onDone(fn: () => void): void;\n    onStart(fn: () => void): void;\n    onDestroy(fn: () => void): void;\n    init(): void;\n    hasStarted(): boolean;\n    play(): void;\n    pause(): void;\n    restart(): void;\n    finish(): void;\n    destroy(): void;\n    reset(): void;\n    setPosition(p: number): void;\n    getPosition(): number;\n    totalTime: number;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/version.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\nimport { Version } from '@angular/core';\nexport declare const VERSION: Version;\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/reflective_injector.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from './injector';\nimport { Provider } from './provider';\nimport { ResolvedReflectiveProvider } from './reflective_provider';\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * @usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * @Injectable()\n * class Engine {\n * }\n *\n * @Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n */\nexport declare abstract class ReflectiveInjector implements Injector {\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     */\n    static resolve(providers: Provider[]): ResolvedReflectiveProvider[];\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     */\n    static resolveAndCreate(providers: Provider[], parent?: Injector): ReflectiveInjector;\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @experimental\n     */\n    static fromResolvedProviders(providers: ResolvedReflectiveProvider[], parent?: Injector): ReflectiveInjector;\n    /**\n     * Parent of this injector.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     */\n    abstract readonly parent: Injector | null;\n    /**\n     * Resolves an array of providers and creates a child injector from those providers.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class ParentProvider {}\n     * class ChildProvider {}\n     *\n     * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n     * var child = parent.resolveAndCreateChild([ChildProvider]);\n     *\n     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n     * ```\n     */\n    abstract resolveAndCreateChild(providers: Provider[]): ReflectiveInjector;\n    /**\n     * Creates a child injector from previously resolved providers.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class ParentProvider {}\n     * class ChildProvider {}\n     *\n     * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n     * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n     *\n     * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n     * var child = parent.createChildFromResolved(childProviders);\n     *\n     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n     * ```\n     */\n    abstract createChildFromResolved(providers: ResolvedReflectiveProvider[]): ReflectiveInjector;\n    /**\n     * Resolves a provider and instantiates an object in the context of the injector.\n     *\n     * The created object does not get cached by the injector.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n     *\n     * var car = injector.resolveAndInstantiate(Car);\n     * expect(car.engine).toBe(injector.get(Engine));\n     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n     * ```\n     */\n    abstract resolveAndInstantiate(provider: Provider): any;\n    /**\n     * Instantiates an object using a resolved provider in the context of the injector.\n     *\n     * The created object does not get cached by the injector.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n     * var carProvider = ReflectiveInjector.resolve([Car])[0];\n     * var car = injector.instantiateResolved(carProvider);\n     * expect(car.engine).toBe(injector.get(Engine));\n     * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n     * ```\n     */\n    abstract instantiateResolved(provider: ResolvedReflectiveProvider): any;\n    abstract get(token: any, notFoundValue?: any): any;\n}\nexport declare class ReflectiveInjector_ implements ReflectiveInjector {\n    private static INJECTOR_KEY;\n    readonly parent: Injector | null;\n    keyIds: number[];\n    objs: any[];\n    /**\n     * Private\n     */\n    constructor(_providers: ResolvedReflectiveProvider[], _parent?: Injector);\n    get(token: any, notFoundValue?: any): any;\n    resolveAndCreateChild(providers: Provider[]): ReflectiveInjector;\n    createChildFromResolved(providers: ResolvedReflectiveProvider[]): ReflectiveInjector;\n    resolveAndInstantiate(provider: Provider): any;\n    instantiateResolved(provider: ResolvedReflectiveProvider): any;\n    getProviderAtIndex(index: number): ResolvedReflectiveProvider;\n    private _getMaxNumberOfObjects;\n    private _instantiateProvider;\n    private _instantiate;\n    private _getByReflectiveDependency;\n    private _getByKey;\n    private _getObjByKeyId;\n    readonly displayName: string;\n    toString(): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection/differs/default_keyvalue_differ.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory } from './keyvalue_differs';\nexport declare class DefaultKeyValueDifferFactory<K, V> implements KeyValueDifferFactory {\n    constructor();\n    supports(obj: any): boolean;\n    create<K, V>(): KeyValueDiffer<K, V>;\n}\nexport declare class DefaultKeyValueDiffer<K, V> implements KeyValueDiffer<K, V>, KeyValueChanges<K, V> {\n    private _records;\n    private _mapHead;\n    private _appendAfter;\n    private _previousMapHead;\n    private _changesHead;\n    private _changesTail;\n    private _additionsHead;\n    private _additionsTail;\n    private _removalsHead;\n    private _removalsTail;\n    readonly isDirty: boolean;\n    forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    diff(map?: Map<any, any> | {\n        [k: string]: any;\n    } | null): any;\n    onDestroy(): void;\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     */\n    check(map: Map<any, any> | {\n        [k: string]: any;\n    }): boolean;\n    /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     */\n    private _insertBeforeOrAppend;\n    private _getOrCreateRecordForKey;\n    private _maybeAddToChanges;\n    private _addToAdditions;\n    private _addToChanges;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/browser_adapter.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { GenericBrowserDomAdapter } from './generic_browser_adapter';\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport declare class BrowserDomAdapter extends GenericBrowserDomAdapter {\n    parse(templateHtml: string): void;\n    static makeCurrent(): void;\n    hasProperty(element: Node, name: string): boolean;\n    setProperty(el: Node, name: string, value: any): void;\n    getProperty(el: Node, name: string): any;\n    invoke(el: Node, methodName: string, args: any[]): any;\n    logError(error: string): void;\n    log(error: string): void;\n    logGroup(error: string): void;\n    logGroupEnd(): void;\n    readonly attrToPropMap: any;\n    contains(nodeA: any, nodeB: any): boolean;\n    querySelector(el: HTMLElement, selector: string): any;\n    querySelectorAll(el: any, selector: string): any[];\n    on(el: Node, evt: any, listener: any): void;\n    onAndCancel(el: Node, evt: any, listener: any): Function;\n    dispatchEvent(el: Node, evt: any): void;\n    createMouseEvent(eventType: string): MouseEvent;\n    createEvent(eventType: any): Event;\n    preventDefault(evt: Event): void;\n    isPrevented(evt: Event): boolean;\n    getInnerHTML(el: HTMLElement): string;\n    getTemplateContent(el: Node): Node | null;\n    getOuterHTML(el: HTMLElement): string;\n    nodeName(node: Node): string;\n    nodeValue(node: Node): string | null;\n    type(node: HTMLInputElement): string;\n    content(node: Node): Node;\n    firstChild(el: Node): Node | null;\n    nextSibling(el: Node): Node | null;\n    parentElement(el: Node): Node | null;\n    childNodes(el: any): Node[];\n    childNodesAsList(el: Node): any[];\n    clearNodes(el: Node): void;\n    appendChild(el: Node, node: Node): void;\n    removeChild(el: Node, node: Node): void;\n    replaceChild(el: Node, newChild: Node, oldChild: Node): void;\n    remove(node: Node): Node;\n    insertBefore(parent: Node, ref: Node, node: Node): void;\n    insertAllBefore(parent: Node, ref: Node, nodes: Node[]): void;\n    insertAfter(parent: Node, ref: Node, node: any): void;\n    setInnerHTML(el: Element, value: string): void;\n    getText(el: Node): string | null;\n    setText(el: Node, value: string): void;\n    getValue(el: any): string;\n    setValue(el: any, value: string): void;\n    getChecked(el: any): boolean;\n    setChecked(el: any, value: boolean): void;\n    createComment(text: string): Comment;\n    createTemplate(html: any): HTMLElement;\n    createElement(tagName: string, doc?: Document): HTMLElement;\n    createElementNS(ns: string, tagName: string, doc?: Document): Element;\n    createTextNode(text: string, doc?: Document): Text;\n    createScriptTag(attrName: string, attrValue: string, doc?: Document): HTMLScriptElement;\n    createStyleElement(css: string, doc?: Document): HTMLStyleElement;\n    createShadowRoot(el: HTMLElement): DocumentFragment;\n    getShadowRoot(el: HTMLElement): DocumentFragment;\n    getHost(el: HTMLElement): HTMLElement;\n    clone(node: Node): Node;\n    getElementsByClassName(element: any, name: string): HTMLElement[];\n    getElementsByTagName(element: any, name: string): HTMLElement[];\n    classList(element: any): any[];\n    addClass(element: any, className: string): void;\n    removeClass(element: any, className: string): void;\n    hasClass(element: any, className: string): boolean;\n    setStyle(element: any, styleName: string, styleValue: string): void;\n    removeStyle(element: any, stylename: string): void;\n    getStyle(element: any, stylename: string): string;\n    hasStyle(element: any, styleName: string, styleValue?: string | null): boolean;\n    tagName(element: any): string;\n    attributeMap(element: any): Map<string, string>;\n    hasAttribute(element: Element, attribute: string): boolean;\n    hasAttributeNS(element: Element, ns: string, attribute: string): boolean;\n    getAttribute(element: Element, attribute: string): string | null;\n    getAttributeNS(element: Element, ns: string, name: string): string | null;\n    setAttribute(element: Element, name: string, value: string): void;\n    setAttributeNS(element: Element, ns: string, name: string, value: string): void;\n    removeAttribute(element: Element, attribute: string): void;\n    removeAttributeNS(element: Element, ns: string, name: string): void;\n    templateAwareRoot(el: Node): any;\n    createHtmlDocument(): HTMLDocument;\n    getDefaultDocument(): Document;\n    getBoundingClientRect(el: Element): any;\n    getTitle(doc: Document): string;\n    setTitle(doc: Document, newTitle: string): void;\n    elementMatches(n: any, selector: string): boolean;\n    isTemplateElement(el: Node): boolean;\n    isTextNode(node: Node): boolean;\n    isCommentNode(node: Node): boolean;\n    isElementNode(node: Node): boolean;\n    hasShadowRoot(node: any): boolean;\n    isShadowRoot(node: any): boolean;\n    importIntoDoc(node: Node): any;\n    adoptNode(node: Node): any;\n    getHref(el: Element): string;\n    getEventKey(event: any): string;\n    getGlobalEventTarget(doc: Document, target: string): EventTarget | null;\n    getHistory(): History;\n    getLocation(): Location;\n    getBaseHref(doc: Document): string | null;\n    resetBaseElement(): void;\n    getUserAgent(): string;\n    setData(element: Element, name: string, value: string): void;\n    getData(element: Element, name: string): string | null;\n    getComputedStyle(element: any): any;\n    supportsWebAnimation(): boolean;\n    performanceNow(): number;\n    supportsCookies(): boolean;\n    getCookie(name: string): string | null;\n    setCookie(name: string, value: string): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/types.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '../di';\nimport { ErrorHandler } from '../error_handler';\nimport { ComponentFactory } from '../linker/component_factory';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { QueryList } from '../linker/query_list';\nimport { TemplateRef } from '../linker/template_ref';\nimport { ViewContainerRef } from '../linker/view_container_ref';\nimport { Renderer2, RendererFactory2, RendererType2 } from '../render/api';\nimport { Sanitizer, SecurityContext } from '../sanitization/security';\nimport { Type } from '../type';\n/**\n * Factory for ViewDefinitions/NgModuleDefinitions.\n * We use a function so we can reexeute it in case an error happens and use the given logger\n * function to log the error from the definition of the node, which is shown in all browser\n * logs.\n */\nexport interface DefinitionFactory<D extends Definition<any>> {\n    (logger: NodeLogger): D;\n}\n/**\n * Function to call console.error at the right source location. This is an indirection\n * via another function as browser will log the location that actually called\n * `console.error`.\n */\nexport interface NodeLogger {\n    (): () => void;\n}\nexport interface Definition<DF extends DefinitionFactory<any>> {\n    factory: DF | null;\n}\nexport interface NgModuleDefinition extends Definition<NgModuleDefinitionFactory> {\n    providers: NgModuleProviderDef[];\n    providersByKey: {\n        [tokenKey: string]: NgModuleProviderDef;\n    };\n    modules: any[];\n    isRoot: boolean;\n}\nexport interface NgModuleDefinitionFactory extends DefinitionFactory<NgModuleDefinition> {\n}\nexport interface ViewDefinition extends Definition<ViewDefinitionFactory> {\n    flags: ViewFlags;\n    updateDirectives: ViewUpdateFn;\n    updateRenderer: ViewUpdateFn;\n    handleEvent: ViewHandleEventFn;\n    /**\n     * Order: Depth first.\n     * Especially providers are before elements / anchors.\n     */\n    nodes: NodeDef[];\n    /** aggregated NodeFlags for all nodes **/\n    nodeFlags: NodeFlags;\n    rootNodeFlags: NodeFlags;\n    lastRenderRootNode: NodeDef | null;\n    bindingCount: number;\n    outputCount: number;\n    /**\n     * Binary or of all query ids that are matched by one of the nodes.\n     * This includes query ids from templates as well.\n     * Used as a bloom filter.\n     */\n    nodeMatchedQueries: number;\n}\nexport interface ViewDefinitionFactory extends DefinitionFactory<ViewDefinition> {\n}\nexport interface ViewUpdateFn {\n    (check: NodeCheckFn, view: ViewData): void;\n}\nexport interface NodeCheckFn {\n    (view: ViewData, nodeIndex: number, argStyle: ArgumentType.Dynamic, values: any[]): any;\n    (view: ViewData, nodeIndex: number, argStyle: ArgumentType.Inline, v0?: any, v1?: any, v2?: any, v3?: any, v4?: any, v5?: any, v6?: any, v7?: any, v8?: any, v9?: any): any;\n}\nexport declare const enum ArgumentType {\n    Inline = 0,\n    Dynamic = 1\n}\nexport interface ViewHandleEventFn {\n    (view: ViewData, nodeIndex: number, eventName: string, event: any): boolean;\n}\n/**\n * Bitmask for ViewDefinition.flags.\n */\nexport declare const enum ViewFlags {\n    None = 0,\n    OnPush = 2\n}\n/**\n * A node definition in the view.\n *\n * Note: We use one type for all nodes so that loops that loop over all nodes\n * of a ViewDefinition stay monomorphic!\n */\nexport interface NodeDef {\n    flags: NodeFlags;\n    nodeIndex: number;\n    checkIndex: number;\n    parent: NodeDef | null;\n    renderParent: NodeDef | null;\n    /** this is checked against NgContentDef.index to find matched nodes */\n    ngContentIndex: number | null;\n    /** number of transitive children */\n    childCount: number;\n    /** aggregated NodeFlags for all transitive children (does not include self) **/\n    childFlags: NodeFlags;\n    /** aggregated NodeFlags for all direct children (does not include self) **/\n    directChildFlags: NodeFlags;\n    bindingIndex: number;\n    bindings: BindingDef[];\n    bindingFlags: BindingFlags;\n    outputIndex: number;\n    outputs: OutputDef[];\n    /**\n     * references that the user placed on the element\n     */\n    references: {\n        [refId: string]: QueryValueType;\n    };\n    /**\n     * ids and value types of all queries that are matched by this node.\n     */\n    matchedQueries: {\n        [queryId: number]: QueryValueType;\n    };\n    /** Binary or of all matched query ids of this node. */\n    matchedQueryIds: number;\n    /**\n     * Binary or of all query ids that are matched by one of the children.\n     * This includes query ids from templates as well.\n     * Used as a bloom filter.\n     */\n    childMatchedQueries: number;\n    element: ElementDef | null;\n    provider: ProviderDef | null;\n    text: TextDef | null;\n    query: QueryDef | null;\n    ngContent: NgContentDef | null;\n}\n/**\n * Bitmask for NodeDef.flags.\n * Naming convention:\n * - `Type...`: flags that are mutually exclusive\n * - `Cat...`: union of multiple `Type...` (short for category).\n */\nexport declare const enum NodeFlags {\n    None = 0,\n    TypeElement = 1,\n    TypeText = 2,\n    ProjectedTemplate = 4,\n    CatRenderNode = 3,\n    TypeNgContent = 8,\n    TypePipe = 16,\n    TypePureArray = 32,\n    TypePureObject = 64,\n    TypePurePipe = 128,\n    CatPureExpression = 224,\n    TypeValueProvider = 256,\n    TypeClassProvider = 512,\n    TypeFactoryProvider = 1024,\n    TypeUseExistingProvider = 2048,\n    LazyProvider = 4096,\n    PrivateProvider = 8192,\n    TypeDirective = 16384,\n    Component = 32768,\n    CatProviderNoDirective = 3840,\n    CatProvider = 20224,\n    OnInit = 65536,\n    OnDestroy = 131072,\n    DoCheck = 262144,\n    OnChanges = 524288,\n    AfterContentInit = 1048576,\n    AfterContentChecked = 2097152,\n    AfterViewInit = 4194304,\n    AfterViewChecked = 8388608,\n    EmbeddedViews = 16777216,\n    ComponentView = 33554432,\n    TypeContentQuery = 67108864,\n    TypeViewQuery = 134217728,\n    StaticQuery = 268435456,\n    DynamicQuery = 536870912,\n    TypeNgModule = 1073741824,\n    CatQuery = 201326592,\n    Types = 201347067\n}\nexport interface BindingDef {\n    flags: BindingFlags;\n    ns: string | null;\n    name: string | null;\n    nonMinifiedName: string | null;\n    securityContext: SecurityContext | null;\n    suffix: string | null;\n}\nexport declare const enum BindingFlags {\n    TypeElementAttribute = 1,\n    TypeElementClass = 2,\n    TypeElementStyle = 4,\n    TypeProperty = 8,\n    SyntheticProperty = 16,\n    SyntheticHostProperty = 32,\n    CatSyntheticProperty = 48,\n    Types = 15\n}\nexport interface OutputDef {\n    type: OutputType;\n    target: 'window' | 'document' | 'body' | 'component' | null;\n    eventName: string;\n    propName: string | null;\n}\nexport declare const enum OutputType {\n    ElementOutput = 0,\n    DirectiveOutput = 1\n}\nexport declare const enum QueryValueType {\n    ElementRef = 0,\n    RenderElement = 1,\n    TemplateRef = 2,\n    ViewContainerRef = 3,\n    Provider = 4\n}\nexport interface ElementDef {\n    name: string | null;\n    ns: string | null;\n    /** ns, name, value */\n    attrs: [string, string, string][] | null;\n    template: ViewDefinition | null;\n    componentProvider: NodeDef | null;\n    componentRendererType: RendererType2 | null;\n    componentView: ViewDefinitionFactory | null;\n    /**\n     * visible public providers for DI in the view,\n     * as see from this element. This does not include private providers.\n     */\n    publicProviders: {\n        [tokenKey: string]: NodeDef;\n    } | null;\n    /**\n     * same as visiblePublicProviders, but also includes private providers\n     * that are located on this element.\n     */\n    allProviders: {\n        [tokenKey: string]: NodeDef;\n    } | null;\n    handleEvent: ElementHandleEventFn | null;\n}\nexport interface ElementHandleEventFn {\n    (view: ViewData, eventName: string, event: any): boolean;\n}\nexport interface ProviderDef {\n    token: any;\n    value: any;\n    deps: DepDef[];\n}\nexport interface NgModuleProviderDef {\n    flags: NodeFlags;\n    index: number;\n    token: any;\n    value: any;\n    deps: DepDef[];\n}\nexport interface DepDef {\n    flags: DepFlags;\n    token: any;\n    tokenKey: string;\n}\n/**\n * Bitmask for DI flags\n */\nexport declare const enum DepFlags {\n    None = 0,\n    SkipSelf = 1,\n    Optional = 2,\n    Self = 4,\n    Value = 8\n}\nexport interface TextDef {\n    prefix: string;\n}\nexport interface QueryDef {\n    id: number;\n    filterId: number;\n    bindings: QueryBindingDef[];\n}\nexport interface QueryBindingDef {\n    propName: string;\n    bindingType: QueryBindingType;\n}\nexport declare const enum QueryBindingType {\n    First = 0,\n    All = 1\n}\nexport interface NgContentDef {\n    /**\n     * this index is checked against NodeDef.ngContentIndex to find the nodes\n     * that are matched by this ng-content.\n     * Note that a NodeDef with an ng-content can be reprojected, i.e.\n     * have a ngContentIndex on its own.\n     */\n    index: number;\n}\nexport interface NgModuleData extends Injector, NgModuleRef<any> {\n    _def: NgModuleDefinition;\n    _parent: Injector;\n    _providers: any[];\n}\n/**\n * View instance data.\n * Attention: Adding fields to this is performance sensitive!\n */\nexport interface ViewData {\n    def: ViewDefinition;\n    root: RootData;\n    renderer: Renderer2;\n    parentNodeDef: NodeDef | null;\n    parent: ViewData | null;\n    viewContainerParent: ViewData | null;\n    component: any;\n    context: any;\n    nodes: {\n        [key: number]: NodeData;\n    };\n    state: ViewState;\n    oldValues: any[];\n    disposables: DisposableFn[] | null;\n    initIndex: number;\n}\n/**\n * Bitmask of states\n */\nexport declare const enum ViewState {\n    BeforeFirstCheck = 1,\n    FirstCheck = 2,\n    Attached = 4,\n    ChecksEnabled = 8,\n    IsProjectedView = 16,\n    CheckProjectedView = 32,\n    CheckProjectedViews = 64,\n    Destroyed = 128,\n    InitState_Mask = 1792,\n    InitState_BeforeInit = 0,\n    InitState_CallingOnInit = 256,\n    InitState_CallingAfterContentInit = 512,\n    InitState_CallingAfterViewInit = 768,\n    InitState_AfterInit = 1024,\n    CatDetectChanges = 12,\n    CatInit = 13\n}\nexport declare function shiftInitState(view: ViewData, priorInitState: ViewState, newInitState: ViewState): boolean;\nexport declare function shouldCallLifecycleInitHook(view: ViewData, initState: ViewState, index: number): boolean;\nexport interface DisposableFn {\n    (): void;\n}\n/**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nexport declare class NodeData {\n    private __brand;\n}\n/**\n * Data for an instantiated NodeType.Text.\n *\n * Attention: Adding fields to this is performance sensitive!\n */\nexport interface TextData {\n    renderText: any;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nexport declare function asTextData(view: ViewData, index: number): TextData;\n/**\n * Data for an instantiated NodeType.Element.\n *\n * Attention: Adding fields to this is performance sensitive!\n */\nexport interface ElementData {\n    renderElement: any;\n    componentView: ViewData;\n    viewContainer: ViewContainerData | null;\n    template: TemplateData;\n}\nexport interface ViewContainerData extends ViewContainerRef {\n    _embeddedViews: ViewData[];\n}\nexport interface TemplateData extends TemplateRef<any> {\n    _projectedViews: ViewData[];\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nexport declare function asElementData(view: ViewData, index: number): ElementData;\n/**\n * Data for an instantiated NodeType.Provider.\n *\n * Attention: Adding fields to this is performance sensitive!\n */\nexport interface ProviderData {\n    instance: any;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nexport declare function asProviderData(view: ViewData, index: number): ProviderData;\n/**\n * Data for an instantiated NodeType.PureExpression.\n *\n * Attention: Adding fields to this is performance sensitive!\n */\nexport interface PureExpressionData {\n    value: any;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nexport declare function asPureExpressionData(view: ViewData, index: number): PureExpressionData;\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nexport declare function asQueryList(view: ViewData, index: number): QueryList<any>;\nexport interface RootData {\n    injector: Injector;\n    ngModule: NgModuleRef<any>;\n    projectableNodes: any[][];\n    selectorOrNode: any;\n    renderer: Renderer2;\n    rendererFactory: RendererFactory2;\n    errorHandler: ErrorHandler;\n    sanitizer: Sanitizer;\n}\nexport declare abstract class DebugContext {\n    abstract readonly view: ViewData;\n    abstract readonly nodeIndex: number | null;\n    abstract readonly injector: Injector;\n    abstract readonly component: any;\n    abstract readonly providerTokens: any[];\n    abstract readonly references: {\n        [key: string]: any;\n    };\n    abstract readonly context: any;\n    abstract readonly componentRenderElement: any;\n    abstract readonly renderNode: any;\n    abstract logError(console: Console, ...values: any[]): void;\n}\nexport declare const enum CheckType {\n    CheckAndUpdate = 0,\n    CheckNoChanges = 1\n}\nexport interface ProviderOverride {\n    token: any;\n    flags: NodeFlags;\n    value: any;\n    deps: ([DepFlags, any] | any)[];\n    deprecatedBehavior: boolean;\n}\nexport interface Services {\n    setCurrentNode(view: ViewData, nodeIndex: number): void;\n    createRootView(injector: Injector, projectableNodes: any[][], rootSelectorOrNode: string | any, def: ViewDefinition, ngModule: NgModuleRef<any>, context?: any): ViewData;\n    createEmbeddedView(parent: ViewData, anchorDef: NodeDef, viewDef: ViewDefinition, context?: any): ViewData;\n    createComponentView(parentView: ViewData, nodeDef: NodeDef, viewDef: ViewDefinition, hostElement: any): ViewData;\n    createNgModuleRef(moduleType: Type<any>, parent: Injector, bootstrapComponents: Type<any>[], def: NgModuleDefinition): NgModuleRef<any>;\n    overrideProvider(override: ProviderOverride): void;\n    overrideComponentView(compType: Type<any>, compFactory: ComponentFactory<any>): void;\n    clearOverrides(): void;\n    checkAndUpdateView(view: ViewData): void;\n    checkNoChangesView(view: ViewData): void;\n    destroyView(view: ViewData): void;\n    resolveDep(view: ViewData, elDef: NodeDef | null, allowPrivateServices: boolean, depDef: DepDef, notFoundValue?: any): any;\n    createDebugContext(view: ViewData, nodeIndex: number): DebugContext;\n    handleEvent: ViewHandleEventFn;\n    updateDirectives: (view: ViewData, checkType: CheckType) => void;\n    updateRenderer: (view: ViewData, checkType: CheckType) => void;\n    dirtyParentQueries: (view: ViewData) => void;\n}\n/**\n * This object is used to prevent cycles in the source files and to have a place where\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n */\nexport declare const Services: Services;\n"
  },
  {
    "path": "node_modules/@angular/router/src/events.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Route } from './config';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from './router_state';\n/**\n * @description\n *\n * Identifies the trigger of the navigation.\n *\n * * 'imperative'--triggered by `router.navigateByUrl` or `router.navigate`.\n * * 'popstate'--triggered by a popstate event\n * * 'hashchange'--triggered by a hashchange event\n *\n * @experimental\n */\nexport declare type NavigationTrigger = 'imperative' | 'popstate' | 'hashchange';\n/**\n * @description\n *\n * Base for events the Router goes through, as opposed to events tied to a specific\n * Route. `RouterEvent`s will only be fired one time for any given navigation.\n *\n * Example:\n *\n * ```\n * class MyService {\n *   constructor(public router: Router, logger: Logger) {\n *     router.events.filter(e => e instanceof RouterEvent).subscribe(e => {\n *       logger.log(e.id, e.url);\n *     });\n *   }\n * }\n * ```\n *\n * @experimental\n */\nexport declare class RouterEvent {\n    /** @docsNotRequired */\n    id: number;\n    /** @docsNotRequired */\n    url: string;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string);\n}\n/**\n * @description\n *\n * Represents an event triggered when a navigation starts.\n *\n *\n */\nexport declare class NavigationStart extends RouterEvent {\n    /**\n     * Identifies the trigger of the navigation.\n     *\n     * * 'imperative'--triggered by `router.navigateByUrl` or `router.navigate`.\n     * * 'popstate'--triggered by a popstate event\n     * * 'hashchange'--triggered by a hashchange event\n     */\n    navigationTrigger?: 'imperative' | 'popstate' | 'hashchange';\n    /**\n     * This contains the navigation id that pushed the history record that the router navigates\n     * back to. This is not null only when the navigation is triggered by a popstate event.\n     *\n     * The router assigns a navigationId to every router transition/navigation. Even when the user\n     * clicks on the back button in the browser, a new navigation id will be created. So from\n     * the perspective of the router, the router never \"goes back\". By using the `restoredState`\n     * and its navigationId, you can implement behavior that differentiates between creating new\n     * states\n     * and popstate events. In the latter case you can restore some remembered state (e.g., scroll\n     * position).\n     */\n    restoredState?: {\n        navigationId: number;\n    } | null;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string, \n    /** @docsNotRequired */\n    navigationTrigger?: 'imperative' | 'popstate' | 'hashchange', \n    /** @docsNotRequired */\n    restoredState?: {\n        navigationId: number;\n    } | null);\n    /** @docsNotRequired */\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents an event triggered when a navigation ends successfully.\n *\n *\n */\nexport declare class NavigationEnd extends RouterEvent {\n    /** @docsNotRequired */\n    urlAfterRedirects: string;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string, \n    /** @docsNotRequired */\n    urlAfterRedirects: string);\n    /** @docsNotRequired */\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents an event triggered when a navigation is canceled.\n *\n *\n */\nexport declare class NavigationCancel extends RouterEvent {\n    /** @docsNotRequired */\n    reason: string;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string, \n    /** @docsNotRequired */\n    reason: string);\n    /** @docsNotRequired */\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents an event triggered when a navigation fails due to an unexpected error.\n *\n *\n */\nexport declare class NavigationError extends RouterEvent {\n    /** @docsNotRequired */\n    error: any;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string, \n    /** @docsNotRequired */\n    error: any);\n    /** @docsNotRequired */\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents an event triggered when routes are recognized.\n *\n *\n */\nexport declare class RoutesRecognized extends RouterEvent {\n    /** @docsNotRequired */\n    urlAfterRedirects: string;\n    /** @docsNotRequired */\n    state: RouterStateSnapshot;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string, \n    /** @docsNotRequired */\n    urlAfterRedirects: string, \n    /** @docsNotRequired */\n    state: RouterStateSnapshot);\n    /** @docsNotRequired */\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the start of the Guard phase of routing.\n *\n * @experimental\n */\nexport declare class GuardsCheckStart extends RouterEvent {\n    /** @docsNotRequired */\n    urlAfterRedirects: string;\n    /** @docsNotRequired */\n    state: RouterStateSnapshot;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string, \n    /** @docsNotRequired */\n    urlAfterRedirects: string, \n    /** @docsNotRequired */\n    state: RouterStateSnapshot);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the end of the Guard phase of routing.\n *\n * @experimental\n */\nexport declare class GuardsCheckEnd extends RouterEvent {\n    /** @docsNotRequired */\n    urlAfterRedirects: string;\n    /** @docsNotRequired */\n    state: RouterStateSnapshot;\n    /** @docsNotRequired */\n    shouldActivate: boolean;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string, \n    /** @docsNotRequired */\n    urlAfterRedirects: string, \n    /** @docsNotRequired */\n    state: RouterStateSnapshot, \n    /** @docsNotRequired */\n    shouldActivate: boolean);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the start of the Resolve phase of routing. The timing of this\n * event may change, thus it's experimental. In the current iteration it will run\n * in the \"resolve\" phase whether there's things to resolve or not. In the future this\n * behavior may change to only run when there are things to be resolved.\n *\n * @experimental\n */\nexport declare class ResolveStart extends RouterEvent {\n    /** @docsNotRequired */\n    urlAfterRedirects: string;\n    /** @docsNotRequired */\n    state: RouterStateSnapshot;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string, \n    /** @docsNotRequired */\n    urlAfterRedirects: string, \n    /** @docsNotRequired */\n    state: RouterStateSnapshot);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the end of the Resolve phase of routing. See note on\n * `ResolveStart` for use of this experimental API.\n *\n * @experimental\n */\nexport declare class ResolveEnd extends RouterEvent {\n    /** @docsNotRequired */\n    urlAfterRedirects: string;\n    /** @docsNotRequired */\n    state: RouterStateSnapshot;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string, \n    /** @docsNotRequired */\n    urlAfterRedirects: string, \n    /** @docsNotRequired */\n    state: RouterStateSnapshot);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents an event triggered before lazy loading a route config.\n *\n * @experimental\n */\nexport declare class RouteConfigLoadStart {\n    /** @docsNotRequired */\n    route: Route;\n    constructor(\n    /** @docsNotRequired */\n    route: Route);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents an event triggered when a route has been lazy loaded.\n *\n * @experimental\n */\nexport declare class RouteConfigLoadEnd {\n    /** @docsNotRequired */\n    route: Route;\n    constructor(\n    /** @docsNotRequired */\n    route: Route);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ChildActivationEnd` for use of this experimental API.\n *\n * @experimental\n */\nexport declare class ChildActivationStart {\n    /** @docsNotRequired */\n    snapshot: ActivatedRouteSnapshot;\n    constructor(\n    /** @docsNotRequired */\n    snapshot: ActivatedRouteSnapshot);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ChildActivationStart` for use of this experimental API.\n *\n * @experimental\n */\nexport declare class ChildActivationEnd {\n    /** @docsNotRequired */\n    snapshot: ActivatedRouteSnapshot;\n    constructor(\n    /** @docsNotRequired */\n    snapshot: ActivatedRouteSnapshot);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ActivationEnd` for use of this experimental API.\n *\n * @experimental\n */\nexport declare class ActivationStart {\n    /** @docsNotRequired */\n    snapshot: ActivatedRouteSnapshot;\n    constructor(\n    /** @docsNotRequired */\n    snapshot: ActivatedRouteSnapshot);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ActivationStart` for use of this experimental API.\n *\n * @experimental\n */\nexport declare class ActivationEnd {\n    /** @docsNotRequired */\n    snapshot: ActivatedRouteSnapshot;\n    constructor(\n    /** @docsNotRequired */\n    snapshot: ActivatedRouteSnapshot);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents a scrolling event.\n */\nexport declare class Scroll {\n    /** @docsNotRequired */\n    readonly routerEvent: NavigationEnd;\n    /** @docsNotRequired */\n    readonly position: [number, number] | null;\n    /** @docsNotRequired */\n    readonly anchor: string | null;\n    constructor(\n    /** @docsNotRequired */\n    routerEvent: NavigationEnd, \n    /** @docsNotRequired */\n    position: [number, number] | null, \n    /** @docsNotRequired */\n    anchor: string | null);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents a router event, allowing you to track the lifecycle of the router.\n *\n * The sequence of router events is:\n *\n * - `NavigationStart`,\n * - `RouteConfigLoadStart`,\n * - `RouteConfigLoadEnd`,\n * - `RoutesRecognized`,\n * - `GuardsCheckStart`,\n * - `ChildActivationStart`,\n * - `ActivationStart`,\n * - `GuardsCheckEnd`,\n * - `ResolveStart`,\n * - `ResolveEnd`,\n * - `ActivationEnd`\n * - `ChildActivationEnd`\n * - `NavigationEnd`,\n * - `NavigationCancel`,\n * - `NavigationError`\n * - `Scroll`\n *\n *\n */\nexport declare type Event = RouterEvent | RouteConfigLoadStart | RouteConfigLoadEnd | ChildActivationStart | ChildActivationEnd | ActivationStart | ActivationEnd | Scroll;\n"
  },
  {
    "path": "node_modules/@angular/forms/src/form_builder.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AsyncValidatorFn, ValidatorFn } from './directives/validators';\nimport { FormArray, FormControl, FormGroup } from './model';\n/**\n * @description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,\n * `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex\n * forms.\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n */\nexport declare class FormBuilder {\n    /**\n     * @description\n     * Construct a new `FormGroup` instance.\n     *\n     * @param controlsConfig A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param extra An object of configuration options for the `FormGroup`.\n     * * `validator`: A synchronous validator function, or an array of validator functions\n     * * `asyncValidator`: A single async validator or array of async validator functions\n     *\n     */\n    group(controlsConfig: {\n        [key: string]: any;\n    }, extra?: {\n        [key: string]: any;\n    } | null): FormGroup;\n    /**\n     * @description\n     * Construct a new `FormControl` instance.\n     *\n     * @param formState Initializes the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param validator A synchronous validator function, or an array of synchronous validator\n     * functions.\n     *\n     * @param asyncValidator A single async validator or array of async validator functions\n     *\n     * @usageNotes\n     *\n     * ### Initialize a control as disabled\n     *\n     * The following example returns a control with an initial value in a disabled state.\n     *\n     * <code-example path=\"forms/ts/formBuilder/form_builder_example.ts\"\n     *   linenums=\"false\" region=\"disabled-control\">\n     * </code-example>\n     *\n     */\n    control(formState: any, validator?: ValidatorFn | ValidatorFn[] | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null): FormControl;\n    /**\n     * @description\n     * Construct a new `FormArray` instance.\n     *\n     * @param controlsConfig An array of child controls. The key for each child control is its index\n     * in the array.\n     *\n     * @param validator A synchronous validator function, or an array of synchronous validator\n     * functions.\n     *\n     * @param asyncValidator A single async validator or array of async validator functions\n     */\n    array(controlsConfig: any[], validator?: ValidatorFn | ValidatorFn[] | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null): FormArray;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/location/browser_platform_location.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LocationChangeListener, PlatformLocation } from '@angular/common';\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n */\nexport declare class BrowserPlatformLocation extends PlatformLocation {\n    private _doc;\n    readonly location: Location;\n    private _history;\n    constructor(_doc: any);\n    getBaseHrefFromDOM(): string;\n    onPopState(fn: LocationChangeListener): void;\n    onHashChange(fn: LocationChangeListener): void;\n    pathname: string;\n    readonly search: string;\n    readonly hash: string;\n    pushState(state: any, title: string, url: string): void;\n    replaceState(state: any, title: string, url: string): void;\n    forward(): void;\n    back(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/src/module.d.ts",
    "content": "/**\n * Exports `BrowserModule` with additional [dependency-injection providers](guide/glossary#provider)\n * for use with animations. See [Animations](guide/animations).\n * @experimental\n */\nexport declare class BrowserAnimationsModule {\n}\n/**\n * A null player that must be imported to allow disabling of animations.\n * @experimental\n */\nexport declare class NoopAnimationsModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/application_module.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef } from './application_ref';\nimport { IterableDiffers, KeyValueDiffers } from './change_detection/change_detection';\nimport { StaticProvider } from './di';\nexport declare function _iterableDiffersFactory(): IterableDiffers;\nexport declare function _keyValueDiffersFactory(): KeyValueDiffers;\nexport declare function _localeFactory(locale?: string): string;\n/**\n * A built-in [dependency injection token](guide/glossary#di-token)\n * that is used to configure the root injector for bootstrapping.\n */\nexport declare const APPLICATION_MODULE_PROVIDERS: StaticProvider[];\n/**\n * Configures the root injector for an app with\n * providers of `@angular/core` dependencies that `ApplicationRef` needs\n * to bootstrap components.\n *\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * @experimental\n */\nexport declare class ApplicationModule {\n    constructor(appRef: ApplicationRef);\n}\n"
  },
  {
    "path": "node_modules/@angular/core/testing/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/compiler/testing/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/tools/tools.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentRef } from '@angular/core';\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * @experimental All debugging apis are currently experimental.\n */\nexport declare function enableDebugTools<T>(ref: ComponentRef<T>): ComponentRef<T>;\n/**\n * Disables Angular tools.\n *\n * @experimental All debugging apis are currently experimental.\n */\nexport declare function disableDebugTools(): void;\n"
  },
  {
    "path": "node_modules/@angular/common/http/src/xsrf.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpHandler } from './backend';\nimport { HttpInterceptor } from './interceptor';\nimport { HttpRequest } from './request';\nimport { HttpEvent } from './response';\nexport declare const XSRF_COOKIE_NAME: InjectionToken<string>;\nexport declare const XSRF_HEADER_NAME: InjectionToken<string>;\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n *\n */\nexport declare abstract class HttpXsrfTokenExtractor {\n    /**\n     * Get the XSRF token to use with an outgoing request.\n     *\n     * Will be called for every request, so the token may change between requests.\n     */\n    abstract getToken(): string | null;\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nexport declare class HttpXsrfCookieExtractor implements HttpXsrfTokenExtractor {\n    private doc;\n    private platform;\n    private cookieName;\n    private lastCookieString;\n    private lastToken;\n    constructor(doc: any, platform: string, cookieName: string);\n    getToken(): string | null;\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nexport declare class HttpXsrfInterceptor implements HttpInterceptor {\n    private tokenService;\n    private headerName;\n    constructor(tokenService: HttpXsrfTokenExtractor, headerName: string);\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/i18n/localization.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { Plural } from './locale_data_api';\n/**\n * @deprecated from v5\n */\nexport declare const DEPRECATED_PLURAL_FN: InjectionToken<boolean>;\n/**\n * @experimental\n */\nexport declare abstract class NgLocalization {\n    abstract getPluralCategory(value: any, locale?: string): string;\n}\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n */\nexport declare function getPluralCategory(value: number, cases: string[], ngLocalization: NgLocalization, locale?: string): string;\n/**\n * Returns the plural case based on the locale\n *\n * @experimental\n */\nexport declare class NgLocaleLocalization extends NgLocalization {\n    protected locale: string;\n    /** @deprecated from v5 */\n    protected deprecatedPluralFn?: ((locale: string, value: string | number) => Plural) | null | undefined;\n    constructor(locale: string, \n    /** @deprecated from v5 */\n    deprecatedPluralFn?: ((locale: string, value: string | number) => Plural) | null | undefined);\n    getPluralCategory(value: any, locale?: string): string;\n}\n/**\n * Returns the plural case based on the locale\n *\n * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts\n * @experimental\n */\nexport declare function getPluralCase(locale: string, nLike: number | string): Plural;\n"
  },
  {
    "path": "node_modules/@angular/common/src/directives/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Provider } from '@angular/core';\nimport { NgClass } from './ng_class';\nimport { NgComponentOutlet } from './ng_component_outlet';\nimport { NgForOf, NgForOfContext } from './ng_for_of';\nimport { NgIf, NgIfContext } from './ng_if';\nimport { NgPlural, NgPluralCase } from './ng_plural';\nimport { NgStyle } from './ng_style';\nimport { NgSwitch, NgSwitchCase, NgSwitchDefault } from './ng_switch';\nimport { NgTemplateOutlet } from './ng_template_outlet';\nexport { NgClass, NgComponentOutlet, NgForOf, NgForOfContext, NgIf, NgIfContext, NgPlural, NgPluralCase, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgTemplateOutlet };\n/**\n * A collection of Angular directives that are likely to be used in each and every Angular\n * application.\n */\nexport declare const COMMON_DIRECTIVES: Provider[];\n"
  },
  {
    "path": "node_modules/@angular/router/src/components/empty_outlet.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This component is used internally within the router to be a placeholder when an empty\n * router-outlet is needed. For example, with a config such as:\n *\n * `{path: 'parent', outlet: 'nav', children: [...]}`\n *\n * In order to render, there needs to be a component on this config, which will default\n * to this `EmptyOutletComponent`.\n */\nexport declare class EmptyOutletComponent {\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/pipes/deprecated/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Provider } from '@angular/core';\nimport { DeprecatedDatePipe } from './date_pipe';\nimport { DeprecatedCurrencyPipe, DeprecatedDecimalPipe, DeprecatedPercentPipe } from './number_pipe';\nexport { DeprecatedCurrencyPipe, DeprecatedDatePipe, DeprecatedDecimalPipe, DeprecatedPercentPipe, };\n/**\n * A collection of deprecated i18n pipes that require intl api\n *\n * @deprecated from v5\n */\nexport declare const COMMON_DEPRECATED_I18N_PIPES: Provider[];\n"
  },
  {
    "path": "node_modules/@angular/common/http/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/core/src/util/property.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare function getClosureSafeProperty<T>(objWithPropertyToExtract: T): string;\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nexport declare function fillProperties(target: {\n    [key: string]: string;\n}, source: {\n    [key: string]: string;\n}): void;\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/r3_test_bed.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, Directive, Injector, NgModule, Pipe, PlatformRef, Type } from '@angular/core';\nimport { ComponentFixture } from './component_fixture';\nimport { MetadataOverride } from './metadata_override';\nimport { TestBed } from './test_bed';\nimport { TestBedStatic, TestModuleMetadata } from './test_bed_common';\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n */\nexport declare class TestBedRender3 implements Injector, TestBed {\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @experimental\n     */\n    static initTestEnvironment(ngModule: Type<any> | Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): TestBed;\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @experimental\n     */\n    static resetTestEnvironment(): void;\n    static configureCompiler(config: {\n        providers?: any[];\n        useJit?: boolean;\n    }): TestBedStatic;\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     */\n    static configureTestingModule(moduleDef: TestModuleMetadata): TestBedStatic;\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     */\n    static compileComponents(): Promise<any>;\n    static overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): TestBedStatic;\n    static overrideComponent(component: Type<any>, override: MetadataOverride<Component>): TestBedStatic;\n    static overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): TestBedStatic;\n    static overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): TestBedStatic;\n    static overrideTemplate(component: Type<any>, template: string): TestBedStatic;\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    static overrideTemplateUsingTestingModule(component: Type<any>, template: string): TestBedStatic;\n    overrideTemplateUsingTestingModule(component: Type<any>, template: string): void;\n    static overrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): TestBedStatic;\n    static overrideProvider(token: any, provider: {\n        useValue: any;\n    }): TestBedStatic;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     *\n     * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n     */\n    static deprecatedOverrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): void;\n    static deprecatedOverrideProvider(token: any, provider: {\n        useValue: any;\n    }): void;\n    static get(token: any, notFoundValue?: any): any;\n    static createComponent<T>(component: Type<T>): ComponentFixture<T>;\n    static resetTestingModule(): TestBedStatic;\n    platform: PlatformRef;\n    ngModule: Type<any> | Type<any>[];\n    private _moduleOverrides;\n    private _componentOverrides;\n    private _directiveOverrides;\n    private _pipeOverrides;\n    private _providerOverrides;\n    private _rootProviderOverrides;\n    private _providers;\n    private _declarations;\n    private _imports;\n    private _schemas;\n    private _activeFixtures;\n    private _moduleRef;\n    private _instantiated;\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @experimental\n     */\n    initTestEnvironment(ngModule: Type<any> | Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): void;\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @experimental\n     */\n    resetTestEnvironment(): void;\n    resetTestingModule(): void;\n    configureCompiler(config: {\n        providers?: any[];\n        useJit?: boolean;\n    }): void;\n    configureTestingModule(moduleDef: TestModuleMetadata): void;\n    compileComponents(): Promise<any>;\n    get(token: any, notFoundValue?: any): any;\n    execute(tokens: any[], fn: Function, context?: any): any;\n    overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void;\n    overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void;\n    overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void;\n    overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     */\n    overrideProvider(token: any, provider: {\n        useFactory?: Function;\n        useValue?: any;\n        deps?: any[];\n    }): void;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     *\n     * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n     */\n    deprecatedOverrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): void;\n    deprecatedOverrideProvider(token: any, provider: {\n        useValue: any;\n    }): void;\n    createComponent<T>(type: Type<T>): ComponentFixture<T>;\n    private _initIfNeeded;\n    private _getResolvers;\n    private _assertNotInstantiated;\n    private _createTestModule;\n}\nexport declare function _getTestBedRender3(): TestBedRender3;\n"
  },
  {
    "path": "node_modules/@angular/router/src/directives/router_link_active.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, OnChanges, OnDestroy, QueryList, Renderer2, SimpleChanges } from '@angular/core';\nimport { Router } from '../router';\nimport { RouterLink, RouterLinkWithHref } from './router_link';\n/**\n *\n * @description\n *\n * Lets you add a CSS class to an element when the link's route becomes active.\n *\n * This directive lets you add a CSS class to an element when the link's route\n * becomes active.\n *\n * Consider the following example:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n *\n * When the url is either '/user' or '/user/bob', the active-link class will\n * be added to the `a` tag. If the url changes, the class will be removed.\n *\n * You can set more than one class, as follows:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n *\n * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\n * only when the url matches the link exactly.\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n *\n * You can assign the RouterLinkActive instance to a template variable and directly check\n * the `isActive` status.\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n *\n * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n *\n * ```\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim</a>\n *   <a routerLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n *\n * This will set the active-link class on the div tag if the url is either '/user/jim' or\n * '/user/bob'.\n *\n * @ngModule RouterModule\n *\n *\n */\nexport declare class RouterLinkActive implements OnChanges, OnDestroy, AfterContentInit {\n    private router;\n    private element;\n    private renderer;\n    private cdr;\n    links: QueryList<RouterLink>;\n    linksWithHrefs: QueryList<RouterLinkWithHref>;\n    private classes;\n    private subscription;\n    readonly isActive: boolean;\n    routerLinkActiveOptions: {\n        exact: boolean;\n    };\n    constructor(router: Router, element: ElementRef, renderer: Renderer2, cdr: ChangeDetectorRef);\n    ngAfterContentInit(): void;\n    routerLinkActive: string[] | string;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    private update;\n    private isLinkActive;\n    private hasActiveLinks;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/provider.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\n/**\n * Configures the `Injector` to return a value for a token.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ValueSansProvider'}\n *\n * @experimental\n */\nexport interface ValueSansProvider {\n    /**\n     * The value to inject.\n     */\n    useValue: any;\n}\n/**\n * Configures the `Injector` to return a value for a token.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ValueProvider'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n */\nexport interface ValueProvider extends ValueSansProvider {\n    /**\n     * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n     */\n    provide: any;\n    /**\n     * If true, then injector returns an array of instances. This is useful to allow multiple\n     * providers spread across many files to provide configuration information to a common token.\n     */\n    multi?: boolean;\n}\n/**\n * Configures the `Injector` to return an instance of `useClass` for a token.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='StaticClassSansProvider'}\n *\n * @experimental\n */\nexport interface StaticClassSansProvider {\n    /**\n     * An optional class to instantiate for the `token`. (If not provided `provide` is assumed to be a\n     * class to instantiate)\n     */\n    useClass: Type<any>;\n    /**\n     * A list of `token`s which need to be resolved by the injector. The list of values is then\n     * used as arguments to the `useClass` constructor.\n     */\n    deps: any[];\n}\n/**\n * Configures the `Injector` to return an instance of `useClass` for a token.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='StaticClassProvider'}\n *\n * Note that following two providers are not equal:\n *\n * {@example core/di/ts/provider_spec.ts region='StaticClassProviderDifference'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n */\nexport interface StaticClassProvider extends StaticClassSansProvider {\n    /**\n     * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n     */\n    provide: any;\n    /**\n     * If true, then injector returns an array of instances. This is useful to allow multiple\n     * providers spread across many files to provide configuration information to a common token.\n     */\n    multi?: boolean;\n}\n/**\n * Configures the `Injector` to return an instance of a token.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Injectable(SomeModule, {deps: []})\n * class MyService {}\n * ```\n *\n * @experimental\n */\nexport interface ConstructorSansProvider {\n    /**\n     * A list of `token`s which need to be resolved by the injector. The list of values is then\n     * used as arguments to the `useClass` constructor.\n     */\n    deps?: any[];\n}\n/**\n * Configures the `Injector` to return an instance of a token.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n */\nexport interface ConstructorProvider extends ConstructorSansProvider {\n    /**\n     * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n     */\n    provide: Type<any>;\n    /**\n     * If true, then injector returns an array of instances. This is useful to allow multiple\n     * providers spread across many files to provide configuration information to a common token.\n     */\n    multi?: boolean;\n}\n/**\n * Configures the `Injector` to return a value of another `useExisting` token.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ExistingSansProvider'}\n */\nexport interface ExistingSansProvider {\n    /**\n     * Existing `token` to return. (equivalent to `injector.get(useExisting)`)\n     */\n    useExisting: any;\n}\n/**\n * Configures the `Injector` to return a value of another `useExisting` token.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ExistingProvider'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n */\nexport interface ExistingProvider extends ExistingSansProvider {\n    /**\n     * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n     */\n    provide: any;\n    /**\n     * If true, then injector returns an array of instances. This is useful to allow multiple\n     * providers spread across many files to provide configuration information to a common token.\n     */\n    multi?: boolean;\n}\n/**\n * Configures the `Injector` to return a value by invoking a `useFactory` function.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='FactorySansProvider'}\n *\n * @experimental\n */\nexport interface FactorySansProvider {\n    /**\n     * A function to invoke to create a value for this `token`. The function is invoked with\n     * resolved values of `token`s in the `deps` field.\n     */\n    useFactory: Function;\n    /**\n     * A list of `token`s which need to be resolved by the injector. The list of values is then\n     * used as arguments to the `useFactory` function.\n     */\n    deps?: any[];\n}\n/**\n * Configures the `Injector` to return a value by invoking a `useFactory` function.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='FactoryProvider'}\n *\n * Dependencies can also be marked as optional:\n *\n * {@example core/di/ts/provider_spec.ts region='FactoryProviderOptionalDeps'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n */\nexport interface FactoryProvider extends FactorySansProvider {\n    /**\n     * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n     */\n    provide: any;\n    /**\n     * If true, then injector returns an array of instances. This is useful to allow multiple\n     * providers spread across many files to provide configuration information to a common token.\n     */\n    multi?: boolean;\n}\n/**\n * Describes how the `Injector` should be configured in a static way (Without reflection).\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @see `ValueProvider`\n * @see `ExistingProvider`\n * @see `FactoryProvider`\n */\nexport declare type StaticProvider = ValueProvider | ExistingProvider | StaticClassProvider | ConstructorProvider | FactoryProvider | any[];\n/**\n * Configures the `Injector` to return an instance of `Type` when `Type' is used as the token.\n *\n * Create an instance by invoking the `new` operator and supplying additional arguments.\n * This form is a short form of `TypeProvider`;\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='TypeProvider'}\n */\nexport interface TypeProvider extends Type<any> {\n}\n/**\n * Configures the `Injector` to return a value by invoking a `useClass` function.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ClassSansProvider'}\n *\n * @experimental\n */\nexport interface ClassSansProvider {\n    /**\n     * Class to instantiate for the `token`.\n     */\n    useClass: Type<any>;\n}\n/**\n * Configures the `Injector` to return an instance of `useClass` for a token.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ClassProvider'}\n *\n * Note that following two providers are not equal:\n *\n * {@example core/di/ts/provider_spec.ts region='ClassProviderDifference'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n */\nexport interface ClassProvider extends ClassSansProvider {\n    /**\n     * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n     */\n    provide: any;\n    /**\n     * If true, then injector returns an array of instances. This is useful to allow multiple\n     * providers spread across many files to provide configuration information to a common token.\n     */\n    multi?: boolean;\n}\n/**\n * Describes how the `Injector` should be configured.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @see `TypeProvider`\n * @see `ClassProvider`\n * @see `StaticProvider`\n */\nexport declare type Provider = TypeProvider | ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider | any[];\n"
  },
  {
    "path": "node_modules/@angular/router/src/utils/collection.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModuleFactory } from '@angular/core';\nimport { Observable } from 'rxjs';\nexport declare function shallowEqualArrays(a: any[], b: any[]): boolean;\nexport declare function shallowEqual(a: {\n    [x: string]: any;\n}, b: {\n    [x: string]: any;\n}): boolean;\n/**\n * Flattens single-level nested arrays.\n */\nexport declare function flatten<T>(arr: T[][]): T[];\n/**\n * Return the last element of an array.\n */\nexport declare function last<T>(a: T[]): T | null;\n/**\n * Verifys all booleans in an array are `true`.\n */\nexport declare function and(bools: boolean[]): boolean;\nexport declare function forEach<K, V>(map: {\n    [key: string]: V;\n}, callback: (v: V, k: string) => void): void;\nexport declare function waitForMap<A, B>(obj: {\n    [k: string]: A;\n}, fn: (k: string, a: A) => Observable<B>): Observable<{\n    [k: string]: B;\n}>;\n/**\n * ANDs Observables by merging all input observables, reducing to an Observable verifying all\n * input Observables return `true`.\n */\nexport declare function andObservables(observables: Observable<Observable<any>>): Observable<boolean>;\nexport declare function wrapIntoObservable<T>(value: T | NgModuleFactory<T> | Promise<T> | Observable<T>): Observable<T>;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/query.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { QueryList } from '../../linker';\nimport { Type } from '../../type';\nimport { TContainerNode, TElementContainerNode, TElementNode } from './node';\n/** Used for tracking queries (e.g. ViewChild, ContentChild). */\nexport interface LQueries {\n    /**\n     * The parent LQueries instance.\n     *\n     * When there is a content query, a new LQueries instance is created to avoid mutating any\n     * existing LQueries. After we are done searching content children, the parent property allows\n     * us to traverse back up to the original LQueries instance to continue to search for matches\n     * in the main view.\n     */\n    parent: LQueries | null;\n    /**\n     * Ask queries to prepare copy of itself. This assures that tracking new queries on content nodes\n     * doesn't mutate list of queries tracked on a parent node. We will clone LQueries before\n     * constructing content queries.\n     */\n    clone(): LQueries;\n    /**\n     * Notify `LQueries` that a new `TNode` has been created and needs to be added to query results\n     * if matching query predicate.\n     */\n    addNode(tNode: TElementNode | TContainerNode | TElementContainerNode): LQueries | null;\n    /**\n     * Notify `LQueries` that a new LContainer was added to ivy data structures. As a result we need\n     * to prepare room for views that might be inserted into this container.\n     */\n    container(): LQueries | null;\n    /**\n     * Notify `LQueries` that a new `LView` has been created. As a result we need to prepare room\n     * and collect nodes that match query predicate.\n     */\n    createView(): LQueries | null;\n    /**\n     * Notify `LQueries` that a new `LView` has been added to `LContainer`. As a result all\n     * the matching nodes from this view should be added to container's queries.\n     */\n    insertView(newViewIndex: number): void;\n    /**\n     * Notify `LQueries` that an `LView` has been removed from `LContainer`. As a result all\n     * the matching nodes from this view should be removed from container's queries.\n     */\n    removeView(): void;\n    /**\n     * Add additional `QueryList` to track.\n     *\n     * @param queryList `QueryList` to update with changes.\n     * @param predicate Either `Type` or selector array of [key, value] predicates.\n     * @param descend If true the query will recursively apply to the children.\n     * @param read Indicates which token should be read from DI for this query.\n     */\n    track<T>(queryList: QueryList<T>, predicate: Type<any> | string[], descend?: boolean, read?: Type<T>): void;\n}\nexport declare const unusedValueExportToPlacateAjd = 1;\n"
  },
  {
    "path": "node_modules/@angular/router/upgrade/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/upgrade';\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/view.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '../../di/injector';\nimport { QueryList } from '../../linker';\nimport { Sanitizer } from '../../sanitization/security';\nimport { PlayerHandler } from '../interfaces/player';\nimport { LContainer } from './container';\nimport { ComponentDef, ComponentQuery, ComponentTemplate, DirectiveDef, DirectiveDefList, HostBindingsFunction, PipeDef, PipeDefList } from './definition';\nimport { TElementNode, TNode, TViewNode } from './node';\nimport { LQueries } from './query';\nimport { RElement, Renderer3 } from './renderer';\nimport { StylingContext } from './styling';\n/** Size of LViewData's header. Necessary to adjust for it when setting slots.  */\nexport declare const HEADER_OFFSET = 17;\nexport declare const TVIEW = 0;\nexport declare const FLAGS = 1;\nexport declare const PARENT = 2;\nexport declare const NEXT = 3;\nexport declare const QUERIES = 4;\nexport declare const HOST = 5;\nexport declare const HOST_NODE = 6;\nexport declare const BINDING_INDEX = 7;\nexport declare const CLEANUP = 8;\nexport declare const CONTEXT = 9;\nexport declare const INJECTOR = 10;\nexport declare const RENDERER = 11;\nexport declare const SANITIZER = 12;\nexport declare const TAIL = 13;\nexport declare const CONTAINER_INDEX = 14;\nexport declare const CONTENT_QUERIES = 15;\nexport declare const DECLARATION_VIEW = 16;\nexport interface OpaqueViewState {\n    '__brand__': 'Brand for OpaqueViewState that nothing will match';\n}\n/**\n * `LViewData` stores all of the information needed to process the instructions as\n * they are invoked from the template. Each embedded view and component view has its\n * own `LViewData`. When processing a particular view, we set the `viewData` to that\n * `LViewData`. When that view is done processing, the `viewData` is set back to\n * whatever the original `viewData` was before (the parent `LViewData`).\n *\n * Keeping separate state for each view facilities view insertion / deletion, so we\n * don't have to edit the data array based on which views are present.\n */\nexport interface LViewData extends Array<any> {\n    /**\n     * The static data for this view. We need a reference to this so we can easily walk up the\n     * node tree in DI and get the TView.data array associated with a node (where the\n     * directive defs are stored).\n     */\n    [TVIEW]: TView;\n    /** Flags for this view. See LViewFlags for more info. */\n    [FLAGS]: LViewFlags;\n    /**\n     * The parent view is needed when we exit the view and must restore the previous\n     * `LViewData`. Without this, the render method would have to keep a stack of\n     * views as it is recursively rendering templates.\n     *\n     * This is the \"insertion\" view for embedded views. This allows us to properly\n     * destroy embedded views.\n     */\n    [PARENT]: LViewData | null;\n    /**\n     *\n     * The next sibling LViewData or LContainer.\n     *\n     * Allows us to propagate between sibling view states that aren't in the same\n     * container. Embedded views already have a node.next, but it is only set for\n     * views in the same container. We need a way to link component views and views\n     * across containers as well.\n     */\n    [NEXT]: LViewData | LContainer | null;\n    /** Queries active for this view - nodes from a view are reported to those queries. */\n    [QUERIES]: LQueries | null;\n    /**\n     * The host node for this LViewData instance, if this is a component view.\n     *\n     * If this is an embedded view, HOST will be null.\n     */\n    [HOST]: RElement | StylingContext | null;\n    /**\n     * Pointer to the `TViewNode` or `TElementNode` which represents the root of the view.\n     *\n     * If `TViewNode`, this is an embedded view of a container. We need this to be able to\n     * efficiently find the `LViewNode` when inserting the view into an anchor.\n     *\n     * If `TElementNode`, this is the LView of a component.\n     *\n     * If null, this is the root view of an application (root component is in this view).\n     */\n    [HOST_NODE]: TViewNode | TElementNode | null;\n    /**\n     * The binding index we should access next.\n     *\n     * This is stored so that bindings can continue where they left off\n     * if a view is left midway through processing bindings (e.g. if there is\n     * a setter that creates an embedded view, like in ngIf).\n     */\n    [BINDING_INDEX]: number;\n    /**\n     * When a view is destroyed, listeners need to be released and outputs need to be\n     * unsubscribed. This context array stores both listener functions wrapped with\n     * their context and output subscription instances for a particular view.\n     *\n     * These change per LView instance, so they cannot be stored on TView. Instead,\n     * TView.cleanup saves an index to the necessary context in this array.\n     */\n    [CLEANUP]: any[] | null;\n    /**\n     * - For dynamic views, this is the context with which to render the template (e.g.\n     *   `NgForContext`), or `{}` if not defined explicitly.\n     * - For root view of the root component the context contains change detection data.\n     * - For non-root components, the context is the component instance,\n     * - For inline views, the context is null.\n     */\n    [CONTEXT]: {} | RootContext | null;\n    /** An optional Module Injector to be used as fall back after Element Injectors are consulted. */\n    [INJECTOR]: Injector | null;\n    /** Renderer to be used for this view. */\n    [RENDERER]: Renderer3;\n    /** An optional custom sanitizer. */\n    [SANITIZER]: Sanitizer | null;\n    /**\n     * The last LViewData or LContainer beneath this LViewData in the hierarchy.\n     *\n     * The tail allows us to quickly add a new state to the end of the view list\n     * without having to propagate starting from the first child.\n     */\n    [TAIL]: LViewData | LContainer | null;\n    /**\n     * The index of the parent container's host node. Applicable only to embedded views that\n     * have been inserted dynamically. Will be -1 for component views and inline views.\n     *\n     * This is necessary to jump from dynamically created embedded views to their parent\n     * containers because their parent cannot be stored on the TViewNode (views may be inserted\n     * in multiple containers, so the parent cannot be shared between view instances).\n     */\n    [CONTAINER_INDEX]: number;\n    /**\n     * Stores QueryLists associated with content queries of a directive. This data structure is\n     * filled-in as part of a directive creation process and is later used to retrieve a QueryList to\n     * be refreshed.\n     */\n    [CONTENT_QUERIES]: QueryList<any>[] | null;\n    /**\n     * View where this view's template was declared.\n     *\n     * Only applicable for dynamically created views. Will be null for inline/component views.\n     *\n     * The template for a dynamically created view may be declared in a different view than\n     * it is inserted. We already track the \"insertion view\" (view where the template was\n     * inserted) in LViewData[PARENT], but we also need access to the \"declaration view\"\n     * (view where the template was declared). Otherwise, we wouldn't be able to call the\n     * view's template function with the proper contexts. Context should be inherited from\n     * the declaration view tree, not the insertion view tree.\n     *\n     * Example (AppComponent template):\n     *\n     * <ng-template #foo></ng-template>       <-- declared here -->\n     * <some-comp [tpl]=\"foo\"></some-comp>    <-- inserted inside this component -->\n     *\n     * The <ng-template> above is declared in the AppComponent template, but it will be passed into\n     * SomeComp and inserted there. In this case, the declaration view would be the AppComponent,\n     * but the insertion view would be SomeComp. When we are removing views, we would want to\n     * traverse through the insertion view to clean up listeners. When we are calling the\n     * template function during change detection, we need the declaration view to get inherited\n     * context.\n     */\n    [DECLARATION_VIEW]: LViewData | null;\n}\n/** Flags associated with an LView (saved in LViewData[FLAGS]) */\nexport declare const enum LViewFlags {\n    /**\n     * Whether or not the view is in creationMode.\n     *\n     * This must be stored in the view rather than using `data` as a marker so that\n     * we can properly support embedded views. Otherwise, when exiting a child view\n     * back into the parent view, `data` will be defined and `creationMode` will be\n     * improperly reported as false.\n     */\n    CreationMode = 1,\n    /** Whether this view has default change detection strategy (checks always) or onPush */\n    CheckAlways = 2,\n    /** Whether or not this view is currently dirty (needing check) */\n    Dirty = 4,\n    /** Whether or not this view is currently attached to change detection tree. */\n    Attached = 8,\n    /**\n     *  Whether or not the init hooks have run.\n     *\n     * If on, the init hooks haven't yet been run and should be executed by the first component that\n     * runs OR the first cR() instruction that runs (so inits are run for the top level view before\n     * any embedded views).\n     */\n    RunInit = 16,\n    /** Whether or not this view is destroyed. */\n    Destroyed = 32,\n    /** Whether or not this view is the root view */\n    IsRoot = 64\n}\n/**\n * The static data for an LView (shared between all templates of a\n * given type).\n *\n * Stored on the template function as ngPrivateData.\n */\nexport interface TView {\n    /**\n     * ID for inline views to determine whether a view is the same as the previous view\n     * in a certain position. If it's not, we know the new view needs to be inserted\n     * and the one that exists needs to be removed (e.g. if/else statements)\n     *\n     * If this is -1, then this is a component view or a dynamically created view.\n     */\n    readonly id: number;\n    /**\n     * This is a blueprint used to generate LViewData instances for this TView. Copying this\n     * blueprint is faster than creating a new LViewData from scratch.\n     */\n    blueprint: LViewData;\n    /**\n     * The template function used to refresh the view of dynamically created views\n     * and components. Will be null for inline views.\n     */\n    template: ComponentTemplate<{}> | null;\n    /**\n     * A function containing query-related instructions.\n     */\n    viewQuery: ComponentQuery<{}> | null;\n    /**\n     * Pointer to the `TNode` that represents the root of the view.\n     *\n     * If this is a `TNode` for an `LViewNode`, this is an embedded view of a container.\n     * We need this pointer to be able to efficiently find this node when inserting the view\n     * into an anchor.\n     *\n     * If this is a `TElementNode`, this is the view of a root component. It has exactly one\n     * root TNode.\n     *\n     * If this is null, this is the view of a component that is not at root. We do not store\n     * the host TNodes for child component views because they can potentially have several\n     * different host TNodes, depending on where the component is being used. These host\n     * TNodes cannot be shared (due to different indices, etc).\n     */\n    node: TViewNode | TElementNode | null;\n    /** Whether or not this template has been processed. */\n    firstTemplatePass: boolean;\n    /** Static data equivalent of LView.data[]. Contains TNodes. */\n    data: TData;\n    /**\n     * The binding start index is the index at which the data array\n     * starts to store bindings only. Saving this value ensures that we\n     * will begin reading bindings at the correct point in the array when\n     * we are in update mode.\n     */\n    bindingStartIndex: number;\n    /**\n     * The index where the \"expando\" section of `LViewData` begins. The expando\n     * section contains injectors, directive instances, and host binding values.\n     * Unlike the \"consts\" and \"vars\" sections of `LViewData`, the length of this\n     * section cannot be calculated at compile-time because directives are matched\n     * at runtime to preserve locality.\n     *\n     * We store this start index so we know where to start checking host bindings\n     * in `setHostBindings`.\n     */\n    expandoStartIndex: number;\n    /**\n     * Index of the host node of the first LView or LContainer beneath this LView in\n     * the hierarchy.\n     *\n     * Necessary to store this so views can traverse through their nested views\n     * to remove listeners and call onDestroy callbacks.\n     *\n     * For embedded views, we store the index of an LContainer's host rather than the first\n     * LView to avoid managing splicing when views are added/removed.\n     */\n    childIndex: number;\n    /**\n     * A reference to the first child node located in the view.\n     */\n    firstChild: TNode | null;\n    /**\n     * Selector matches for a node are temporarily cached on the TView so the\n     * DI system can eagerly instantiate directives on the same node if they are\n     * created out of order. They are overwritten after each node.\n     *\n     * <div dirA dirB></div>\n     *\n     * e.g. DirA injects DirB, but DirA is created first. DI should instantiate\n     * DirB when it finds that it's on the same node, but not yet created.\n     *\n     * Even indices: Directive defs\n     * Odd indices:\n     *   - Null if the associated directive hasn't been instantiated yet\n     *   - Directive index, if associated directive has been created\n     *   - String, temporary 'CIRCULAR' token set while dependencies are being resolved\n     */\n    currentMatches: CurrentMatchesList | null;\n    /**\n     * Set of instructions used to process host bindings efficiently.\n     *\n     * See VIEW_DATA.md for more information.\n     */\n    expandoInstructions: (number | HostBindingsFunction)[] | null;\n    /**\n     * Full registry of directives and components that may be found in this view.\n     *\n     * It's necessary to keep a copy of the full def list on the TView so it's possible\n     * to render template functions without a host component.\n     */\n    directiveRegistry: DirectiveDefList | null;\n    /**\n     * Full registry of pipes that may be found in this view.\n     *\n     * The property is either an array of `PipeDefs`s or a function which returns the array of\n     * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n     *\n     * It's necessary to keep a copy of the full def list on the TView so it's possible\n     * to render template functions without a host component.\n     */\n    pipeRegistry: PipeDefList | null;\n    /**\n     * Array of ngOnInit and ngDoCheck hooks that should be executed for this view in\n     * creation mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     */\n    initHooks: HookData | null;\n    /**\n     * Array of ngDoCheck hooks that should be executed for this view in update mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     */\n    checkHooks: HookData | null;\n    /**\n     * Array of ngAfterContentInit and ngAfterContentChecked hooks that should be executed\n     * for this view in creation mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     */\n    contentHooks: HookData | null;\n    /**\n     * Array of ngAfterContentChecked hooks that should be executed for this view in update\n     * mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     */\n    contentCheckHooks: HookData | null;\n    /**\n     * Array of ngAfterViewInit and ngAfterViewChecked hooks that should be executed for\n     * this view in creation mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     */\n    viewHooks: HookData | null;\n    /**\n     * Array of ngAfterViewChecked hooks that should be executed for this view in\n     * update mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     */\n    viewCheckHooks: HookData | null;\n    /**\n     * Array of ngOnDestroy hooks that should be executed when this view is destroyed.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     */\n    destroyHooks: HookData | null;\n    /**\n     * Array of pipe ngOnDestroy hooks that should be executed when this view is destroyed.\n     *\n     * Even indices: Index of pipe in data\n     * Odd indices: Hook function\n     *\n     * These must be stored separately from directive destroy hooks because their contexts\n     * are stored in data.\n     */\n    pipeDestroyHooks: HookData | null;\n    /**\n     * When a view is destroyed, listeners need to be released and outputs need to be\n     * unsubscribed. This cleanup array stores both listener data (in chunks of 4)\n     * and output data (in chunks of 2) for a particular view. Combining the arrays\n     * saves on memory (70 bytes per array) and on a few bytes of code size (for two\n     * separate for loops).\n     *\n     * If it's a native DOM listener being stored:\n     * 1st index is: event name to remove\n     * 2nd index is: index of native element in LView.data[]\n     * 3rd index is: index of wrapped listener function in LView.cleanupInstances[]\n     * 4th index is: useCapture boolean\n     *\n     * If it's a renderer2 style listener or ViewRef destroy hook being stored:\n     * 1st index is: index of the cleanup function in LView.cleanupInstances[]\n     * 2nd index is: null\n     *\n     * If it's an output subscription or query list destroy hook:\n     * 1st index is: output unsubscribe function / query list destroy function\n     * 2nd index is: index of function context in LView.cleanupInstances[]\n     */\n    cleanup: any[] | null;\n    /**\n     * A list of element indices for child components that will need to be\n     * refreshed when the current view has finished its check. These indices have\n     * already been adjusted for the HEADER_OFFSET.\n     *\n     */\n    components: number[] | null;\n    /**\n     * A list of indices for child directives that have content queries.\n     *\n     * Even indices: Directive indices\n     * Odd indices: Starting index of content queries (stored in CONTENT_QUERIES) for this directive\n     */\n    contentQueries: number[] | null;\n}\nexport declare const enum RootContextFlags {\n    Empty = 0,\n    DetectChanges = 1,\n    FlushPlayers = 2\n}\n/**\n * RootContext contains information which is shared for all components which\n * were bootstrapped with {@link renderComponent}.\n */\nexport interface RootContext {\n    /**\n     * A function used for scheduling change detection in the future. Usually\n     * this is `requestAnimationFrame`.\n     */\n    scheduler: (workFn: () => void) => void;\n    /**\n     * A promise which is resolved when all components are considered clean (not dirty).\n     *\n     * This promise is overwritten every time a first call to {@link markDirty} is invoked.\n     */\n    clean: Promise<null>;\n    /**\n     * RootComponents - The components that were instantiated by the call to\n     * {@link renderComponent}.\n     */\n    components: {}[];\n    /**\n     * The player flushing handler to kick off all animations\n     */\n    playerHandler: PlayerHandler | null;\n    /**\n     * What render-related operations to run once a scheduler has been set\n     */\n    flags: RootContextFlags;\n}\n/**\n * Array of hooks that should be executed for a view and their directive indices.\n *\n * Even indices: Directive index\n * Odd indices: Hook function\n */\nexport declare type HookData = (number | (() => void))[];\n/**\n * Static data that corresponds to the instance-specific data array on an LView.\n *\n * Each node's static data is stored in tData at the same index that it's stored\n * in the data array.  Any nodes that do not have static data store a null value in\n * tData to avoid a sparse array.\n *\n * Each pipe's definition is stored here at the same index as its pipe instance in\n * the data array.\n *\n * Injector bloom filters are also stored here.\n */\nexport declare type TData = (TNode | PipeDef<any> | DirectiveDef<any> | ComponentDef<any> | number | null)[];\n/** Type for TView.currentMatches */\nexport declare type CurrentMatchesList = [DirectiveDef<any>, (string | number | null)];\nexport declare const unusedValueExportToPlacateAjd = 1;\n"
  },
  {
    "path": "node_modules/@angular/common/http/src/interceptor.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpHandler } from './backend';\nimport { HttpRequest } from './request';\nimport { HttpEvent } from './response';\n/**\n * Intercepts `HttpRequest` and handles them.\n *\n * Most interceptors will transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n *\n * In rare cases, interceptors may wish to completely handle a request themselves,\n * and not delegate to the remainder of the chain. This behavior is allowed.\n *\n *\n */\nexport interface HttpInterceptor {\n    /**\n     * Intercept an outgoing `HttpRequest` and optionally transform it or the\n     * response.\n     *\n     * Typically an interceptor will transform the outgoing request before returning\n     * `next.handle(transformedReq)`. An interceptor may choose to transform the\n     * response event stream as well, by applying additional Rx operators on the stream\n     * returned by `next.handle()`.\n     *\n     * More rarely, an interceptor may choose to completely handle the request itself,\n     * and compose a new event stream instead of invoking `next.handle()`. This is\n     * acceptable behavior, but keep in mind further interceptors will be skipped entirely.\n     *\n     * It is also rare but valid for an interceptor to return multiple responses on the\n     * event stream for a single request.\n     */\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nexport declare class HttpInterceptorHandler implements HttpHandler {\n    private next;\n    private interceptor;\n    constructor(next: HttpHandler, interceptor: HttpInterceptor);\n    handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n/**\n * A multi-provider token which represents the array of `HttpInterceptor`s that\n * are registered.\n *\n *\n */\nexport declare const HTTP_INTERCEPTORS: InjectionToken<HttpInterceptor[]>;\nexport declare class NoopInterceptor implements HttpInterceptor {\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/testability.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { GetTestability, Testability, TestabilityRegistry } from '@angular/core';\nexport declare class BrowserGetTestability implements GetTestability {\n    static init(): void;\n    addToWindow(registry: TestabilityRegistry): void;\n    findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean): Testability | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/testing/src/router_testing_module.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Location } from '@angular/common';\nimport { Compiler, Injector, ModuleWithProviders, NgModuleFactory, NgModuleFactoryLoader } from '@angular/core';\nimport { ChildrenOutletContexts, ExtraOptions, Route, Router, Routes, UrlHandlingStrategy, UrlSerializer } from '@angular/router';\n/**\n * @description\n *\n * Allows to simulate the loading of ng modules in tests.\n *\n * ```\n * const loader = TestBed.get(NgModuleFactoryLoader);\n *\n * @Component({template: 'lazy-loaded'})\n * class LazyLoadedComponent {}\n * @NgModule({\n *   declarations: [LazyLoadedComponent],\n *   imports: [RouterModule.forChild([{path: 'loaded', component: LazyLoadedComponent}])]\n * })\n *\n * class LoadedModule {}\n *\n * // sets up stubbedModules\n * loader.stubbedModules = {lazyModule: LoadedModule};\n *\n * router.resetConfig([\n *   {path: 'lazy', loadChildren: 'lazyModule'},\n * ]);\n *\n * router.navigateByUrl('/lazy/loaded');\n * ```\n *\n *\n */\nexport declare class SpyNgModuleFactoryLoader implements NgModuleFactoryLoader {\n    private compiler;\n    /**\n     * @docsNotRequired\n     */\n    private _stubbedModules;\n    /**\n     * @docsNotRequired\n     */\n    /**\n    * @docsNotRequired\n    */\n    stubbedModules: {\n        [path: string]: any;\n    };\n    constructor(compiler: Compiler);\n    load(path: string): Promise<NgModuleFactory<any>>;\n}\n/**\n * Router setup factory function used for testing.\n *\n *\n */\nexport declare function setupTestingRouter(urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts, location: Location, loader: NgModuleFactoryLoader, compiler: Compiler, injector: Injector, routes: Route[][], opts?: ExtraOptions, urlHandlingStrategy?: UrlHandlingStrategy): Router;\n/**\n * Router setup factory function used for testing.\n *\n * @deprecated As of v5.2. The 2nd-to-last argument should be `ExtraOptions`, not\n * `UrlHandlingStrategy`\n */\nexport declare function setupTestingRouter(urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts, location: Location, loader: NgModuleFactoryLoader, compiler: Compiler, injector: Injector, routes: Route[][], urlHandlingStrategy?: UrlHandlingStrategy): Router;\n/**\n * @description\n *\n * Sets up the router to be used for testing.\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of `Location`, `LocationStrategy`, and {@link\n * NgModuleFactoryLoader}.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * beforeEach(() => {\n *   TestBed.configureTestModule({\n *     imports: [\n *       RouterTestingModule.withRoutes(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n *\n */\nexport declare class RouterTestingModule {\n    static withRoutes(routes: Routes, config?: ExtraOptions): ModuleWithProviders<RouterTestingModule>;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/http/src/xhr.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { HttpBackend } from './backend';\nimport { HttpRequest } from './request';\nimport { HttpEvent } from './response';\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n *\n */\nexport declare abstract class XhrFactory {\n    abstract build(): XMLHttpRequest;\n}\n/**\n * A factory for @{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\n *\n *\n */\nexport declare class BrowserXhr implements XhrFactory {\n    constructor();\n    build(): any;\n}\n/**\n * An `HttpBackend` which uses the XMLHttpRequest API to send\n * requests to a backend server.\n *\n *\n */\nexport declare class HttpXhrBackend implements HttpBackend {\n    private xhrFactory;\n    constructor(xhrFactory: XhrFactory);\n    /**\n     * Process a request and return a stream of response events.\n     */\n    handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/definition.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Provider, ViewEncapsulation } from '../../core';\nimport { Type } from '../../type';\nimport { CssSelectorList } from './projection';\n/**\n * Definition of what a template rendering function should look like for a component.\n */\nexport declare type ComponentTemplate<T> = {\n    (rf: RenderFlags, ctx: T): void;\n    ngPrivateData?: never;\n};\n/**\n * Definition of what a query function should look like.\n */\nexport declare type ComponentQuery<T> = ComponentTemplate<T>;\n/**\n * Flags passed into template functions to determine which blocks (i.e. creation, update)\n * should be executed.\n *\n * Typically, a template runs both the creation block and the update block on initialization and\n * subsequent runs only execute the update block. However, dynamically created views require that\n * the creation block be executed separately from the update block (for backwards compat).\n */\nexport declare const enum RenderFlags {\n    Create = 1,\n    Update = 2\n}\n/**\n * A subclass of `Type` which has a static `ngComponentDef`:`ComponentDef` field making it\n * consumable for rendering.\n */\nexport interface ComponentType<T> extends Type<T> {\n    ngComponentDef: never;\n}\n/**\n * A subclass of `Type` which has a static `ngDirectiveDef`:`DirectiveDef` field making it\n * consumable for rendering.\n */\nexport interface DirectiveType<T> extends Type<T> {\n    ngDirectiveDef: never;\n}\nexport declare const enum DirectiveDefFlags {\n    ContentQuery = 2\n}\n/**\n * A subclass of `Type` which has a static `ngPipeDef`:`PipeDef` field making it\n * consumable for rendering.\n */\nexport interface PipeType<T> extends Type<T> {\n    ngPipeDef: never;\n}\nexport declare type DirectiveDefWithMeta<T, Selector extends string, ExportAs extends string, InputMap extends {\n    [key: string]: string;\n}, OutputMap extends {\n    [key: string]: string;\n}, QueryFields extends string[]> = DirectiveDef<T>;\n/**\n * Runtime information for classes that are inherited by components or directives\n * that aren't defined as components or directives.\n *\n * This is an internal data structure used by the render to determine what inputs\n * and outputs should be inherited.\n *\n * See: {@link defineBase}\n */\nexport interface BaseDef<T> {\n    /**\n     * A dictionary mapping the inputs' minified property names to their public API names, which\n     * are their aliases if any, or their original unminified property names\n     * (as in `@Input('alias') propertyName: any;`).\n     */\n    readonly inputs: {\n        [P in keyof T]: string;\n    };\n    /**\n     * @deprecated This is only here because `NgOnChanges` incorrectly uses declared name instead of\n     * public or minified name.\n     */\n    readonly declaredInputs: {\n        [P in keyof T]: P;\n    };\n    /**\n     * A dictionary mapping the outputs' minified property names to their public API names, which\n     * are their aliases if any, or their original unminified property names\n     * (as in `@Output('alias') propertyName: any;`).\n     */\n    readonly outputs: {\n        [P in keyof T]: P;\n    };\n}\n/**\n * Runtime link information for Directives.\n *\n * This is internal data structure used by the render to link\n * directives into templates.\n *\n * NOTE: Always use `defineDirective` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n *\n * @param Selector type metadata specifying the selector of the directive or component\n *\n * See: {@link defineDirective}\n */\nexport interface DirectiveDef<T> extends BaseDef<T> {\n    /** Token representing the directive. Used by DI. */\n    type: Type<T>;\n    /** Function that makes a directive public to the DI system. */\n    diPublic: ((def: DirectiveDef<T>) => void) | null;\n    /** The selectors that will be used to match nodes to this directive. */\n    selectors: CssSelectorList;\n    /**\n     * Name under which the directive is exported (for use with local references in template)\n     */\n    readonly exportAs: string | null;\n    /**\n     * Factory function used to create a new directive instance.\n     */\n    factory(): T;\n    /**\n     * Function to create instances of content queries associated with a given directive.\n     */\n    contentQueries: (() => void) | null;\n    /** Refreshes content queries associated with directives in a given view */\n    contentQueriesRefresh: ((directiveIndex: number, queryIndex: number) => void) | null;\n    /**\n     * The number of host bindings (including pure fn bindings) in this directive/component.\n     *\n     * Used to calculate the length of the LViewData array for the *parent* component\n     * of this directive/component.\n     */\n    hostVars: number;\n    /** Refreshes host bindings on the associated directive. */\n    hostBindings: HostBindingsFunction | null;\n    /**\n     * Static attributes to set on host element.\n     *\n     * Even indices: attribute name\n     * Odd indices: attribute value\n     */\n    attributes: string[] | null;\n    onInit: (() => void) | null;\n    doCheck: (() => void) | null;\n    afterContentInit: (() => void) | null;\n    afterContentChecked: (() => void) | null;\n    afterViewInit: (() => void) | null;\n    afterViewChecked: (() => void) | null;\n    onDestroy: (() => void) | null;\n    /**\n     * The features applied to this directive\n     */\n    features: DirectiveDefFeature[] | null;\n}\nexport declare type ComponentDefWithMeta<T, Selector extends String, ExportAs extends string, InputMap extends {\n    [key: string]: string;\n}, OutputMap extends {\n    [key: string]: string;\n}, QueryFields extends string[]> = ComponentDef<T>;\n/**\n * Runtime link information for Components.\n *\n * This is internal data structure used by the render to link\n * components into templates.\n *\n * NOTE: Always use `defineComponent` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n *\n * See: {@link defineComponent}\n */\nexport interface ComponentDef<T> extends DirectiveDef<T> {\n    /**\n     * Runtime unique component ID.\n     */\n    id: string;\n    /**\n     * The View template of the component.\n     */\n    readonly template: ComponentTemplate<T>;\n    /**\n     * A set of styles that the component needs to be present for component to render correctly.\n     */\n    readonly styles: string[];\n    /**\n     * The number of nodes, local refs, and pipes in this component template.\n     *\n     * Used to calculate the length of the component's LViewData array, so we\n     * can pre-fill the array and set the binding start index.\n     */\n    consts: number;\n    /**\n     * The number of bindings in this component template (including pure fn bindings).\n     *\n     * Used to calculate the length of the component's LViewData array, so we\n     * can pre-fill the array and set the host binding start index.\n     */\n    vars: number;\n    /**\n     * Query-related instructions for a component.\n     */\n    viewQuery: ComponentQuery<T> | null;\n    /**\n     * The view encapsulation type, which determines how styles are applied to\n     * DOM elements. One of\n     * - `Emulated` (default): Emulate native scoping of styles.\n     * - `Native`: Use the native encapsulation mechanism of the renderer.\n     * - `ShadowDom`: Use modern [ShadowDOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n     *   create a ShadowRoot for component's host element.\n     * - `None`: Do not provide any template or style encapsulation.\n     */\n    readonly encapsulation: ViewEncapsulation;\n    /**\n     * Defines arbitrary developer-defined data to be stored on a renderer instance.\n     * This is useful for renderers that delegate to other renderers.\n     */\n    readonly data: {\n        [kind: string]: any;\n    };\n    /** Whether or not this component's ChangeDetectionStrategy is OnPush */\n    readonly onPush: boolean;\n    /**\n     * Defines the set of injectable providers that are visible to a Directive and its content DOM\n     * children.\n     */\n    readonly providers: Provider[] | null;\n    /**\n     * Defines the set of injectable providers that are visible to a Directive and its view DOM\n     * children only.\n     */\n    readonly viewProviders: Provider[] | null;\n    /**\n     * Registry of directives and components that may be found in this view.\n     *\n     * The property is either an array of `DirectiveDef`s or a function which returns the array of\n     * `DirectiveDef`s. The function is necessary to be able to support forward declarations.\n     */\n    directiveDefs: DirectiveDefListOrFactory | null;\n    /**\n     * Registry of pipes that may be found in this view.\n     *\n     * The property is either an array of `PipeDefs`s or a function which returns the array of\n     * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n     */\n    pipeDefs: PipeDefListOrFactory | null;\n}\n/**\n * Runtime link information for Pipes.\n *\n * This is internal data structure used by the renderer to link\n * pipes into templates.\n *\n * NOTE: Always use `definePipe` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n *\n * See: {@link definePipe}\n */\nexport interface PipeDef<T> {\n    /**\n     * Pipe name.\n     *\n     * Used to resolve pipe in templates.\n     */\n    name: string;\n    /**\n     * Factory function used to create a new pipe instance.\n     */\n    factory: () => T;\n    /**\n     * Whether or not the pipe is pure.\n     *\n     * Pure pipes result only depends on the pipe input and not on internal\n     * state of the pipe.\n     */\n    pure: boolean;\n    onDestroy: (() => void) | null;\n}\nexport declare type PipeDefWithMeta<T, Name extends string> = PipeDef<T>;\nexport declare type DirectiveDefFeature = <T>(directiveDef: DirectiveDef<T>) => void;\nexport declare type ComponentDefFeature = <T>(componentDef: ComponentDef<T>) => void;\n/**\n * Type used for directiveDefs on component definition.\n *\n * The function is necessary to be able to support forward declarations.\n */\nexport declare type DirectiveDefListOrFactory = (() => DirectiveDefList) | DirectiveDefList;\nexport declare type DirectiveDefList = (DirectiveDef<any> | ComponentDef<any>)[];\nexport declare type DirectiveTypesOrFactory = (() => DirectiveTypeList) | DirectiveTypeList;\nexport declare type DirectiveTypeList = (DirectiveDef<any> | ComponentDef<any> | Type<any>)[];\nexport declare type HostBindingsFunction = (directiveIndex: number, elementIndex: number) => void;\n/**\n * Type used for PipeDefs on component definition.\n *\n * The function is necessary to be able to support forward declarations.\n */\nexport declare type PipeDefListOrFactory = (() => PipeDefList) | PipeDefList;\nexport declare type PipeDefList = PipeDef<any>[];\nexport declare type PipeTypesOrFactory = (() => DirectiveTypeList) | DirectiveTypeList;\nexport declare type PipeTypeList = (PipeDef<any> | Type<any>)[];\nexport declare const unusedValueExportToPlacateAjd = 1;\nexport declare const enum InitialStylingFlags {\n    VALUES_MODE = 1\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection/differs/default_iterable_differ.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, NgIterable, TrackByFunction } from './iterable_differs';\nexport declare class DefaultIterableDifferFactory implements IterableDifferFactory {\n    constructor();\n    supports(obj: Object | null | undefined): boolean;\n    create<V>(trackByFn?: TrackByFunction<V>): DefaultIterableDiffer<V>;\n}\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n */\nexport declare class DefaultIterableDiffer<V> implements IterableDiffer<V>, IterableChanges<V> {\n    readonly length: number;\n    readonly collection: V[] | Iterable<V> | null;\n    private _linkedRecords;\n    private _unlinkedRecords;\n    private _previousItHead;\n    private _itHead;\n    private _itTail;\n    private _additionsHead;\n    private _additionsTail;\n    private _movesHead;\n    private _movesTail;\n    private _removalsHead;\n    private _removalsTail;\n    private _identityChangesHead;\n    private _identityChangesTail;\n    private _trackByFn;\n    constructor(trackByFn?: TrackByFunction<V>);\n    forEachItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n    forEachOperation(fn: (item: IterableChangeRecord<V>, previousIndex: number | null, currentIndex: number | null) => void): void;\n    forEachPreviousItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n    forEachAddedItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n    forEachMovedItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n    forEachRemovedItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n    forEachIdentityChange(fn: (record: IterableChangeRecord_<V>) => void): void;\n    diff(collection: NgIterable<V>): DefaultIterableDiffer<V> | null;\n    onDestroy(): void;\n    check(collection: NgIterable<V>): boolean;\n    readonly isDirty: boolean;\n    private _addToRemovals;\n}\nexport declare class IterableChangeRecord_<V> implements IterableChangeRecord<V> {\n    item: V;\n    trackById: any;\n    currentIndex: number | null;\n    previousIndex: number | null;\n    constructor(item: V, trackById: any);\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/node.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StylingContext } from './styling';\nimport { LViewData, TView } from './view';\n/**\n * TNodeType corresponds to the TNode.type property. It contains information\n * on how to map a particular set of bits in TNode.flags to the node type.\n */\nexport declare const enum TNodeType {\n    Container = 0,\n    Projection = 1,\n    View = 2,\n    Element = 3,\n    ViewOrElement = 2,\n    ElementContainer = 4\n}\n/**\n * Corresponds to the TNode.flags property.\n */\nexport declare const enum TNodeFlags {\n    /** The number of directives on this node is encoded on the least significant bits */\n    DirectiveCountMask = 4095,\n    /** This bit is set if the node is a component */\n    isComponent = 4096,\n    /** This bit is set if the node has been projected */\n    isProjected = 8192,\n    /** This bit is set if the node has any content queries */\n    hasContentQuery = 16384,\n    /** The index of the first directive on this node is encoded on the most significant bits  */\n    DirectiveStartingIndexShift = 15\n}\n/**\n * A set of marker values to be used in the attributes arrays. Those markers indicate that some\n * items are not regular attributes and the processing should be adapted accordingly.\n */\nexport declare const enum AttributeMarker {\n    /**\n     * Marker indicates that the following 3 values in the attributes array are:\n     * namespaceUri, attributeName, attributeValue\n     * in that order.\n     */\n    NamespaceURI = 0,\n    /**\n     * This marker indicates that the following attribute names were extracted from bindings (ex.:\n     * [foo]=\"exp\") and / or event handlers (ex. (bar)=\"doSth()\").\n     * Taking the above bindings and outputs as an example an attributes array could look as follows:\n     * ['class', 'fade in', AttributeMarker.SelectOnly, 'foo', 'bar']\n     */\n    SelectOnly = 1\n}\n/**\n * A combination of:\n * - attribute names and values\n * - special markers acting as flags to alter attributes processing.\n */\nexport declare type TAttributes = (string | AttributeMarker)[];\n/**\n * Binding data (flyweight) for a particular node that is shared between all templates\n * of a specific type.\n *\n * If a property is:\n *    - PropertyAliases: that property's data was generated and this is it\n *    - Null: that property's data was already generated and nothing was found.\n *    - Undefined: that property's data has not yet been generated\n *\n * see: https://en.wikipedia.org/wiki/Flyweight_pattern for more on the Flyweight pattern\n */\nexport interface TNode {\n    /** The type of the TNode. See TNodeType. */\n    type: TNodeType;\n    /**\n     * Index of the TNode in TView.data and corresponding native element in LViewData.\n     *\n     * This is necessary to get from any TNode to its corresponding native element when\n     * traversing the node tree.\n     *\n     * If index is -1, this is a dynamically created container node or embedded view node.\n     */\n    index: number;\n    /**\n     * The index of the closest injector in this node's LViewData.\n     *\n     * If the index === -1, there is no injector on this node or any ancestor node in this view.\n     *\n     * If the index !== -1, it is the index of this node's injector OR the index of a parent injector\n     * in the same view. We pass the parent injector index down the node tree of a view so it's\n     * possible to find the parent injector without walking a potentially deep node tree. Injector\n     * indices are not set across view boundaries because there could be multiple component hosts.\n     *\n     * If tNode.injectorIndex === tNode.parent.injectorIndex, then the index belongs to a parent\n     * injector.\n     */\n    injectorIndex: number;\n    /**\n     * This number stores two values using its bits:\n     *\n     * - the number of directives on that node (first 12 bits)\n     * - the starting index of the node's directives in the directives array (last 20 bits).\n     *\n     * These two values are necessary so DI can effectively search the directives associated\n     * with a node without searching the whole directives array.\n     */\n    flags: TNodeFlags;\n    /** The tag name associated with this node. */\n    tagName: string | null;\n    /**\n     * Attributes associated with an element. We need to store attributes to support various use-cases\n     * (attribute injection, content projection with selectors, directives matching).\n     * Attributes are stored statically because reading them from the DOM would be way too slow for\n     * content projection and queries.\n     *\n     * Since attrs will always be calculated first, they will never need to be marked undefined by\n     * other instructions.\n     *\n     * For regular attributes a name of an attribute and its value alternate in the array.\n     * e.g. ['role', 'checkbox']\n     * This array can contain flags that will indicate \"special attributes\" (attributes with\n     * namespaces, attributes extracted from bindings and outputs).\n     */\n    attrs: TAttributes | null;\n    /**\n     * A set of local names under which a given element is exported in a template and\n     * visible to queries. An entry in this array can be created for different reasons:\n     * - an element itself is referenced, ex.: `<div #foo>`\n     * - a component is referenced, ex.: `<my-cmpt #foo>`\n     * - a directive is referenced, ex.: `<my-cmpt #foo=\"directiveExportAs\">`.\n     *\n     * A given element might have different local names and those names can be associated\n     * with a directive. We store local names at even indexes while odd indexes are reserved\n     * for directive index in a view (or `-1` if there is no associated directive).\n     *\n     * Some examples:\n     * - `<div #foo>` => `[\"foo\", -1]`\n     * - `<my-cmpt #foo>` => `[\"foo\", myCmptIdx]`\n     * - `<my-cmpt #foo #bar=\"directiveExportAs\">` => `[\"foo\", myCmptIdx, \"bar\", directiveIdx]`\n     * - `<div #foo #bar=\"directiveExportAs\">` => `[\"foo\", -1, \"bar\", directiveIdx]`\n     */\n    localNames: (string | number)[] | null;\n    /** Information about input properties that need to be set once from attribute data. */\n    initialInputs: InitialInputData | null | undefined;\n    /**\n     * Input data for all directives on this node.\n     *\n     * - `undefined` means that the prop has not been initialized yet,\n     * - `null` means that the prop has been initialized but no inputs have been found.\n     */\n    inputs: PropertyAliases | null | undefined;\n    /**\n     * Output data for all directives on this node.\n     *\n     * - `undefined` means that the prop has not been initialized yet,\n     * - `null` means that the prop has been initialized but no outputs have been found.\n     */\n    outputs: PropertyAliases | null | undefined;\n    /**\n     * The TView or TViews attached to this node.\n     *\n     * If this TNode corresponds to an LContainer with inline views, the container will\n     * need to store separate static data for each of its view blocks (TView[]). Otherwise,\n     * nodes in inline views with the same index as nodes in their parent views will overwrite\n     * each other, as they are in the same template.\n     *\n     * Each index in this array corresponds to the static data for a certain\n     * view. So if you had V(0) and V(1) in a container, you might have:\n     *\n     * [\n     *   [{tagName: 'div', attrs: ...}, null],     // V(0) TView\n     *   [{tagName: 'button', attrs ...}, null]    // V(1) TView\n     *\n     * If this TNode corresponds to an LContainer with a template (e.g. structural\n     * directive), the template's TView will be stored here.\n     *\n     * If this TNode corresponds to an element, tViews will be null .\n     */\n    tViews: TView | TView[] | null;\n    /**\n     * The next sibling node. Necessary so we can propagate through the root nodes of a view\n     * to insert them or remove them from the DOM.\n     */\n    next: TNode | null;\n    /**\n     * First child of the current node.\n     *\n     * For component nodes, the child will always be a ContentChild (in same view).\n     * For embedded view nodes, the child will be in their child view.\n     */\n    child: TNode | null;\n    /**\n     * Parent node (in the same view only).\n     *\n     * We need a reference to a node's parent so we can append the node to its parent's native\n     * element at the appropriate time.\n     *\n     * If the parent would be in a different view (e.g. component host), this property will be null.\n     * It's important that we don't try to cross component boundaries when retrieving the parent\n     * because the parent will change (e.g. index, attrs) depending on where the component was\n     * used (and thus shouldn't be stored on TNode). In these cases, we retrieve the parent through\n     * LView.node instead (which will be instance-specific).\n     *\n     * If this is an inline view node (V), the parent will be its container.\n     */\n    parent: TElementNode | TContainerNode | null;\n    /**\n     * If this node is part of an i18n block, it indicates whether this container is part of the DOM\n     * If this node is not part of an i18n block, this field is null.\n     */\n    detached: boolean | null;\n    stylingTemplate: StylingContext | null;\n    /**\n     * List of projected TNodes for a given component host element OR index into the said nodes.\n     *\n     * For easier discussion assume this example:\n     * `<parent>`'s view definition:\n     * ```\n     * <child id=\"c1\">content1</child>\n     * <child id=\"c2\"><span>content2</span></child>\n     * ```\n     * `<child>`'s view definition:\n     * ```\n     * <ng-content id=\"cont1\"></ng-content>\n     * ```\n     *\n     * If `Array.isArray(projection)` then `TNode` is a host element:\n     * - `projection` stores the content nodes which are to be projected.\n     *    - The nodes represent categories defined by the selector: For example:\n     *      `<ng-content/><ng-content select=\"abc\"/>` would represent the heads for `<ng-content/>`\n     *      and `<ng-content select=\"abc\"/>` respectively.\n     *    - The nodes we store in `projection` are heads only, we used `.next` to get their\n     *      siblings.\n     *    - The nodes `.next` is sorted/rewritten as part of the projection setup.\n     *    - `projection` size is equal to the number of projections `<ng-content>`. The size of\n     *      `c1` will be `1` because `<child>` has only one `<ng-content>`.\n     * - we store `projection` with the host (`c1`, `c2`) rather than the `<ng-content>` (`cont1`)\n     *   because the same component (`<child>`) can be used in multiple locations (`c1`, `c2`) and as\n     *   a result have different set of nodes to project.\n     * - without `projection` it would be difficult to efficiently traverse nodes to be projected.\n     *\n     * If `typeof projection == 'number'` then `TNode` is a `<ng-content>` element:\n     * - `projection` is an index of the host's `projection`Nodes.\n     *   - This would return the first head node to project:\n     *     `getHost(currentTNode).projection[currentTNode.projection]`.\n     * - When projecting nodes the parent node retrieved may be a `<ng-content>` node, in which case\n     *   the process is recursive in nature (not implementation).\n     */\n    projection: (TNode | null)[] | number | null;\n}\n/** Static data for an element  */\nexport interface TElementNode extends TNode {\n    /** Index in the data[] array */\n    index: number;\n    child: TElementNode | TTextNode | TElementContainerNode | TContainerNode | TProjectionNode | null;\n    /**\n     * Element nodes will have parents unless they are the first node of a component or\n     * embedded view (which means their parent is in a different view and must be\n     * retrieved using viewData[HOST_NODE]).\n     */\n    parent: TElementNode | TElementContainerNode | null;\n    tViews: null;\n    /**\n     * If this is a component TNode with projection, this will be an array of projected\n     * TNodes (see TNode.projection for more info). If it's a regular element node or a\n     * component without projection, it will be null.\n     */\n    projection: (TNode | null)[] | null;\n}\n/** Static data for a text node */\nexport interface TTextNode extends TNode {\n    /** Index in the data[] array */\n    index: number;\n    child: null;\n    /**\n     * Text nodes will have parents unless they are the first node of a component or\n     * embedded view (which means their parent is in a different view and must be\n     * retrieved using LView.node).\n     */\n    parent: TElementNode | TElementContainerNode | null;\n    tViews: null;\n    projection: null;\n}\n/** Static data for an LContainer */\nexport interface TContainerNode extends TNode {\n    /**\n     * Index in the data[] array.\n     *\n     * If it's -1, this is a dynamically created container node that isn't stored in\n     * data[] (e.g. when you inject ViewContainerRef) .\n     */\n    index: number;\n    child: null;\n    /**\n     * Container nodes will have parents unless:\n     *\n     * - They are the first node of a component or embedded view\n     * - They are dynamically created\n     */\n    parent: TElementNode | TElementContainerNode | null;\n    tViews: TView | TView[] | null;\n    projection: null;\n}\n/** Static data for an <ng-container> */\nexport interface TElementContainerNode extends TNode {\n    /** Index in the LViewData[] array. */\n    index: number;\n    child: TElementNode | TTextNode | TContainerNode | TElementContainerNode | TProjectionNode | null;\n    parent: TElementNode | TElementContainerNode | null;\n    tViews: null;\n    projection: null;\n}\n/** Static data for a view  */\nexport interface TViewNode extends TNode {\n    /** If -1, it's a dynamically created view. Otherwise, it is the view block ID. */\n    index: number;\n    child: TElementNode | TTextNode | TElementContainerNode | TContainerNode | TProjectionNode | null;\n    parent: TContainerNode | null;\n    tViews: null;\n    projection: null;\n}\n/** Static data for an LProjectionNode  */\nexport interface TProjectionNode extends TNode {\n    /** Index in the data[] array */\n    child: null;\n    /**\n     * Projection nodes will have parents unless they are the first node of a component\n     * or embedded view (which means their parent is in a different view and must be\n     * retrieved using LView.node).\n     */\n    parent: TElementNode | TElementContainerNode | null;\n    tViews: null;\n    /** Index of the projection node. (See TNode.projection for more info.) */\n    projection: number;\n}\n/**\n * This mapping is necessary so we can set input properties and output listeners\n * properly at runtime when property names are minified or aliased.\n *\n * Key: unminified / public input or output name\n * Value: array containing minified / internal name and related directive index\n *\n * The value must be an array to support inputs and outputs with the same name\n * on the same node.\n */\nexport declare type PropertyAliases = {\n    [key: string]: PropertyAliasValue;\n};\n/**\n * Store the runtime input or output names for all the directives.\n *\n * - Even indices: directive index\n * - Odd indices: minified / internal name\n *\n * e.g. [0, 'change-minified']\n */\nexport declare type PropertyAliasValue = (number | string)[];\n/**\n * This array contains information about input properties that\n * need to be set once from attribute data. It's ordered by\n * directive index (relative to element) so it's simple to\n * look up a specific directive's initial input data.\n *\n * Within each sub-array:\n *\n * Even indices: minified/internal input name\n * Odd indices: initial value\n *\n * If a directive on a node does not have any input properties\n * that should be set from attributes, its index is set to null\n * to avoid a sparse array.\n *\n * e.g. [null, ['role-min', 'button']]\n */\nexport declare type InitialInputData = (InitialInputs | null)[];\n/**\n * Used by InitialInputData to store input properties\n * that should be set once from attributes.\n *\n * Even indices: minified/internal input name\n * Odd indices: initial value\n *\n * e.g. ['role-min', 'button']\n */\nexport declare type InitialInputs = string[];\nexport declare const unusedValueExportToPlacateAjd = 1;\n/**\n * Type representing a set of TNodes that can have local refs (`#foo`) placed on them.\n */\nexport declare type TNodeWithLocalRefs = TContainerNode | TElementNode | TElementContainerNode;\n/**\n * Type for a function that extracts a value for a local refs.\n * Example:\n * - `<div #nativeDivEl>` - `nativeDivEl` should point to the native `<div>` element;\n * - `<ng-template #tplRef>` - `tplRef` should point to the `TemplateRef` instance;\n */\nexport declare type LocalRefExtractor = (tNode: TNodeWithLocalRefs, currentView: LViewData) => any;\n"
  },
  {
    "path": "node_modules/@angular/common/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/common/http/src/module.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector, ModuleWithProviders } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpBackend, HttpHandler } from './backend';\nimport { HttpInterceptor } from './interceptor';\nimport { HttpRequest } from './request';\nimport { HttpEvent } from './response';\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nexport declare class HttpInterceptingHandler implements HttpHandler {\n    private backend;\n    private injector;\n    private chain;\n    constructor(backend: HttpBackend, injector: Injector);\n    handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nexport declare function interceptingHandler(backend: HttpBackend, interceptors?: HttpInterceptor[] | null): HttpHandler;\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nexport declare function jsonpCallbackContext(): Object;\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n *\n */\nexport declare class HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable(): ModuleWithProviders<HttpClientXsrfModule>;\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options?: {\n        cookieName?: string;\n        headerName?: string;\n    }): ModuleWithProviders<HttpClientXsrfModule>;\n}\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n *\n */\nexport declare class HttpClientModule {\n}\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n *\n */\nexport declare class HttpClientJsonpModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/common/http/testing/testing.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"HttpTestingController\":{\"__symbolic\":\"class\",\"members\":{\"match\":[{\"__symbolic\":\"method\"}],\"expectOne\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}],\"expectNone\":[{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"},{\"__symbolic\":\"method\"}],\"verify\":[{\"__symbolic\":\"method\"}]}},\"RequestMatch\":{\"__symbolic\":\"interface\"},\"HttpClientTestingModule\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"NgModule\",\"line\":22,\"character\":1},\"arguments\":[{\"imports\":[{\"__symbolic\":\"reference\",\"module\":\"@angular/common/http\",\"name\":\"HttpClientModule\",\"line\":24,\"character\":4}],\"providers\":[{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_testing_testing_a\"},{\"provide\":{\"__symbolic\":\"reference\",\"module\":\"@angular/common/http\",\"name\":\"HttpBackend\",\"line\":28,\"character\":14},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_testing_testing_a\"}},{\"provide\":{\"__symbolic\":\"reference\",\"name\":\"HttpTestingController\"},\"useExisting\":{\"__symbolic\":\"reference\",\"name\":\"ɵangular_packages_common_http_testing_testing_a\"}}]}]}],\"members\":{}},\"TestRequest\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"HttpRequest\",\"module\":\"@angular/common/http\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]},{\"__symbolic\":\"reference\",\"name\":\"Observer\",\"module\":\"rxjs\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"HttpEvent\",\"module\":\"@angular/common/http\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}]}]}],\"flush\":[{\"__symbolic\":\"method\"}],\"error\":[{\"__symbolic\":\"method\"}],\"event\":[{\"__symbolic\":\"method\"}]}},\"ɵangular_packages_common_http_testing_testing_a\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":27,\"character\":1}}],\"members\":{\"handle\":[{\"__symbolic\":\"method\"}],\"_match\":[{\"__symbolic\":\"method\"}],\"match\":[{\"__symbolic\":\"method\"}],\"expectOne\":[{\"__symbolic\":\"method\"}],\"expectNone\":[{\"__symbolic\":\"method\"}],\"verify\":[{\"__symbolic\":\"method\"}],\"descriptionFromMatcher\":[{\"__symbolic\":\"method\"}]}}},\"origins\":{\"HttpTestingController\":\"./src/api\",\"RequestMatch\":\"./src/api\",\"HttpClientTestingModule\":\"./src/module\",\"TestRequest\":\"./src/request\",\"ɵangular_packages_common_http_testing_testing_a\":\"./src/backend\"},\"importAs\":\"@angular/common/http/testing\"}"
  },
  {
    "path": "node_modules/@angular/core/src/sanitization/security.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n *\n */\nexport declare enum SecurityContext {\n    NONE = 0,\n    HTML = 1,\n    STYLE = 2,\n    SCRIPT = 3,\n    URL = 4,\n    RESOURCE_URL = 5\n}\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n *\n */\nexport declare abstract class Sanitizer {\n    abstract sanitize(context: SecurityContext, value: {} | string | null): string | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/upgrade/src/upgrade.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentRef, InjectionToken } from '@angular/core';\nimport { UpgradeModule } from '@angular/upgrade/static';\n/**\n * @description\n *\n * Creates an initializer that in addition to setting up the Angular\n * router sets up the ngRoute integration.\n *\n * ```\n * @NgModule({\n *  imports: [\n *   RouterModule.forRoot(SOME_ROUTES),\n *   UpgradeModule\n * ],\n * providers: [\n *   RouterUpgradeInitializer\n * ]\n * })\n * export class AppModule {\n *   ngDoBootstrap() {}\n * }\n * ```\n *\n * @experimental\n */\nexport declare const RouterUpgradeInitializer: {\n    provide: InjectionToken<((compRef: ComponentRef<any>) => void)[]>;\n    multi: boolean;\n    useFactory: (ngUpgrade: UpgradeModule) => () => void;\n    deps: (typeof UpgradeModule)[];\n};\n/**\n * @description\n *\n * Sets up a location synchronization.\n *\n * History.pushState does not fire onPopState, so the Angular location\n * doesn't detect it. The workaround is to attach a location change listener\n *\n * @experimental\n */\nexport declare function setUpLocationSync(ngUpgrade: UpgradeModule): void;\n"
  },
  {
    "path": "node_modules/@angular/common/src/i18n/locale_data_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The different format styles that can be used to represent numbers.\n * Used by the function {@link getLocaleNumberFormat}.\n *\n * @experimental i18n support is experimental.\n */\nexport declare enum NumberFormatStyle {\n    Decimal = 0,\n    Percent = 1,\n    Currency = 2,\n    Scientific = 3\n}\n/** @experimental */\nexport declare enum Plural {\n    Zero = 0,\n    One = 1,\n    Two = 2,\n    Few = 3,\n    Many = 4,\n    Other = 5\n}\n/**\n * Some languages use two different forms of strings (standalone and format) depending on the\n * context.\n * Typically the standalone version is the nominative form of the word, and the format version is in\n * the genitive.\n * See [the CLDR website](http://cldr.unicode.org/translation/date-time) for more information.\n *\n * @experimental i18n support is experimental.\n */\nexport declare enum FormStyle {\n    Format = 0,\n    Standalone = 1\n}\n/**\n * Multiple widths are available for translations: narrow (1 character), abbreviated (3 characters),\n * wide (full length), and short (2 characters, only for days).\n *\n * For example the day `Sunday` will be:\n * - Narrow: `S`\n * - Short: `Su`\n * - Abbreviated: `Sun`\n * - Wide: `Sunday`\n *\n * @experimental i18n support is experimental.\n */\nexport declare enum TranslationWidth {\n    Narrow = 0,\n    Abbreviated = 1,\n    Wide = 2,\n    Short = 3\n}\n/**\n * Multiple widths are available for formats: short (minimal amount of data), medium (small amount\n * of data), long (complete amount of data), full (complete amount of data and extra information).\n *\n * For example the date-time formats for the english locale will be:\n *  - `'short'`: `'M/d/yy, h:mm a'` (e.g. `6/15/15, 9:03 AM`)\n *  - `'medium'`: `'MMM d, y, h:mm:ss a'` (e.g. `Jun 15, 2015, 9:03:01 AM`)\n *  - `'long'`: `'MMMM d, y, h:mm:ss a z'` (e.g. `June 15, 2015 at 9:03:01 AM GMT+1`)\n *  - `'full'`: `'EEEE, MMMM d, y, h:mm:ss a zzzz'` (e.g. `Monday, June 15, 2015 at\n * 9:03:01 AM GMT+01:00`)\n *\n * @experimental i18n support is experimental.\n */\nexport declare enum FormatWidth {\n    Short = 0,\n    Medium = 1,\n    Long = 2,\n    Full = 3\n}\n/**\n * Number symbol that can be used to replace placeholders in number patterns.\n * The placeholders are based on english values:\n *\n * | Name                   | Example for en-US | Meaning                                     |\n * |------------------------|-------------------|---------------------------------------------|\n * | decimal                | 2,345`.`67        | decimal separator                           |\n * | group                  | 2`,`345.67        | grouping separator, typically for thousands |\n * | plusSign               | `+`23             | the plus sign used with numbers             |\n * | minusSign              | `-`23             | the minus sign used with numbers            |\n * | percentSign            | 23.4`%`           | the percent sign (out of 100)               |\n * | perMille               | 234`‰`            | the permille sign (out of 1000)             |\n * | exponential            | 1.2`E`3           | used in computers for 1.2×10³.              |\n * | superscriptingExponent | 1.2`×`103         | human-readable format of exponential        |\n * | infinity               | `∞`               | used in +∞ and -∞.                          |\n * | nan                    | `NaN`             | \"not a number\".                             |\n * | timeSeparator          | 10`:`52           | symbol used between time units              |\n * | currencyDecimal        | $2,345`.`67       | decimal separator, fallback to \"decimal\"    |\n * | currencyGroup          | $2`,`345.67       | grouping separator, fallback to \"group\"     |\n *\n * @experimental i18n support is experimental.\n */\nexport declare enum NumberSymbol {\n    Decimal = 0,\n    Group = 1,\n    List = 2,\n    PercentSign = 3,\n    PlusSign = 4,\n    MinusSign = 5,\n    Exponential = 6,\n    SuperscriptingExponent = 7,\n    PerMille = 8,\n    Infinity = 9,\n    NaN = 10,\n    TimeSeparator = 11,\n    CurrencyDecimal = 12,\n    CurrencyGroup = 13\n}\n/**\n * The value for each day of the week, based on the en-US locale\n *\n * @experimental\n */\nexport declare enum WeekDay {\n    Sunday = 0,\n    Monday = 1,\n    Tuesday = 2,\n    Wednesday = 3,\n    Thursday = 4,\n    Friday = 5,\n    Saturday = 6\n}\n/**\n * The locale id for the chosen locale (e.g `en-GB`).\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getLocaleId(locale: string): string;\n/**\n * Periods of the day (e.g. `[AM, PM]` for en-US).\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getLocaleDayPeriods(locale: string, formStyle: FormStyle, width: TranslationWidth): [string, string];\n/**\n * Days of the week for the Gregorian calendar (e.g. `[Sunday, Monday, ... Saturday]` for en-US).\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getLocaleDayNames(locale: string, formStyle: FormStyle, width: TranslationWidth): string[];\n/**\n * Months of the year for the Gregorian calendar (e.g. `[January, February, ...]` for en-US).\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getLocaleMonthNames(locale: string, formStyle: FormStyle, width: TranslationWidth): string[];\n/**\n * Eras for the Gregorian calendar (e.g. AD/BC).\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getLocaleEraNames(locale: string, width: TranslationWidth): [string, string];\n/**\n * First day of the week for this locale, based on english days (Sunday = 0, Monday = 1, ...).\n * For example in french the value would be 1 because the first day of the week is Monday.\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getLocaleFirstDayOfWeek(locale: string): WeekDay;\n/**\n * Range of days in the week that represent the week-end for this locale, based on english days\n * (Sunday = 0, Monday = 1, ...).\n * For example in english the value would be [6,0] for Saturday to Sunday.\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getLocaleWeekEndRange(locale: string): [WeekDay, WeekDay];\n/**\n * Date format that depends on the locale.\n *\n * There are four basic date formats:\n * - `full` should contain long-weekday (EEEE), year (y), long-month (MMMM), day (d).\n *\n *  For example, English uses `EEEE, MMMM d, y`, corresponding to a date like\n *  \"Tuesday, September 14, 1999\".\n *\n * - `long` should contain year, long-month, day.\n *\n *  For example, `MMMM d, y`, corresponding to a date like \"September 14, 1999\".\n *\n * - `medium` should contain year, abbreviated-month (MMM), day.\n *\n *  For example, `MMM d, y`, corresponding to a date like \"Sep 14, 1999\".\n *  For languages that do not use abbreviated months, use the numeric month (MM/M). For example,\n *  `y/MM/dd`, corresponding to a date like \"1999/09/14\".\n *\n * - `short` should contain year, numeric-month (MM/M), and day.\n *\n *  For example, `M/d/yy`, corresponding to a date like \"9/14/99\".\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getLocaleDateFormat(locale: string, width: FormatWidth): string;\n/**\n * Time format that depends on the locale.\n *\n * The standard formats include four basic time formats:\n * - `full` should contain hour (h/H), minute (mm), second (ss), and zone (zzzz).\n * - `long` should contain hour, minute, second, and zone (z)\n * - `medium` should contain hour, minute, second.\n * - `short` should contain hour, minute.\n *\n * Note: The patterns depend on whether the main country using your language uses 12-hour time or\n * not:\n * - For 12-hour time, use a pattern like `hh:mm a` using h to mean a 12-hour clock cycle running\n * 1 through 12 (midnight plus 1 minute is 12:01), or using K to mean a 12-hour clock cycle\n * running 0 through 11 (midnight plus 1 minute is 0:01).\n * - For 24-hour time, use a pattern like `HH:mm` using H to mean a 24-hour clock cycle running 0\n * through 23 (midnight plus 1 minute is 0:01), or using k to mean a 24-hour clock cycle running\n * 1 through 24 (midnight plus 1 minute is 24:01).\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getLocaleTimeFormat(locale: string, width: FormatWidth): string;\n/**\n * Date-time format that depends on the locale.\n *\n * The date-time pattern shows how to combine separate patterns for date (represented by {1})\n * and time (represented by {0}) into a single pattern. It usually doesn't need to be changed.\n * What you want to pay attention to are:\n * - possibly removing a space for languages that don't use it, such as many East Asian languages\n * - possibly adding a comma, other punctuation, or a combining word\n *\n * For example:\n * - English uses `{1} 'at' {0}` or `{1}, {0}` (depending on date style), while Japanese uses\n *  `{1}{0}`.\n * - An English formatted date-time using the combining pattern `{1}, {0}` could be\n *  `Dec 10, 2010, 3:59:49 PM`. Notice the comma and space between the date portion and the time\n *  portion.\n *\n * There are four formats (`full`, `long`, `medium`, `short`); the determination of which to use\n * is normally based on the date style. For example, if the date has a full month and weekday\n * name, the full combining pattern will be used to combine that with a time. If the date has\n * numeric month, the short version of the combining pattern will be used to combine that with a\n * time. English uses `{1} 'at' {0}` for full and long styles, and `{1}, {0}` for medium and short\n * styles.\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getLocaleDateTimeFormat(locale: string, width: FormatWidth): string;\n/**\n * Number symbol that can be used to replace placeholders in number formats.\n * See {@link NumberSymbol} for more information.\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getLocaleNumberSymbol(locale: string, symbol: NumberSymbol): string;\n/**\n * Number format that depends on the locale.\n *\n * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\n * when used to format the number 12345.678 could result in \"12'345,67\". That would happen if the\n * grouping separator for your language is an apostrophe, and the decimal separator is a comma.\n *\n * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders;\n * they stand for the decimal separator, and so on, and are NOT real characters.\n * You must NOT \"translate\" the placeholders; for example, don't change `.` to `,` even though in\n * your language the decimal point is written with a comma. The symbols should be replaced by the\n * local equivalents, using the Number Symbols for your language.\n *\n * Here are the special characters used in number patterns:\n *\n * | Symbol | Meaning |\n * |--------|---------|\n * | . | Replaced automatically by the character used for the decimal point. |\n * | , | Replaced by the \"grouping\" (thousands) separator. |\n * | 0 | Replaced by a digit (or zero if there aren't enough digits). |\n * | # | Replaced by a digit (or nothing if there aren't enough). |\n * | ¤ | This will be replaced by a currency symbol, such as $ or USD. |\n * | % | This marks a percent format. The % symbol may change position, but must be retained. |\n * | E | This marks a scientific format. The E symbol may change position, but must be retained. |\n * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |\n *\n * You can find more information\n * [on the CLDR website](http://cldr.unicode.org/translation/number-patterns)\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getLocaleNumberFormat(locale: string, type: NumberFormatStyle): string;\n/**\n * The symbol used to represent the currency for the main country using this locale (e.g. $ for\n * the locale en-US).\n * The symbol will be `null` if the main country cannot be determined.\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getLocaleCurrencySymbol(locale: string): string | null;\n/**\n * The name of the currency for the main country using this locale (e.g. USD for the locale\n * en-US).\n * The name will be `null` if the main country cannot be determined.\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getLocaleCurrencyName(locale: string): string | null;\n/**\n * The locale plural function used by ICU expressions to determine the plural case to use.\n * See {@link NgPlural} for more information.\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getLocalePluralCase(locale: string): (value: number) => Plural;\n/**\n * Rules used to determine which day period to use (See `dayPeriods` below).\n * The rules can either be an array or a single value. If it's an array, consider it as \"from\"\n * and \"to\". If it's a single value then it means that the period is only valid at this exact\n * value.\n * There is always the same number of rules as the number of day periods, which means that the\n * first rule is applied to the first day period and so on.\n * You should fallback to AM/PM when there are no rules available.\n *\n * Note: this is only available if you load the full locale data.\n * See the [\"I18n guide\"](guide/i18n#i18n-pipes) to know how to import additional locale\n * data.\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getLocaleExtraDayPeriodRules(locale: string): (Time | [Time, Time])[];\n/**\n * Day Periods indicate roughly how the day is broken up in different languages (e.g. morning,\n * noon, afternoon, midnight, ...).\n * You should use the function {@link getLocaleExtraDayPeriodRules} to determine which period to\n * use.\n * You should fallback to AM/PM when there are no day periods available.\n *\n * Note: this is only available if you load the full locale data.\n * See the [\"I18n guide\"](guide/i18n#i18n-pipes) to know how to import additional locale\n * data.\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getLocaleExtraDayPeriods(locale: string, formStyle: FormStyle, width: TranslationWidth): string[];\n/**\n * A representation of the time with hours and minutes\n *\n * @experimental i18n support is experimental.\n */\nexport declare type Time = {\n    hours: number;\n    minutes: number;\n};\n/**\n * Finds the locale data for a locale id\n *\n * @experimental i18n support is experimental.\n */\nexport declare function findLocaleData(locale: string): any;\n/**\n * Returns the currency symbol for a given currency code, or the code if no symbol available\n * (e.g.: format narrow = $, format wide = US$, code = USD)\n * If no locale is provided, it uses the locale \"en\" by default\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getCurrencySymbol(code: string, format: 'wide' | 'narrow', locale?: string): string;\n/**\n * Returns the number of decimal digits for the given currency.\n * Its value depends upon the presence of cents in that particular currency.\n *\n * @experimental i18n support is experimental.\n */\nexport declare function getNumberOfCurrencyDigits(code: string): number;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/styling/util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StyleSanitizeFn } from '../../sanitization/style_sanitizer';\nimport { LContext } from '../interfaces/context';\nimport { PlayerContext } from '../interfaces/player';\nimport { RElement } from '../interfaces/renderer';\nimport { InitialStyles, StylingContext } from '../interfaces/styling';\nimport { LViewData } from '../interfaces/view';\nexport declare const EMPTY_ARR: any[];\nexport declare const EMPTY_OBJ: {\n    [key: string]: any;\n};\nexport declare function createEmptyStylingContext(element?: RElement | null, sanitizer?: StyleSanitizeFn | null, initialStylingValues?: InitialStyles): StylingContext;\n/**\n * Used clone a copy of a pre-computed template of a styling context.\n *\n * A pre-computed template is designed to be computed once for a given element\n * (instructions.ts has logic for caching this).\n */\nexport declare function allocStylingContext(element: RElement | null, templateStyleContext: StylingContext): StylingContext;\n/**\n * Retrieve the `StylingContext` at a given index.\n *\n * This method lazily creates the `StylingContext`. This is because in most cases\n * we have styling without any bindings. Creating `StylingContext` eagerly would mean that\n * every style declaration such as `<div style=\"color: red\">` would result `StyleContext`\n * which would create unnecessary memory pressure.\n *\n * @param index Index of the style allocation. See: `elementStyling`.\n * @param viewData The view to search for the styling context\n */\nexport declare function getStylingContext(index: number, viewData: LViewData): StylingContext;\nexport declare function getOrCreatePlayerContext(target: {}, context?: LContext | null): PlayerContext;\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/query_list.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * @Component({...})\n * class Container {\n *   @ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n */\nexport declare class QueryList<T> {\n    readonly dirty = true;\n    private _results;\n    readonly changes: Observable<any>;\n    readonly length: number;\n    readonly first: T;\n    readonly last: T;\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    map<U>(fn: (item: T, index: number, array: T[]) => U): U[];\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     */\n    filter(fn: (item: T, index: number, array: T[]) => boolean): T[];\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    find(fn: (item: T, index: number, array: T[]) => boolean): T | undefined;\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    reduce<U>(fn: (prevValue: U, curValue: T, curIndex: number, array: T[]) => U, init: U): U;\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    forEach(fn: (item: T, index: number, array: T[]) => void): void;\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    some(fn: (value: T, index: number, array: T[]) => boolean): boolean;\n    toArray(): T[];\n    toString(): string;\n    reset(res: Array<T | any[]>): void;\n    notifyOnChanges(): void;\n    /** internal */\n    setDirty(): void;\n    /** internal */\n    destroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/compiler';\n"
  },
  {
    "path": "node_modules/@angular/common/http/testing/src/backend.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HttpBackend, HttpEvent, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { HttpTestingController, RequestMatch } from './api';\nimport { TestRequest } from './request';\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n *\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n *\n *\n */\nexport declare class HttpClientTestingBackend implements HttpBackend, HttpTestingController {\n    /**\n     * List of pending requests which have not yet been expected.\n     */\n    private open;\n    /**\n     * Handle an incoming request by queueing it in the list of open requests.\n     */\n    handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n    /**\n     * Helper function to search for requests in the list of open requests.\n     */\n    private _match;\n    /**\n     * Search for requests in the list of open requests, and return all that match\n     * without asserting anything about the number of matches.\n     */\n    match(match: string | RequestMatch | ((req: HttpRequest<any>) => boolean)): TestRequest[];\n    /**\n     * Expect that a single outstanding request matches the given matcher, and return\n     * it.\n     *\n     * Requests returned through this API will no longer be in the list of open requests,\n     * and thus will not match twice.\n     */\n    expectOne(match: string | RequestMatch | ((req: HttpRequest<any>) => boolean), description?: string): TestRequest;\n    /**\n     * Expect that no outstanding requests match the given matcher, and throw an error\n     * if any do.\n     */\n    expectNone(match: string | RequestMatch | ((req: HttpRequest<any>) => boolean), description?: string): void;\n    /**\n     * Validate that there are no outstanding requests.\n     */\n    verify(opts?: {\n        ignoreCancelled?: boolean;\n    }): void;\n    private descriptionFromMatcher;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/component_factory.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef } from '../change_detection/change_detection';\nimport { Injector } from '../di/injector';\nimport { Type } from '../type';\nimport { ElementRef } from './element_ref';\nimport { NgModuleRef } from './ng_module_factory';\nimport { ViewRef } from './view_ref';\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n */\nexport declare abstract class ComponentRef<C> {\n    /**\n     * The host or anchor [element](guide/glossary#element) for this component instance.\n     */\n    abstract readonly location: ElementRef;\n    /**\n     * The [dependency injector](guide/glossary#injector) for this component instance.\n     */\n    abstract readonly injector: Injector;\n    /**\n     * This component instance.\n     */\n    abstract readonly instance: C;\n    /**\n     * The [host view](guide/glossary#view-tree) defined by the template\n     * for this component instance.\n     */\n    abstract readonly hostView: ViewRef;\n    /**\n     * The change detector for this component instance.\n     */\n    abstract readonly changeDetectorRef: ChangeDetectorRef;\n    /**\n     * The component type.\n     */\n    abstract readonly componentType: Type<any>;\n    /**\n     * Destroys the component instance and all of the data structures associated with it.\n     */\n    abstract destroy(): void;\n    /**\n     * A lifecycle hook that provides additional developer-defined cleanup\n     * functionality for the component.\n     * @param callback A handler function that cleans up developer-defined data\n     * associated with this component. Called when the `destroy()` method is invoked.\n     */\n    abstract onDestroy(callback: Function): void;\n}\nexport declare abstract class ComponentFactory<C> {\n    /**\n     * The comonent's HTML selector.\n     */\n    abstract readonly selector: string;\n    /**\n     * The component's type\n     */\n    abstract readonly componentType: Type<any>;\n    /**\n     * Selector for all <ng-content> elements in the component.\n     */\n    abstract readonly ngContentSelectors: string[];\n    /**\n     * The inputs of the component.\n     */\n    abstract readonly inputs: {\n        propName: string;\n        templateName: string;\n    }[];\n    /**\n     * The outputs of the component.\n     */\n    abstract readonly outputs: {\n        propName: string;\n        templateName: string;\n    }[];\n    /**\n     * Creates a new component.\n     */\n    abstract create(injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string | any, ngModule?: NgModuleRef<any>): ComponentRef<C>;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/sanitization/style_sanitizer.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n */\nexport declare function _sanitizeStyle(value: string): string;\n/**\n * Used to intercept and sanitize style values before they are written to the renderer.\n *\n * This function is designed to be called in two modes. When a value is not provided\n * then the function will return a boolean whether a property will be sanitized later.\n * If a value is provided then the sanitized version of that will be returned.\n */\nexport interface StyleSanitizeFn {\n    /** This mode is designed to instruct whether the property will be used for sanitization\n     * at a later point */\n    (prop: string): boolean;\n    /** This mode is designed to sanitize the provided value */\n    (prop: string, value: string): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/view_container_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '../di/injector';\nimport { ComponentFactory, ComponentRef } from './component_factory';\nimport { ElementRef } from './element_ref';\nimport { NgModuleRef } from './ng_module_factory';\nimport { TemplateRef } from './template_ref';\nimport { EmbeddedViewRef, ViewRef } from './view_ref';\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n */\nexport declare abstract class ViewContainerRef {\n    /**\n     * Anchor element that specifies the location of this container in the containing view.\n     * Each view container can have only one anchor element, and each anchor element\n     * can have only a single view container.\n     *\n     * Root elements of views attached to this container become siblings of the anchor element in\n     * the rendered view.\n     *\n     * Access the `ViewContainerRef` of an element by placing a `Directive` injected\n     * with `ViewContainerRef` on the element, or use a `ViewChild` query.\n     *\n     * <!-- TODO: rename to anchorElement -->\n     */\n    abstract readonly element: ElementRef;\n    /**\n     * The [dependency injector](guide/glossary#injector) for this view container.\n     */\n    abstract readonly injector: Injector;\n    /** @deprecated No replacement */\n    abstract readonly parentInjector: Injector;\n    /**\n     * Destroys all views in this container.\n     */\n    abstract clear(): void;\n    /**\n     * Retrieves a view from this container.\n     * @param index The 0-based index of the view to retrieve.\n     * @returns The `ViewRef` instance, or null if the index is out of range.\n     */\n    abstract get(index: number): ViewRef | null;\n    /**\n     * Reports how many views are currently attached to this container.\n     * @returns The number of views.\n     */\n    abstract readonly length: number;\n    /**\n     * Instantiates an embedded view and inserts it\n     * into this container.\n     * @param templateRef The HTML template that defines the view.\n     * @param index The 0-based index at which to insert the new view into this container.\n     * If not specified, appends the new view as the last entry.\n     *\n     * @returns The `ViewRef` instance for the newly created view.\n     */\n    abstract createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number): EmbeddedViewRef<C>;\n    /**\n     * Instantiates a single component and inserts its host view into this container.\n     *\n     * @param componentFactory The factory to use.\n     * @param index The index at which to insert the new component's host view into this container.\n     * If not specified, appends the new view as the last entry.\n     * @param injector The injector to use as the parent for the new component.\n     * @param projectableNodes\n     * @param ngModule\n     *\n     * @returns The new component instance, containing the host view.\n     *\n     */\n    abstract createComponent<C>(componentFactory: ComponentFactory<C>, index?: number, injector?: Injector, projectableNodes?: any[][], ngModule?: NgModuleRef<any>): ComponentRef<C>;\n    /**\n     * Inserts a view into this container.\n     * @param viewRef The view to insert.\n     * @param index The 0-based index at which to insert the view.\n     * If not specified, appends the new view as the last entry.\n     * @returns The inserted `ViewRef` instance.\n     *\n     */\n    abstract insert(viewRef: ViewRef, index?: number): ViewRef;\n    /**\n     * Moves a view to a new location in this container.\n     * @param viewRef The view to move.\n     * @param index The 0-based index of the new location.\n     * @returns The moved `ViewRef` instance.\n     */\n    abstract move(viewRef: ViewRef, currentIndex: number): ViewRef;\n    /**\n     * Returns the index of a view within the current container.\n     * @param viewRef The view to query.\n     * @returns The 0-based index of the view's position in this container,\n     * or `-1` if this container doesn't contain the view.\n     */\n    abstract indexOf(viewRef: ViewRef): number;\n    /**\n     * Destroys a view attached to this container\n     * @param index The 0-based index of the view to destroy.\n     * If not specified, the last view in the container is removed.\n     */\n    abstract remove(index?: number): void;\n    /**\n     * Detaches a view from this container without destroying it.\n     * Use along with `insert()` to move a view within the current container.\n     * @param index The 0-based index of the view to detach.\n     * If not specified, the last view in the container is detached.\n     */\n    abstract detach(index?: number): ViewRef | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/core';\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LContainer } from './interfaces/container';\nimport { LContext } from './interfaces/context';\nimport { TNode } from './interfaces/node';\nimport { RComment, RElement, RText } from './interfaces/renderer';\nimport { StylingContext } from './interfaces/styling';\nimport { LViewData, RootContext, TData } from './interfaces/view';\n/**\n * Returns whether the values are different from a change detection stand point.\n *\n * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n */\nexport declare function isDifferent(a: any, b: any, checkNoChangesMode: boolean): boolean;\nexport declare function stringify(value: any): string;\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n */\nexport declare function flatten(list: any[]): any[];\n/** Retrieves a value from any `LViewData` or `TData`. */\nexport declare function loadInternal<T>(index: number, arr: LViewData | TData): T;\nexport declare function assertDataInRangeInternal(index: number, arr: any[]): void;\n/**\n * Takes the value of a slot in `LViewData` and returns the element node.\n *\n * Normally, element nodes are stored flat, but if the node has styles/classes on it,\n * it might be wrapped in a styling context. Or if that node has a directive that injects\n * ViewContainerRef, it may be wrapped in an LContainer. Or if that node is a component,\n * it will be wrapped in LViewData. It could even have all three, so we keep looping\n * until we find something that isn't an array.\n *\n * @param value The initial value in `LViewData`\n */\nexport declare function readElementValue(value: RElement | StylingContext | LContainer | LViewData): RElement;\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n */\nexport declare function getNativeByIndex(index: number, arr: LViewData): RElement;\nexport declare function getNativeByTNode(tNode: TNode, hostView: LViewData): RElement | RText | RComment;\nexport declare function getTNode(index: number, view: LViewData): TNode;\nexport declare function getComponentViewByIndex(nodeIndex: number, hostView: LViewData): LViewData;\nexport declare function isContentQueryHost(tNode: TNode): boolean;\nexport declare function isComponent(tNode: TNode): boolean;\nexport declare function isLContainer(value: RElement | RComment | LContainer | StylingContext): boolean;\n/**\n * Retrieve the root view from any component by walking the parent `LViewData` until\n * reaching the root `LViewData`.\n *\n * @param component any component\n */\nexport declare function getRootView(target: LViewData | {}): LViewData;\nexport declare function getRootContext(viewOrComponent: LViewData | {}): RootContext;\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\nexport declare function readPatchedData(target: any): LViewData | LContext | null;\nexport declare function readPatchedLViewData(target: any): LViewData | null;\n"
  },
  {
    "path": "node_modules/@angular/common/src/i18n/locale_data.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @experimental i18n support is experimental.\n */\nexport declare const LOCALE_DATA: {\n    [localeId: string]: any;\n};\n/**\n * Register global data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n#i18n-pipes) to know how to import additional locale data.\n *\n * @experimental i18n support is experimental.\n */\nexport declare function registerLocaleData(data: any, localeId?: string | any, extraData?: any): void;\n/**\n * Index of each type of locale data from the locale data array\n */\nexport declare const enum LocaleDataIndex {\n    LocaleId = 0,\n    DayPeriodsFormat = 1,\n    DayPeriodsStandalone = 2,\n    DaysFormat = 3,\n    DaysStandalone = 4,\n    MonthsFormat = 5,\n    MonthsStandalone = 6,\n    Eras = 7,\n    FirstDayOfWeek = 8,\n    WeekendRange = 9,\n    DateFormat = 10,\n    TimeFormat = 11,\n    DateTimeFormat = 12,\n    NumberSymbols = 13,\n    NumberFormats = 14,\n    CurrencySymbol = 15,\n    CurrencyName = 16,\n    Currencies = 17,\n    PluralCase = 18,\n    ExtraData = 19\n}\n/**\n * Index of each type of locale data from the extra locale data array\n */\nexport declare const enum ExtraLocaleDataIndex {\n    ExtraDayPeriodFormats = 0,\n    ExtraDayPeriodStandalone = 1,\n    ExtraDayPeriodsRules = 2\n}\n/**\n * Index of each value in currency data (used to describe CURRENCIES_EN in currencies.ts)\n */\nexport declare const enum CurrencyIndex {\n    Symbol = 0,\n    SymbolNarrow = 1,\n    NbOfDigits = 2\n}\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/component_fixture.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, ComponentRef, DebugElement, ElementRef, NgZone } from '@angular/core';\n/**\n * Fixture for debugging and testing a component.\n *\n *\n */\nexport declare class ComponentFixture<T> {\n    componentRef: ComponentRef<T>;\n    ngZone: NgZone | null;\n    private _autoDetect;\n    /**\n     * The DebugElement associated with the root element of this component.\n     */\n    debugElement: DebugElement;\n    /**\n     * The instance of the root component class.\n     */\n    componentInstance: T;\n    /**\n     * The native element at the root of the component.\n     */\n    nativeElement: any;\n    /**\n     * The ElementRef for the element at the root of the component.\n     */\n    elementRef: ElementRef;\n    /**\n     * The ChangeDetectorRef for the component\n     */\n    changeDetectorRef: ChangeDetectorRef;\n    private _renderer;\n    private _isStable;\n    private _isDestroyed;\n    private _resolve;\n    private _promise;\n    private _onUnstableSubscription;\n    private _onStableSubscription;\n    private _onMicrotaskEmptySubscription;\n    private _onErrorSubscription;\n    constructor(componentRef: ComponentRef<T>, ngZone: NgZone | null, _autoDetect: boolean);\n    private _tick;\n    /**\n     * Trigger a change detection cycle for the component.\n     */\n    detectChanges(checkNoChanges?: boolean): void;\n    /**\n     * Do a change detection run to make sure there were no changes.\n     */\n    checkNoChanges(): void;\n    /**\n     * Set whether the fixture should autodetect changes.\n     *\n     * Also runs detectChanges once so that any existing change is detected.\n     */\n    autoDetectChanges(autoDetect?: boolean): void;\n    /**\n     * Return whether the fixture is currently stable or has async tasks that have not been completed\n     * yet.\n     */\n    isStable(): boolean;\n    /**\n     * Get a promise that resolves when the fixture is stable.\n     *\n     * This can be used to resume testing after events have triggered asynchronous activity or\n     * asynchronous change detection.\n     */\n    whenStable(): Promise<any>;\n    private _getRenderer;\n    /**\n      * Get a promise that resolves when the ui state is stable following animations.\n      */\n    whenRenderingDone(): Promise<any>;\n    /**\n     * Trigger component destruction.\n     */\n    destroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/renderer.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The goal here is to make sure that the browser DOM API is the Renderer.\n * We do this by defining a subset of DOM API to be the renderer and than\n * use that time for rendering.\n *\n * At runtime we can than use the DOM api directly, in server or web-worker\n * it will be easy to implement such API.\n */\nimport { RendererStyleFlags2, RendererType2 } from '../../render/api';\nexport declare enum RendererStyleFlags3 {\n    Important = 1,\n    DashCase = 2\n}\nexport declare type Renderer3 = ObjectOrientedRenderer3 | ProceduralRenderer3;\n/**\n * Object Oriented style of API needed to create elements and text nodes.\n *\n * This is the native browser API style, e.g. operations are methods on individual objects\n * like HTMLElement. With this style, no additional code is needed as a facade\n * (reducing payload size).\n * */\nexport interface ObjectOrientedRenderer3 {\n    createComment(data: string): RComment;\n    createElement(tagName: string): RElement;\n    createElementNS(namespace: string, tagName: string): RElement;\n    createTextNode(data: string): RText;\n    querySelector(selectors: string): RElement | null;\n}\n/** Returns whether the `renderer` is a `ProceduralRenderer3` */\nexport declare function isProceduralRenderer(renderer: ProceduralRenderer3 | ObjectOrientedRenderer3): renderer is ProceduralRenderer3;\n/**\n * Procedural style of API needed to create elements and text nodes.\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the\n * facade that enables element manipulation. This also facilitates backwards compatibility\n * with Renderer2.\n */\nexport interface ProceduralRenderer3 {\n    destroy(): void;\n    createComment(value: string): RComment;\n    createElement(name: string, namespace?: string | null): RElement;\n    createText(value: string): RText;\n    /**\n     * This property is allowed to be null / undefined,\n     * in which case the view engine won't call it.\n     * This is used as a performance optimization for production mode.\n     */\n    destroyNode?: ((node: RNode) => void) | null;\n    appendChild(parent: RElement, newChild: RNode): void;\n    insertBefore(parent: RNode, newChild: RNode, refChild: RNode | null): void;\n    removeChild(parent: RElement, oldChild: RNode): void;\n    selectRootElement(selectorOrNode: string | any): RElement;\n    setAttribute(el: RElement, name: string, value: string, namespace?: string | null): void;\n    removeAttribute(el: RElement, name: string, namespace?: string | null): void;\n    addClass(el: RElement, name: string): void;\n    removeClass(el: RElement, name: string): void;\n    setStyle(el: RElement, style: string, value: any, flags?: RendererStyleFlags2 | RendererStyleFlags3): void;\n    removeStyle(el: RElement, style: string, flags?: RendererStyleFlags2 | RendererStyleFlags3): void;\n    setProperty(el: RElement, name: string, value: any): void;\n    setValue(node: RText, value: string): void;\n    listen(target: RNode, eventName: string, callback: (event: any) => boolean | void): () => void;\n}\nexport interface RendererFactory3 {\n    createRenderer(hostElement: RElement | null, rendererType: RendererType2 | null): Renderer3;\n    begin?(): void;\n    end?(): void;\n}\nexport declare const domRendererFactory3: RendererFactory3;\n/** Subset of API needed for appending elements and text nodes. */\nexport interface RNode {\n    removeChild(oldChild: RNode): void;\n    /**\n     * Insert a child node.\n     *\n     * Used exclusively for adding View root nodes into ViewAnchor location.\n     */\n    insertBefore(newChild: RNode, refChild: RNode | null, isViewRoot: boolean): void;\n    /**\n     * Append a child node.\n     *\n     * Used exclusively for building up DOM which are static (ie not View roots)\n     */\n    appendChild(newChild: RNode): RNode;\n}\n/**\n * Subset of API needed for writing attributes, properties, and setting up\n * listeners on Element.\n */\nexport interface RElement extends RNode {\n    style: RCssStyleDeclaration;\n    classList: RDomTokenList;\n    className: string;\n    setAttribute(name: string, value: string): void;\n    removeAttribute(name: string): void;\n    setAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void;\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\n    removeEventListener(type: string, listener?: EventListener, options?: boolean): void;\n    setProperty?(name: string, value: any): void;\n}\nexport interface RCssStyleDeclaration {\n    removeProperty(propertyName: string): string;\n    setProperty(propertyName: string, value: string | null, priority?: string): void;\n}\nexport interface RDomTokenList {\n    add(token: string): void;\n    remove(token: string): void;\n}\nexport interface RText extends RNode {\n    textContent: string | null;\n}\nexport interface RComment extends RNode {\n}\nexport declare const unusedValueExportToPlacateAjd = 1;\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/metadata.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type of the Inject decorator / constructor function.\n */\nexport interface InjectDecorator {\n    /**\n     * A constructor parameter decorator that specifies a\n     * custom provider of a dependency.\n     *\n     * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n     *\n     * @usageNotes\n     * The following example shows a class constructor that specifies a\n     * custom provider of a dependency using the parameter decorator.\n     *\n     * {@example core/di/ts/metadata_spec.ts region='Inject'}\n     *\n     * When `@Inject()` is not present, the `Injector` uses the type annotation of the\n     * parameter as the provider.\n     *\n     * {@example core/di/ts/metadata_spec.ts region='InjectWithoutDecorator'}\n     */\n    (token: any): any;\n    new (token: any): Inject;\n}\n/**\n * Type of the Inject metadata.\n */\nexport interface Inject {\n    /**\n     * Injector token that maps to the dependency to be injected.\n     */\n    token: any;\n}\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n */\nexport declare const Inject: InjectDecorator;\n/**\n * Type of the Optional decorator / constructor function.\n */\nexport interface OptionalDecorator {\n    /**\n     * A constructor parameter decorator that marks a dependency as optional.\n     *\n     * The DI framework provides null if the dependency is not found.\n     * For example, the following code allows the possibility of a null result:\n     *\n     * {@example core/di/ts/metadata_spec.ts region='Optional'}\n     *\n     * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n     */\n    (): any;\n    new (): Optional;\n}\n/**\n * Type of the Optional metadata.\n */\nexport interface Optional {\n}\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n */\nexport declare const Optional: OptionalDecorator;\n/**\n * Type of the Self decorator / constructor function.\n */\nexport interface SelfDecorator {\n    /**\n     * A constructor parameter decorator that tells the DI framework\n     * to retrieve a dependency only from the local injector.\n     *\n     * In the following example, the dependency can be resolved\n     * by the local injector when instantiating the class itself, but not\n     * when instantiating a child.\n     *\n     * {@example core/di/ts/metadata_spec.ts region='Self'}\n     *\n     * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n     *\n     *\n     */\n    (): any;\n    new (): Self;\n}\n/**\n * Type of the Self metadata.\n */\nexport interface Self {\n}\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n */\nexport declare const Self: SelfDecorator;\n/**\n * Type of the SkipSelf decorator / constructor function.\n */\nexport interface SkipSelfDecorator {\n    /**\n     * A constructor parameter decorator that tells the DI framework\n     * that dependency resolution should start from the parent injector.\n     *\n     * In the following example, the dependency can be resolved when\n     * instantiating a child, but not when instantiating the class itself.\n     *\n     * {@example core/di/ts/metadata_spec.ts region='SkipSelf'}\n     *\n     * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n     *\n     *\n     */\n    (): any;\n    new (): SkipSelf;\n}\n/**\n * Type of the SkipSelf metadata.\n *\n *\n */\nexport interface SkipSelf {\n}\n/**\n * SkipSelf decorator and metadata.\n *\n * @Annotation\n */\nexport declare const SkipSelf: SkipSelfDecorator;\n/**\n * Type of the Host decorator / constructor function.\n */\nexport interface HostDecorator {\n    /**\n     * A constructor parameter decorator that tells the DI framework\n     * to retrieve a dependency from any injector until\n     * reaching the host element of the current component.\n     *\n     * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n     *\n     * @usageNotes\n     *\n     * {@example core/di/ts/metadata_spec.ts region='Host'}\n     */\n    (): any;\n    new (): Host;\n}\n/**\n * Type of the Host metadata.\n */\nexport interface Host {\n}\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n */\nexport declare const Host: HostDecorator;\n"
  },
  {
    "path": "node_modules/@angular/common/http/testing/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/common/http/src/response.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HttpHeaders } from './headers';\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n *\n */\nexport declare enum HttpEventType {\n    /**\n     * The request was sent out over the wire.\n     */\n    Sent = 0,\n    /**\n     * An upload progress event was received.\n     */\n    UploadProgress = 1,\n    /**\n     * The response status code and headers were received.\n     */\n    ResponseHeader = 2,\n    /**\n     * A download progress event was received.\n     */\n    DownloadProgress = 3,\n    /**\n     * The full response including the body was received.\n     */\n    Response = 4,\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    User = 5\n}\n/**\n * Base interface for progress events.\n *\n *\n */\nexport interface HttpProgressEvent {\n    /**\n     * Progress event type is either upload or download.\n     */\n    type: HttpEventType.DownloadProgress | HttpEventType.UploadProgress;\n    /**\n     * Number of bytes uploaded or downloaded.\n     */\n    loaded: number;\n    /**\n     * Total number of bytes to upload or download. Depending on the request or\n     * response, this may not be computable and thus may not be present.\n     */\n    total?: number;\n}\n/**\n * A download progress event.\n *\n *\n */\nexport interface HttpDownloadProgressEvent extends HttpProgressEvent {\n    type: HttpEventType.DownloadProgress;\n    /**\n     * The partial response body as downloaded so far.\n     *\n     * Only present if the responseType was `text`.\n     */\n    partialText?: string;\n}\n/**\n * An upload progress event.\n *\n *\n */\nexport interface HttpUploadProgressEvent extends HttpProgressEvent {\n    type: HttpEventType.UploadProgress;\n}\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n *\n */\nexport interface HttpSentEvent {\n    type: HttpEventType.Sent;\n}\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n *\n */\nexport interface HttpUserEvent<T> {\n    type: HttpEventType.User;\n}\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n */\nexport interface HttpJsonParseError {\n    error: Error;\n    text: string;\n}\n/**\n * Union type for all possible events on the response stream.\n *\n * Typed according to the expected type of the response.\n *\n *\n */\nexport declare type HttpEvent<T> = HttpSentEvent | HttpHeaderResponse | HttpResponse<T> | HttpProgressEvent | HttpUserEvent<T>;\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n *\n */\nexport declare abstract class HttpResponseBase {\n    /**\n     * All response headers.\n     */\n    readonly headers: HttpHeaders;\n    /**\n     * Response status code.\n     */\n    readonly status: number;\n    /**\n     * Textual description of response status code.\n     *\n     * Do not depend on this.\n     */\n    readonly statusText: string;\n    /**\n     * URL of the resource retrieved, or null if not available.\n     */\n    readonly url: string | null;\n    /**\n     * Whether the status code falls in the 2xx range.\n     */\n    readonly ok: boolean;\n    /**\n     * Type of the response, narrowed to either the full response or the header.\n     */\n    readonly type: HttpEventType.Response | HttpEventType.ResponseHeader;\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init: {\n        headers?: HttpHeaders;\n        status?: number;\n        statusText?: string;\n        url?: string;\n    }, defaultStatus?: number, defaultStatusText?: string);\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n *\n */\nexport declare class HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init?: {\n        headers?: HttpHeaders;\n        status?: number;\n        statusText?: string;\n        url?: string;\n    });\n    readonly type: HttpEventType.ResponseHeader;\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update?: {\n        headers?: HttpHeaders;\n        status?: number;\n        statusText?: string;\n        url?: string;\n    }): HttpHeaderResponse;\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n *\n */\nexport declare class HttpResponse<T> extends HttpResponseBase {\n    /**\n     * The response body, or `null` if one was not returned.\n     */\n    readonly body: T | null;\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init?: {\n        body?: T | null;\n        headers?: HttpHeaders;\n        status?: number;\n        statusText?: string;\n        url?: string;\n    });\n    readonly type: HttpEventType.Response;\n    clone(): HttpResponse<T>;\n    clone(update: {\n        headers?: HttpHeaders;\n        status?: number;\n        statusText?: string;\n        url?: string;\n    }): HttpResponse<T>;\n    clone<V>(update: {\n        body?: V | null;\n        headers?: HttpHeaders;\n        status?: number;\n        statusText?: string;\n        url?: string;\n    }): HttpResponse<V>;\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n *\n */\nexport declare class HttpErrorResponse extends HttpResponseBase implements Error {\n    readonly name = \"HttpErrorResponse\";\n    readonly message: string;\n    readonly error: any | null;\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     */\n    readonly ok = false;\n    constructor(init: {\n        error?: any;\n        headers?: HttpHeaders;\n        status?: number;\n        statusText?: string;\n        url?: string;\n    });\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/directives/router_link.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LocationStrategy } from '@angular/common';\nimport { ElementRef, OnChanges, OnDestroy, Renderer2 } from '@angular/core';\nimport { QueryParamsHandling } from '../config';\nimport { Router } from '../router';\nimport { ActivatedRoute } from '../router_state';\nimport { UrlTree } from '../url_tree';\n/**\n * @description\n *\n * Lets you link to specific routes in your app.\n *\n * Consider the following route configuration:\n * `[{ path: 'user/:name', component: UserCmp }]`.\n * When linking to this `user/:name` route, you use the `RouterLink` directive.\n *\n * If the link is static, you can use the directive as follows:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n *\n * If you use dynamic values to generate the link, you can pass an array of path\n * segments, followed by the params for each segment.\n *\n * For instance `['/team', teamId, 'user', userName, {details: true}]`\n * means that we want to generate a link to `/team/11/user/bob;details=true`.\n *\n * Multiple static segments can be merged into one\n * (e.g., `['/team/11/user', userName, {details: true}]`).\n *\n * The first segment name can be prepended with `/`, `./`, or `../`:\n * * If the first segment begins with `/`, the router will look up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router will\n *   instead look in the children of the current activated route.\n * * And if the first segment begins with `../`, the router will go up one level.\n *\n * You can set query params and fragment as follows:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.\n *\n * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the\n * directive to preserve the current query params and fragment:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment>\n *   link to user component\n * </a>\n * ```\n *\n * You can tell the directive to how to handle queryParams, available options are:\n *  - `'merge'`: merge the queryParams into the current queryParams\n *  - `'preserve'`: preserve the current queryParams\n *  - default/`''`: use the queryParams only\n *\n * Same options for {@link NavigationExtras#queryParamsHandling\n * NavigationExtras#queryParamsHandling}.\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n *\n * The router link directive always treats the provided input as a delta to the current url.\n *\n * For instance, if the current url is `/user/(box//aux:team)`.\n *\n * Then the following link `<a [routerLink]=\"['/user/jim']\">Jim</a>` will generate the link\n * `/user/(jim//aux:team)`.\n *\n * See {@link Router#createUrlTree createUrlTree} for more information.\n *\n * @ngModule RouterModule\n *\n *\n */\nexport declare class RouterLink {\n    private router;\n    private route;\n    queryParams: {\n        [k: string]: any;\n    };\n    fragment: string;\n    queryParamsHandling: QueryParamsHandling;\n    preserveFragment: boolean;\n    skipLocationChange: boolean;\n    replaceUrl: boolean;\n    private commands;\n    private preserve;\n    constructor(router: Router, route: ActivatedRoute, tabIndex: string, renderer: Renderer2, el: ElementRef);\n    routerLink: any[] | string;\n    /**\n     * @deprecated 4.0.0 use `queryParamsHandling` instead.\n     */\n    preserveQueryParams: boolean;\n    onClick(): boolean;\n    readonly urlTree: UrlTree;\n}\n/**\n * @description\n *\n * Lets you link to specific routes in your app.\n *\n * See `RouterLink` for more information.\n *\n * @ngModule RouterModule\n *\n *\n */\nexport declare class RouterLinkWithHref implements OnChanges, OnDestroy {\n    private router;\n    private route;\n    private locationStrategy;\n    target: string;\n    queryParams: {\n        [k: string]: any;\n    };\n    fragment: string;\n    queryParamsHandling: QueryParamsHandling;\n    preserveFragment: boolean;\n    skipLocationChange: boolean;\n    replaceUrl: boolean;\n    private commands;\n    private subscription;\n    private preserve;\n    href: string;\n    constructor(router: Router, route: ActivatedRoute, locationStrategy: LocationStrategy);\n    routerLink: any[] | string;\n    preserveQueryParams: boolean;\n    ngOnChanges(changes: {}): any;\n    ngOnDestroy(): any;\n    onClick(button: number, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean): boolean;\n    private updateTargetUrlAndHref;\n    readonly urlTree: UrlTree;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/testing/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n"
  },
  {
    "path": "node_modules/@angular/common/src/directives/ng_component_outlet.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector, NgModuleFactory, OnChanges, OnDestroy, SimpleChanges, Type, ViewContainerRef } from '@angular/core';\n/**\n * Instantiates a single {@link Component} type and inserts its Host View into current View.\n * `NgComponentOutlet` provides a declarative approach for dynamic component creation.\n *\n * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\n * any existing component will get destroyed.\n *\n * @usageNotes\n *\n * ### Fine tune control\n *\n * You can control the component creation process by using the following optional attributes:\n *\n * * `ngComponentOutletInjector`: Optional custom {@link Injector} that will be used as parent for\n * the Component. Defaults to the injector of the current view container.\n *\n * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\n * section of the component, if exists.\n *\n * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other\n * module, then load a component from that module.\n *\n * ### Syntax\n *\n * Simple\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\n * ```\n *\n * Customized injector/content\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   injector: injectorExpression;\n *                                   content: contentNodesExpression;\">\n * </ng-container>\n * ```\n *\n * Customized ngModuleFactory\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   ngModuleFactory: moduleFactory;\">\n * </ng-container>\n * ```\n *\n * ### A simple example\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\n *\n * A more complete example with additional options:\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\n\n * A more complete example with ngModuleFactory:\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}\n *\n * @experimental\n * @ngModule CommonModule\n */\nexport declare class NgComponentOutlet implements OnChanges, OnDestroy {\n    private _viewContainerRef;\n    ngComponentOutlet: Type<any>;\n    ngComponentOutletInjector: Injector;\n    ngComponentOutletContent: any[][];\n    ngComponentOutletNgModuleFactory: NgModuleFactory<any>;\n    private _componentRef;\n    private _moduleRef;\n    constructor(_viewContainerRef: ViewContainerRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/directives/ng_template_outlet.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OnChanges, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Inserts an embedded view from a prepared `TemplateRef`.\n *\n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n *\n * @usageNotes\n * ```\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n *\n * Using the key `$implicit` in the context object will set its value as default.\n *\n * ### Example\n *\n * {@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n *\n */\nexport declare class NgTemplateOutlet implements OnChanges {\n    private _viewContainerRef;\n    private _viewRef;\n    ngTemplateOutletContext: Object;\n    ngTemplateOutlet: TemplateRef<any>;\n    constructor(_viewContainerRef: ViewContainerRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * We need to re-create existing embedded view if:\n     * - templateRef has changed\n     * - context has changes\n     *\n     * We mark context object as changed when the corresponding object\n     * shape changes (new properties are added or existing properties are removed).\n     * In other words we consider context with the same properties as \"the same\" even\n     * if object reference changes (see https://github.com/angular/angular/issues/13407).\n     */\n    private _shouldRecreateView;\n    private _hasContextShapeChanged;\n    private _updateExistingContext;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/error_handler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n */\nexport declare class ErrorHandler {\n    handleError(error: any): void;\n}\nexport declare function wrappedError(message: string, originalError: any): Error;\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { COMPILER_OPTIONS, Compiler, CompilerFactory, CompilerOptions, ModuleWithComponentFactories } from './linker/compiler';\nexport { ComponentFactory, ComponentRef } from './linker/component_factory';\nexport { ComponentFactoryResolver } from './linker/component_factory_resolver';\nexport { ElementRef } from './linker/element_ref';\nexport { NgModuleFactory, NgModuleRef } from './linker/ng_module_factory';\nexport { NgModuleFactoryLoader, getModuleFactory } from './linker/ng_module_factory_loader';\nexport { QueryList } from './linker/query_list';\nexport { SystemJsNgModuleLoader, SystemJsNgModuleLoaderConfig } from './linker/system_js_ng_module_factory_loader';\nexport { TemplateRef } from './linker/template_ref';\nexport { ViewContainerRef } from './linker/view_container_ref';\nexport { EmbeddedViewRef, ViewRef } from './linker/view_ref';\n"
  },
  {
    "path": "node_modules/@angular/core/testing/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/styling.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StyleSanitizeFn } from '../../sanitization/style_sanitizer';\nimport { RElement } from '../interfaces/renderer';\nimport { PlayerContext } from './player';\n/**\n * The styling context acts as a styling manifest (shaped as an array) for determining which\n * styling properties have been assigned via the provided `updateStylingMap`, `updateStyleProp`\n * and `updateClassProp` functions. There are also two initialization functions\n * `allocStylingContext` and `createStylingContextTemplate` which are used to initialize\n * and/or clone the context.\n *\n * The context is an array where the first two cells are used for static data (initial styling)\n * and dirty flags / index offsets). The remaining set of cells is used for multi (map) and single\n * (prop) style values.\n *\n * each value from here onwards is mapped as so:\n * [i] = mutation/type flag for the style/class value\n * [i + 1] = prop string (or null incase it has been removed)\n * [i + 2] = value string (or null incase it has been removed)\n *\n * There are three types of styling types stored in this context:\n *   initial: any styles that are passed in once the context is created\n *            (these are stored in the first cell of the array and the first\n *             value of this array is always `null` even if no initial styling exists.\n *             the `null` value is there so that any new styles have a parent to point\n *             to. This way we can always assume that there is a parent.)\n *\n *   single: any styles that are updated using `updateStyleProp` or `updateClassProp` (fixed set)\n *\n *   multi: any styles that are updated using `updateStylingMap` (dynamic set)\n *\n * Note that context is only used to collect style information. Only when `renderStyling`\n * is called is when the styling payload will be rendered (or built as a key/value map).\n *\n * When the context is created, depending on what initial styling values are passed in, the\n * context itself will be pre-filled with slots based on the initial style properties. Say\n * for example we have a series of initial styles that look like so:\n *\n *   style=\"width:100px; height:200px;\"\n *   class=\"foo\"\n *\n * Then the initial state of the context (once initialized) will look like so:\n *\n * ```\n * context = [\n *   element,\n *   playerContext | null,\n *   styleSanitizer | null,\n *   [null, '100px', '200px', true],  // property names are not needed since they have already been\n * written to DOM.\n *\n *   configMasterVal,\n *   1, // this instructs how many `style` values there are so that class index values can be\n * offsetted\n *   { classOne: true, classTwo: false } | 'classOne classTwo' | null // last class value provided\n * into updateStylingMap\n *   { styleOne: '100px', styleTwo: 0 } | null // last style value provided into updateStylingMap\n *\n *   // 8\n *   'width',\n *   pointers(1, 15);  // Point to static `width`: `100px` and multi `width`.\n *   null,\n *\n *   // 11\n *   'height',\n *   pointers(2, 18); // Point to static `height`: `200px` and multi `height`.\n *   null,\n *\n *   // 14\n *   'foo',\n *   pointers(1, 21);  // Point to static `foo`: `true` and multi `foo`.\n *   null,\n *\n *   // 17\n *   'width',\n *   pointers(1, 6);  // Point to static `width`: `100px` and single `width`.\n *   null,\n *\n *   // 21\n *   'height',\n *   pointers(2, 9);  // Point to static `height`: `200px` and single `height`.\n *   null,\n *\n *   // 24\n *   'foo',\n *   pointers(3, 12);  // Point to static `foo`: `true` and single `foo`.\n *   null,\n * ]\n *\n * function pointers(staticIndex: number, dynamicIndex: number) {\n *   // combine the two indices into a single word.\n *   return (staticIndex << StylingFlags.BitCountSize) |\n *     (dynamicIndex << (StylingIndex.BitCountSize + StylingFlags.BitCountSize));\n * }\n * ```\n *\n * The values are duplicated so that space is set aside for both multi ([style] and [class])\n * and single ([style.prop] or [class.named]) values. The respective config values\n * (configValA, configValB, etc...) are a combination of the StylingFlags with two index\n * values: the `initialIndex` (which points to the index location of the style value in\n * the initial styles array in slot 0) and the `dynamicIndex` (which points to the\n * matching single/multi index position in the context array for the same prop).\n *\n * This means that every time `updateStyleProp` or `updateClassProp` are called then they\n * must be called using an index value (not a property string) which references the index\n * value of the initial style prop/class when the context was created. This also means that\n * `updateStyleProp` or `updateClassProp` cannot be called with a new property (only\n * `updateStylingMap` can include new CSS properties that will be added to the context).\n */\nexport interface StylingContext extends Array<InitialStyles | {\n    [key: string]: any;\n} | number | string | boolean | RElement | StyleSanitizeFn | PlayerContext | null> {\n    /**\n     * Location of animation context (which contains the active players) for this element styling\n     * context.\n     */\n    [StylingIndex.PlayerContext]: PlayerContext | null;\n    /**\n     * The style sanitizer that is used within this context\n     */\n    [StylingIndex.StyleSanitizerPosition]: StyleSanitizeFn | null;\n    /**\n     * Location of initial data shared by all instances of this style.\n     */\n    [StylingIndex.InitialStylesPosition]: InitialStyles;\n    /**\n     * A numeric value representing the configuration status (whether the context is dirty or not)\n     * mixed together (using bit shifting) with a index value which tells the starting index value\n     * of where the multi style entries begin.\n     */\n    [StylingIndex.MasterFlagPosition]: number;\n    /**\n     * A numeric value representing the class index offset value. Whenever a single class is\n     * applied (using `elementClassProp`) it should have an styling index value that doesn't\n     * need to take into account any style values that exist in the context.\n     */\n    [StylingIndex.ClassOffsetPosition]: number;\n    /**\n     * Location of element that is used as a target for this context.\n     */\n    [StylingIndex.ElementPosition]: RElement | null;\n    /**\n     * The last class value that was interpreted by elementStylingMap. This is cached\n     * So that the algorithm can exit early incase the value has not changed.\n     */\n    [StylingIndex.PreviousMultiClassValue]: {\n        [key: string]: any;\n    } | string | null;\n    /**\n     * The last style value that was interpreted by elementStylingMap. This is cached\n     * So that the algorithm can exit early incase the value has not changed.\n     */\n    [StylingIndex.PreviousMultiStyleValue]: {\n        [key: string]: any;\n    } | null;\n}\n/**\n * The initial styles is populated whether or not there are any initial styles passed into\n * the context during allocation. The 0th value must be null so that index values of `0` within\n * the context flags can always point to a null value safely when nothing is set.\n *\n * All other entries in this array are of `string` value and correspond to the values that\n * were extracted from the `style=\"\"` attribute in the HTML code for the provided template.\n */\nexport interface InitialStyles extends Array<string | null | boolean> {\n    [0]: null;\n}\n/**\n * Used to set the context to be dirty or not both on the master flag (position 1)\n * or for each single/multi property that exists in the context.\n */\nexport declare const enum StylingFlags {\n    None = 0,\n    Dirty = 1,\n    Class = 2,\n    Sanitize = 4,\n    BitCountSize = 3,\n    BitMask = 7\n}\n/** Used as numeric pointer values to determine what cells to update in the `StylingContext` */\nexport declare const enum StylingIndex {\n    PlayerContext = 0,\n    StyleSanitizerPosition = 1,\n    InitialStylesPosition = 2,\n    MasterFlagPosition = 3,\n    ClassOffsetPosition = 4,\n    ElementPosition = 5,\n    PreviousMultiClassValue = 6,\n    PreviousMultiStyleValue = 7,\n    SingleStylesStartPosition = 8,\n    FlagsOffset = 0,\n    PropertyOffset = 1,\n    ValueOffset = 2,\n    Size = 3,\n    BitCountSize = 14,\n    BitMask = 16383\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/type.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n *\n */\nexport declare const Type: FunctionConstructor;\nexport declare function isType(v: any): v is Type<any>;\nexport interface Type<T> extends Function {\n    new (...args: any[]): T;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/player.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A shared interface which contains an animation player\n */\nexport interface Player {\n    parent?: Player | null;\n    state: PlayState;\n    play(): void;\n    pause(): void;\n    finish(): void;\n    destroy(): void;\n    addEventListener(state: PlayState | string, cb: (data?: any) => any): void;\n}\n/**\n * The state of a given player\n *\n * Do not change the increasing nature of the numbers since the player\n * code may compare state by checking if a number is higher or lower than\n * a certain numeric value.\n */\nexport declare const enum PlayState {\n    Pending = 0,\n    Running = 1,\n    Paused = 2,\n    Finished = 100,\n    Destroyed = 200\n}\n/**\n * The context that stores all active animation players present on an element.\n */\nexport declare type PlayerContext = Player[];\nexport declare type ComponentInstance = {};\nexport declare type DirectiveInstance = {};\n/**\n * Designed to be used as an injection service to capture all animation players.\n *\n * When present all animation players will be passed into the flush method below.\n * This feature is designed to service application-wide animation testing, live\n * debugging as well as custom animation choreographing tools.\n */\nexport interface PlayerHandler {\n    /**\n     * Designed to kick off the player at the end of change detection\n     */\n    flushPlayers(): void;\n    /**\n     * @param player The player that has been scheduled to run within the application.\n     * @param context The context as to where the player was bound to\n     */\n    queuePlayer(player: Player, context: ComponentInstance | DirectiveInstance | HTMLElement): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/directives/ng_style.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DoCheck, ElementRef, KeyValueDiffers, Renderer2 } from '@angular/core';\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n * <some-element [ngStyle]=\"{'font-style': styleExp}\">...</some-element>\n *\n * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n *\n * <some-element [ngStyle]=\"objExp\">...</some-element>\n * ```\n *\n * @description\n *\n * Update an HTML element styles.\n *\n * The styles are updated according to the value of the expression evaluation:\n * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),\n * - values are the values assigned to those properties (expressed in the given unit).\n *\n *\n */\nexport declare class NgStyle implements DoCheck {\n    private _differs;\n    private _ngEl;\n    private _renderer;\n    private _ngStyle;\n    private _differ;\n    constructor(_differs: KeyValueDiffers, _ngEl: ElementRef, _renderer: Renderer2);\n    ngStyle: {\n        [key: string]: string;\n    };\n    ngDoCheck(): void;\n    private _applyChanges;\n    private _setStyle;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/directives/ng_class.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DoCheck, ElementRef, IterableDiffers, KeyValueDiffers, Renderer2 } from '@angular/core';\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n *     <some-element [ngClass]=\"'first second'\">...</some-element>\n *\n *     <some-element [ngClass]=\"['first', 'second']\">...</some-element>\n *\n *     <some-element [ngClass]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n *\n *     <some-element [ngClass]=\"stringExp|arrayExp|objExp\">...</some-element>\n *\n *     <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n * ```\n *\n * @description\n *\n * Adds and removes CSS classes on an HTML element.\n *\n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n * - `string` - the CSS classes listed in the string (space delimited) are added,\n * - `Array` - the CSS classes declared as Array elements are added,\n * - `Object` - keys are CSS classes that get added when the expression given in the value\n *              evaluates to a truthy value, otherwise they are removed.\n *\n *\n */\nexport declare class NgClass implements DoCheck {\n    private _iterableDiffers;\n    private _keyValueDiffers;\n    private _ngEl;\n    private _renderer;\n    private _iterableDiffer;\n    private _keyValueDiffer;\n    private _initialClasses;\n    private _rawClass;\n    constructor(_iterableDiffers: IterableDiffers, _keyValueDiffers: KeyValueDiffers, _ngEl: ElementRef, _renderer: Renderer2);\n    klass: string;\n    ngClass: string | string[] | Set<string> | {\n        [klass: string]: any;\n    };\n    ngDoCheck(): void;\n    private _applyKeyValueChanges;\n    private _applyIterableChanges;\n    /**\n     * Applies a collection of CSS classes to the DOM element.\n     *\n     * For argument of type Set and Array CSS class names contained in those collections are always\n     * added.\n     * For argument of type Map CSS class name in the map's key is toggled based on the value (added\n     * for truthy and removed for falsy).\n     */\n    private _applyClasses;\n    /**\n     * Removes a collection of CSS classes from the DOM element. This is mostly useful for cleanup\n     * purposes.\n     */\n    private _removeClasses;\n    private _toggleClass;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/testing/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/common/src/pipes/deprecated/number_pipe.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PipeTransform } from '@angular/core';\n/**\n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the active locale.\n *\n * where `expression` is a number:\n *  - `digitInfo` is a `string` which has a following format: <br>\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\n *\n * For more information on the acceptable range for each of these numbers and other\n * details see your native internationalization library.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/number_pipe.ts region='DeprecatedNumberPipe'}\n *\n * @ngModule CommonModule\n */\nexport declare class DeprecatedDecimalPipe implements PipeTransform {\n    private _locale;\n    constructor(_locale: string);\n    transform(value: any, digits?: string): string | null;\n}\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Formats a number as percentage according to locale rules.\n *\n * - `digitInfo` See {@link DecimalPipe} for detailed description.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/percent_pipe.ts region='DeprecatedPercentPipe'}\n *\n *\n */\nexport declare class DeprecatedPercentPipe implements PipeTransform {\n    private _locale;\n    constructor(_locale: string);\n    transform(value: any, digits?: string): string | null;\n}\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as currency using locale rules.\n *\n * Use `currency` to format a number as currency.\n *\n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.\n *   - `true`: use symbol (e.g. `$`).\n *   - `false`(default): use code (e.g. `USD`).\n * - `digitInfo` See {@link DecimalPipe} for detailed description.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/currency_pipe.ts region='DeprecatedCurrencyPipe'}\n *\n *\n */\nexport declare class DeprecatedCurrencyPipe implements PipeTransform {\n    private _locale;\n    constructor(_locale: string);\n    transform(value: any, currencyCode?: string, symbolDisplay?: boolean, digits?: string): string | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/directives/ng_if.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplateRef, ViewContainerRef } from '@angular/core';\n/**\n * Conditionally includes a template based on the value of an `expression`.\n *\n * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place\n * when expression is truthy or falsy respectively. Typically the:\n *  - `then` template is the inline template of `ngIf` unless bound to a different value.\n *  - `else` template is blank unless it is bound.\n *\n *\n * @usageNotes\n *\n * ### Most common usage\n *\n * The most common usage of the `ngIf` directive is to conditionally show the inline template as\n * seen in this example:\n * {@example common/ngIf/ts/module.ts region='NgIfSimple'}\n *\n * ### Showing an alternative template using `else`\n *\n * If it is necessary to display a template when the `expression` is falsy use the `else` template\n * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.\n * The template can be defined anywhere in the component view but is typically placed right after\n * `ngIf` for readability.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfElse'}\n *\n * ### Using non-inlined `then` template\n *\n * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using\n * a binding (just like `else`). Because `then` and `else` are bindings, the template references can\n * change at runtime as shown in this example.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n *\n * ### Storing conditional result in a variable\n *\n * A common pattern is that we need to show a set of properties from the same object. If the\n * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against\n * dereferencing a `null` value. This is especially the case when waiting on async data such as\n * when using the `async` pipe as shown in following example:\n *\n * ```\n * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!\n * ```\n *\n * There are several inefficiencies in the above example:\n *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the\n *    example above.\n *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.\n *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.\n *  - We have to place the `async` pipe in parenthesis.\n *\n * A better way to do this is to use `ngIf` and store the result of the condition in a local\n * variable as shown in the the example below:\n *\n * {@example common/ngIf/ts/module.ts region='NgIfAs'}\n *\n * Notice that:\n *  - We use only one `async` pipe and hence only one subscription gets created.\n *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.\n *  - The local `user` can then be bound repeatedly in a more efficient way.\n *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only\n *    display the data if `userStream` returns a value.\n *  - We can display an alternative template while waiting for the data.\n *\n * ### Syntax\n *\n * Simple form:\n * - `<div *ngIf=\"condition\">...</div>`\n * - `<ng-template [ngIf]=\"condition\"><div>...</div></ng-template>`\n *\n * Form with an else block:\n * ```\n * <div *ngIf=\"condition; else elseBlock\">...</div>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n *\n * Form with a `then` and `else` block:\n * ```\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>...</ng-template>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n *\n * Form with storing the value locally:\n * ```\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n *\n * @ngModule CommonModule\n */\nexport declare class NgIf {\n    private _viewContainer;\n    private _context;\n    private _thenTemplateRef;\n    private _elseTemplateRef;\n    private _thenViewRef;\n    private _elseViewRef;\n    constructor(_viewContainer: ViewContainerRef, templateRef: TemplateRef<NgIfContext>);\n    ngIf: any;\n    ngIfThen: TemplateRef<NgIfContext> | null;\n    ngIfElse: TemplateRef<NgIfContext> | null;\n    private _updateView;\n    /**\n     * Assert the correct type of the expression bound to the `ngIf` input within the template.\n     *\n     * The presence of this method is a signal to the Ivy template type check compiler that when the\n     * `NgIf` structural directive renders its template, the type of the expression bound to `ngIf`\n     * should be narrowed in some way. For `NgIf`, it is narrowed to be non-null, which allows the\n     * strictNullChecks feature of TypeScript to work with `NgIf`.\n     */\n    static ngTemplateGuard_ngIf<E>(dir: NgIf, expr: E): expr is NonNullable<E>;\n}\nexport declare class NgIfContext {\n    $implicit: any;\n    ngIf: any;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/di.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * The `di` module provides dependency injection container services.\n */\nexport * from './di/metadata';\nexport { InjectableType, InjectorType, defineInjectable, defineInjector } from './di/defs';\nexport { forwardRef, resolveForwardRef, ForwardRefFn } from './di/forward_ref';\nexport { Injectable, InjectableDecorator, InjectableProvider } from './di/injectable';\nexport { inject, InjectFlags, INJECTOR, Injector } from './di/injector';\nexport { ReflectiveInjector } from './di/reflective_injector';\nexport { StaticProvider, ValueProvider, ConstructorSansProvider, ExistingProvider, FactoryProvider, Provider, TypeProvider, ClassProvider } from './di/provider';\nexport { createInjector } from './di/r3_injector';\nexport { ResolvedReflectiveFactory, ResolvedReflectiveProvider } from './di/reflective_provider';\nexport { ReflectiveKey } from './di/reflective_key';\nexport { InjectionToken } from './di/injection_token';\n"
  },
  {
    "path": "node_modules/@angular/common/src/directives/ng_for_of.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DoCheck, IterableDiffers, NgIterable, TemplateRef, TrackByFunction, ViewContainerRef } from '@angular/core';\nexport declare class NgForOfContext<T> {\n    $implicit: T;\n    ngForOf: NgIterable<T>;\n    index: number;\n    count: number;\n    constructor($implicit: T, ngForOf: NgIterable<T>, index: number, count: number);\n    readonly first: boolean;\n    readonly last: boolean;\n    readonly even: boolean;\n    readonly odd: boolean;\n}\n/**\n * The `NgForOf` directive instantiates a template once per item from an iterable. The context\n * for each instantiated template inherits from the outer context with the given loop variable\n * set to the current item from the iterable.\n *\n * @usageNotes\n *\n * ### Local Variables\n *\n * `NgForOf` provides several exported values that can be aliased to local variables:\n *\n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\n * more complex then a property access, for example when using the async pipe (`userStreams |\n * async`).\n * - `index: number`: The index of the current item in the iterable.\n * - `first: boolean`: True when the item is the first item in the iterable.\n * - `last: boolean`: True when the item is the last item in the iterable.\n * - `even: boolean`: True when the item has an even index in the iterable.\n * - `odd: boolean`: True when the item has an odd index in the iterable.\n *\n * ```\n * <li *ngFor=\"let user of userObservable | async as users; index as i; first as isFirst\">\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n * </li>\n * ```\n *\n * ### Change Propagation\n *\n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n *\n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n * * Otherwise, the DOM element for that item will remain the same.\n *\n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n *\n * It is possible for the identities of elements in the iterator to change while the data does not.\n * This can happen, for example, if the iterator produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with\n * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted). This is an expensive operation and should\n * be avoided if possible.\n *\n * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.\n * `trackBy` takes a function which has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n *\n * ### Syntax\n *\n * - `<li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>`\n *\n * With `<ng-template>` element:\n *\n * ```\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </ng-template>\n * ```\n *\n * ### Example\n *\n * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed\n * example.\n *\n * @ngModule CommonModule\n */\nexport declare class NgForOf<T> implements DoCheck {\n    private _viewContainer;\n    private _template;\n    private _differs;\n    ngForOf: NgIterable<T>;\n    ngForTrackBy: TrackByFunction<T>;\n    private _ngForOf;\n    private _ngForOfDirty;\n    private _differ;\n    private _trackByFn;\n    constructor(_viewContainer: ViewContainerRef, _template: TemplateRef<NgForOfContext<T>>, _differs: IterableDiffers);\n    ngForTemplate: TemplateRef<NgForOfContext<T>>;\n    ngDoCheck(): void;\n    private _applyChanges;\n    private _perViewChange;\n    /**\n     * Assert the correct type of the context for the template that `NgForOf` will render.\n     *\n     * The presence of this method is a signal to the Ivy template type check compiler that the\n     * `NgForOf` structural directive renders its template with a specific context type.\n     */\n    static ngTemplateContextGuard<T>(dir: NgForOf<T>, ctx: any): ctx is NgForOfContext<T>;\n}\nexport declare function getTypeNameForDebugging(type: any): string;\n"
  },
  {
    "path": "node_modules/@angular/common/src/pipes/deprecated/date_pipe.d.ts",
    "content": "/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n  */\nimport { PipeTransform } from '@angular/core';\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a date according to locale rules.\n *\n * Where:\n * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string\n * (https://www.w3.org/TR/NOTE-datetime).\n * - `format` indicates which date/time components to include. The format can be predefined as\n *   shown below or custom as shown in the table.\n *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)\n *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)\n *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)\n *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)\n *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)\n *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)\n *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)\n *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)\n *\n *\n *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |\n *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|\n *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |\n *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |\n *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |\n *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |\n *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |\n *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |\n *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|\n *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |\n *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |\n *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |\n *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |\n *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |\n *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |\n *\n * In javascript, only the components specified will be respected (not the ordering,\n * punctuations, ...) and details of the formatting will be dependent on the locale.\n *\n * Timezone of the formatted text will be the local system timezone of the end-user's machine.\n *\n * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not\n * applied and the formatted text will have the same day, month and year of the expression.\n *\n * WARNINGS:\n * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.\n *   Instead users should treat the date as an immutable object and change the reference when the\n *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run\n *   which would be an expensive operation).\n * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera\n *   browsers.\n *\n * @usageNotes\n *\n * ### Examples\n *\n * Assuming `dateObj` is (year: 2010, month: 9, day: 3, hour: 12 PM, minute: 05, second: 08)\n * in the _local_ time and locale is 'en-US':\n *\n * {@example common/pipes/ts/date_pipe.ts region='DeprecatedDatePipe'}\n *\n *\n */\nexport declare class DeprecatedDatePipe implements PipeTransform {\n    private _locale;\n    constructor(_locale: string);\n    transform(value: any, pattern?: string): string | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/http/src/backend.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { HttpRequest } from './request';\nimport { HttpEvent } from './response';\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n *\n */\nexport declare abstract class HttpHandler {\n    abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n *\n */\nexport declare abstract class HttpBackend implements HttpHandler {\n    abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/ng_dev_mode.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\ndeclare global {\n    const ngDevMode: null | NgDevModePerfCounters;\n    interface NgDevModePerfCounters {\n        firstTemplatePass: number;\n        tNode: number;\n        tView: number;\n        rendererCreateTextNode: number;\n        rendererSetText: number;\n        rendererCreateElement: number;\n        rendererAddEventListener: number;\n        rendererSetAttribute: number;\n        rendererRemoveAttribute: number;\n        rendererSetProperty: number;\n        rendererSetClassName: number;\n        rendererAddClass: number;\n        rendererRemoveClass: number;\n        rendererSetStyle: number;\n        rendererRemoveStyle: number;\n        rendererDestroy: number;\n        rendererDestroyNode: number;\n        rendererMoveNode: number;\n        rendererRemoveNode: number;\n        rendererCreateComment: number;\n    }\n}\nexport declare function ngDevModeResetPerfCounters(): NgDevModePerfCounters;\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection/change_detection.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { IterableDiffers } from './differs/iterable_differs';\nimport { KeyValueDiffers } from './differs/keyvalue_differs';\nexport { SimpleChanges } from '../metadata/lifecycle_hooks';\nexport { SimpleChange, WrappedValue, devModeEqual } from './change_detection_util';\nexport { ChangeDetectorRef } from './change_detector_ref';\nexport { ChangeDetectionStrategy, ChangeDetectorStatus, isDefaultChangeDetectionStrategy } from './constants';\nexport { DefaultIterableDifferFactory } from './differs/default_iterable_differ';\nexport { DefaultIterableDiffer } from './differs/default_iterable_differ';\nexport { DefaultKeyValueDifferFactory } from './differs/default_keyvalue_differ';\nexport { CollectionChangeRecord, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, IterableDiffers, NgIterable, TrackByFunction } from './differs/iterable_differs';\nexport { KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory, KeyValueDiffers } from './differs/keyvalue_differs';\nexport { PipeTransform } from './pipe_transform';\nexport declare const defaultIterableDiffers: IterableDiffers;\nexport declare const defaultKeyValueDiffers: KeyValueDiffers;\n"
  },
  {
    "path": "node_modules/@angular/common/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/common';\nexport { registerLocaleData as ɵregisterLocaleData } from './src/i18n/locale_data';\n"
  },
  {
    "path": "node_modules/@angular/common/http/src/request.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HttpHeaders } from './headers';\nimport { HttpParams } from './params';\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n *\n */\nexport declare class HttpRequest<T> {\n    readonly url: string;\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     */\n    readonly body: T | null;\n    /**\n     * Outgoing headers for this request.\n     */\n    readonly headers: HttpHeaders;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     */\n    readonly reportProgress: boolean;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     */\n    readonly withCredentials: boolean;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     */\n    readonly responseType: 'arraybuffer' | 'blob' | 'json' | 'text';\n    /**\n     * The outgoing HTTP request method.\n     */\n    readonly method: string;\n    /**\n     * Outgoing URL parameters.\n     */\n    readonly params: HttpParams;\n    /**\n     * The outgoing URL with all URL parameters set.\n     */\n    readonly urlWithParams: string;\n    constructor(method: 'DELETE' | 'GET' | 'HEAD' | 'JSONP' | 'OPTIONS', url: string, init?: {\n        headers?: HttpHeaders;\n        reportProgress?: boolean;\n        params?: HttpParams;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n    });\n    constructor(method: 'POST' | 'PUT' | 'PATCH', url: string, body: T | null, init?: {\n        headers?: HttpHeaders;\n        reportProgress?: boolean;\n        params?: HttpParams;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n    });\n    constructor(method: string, url: string, body: T | null, init?: {\n        headers?: HttpHeaders;\n        reportProgress?: boolean;\n        params?: HttpParams;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n    });\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody(): ArrayBuffer | Blob | FormData | string | null;\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader(): string | null;\n    clone(): HttpRequest<T>;\n    clone(update: {\n        headers?: HttpHeaders;\n        reportProgress?: boolean;\n        params?: HttpParams;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n        body?: T | null;\n        method?: string;\n        url?: string;\n        setHeaders?: {\n            [name: string]: string | string[];\n        };\n        setParams?: {\n            [param: string]: string;\n        };\n    }): HttpRequest<T>;\n    clone<V>(update: {\n        headers?: HttpHeaders;\n        reportProgress?: boolean;\n        params?: HttpParams;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n        body?: V | null;\n        method?: string;\n        url?: string;\n        setHeaders?: {\n            [name: string]: string | string[];\n        };\n        setParams?: {\n            [param: string]: string;\n        };\n    }): HttpRequest<V>;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/test_bed_common.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, Directive, InjectionToken, NgModule, Pipe, PlatformRef, SchemaMetadata, Type } from '@angular/core';\nimport { ComponentFixture } from './component_fixture';\nimport { MetadataOverride } from './metadata_override';\nimport { TestBed } from './test_bed';\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @experimental\n */\nexport declare class TestComponentRenderer {\n    insertRootElement(rootElementId: string): void;\n}\n/**\n * @experimental\n */\nexport declare const ComponentFixtureAutoDetect: InjectionToken<boolean[]>;\n/**\n * @experimental\n */\nexport declare const ComponentFixtureNoNgZone: InjectionToken<boolean[]>;\n/**\n * @experimental\n */\nexport declare type TestModuleMetadata = {\n    providers?: any[];\n    declarations?: any[];\n    imports?: any[];\n    schemas?: Array<SchemaMetadata | any[]>;\n    aotSummaries?: () => any[];\n};\n/**\n * Static methods implemented by the `TestBedViewEngine` and `TestBedRender3`\n */\nexport interface TestBedStatic {\n    new (...args: any[]): TestBed;\n    initTestEnvironment(ngModule: Type<any> | Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): TestBed;\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @experimental\n     */\n    resetTestEnvironment(): void;\n    resetTestingModule(): TestBedStatic;\n    /**\n     * Allows overriding default compiler providers and settings\n     * which are defined in test_injector.js\n     */\n    configureCompiler(config: {\n        providers?: any[];\n        useJit?: boolean;\n    }): TestBedStatic;\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     */\n    configureTestingModule(moduleDef: TestModuleMetadata): TestBedStatic;\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     */\n    compileComponents(): Promise<any>;\n    overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): TestBedStatic;\n    overrideComponent(component: Type<any>, override: MetadataOverride<Component>): TestBedStatic;\n    overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): TestBedStatic;\n    overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): TestBedStatic;\n    overrideTemplate(component: Type<any>, template: string): TestBedStatic;\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    overrideTemplateUsingTestingModule(component: Type<any>, template: string): TestBedStatic;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    overrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): TestBedStatic;\n    overrideProvider(token: any, provider: {\n        useValue: any;\n    }): TestBedStatic;\n    overrideProvider(token: any, provider: {\n        useFactory?: Function;\n        useValue?: any;\n        deps?: any[];\n    }): TestBedStatic;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     *\n     * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n     */\n    deprecatedOverrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): void;\n    deprecatedOverrideProvider(token: any, provider: {\n        useValue: any;\n    }): void;\n    deprecatedOverrideProvider(token: any, provider: {\n        useFactory?: Function;\n        useValue?: any;\n        deps?: any[];\n    }): TestBedStatic;\n    get(token: any, notFoundValue?: any): any;\n    createComponent<T>(component: Type<T>): ComponentFixture<T>;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/system_js_ng_module_factory_loader.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Compiler } from './compiler';\nimport { NgModuleFactory } from './ng_module_factory';\nimport { NgModuleFactoryLoader } from './ng_module_factory_loader';\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * @experimental\n */\nexport declare abstract class SystemJsNgModuleLoaderConfig {\n    /**\n     * Prefix to add when computing the name of the factory module for a given module name.\n     */\n    factoryPathPrefix: string;\n    /**\n     * Suffix to add when computing the name of the factory module for a given module name.\n     */\n    factoryPathSuffix: string;\n}\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n * @experimental\n */\nexport declare class SystemJsNgModuleLoader implements NgModuleFactoryLoader {\n    private _compiler;\n    private _config;\n    constructor(_compiler: Compiler, config?: SystemJsNgModuleLoaderConfig);\n    load(path: string): Promise<NgModuleFactory<any>>;\n    private loadAndCompile;\n    private loadFactory;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/ng_module_factory.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '../di/injector';\nimport { Type } from '../type';\nimport { ComponentFactoryResolver } from './component_factory_resolver';\n/**\n * Represents an instance of an NgModule created via a {@link NgModuleFactory}.\n *\n * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n * NgModule Instance.\n *\n *\n */\nexport declare abstract class NgModuleRef<T> {\n    /**\n     * The injector that contains all of the providers of the NgModule.\n     */\n    abstract readonly injector: Injector;\n    /**\n     * The ComponentFactoryResolver to get hold of the ComponentFactories\n     * declared in the `entryComponents` property of the module.\n     */\n    abstract readonly componentFactoryResolver: ComponentFactoryResolver;\n    /**\n     * The NgModule instance.\n     */\n    abstract readonly instance: T;\n    /**\n     * Destroys the module instance and all of the data structures associated with it.\n     */\n    abstract destroy(): void;\n    /**\n     * Allows to register a callback that will be called when the module is destroyed.\n     */\n    abstract onDestroy(callback: () => void): void;\n}\nexport interface InternalNgModuleRef<T> extends NgModuleRef<T> {\n    _bootstrapComponents: Type<any>[];\n}\n/**\n * @experimental\n */\nexport declare abstract class NgModuleFactory<T> {\n    abstract readonly moduleType: Type<T>;\n    abstract create(parentInjector: Injector | null): NgModuleRef<T>;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/directives/ng_switch.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DoCheck, TemplateRef, ViewContainerRef } from '@angular/core';\nexport declare class SwitchView {\n    private _viewContainerRef;\n    private _templateRef;\n    private _created;\n    constructor(_viewContainerRef: ViewContainerRef, _templateRef: TemplateRef<Object>);\n    create(): void;\n    destroy(): void;\n    enforceState(created: boolean): void;\n}\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n *     <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n * @description\n *\n * Adds / removes DOM sub-trees when the nest match expressions matches the switch expression.\n *\n * `NgSwitch` stamps out nested views when their match expression value matches the value of the\n * switch expression.\n *\n * In other words:\n * - you define a container element (where you place the directive with a switch expression on the\n * `[ngSwitch]=\"...\"` attribute)\n * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view\n * root elements.\n *\n * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will\n * be preserved at the location.\n *\n * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the\n * expression is evaluated.\n * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is\n * stamped out.\n *\n *\n */\nexport declare class NgSwitch {\n    private _defaultViews;\n    private _defaultUsed;\n    private _caseCount;\n    private _lastCaseCheckIndex;\n    private _lastCasesMatched;\n    private _ngSwitch;\n    ngSwitch: any;\n    private _updateDefaultCases;\n}\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * </container-element>\n *```\n * @description\n *\n * Creates a view that will be added/removed from the parent {@link NgSwitch} when the\n * given expression evaluate to respectively the same/different value as the switch\n * expression.\n *\n * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch\n * expression.\n *\n * If multiple match expressions match the switch expression value, all of them are displayed.\n *\n * See {@link NgSwitch} for more details and example.\n *\n *\n */\nexport declare class NgSwitchCase implements DoCheck {\n    private ngSwitch;\n    private _view;\n    ngSwitchCase: any;\n    constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>, ngSwitch: NgSwitch);\n    ngDoCheck(): void;\n}\n/**\n * @ngModule CommonModule\n * @usageNotes\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-other-element *ngSwitchDefault>...</some-other-element>\n * </container-element>\n * ```\n *\n * @description\n *\n * Creates a view that is added to the parent {@link NgSwitch} when no case expressions\n * match the switch expression.\n *\n * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch\n * expression.\n *\n * See {@link NgSwitch} for more details and example.\n *\n *\n */\nexport declare class NgSwitchDefault {\n    constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>, ngSwitch: NgSwitch);\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/container.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LQueries } from './query';\nimport { RComment, RElement } from './renderer';\nimport { StylingContext } from './styling';\nimport { HOST, LViewData, NEXT, PARENT, QUERIES } from './view';\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n */\nexport declare const ACTIVE_INDEX = 0;\nexport declare const VIEWS = 1;\nexport declare const NATIVE = 6;\nexport declare const RENDER_PARENT = 7;\n/**\n * The state associated with a container.\n *\n * This is an array so that its structure is closer to LViewData. This helps\n * when traversing the view tree (which is a mix of containers and component\n * views), so we can jump to viewOrContainer[NEXT] in the same way regardless\n * of type.\n */\nexport interface LContainer extends Array<any> {\n    /**\n     * The next active index in the views array to read or write to. This helps us\n     * keep track of where we are in the views array.\n     * In the case the LContainer is created for a ViewContainerRef,\n     * it is set to null to identify this scenario, as indices are \"absolute\" in that case,\n     * i.e. provided directly by the user of the ViewContainerRef API.\n     */\n    [ACTIVE_INDEX]: number;\n    /**\n     * A list of the container's currently active child views. Views will be inserted\n     * here as they are added and spliced from here when they are removed. We need\n     * to keep a record of current views so we know which views are already in the DOM\n     * (and don't need to be re-added) and so we can remove views from the DOM when they\n     * are no longer required.\n     */\n    [VIEWS]: LViewData[];\n    /**\n     * Access to the parent view is necessary so we can propagate back\n     * up from inside a container to parent[NEXT].\n     */\n    [PARENT]: LViewData | null;\n    /**\n     * This allows us to jump from a container to a sibling container or component\n     * view with the same parent, so we can remove listeners efficiently.\n     */\n    [NEXT]: LViewData | LContainer | null;\n    /**\n     * Queries active for this container - all the views inserted to / removed from\n     * this container are reported to queries referenced here.\n     */\n    [QUERIES]: LQueries | null;\n    /**\n     * The host element of this LContainer.\n     *\n     * The host could be an LViewData if this container is on a component node.\n     * In that case, the component LViewData is its HOST.\n     *\n     * It could also be a styling context if this is a node with a style/class\n     * binding.\n     */\n    [HOST]: RElement | RComment | StylingContext | LViewData;\n    /** The comment element that serves as an anchor for this LContainer. */\n    [NATIVE]: RComment;\n    /**\n     * Parent Element which will contain the location where all of the views will be\n     * inserted into to.\n     *\n     * If `renderParent` is `null` it is headless. This means that it is contained\n     * in another view which in turn is contained in another container and\n     * therefore it does not yet have its own parent.\n     *\n     * If `renderParent` is not `null` then it may be:\n     * - same as `tContainerNode.parent` in which case it is just a normal container.\n     * - different from `tContainerNode.parent` in which case it has been re-projected.\n     *   In other words `tContainerNode.parent` is logical parent where as\n     *   `tContainerNode.projectedParent` is render parent.\n     *\n     * When views are inserted into `LContainer` then `renderParent` is:\n     * - `null`, we are in a view, keep going up a hierarchy until actual\n     *   `renderParent` is found.\n     * - not `null`, then use the `projectedParent.native` as the `RElement` to insert\n     * views into.\n     */\n    [RENDER_PARENT]: RElement | null;\n}\nexport declare const unusedValueExportToPlacateAjd = 1;\n"
  },
  {
    "path": "node_modules/@angular/common/http/testing/src/api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HttpRequest } from '@angular/common/http';\nimport { TestRequest } from './request';\n/**\n * Defines a matcher for requests based on URL, method, or both.\n *\n *\n */\nexport interface RequestMatch {\n    method?: string;\n    url?: string;\n}\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n *\n *\n */\nexport declare abstract class HttpTestingController {\n    /**\n     * Search for requests that match the given parameter, without any expectations.\n     */\n    abstract match(match: string | RequestMatch | ((req: HttpRequest<any>) => boolean)): TestRequest[];\n    /**\n     * Expect that a single request has been made which matches the given URL, and return its\n     * mock.\n     *\n     * If no such request has been made, or more than one such request has been made, fail with an\n     * error message including the given request description, if any.\n     */\n    abstract expectOne(url: string, description?: string): TestRequest;\n    /**\n     * Expect that a single request has been made which matches the given parameters, and return\n     * its mock.\n     *\n     * If no such request has been made, or more than one such request has been made, fail with an\n     * error message including the given request description, if any.\n     */\n    abstract expectOne(params: RequestMatch, description?: string): TestRequest;\n    /**\n     * Expect that a single request has been made which matches the given predicate function, and\n     * return its mock.\n     *\n     * If no such request has been made, or more than one such request has been made, fail with an\n     * error message including the given request description, if any.\n     */\n    abstract expectOne(matchFn: ((req: HttpRequest<any>) => boolean), description?: string): TestRequest;\n    /**\n     * Expect that a single request has been made which matches the given condition, and return\n     * its mock.\n     *\n     * If no such request has been made, or more than one such request has been made, fail with an\n     * error message including the given request description, if any.\n     */\n    abstract expectOne(match: string | RequestMatch | ((req: HttpRequest<any>) => boolean), description?: string): TestRequest;\n    /**\n     * Expect that no requests have been made which match the given URL.\n     *\n     * If a matching request has been made, fail with an error message including the given request\n     * description, if any.\n     */\n    abstract expectNone(url: string, description?: string): void;\n    /**\n     * Expect that no requests have been made which match the given parameters.\n     *\n     * If a matching request has been made, fail with an error message including the given request\n     * description, if any.\n     */\n    abstract expectNone(params: RequestMatch, description?: string): void;\n    /**\n     * Expect that no requests have been made which match the given predicate function.\n     *\n     * If a matching request has been made, fail with an error message including the given request\n     * description, if any.\n     */\n    abstract expectNone(matchFn: ((req: HttpRequest<any>) => boolean), description?: string): void;\n    /**\n     * Expect that no requests have been made which match the given condition.\n     *\n     * If a matching request has been made, fail with an error message including the given request\n     * description, if any.\n     */\n    abstract expectNone(match: string | RequestMatch | ((req: HttpRequest<any>) => boolean), description?: string): void;\n    /**\n     * Verify that no unmatched requests are outstanding.\n     *\n     * If any requests are outstanding, fail with an error message indicating which requests were not\n     * handled.\n     *\n     * If `ignoreCancelled` is not set (the default), `verify()` will also fail if cancelled requests\n     * were not explicitly matched.\n     */\n    abstract verify(opts?: {\n        ignoreCancelled?: boolean;\n    }): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/http/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { HttpBackend, HttpHandler } from './src/backend';\nexport { HttpClient } from './src/client';\nexport { HttpHeaders } from './src/headers';\nexport { HTTP_INTERCEPTORS, HttpInterceptor } from './src/interceptor';\nexport { JsonpClientBackend, JsonpInterceptor } from './src/jsonp';\nexport { HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpInterceptingHandler as ɵHttpInterceptingHandler } from './src/module';\nexport { HttpParameterCodec, HttpParams, HttpUrlEncodingCodec } from './src/params';\nexport { HttpRequest } from './src/request';\nexport { HttpDownloadProgressEvent, HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaderResponse, HttpProgressEvent, HttpResponse, HttpResponseBase, HttpSentEvent, HttpUserEvent } from './src/response';\nexport { HttpXhrBackend, XhrFactory } from './src/xhr';\nexport { HttpXsrfTokenExtractor } from './src/xsrf';\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection/differs/keyvalue_differs.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StaticProvider } from '../../di';\n/**\n * A differ that tracks changes made to an object over time.\n *\n *\n */\nexport interface KeyValueDiffer<K, V> {\n    /**\n     * Compute a difference between the previous state and the new `object` state.\n     *\n     * @param object containing the new value.\n     * @returns an object describing the difference. The return value is only valid until the next\n     * `diff()` invocation.\n     */\n    diff(object: Map<K, V>): KeyValueChanges<K, V> | null;\n    /**\n     * Compute a difference between the previous state and the new `object` state.\n     *\n     * @param object containing the new value.\n     * @returns an object describing the difference. The return value is only valid until the next\n     * `diff()` invocation.\n     */\n    diff(object: {\n        [key: string]: V;\n    }): KeyValueChanges<string, V> | null;\n}\n/**\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n * `KeyValueDiffer#diff()` was invoked.\n *\n *\n */\nexport interface KeyValueChanges<K, V> {\n    /**\n     * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n     * to each item.\n     */\n    forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    /**\n     * Iterate over changes in the order of original Map showing where the original items\n     * have moved.\n     */\n    forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    /**\n     * Iterate over all keys for which values have changed.\n     */\n    forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    /**\n     * Iterate over all added items.\n     */\n    forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    /**\n     * Iterate over all removed items.\n     */\n    forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n}\n/**\n * Record representing the item change information.\n *\n *\n */\nexport interface KeyValueChangeRecord<K, V> {\n    /**\n     * Current key in the Map.\n     */\n    readonly key: K;\n    /**\n     * Current value for the key or `null` if removed.\n     */\n    readonly currentValue: V | null;\n    /**\n     * Previous value for the key or `null` if added.\n     */\n    readonly previousValue: V | null;\n}\n/**\n * Provides a factory for {@link KeyValueDiffer}.\n *\n *\n */\nexport interface KeyValueDifferFactory {\n    /**\n     * Test to see if the differ knows how to diff this kind of object.\n     */\n    supports(objects: any): boolean;\n    /**\n     * Create a `KeyValueDiffer`.\n     */\n    create<K, V>(): KeyValueDiffer<K, V>;\n}\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n */\nexport declare class KeyValueDiffers {\n    /**\n     * @deprecated v4.0.0 - Should be private.\n     */\n    factories: KeyValueDifferFactory[];\n    constructor(factories: KeyValueDifferFactory[]);\n    static create<S>(factories: KeyValueDifferFactory[], parent?: KeyValueDiffers): KeyValueDiffers;\n    /**\n     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n     * {@link KeyValueDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link KeyValueDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    static extend<S>(factories: KeyValueDifferFactory[]): StaticProvider;\n    find(kv: any): KeyValueDifferFactory;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/http/testing/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { HttpTestingController, RequestMatch } from './src/api';\nexport { HttpClientTestingModule } from './src/module';\nexport { TestRequest } from './src/request';\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/test_bed.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, Directive, Injector, NgModule, Pipe, PlatformRef, Type } from '@angular/core';\nimport { ComponentFixture } from './component_fixture';\nimport { MetadataOverride } from './metadata_override';\nimport { TestBedStatic, TestModuleMetadata } from './test_bed_common';\nexport interface TestBed {\n    platform: PlatformRef;\n    ngModule: Type<any> | Type<any>[];\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @experimental\n     */\n    initTestEnvironment(ngModule: Type<any> | Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): void;\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @experimental\n     */\n    resetTestEnvironment(): void;\n    resetTestingModule(): void;\n    configureCompiler(config: {\n        providers?: any[];\n        useJit?: boolean;\n    }): void;\n    configureTestingModule(moduleDef: TestModuleMetadata): void;\n    compileComponents(): Promise<any>;\n    get(token: any, notFoundValue?: any): any;\n    execute(tokens: any[], fn: Function, context?: any): any;\n    overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void;\n    overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void;\n    overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void;\n    overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     */\n    overrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): void;\n    overrideProvider(token: any, provider: {\n        useValue: any;\n    }): void;\n    overrideProvider(token: any, provider: {\n        useFactory?: Function;\n        useValue?: any;\n        deps?: any[];\n    }): void;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     *\n     * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n     */\n    deprecatedOverrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): void;\n    deprecatedOverrideProvider(token: any, provider: {\n        useValue: any;\n    }): void;\n    deprecatedOverrideProvider(token: any, provider: {\n        useFactory?: Function;\n        useValue?: any;\n        deps?: any[];\n    }): void;\n    overrideTemplateUsingTestingModule(component: Type<any>, template: string): void;\n    createComponent<T>(component: Type<T>): ComponentFixture<T>;\n}\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n */\nexport declare class TestBedViewEngine implements Injector, TestBed {\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @experimental\n     */\n    static initTestEnvironment(ngModule: Type<any> | Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): TestBedViewEngine;\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @experimental\n     */\n    static resetTestEnvironment(): void;\n    static resetTestingModule(): TestBedStatic;\n    /**\n     * Allows overriding default compiler providers and settings\n     * which are defined in test_injector.js\n     */\n    static configureCompiler(config: {\n        providers?: any[];\n        useJit?: boolean;\n    }): TestBedStatic;\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     */\n    static configureTestingModule(moduleDef: TestModuleMetadata): TestBedStatic;\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     */\n    static compileComponents(): Promise<any>;\n    static overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): TestBedStatic;\n    static overrideComponent(component: Type<any>, override: MetadataOverride<Component>): TestBedStatic;\n    static overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): TestBedStatic;\n    static overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): TestBedStatic;\n    static overrideTemplate(component: Type<any>, template: string): TestBedStatic;\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    static overrideTemplateUsingTestingModule(component: Type<any>, template: string): TestBedStatic;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    static overrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): TestBedStatic;\n    static overrideProvider(token: any, provider: {\n        useValue: any;\n    }): TestBedStatic;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     *\n     * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n     */\n    static deprecatedOverrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): void;\n    static deprecatedOverrideProvider(token: any, provider: {\n        useValue: any;\n    }): void;\n    static get(token: any, notFoundValue?: any): any;\n    static createComponent<T>(component: Type<T>): ComponentFixture<T>;\n    private _instantiated;\n    private _compiler;\n    private _moduleRef;\n    private _moduleFactory;\n    private _compilerOptions;\n    private _moduleOverrides;\n    private _componentOverrides;\n    private _directiveOverrides;\n    private _pipeOverrides;\n    private _providers;\n    private _declarations;\n    private _imports;\n    private _schemas;\n    private _activeFixtures;\n    private _testEnvAotSummaries;\n    private _aotSummaries;\n    private _templateOverrides;\n    private _isRoot;\n    private _rootProviderOverrides;\n    platform: PlatformRef;\n    ngModule: Type<any> | Type<any>[];\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @experimental\n     */\n    initTestEnvironment(ngModule: Type<any> | Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): void;\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @experimental\n     */\n    resetTestEnvironment(): void;\n    resetTestingModule(): void;\n    configureCompiler(config: {\n        providers?: any[];\n        useJit?: boolean;\n    }): void;\n    configureTestingModule(moduleDef: TestModuleMetadata): void;\n    compileComponents(): Promise<any>;\n    private _initIfNeeded;\n    private _createCompilerAndModule;\n    private _assertNotInstantiated;\n    get(token: any, notFoundValue?: any): any;\n    execute(tokens: any[], fn: Function, context?: any): any;\n    overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void;\n    overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void;\n    overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void;\n    overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     */\n    overrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): void;\n    overrideProvider(token: any, provider: {\n        useValue: any;\n    }): void;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     *\n     * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n     */\n    deprecatedOverrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): void;\n    deprecatedOverrideProvider(token: any, provider: {\n        useValue: any;\n    }): void;\n    private overrideProviderImpl;\n    overrideTemplateUsingTestingModule(component: Type<any>, template: string): void;\n    createComponent<T>(component: Type<T>): ComponentFixture<T>;\n}\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n */\nexport declare const TestBed: TestBedStatic;\n/**\n * Returns a singleton of the applicable `TestBed`.\n *\n * It will be either an instance of `TestBedViewEngine` or `TestBedRender3`.\n *\n * @experimental\n */\nexport declare const getTestBed: () => TestBed;\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n *\n */\nexport declare function inject(tokens: any[], fn: Function): () => any;\n/**\n * @experimental\n */\nexport declare class InjectSetupWrapper {\n    private _moduleDef;\n    constructor(_moduleDef: () => TestModuleMetadata);\n    private _addModule;\n    inject(tokens: any[], fn: Function): () => any;\n}\n/**\n * @experimental\n */\nexport declare function withModule(moduleDef: TestModuleMetadata): InjectSetupWrapper;\nexport declare function withModule(moduleDef: TestModuleMetadata, fn: Function): () => any;\n"
  },
  {
    "path": "node_modules/@angular/common/http/src/jsonp.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { HttpBackend, HttpHandler } from './backend';\nimport { HttpRequest } from './request';\nimport { HttpEvent } from './response';\nexport declare const JSONP_ERR_NO_CALLBACK = \"JSONP injected script did not invoke callback.\";\nexport declare const JSONP_ERR_WRONG_METHOD = \"JSONP requests must use JSONP request method.\";\nexport declare const JSONP_ERR_WRONG_RESPONSE_TYPE = \"JSONP requests must use Json response type.\";\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nexport declare abstract class JsonpCallbackContext {\n    [key: string]: (data: any) => void;\n}\n/**\n * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n *\n *\n */\nexport declare class JsonpClientBackend implements HttpBackend {\n    private callbackMap;\n    private document;\n    constructor(callbackMap: JsonpCallbackContext, document: any);\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    private nextCallback;\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     */\n    handle(req: HttpRequest<never>): Observable<HttpEvent<any>>;\n}\n/**\n * An `HttpInterceptor` which identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n *\n */\nexport declare class JsonpInterceptor {\n    private jsonp;\n    constructor(jsonp: JsonpClientBackend);\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/projection.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Expresses a single CSS Selector.\n *\n * Beginning of array\n * - First index: element name\n * - Subsequent odd indices: attr keys\n * - Subsequent even indices: attr values\n *\n * After SelectorFlags.CLASS flag\n * - Class name values\n *\n * SelectorFlags.NOT flag\n * - Changes the mode to NOT\n * - Can be combined with other flags to set the element / attr / class mode\n *\n * e.g. SelectorFlags.NOT | SelectorFlags.ELEMENT\n *\n * Example:\n * Original: `div.foo.bar[attr1=val1][attr2]`\n * Parsed: ['div', 'attr1', 'val1', 'attr2', '', SelectorFlags.CLASS, 'foo', 'bar']\n *\n * Original: 'div[attr1]:not(.foo[attr2])\n * Parsed: [\n *  'div', 'attr1', '',\n *  SelectorFlags.NOT | SelectorFlags.ATTRIBUTE 'attr2', '', SelectorFlags.CLASS, 'foo'\n * ]\n *\n * See more examples in node_selector_matcher_spec.ts\n */\nexport declare type CssSelector = (string | SelectorFlags)[];\n/**\n * A list of CssSelectors.\n *\n * A directive or component can have multiple selectors. This type is used for\n * directive defs so any of the selectors in the list will match that directive.\n *\n * Original: 'form, [ngForm]'\n * Parsed: [['form'], ['', 'ngForm', '']]\n */\nexport declare type CssSelectorList = CssSelector[];\n/** Flags used to build up CssSelectors */\nexport declare const enum SelectorFlags {\n    /** Indicates this is the beginning of a new negative selector */\n    NOT = 1,\n    /** Mode for matching attributes */\n    ATTRIBUTE = 2,\n    /** Mode for matching tag names */\n    ELEMENT = 4,\n    /** Mode for matching class names */\n    CLASS = 8\n}\nexport declare const NG_PROJECT_AS_ATTR_NAME = \"ngProjectAs\";\nexport declare const unusedValueExportToPlacateAjd = 1;\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/compiler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\nimport { StaticProvider } from '../di/provider';\nimport { MissingTranslationStrategy } from '../i18n/tokens';\nimport { ViewEncapsulation } from '../metadata';\nimport { Type } from '../type';\nimport { ComponentFactory } from './component_factory';\nimport { NgModuleFactory } from './ng_module_factory';\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * @experimental\n */\nexport declare class ModuleWithComponentFactories<T> {\n    ngModuleFactory: NgModuleFactory<T>;\n    componentFactories: ComponentFactory<any>[];\n    constructor(ngModuleFactory: NgModuleFactory<T>, componentFactories: ComponentFactory<any>[]);\n}\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n */\nexport declare class Compiler {\n    /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     */\n    compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T>;\n    /**\n     * Compiles the given NgModule and all of its components\n     */\n    compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>>;\n    /**\n     * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n     */\n    compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T>;\n    /**\n     * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     */\n    compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>): Promise<ModuleWithComponentFactories<T>>;\n    /**\n     * Clears all caches.\n     */\n    clearCache(): void;\n    /**\n     * Clears the cache for the given component/ngModule.\n     */\n    clearCacheFor(type: Type<any>): void;\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     */\n    getModuleId(moduleType: Type<any>): string | undefined;\n}\n/**\n * Options for creating a compiler\n *\n * @experimental\n */\nexport declare type CompilerOptions = {\n    useJit?: boolean;\n    defaultEncapsulation?: ViewEncapsulation;\n    providers?: StaticProvider[];\n    missingTranslation?: MissingTranslationStrategy;\n    preserveWhitespaces?: boolean;\n};\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @experimental\n */\nexport declare const COMPILER_OPTIONS: InjectionToken<CompilerOptions[]>;\n/**\n * A factory for creating a Compiler\n *\n * @experimental\n */\nexport declare abstract class CompilerFactory {\n    abstract createCompiler(options?: CompilerOptions[]): Compiler;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/template_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef } from './element_ref';\nimport { EmbeddedViewRef } from './view_ref';\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n */\nexport declare abstract class TemplateRef<C> {\n    /**\n     * The anchor element in the parent view for this embedded view.\n     *\n     * The data-binding and injection contexts of embedded views created from this `TemplateRef`\n     * inherit from the contexts of this location.\n     *\n     * Typically new embedded views are attached to the view container of this location, but in\n     * advanced use-cases, the view can be attached to a different container while keeping the\n     * data-binding and injection context from the original location.\n     *\n     */\n    abstract readonly elementRef: ElementRef;\n    /**\n     * Creates a view object and attaches it to the view container of the parent view.\n     * @param context The context for the new view, inherited from the anchor element.\n     * @returns The new view object.\n     */\n    abstract createEmbeddedView(context: C): EmbeddedViewRef<C>;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/testing/src/testing.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all APIs of the compiler package.\n *\n * <div class=\"callout is-critical\">\n *   <header>Unstable APIs</header>\n *   <p>\n *     All compiler apis are currently considered experimental and private!\n *   </p>\n *   <p>\n *     We expect the APIs in this package to keep on changing. Do not rely on them.\n *   </p>\n * </div>\n */\nexport * from './resource_loader_mock';\nexport * from './schema_registry_mock';\nexport * from './directive_resolver_mock';\nexport * from './ng_module_resolver_mock';\nexport * from './pipe_resolver_mock';\n"
  },
  {
    "path": "node_modules/@angular/common/testing/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/compiler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all APIs of the compiler package.\n *\n * <div class=\"callout is-critical\">\n *   <header>Unstable APIs</header>\n *   <p>\n *     All compiler apis are currently considered experimental and private!\n *   </p>\n *   <p>\n *     We expect the APIs in this package to keep on changing. Do not rely on them.\n *   </p>\n * </div>\n */\nimport * as core from './core';\nexport { core };\nexport * from './version';\nexport * from './template_parser/template_ast';\nexport { CompilerConfig, preserveWhitespacesDefault } from './config';\nexport * from './compile_metadata';\nexport * from './aot/compiler_factory';\nexport * from './aot/compiler';\nexport * from './aot/generated_file';\nexport * from './aot/compiler_options';\nexport * from './aot/compiler_host';\nexport * from './aot/formatted_error';\nexport * from './aot/partial_module';\nexport * from './aot/static_reflector';\nexport * from './aot/static_symbol';\nexport * from './aot/static_symbol_resolver';\nexport * from './aot/summary_resolver';\nexport { isLoweredSymbol, createLoweredSymbol } from './aot/util';\nexport { LazyRoute } from './aot/lazy_routes';\nexport * from './ast_path';\nexport * from './summary_resolver';\nexport { Identifiers } from './identifiers';\nexport { JitCompiler } from './jit/compiler';\nexport * from './compile_reflector';\nexport * from './url_resolver';\nexport * from './resource_loader';\nexport { ConstantPool } from './constant_pool';\nexport { DirectiveResolver } from './directive_resolver';\nexport { PipeResolver } from './pipe_resolver';\nexport { NgModuleResolver } from './ng_module_resolver';\nexport { DEFAULT_INTERPOLATION_CONFIG, InterpolationConfig } from './ml_parser/interpolation_config';\nexport * from './schema/element_schema_registry';\nexport * from './i18n/index';\nexport * from './directive_normalizer';\nexport * from './expression_parser/ast';\nexport * from './expression_parser/lexer';\nexport * from './expression_parser/parser';\nexport * from './metadata_resolver';\nexport * from './ml_parser/ast';\nexport * from './ml_parser/html_parser';\nexport * from './ml_parser/html_tags';\nexport * from './ml_parser/interpolation_config';\nexport * from './ml_parser/tags';\nexport { NgModuleCompiler } from './ng_module_compiler';\nexport { ArrayType, AssertNotNull, BinaryOperator, BinaryOperatorExpr, BuiltinMethod, BuiltinType, BuiltinTypeName, BuiltinVar, CastExpr, ClassField, ClassMethod, ClassStmt, CommaExpr, CommentStmt, ConditionalExpr, DeclareFunctionStmt, DeclareVarStmt, Expression, ExpressionStatement, ExpressionType, ExpressionVisitor, ExternalExpr, ExternalReference, FunctionExpr, IfStmt, InstantiateExpr, InvokeFunctionExpr, InvokeMethodExpr, JSDocCommentStmt, LiteralArrayExpr, LiteralExpr, LiteralMapExpr, MapType, NotExpr, ReadKeyExpr, ReadPropExpr, ReadVarExpr, ReturnStatement, StatementVisitor, ThrowStmt, TryCatchStmt, Type, TypeVisitor, WrappedNodeExpr, WriteKeyExpr, WritePropExpr, WriteVarExpr, StmtModifier, Statement, TypeofExpr, collectExternalReferences } from './output/output_ast';\nexport { EmitterVisitorContext } from './output/abstract_emitter';\nexport * from './output/ts_emitter';\nexport * from './parse_util';\nexport * from './schema/dom_element_schema_registry';\nexport * from './selector';\nexport * from './style_compiler';\nexport * from './template_parser/template_parser';\nexport { ViewCompiler } from './view_compiler/view_compiler';\nexport { getParseErrors, isSyntaxError, syntaxError, Version } from './util';\nexport { SourceMap } from './output/source_map';\nexport * from './injectable_compiler_2';\nexport * from './render3/view/api';\nexport { BoundAttribute as TmplAstBoundAttribute, BoundEvent as TmplAstBoundEvent, BoundText as TmplAstBoundText, Content as TmplAstContent, Element as TmplAstElement, Node as TmplAstNode, Reference as TmplAstReference, Template as TmplAstTemplate, Text as TmplAstText, TextAttribute as TmplAstTextAttribute, Variable as TmplAstVariable, } from './render3/r3_ast';\nexport * from './render3/view/t2_api';\nexport * from './render3/view/t2_binder';\nexport { jitExpression } from './render3/r3_jit';\nexport { R3DependencyMetadata, R3FactoryMetadata, R3ResolvedDependencyType } from './render3/r3_factory';\nexport { compileInjector, compileNgModule, R3InjectorMetadata, R3NgModuleMetadata } from './render3/r3_module_compiler';\nexport { compilePipeFromMetadata, R3PipeMetadata } from './render3/r3_pipe_compiler';\nexport { makeBindingParser, parseTemplate } from './render3/view/template';\nexport { R3Reference } from './render3/util';\nexport { compileBaseDefFromMetadata, R3BaseRefMetaData, compileComponentFromMetadata, compileDirectiveFromMetadata, parseHostBindings } from './render3/view/compiler';\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/metadata_override.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type used for modifications to metadata\n *\n * @experimental\n */\nexport declare type MetadataOverride<T> = {\n    add?: Partial<T>;\n    remove?: Partial<T>;\n    set?: Partial<T>;\n};\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/defs.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\nimport { ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, StaticClassProvider, ValueProvider } from './provider';\n/**\n * Information about how a type or `InjectionToken` interfaces with the DI system.\n *\n * At a minimum, this includes a `factory` which defines how to create the given type `T`, possibly\n * requesting injection of other types if necessary.\n *\n * Optionally, a `providedIn` parameter specifies that the given type belongs to a particular\n * `InjectorDef`, `NgModule`, or a special scope (e.g. `'root'`). A value of `null` indicates\n * that the injectable does not belong to any scope.\n *\n * NOTE: This is a private type and should not be exported\n */\nexport interface InjectableDef<T> {\n    /**\n     * Specifies that the given type belongs to a particular injector:\n     * - `InjectorType` such as `NgModule`,\n     * - `'root'` the root injector\n     * - `'any'` all injectors.\n     * - `null`, does not belong to any injector. Must be explicitly listed in the injector\n     *   `providers`.\n     */\n    providedIn: InjectorType<any> | 'root' | 'any' | null;\n    /**\n     * Factory method to execute to create an instance of the injectable.\n     */\n    factory: () => T;\n    /**\n     * In a case of no explicit injector, a location where the instance of the injectable is stored.\n     */\n    value: T | undefined;\n}\n/**\n * Information about the providers to be included in an `Injector` as well as how the given type\n * which carries the information should be created by the DI system.\n *\n * An `InjectorDef` can import other types which have `InjectorDefs`, forming a deep nested\n * structure of providers with a defined priority (identically to how `NgModule`s also have\n * an import/dependency structure).\n *\n * NOTE: This is a private type and should not be exported\n */\nexport interface InjectorDef<T> {\n    factory: () => T;\n    providers: (Type<any> | ValueProvider | ExistingProvider | FactoryProvider | ConstructorProvider | StaticClassProvider | ClassProvider | any[])[];\n    imports: (InjectorType<any> | InjectorTypeWithProviders<any>)[];\n}\n/**\n * A `Type` which has an `InjectableDef` static field.\n *\n * `InjectableDefType`s contain their own Dependency Injection metadata and are usable in an\n * `InjectorDef`-based `StaticInjector.\n *\n * @experimental\n */\nexport interface InjectableType<T> extends Type<T> {\n    /**\n     * Opaque type whose structure is highly version dependent. Do not rely on any properties.\n     */\n    ngInjectableDef: never;\n}\n/**\n * A type which has an `InjectorDef` static field.\n *\n * `InjectorDefTypes` can be used to configure a `StaticInjector`.\n *\n * @experimental\n */\nexport interface InjectorType<T> extends Type<T> {\n    /**\n     * Opaque type whose structure is highly version dependent. Do not rely on any properties.\n     */\n    ngInjectorDef: never;\n}\n/**\n * Describes the `InjectorDef` equivalent of a `ModuleWithProviders`, an `InjectorDefType` with an\n * associated array of providers.\n *\n * Objects of this type can be listed in the imports section of an `InjectorDef`.\n *\n * NOTE: This is a private type and should not be exported\n */\nexport interface InjectorTypeWithProviders<T> {\n    ngModule: InjectorType<T>;\n    providers?: (Type<any> | ValueProvider | ExistingProvider | FactoryProvider | ConstructorProvider | StaticClassProvider | ClassProvider | any[])[];\n}\n/**\n * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n * in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * @experimental\n */\nexport declare function defineInjectable<T>(opts: {\n    providedIn?: Type<any> | 'root' | 'any' | null;\n    factory: () => T;\n}): never;\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n *   create the type must be provided. If that factory function needs to inject arguments, it can\n *   use the `inject` function.\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @experimental\n */\nexport declare function defineInjector(options: {\n    factory: () => any;\n    providers?: any[];\n    imports?: any[];\n}): never;\n/**\n * Read the `ngInjectableDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectableDef`\n */\nexport declare function getInjectableDef<T>(type: any): InjectableDef<T> | null;\n/**\n * Read the `ngInjectorDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectorDef`\n */\nexport declare function getInjectorDef<T>(type: any): InjectorDef<T> | null;\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/injector.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\nimport { InjectionToken } from './injection_token';\nimport { StaticProvider } from './provider';\nexport declare const SOURCE = \"__source\";\nexport declare const THROW_IF_NOT_FOUND: Object;\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @experimental\n */\nexport declare const INJECTOR: InjectionToken<Injector>;\nexport declare class NullInjector implements Injector {\n    get(token: any, notFoundValue?: any): any;\n}\n/**\n * Concrete injectors implement this interface.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n *\n */\nexport declare abstract class Injector {\n    static THROW_IF_NOT_FOUND: Object;\n    static NULL: Injector;\n    /**\n     * Retrieves an instance from the injector based on the provided token.\n     * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n     * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n     */\n    abstract get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n    /**\n     * @deprecated from v4.0.0 use Type<T> or InjectionToken<T>\n     * @suppress {duplicate}\n     */\n    abstract get(token: any, notFoundValue?: any): any;\n    /**\n     * @deprecated from v5 use the new signature Injector.create(options)\n     */\n    static create(providers: StaticProvider[], parent?: Injector): Injector;\n    static create(options: {\n        providers: StaticProvider[];\n        parent?: Injector;\n        name?: string;\n    }): Injector;\n    static ngInjectableDef: never;\n}\nexport declare const USE_VALUE: string;\nexport declare class StaticInjector implements Injector {\n    readonly parent: Injector;\n    readonly source: string | null;\n    private _records;\n    constructor(providers: StaticProvider[], parent?: Injector, source?: string | null);\n    get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n    get(token: any, notFoundValue?: any): any;\n    toString(): string;\n}\n/**\n * Injection flags for DI.\n */\nexport declare const enum InjectFlags {\n    Default = 0,\n    /**\n     * Specifies that an injector should retrieve a dependency from any injector until reaching the\n     * host element of the current component. (Only used with Element Injector)\n     */\n    Host = 1,\n    /** Don't descend into ancestors of the node requesting injection. */\n    Self = 2,\n    /** Skip the node that is requesting injection. */\n    SkipSelf = 4,\n    /** Inject `defaultValue` instead if token not found. */\n    Optional = 8\n}\nexport declare function setCurrentInjector(injector: Injector | null | undefined): Injector | undefined | null;\n/**\n * Injects a token from the currently active injector.\n *\n * This function must be used in the context of a factory function such as one defined for an\n * `InjectionToken`, and will throw an error if not called from such a context.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/injector_spec.ts region='ShakeableInjectionToken'}\n *\n * Within such a factory function `inject` is utilized to request injection of a dependency, instead\n * of providing an additional array of dependencies as was common to do with `useFactory` providers.\n * `inject` is faster and more type-safe.\n *\n * @experimental\n */\nexport declare function inject<T>(token: Type<T> | InjectionToken<T>): T;\nexport declare function inject<T>(token: Type<T> | InjectionToken<T>, flags?: InjectFlags): T | null;\nexport declare function injectArgs(types: (Type<any> | InjectionToken<any> | any[])[]): any[];\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/r3_injector.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\nimport { InjectorType } from './defs';\nimport { InjectionToken } from './injection_token';\nimport { InjectFlags, Injector } from './injector';\nimport { StaticProvider } from './provider';\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * @experimental\n */\nexport declare function createInjector(defType: any, parent?: Injector | null, additionalProviders?: StaticProvider[] | null): Injector;\nexport declare class R3Injector {\n    readonly parent: Injector;\n    /**\n     * Map of tokens to records which contain the instances of those tokens.\n     */\n    private records;\n    /**\n     * The transitive set of `InjectorType`s which define this injector.\n     */\n    private injectorDefTypes;\n    /**\n     * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n     */\n    private onDestroy;\n    /**\n     * Flag indicating this injector provides the APP_ROOT_SCOPE token, and thus counts as the\n     * root scope.\n     */\n    private readonly isRootInjector;\n    /**\n     * Flag indicating that this injector was previously destroyed.\n     */\n    private destroyed;\n    constructor(def: InjectorType<any>, additionalProviders: StaticProvider[] | null, parent: Injector);\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     */\n    destroy(): void;\n    get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: any, flags?: InjectFlags): T;\n    private assertNotDestroyed;\n    /**\n     * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\n     * to this injector.\n     */\n    private processInjectorType;\n    /**\n     * Process a `SingleProvider` and add it.\n     */\n    private processProvider;\n    private hydrate;\n    private injectableDefInScope;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/component_factory_resolver.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '../di/injector';\nimport { Type } from '../type';\nimport { ComponentFactory, ComponentRef } from './component_factory';\nimport { NgModuleRef } from './ng_module_factory';\nexport declare function noComponentFactoryError(component: Function): Error;\nexport declare function getComponent(error: Error): Type<any>;\nexport declare abstract class ComponentFactoryResolver {\n    static NULL: ComponentFactoryResolver;\n    abstract resolveComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n}\nexport declare class CodegenComponentFactoryResolver implements ComponentFactoryResolver {\n    private _parent;\n    private _ngModule;\n    private _factories;\n    constructor(factories: ComponentFactory<any>[], _parent: ComponentFactoryResolver, _ngModule: NgModuleRef<any>);\n    resolveComponentFactory<T>(component: {\n        new (...args: any[]): T;\n    }): ComponentFactory<T>;\n}\nexport declare class ComponentFactoryBoundToModule<C> extends ComponentFactory<C> {\n    private factory;\n    private ngModule;\n    readonly selector: string;\n    readonly componentType: Type<any>;\n    readonly ngContentSelectors: string[];\n    readonly inputs: {\n        propName: string;\n        templateName: string;\n    }[];\n    readonly outputs: {\n        propName: string;\n        templateName: string;\n    }[];\n    constructor(factory: ComponentFactory<C>, ngModule: NgModuleRef<any>);\n    create(injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string | any, ngModule?: NgModuleRef<any>): ComponentRef<C>;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/injectable.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\nimport { InjectableDef } from './defs';\nimport { ClassSansProvider, ConstructorSansProvider, ExistingSansProvider, FactorySansProvider, StaticClassSansProvider, ValueSansProvider } from './provider';\n/**\n * Injectable providers used in `@Injectable` decorator.\n *\n * @experimental\n */\nexport declare type InjectableProvider = ValueSansProvider | ExistingSansProvider | StaticClassSansProvider | ConstructorSansProvider | FactorySansProvider | ClassSansProvider;\n/**\n * Type of the Injectable decorator / constructor function.\n */\nexport interface InjectableDecorator {\n    /**\n     * A marker metadata that marks a class as available to `Injector` for creation.\n     *\n     * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/di/ts/metadata_spec.ts region='Injectable'}\n     *\n     * `Injector` will throw an error when trying to instantiate a class that\n     * does not have `@Injectable` marker, as shown in the example below.\n     *\n     * {@example core/di/ts/metadata_spec.ts region='InjectableThrows'}\n     *\n     */\n    (): any;\n    (options?: {\n        providedIn: Type<any> | 'root' | null;\n    } & InjectableProvider): any;\n    new (): Injectable;\n    new (options?: {\n        providedIn: Type<any> | 'root' | null;\n    } & InjectableProvider): Injectable;\n}\n/**\n * Type of the Injectable metadata.\n *\n * @experimental\n */\nexport interface Injectable {\n    providedIn?: Type<any> | 'root' | null;\n}\n/**\n* Injectable decorator and metadata.\n*\n* @Annotation\n*/\nexport declare const Injectable: InjectableDecorator;\n/**\n * Type representing injectable service.\n *\n * @experimental\n */\nexport interface InjectableType<T> extends Type<T> {\n    ngInjectableDef: InjectableDef<T>;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/context.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { RElement } from './renderer';\nimport { LViewData } from './view';\n/**\n * This property will be monkey-patched on elements, components and directives\n */\nexport declare const MONKEY_PATCH_KEY_NAME = \"__ngContext__\";\n/**\n * The internal view context which is specific to a given DOM element, directive or\n * component instance. Each value in here (besides the LViewData and element node details)\n * can be present, null or undefined. If undefined then it implies the value has not been\n * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\n *\n * Each value will get filled when the respective value is examined within the getContext\n * function. The component, element and each directive instance will share the same instance\n * of the context.\n */\nexport interface LContext {\n    /**\n     * The component's parent view data.\n     */\n    lViewData: LViewData;\n    /**\n     * The index instance of the node.\n     */\n    nodeIndex: number;\n    /**\n     * The instance of the DOM node that is attached to the lNode.\n     */\n    native: RElement;\n    /**\n     * The instance of the Component node.\n     */\n    component: {} | null | undefined;\n    /**\n     * The list of active directives that exist on this element.\n     */\n    directives: any[] | null | undefined;\n    /**\n     * The map of local references (local reference name => element or directive instance) that exist\n     * on this element.\n     */\n    localRefs: {\n        [key: string]: any;\n    } | null | undefined;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/forward_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\n/**\n * An interface that a function passed into {@link forwardRef} has to implement.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * @experimental\n */\nexport interface ForwardRefFn {\n    (): any;\n}\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @experimental\n */\nexport declare function forwardRef(forwardRefFn: ForwardRefFn): Type<any>;\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @experimental\n */\nexport declare function resolveForwardRef(type: any): any;\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection/differs/iterable_differs.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StaticProvider } from '../../di/provider';\n/**\n * A type describing supported iterable types.\n *\n *\n */\nexport declare type NgIterable<T> = Array<T> | Iterable<T>;\n/**\n * A strategy for tracking changes over time to an iterable. Used by {@link NgForOf} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n *\n *\n */\nexport interface IterableDiffer<V> {\n    /**\n     * Compute a difference between the previous state and the new `object` state.\n     *\n     * @param object containing the new value.\n     * @returns an object describing the difference. The return value is only valid until the next\n     * `diff()` invocation.\n     */\n    diff(object: NgIterable<V>): IterableChanges<V> | null;\n}\n/**\n * An object describing the changes in the `Iterable` collection since last time\n * `IterableDiffer#diff()` was invoked.\n *\n *\n */\nexport interface IterableChanges<V> {\n    /**\n     * Iterate over all changes. `IterableChangeRecord` will contain information about changes\n     * to each item.\n     */\n    forEachItem(fn: (record: IterableChangeRecord<V>) => void): void;\n    /**\n     * Iterate over a set of operations which when applied to the original `Iterable` will produce the\n     * new `Iterable`.\n     *\n     * NOTE: These are not necessarily the actual operations which were applied to the original\n     * `Iterable`, rather these are a set of computed operations which may not be the same as the\n     * ones applied.\n     *\n     * @param record A change which needs to be applied\n     * @param previousIndex The `IterableChangeRecord#previousIndex` of the `record` refers to the\n     *        original `Iterable` location, where as `previousIndex` refers to the transient location\n     *        of the item, after applying the operations up to this point.\n     * @param currentIndex The `IterableChangeRecord#currentIndex` of the `record` refers to the\n     *        original `Iterable` location, where as `currentIndex` refers to the transient location\n     *        of the item, after applying the operations up to this point.\n     */\n    forEachOperation(fn: (record: IterableChangeRecord<V>, previousIndex: number | null, currentIndex: number | null) => void): void;\n    /**\n     * Iterate over changes in the order of original `Iterable` showing where the original items\n     * have moved.\n     */\n    forEachPreviousItem(fn: (record: IterableChangeRecord<V>) => void): void;\n    /** Iterate over all added items. */\n    forEachAddedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n    /** Iterate over all moved items. */\n    forEachMovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n    /** Iterate over all removed items. */\n    forEachRemovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n    /** Iterate over all items which had their identity (as computed by the `TrackByFunction`)\n     * changed. */\n    forEachIdentityChange(fn: (record: IterableChangeRecord<V>) => void): void;\n}\n/**\n * Record representing the item change information.\n *\n *\n */\nexport interface IterableChangeRecord<V> {\n    /** Current index of the item in `Iterable` or null if removed. */\n    readonly currentIndex: number | null;\n    /** Previous index of the item in `Iterable` or null if added. */\n    readonly previousIndex: number | null;\n    /** The item. */\n    readonly item: V;\n    /** Track by identity as computed by the `TrackByFunction`. */\n    readonly trackById: any;\n}\n/**\n * @deprecated v4.0.0 - Use IterableChangeRecord instead.\n */\nexport interface CollectionChangeRecord<V> extends IterableChangeRecord<V> {\n}\n/**\n * An optional function passed into {@link NgForOf} that defines how to track\n * items in an iterable (e.g. fby index or id)\n *\n *\n */\nexport interface TrackByFunction<T> {\n    (index: number, item: T): any;\n}\n/**\n * Provides a factory for {@link IterableDiffer}.\n *\n *\n */\nexport interface IterableDifferFactory {\n    supports(objects: any): boolean;\n    create<V>(trackByFn?: TrackByFunction<V>): IterableDiffer<V>;\n}\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n */\nexport declare class IterableDiffers {\n    static ngInjectableDef: never;\n    /**\n     * @deprecated v4.0.0 - Should be private\n     */\n    factories: IterableDifferFactory[];\n    constructor(factories: IterableDifferFactory[]);\n    static create(factories: IterableDifferFactory[], parent?: IterableDiffers): IterableDiffers;\n    /**\n     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {@link IterableDiffers} instance with the provided factories and return a new\n     * {@link IterableDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link IterableDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    static extend(factories: IterableDifferFactory[]): StaticProvider;\n    find(iterable: any): IterableDifferFactory;\n}\nexport declare function getTypeNameForDebugging(type: any): string;\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection/change_detection_util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare function devModeEqual(a: any, b: any): boolean;\n/**\n * Indicates that the result of a {@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n */\nexport declare class WrappedValue {\n    /** @deprecated from 5.3, use `unwrap()` instead - will switch to protected */\n    wrapped: any;\n    constructor(value: any);\n    /** Creates a wrapped value. */\n    static wrap(value: any): WrappedValue;\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     **/\n    static unwrap(value: any): any;\n    /** Returns true if `value` is a wrapped value. */\n    static isWrapped(value: any): value is WrappedValue;\n}\n/**\n * Represents a basic change from a previous to a new value.\n *\n */\nexport declare class SimpleChange {\n    previousValue: any;\n    currentValue: any;\n    firstChange: boolean;\n    constructor(previousValue: any, currentValue: any, firstChange: boolean);\n    /**\n     * Check whether the new value is the first value assigned.\n     */\n    isFirstChange(): boolean;\n}\nexport declare function isListLikeIterable(obj: any): boolean;\nexport declare function areIterablesEqual(a: any, b: any, comparator: (a: any, b: any) => boolean): boolean;\nexport declare function iterateListLike(obj: any, fn: (p: any) => any): void;\nexport declare function isJsObject(o: any): boolean;\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection/pipe_transform.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To create a Pipe, you must implement this interface.\n *\n * Angular invokes the `transform` method with the value of a binding\n * as the first argument, and any parameters as the second argument in list form.\n *\n * @usageNotes\n * ### Example\n *\n * The `RepeatPipe` below repeats the value as many times as indicated by the first argument:\n *\n * ```\n * import {Pipe, PipeTransform} from '@angular/core';\n *\n * @Pipe({name: 'repeat'})\n * export class RepeatPipe implements PipeTransform {\n *   transform(value: any, times: number) {\n *     return value.repeat(times);\n *   }\n * }\n * ```\n *\n * Invoking `{{ 'ok' | repeat:3 }}` in a template produces `okokok`.\n *\n *\n */\nexport interface PipeTransform {\n    transform(value: any, ...args: any[]): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/element_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n *\n */\nexport declare class ElementRef<T = any> {\n    /**\n     * The underlying native element or `null` if direct access to native elements is not supported\n     * (e.g. when the application runs in a web worker).\n     *\n     * <div class=\"callout is-critical\">\n     *   <header>Use with caution</header>\n     *   <p>\n     *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n     *    data-binding provided by Angular instead. Alternatively you can take a look at {@link\n     * Renderer2}\n     *    which provides API that can safely be used even when direct access to native elements is not\n     *    supported.\n     *   </p>\n     *   <p>\n     *    Relying on direct DOM access creates tight coupling between your application and rendering\n     *    layers which will make it impossible to separate the two and deploy your application into a\n     *    web worker.\n     *   </p>\n     * </div>\n     *\n     */\n    nativeElement: T;\n    constructor(nativeElement: T);\n}\n"
  },
  {
    "path": "node_modules/@angular/common/http/testing/src/request.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HttpEvent, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { Observer } from 'rxjs';\n/**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n *\n */\nexport declare class TestRequest {\n    request: HttpRequest<any>;\n    private observer;\n    /**\n     * Whether the request was cancelled after it was sent.\n     */\n    readonly cancelled: boolean;\n    constructor(request: HttpRequest<any>, observer: Observer<HttpEvent<any>>);\n    /**\n     * Resolve the request by returning a body plus additional HTTP information (such as response\n     * headers) if provided.\n     *\n     * Both successful and unsuccessful responses can be delivered via `flush()`.\n     */\n    flush(body: ArrayBuffer | Blob | string | number | Object | (string | number | Object | null)[] | null, opts?: {\n        headers?: HttpHeaders | {\n            [name: string]: string | string[];\n        };\n        status?: number;\n        statusText?: string;\n    }): void;\n    /**\n     * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\n     */\n    error(error: ErrorEvent, opts?: {\n        headers?: HttpHeaders | {\n            [name: string]: string | string[];\n        };\n        status?: number;\n        statusText?: string;\n    }): void;\n    /**\n     * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n     * request.\n     */\n    event(event: HttpEvent<any>): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/metadata/lifecycle_hooks.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SimpleChange } from '../change_detection/change_detection_util';\n/**\n * Defines an object that associates properties with\n * instances of `SimpleChange`.\n *\n * @see `OnChanges`\n *\n */\nexport interface SimpleChanges {\n    [propName: string]: SimpleChange;\n}\n/**\n * @description\n * A lifecycle hook that is called when any data-bound property of a directive changes.\n * Define an `ngOnChanges()` method to handle the changes.\n *\n * @see `DoCheck`\n * @see `OnInit`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define an on-changes handler for an input property.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}\n *\n */\nexport interface OnChanges {\n    /**\n     * A callback method that is invoked immediately after the\n     * default change detector has checked data-bound properties\n     * if at least one has changed, and before the view and content\n     * children are checked.\n     * @param changes The changed properties.\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n}\n/**\n * @description\n * A lifecycle hook that is called after Angular has initialized\n * all data-bound properties of a directive.\n * Define an `ngOnInit()` method to handle any additional initialization tasks.\n *\n * @see `AfterContentInit`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own initialization method.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}\n *\n *\n */\nexport interface OnInit {\n    /**\n     * A callback method that is invoked immediately after the\n     * default change detector has checked the directive's\n     * data-bound properties for the first time,\n     * and before any of the view or content children have been checked.\n     * It is invoked only once when the directive is instantiated.\n     */\n    ngOnInit(): void;\n}\n/**\n * A lifecycle hook that invokes a custom change-detection function for a directive,\n * in addition to the check performed by the default change-detector.\n *\n * The default change-detection algorithm looks for differences by comparing\n * bound-property values by reference across change detection runs. You can use this\n * hook to check for and respond to changes by some other means.\n *\n * When the default change detector detects changes, it invokes `ngOnChanges()` if supplied,\n * regardless of whether you perform additional change detection.\n * Typically, you should not use both `DoCheck` and `OnChanges` to respond to\n * changes on the same input.\n *\n * @see `OnChanges`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface\n * to invoke it own change-detection cycle.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}\n *\n */\nexport interface DoCheck {\n    /**\n       * A callback method that performs change-detection, invoked\n       * after the default change-detector runs.\n       * See `KeyValueDiffers` and `IterableDiffers` for implementing\n       * custom change checking for collections.\n       *\n       */\n    ngDoCheck(): void;\n}\n/**\n * A lifecycle hook that is called when a directive, pipe, or service is destroyed.\n * Use for any custom cleanup that needs to occur when the\n * instance is destroyed.\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface\n * to define its own custom clean-up method.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}\n *\n */\nexport interface OnDestroy {\n    /**\n     * A callback method that performs custom clean-up, invoked immediately\n     * after a directive, pipe, or service instance is destroyed.\n     */\n    ngOnDestroy(): void;\n}\n/**\n * @description\n * A lifecycle hook that is called after Angular has fully initialized\n * all content of a directive.\n * Define an `ngAfterContentInit()` method to handle any additional initialization tasks.\n *\n * @see `OnInit`\n * @see `AfterViewInit`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own content initialization method.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}\n *\n *\n */\nexport interface AfterContentInit {\n    /**\n     * A callback method that is invoked immediately after\n     * Angular has completed initialization of all of the directive's\n     * content.\n     * It is invoked only once when the directive is instantiated.\n     */\n    ngAfterContentInit(): void;\n}\n/**\n * @description\n * A lifecycle hook that is called after the default change detector has\n * completed checking all content of a directive.\n *\n * @see `AfterViewChecked`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own after-check functionality.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}\n *\n *\n */\nexport interface AfterContentChecked {\n    /**\n     * A callback method that is invoked immediately after the\n     * default change detector has completed checking all of the directive's\n     * content.\n     */\n    ngAfterContentChecked(): void;\n}\n/**\n * @description\n * A lifecycle hook that is called after Angular has fully initialized\n * a component's view.\n * Define an `ngAfterViewInit()` method to handle any additional initialization tasks.\n *\n * @see `OnInit`\n * @see `AfterContentInit`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own view initialization method.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}\n *\n *\n */\nexport interface AfterViewInit {\n    /**\n     * A callback method that is invoked immediately after\n     * Angular has completed initialization of a component's view.\n     * It is invoked only once when the view is instantiated.\n     *\n     */\n    ngAfterViewInit(): void;\n}\n/**\n * @description\n * A lifecycle hook that is called after the default change detector has\n * completed checking a component's view for changes.\n *\n * @see `AfterContentChecked`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own after-check functionality.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}\n *\n */\nexport interface AfterViewChecked {\n    /**\n     * A callback method that is invoked immediately after the\n     * default change detector has completed one change-check cycle\n     * for a component's view.\n     */\n    ngAfterViewChecked(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/view_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef } from '../application_ref';\nimport { ChangeDetectorRef } from '../change_detection/change_detector_ref';\n/**\n * Represents an Angular [view](guide/glossary#view),\n * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n * Also serves as the base class\n * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n *\n * @see `EmbeddedViewRef`\n */\nexport declare abstract class ViewRef extends ChangeDetectorRef {\n    /**\n     * Destroys this view and all of the data structures associated with it.\n     */\n    abstract destroy(): void;\n    /**\n     * Reports whether this view has been destroyed.\n     * @returns True after the `destroy()` method has been called, false otherwise.\n     */\n    abstract readonly destroyed: boolean;\n    /**\n     * A lifecycle hook that provides additional developer-defined cleanup\n     * functionality for views.\n     * @param callback A handler function that cleans up developer-defined data\n     * associated with a view. Called when the `destroy()` method is invoked.\n     */\n    abstract onDestroy(callback: Function): any /** TODO #9100 */;\n}\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * @usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * @experimental\n */\nexport declare abstract class EmbeddedViewRef<C> extends ViewRef {\n    /**\n     * The context for this view, inherited from the anchor element.\n     */\n    abstract readonly context: C;\n    /**\n     * The root nodes for this embedded view.\n     */\n    abstract readonly rootNodes: any[];\n}\nexport interface InternalViewRef extends ViewRef {\n    detachFromAppRef(): void;\n    attachToAppRef(appRef: ApplicationRef): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/view_engine_compatibility.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef as ViewEngine_ChangeDetectorRef } from '../change_detection/change_detector_ref';\nimport { ElementRef as ViewEngine_ElementRef } from '../linker/element_ref';\nimport { TemplateRef as ViewEngine_TemplateRef } from '../linker/template_ref';\nimport { ViewContainerRef as ViewEngine_ViewContainerRef } from '../linker/view_container_ref';\nimport { Renderer2 } from '../render/api';\nimport { TContainerNode, TElementContainerNode, TElementNode, TNode } from './interfaces/node';\nimport { LViewData } from './interfaces/view';\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @returns The ElementRef instance to use\n */\nexport declare function injectElementRef(ElementRefToken: typeof ViewEngine_ElementRef): ViewEngine_ElementRef;\n/**\n * Creates an ElementRef given a node.\n *\n * @param ElementRefToken The ElementRef type\n * @param tNode The node for which you'd like an ElementRef\n * @param view The view to which the node belongs\n * @returns The ElementRef instance to use\n */\nexport declare function createElementRef(ElementRefToken: typeof ViewEngine_ElementRef, tNode: TNode, view: LViewData): ViewEngine_ElementRef;\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\nexport declare function injectTemplateRef<T>(TemplateRefToken: typeof ViewEngine_TemplateRef, ElementRefToken: typeof ViewEngine_ElementRef): ViewEngine_TemplateRef<T>;\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param TemplateRefToken The TemplateRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a TemplateRef\n * @param hostView The view to which the node belongs\n * @returns The TemplateRef instance to use\n */\nexport declare function createTemplateRef<T>(TemplateRefToken: typeof ViewEngine_TemplateRef, ElementRefToken: typeof ViewEngine_ElementRef, hostTNode: TNode, hostView: LViewData): ViewEngine_TemplateRef<T>;\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @returns The ViewContainerRef instance to use\n */\nexport declare function injectViewContainerRef(ViewContainerRefToken: typeof ViewEngine_ViewContainerRef, ElementRefToken: typeof ViewEngine_ElementRef): ViewEngine_ViewContainerRef;\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param ViewContainerRefToken The ViewContainerRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a ViewContainerRef\n * @param hostView The view to which the node belongs\n * @returns The ViewContainerRef instance to use\n */\nexport declare function createContainerRef(ViewContainerRefToken: typeof ViewEngine_ViewContainerRef, ElementRefToken: typeof ViewEngine_ElementRef, hostTNode: TElementNode | TContainerNode | TElementContainerNode, hostView: LViewData): ViewEngine_ViewContainerRef;\n/** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\nexport declare function injectChangeDetectorRef(): ViewEngine_ChangeDetectorRef;\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param hostTNode The node that is requesting a ChangeDetectorRef\n * @param hostView The view to which the node belongs\n * @param context The context for this change detector ref\n * @returns The ChangeDetectorRef to use\n */\nexport declare function createViewRef(hostTNode: TNode, hostView: LViewData, context: any): ViewEngine_ChangeDetectorRef;\n/** Returns a Renderer2 (or throws when application was bootstrapped with Renderer3) */\nexport declare function injectRenderer2(): Renderer2;\n"
  },
  {
    "path": "node_modules/@angular/core/src/application_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { InjectionToken, Injector, StaticProvider } from './di';\nimport { CompilerOptions } from './linker/compiler';\nimport { ComponentFactory, ComponentRef } from './linker/component_factory';\nimport { NgModuleFactory, NgModuleRef } from './linker/ng_module_factory';\nimport { ViewRef } from './linker/view_ref';\nimport { Type } from './type';\nimport { NgZone } from './zone/ng_zone';\nexport declare function compileNgModuleFactory__POST_NGCC__<M>(injector: Injector, options: CompilerOptions, moduleType: Type<M>): Promise<NgModuleFactory<M>>;\nexport declare const ALLOW_MULTIPLE_PLATFORMS: InjectionToken<boolean>;\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * @experimental\n */\nexport declare class NgProbeToken {\n    name: string;\n    token: any;\n    constructor(name: string, token: any);\n}\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport declare function createPlatform(injector: Injector): PlatformRef;\n/**\n * Creates a factory for a platform\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport declare function createPlatformFactory(parentPlatformFactory: ((extraProviders?: StaticProvider[]) => PlatformRef) | null, name: string, providers?: StaticProvider[]): (extraProviders?: StaticProvider[]) => PlatformRef;\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport declare function assertPlatform(requiredToken: any): PlatformRef;\n/**\n * Destroy the existing platform.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport declare function destroyPlatform(): void;\n/**\n * Returns the current platform.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport declare function getPlatform(): PlatformRef | null;\n/**\n * Provides additional options to the bootstraping process.\n *\n *\n */\nexport interface BootstrapOptions {\n    /**\n     * Optionally specify which `NgZone` should be used.\n     *\n     * - Provide your own `NgZone` instance.\n     * - `zone.js` - Use default `NgZone` which requires `Zone.js`.\n     * - `noop` - Use `NoopNgZone` which does nothing.\n     */\n    ngZone?: NgZone | 'zone.js' | 'noop';\n}\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {@link platformBrowser}), or explicitly by calling the {@link createPlatform} function.\n */\nexport declare class PlatformRef {\n    private _injector;\n    private _modules;\n    private _destroyListeners;\n    private _destroyed;\n    /**\n     * Creates an instance of an `@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     *\n     * @experimental APIs related to application bootstrap are currently under review.\n     */\n    bootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>, options?: BootstrapOptions): Promise<NgModuleRef<M>>;\n    /**\n     * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     */\n    bootstrapModule<M>(moduleType: Type<M>, compilerOptions?: (CompilerOptions & BootstrapOptions) | Array<CompilerOptions & BootstrapOptions>): Promise<NgModuleRef<M>>;\n    private _moduleDoBootstrap;\n    /**\n     * Register a listener to be called when the platform is disposed.\n     */\n    onDestroy(callback: () => void): void;\n    /**\n     * Retrieve the platform {@link Injector}, which is the parent injector for\n     * every Angular application on the page and provides singleton providers.\n     */\n    readonly injector: Injector;\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     */\n    destroy(): void;\n    readonly destroyed: boolean;\n}\n/**\n * A reference to an Angular application running on a page.\n */\nexport declare class ApplicationRef {\n    private _zone;\n    private _console;\n    private _injector;\n    private _exceptionHandler;\n    private _componentFactoryResolver;\n    private _initStatus;\n    private _bootstrapListeners;\n    private _views;\n    private _runningTick;\n    private _enforceNoNewChanges;\n    private _stable;\n    /**\n     * Get a list of component types registered to this application.\n     * This list is populated even before the component is created.\n     */\n    readonly componentTypes: Type<any>[];\n    /**\n     * Get a list of components registered to this application.\n     */\n    readonly components: ComponentRef<any>[];\n    /**\n     * Returns an Observable that indicates when the application is stable or unstable.\n     */\n    readonly isStable: Observable<boolean>;\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * @usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {@example core/ts/platform/platform.ts region='longform'}\n     */\n    bootstrap<C>(componentOrFactory: ComponentFactory<C> | Type<C>, rootSelectorOrNode?: string | any): ComponentRef<C>;\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     */\n    tick(): void;\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     */\n    attachView(viewRef: ViewRef): void;\n    /**\n     * Detaches a view from dirty checking again.\n     */\n    detachView(viewRef: ViewRef): void;\n    private _loadComponent;\n    private _unloadComponent;\n    /**\n     * Returns the number of attached views.\n     */\n    readonly viewCount: number;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection/change_detector_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base class for Angular Views, provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.\n *\n * @usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n */\nexport declare abstract class ChangeDetectorRef {\n    /**\n     * When a view uses the {@link ChangeDetectionStrategy#OnPush OnPush} (checkOnce)\n     * change detection strategy, explicitly marks the view as changed so that\n     * it can be checked again.\n     *\n     * Components are normally marked as dirty (in need of rerendering) when inputs\n     * have changed or events have fired in the view. Call this method to ensure that\n     * a component is checked even if these triggers have not occured.\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     */\n    abstract markForCheck(): void;\n    /**\n     * Detaches this view from the change-detection tree.\n     * A detached view is  not checked until it is reattached.\n     * Use in combination with `detectChanges()` to implement local change detection checks.\n     *\n     * Detached views are not checked during change detection runs until they are\n     * re-attached, even if they are marked as dirty.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     */\n    abstract detach(): void;\n    /**\n     * Checks this view and its children. Use in combination with {@link ChangeDetectorRef#detach\n     * detach}\n     * to implement local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     */\n    abstract detectChanges(): void;\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * Use in development mode to verify that running change detection doesn't introduce\n     * other changes.\n     */\n    abstract checkNoChanges(): void;\n    /**\n     * Re-attaches the previously detached view to the change detection tree.\n     * Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     */\n    abstract reattach(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/injection_token.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * @usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n */\nexport declare class InjectionToken<T> {\n    protected _desc: string;\n    readonly ngInjectableDef: never | undefined;\n    constructor(_desc: string, options?: {\n        providedIn?: Type<any> | 'root' | null;\n        factory: () => T;\n    });\n    toString(): string;\n}\nexport interface InjectableDefToken<T> extends InjectionToken<T> {\n    ngInjectableDef: never;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/profile/wtf_impl.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A scope function for the Web Tracing Framework (WTF).\n *\n * @experimental\n */\nexport interface WtfScopeFn {\n    (arg0?: any, arg1?: any): any;\n}\nexport interface Range {\n}\nexport interface Scope {\n    (...args: any[] /** TODO #9100 */): any;\n}\nexport declare function detectWTF(): boolean;\nexport declare function createScope(signature: string, flags?: any): any;\nexport declare function leave<T>(scope: Scope): void;\nexport declare function leave<T>(scope: Scope, returnValue?: T): T;\nexport declare function startTimeRange(rangeType: string, action: string): Range;\nexport declare function endTimeRange(range: Range): void;\n"
  },
  {
    "path": "node_modules/@angular/common/http/src/params.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n *\n **/\nexport interface HttpParameterCodec {\n    encodeKey(key: string): string;\n    encodeValue(value: string): string;\n    decodeKey(key: string): string;\n    decodeValue(value: string): string;\n}\n/**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n *\n *\n */\nexport declare class HttpUrlEncodingCodec implements HttpParameterCodec {\n    encodeKey(key: string): string;\n    encodeValue(value: string): string;\n    decodeKey(key: string): string;\n    decodeValue(value: string): string;\n}\n/** Options used to construct an `HttpParams` instance. */\nexport interface HttpParamsOptions {\n    /**\n     * String representation of the HTTP params in URL-query-string format. Mutually exclusive with\n     * `fromObject`.\n     */\n    fromString?: string;\n    /** Object map of the HTTP params. Mutally exclusive with `fromString`. */\n    fromObject?: {\n        [param: string]: string | string[];\n    };\n    /** Encoding codec used to parse and serialize the params. */\n    encoder?: HttpParameterCodec;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable - all mutation operations return a new instance.\n *\n *\n */\nexport declare class HttpParams {\n    private map;\n    private encoder;\n    private updates;\n    private cloneFrom;\n    constructor(options?: HttpParamsOptions);\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     */\n    has(param: string): boolean;\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     */\n    get(param: string): string | null;\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     */\n    getAll(param: string): string[] | null;\n    /**\n     * Get all the parameter names for this body.\n     */\n    keys(): string[];\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     */\n    append(param: string, value: string): HttpParams;\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     */\n    set(param: string, value: string): HttpParams;\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     */\n    delete(param: string, value?: string): HttpParams;\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString(): string;\n    private clone;\n    private init;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/directives/ng_plural.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplateRef, ViewContainerRef } from '@angular/core';\nimport { NgLocalization } from '../i18n/localization';\nimport { SwitchView } from './ng_switch';\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n *   <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n *   <ng-template ngPluralCase=\"few\">there are a few</ng-template>\n * </some-element>\n * ```\n *\n * @description\n *\n * Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n *\n * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\n * that match the switch expression's pluralization category.\n *\n * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\n * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\n * expression:\n * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\n *   matches the switch expression exactly,\n * - otherwise, the view will be treated as a \"category match\", and will only display if exact\n *   value matches aren't found and the value maps to its category for the defined locale.\n *\n * See http://cldr.unicode.org/index/cldr-spec/plural-rules\n *\n * @experimental\n */\nexport declare class NgPlural {\n    private _localization;\n    private _switchValue;\n    private _activeView;\n    private _caseViews;\n    constructor(_localization: NgLocalization);\n    ngPlural: number;\n    addCase(value: string, switchView: SwitchView): void;\n    private _updateView;\n    private _clearViews;\n    private _activateView;\n}\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Creates a view that will be added/removed from the parent {@link NgPlural} when the\n * given expression matches the plural expression according to CLDR rules.\n *\n * @usageNotes\n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">...</ng-template>\n *   <ng-template ngPluralCase=\"other\">...</ng-template>\n * </some-element>\n *```\n *\n * See {@link NgPlural} for more details and example.\n *\n * @experimental\n */\nexport declare class NgPluralCase {\n    value: string;\n    constructor(value: string, template: TemplateRef<Object>, viewContainer: ViewContainerRef, ngPlural: NgPlural);\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/ng_module_factory_loader.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModuleFactory } from './ng_module_factory';\n/**\n * Used to load ng module factories.\n *\n */\nexport declare abstract class NgModuleFactoryLoader {\n    abstract load(path: string): Promise<NgModuleFactory<any>>;\n}\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * @experimental\n */\nexport declare function registerModuleFactory(id: string, factory: NgModuleFactory<any>): void;\nexport declare function clearModulesForTest(): void;\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * @experimental\n */\nexport declare function getModuleFactory(id: string): NgModuleFactory<any>;\n"
  },
  {
    "path": "node_modules/@angular/common/src/common.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\nexport * from './location/index';\nexport { formatDate } from './i18n/format_date';\nexport { formatCurrency, formatNumber, formatPercent } from './i18n/format_number';\nexport { NgLocaleLocalization, NgLocalization } from './i18n/localization';\nexport { registerLocaleData } from './i18n/locale_data';\nexport { Plural, NumberFormatStyle, FormStyle, Time, TranslationWidth, FormatWidth, NumberSymbol, WeekDay, getNumberOfCurrencyDigits, getCurrencySymbol, getLocaleDayPeriods, getLocaleDayNames, getLocaleMonthNames, getLocaleId, getLocaleEraNames, getLocaleWeekEndRange, getLocaleFirstDayOfWeek, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocalePluralCase, getLocaleTimeFormat, getLocaleNumberSymbol, getLocaleNumberFormat, getLocaleCurrencyName, getLocaleCurrencySymbol } from './i18n/locale_data_api';\nexport { parseCookieValue as ɵparseCookieValue } from './cookie';\nexport { CommonModule, DeprecatedI18NPipesModule } from './common_module';\nexport { NgClass, NgForOf, NgForOfContext, NgIf, NgIfContext, NgPlural, NgPluralCase, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgTemplateOutlet, NgComponentOutlet } from './directives/index';\nexport { DOCUMENT } from './dom_tokens';\nexport { AsyncPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, JsonPipe, LowerCasePipe, CurrencyPipe, DecimalPipe, PercentPipe, SlicePipe, UpperCasePipe, TitleCasePipe, KeyValuePipe, KeyValue } from './pipes/index';\nexport { DeprecatedDatePipe, DeprecatedCurrencyPipe, DeprecatedDecimalPipe, DeprecatedPercentPipe } from './pipes/deprecated/index';\nexport { PLATFORM_BROWSER_ID as ɵPLATFORM_BROWSER_ID, PLATFORM_SERVER_ID as ɵPLATFORM_SERVER_ID, PLATFORM_WORKER_APP_ID as ɵPLATFORM_WORKER_APP_ID, PLATFORM_WORKER_UI_ID as ɵPLATFORM_WORKER_UI_ID, isPlatformBrowser, isPlatformServer, isPlatformWorkerApp, isPlatformWorkerUi } from './platform_id';\nexport { VERSION } from './version';\nexport { ViewportScroller, NullViewportScroller as ɵNullViewportScroller } from './viewport_scroller';\n"
  },
  {
    "path": "node_modules/@angular/common/http/src/client.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { HttpHandler } from './backend';\nimport { HttpHeaders } from './headers';\nimport { HttpParams } from './params';\nimport { HttpRequest } from './request';\nimport { HttpEvent, HttpResponse } from './response';\nexport declare type HttpObserve = 'body' | 'events' | 'response';\n/**\n * Perform HTTP requests.\n *\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies according to which\n * signature is called (mainly the values of `observe` and `responseType`).\n *\n *\n */\nexport declare class HttpClient {\n    private handler;\n    constructor(handler: HttpHandler);\n    /**\n     * Send the given `HttpRequest` and return a stream of `HttpEvents`.\n     */\n    request<R>(req: HttpRequest<any>): Observable<HttpEvent<R>>;\n    /**\n     * Construct a request which interprets the body as an `ArrayBuffer` and returns it.\n     *\n     * @return an `Observable` of the body as an `ArrayBuffer`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Construct a request which interprets the body as a `Blob` and returns it.\n     *\n     * @return an `Observable` of the body as a `Blob`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Construct a request which interprets the body as text and returns it.\n     *\n     * @return an `Observable` of the body as a `string`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Construct a request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        observe: 'events';\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Construct a request which interprets the body as an `Blob` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Construct a request which interprets the body as text and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Construct a request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Construct a request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `R`.\n     */\n    request<R>(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<R>>;\n    /**\n     * Construct a request which interprets the body as an `ArrayBuffer` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Construct a request which interprets the body as a `Blob` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Construct a request which interprets the body as text and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Construct a request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Construct a request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `R`.\n     */\n    request<R>(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<R>>;\n    /**\n     * Construct a request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n     */\n    request(method: string, url: string, options?: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        responseType?: 'json';\n        reportProgress?: boolean;\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Construct a request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `R`.\n     */\n    request<R>(method: string, url: string, options?: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        responseType?: 'json';\n        reportProgress?: boolean;\n        withCredentials?: boolean;\n    }): Observable<R>;\n    /**\n     * Construct a request in a manner where response type and requested `Observable` are not known\n     * statically.\n     *\n     * @return an `Observable` of whatever was requested, typed to `any`.\n     */\n    request(method: string, url: string, options?: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        observe?: HttpObserve;\n        reportProgress?: boolean;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n    }): Observable<any>;\n    /**\n     * Construct a DELETE request which interprets the body as an `ArrayBuffer` and returns it.\n     *\n     * @return an `Observable` of the body as an `ArrayBuffer`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Construct a DELETE request which interprets the body as a `Blob` and returns it.\n     *\n     * @return an `Observable` of the body as a `Blob`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Construct a DELETE request which interprets the body as text and returns it.\n     *\n     * @return an `Observable` of the body as a `string`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Construct a DELETE request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Construct a DELETE request which interprets the body as a `Blob` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Construct a DELETE request which interprets the body as text and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Construct a DELETE request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Construct a DELETE request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n     */\n    delete<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Construct a DELETE request which interprets the body as an `ArrayBuffer` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Construct a DELETE request which interprets the body as a `Blob` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Construct a DELETE request which interprets the body as text and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Construct a DELETE request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Construct a DELETE request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n     */\n    delete<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Construct a DELETE request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as an `Object`.\n     */\n    delete(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Construct a DELETE request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as type `T`.\n     */\n    delete<T>(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Construct a GET request which interprets the body as an `ArrayBuffer` and returns it.\n     *\n     * @return an `Observable` of the body as an `ArrayBuffer`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Construct a GET request which interprets the body as a `Blob` and returns it.\n     *\n     * @return an `Observable` of the body as a `Blob`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Construct a GET request which interprets the body as text and returns it.\n     *\n     * @return an `Observable` of the body as a `string`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Construct a GET request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Construct a GET request which interprets the body as a `Blob` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Construct a GET request which interprets the body as text and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Construct a GET request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Construct a GET request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n     */\n    get<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Construct a GET request which interprets the body as an `ArrayBuffer` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Construct a GET request which interprets the body as a `Blob` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Construct a GET request which interprets the body as text and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Construct a GET request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Construct a GET request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n     */\n    get<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Construct a GET request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as an `Object`.\n     */\n    get(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Construct a GET request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as type `T`.\n     */\n    get<T>(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Construct a HEAD request which interprets the body as an `ArrayBuffer` and returns it.\n     *\n     * @return an `Observable` of the body as an `ArrayBuffer`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Construct a HEAD request which interprets the body as text and returns it.\n     *\n     * @return an `Observable` of the body as a `string`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Construct a HEAD request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Construct a HEAD request which interprets the body as a `Blob` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Construct a HEAD request which interprets the body as text and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Construct a HEAD request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Construct a HEAD request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n     */\n    head<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Construct a HEAD request which interprets the body as an `ArrayBuffer` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Construct a HEAD request which interprets the body as a `Blob` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Construct a HEAD request which interprets the body as text and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Construct a HEAD request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Construct a HEAD request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n     */\n    head<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Construct a HEAD request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as an `Object`.\n     */\n    head(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Construct a HEAD request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as type `T`.\n     */\n    head<T>(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Construct a JSONP request for the given URL and name of the callback parameter.\n     *\n     * @return an `Observable` of the response object as an `Object`\n     */\n    jsonp(url: string, callbackParam: string): Observable<Object>;\n    /**\n     * Construct a JSONP request for the given URL and name of the callback parameter.\n     *\n     * @return an `Observable` of the response object as type `T`.\n     */\n    jsonp<T>(url: string, callbackParam: string): Observable<T>;\n    /**\n     * Make an OPTIONS request which interprets the body as an `ArrayBuffer` and returns it.\n     *\n     * @return an `Observable` of the body as an `ArrayBuffer`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Construct an OPTIONS request which interprets the body as a `Blob` and returns it.\n     *\n     * @return an `Observable` of the body as a `Blob`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Construct an OPTIONS request which interprets the body as text and returns it.\n     *\n     * @return an `Observable` of the body as a `string`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Construct an OPTIONS request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as a `Blob` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as text and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n     */\n    options<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as an `ArrayBuffer` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as a `Blob` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as text and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n     */\n    options<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as an `Object`.\n     */\n    options(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Construct an OPTIONS request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as type `T`.\n     */\n    options<T>(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Construct a PATCH request which interprets the body as an `ArrayBuffer` and returns it.\n     *\n     * @return an `Observable` of the body as an `ArrayBuffer`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Construct a PATCH request which interprets the body as a `Blob` and returns it.\n     *\n     * @return an `Observable` of the body as a `Blob`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Construct a PATCH request which interprets the body as text and returns it.\n     *\n     * @return an `Observable` of the body as a `string`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Construct a PATCH request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Construct a PATCH request which interprets the body as a `Blob` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Construct a PATCH request which interprets the body as text and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Construct a PATCH request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Construct a PATCH request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n     */\n    patch<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Construct a PATCH request which interprets the body as an `ArrayBuffer` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Construct a PATCH request which interprets the body as a `Blob` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Construct a PATCH request which interprets the body as text and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Construct a PATCH request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Construct a PATCH request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n     */\n    patch<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Construct a PATCH request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as an `Object`.\n     */\n    patch(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Construct a PATCH request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as type `T`.\n     */\n    patch<T>(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Construct a POST request which interprets the body as an `ArrayBuffer` and returns it.\n     *\n     * @return an `Observable` of the body as an `ArrayBuffer`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Construct a POST request which interprets the body as a `Blob` and returns it.\n     *\n     * @return an `Observable` of the body as a `Blob`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Construct a POST request which interprets the body as text and returns it.\n     *\n     * @return an `Observable` of the body as a `string`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Construct a POST request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Construct a POST request which interprets the body as a `Blob` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Construct a POST request which interprets the body as text and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Construct a POST request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Construct a POST request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n     */\n    post<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Construct a POST request which interprets the body as an `ArrayBuffer` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Construct a POST request which interprets the body as a `Blob` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Construct a POST request which interprets the body as text and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Construct a POST request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Construct a POST request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n     */\n    post<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Construct a POST request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as an `Object`.\n     */\n    post(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Construct a POST request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as type `T`.\n     */\n    post<T>(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Construct a PUT request which interprets the body as an `ArrayBuffer` and returns it.\n     *\n     * @return an `Observable` of the body as an `ArrayBuffer`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Construct a PUT request which interprets the body as a `Blob` and returns it.\n     *\n     * @return an `Observable` of the body as a `Blob`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Construct a PUT request which interprets the body as text and returns it.\n     *\n     * @return an `Observable` of the body as a `string`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Construct a PUT request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Construct a PUT request which interprets the body as a `Blob` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Construct a PUT request which interprets the body as text and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Construct a PUT request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Construct a PUT request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n     */\n    put<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Construct a PUT request which interprets the body as an `ArrayBuffer` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Construct a PUT request which interprets the body as a `Blob` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Construct a PUT request which interprets the body as text and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Construct a PUT request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Construct a PUT request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n     */\n    put<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Construct a PUT request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as an `Object`.\n     */\n    put(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Construct a PUT request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as type `T`.\n     */\n    put<T>(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/pipes/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * This module provides a set of common Pipes.\n */\nimport { AsyncPipe } from './async_pipe';\nimport { LowerCasePipe, TitleCasePipe, UpperCasePipe } from './case_conversion_pipes';\nimport { DatePipe } from './date_pipe';\nimport { I18nPluralPipe } from './i18n_plural_pipe';\nimport { I18nSelectPipe } from './i18n_select_pipe';\nimport { JsonPipe } from './json_pipe';\nimport { KeyValue, KeyValuePipe } from './keyvalue_pipe';\nimport { CurrencyPipe, DecimalPipe, PercentPipe } from './number_pipe';\nimport { SlicePipe } from './slice_pipe';\nexport { AsyncPipe, CurrencyPipe, DatePipe, DecimalPipe, KeyValue, KeyValuePipe, I18nPluralPipe, I18nSelectPipe, JsonPipe, LowerCasePipe, PercentPipe, SlicePipe, TitleCasePipe, UpperCasePipe, };\n/**\n * A collection of Angular pipes that are likely to be used in each and every application.\n */\nexport declare const COMMON_PIPES: (typeof AsyncPipe | typeof SlicePipe | typeof DecimalPipe | typeof PercentPipe | typeof CurrencyPipe | typeof DatePipe | typeof I18nPluralPipe | typeof I18nSelectPipe | typeof KeyValuePipe)[];\n"
  },
  {
    "path": "node_modules/@angular/core/src/i18n/tokens.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * @experimental i18n support is experimental.\n */\nexport declare const LOCALE_ID: InjectionToken<string>;\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * @experimental i18n support is experimental.\n */\nexport declare const TRANSLATIONS: InjectionToken<string>;\n/**\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * @experimental i18n support is experimental.\n */\nexport declare const TRANSLATIONS_FORMAT: InjectionToken<string>;\n/**\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\n * that the compiler should use in case of missing translations:\n * - Error: throw if you have missing translations.\n * - Warning (default): show a warning in the console and/or shell.\n * - Ignore: do nothing.\n *\n * See the [i18n guide](guide/i18n#missing-translation) for more information.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * import { MissingTranslationStrategy } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   missingTranslation: MissingTranslationStrategy.Error\n * });\n * ```\n *\n * @experimental i18n support is experimental.\n */\nexport declare enum MissingTranslationStrategy {\n    Error = 0,\n    Warning = 1,\n    Ignore = 2\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/metadata.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { ANALYZE_FOR_ENTRY_COMPONENTS, Attribute, ContentChild, ContentChildDecorator, ContentChildren, ContentChildrenDecorator, Query, ViewChild, ViewChildDecorator, ViewChildren, ViewChildrenDecorator } from './metadata/di';\nexport { Component, ComponentDecorator, Directive, DirectiveDecorator, HostBinding, HostListener, Input, Output, Pipe } from './metadata/directives';\nexport { AfterContentChecked, AfterContentInit, AfterViewChecked, AfterViewInit, DoCheck, OnChanges, OnDestroy, OnInit } from './metadata/lifecycle_hooks';\nexport { CUSTOM_ELEMENTS_SCHEMA, DoBootstrap, ModuleWithProviders, NO_ERRORS_SCHEMA, NgModule, SchemaMetadata } from './metadata/ng_module';\nexport { ViewEncapsulation } from './metadata/view';\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/render3/util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as o from '../output/output_ast';\nimport { OutputContext } from '../util';\n/**\n * Convert an object map with `Expression` values into a `LiteralMapExpr`.\n */\nexport declare function mapToMapExpression(map: {\n    [key: string]: o.Expression;\n}): o.LiteralMapExpr;\n/**\n * Convert metadata into an `Expression` in the given `OutputContext`.\n *\n * This operation will handle arrays, references to symbols, or literal `null` or `undefined`.\n */\nexport declare function convertMetaToOutput(meta: any, ctx: OutputContext): o.Expression;\nexport declare function typeWithParameters(type: o.Expression, numParams: number): o.ExpressionType;\nexport interface R3Reference {\n    value: o.Expression;\n    type: o.Expression;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/aot/static_symbol.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A token representing the a reference to a static type.\n *\n * This token is unique for a filePath and name and can be used as a hash table key.\n */\nexport declare class StaticSymbol {\n    filePath: string;\n    name: string;\n    members: string[];\n    constructor(filePath: string, name: string, members: string[]);\n    assertNoMembers(): void;\n}\n/**\n * A cache of static symbol used by the StaticReflector to return the same symbol for the\n * same symbol values.\n */\nexport declare class StaticSymbolCache {\n    private cache;\n    get(declarationFile: string, name: string, members?: string[]): StaticSymbol;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/render3/r3_factory.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileTypeMetadata } from '../compile_metadata';\nimport { CompileReflector } from '../compile_reflector';\nimport * as o from '../output/output_ast';\nimport { OutputContext } from '../util';\n/**\n * Metadata required by the factory generator to generate a `factory` function for a type.\n */\nexport interface R3ConstructorFactoryMetadata {\n    /**\n     * String name of the type being generated (used to name the factory function).\n     */\n    name: string;\n    /**\n     * An expression representing the function (or constructor) which will instantiate the requested\n     * type.\n     *\n     * This could be a reference to a constructor type, or to a user-defined factory function. The\n     * `useNew` property determines whether it will be called as a constructor or not.\n     */\n    type: o.Expression;\n    /**\n     * Regardless of whether `fnOrClass` is a constructor function or a user-defined factory, it\n     * may have 0 or more parameters, which will be injected according to the `R3DependencyMetadata`\n     * for those parameters. If this is `null`, then the type's constructor is nonexistent and will\n     * be inherited from `fnOrClass` which is interpreted as the current type.\n     */\n    deps: R3DependencyMetadata[] | null;\n    /**\n     * An expression for the function which will be used to inject dependencies. The API of this\n     * function could be different, and other options control how it will be invoked.\n     */\n    injectFn: o.ExternalReference;\n}\nexport declare enum R3FactoryDelegateType {\n    Class = 0,\n    Function = 1,\n    Factory = 2\n}\nexport interface R3DelegatedFactoryMetadata extends R3ConstructorFactoryMetadata {\n    delegate: o.Expression;\n    delegateType: R3FactoryDelegateType.Factory;\n}\nexport interface R3DelegatedFnOrClassMetadata extends R3ConstructorFactoryMetadata {\n    delegate: o.Expression;\n    delegateType: R3FactoryDelegateType.Class | R3FactoryDelegateType.Function;\n    delegateDeps: R3DependencyMetadata[];\n}\nexport interface R3ExpressionFactoryMetadata extends R3ConstructorFactoryMetadata {\n    expression: o.Expression;\n}\nexport declare type R3FactoryMetadata = R3ConstructorFactoryMetadata | R3DelegatedFactoryMetadata | R3DelegatedFnOrClassMetadata | R3ExpressionFactoryMetadata;\n/**\n * Resolved type of a dependency.\n *\n * Occasionally, dependencies will have special significance which is known statically. In that\n * case the `R3ResolvedDependencyType` informs the factory generator that a particular dependency\n * should be generated specially (usually by calling a special injection function instead of the\n * standard one).\n */\nexport declare enum R3ResolvedDependencyType {\n    /**\n     * A normal token dependency.\n     */\n    Token = 0,\n    /**\n     * The dependency is for an attribute.\n     *\n     * The token expression is a string representing the attribute name.\n     */\n    Attribute = 1,\n    /**\n     * The dependency is for the `Injector` type itself.\n     */\n    Injector = 2\n}\n/**\n * Metadata representing a single dependency to be injected into a constructor or function call.\n */\nexport interface R3DependencyMetadata {\n    /**\n     * An expression representing the token or value to be injected.\n     */\n    token: o.Expression;\n    /**\n     * An enum indicating whether this dependency has special meaning to Angular and needs to be\n     * injected specially.\n     */\n    resolved: R3ResolvedDependencyType;\n    /**\n     * Whether the dependency has an @Host qualifier.\n     */\n    host: boolean;\n    /**\n     * Whether the dependency has an @Optional qualifier.\n     */\n    optional: boolean;\n    /**\n     * Whether the dependency has an @Self qualifier.\n     */\n    self: boolean;\n    /**\n     * Whether the dependency has an @SkipSelf qualifier.\n     */\n    skipSelf: boolean;\n}\n/**\n * Construct a factory function expression for the given `R3FactoryMetadata`.\n */\nexport declare function compileFactoryFunction(meta: R3FactoryMetadata): {\n    factory: o.Expression;\n    statements: o.Statement[];\n};\n/**\n * A helper function useful for extracting `R3DependencyMetadata` from a Render2\n * `CompileTypeMetadata` instance.\n */\nexport declare function dependenciesFromGlobalMetadata(type: CompileTypeMetadata, outputCtx: OutputContext, reflector: CompileReflector): R3DependencyMetadata[];\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/ast_path.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A path is an ordered set of elements. Typically a path is to  a\n * particular offset in a source file. The head of the list is the top\n * most node. The tail is the node that contains the offset directly.\n *\n * For example, the expression `a + b + c` might have an ast that looks\n * like:\n *     +\n *    / \\\n *   a   +\n *      / \\\n *     b   c\n *\n * The path to the node at offset 9 would be `['+' at 1-10, '+' at 7-10,\n * 'c' at 9-10]` and the path the node at offset 1 would be\n * `['+' at 1-10, 'a' at 1-2]`.\n */\nexport declare class AstPath<T> {\n    private path;\n    position: number;\n    constructor(path: T[], position?: number);\n    readonly empty: boolean;\n    readonly head: T | undefined;\n    readonly tail: T | undefined;\n    parentOf(node: T | undefined): T | undefined;\n    childOf(node: T): T | undefined;\n    first<N extends T>(ctor: {\n        new (...args: any[]): N;\n    }): N | undefined;\n    push(node: T): void;\n    pop(): T;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/testing.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the core/testing package.\n */\nexport * from './async';\nexport * from './component_fixture';\nexport * from './fake_async';\nexport { TestBed, getTestBed, inject, InjectSetupWrapper, withModule } from './test_bed';\nexport * from './test_bed_common';\nexport * from './before_each';\nexport * from './metadata_override';\nexport { MetadataOverrider as ɵMetadataOverrider } from './metadata_overrider';\nexport * from './private_export_testing';\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/aot/compiler_factory.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { UrlResolver } from '../url_resolver';\nimport { AotCompiler } from './compiler';\nimport { AotCompilerHost } from './compiler_host';\nimport { AotCompilerOptions } from './compiler_options';\nimport { StaticReflector } from './static_reflector';\nexport declare function createAotUrlResolver(host: {\n    resourceNameToFileName(resourceName: string, containingFileName: string): string | null;\n}): UrlResolver;\n/**\n * Creates a new AotCompiler based on options and a host.\n */\nexport declare function createAotCompiler(compilerHost: AotCompilerHost, options: AotCompilerOptions, errorCollector?: (error: any, type?: any) => void): {\n    compiler: AotCompiler;\n    reflector: StaticReflector;\n};\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/schema/dom_element_schema_registry.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SchemaMetadata, SecurityContext } from '../core';\nimport { ElementSchemaRegistry } from './element_schema_registry';\nexport declare class DomElementSchemaRegistry extends ElementSchemaRegistry {\n    private _schema;\n    constructor();\n    hasProperty(tagName: string, propName: string, schemaMetas: SchemaMetadata[]): boolean;\n    hasElement(tagName: string, schemaMetas: SchemaMetadata[]): boolean;\n    /**\n     * securityContext returns the security context for the given property on the given DOM tag.\n     *\n     * Tag and property name are statically known and cannot change at runtime, i.e. it is not\n     * possible to bind a value into a changing attribute or tag name.\n     *\n     * The filtering is white list based. All attributes in the schema above are assumed to have the\n     * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known\n     * attack vectors are assigned their appropriate context.\n     */\n    securityContext(tagName: string, propName: string, isAttribute: boolean): SecurityContext;\n    getMappedPropName(propName: string): string;\n    getDefaultComponentElementName(): string;\n    validateProperty(name: string): {\n        error: boolean;\n        msg?: string;\n    };\n    validateAttribute(name: string): {\n        error: boolean;\n        msg?: string;\n    };\n    allKnownElementNames(): string[];\n    normalizeAnimationStyleProperty(propName: string): string;\n    normalizeAnimationStyleValue(camelCaseProp: string, userProvidedProp: string, val: string | number): {\n        error: string;\n        value: string;\n    };\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/summary_resolver.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileTypeSummary } from './compile_metadata';\nimport { Type } from './core';\nexport interface Summary<T> {\n    symbol: T;\n    metadata: any;\n    type?: CompileTypeSummary;\n}\nexport declare abstract class SummaryResolver<T> {\n    abstract isLibraryFile(fileName: string): boolean;\n    abstract toSummaryFileName(fileName: string, referringSrcFileName: string): string;\n    abstract fromSummaryFileName(fileName: string, referringLibFileName: string): string;\n    abstract resolveSummary(reference: T): Summary<T> | null;\n    abstract getSymbolsOf(filePath: string): T[] | null;\n    abstract getImportAs(reference: T): T;\n    abstract getKnownModuleName(fileName: string): string | null;\n    abstract addSummary(summary: Summary<T>): void;\n}\nexport declare class JitSummaryResolver implements SummaryResolver<Type> {\n    private _summaries;\n    isLibraryFile(): boolean;\n    toSummaryFileName(fileName: string): string;\n    fromSummaryFileName(fileName: string): string;\n    resolveSummary(reference: Type): Summary<Type> | null;\n    getSymbolsOf(): Type[];\n    getImportAs(reference: Type): Type;\n    getKnownModuleName(fileName: string): null;\n    addSummary(summary: Summary<Type>): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/schema/element_schema_registry.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SchemaMetadata, SecurityContext } from '../core';\nexport declare abstract class ElementSchemaRegistry {\n    abstract hasProperty(tagName: string, propName: string, schemaMetas: SchemaMetadata[]): boolean;\n    abstract hasElement(tagName: string, schemaMetas: SchemaMetadata[]): boolean;\n    abstract securityContext(elementName: string, propName: string, isAttribute: boolean): SecurityContext;\n    abstract allKnownElementNames(): string[];\n    abstract getMappedPropName(propName: string): string;\n    abstract getDefaultComponentElementName(): string;\n    abstract validateProperty(name: string): {\n        error: boolean;\n        msg?: string;\n    };\n    abstract validateAttribute(name: string): {\n        error: boolean;\n        msg?: string;\n    };\n    abstract normalizeAnimationStyleProperty(propName: string): string;\n    abstract normalizeAnimationStyleValue(camelCaseProp: string, userProvidedProp: string, val: string | number): {\n        error: string;\n        value: string;\n    };\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/parse_util.d.ts",
    "content": "import { CompileIdentifierMetadata } from './compile_metadata';\nexport declare class ParseLocation {\n    file: ParseSourceFile;\n    offset: number;\n    line: number;\n    col: number;\n    constructor(file: ParseSourceFile, offset: number, line: number, col: number);\n    toString(): string;\n    moveBy(delta: number): ParseLocation;\n    getContext(maxChars: number, maxLines: number): {\n        before: string;\n        after: string;\n    } | null;\n}\nexport declare class ParseSourceFile {\n    content: string;\n    url: string;\n    constructor(content: string, url: string);\n}\nexport declare class ParseSourceSpan {\n    start: ParseLocation;\n    end: ParseLocation;\n    details: string | null;\n    constructor(start: ParseLocation, end: ParseLocation, details?: string | null);\n    toString(): string;\n}\nexport declare enum ParseErrorLevel {\n    WARNING = 0,\n    ERROR = 1\n}\nexport declare class ParseError {\n    span: ParseSourceSpan;\n    msg: string;\n    level: ParseErrorLevel;\n    constructor(span: ParseSourceSpan, msg: string, level?: ParseErrorLevel);\n    contextualMessage(): string;\n    toString(): string;\n}\nexport declare function typeSourceSpan(kind: string, type: CompileIdentifierMetadata): ParseSourceSpan;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/constant_pool.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as o from './output/output_ast';\nimport { OutputContext } from './util';\nexport declare const enum DefinitionKind {\n    Injector = 0,\n    Directive = 1,\n    Component = 2,\n    Pipe = 3\n}\n/**\n * A constant pool allows a code emitter to share constant in an output context.\n *\n * The constant pool also supports sharing access to ivy definitions references.\n */\nexport declare class ConstantPool {\n    statements: o.Statement[];\n    private translations;\n    private literals;\n    private literalFactories;\n    private injectorDefinitions;\n    private directiveDefinitions;\n    private componentDefinitions;\n    private pipeDefinitions;\n    private nextNameIndex;\n    getConstLiteral(literal: o.Expression, forceShared?: boolean): o.Expression;\n    getTranslation(message: string, meta: {\n        description?: string;\n        meaning?: string;\n    }, suffix: string): o.Expression;\n    getDefinition(type: any, kind: DefinitionKind, ctx: OutputContext, forceShared?: boolean): o.Expression;\n    getLiteralFactory(literal: o.LiteralArrayExpr | o.LiteralMapExpr): {\n        literalFactory: o.Expression;\n        literalFactoryArguments: o.Expression[];\n    };\n    private _getLiteralFactory;\n    /**\n     * Produce a unique name.\n     *\n     * The name might be unique among different prefixes if any of the prefixes end in\n     * a digit so the prefix should be a constant string (not based on user input) and\n     * must not end in a digit.\n     */\n    uniqueName(prefix: string): string;\n    private definitionsOf;\n    propertyNameOf(kind: DefinitionKind): string;\n    private freshName;\n    private freshTranslationName;\n    private keyOf;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/ng_module_compiler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileNgModuleMetadata, CompileProviderMetadata } from './compile_metadata';\nimport { CompileReflector } from './compile_reflector';\nimport { OutputContext } from './util';\nexport declare class NgModuleCompileResult {\n    ngModuleFactoryVar: string;\n    constructor(ngModuleFactoryVar: string);\n}\nexport declare class NgModuleCompiler {\n    private reflector;\n    constructor(reflector: CompileReflector);\n    compile(ctx: OutputContext, ngModuleMeta: CompileNgModuleMetadata, extraProviders: CompileProviderMetadata[]): NgModuleCompileResult;\n    createStub(ctx: OutputContext, ngModuleReference: any): void;\n    private _createNgModuleFactory;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/ml_parser/ast.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AstPath } from '../ast_path';\nimport { ParseSourceSpan } from '../parse_util';\nexport interface Node {\n    sourceSpan: ParseSourceSpan;\n    visit(visitor: Visitor, context: any): any;\n}\nexport declare class Text implements Node {\n    value: string;\n    sourceSpan: ParseSourceSpan;\n    constructor(value: string, sourceSpan: ParseSourceSpan);\n    visit(visitor: Visitor, context: any): any;\n}\nexport declare class Expansion implements Node {\n    switchValue: string;\n    type: string;\n    cases: ExpansionCase[];\n    sourceSpan: ParseSourceSpan;\n    switchValueSourceSpan: ParseSourceSpan;\n    constructor(switchValue: string, type: string, cases: ExpansionCase[], sourceSpan: ParseSourceSpan, switchValueSourceSpan: ParseSourceSpan);\n    visit(visitor: Visitor, context: any): any;\n}\nexport declare class ExpansionCase implements Node {\n    value: string;\n    expression: Node[];\n    sourceSpan: ParseSourceSpan;\n    valueSourceSpan: ParseSourceSpan;\n    expSourceSpan: ParseSourceSpan;\n    constructor(value: string, expression: Node[], sourceSpan: ParseSourceSpan, valueSourceSpan: ParseSourceSpan, expSourceSpan: ParseSourceSpan);\n    visit(visitor: Visitor, context: any): any;\n}\nexport declare class Attribute implements Node {\n    name: string;\n    value: string;\n    sourceSpan: ParseSourceSpan;\n    valueSpan?: ParseSourceSpan | undefined;\n    constructor(name: string, value: string, sourceSpan: ParseSourceSpan, valueSpan?: ParseSourceSpan | undefined);\n    visit(visitor: Visitor, context: any): any;\n}\nexport declare class Element implements Node {\n    name: string;\n    attrs: Attribute[];\n    children: Node[];\n    sourceSpan: ParseSourceSpan;\n    startSourceSpan: ParseSourceSpan | null;\n    endSourceSpan: ParseSourceSpan | null;\n    constructor(name: string, attrs: Attribute[], children: Node[], sourceSpan: ParseSourceSpan, startSourceSpan?: ParseSourceSpan | null, endSourceSpan?: ParseSourceSpan | null);\n    visit(visitor: Visitor, context: any): any;\n}\nexport declare class Comment implements Node {\n    value: string | null;\n    sourceSpan: ParseSourceSpan;\n    constructor(value: string | null, sourceSpan: ParseSourceSpan);\n    visit(visitor: Visitor, context: any): any;\n}\nexport interface Visitor {\n    visit?(node: Node, context: any): any;\n    visitElement(element: Element, context: any): any;\n    visitAttribute(attribute: Attribute, context: any): any;\n    visitText(text: Text, context: any): any;\n    visitComment(comment: Comment, context: any): any;\n    visitExpansion(expansion: Expansion, context: any): any;\n    visitExpansionCase(expansionCase: ExpansionCase, context: any): any;\n}\nexport declare function visitAll(visitor: Visitor, nodes: Node[], context?: any): any[];\nexport declare class RecursiveVisitor implements Visitor {\n    constructor();\n    visitElement(ast: Element, context: any): any;\n    visitAttribute(ast: Attribute, context: any): any;\n    visitText(ast: Text, context: any): any;\n    visitComment(ast: Comment, context: any): any;\n    visitExpansion(ast: Expansion, context: any): any;\n    visitExpansionCase(ast: ExpansionCase, context: any): any;\n    private visitChildren;\n}\nexport declare type HtmlAstPath = AstPath<Node>;\nexport declare function findNode(nodes: Node[], position: number): HtmlAstPath;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/aot/compiler_options.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MissingTranslationStrategy } from '../core';\nexport interface AotCompilerOptions {\n    locale?: string;\n    i18nFormat?: string;\n    translations?: string;\n    missingTranslation?: MissingTranslationStrategy;\n    enableSummariesForJit?: boolean;\n    preserveWhitespaces?: boolean;\n    fullTemplateTypeCheck?: boolean;\n    allowEmptyCodegenFiles?: boolean;\n    strictInjectionParameters?: boolean;\n    enableIvy?: boolean | 'ngtsc' | 'tsc';\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/reflective_key.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A unique object used for retrieving items from the {@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n * @deprecated No replacement\n */\nexport declare class ReflectiveKey {\n    token: Object;\n    id: number;\n    readonly displayName: string;\n    /**\n     * Private\n     */\n    constructor(token: Object, id: number);\n    /**\n     * Retrieves a `Key` for a token.\n     */\n    static get(token: Object): ReflectiveKey;\n    /**\n     * @returns the number of keys registered in the system.\n     */\n    static readonly numberOfKeys: number;\n}\nexport declare class KeyRegistry {\n    private _allKeys;\n    get(token: Object): ReflectiveKey;\n    readonly numberOfKeys: number;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/version.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\nimport { Version } from './util';\nexport declare const VERSION: Version;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/aot/static_reflector.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileReflector } from '../compile_reflector';\nimport * as o from '../output/output_ast';\nimport { SummaryResolver } from '../summary_resolver';\nimport { StaticSymbol } from './static_symbol';\nimport { StaticSymbolResolver } from './static_symbol_resolver';\n/**\n * A static reflector implements enough of the Reflector API that is necessary to compile\n * templates statically.\n */\nexport declare class StaticReflector implements CompileReflector {\n    private summaryResolver;\n    private symbolResolver;\n    private errorRecorder?;\n    private annotationCache;\n    private shallowAnnotationCache;\n    private propertyCache;\n    private parameterCache;\n    private methodCache;\n    private staticCache;\n    private conversionMap;\n    private resolvedExternalReferences;\n    private injectionToken;\n    private opaqueToken;\n    ROUTES: StaticSymbol;\n    private ANALYZE_FOR_ENTRY_COMPONENTS;\n    private annotationForParentClassWithSummaryKind;\n    constructor(summaryResolver: SummaryResolver<StaticSymbol>, symbolResolver: StaticSymbolResolver, knownMetadataClasses?: {\n        name: string;\n        filePath: string;\n        ctor: any;\n    }[], knownMetadataFunctions?: {\n        name: string;\n        filePath: string;\n        fn: any;\n    }[], errorRecorder?: ((error: any, fileName?: string | undefined) => void) | undefined);\n    componentModuleUrl(typeOrFunc: StaticSymbol): string;\n    resolveExternalReference(ref: o.ExternalReference, containingFile?: string): StaticSymbol;\n    findDeclaration(moduleUrl: string, name: string, containingFile?: string): StaticSymbol;\n    tryFindDeclaration(moduleUrl: string, name: string, containingFile?: string): StaticSymbol;\n    findSymbolDeclaration(symbol: StaticSymbol): StaticSymbol;\n    tryAnnotations(type: StaticSymbol): any[];\n    annotations(type: StaticSymbol): any[];\n    shallowAnnotations(type: StaticSymbol): any[];\n    private _annotations;\n    propMetadata(type: StaticSymbol): {\n        [key: string]: any[];\n    };\n    parameters(type: StaticSymbol): any[];\n    private _methodNames;\n    private _staticMembers;\n    private findParentType;\n    hasLifecycleHook(type: any, lcProperty: string): boolean;\n    guards(type: any): {\n        [key: string]: StaticSymbol;\n    };\n    private _registerDecoratorOrConstructor;\n    private _registerFunction;\n    private initializeConversionMap;\n    /**\n     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n     * All types passed to the StaticResolver should be pseudo-types returned by this method.\n     *\n     * @param declarationFile the absolute path of the file where the symbol is declared\n     * @param name the name of the type.\n     */\n    getStaticSymbol(declarationFile: string, name: string, members?: string[]): StaticSymbol;\n    /**\n     * Simplify but discard any errors\n     */\n    private trySimplify;\n    private getTypeMetadata;\n    private reportError;\n    private error;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/http/src/headers.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Immutable set of Http headers, with lazy parsing.\n *\n */\nexport declare class HttpHeaders {\n    /**\n     * Internal map of lowercase header names to values.\n     */\n    private headers;\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     */\n    private normalizedNames;\n    /**\n     * Complete the lazy initialization of this object (needed before reading).\n     */\n    private lazyInit;\n    /**\n     * Queued updates to be materialized the next initialization.\n     */\n    private lazyUpdate;\n    constructor(headers?: string | {\n        [name: string]: string | string[];\n    });\n    /**\n     * Checks for existence of header by given name.\n     */\n    has(name: string): boolean;\n    /**\n     * Returns first header that matches given name.\n     */\n    get(name: string): string | null;\n    /**\n     * Returns the names of the headers\n     */\n    keys(): string[];\n    /**\n     * Returns list of header values for a given name.\n     */\n    getAll(name: string): string[] | null;\n    append(name: string, value: string | string[]): HttpHeaders;\n    set(name: string, value: string | string[]): HttpHeaders;\n    delete(name: string, value?: string | string[]): HttpHeaders;\n    private maybeSetNormalizedName;\n    private init;\n    private copyFrom;\n    private clone;\n    private applyUpdate;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/ml_parser/tags.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare enum TagContentType {\n    RAW_TEXT = 0,\n    ESCAPABLE_RAW_TEXT = 1,\n    PARSABLE_DATA = 2\n}\nexport interface TagDefinition {\n    closedByParent: boolean;\n    requiredParents: {\n        [key: string]: boolean;\n    };\n    parentToAdd: string;\n    implicitNamespacePrefix: string | null;\n    contentType: TagContentType;\n    isVoid: boolean;\n    ignoreFirstLf: boolean;\n    canSelfClose: boolean;\n    requireExtraParent(currentParent: string): boolean;\n    isClosedByChild(name: string): boolean;\n}\nexport declare function splitNsName(elementName: string): [string | null, string];\nexport declare function isNgContainer(tagName: string): boolean;\nexport declare function isNgContent(tagName: string): boolean;\nexport declare function isNgTemplate(tagName: string): boolean;\nexport declare function getNsPrefix(fullName: string): string;\nexport declare function getNsPrefix(fullName: null): null;\nexport declare function mergeNsAndName(prefix: string, localName: string): string;\nexport declare const NAMED_ENTITIES: {\n    [k: string]: string;\n};\nexport declare const NGSP_UNICODE = \"\\uE500\";\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/render3/r3_module_compiler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileShallowModuleMetadata } from '../compile_metadata';\nimport { InjectableCompiler } from '../injectable_compiler';\nimport * as o from '../output/output_ast';\nimport { OutputContext } from '../util';\nimport { R3DependencyMetadata } from './r3_factory';\nimport { R3Reference } from './util';\nexport interface R3NgModuleDef {\n    expression: o.Expression;\n    type: o.Type;\n    additionalStatements: o.Statement[];\n}\n/**\n * Metadata required by the module compiler to generate a `ngModuleDef` for a type.\n */\nexport interface R3NgModuleMetadata {\n    /**\n     * An expression representing the module type being compiled.\n     */\n    type: o.Expression;\n    /**\n     * An array of expressions representing the bootstrap components specified by the module.\n     */\n    bootstrap: R3Reference[];\n    /**\n     * An array of expressions representing the directives and pipes declared by the module.\n     */\n    declarations: R3Reference[];\n    /**\n     * An array of expressions representing the imports of the module.\n     */\n    imports: R3Reference[];\n    /**\n     * An array of expressions representing the exports of the module.\n     */\n    exports: R3Reference[];\n    /**\n     * Whether to emit the selector scope values (declarations, imports, exports) inline into the\n     * module definition, or to generate additional statements which patch them on. Inline emission\n     * does not allow components to be tree-shaken, but is useful for JIT mode.\n     */\n    emitInline: boolean;\n}\n/**\n * Construct an `R3NgModuleDef` for the given `R3NgModuleMetadata`.\n */\nexport declare function compileNgModule(meta: R3NgModuleMetadata): R3NgModuleDef;\nexport interface R3InjectorDef {\n    expression: o.Expression;\n    type: o.Type;\n    statements: o.Statement[];\n}\nexport interface R3InjectorMetadata {\n    name: string;\n    type: o.Expression;\n    deps: R3DependencyMetadata[] | null;\n    providers: o.Expression;\n    imports: o.Expression;\n}\nexport declare function compileInjector(meta: R3InjectorMetadata): R3InjectorDef;\nexport declare function compileNgModuleFromRender2(ctx: OutputContext, ngModule: CompileShallowModuleMetadata, injectableCompiler: InjectableCompiler): void;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/url_resolver.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Create a {@link UrlResolver} with no package prefix.\n */\nexport declare function createUrlResolverWithoutPackagePrefix(): UrlResolver;\nexport declare function createOfflineCompileUrlResolver(): UrlResolver;\n/**\n * Used by the {@link Compiler} when resolving HTML and CSS template URLs.\n *\n * This class can be overridden by the application developer to create custom behavior.\n *\n * See {@link Compiler}\n *\n * ## Example\n *\n * {@example compiler/ts/url_resolver/url_resolver.ts region='url_resolver'}\n *\n * @security  When compiling templates at runtime, you must\n * ensure that the entire template comes from a trusted source.\n * Attacker-controlled data introduced by a template could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n */\nexport interface UrlResolver {\n    resolve(baseUrl: string, url: string): string;\n}\nexport interface UrlResolverCtor {\n    new (packagePrefix?: string | null): UrlResolver;\n}\nexport declare const UrlResolver: UrlResolverCtor;\n/**\n * Extract the scheme of a URL.\n */\nexport declare function getUrlScheme(url: string): string;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/injectable_compiler_2.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as o from './output/output_ast';\nimport { R3DependencyMetadata } from './render3/r3_factory';\nexport interface InjectableDef {\n    expression: o.Expression;\n    type: o.Type;\n    statements: o.Statement[];\n}\nexport interface R3InjectableMetadata {\n    name: string;\n    type: o.Expression;\n    ctorDeps: R3DependencyMetadata[] | null;\n    providedIn: o.Expression;\n    useClass?: o.Expression;\n    useFactory?: o.Expression;\n    useExisting?: o.Expression;\n    useValue?: o.Expression;\n    userDeps?: R3DependencyMetadata[];\n}\nexport declare function compileInjectable(meta: R3InjectableMetadata): InjectableDef;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/output/output_ast.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ParseSourceSpan } from '../parse_util';\nexport declare enum TypeModifier {\n    Const = 0\n}\nexport declare abstract class Type {\n    modifiers: TypeModifier[] | null;\n    constructor(modifiers?: TypeModifier[] | null);\n    abstract visitType(visitor: TypeVisitor, context: any): any;\n    hasModifier(modifier: TypeModifier): boolean;\n}\nexport declare enum BuiltinTypeName {\n    Dynamic = 0,\n    Bool = 1,\n    String = 2,\n    Int = 3,\n    Number = 4,\n    Function = 5,\n    Inferred = 6,\n    None = 7\n}\nexport declare class BuiltinType extends Type {\n    name: BuiltinTypeName;\n    constructor(name: BuiltinTypeName, modifiers?: TypeModifier[] | null);\n    visitType(visitor: TypeVisitor, context: any): any;\n}\nexport declare class ExpressionType extends Type {\n    value: Expression;\n    typeParams: Type[] | null;\n    constructor(value: Expression, modifiers?: TypeModifier[] | null, typeParams?: Type[] | null);\n    visitType(visitor: TypeVisitor, context: any): any;\n}\nexport declare class ArrayType extends Type {\n    of: Type;\n    constructor(of: Type, modifiers?: TypeModifier[] | null);\n    visitType(visitor: TypeVisitor, context: any): any;\n}\nexport declare class MapType extends Type {\n    valueType: Type | null;\n    constructor(valueType: Type | null | undefined, modifiers?: TypeModifier[] | null);\n    visitType(visitor: TypeVisitor, context: any): any;\n}\nexport declare const DYNAMIC_TYPE: BuiltinType;\nexport declare const INFERRED_TYPE: BuiltinType;\nexport declare const BOOL_TYPE: BuiltinType;\nexport declare const INT_TYPE: BuiltinType;\nexport declare const NUMBER_TYPE: BuiltinType;\nexport declare const STRING_TYPE: BuiltinType;\nexport declare const FUNCTION_TYPE: BuiltinType;\nexport declare const NONE_TYPE: BuiltinType;\nexport interface TypeVisitor {\n    visitBuiltinType(type: BuiltinType, context: any): any;\n    visitExpressionType(type: ExpressionType, context: any): any;\n    visitArrayType(type: ArrayType, context: any): any;\n    visitMapType(type: MapType, context: any): any;\n}\nexport declare enum BinaryOperator {\n    Equals = 0,\n    NotEquals = 1,\n    Identical = 2,\n    NotIdentical = 3,\n    Minus = 4,\n    Plus = 5,\n    Divide = 6,\n    Multiply = 7,\n    Modulo = 8,\n    And = 9,\n    Or = 10,\n    BitwiseAnd = 11,\n    Lower = 12,\n    LowerEquals = 13,\n    Bigger = 14,\n    BiggerEquals = 15\n}\nexport declare function nullSafeIsEquivalent<T extends {\n    isEquivalent(other: T): boolean;\n}>(base: T | null, other: T | null): boolean;\nexport declare function areAllEquivalent<T extends {\n    isEquivalent(other: T): boolean;\n}>(base: T[], other: T[]): boolean;\nexport declare abstract class Expression {\n    type: Type | null;\n    sourceSpan: ParseSourceSpan | null;\n    constructor(type: Type | null | undefined, sourceSpan?: ParseSourceSpan | null);\n    abstract visitExpression(visitor: ExpressionVisitor, context: any): any;\n    /**\n     * Calculates whether this expression produces the same value as the given expression.\n     * Note: We don't check Types nor ParseSourceSpans nor function arguments.\n     */\n    abstract isEquivalent(e: Expression): boolean;\n    /**\n     * Return true if the expression is constant.\n     */\n    abstract isConstant(): boolean;\n    prop(name: string, sourceSpan?: ParseSourceSpan | null): ReadPropExpr;\n    key(index: Expression, type?: Type | null, sourceSpan?: ParseSourceSpan | null): ReadKeyExpr;\n    callMethod(name: string | BuiltinMethod, params: Expression[], sourceSpan?: ParseSourceSpan | null): InvokeMethodExpr;\n    callFn(params: Expression[], sourceSpan?: ParseSourceSpan | null): InvokeFunctionExpr;\n    instantiate(params: Expression[], type?: Type | null, sourceSpan?: ParseSourceSpan | null): InstantiateExpr;\n    conditional(trueCase: Expression, falseCase?: Expression | null, sourceSpan?: ParseSourceSpan | null): ConditionalExpr;\n    equals(rhs: Expression, sourceSpan?: ParseSourceSpan | null): BinaryOperatorExpr;\n    notEquals(rhs: Expression, sourceSpan?: ParseSourceSpan | null): BinaryOperatorExpr;\n    identical(rhs: Expression, sourceSpan?: ParseSourceSpan | null): BinaryOperatorExpr;\n    notIdentical(rhs: Expression, sourceSpan?: ParseSourceSpan | null): BinaryOperatorExpr;\n    minus(rhs: Expression, sourceSpan?: ParseSourceSpan | null): BinaryOperatorExpr;\n    plus(rhs: Expression, sourceSpan?: ParseSourceSpan | null): BinaryOperatorExpr;\n    divide(rhs: Expression, sourceSpan?: ParseSourceSpan | null): BinaryOperatorExpr;\n    multiply(rhs: Expression, sourceSpan?: ParseSourceSpan | null): BinaryOperatorExpr;\n    modulo(rhs: Expression, sourceSpan?: ParseSourceSpan | null): BinaryOperatorExpr;\n    and(rhs: Expression, sourceSpan?: ParseSourceSpan | null): BinaryOperatorExpr;\n    bitwiseAnd(rhs: Expression, sourceSpan?: ParseSourceSpan | null, parens?: boolean): BinaryOperatorExpr;\n    or(rhs: Expression, sourceSpan?: ParseSourceSpan | null): BinaryOperatorExpr;\n    lower(rhs: Expression, sourceSpan?: ParseSourceSpan | null): BinaryOperatorExpr;\n    lowerEquals(rhs: Expression, sourceSpan?: ParseSourceSpan | null): BinaryOperatorExpr;\n    bigger(rhs: Expression, sourceSpan?: ParseSourceSpan | null): BinaryOperatorExpr;\n    biggerEquals(rhs: Expression, sourceSpan?: ParseSourceSpan | null): BinaryOperatorExpr;\n    isBlank(sourceSpan?: ParseSourceSpan | null): Expression;\n    cast(type: Type, sourceSpan?: ParseSourceSpan | null): Expression;\n    toStmt(): Statement;\n}\nexport declare enum BuiltinVar {\n    This = 0,\n    Super = 1,\n    CatchError = 2,\n    CatchStack = 3\n}\nexport declare class ReadVarExpr extends Expression {\n    name: string | null;\n    builtin: BuiltinVar | null;\n    constructor(name: string | BuiltinVar, type?: Type | null, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n    set(value: Expression): WriteVarExpr;\n}\nexport declare class TypeofExpr extends Expression {\n    expr: Expression;\n    constructor(expr: Expression, type?: Type | null, sourceSpan?: ParseSourceSpan | null);\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n}\nexport declare class WrappedNodeExpr<T> extends Expression {\n    node: T;\n    constructor(node: T, type?: Type | null, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n}\nexport declare class WriteVarExpr extends Expression {\n    name: string;\n    value: Expression;\n    constructor(name: string, value: Expression, type?: Type | null, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n    toDeclStmt(type?: Type | null, modifiers?: StmtModifier[] | null): DeclareVarStmt;\n    toConstDecl(): DeclareVarStmt;\n}\nexport declare class WriteKeyExpr extends Expression {\n    receiver: Expression;\n    index: Expression;\n    value: Expression;\n    constructor(receiver: Expression, index: Expression, value: Expression, type?: Type | null, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n}\nexport declare class WritePropExpr extends Expression {\n    receiver: Expression;\n    name: string;\n    value: Expression;\n    constructor(receiver: Expression, name: string, value: Expression, type?: Type | null, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n}\nexport declare enum BuiltinMethod {\n    ConcatArray = 0,\n    SubscribeObservable = 1,\n    Bind = 2\n}\nexport declare class InvokeMethodExpr extends Expression {\n    receiver: Expression;\n    args: Expression[];\n    name: string | null;\n    builtin: BuiltinMethod | null;\n    constructor(receiver: Expression, method: string | BuiltinMethod, args: Expression[], type?: Type | null, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n}\nexport declare class InvokeFunctionExpr extends Expression {\n    fn: Expression;\n    args: Expression[];\n    constructor(fn: Expression, args: Expression[], type?: Type | null, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n}\nexport declare class InstantiateExpr extends Expression {\n    classExpr: Expression;\n    args: Expression[];\n    constructor(classExpr: Expression, args: Expression[], type?: Type | null, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n}\nexport declare class LiteralExpr extends Expression {\n    value: number | string | boolean | null | undefined;\n    constructor(value: number | string | boolean | null | undefined, type?: Type | null, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n}\nexport declare class ExternalExpr extends Expression {\n    value: ExternalReference;\n    typeParams: Type[] | null;\n    constructor(value: ExternalReference, type?: Type | null, typeParams?: Type[] | null, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n}\nexport declare class ExternalReference {\n    moduleName: string | null;\n    name: string | null;\n    runtime?: any;\n    constructor(moduleName: string | null, name: string | null, runtime?: any);\n}\nexport declare class ConditionalExpr extends Expression {\n    condition: Expression;\n    falseCase: Expression | null;\n    trueCase: Expression;\n    constructor(condition: Expression, trueCase: Expression, falseCase?: Expression | null, type?: Type | null, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n}\nexport declare class NotExpr extends Expression {\n    condition: Expression;\n    constructor(condition: Expression, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n}\nexport declare class AssertNotNull extends Expression {\n    condition: Expression;\n    constructor(condition: Expression, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n}\nexport declare class CastExpr extends Expression {\n    value: Expression;\n    constructor(value: Expression, type?: Type | null, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n}\nexport declare class FnParam {\n    name: string;\n    type: Type | null;\n    constructor(name: string, type?: Type | null);\n    isEquivalent(param: FnParam): boolean;\n}\nexport declare class FunctionExpr extends Expression {\n    params: FnParam[];\n    statements: Statement[];\n    name?: string | null | undefined;\n    constructor(params: FnParam[], statements: Statement[], type?: Type | null, sourceSpan?: ParseSourceSpan | null, name?: string | null | undefined);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n    toDeclStmt(name: string, modifiers?: StmtModifier[] | null): DeclareFunctionStmt;\n}\nexport declare class BinaryOperatorExpr extends Expression {\n    operator: BinaryOperator;\n    rhs: Expression;\n    parens: boolean;\n    lhs: Expression;\n    constructor(operator: BinaryOperator, lhs: Expression, rhs: Expression, type?: Type | null, sourceSpan?: ParseSourceSpan | null, parens?: boolean);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n}\nexport declare class ReadPropExpr extends Expression {\n    receiver: Expression;\n    name: string;\n    constructor(receiver: Expression, name: string, type?: Type | null, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n    set(value: Expression): WritePropExpr;\n}\nexport declare class ReadKeyExpr extends Expression {\n    receiver: Expression;\n    index: Expression;\n    constructor(receiver: Expression, index: Expression, type?: Type | null, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n    set(value: Expression): WriteKeyExpr;\n}\nexport declare class LiteralArrayExpr extends Expression {\n    entries: Expression[];\n    constructor(entries: Expression[], type?: Type | null, sourceSpan?: ParseSourceSpan | null);\n    isConstant(): boolean;\n    isEquivalent(e: Expression): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n}\nexport declare class LiteralMapEntry {\n    key: string;\n    value: Expression;\n    quoted: boolean;\n    constructor(key: string, value: Expression, quoted: boolean);\n    isEquivalent(e: LiteralMapEntry): boolean;\n}\nexport declare class LiteralMapExpr extends Expression {\n    entries: LiteralMapEntry[];\n    valueType: Type | null;\n    constructor(entries: LiteralMapEntry[], type?: MapType | null, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n}\nexport declare class CommaExpr extends Expression {\n    parts: Expression[];\n    constructor(parts: Expression[], sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(e: Expression): boolean;\n    isConstant(): boolean;\n    visitExpression(visitor: ExpressionVisitor, context: any): any;\n}\nexport interface ExpressionVisitor {\n    visitReadVarExpr(ast: ReadVarExpr, context: any): any;\n    visitWriteVarExpr(expr: WriteVarExpr, context: any): any;\n    visitWriteKeyExpr(expr: WriteKeyExpr, context: any): any;\n    visitWritePropExpr(expr: WritePropExpr, context: any): any;\n    visitInvokeMethodExpr(ast: InvokeMethodExpr, context: any): any;\n    visitInvokeFunctionExpr(ast: InvokeFunctionExpr, context: any): any;\n    visitInstantiateExpr(ast: InstantiateExpr, context: any): any;\n    visitLiteralExpr(ast: LiteralExpr, context: any): any;\n    visitExternalExpr(ast: ExternalExpr, context: any): any;\n    visitConditionalExpr(ast: ConditionalExpr, context: any): any;\n    visitNotExpr(ast: NotExpr, context: any): any;\n    visitAssertNotNullExpr(ast: AssertNotNull, context: any): any;\n    visitCastExpr(ast: CastExpr, context: any): any;\n    visitFunctionExpr(ast: FunctionExpr, context: any): any;\n    visitBinaryOperatorExpr(ast: BinaryOperatorExpr, context: any): any;\n    visitReadPropExpr(ast: ReadPropExpr, context: any): any;\n    visitReadKeyExpr(ast: ReadKeyExpr, context: any): any;\n    visitLiteralArrayExpr(ast: LiteralArrayExpr, context: any): any;\n    visitLiteralMapExpr(ast: LiteralMapExpr, context: any): any;\n    visitCommaExpr(ast: CommaExpr, context: any): any;\n    visitWrappedNodeExpr(ast: WrappedNodeExpr<any>, context: any): any;\n    visitTypeofExpr(ast: TypeofExpr, context: any): any;\n}\nexport declare const THIS_EXPR: ReadVarExpr;\nexport declare const SUPER_EXPR: ReadVarExpr;\nexport declare const CATCH_ERROR_VAR: ReadVarExpr;\nexport declare const CATCH_STACK_VAR: ReadVarExpr;\nexport declare const NULL_EXPR: LiteralExpr;\nexport declare const TYPED_NULL_EXPR: LiteralExpr;\nexport declare enum StmtModifier {\n    Final = 0,\n    Private = 1,\n    Exported = 2,\n    Static = 3\n}\nexport declare abstract class Statement {\n    modifiers: StmtModifier[];\n    sourceSpan: ParseSourceSpan | null;\n    constructor(modifiers?: StmtModifier[] | null, sourceSpan?: ParseSourceSpan | null);\n    /**\n     * Calculates whether this statement produces the same value as the given statement.\n     * Note: We don't check Types nor ParseSourceSpans nor function arguments.\n     */\n    abstract isEquivalent(stmt: Statement): boolean;\n    abstract visitStatement(visitor: StatementVisitor, context: any): any;\n    hasModifier(modifier: StmtModifier): boolean;\n}\nexport declare class DeclareVarStmt extends Statement {\n    name: string;\n    value?: Expression | undefined;\n    type: Type | null;\n    constructor(name: string, value?: Expression | undefined, type?: Type | null, modifiers?: StmtModifier[] | null, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(stmt: Statement): boolean;\n    visitStatement(visitor: StatementVisitor, context: any): any;\n}\nexport declare class DeclareFunctionStmt extends Statement {\n    name: string;\n    params: FnParam[];\n    statements: Statement[];\n    type: Type | null;\n    constructor(name: string, params: FnParam[], statements: Statement[], type?: Type | null, modifiers?: StmtModifier[] | null, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(stmt: Statement): boolean;\n    visitStatement(visitor: StatementVisitor, context: any): any;\n}\nexport declare class ExpressionStatement extends Statement {\n    expr: Expression;\n    constructor(expr: Expression, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(stmt: Statement): boolean;\n    visitStatement(visitor: StatementVisitor, context: any): any;\n}\nexport declare class ReturnStatement extends Statement {\n    value: Expression;\n    constructor(value: Expression, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(stmt: Statement): boolean;\n    visitStatement(visitor: StatementVisitor, context: any): any;\n}\nexport declare class AbstractClassPart {\n    modifiers: StmtModifier[] | null;\n    type: Type | null;\n    constructor(type: Type | null | undefined, modifiers: StmtModifier[] | null);\n    hasModifier(modifier: StmtModifier): boolean;\n}\nexport declare class ClassField extends AbstractClassPart {\n    name: string;\n    initializer?: Expression | undefined;\n    constructor(name: string, type?: Type | null, modifiers?: StmtModifier[] | null, initializer?: Expression | undefined);\n    isEquivalent(f: ClassField): boolean;\n}\nexport declare class ClassMethod extends AbstractClassPart {\n    name: string | null;\n    params: FnParam[];\n    body: Statement[];\n    constructor(name: string | null, params: FnParam[], body: Statement[], type?: Type | null, modifiers?: StmtModifier[] | null);\n    isEquivalent(m: ClassMethod): boolean;\n}\nexport declare class ClassGetter extends AbstractClassPart {\n    name: string;\n    body: Statement[];\n    constructor(name: string, body: Statement[], type?: Type | null, modifiers?: StmtModifier[] | null);\n    isEquivalent(m: ClassGetter): boolean;\n}\nexport declare class ClassStmt extends Statement {\n    name: string;\n    parent: Expression | null;\n    fields: ClassField[];\n    getters: ClassGetter[];\n    constructorMethod: ClassMethod;\n    methods: ClassMethod[];\n    constructor(name: string, parent: Expression | null, fields: ClassField[], getters: ClassGetter[], constructorMethod: ClassMethod, methods: ClassMethod[], modifiers?: StmtModifier[] | null, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(stmt: Statement): boolean;\n    visitStatement(visitor: StatementVisitor, context: any): any;\n}\nexport declare class IfStmt extends Statement {\n    condition: Expression;\n    trueCase: Statement[];\n    falseCase: Statement[];\n    constructor(condition: Expression, trueCase: Statement[], falseCase?: Statement[], sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(stmt: Statement): boolean;\n    visitStatement(visitor: StatementVisitor, context: any): any;\n}\nexport declare class CommentStmt extends Statement {\n    comment: string;\n    multiline: boolean;\n    constructor(comment: string, multiline?: boolean, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(stmt: Statement): boolean;\n    visitStatement(visitor: StatementVisitor, context: any): any;\n}\nexport declare class JSDocCommentStmt extends Statement {\n    tags: JSDocTag[];\n    constructor(tags?: JSDocTag[], sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(stmt: Statement): boolean;\n    visitStatement(visitor: StatementVisitor, context: any): any;\n    toString(): string;\n}\nexport declare class TryCatchStmt extends Statement {\n    bodyStmts: Statement[];\n    catchStmts: Statement[];\n    constructor(bodyStmts: Statement[], catchStmts: Statement[], sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(stmt: Statement): boolean;\n    visitStatement(visitor: StatementVisitor, context: any): any;\n}\nexport declare class ThrowStmt extends Statement {\n    error: Expression;\n    constructor(error: Expression, sourceSpan?: ParseSourceSpan | null);\n    isEquivalent(stmt: ThrowStmt): boolean;\n    visitStatement(visitor: StatementVisitor, context: any): any;\n}\nexport interface StatementVisitor {\n    visitDeclareVarStmt(stmt: DeclareVarStmt, context: any): any;\n    visitDeclareFunctionStmt(stmt: DeclareFunctionStmt, context: any): any;\n    visitExpressionStmt(stmt: ExpressionStatement, context: any): any;\n    visitReturnStmt(stmt: ReturnStatement, context: any): any;\n    visitDeclareClassStmt(stmt: ClassStmt, context: any): any;\n    visitIfStmt(stmt: IfStmt, context: any): any;\n    visitTryCatchStmt(stmt: TryCatchStmt, context: any): any;\n    visitThrowStmt(stmt: ThrowStmt, context: any): any;\n    visitCommentStmt(stmt: CommentStmt, context: any): any;\n    visitJSDocCommentStmt(stmt: JSDocCommentStmt, context: any): any;\n}\nexport declare class AstTransformer implements StatementVisitor, ExpressionVisitor {\n    transformExpr(expr: Expression, context: any): Expression;\n    transformStmt(stmt: Statement, context: any): Statement;\n    visitReadVarExpr(ast: ReadVarExpr, context: any): any;\n    visitWrappedNodeExpr(ast: WrappedNodeExpr<any>, context: any): any;\n    visitTypeofExpr(expr: TypeofExpr, context: any): any;\n    visitWriteVarExpr(expr: WriteVarExpr, context: any): any;\n    visitWriteKeyExpr(expr: WriteKeyExpr, context: any): any;\n    visitWritePropExpr(expr: WritePropExpr, context: any): any;\n    visitInvokeMethodExpr(ast: InvokeMethodExpr, context: any): any;\n    visitInvokeFunctionExpr(ast: InvokeFunctionExpr, context: any): any;\n    visitInstantiateExpr(ast: InstantiateExpr, context: any): any;\n    visitLiteralExpr(ast: LiteralExpr, context: any): any;\n    visitExternalExpr(ast: ExternalExpr, context: any): any;\n    visitConditionalExpr(ast: ConditionalExpr, context: any): any;\n    visitNotExpr(ast: NotExpr, context: any): any;\n    visitAssertNotNullExpr(ast: AssertNotNull, context: any): any;\n    visitCastExpr(ast: CastExpr, context: any): any;\n    visitFunctionExpr(ast: FunctionExpr, context: any): any;\n    visitBinaryOperatorExpr(ast: BinaryOperatorExpr, context: any): any;\n    visitReadPropExpr(ast: ReadPropExpr, context: any): any;\n    visitReadKeyExpr(ast: ReadKeyExpr, context: any): any;\n    visitLiteralArrayExpr(ast: LiteralArrayExpr, context: any): any;\n    visitLiteralMapExpr(ast: LiteralMapExpr, context: any): any;\n    visitCommaExpr(ast: CommaExpr, context: any): any;\n    visitAllExpressions(exprs: Expression[], context: any): Expression[];\n    visitDeclareVarStmt(stmt: DeclareVarStmt, context: any): any;\n    visitDeclareFunctionStmt(stmt: DeclareFunctionStmt, context: any): any;\n    visitExpressionStmt(stmt: ExpressionStatement, context: any): any;\n    visitReturnStmt(stmt: ReturnStatement, context: any): any;\n    visitDeclareClassStmt(stmt: ClassStmt, context: any): any;\n    visitIfStmt(stmt: IfStmt, context: any): any;\n    visitTryCatchStmt(stmt: TryCatchStmt, context: any): any;\n    visitThrowStmt(stmt: ThrowStmt, context: any): any;\n    visitCommentStmt(stmt: CommentStmt, context: any): any;\n    visitJSDocCommentStmt(stmt: JSDocCommentStmt, context: any): any;\n    visitAllStatements(stmts: Statement[], context: any): Statement[];\n}\nexport declare class RecursiveAstVisitor implements StatementVisitor, ExpressionVisitor {\n    visitType(ast: Type, context: any): any;\n    visitExpression(ast: Expression, context: any): any;\n    visitBuiltinType(type: BuiltinType, context: any): any;\n    visitExpressionType(type: ExpressionType, context: any): any;\n    visitArrayType(type: ArrayType, context: any): any;\n    visitMapType(type: MapType, context: any): any;\n    visitWrappedNodeExpr(ast: WrappedNodeExpr<any>, context: any): any;\n    visitTypeofExpr(ast: TypeofExpr, context: any): any;\n    visitReadVarExpr(ast: ReadVarExpr, context: any): any;\n    visitWriteVarExpr(ast: WriteVarExpr, context: any): any;\n    visitWriteKeyExpr(ast: WriteKeyExpr, context: any): any;\n    visitWritePropExpr(ast: WritePropExpr, context: any): any;\n    visitInvokeMethodExpr(ast: InvokeMethodExpr, context: any): any;\n    visitInvokeFunctionExpr(ast: InvokeFunctionExpr, context: any): any;\n    visitInstantiateExpr(ast: InstantiateExpr, context: any): any;\n    visitLiteralExpr(ast: LiteralExpr, context: any): any;\n    visitExternalExpr(ast: ExternalExpr, context: any): any;\n    visitConditionalExpr(ast: ConditionalExpr, context: any): any;\n    visitNotExpr(ast: NotExpr, context: any): any;\n    visitAssertNotNullExpr(ast: AssertNotNull, context: any): any;\n    visitCastExpr(ast: CastExpr, context: any): any;\n    visitFunctionExpr(ast: FunctionExpr, context: any): any;\n    visitBinaryOperatorExpr(ast: BinaryOperatorExpr, context: any): any;\n    visitReadPropExpr(ast: ReadPropExpr, context: any): any;\n    visitReadKeyExpr(ast: ReadKeyExpr, context: any): any;\n    visitLiteralArrayExpr(ast: LiteralArrayExpr, context: any): any;\n    visitLiteralMapExpr(ast: LiteralMapExpr, context: any): any;\n    visitCommaExpr(ast: CommaExpr, context: any): any;\n    visitAllExpressions(exprs: Expression[], context: any): void;\n    visitDeclareVarStmt(stmt: DeclareVarStmt, context: any): any;\n    visitDeclareFunctionStmt(stmt: DeclareFunctionStmt, context: any): any;\n    visitExpressionStmt(stmt: ExpressionStatement, context: any): any;\n    visitReturnStmt(stmt: ReturnStatement, context: any): any;\n    visitDeclareClassStmt(stmt: ClassStmt, context: any): any;\n    visitIfStmt(stmt: IfStmt, context: any): any;\n    visitTryCatchStmt(stmt: TryCatchStmt, context: any): any;\n    visitThrowStmt(stmt: ThrowStmt, context: any): any;\n    visitCommentStmt(stmt: CommentStmt, context: any): any;\n    visitJSDocCommentStmt(stmt: JSDocCommentStmt, context: any): any;\n    visitAllStatements(stmts: Statement[], context: any): void;\n}\nexport declare function findReadVarNames(stmts: Statement[]): Set<string>;\nexport declare function collectExternalReferences(stmts: Statement[]): ExternalReference[];\nexport declare function applySourceSpanToStatementIfNeeded(stmt: Statement, sourceSpan: ParseSourceSpan | null): Statement;\nexport declare function applySourceSpanToExpressionIfNeeded(expr: Expression, sourceSpan: ParseSourceSpan | null): Expression;\nexport declare function variable(name: string, type?: Type | null, sourceSpan?: ParseSourceSpan | null): ReadVarExpr;\nexport declare function importExpr(id: ExternalReference, typeParams?: Type[] | null, sourceSpan?: ParseSourceSpan | null): ExternalExpr;\nexport declare function importType(id: ExternalReference, typeParams?: Type[] | null, typeModifiers?: TypeModifier[] | null): ExpressionType | null;\nexport declare function expressionType(expr: Expression, typeModifiers?: TypeModifier[] | null, typeParams?: Type[] | null): ExpressionType;\nexport declare function typeofExpr(expr: Expression): TypeofExpr;\nexport declare function literalArr(values: Expression[], type?: Type | null, sourceSpan?: ParseSourceSpan | null): LiteralArrayExpr;\nexport declare function literalMap(values: {\n    key: string;\n    quoted: boolean;\n    value: Expression;\n}[], type?: MapType | null): LiteralMapExpr;\nexport declare function not(expr: Expression, sourceSpan?: ParseSourceSpan | null): NotExpr;\nexport declare function assertNotNull(expr: Expression, sourceSpan?: ParseSourceSpan | null): AssertNotNull;\nexport declare function fn(params: FnParam[], body: Statement[], type?: Type | null, sourceSpan?: ParseSourceSpan | null, name?: string | null): FunctionExpr;\nexport declare function ifStmt(condition: Expression, thenClause: Statement[], elseClause?: Statement[]): IfStmt;\nexport declare function literal(value: any, type?: Type | null, sourceSpan?: ParseSourceSpan | null): LiteralExpr;\nexport declare function isNull(exp: Expression): boolean;\nexport declare const enum JSDocTagName {\n    Desc = \"desc\",\n    Id = \"id\",\n    Meaning = \"meaning\"\n}\nexport declare type JSDocTag = {\n    tagName: JSDocTagName | string;\n    text?: string;\n} | {\n    tagName?: undefined;\n    text: string;\n};\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/render3/view/template.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LocalResolver } from '../../compiler_util/expression_converter';\nimport { ConstantPool } from '../../constant_pool';\nimport * as core from '../../core';\nimport { AST, AstMemoryEfficientTransformer, BindingPipe, LiteralArray, LiteralMap } from '../../expression_parser/ast';\nimport * as o from '../../output/output_ast';\nimport { ParseError } from '../../parse_util';\nimport { SelectorMatcher } from '../../selector';\nimport { BindingParser } from '../../template_parser/binding_parser';\nimport * as t from '../r3_ast';\nimport { R3QueryMetadata } from './api';\nimport { invalid } from './util';\nexport declare function renderFlagCheckIfStmt(flags: core.RenderFlags, statements: o.Statement[]): o.IfStmt;\nexport declare class TemplateDefinitionBuilder implements t.Visitor<void>, LocalResolver {\n    private constantPool;\n    private level;\n    private contextName;\n    private templateName;\n    private viewQueries;\n    private directiveMatcher;\n    private directives;\n    private pipeTypeByName;\n    private pipes;\n    private _namespace;\n    private relativeContextFilePath;\n    private _dataIndex;\n    private _bindingContext;\n    private _prefixCode;\n    /**\n     * List of callbacks to generate creation mode instructions. We store them here as we process\n     * the template so bindings in listeners are resolved only once all nodes have been visited.\n     * This ensures all local refs and context variables are available for matching.\n     */\n    private _creationCodeFns;\n    /**\n     * List of callbacks to generate update mode instructions. We store them here as we process\n     * the template so bindings are resolved only once all nodes have been visited. This ensures\n     * all local refs and context variables are available for matching.\n     */\n    private _updateCodeFns;\n    /** Temporary variable declarations generated from visiting pipes, literals, etc. */\n    private _tempVariables;\n    /**\n     * List of callbacks to build nested templates. Nested templates must not be visited until\n     * after the parent template has finished visiting all of its nodes. This ensures that all\n     * local ref bindings in nested templates are able to find local ref values if the refs\n     * are defined after the template declaration.\n     */\n    private _nestedTemplateFns;\n    /**\n     * This scope contains local variables declared in the update mode block of the template.\n     * (e.g. refs and context vars in bindings)\n     */\n    private _bindingScope;\n    private _valueConverter;\n    private _unsupported;\n    private _inI18nSection;\n    private _i18nSectionIndex;\n    private _phToNodeIdxes;\n    private _pureFunctionSlots;\n    private _bindingSlots;\n    private fileBasedI18nSuffix;\n    constructor(constantPool: ConstantPool, parentBindingScope: BindingScope, level: number, contextName: string | null, templateName: string | null, viewQueries: R3QueryMetadata[], directiveMatcher: SelectorMatcher | null, directives: Set<o.Expression>, pipeTypeByName: Map<string, o.Expression>, pipes: Set<o.Expression>, _namespace: o.ExternalReference, relativeContextFilePath: string);\n    registerContextVariables(variable: t.Variable): void;\n    buildTemplateFunction(nodes: t.Node[], variables: t.Variable[], hasNgContent?: boolean, ngContentSelectors?: string[]): o.FunctionExpr;\n    getLocal(name: string): o.Expression | null;\n    i18nTranslate(label: string, meta?: string): o.Expression;\n    visitContent(ngContent: t.Content): void;\n    getNamespaceInstruction(namespaceKey: string | null): o.ExternalReference;\n    addNamespaceInstruction(nsInstruction: o.ExternalReference, element: t.Element): void;\n    visitElement(element: t.Element): void;\n    visitTemplate(template: t.Template): void;\n    readonly visitReference: typeof invalid;\n    readonly visitVariable: typeof invalid;\n    readonly visitTextAttribute: typeof invalid;\n    readonly visitBoundAttribute: typeof invalid;\n    readonly visitBoundEvent: typeof invalid;\n    visitBoundText(text: t.BoundText): void;\n    visitText(text: t.Text): void;\n    visitSingleI18nTextChild(text: t.Text, i18nMeta: string): void;\n    private allocateDataSlot;\n    getConstCount(): number;\n    getVarCount(): number;\n    private bindingContext;\n    private instructionFn;\n    private creationInstruction;\n    private updateInstruction;\n    private allocatePureFunctionSlots;\n    private allocateBindingSlots;\n    private convertExpressionBinding;\n    private convertPropertyBinding;\n    private matchDirectives;\n    private prepareSyntheticAndSelectOnlyAttrs;\n    private toAttrsParam;\n    private prepareRefsParameter;\n    private prepareListenerParameter;\n}\nexport declare class ValueConverter extends AstMemoryEfficientTransformer {\n    private constantPool;\n    private allocateSlot;\n    private allocatePureFunctionSlots;\n    private definePipe;\n    private _pipeBindExprs;\n    constructor(constantPool: ConstantPool, allocateSlot: () => number, allocatePureFunctionSlots: (numSlots: number) => number, definePipe: (name: string, localName: string, slot: number, value: o.Expression) => void);\n    visitPipe(pipe: BindingPipe, context: any): AST;\n    updatePipeSlotOffsets(bindingSlots: number): void;\n    visitLiteralArray(array: LiteralArray, context: any): AST;\n    visitLiteralMap(map: LiteralMap, context: any): AST;\n}\n/**\n * Function which is executed whenever a variable is referenced for the first time in a given\n * scope.\n *\n * It is expected that the function creates the `const localName = expression`; statement.\n */\nexport declare type DeclareLocalVarCallback = (scope: BindingScope, relativeLevel: number) => o.Statement[];\n/**\n * This is used when one refers to variable such as: 'let abc = x(2).$implicit`.\n * - key to the map is the string literal `\"abc\"`.\n * - value `retrievalLevel` is the level from which this value can be retrieved, which is 2 levels\n * up in example.\n * - value `lhs` is the left hand side which is an AST representing `abc`.\n * - value `declareLocalCallback` is a callback that is invoked when declaring the local.\n * - value `declare` is true if this value needs to be declared.\n * - value `priority` dictates the sorting priority of this var declaration compared\n * to other var declarations on the same retrieval level. For example, if there is a\n * context variable and a local ref accessing the same parent view, the context var\n * declaration should always come before the local ref declaration.\n */\ndeclare type BindingData = {\n    retrievalLevel: number;\n    lhs: o.ReadVarExpr;\n    declareLocalCallback?: DeclareLocalVarCallback;\n    declare: boolean;\n    priority: number;\n};\nexport declare class BindingScope implements LocalResolver {\n    bindingLevel: number;\n    private parent;\n    /** Keeps a map from local variables to their BindingData. */\n    private map;\n    private referenceNameIndex;\n    private restoreViewVariable;\n    private static _ROOT_SCOPE;\n    static readonly ROOT_SCOPE: BindingScope;\n    private constructor();\n    get(name: string): o.Expression | null;\n    /**\n     * Create a local variable for later reference.\n     *\n     * @param retrievalLevel The level from which this value can be retrieved\n     * @param name Name of the variable.\n     * @param lhs AST representing the left hand side of the `let lhs = rhs;`.\n     * @param priority The sorting priority of this var\n     * @param declareLocalCallback The callback to invoke when declaring this local var\n     */\n    set(retrievalLevel: number, name: string, lhs: o.ReadVarExpr, priority?: number, declareLocalCallback?: DeclareLocalVarCallback): BindingScope;\n    getLocal(name: string): (o.Expression | null);\n    nestedScope(level: number): BindingScope;\n    getSharedContextName(retrievalLevel: number): o.ReadVarExpr | null;\n    maybeGenerateSharedContextVar(value: BindingData): void;\n    generateSharedContextVar(retrievalLevel: number): void;\n    getComponentProperty(name: string): o.Expression;\n    maybeRestoreView(retrievalLevel: number): void;\n    restoreViewStatement(): o.Statement[];\n    viewSnapshotStatements(): o.Statement[];\n    isListenerScope(): boolean | null;\n    variableDeclarations(): o.Statement[];\n    freshReferenceName(): string;\n}\n/**\n * Parse a template into render3 `Node`s and additional metadata, with no other dependencies.\n *\n * @param template text of the template to parse\n * @param templateUrl URL to use for source mapping of the parsed template\n */\nexport declare function parseTemplate(template: string, templateUrl: string, options: {\n    preserveWhitespaces?: boolean | undefined;\n} | undefined, relativeContextFilePath: string): {\n    errors?: ParseError[];\n    nodes: t.Node[];\n    hasNgContent: boolean;\n    ngContentSelectors: string[];\n    relativeContextFilePath: string;\n};\n/**\n * Construct a `BindingParser` with a default configuration.\n */\nexport declare function makeBindingParser(): BindingParser;\nexport {};\n"
  },
  {
    "path": "node_modules/@angular/compiler/testing/src/schema_registry_mock.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementSchemaRegistry, core } from '@angular/compiler';\nexport declare class MockSchemaRegistry implements ElementSchemaRegistry {\n    existingProperties: {\n        [key: string]: boolean;\n    };\n    attrPropMapping: {\n        [key: string]: string;\n    };\n    existingElements: {\n        [key: string]: boolean;\n    };\n    invalidProperties: Array<string>;\n    invalidAttributes: Array<string>;\n    constructor(existingProperties: {\n        [key: string]: boolean;\n    }, attrPropMapping: {\n        [key: string]: string;\n    }, existingElements: {\n        [key: string]: boolean;\n    }, invalidProperties: Array<string>, invalidAttributes: Array<string>);\n    hasProperty(tagName: string, property: string, schemas: core.SchemaMetadata[]): boolean;\n    hasElement(tagName: string, schemaMetas: core.SchemaMetadata[]): boolean;\n    allKnownElementNames(): string[];\n    securityContext(selector: string, property: string, isAttribute: boolean): core.SecurityContext;\n    getMappedPropName(attrName: string): string;\n    getDefaultComponentElementName(): string;\n    validateProperty(name: string): {\n        error: boolean;\n        msg?: string;\n    };\n    validateAttribute(name: string): {\n        error: boolean;\n        msg?: string;\n    };\n    normalizeAnimationStyleProperty(propName: string): string;\n    normalizeAnimationStyleValue(camelCaseProp: string, userProvidedProp: string, val: string | number): {\n        error: string;\n        value: string;\n    };\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/compile_reflector.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component } from './core';\nimport * as o from './output/output_ast';\n/**\n * Provides access to reflection data about symbols that the compiler needs.\n */\nexport declare abstract class CompileReflector {\n    abstract parameters(typeOrFunc: any): any[][];\n    abstract annotations(typeOrFunc: any): any[];\n    abstract shallowAnnotations(typeOrFunc: any): any[];\n    abstract tryAnnotations(typeOrFunc: any): any[];\n    abstract propMetadata(typeOrFunc: any): {\n        [key: string]: any[];\n    };\n    abstract hasLifecycleHook(type: any, lcProperty: string): boolean;\n    abstract guards(typeOrFunc: any): {\n        [key: string]: any;\n    };\n    abstract componentModuleUrl(type: any, cmpMetadata: Component): string;\n    abstract resolveExternalReference(ref: o.ExternalReference): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/core.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point from which you should import all public core APIs.\n */\nexport * from './metadata';\nexport * from './version';\nexport { TypeDecorator } from './util/decorators';\nexport * from './di';\nexport { createPlatform, assertPlatform, destroyPlatform, getPlatform, PlatformRef, ApplicationRef, createPlatformFactory, NgProbeToken } from './application_ref';\nexport { enableProdMode, isDevMode } from './is_dev_mode';\nexport { APP_ID, PACKAGE_ROOT_URL, PLATFORM_INITIALIZER, PLATFORM_ID, APP_BOOTSTRAP_LISTENER } from './application_tokens';\nexport { APP_INITIALIZER, ApplicationInitStatus } from './application_init';\nexport * from './zone';\nexport * from './render';\nexport * from './linker';\nexport { DebugElement, DebugNode, asNativeElements, getDebugNode, Predicate } from './debug/debug_node';\nexport { GetTestability, Testability, TestabilityRegistry, setTestabilityGetter } from './testability/testability';\nexport * from './change_detection';\nexport * from './platform_core_providers';\nexport { TRANSLATIONS, TRANSLATIONS_FORMAT, LOCALE_ID, MissingTranslationStrategy } from './i18n/tokens';\nexport { ApplicationModule } from './application_module';\nexport { wtfCreateScope, wtfLeave, wtfStartTimeRange, wtfEndTimeRange, WtfScopeFn } from './profile/profile';\nexport { Type } from './type';\nexport { EventEmitter } from './event_emitter';\nexport { ErrorHandler } from './error_handler';\nexport * from './core_private_export';\nexport * from './core_render3_private_export';\nexport { Sanitizer, SecurityContext } from './sanitization/security';\nexport * from './codegen_private_exports';\n"
  },
  {
    "path": "node_modules/@angular/core/src/render/api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\nimport { Injector } from '../di/injector';\nimport { ViewEncapsulation } from '../metadata/view';\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n */\nexport declare class RenderComponentType {\n    id: string;\n    templateUrl: string;\n    slotCount: number;\n    encapsulation: ViewEncapsulation;\n    styles: Array<string | any[]>;\n    animations: any;\n    constructor(id: string, templateUrl: string, slotCount: number, encapsulation: ViewEncapsulation, styles: Array<string | any[]>, animations: any);\n}\n/**\n * @deprecated Debug info is handled internally in the view engine now.\n */\nexport declare abstract class RenderDebugInfo {\n    abstract readonly injector: Injector;\n    abstract readonly component: any;\n    abstract readonly providerTokens: any[];\n    abstract readonly references: {\n        [key: string]: any;\n    };\n    abstract readonly context: any;\n    abstract readonly source: string;\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n */\nexport interface DirectRenderer {\n    remove(node: any): void;\n    appendChild(node: any, parent: any): void;\n    insertBefore(node: any, refNode: any): void;\n    nextSibling(node: any): any;\n    parentElement(node: any): any;\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n */\nexport declare abstract class Renderer {\n    abstract selectRootElement(selectorOrNode: string | any, debugInfo?: RenderDebugInfo): any;\n    abstract createElement(parentElement: any, name: string, debugInfo?: RenderDebugInfo): any;\n    abstract createViewRoot(hostElement: any): any;\n    abstract createTemplateAnchor(parentElement: any, debugInfo?: RenderDebugInfo): any;\n    abstract createText(parentElement: any, value: string, debugInfo?: RenderDebugInfo): any;\n    abstract projectNodes(parentElement: any, nodes: any[]): void;\n    abstract attachViewAfter(node: any, viewRootNodes: any[]): void;\n    abstract detachView(viewRootNodes: any[]): void;\n    abstract destroyView(hostElement: any, viewAllNodes: any[]): void;\n    abstract listen(renderElement: any, name: string, callback: Function): Function;\n    abstract listenGlobal(target: string, name: string, callback: Function): Function;\n    abstract setElementProperty(renderElement: any, propertyName: string, propertyValue: any): void;\n    abstract setElementAttribute(renderElement: any, attributeName: string, attributeValue?: string): void;\n    /**\n     * Used only in debug mode to serialize property changes to dom nodes as attributes.\n     */\n    abstract setBindingDebugInfo(renderElement: any, propertyName: string, propertyValue: string): void;\n    abstract setElementClass(renderElement: any, className: string, isAdd: boolean): void;\n    abstract setElementStyle(renderElement: any, styleName: string, styleValue?: string): void;\n    abstract invokeElementMethod(renderElement: any, methodName: string, args?: any[]): void;\n    abstract setText(renderNode: any, text: string): void;\n    abstract animate(element: any, startingStyles: any, keyframes: any[], duration: number, delay: number, easing: string, previousPlayers?: any[]): any;\n}\nexport declare const Renderer2Interceptor: InjectionToken<Renderer2[]>;\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {@link Renderer#setElementProperty setElementProperty} or\n * {@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n */\nexport declare abstract class RootRenderer {\n    abstract renderComponent(componentType: RenderComponentType): Renderer;\n}\n/**\n * Used by `RendererFactory2` to associate custom rendering data and styles\n * with a rendering implementation.\n *  @experimental\n */\nexport interface RendererType2 {\n    /**\n     * A unique identifying string for the new renderer, used when creating\n     * unique styles for encapsulation.\n     */\n    id: string;\n    /**\n     * The view encapsulation type, which determines how styles are applied to\n     * DOM elements. One of\n     * - `Emulated` (default): Emulate native scoping of styles.\n     * - `Native`: Use the native encapsulation mechanism of the renderer.\n     * - `ShadowDom`: Use modern [Shadow\n     * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * create a ShadowRoot for component's host element.\n     * - `None`: Do not provide any template or style encapsulation.\n     */\n    encapsulation: ViewEncapsulation;\n    /**\n     * Defines CSS styles to be stored on a renderer instance.\n     */\n    styles: (string | any[])[];\n    /**\n     * Defines arbitrary developer-defined data to be stored on a renderer instance.\n     * This is useful for renderers that delegate to other renderers.\n     */\n    data: {\n        [kind: string]: any;\n    };\n}\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * @experimental\n */\nexport declare abstract class RendererFactory2 {\n    /**\n     * Creates and initializes a custom renderer for a host DOM element.\n     * @param hostElement The element to render.\n     * @param type The base class to implement.\n     * @returns The new custom renderer instance.\n     */\n    abstract createRenderer(hostElement: any, type: RendererType2 | null): Renderer2;\n    /**\n     * A callback invoked when rendering has begun.\n     */\n    abstract begin?(): void;\n    /**\n     * A callback invoked when rendering has completed.\n     */\n    abstract end?(): void;\n    /**\n     * Use with animations test-only mode. Notifies the test when rendering has completed.\n     * @returns The asynchronous result of the developer-defined function.\n     */\n    abstract whenRenderingDone?(): Promise<any>;\n}\n/**\n * Flags for renderer-specific style modifiers.\n * @experimental\n */\nexport declare enum RendererStyleFlags2 {\n    /**\n     * Marks a style as important.\n     */\n    Important = 1,\n    /**\n     * Marks a style as using dash case naming (this-is-dash-case).\n     */\n    DashCase = 2\n}\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * @experimental\n */\nexport declare abstract class Renderer2 {\n    /**\n     * Use to store arbitrary developer-defined data on a renderer instance,\n     * as an object containing key-value pairs.\n     * This is useful for renderers that delegate to other renderers.\n     */\n    abstract readonly data: {\n        [key: string]: any;\n    };\n    /**\n     * Implement this callback to destroy the renderer or the host element.\n     */\n    abstract destroy(): void;\n    /**\n     * Implement this callback to create an instance of the host element.\n     * @param name An identifying name for the new element, unique within the namespace.\n     * @param namespace The namespace for the new element.\n     * @returns The new element.\n     */\n    abstract createElement(name: string, namespace?: string | null): any;\n    /**\n     * Implement this callback to add a comment to the DOM of the host element.\n     * @param value The comment text.\n     * @returns The modified element.\n     */\n    abstract createComment(value: string): any;\n    /**\n     * Implement this callback to add text to the DOM of the host element.\n     * @param value The text string.\n     * @returns The modified element.\n     */\n    abstract createText(value: string): any;\n    /**\n     * If null or undefined, the view engine won't call it.\n     * This is used as a performance optimization for production mode.\n     */\n    destroyNode: ((node: any) => void) | null;\n    /**\n     * Appends a child to a given parent node in the host element DOM.\n     * @param parent The parent node.\n     * @param newChild The new child node.\n     */\n    abstract appendChild(parent: any, newChild: any): void;\n    /**\n     * Implement this callback to insert a child node at a given position in a parent node\n     * in the host element DOM.\n     * @param parent The parent node.\n     * @param newChild The new child nodes.\n     * @param refChild The existing child node that should precede the new node.\n     */\n    abstract insertBefore(parent: any, newChild: any, refChild: any): void;\n    /**\n     * Implement this callback to remove a child node from the host element's DOM.\n     * @param parent The parent node.\n     * @param oldChild The child node to remove.\n     */\n    abstract removeChild(parent: any, oldChild: any): void;\n    /**\n     * Implement this callback to prepare an element to be bootstrapped\n     * as a root element, and return the element instance.\n     * @param selectorOrNode The DOM element.\n     * @param preserveContent Whether the contents of the root element\n     * should be preserved, or cleared upon bootstrap (default behavior).\n     * Use with `ViewEncapsulation.ShadowDom` to allow simple native\n     * content projection via `<slot>` elements.\n     * @returns The root element.\n     */\n    abstract selectRootElement(selectorOrNode: string | any, preserveContent?: boolean): any;\n    /**\n     * Implement this callback to get the parent of a given node\n     * in the host element's DOM.\n     * @param node The child node to query.\n     * @returns The parent node, or null if there is no parent.\n     * For WebWorkers, always returns true.\n     * This is because the check is synchronous,\n     * and the caller can't rely on checking for null.\n     */\n    abstract parentNode(node: any): any;\n    /**\n     * Implement this callback to get the next sibling node of a given node\n     * in the host element's DOM.\n     * @returns The sibling node, or null if there is no sibling.\n     * For WebWorkers, always returns a value.\n     * This is because the check is synchronous,\n     * and the caller can't rely on checking for null.\n     */\n    abstract nextSibling(node: any): any;\n    /**\n     * Implement this callback to set an attribute value for an element in the DOM.\n     * @param el The element.\n     * @param name The attribute name.\n     * @param value The new value.\n     * @param namespace The namespace.\n     */\n    abstract setAttribute(el: any, name: string, value: string, namespace?: string | null): void;\n    /**\n     * Implement this callback to remove an attribute from an element in the DOM.\n     * @param el The element.\n     * @param name The attribute name.\n     * @param namespace The namespace.\n     */\n    abstract removeAttribute(el: any, name: string, namespace?: string | null): void;\n    /**\n     * Implement this callback to add a class to an element in the DOM.\n     * @param el The element.\n     * @param name The class name.\n     */\n    abstract addClass(el: any, name: string): void;\n    /**\n     * Implement this callback to remove a class from an element in the DOM.\n     * @param el The element.\n     * @param name The class name.\n     */\n    abstract removeClass(el: any, name: string): void;\n    /**\n     * Implement this callback to set a CSS style for an element in the DOM.\n     * @param el The element.\n     * @param style The name of the style.\n     * @param value The new value.\n     * @param flags Flags for style variations. No flags are set by default.\n     */\n    abstract setStyle(el: any, style: string, value: any, flags?: RendererStyleFlags2): void;\n    /**\n     * Implement this callback to remove the value from a CSS style for an element in the DOM.\n     * @param el The element.\n     * @param style The name of the style.\n     * @param flags Flags for style variations to remove, if set. ???\n     */\n    abstract removeStyle(el: any, style: string, flags?: RendererStyleFlags2): void;\n    /**\n     * Implement this callback to set the value of a property of an element in the DOM.\n     * @param el The element.\n     * @param name The property name.\n     * @param value The new value.\n     */\n    abstract setProperty(el: any, name: string, value: any): void;\n    /**\n     * Implement this callback to set the value of a node in the host element.\n     * @param node The node.\n     * @param value The new value.\n     */\n    abstract setValue(node: any, value: string): void;\n    /**\n     * Implement this callback to start an event listener.\n     * @param target The context in which to listen for events. Can be\n     * the entire window or document, the body of the document, or a specific\n     * DOM element.\n     * @param eventName The event to listen for.\n     * @param callback A handler function to invoke when the event occurs.\n     * @returns An \"unlisten\" function for disposing of this handler.\n     */\n    abstract listen(target: 'window' | 'document' | 'body' | any, eventName: string, callback: (event: any) => boolean | void): () => void;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/render3/view/api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewEncapsulation } from '../../core';\nimport * as o from '../../output/output_ast';\nimport { ParseSourceSpan } from '../../parse_util';\nimport * as t from '../r3_ast';\nimport { R3DependencyMetadata } from '../r3_factory';\n/**\n * Information needed to compile a directive for the render3 runtime.\n */\nexport interface R3DirectiveMetadata {\n    /**\n     * Name of the directive type.\n     */\n    name: string;\n    /**\n     * An expression representing a reference to the directive itself.\n     */\n    type: o.Expression;\n    /**\n     * Number of generic type parameters of the type itself.\n     */\n    typeArgumentCount: number;\n    /**\n     * A source span for the directive type.\n     */\n    typeSourceSpan: ParseSourceSpan;\n    /**\n     * Dependencies of the directive's constructor.\n     */\n    deps: R3DependencyMetadata[] | null;\n    /**\n     * Unparsed selector of the directive, or `null` if there was no selector.\n     */\n    selector: string | null;\n    /**\n     * Information about the content queries made by the directive.\n     */\n    queries: R3QueryMetadata[];\n    /**\n     * Mappings indicating how the directive interacts with its host element (host bindings,\n     * listeners, etc).\n     */\n    host: {\n        /**\n         * A mapping of attribute binding keys to unparsed expressions.\n         */\n        attributes: {\n            [key: string]: string;\n        };\n        /**\n         * A mapping of event binding keys to unparsed expressions.\n         */\n        listeners: {\n            [key: string]: string;\n        };\n        /**\n         * A mapping of property binding keys to unparsed expressions.\n         */\n        properties: {\n            [key: string]: string;\n        };\n    };\n    /**\n     * Information about usage of specific lifecycle events which require special treatment in the\n     * code generator.\n     */\n    lifecycle: {\n        /**\n         * Whether the directive uses NgOnChanges.\n         */\n        usesOnChanges: boolean;\n    };\n    /**\n     * A mapping of input field names to the property names.\n     */\n    inputs: {\n        [field: string]: string;\n    };\n    /**\n     * A mapping of output field names to the property names.\n     */\n    outputs: {\n        [field: string]: string;\n    };\n    /**\n     * Whether or not the component or directive inherits from another class\n     */\n    usesInheritance: boolean;\n    /**\n     * Reference name under which to export the directive's type in a template,\n     * if any.\n     */\n    exportAs: string | null;\n}\n/**\n * Information needed to compile a component for the render3 runtime.\n */\nexport interface R3ComponentMetadata extends R3DirectiveMetadata {\n    /**\n     * Information about the component's template.\n     */\n    template: {\n        /**\n         * Parsed nodes of the template.\n         */\n        nodes: t.Node[];\n        /**\n         * Whether the template includes <ng-content> tags.\n         */\n        hasNgContent: boolean;\n        /**\n         * Selectors found in the <ng-content> tags in the template.\n         */\n        ngContentSelectors: string[];\n        /**\n         * Path to the .ts file in which this template's generated code will be included, relative to\n         * the compilation root. This will be used to generate identifiers that need to be globally\n         * unique in certain contexts (such as g3).\n         */\n        relativeContextFilePath: string;\n    };\n    /**\n     * Information about the view queries made by the component.\n     */\n    viewQueries: R3QueryMetadata[];\n    /**\n     * A map of pipe names to an expression referencing the pipe type which are in the scope of the\n     * compilation.\n     */\n    pipes: Map<string, o.Expression>;\n    /**\n     * A map of directive selectors to an expression referencing the directive type which are in the\n     * scope of the compilation.\n     */\n    directives: Map<string, o.Expression>;\n    /**\n     * Whether to wrap the 'directives' array, if one is generated, in a closure.\n     *\n     * This is done when the directives contain forward references.\n     */\n    wrapDirectivesInClosure: boolean;\n    /**\n     * A collection of styling data that will be applied and scoped to the component.\n     */\n    styles: string[];\n    /**\n     * An encapsulation policy for the template and CSS styles. One of:\n     * - `ViewEncapsulation.Native`: Use shadow roots. This works only if natively available on the\n     *   platform (note that this is marked the as the \"deprecated shadow DOM\" as of Angular v6.1.\n     * - `ViewEncapsulation.Emulated`: Use shimmed CSS that emulates the native behavior.\n     * - `ViewEncapsulation.None`: Use global CSS without any encapsulation.\n     * - `ViewEncapsulation.ShadowDom`: Use the latest ShadowDOM API to natively encapsulate styles\n     * into a shadow root.\n     */\n    encapsulation: ViewEncapsulation;\n    /**\n     * A collection of animation triggers that will be used in the component template.\n     */\n    animations: o.Expression | null;\n}\n/**\n * Information needed to compile a query (view or content).\n */\nexport interface R3QueryMetadata {\n    /**\n     * Name of the property on the class to update with query results.\n     */\n    propertyName: string;\n    /**\n     * Whether to read only the first matching result, or an array of results.\n     */\n    first: boolean;\n    /**\n     * Either an expression representing a type for the query predicate, or a set of string selectors.\n     */\n    predicate: o.Expression | string[];\n    /**\n     * Whether to include only direct children or all descendants.\n     */\n    descendants: boolean;\n    /**\n     * An expression representing a type to read from each matched node, or null if the node itself\n     * is to be returned.\n     */\n    read: o.Expression | null;\n}\n/**\n * Output of render3 directive compilation.\n */\nexport interface R3DirectiveDef {\n    expression: o.Expression;\n    type: o.Type;\n    statements: o.Statement[];\n}\n/**\n * Output of render3 component compilation.\n */\nexport interface R3ComponentDef {\n    expression: o.Expression;\n    type: o.Type;\n    statements: o.Statement[];\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/aot/util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare function ngfactoryFilePath(filePath: string, forceSourceFile?: boolean): string;\nexport declare function stripGeneratedFileSuffix(filePath: string): string;\nexport declare function isGeneratedFile(filePath: string): boolean;\nexport declare function splitTypescriptSuffix(path: string, forceSourceFile?: boolean): string[];\nexport declare function normalizeGenFileSuffix(srcFileSuffix: string): string;\nexport declare function summaryFileName(fileName: string): string;\nexport declare function summaryForJitFileName(fileName: string, forceSourceFile?: boolean): string;\nexport declare function stripSummaryForJitFileSuffix(filePath: string): string;\nexport declare function summaryForJitName(symbolName: string): string;\nexport declare function stripSummaryForJitNameSuffix(symbolName: string): string;\nexport declare function isLoweredSymbol(name: string): boolean;\nexport declare function createLoweredSymbol(id: number): string;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/expression_parser/lexer.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare enum TokenType {\n    Character = 0,\n    Identifier = 1,\n    Keyword = 2,\n    String = 3,\n    Operator = 4,\n    Number = 5,\n    Error = 6\n}\nexport declare class Lexer {\n    tokenize(text: string): Token[];\n}\nexport declare class Token {\n    index: number;\n    type: TokenType;\n    numValue: number;\n    strValue: string;\n    constructor(index: number, type: TokenType, numValue: number, strValue: string);\n    isCharacter(code: number): boolean;\n    isNumber(): boolean;\n    isString(): boolean;\n    isOperator(operater: string): boolean;\n    isIdentifier(): boolean;\n    isKeyword(): boolean;\n    isKeywordLet(): boolean;\n    isKeywordAs(): boolean;\n    isKeywordNull(): boolean;\n    isKeywordUndefined(): boolean;\n    isKeywordTrue(): boolean;\n    isKeywordFalse(): boolean;\n    isKeywordThis(): boolean;\n    isError(): boolean;\n    toNumber(): number;\n    toString(): string | null;\n}\nexport declare const EOF: Token;\nexport declare function isIdentifier(input: string): boolean;\nexport declare function isQuote(code: number): boolean;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/aot/partial_module.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as o from '../output/output_ast';\nexport interface PartialModule {\n    fileName: string;\n    statements: o.Statement[];\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/render3/r3_ast.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SecurityContext } from '../core';\nimport { AST, BindingType, BoundElementProperty, ParsedEvent } from '../expression_parser/ast';\nimport { ParseSourceSpan } from '../parse_util';\nexport interface Node {\n    sourceSpan: ParseSourceSpan;\n    visit<Result>(visitor: Visitor<Result>): Result;\n}\nexport declare class Text implements Node {\n    value: string;\n    sourceSpan: ParseSourceSpan;\n    constructor(value: string, sourceSpan: ParseSourceSpan);\n    visit<Result>(visitor: Visitor<Result>): Result;\n}\nexport declare class BoundText implements Node {\n    value: AST;\n    sourceSpan: ParseSourceSpan;\n    constructor(value: AST, sourceSpan: ParseSourceSpan);\n    visit<Result>(visitor: Visitor<Result>): Result;\n}\nexport declare class TextAttribute implements Node {\n    name: string;\n    value: string;\n    sourceSpan: ParseSourceSpan;\n    valueSpan?: ParseSourceSpan | undefined;\n    constructor(name: string, value: string, sourceSpan: ParseSourceSpan, valueSpan?: ParseSourceSpan | undefined);\n    visit<Result>(visitor: Visitor<Result>): Result;\n}\nexport declare class BoundAttribute implements Node {\n    name: string;\n    type: BindingType;\n    securityContext: SecurityContext;\n    value: AST;\n    unit: string | null;\n    sourceSpan: ParseSourceSpan;\n    constructor(name: string, type: BindingType, securityContext: SecurityContext, value: AST, unit: string | null, sourceSpan: ParseSourceSpan);\n    static fromBoundElementProperty(prop: BoundElementProperty): BoundAttribute;\n    visit<Result>(visitor: Visitor<Result>): Result;\n}\nexport declare class BoundEvent implements Node {\n    name: string;\n    handler: AST;\n    target: string | null;\n    phase: string | null;\n    sourceSpan: ParseSourceSpan;\n    constructor(name: string, handler: AST, target: string | null, phase: string | null, sourceSpan: ParseSourceSpan);\n    static fromParsedEvent(event: ParsedEvent): BoundEvent;\n    visit<Result>(visitor: Visitor<Result>): Result;\n}\nexport declare class Element implements Node {\n    name: string;\n    attributes: TextAttribute[];\n    inputs: BoundAttribute[];\n    outputs: BoundEvent[];\n    children: Node[];\n    references: Reference[];\n    sourceSpan: ParseSourceSpan;\n    startSourceSpan: ParseSourceSpan | null;\n    endSourceSpan: ParseSourceSpan | null;\n    constructor(name: string, attributes: TextAttribute[], inputs: BoundAttribute[], outputs: BoundEvent[], children: Node[], references: Reference[], sourceSpan: ParseSourceSpan, startSourceSpan: ParseSourceSpan | null, endSourceSpan: ParseSourceSpan | null);\n    visit<Result>(visitor: Visitor<Result>): Result;\n}\nexport declare class Template implements Node {\n    attributes: TextAttribute[];\n    inputs: BoundAttribute[];\n    outputs: BoundEvent[];\n    children: Node[];\n    references: Reference[];\n    variables: Variable[];\n    sourceSpan: ParseSourceSpan;\n    startSourceSpan: ParseSourceSpan | null;\n    endSourceSpan: ParseSourceSpan | null;\n    constructor(attributes: TextAttribute[], inputs: BoundAttribute[], outputs: BoundEvent[], children: Node[], references: Reference[], variables: Variable[], sourceSpan: ParseSourceSpan, startSourceSpan: ParseSourceSpan | null, endSourceSpan: ParseSourceSpan | null);\n    visit<Result>(visitor: Visitor<Result>): Result;\n}\nexport declare class Content implements Node {\n    selectorIndex: number;\n    attributes: TextAttribute[];\n    sourceSpan: ParseSourceSpan;\n    constructor(selectorIndex: number, attributes: TextAttribute[], sourceSpan: ParseSourceSpan);\n    visit<Result>(visitor: Visitor<Result>): Result;\n}\nexport declare class Variable implements Node {\n    name: string;\n    value: string;\n    sourceSpan: ParseSourceSpan;\n    constructor(name: string, value: string, sourceSpan: ParseSourceSpan);\n    visit<Result>(visitor: Visitor<Result>): Result;\n}\nexport declare class Reference implements Node {\n    name: string;\n    value: string;\n    sourceSpan: ParseSourceSpan;\n    constructor(name: string, value: string, sourceSpan: ParseSourceSpan);\n    visit<Result>(visitor: Visitor<Result>): Result;\n}\nexport interface Visitor<Result = any> {\n    visit?(node: Node): Result;\n    visitElement(element: Element): Result;\n    visitTemplate(template: Template): Result;\n    visitContent(content: Content): Result;\n    visitVariable(variable: Variable): Result;\n    visitReference(reference: Reference): Result;\n    visitTextAttribute(attribute: TextAttribute): Result;\n    visitBoundAttribute(attribute: BoundAttribute): Result;\n    visitBoundEvent(attribute: BoundEvent): Result;\n    visitText(text: Text): Result;\n    visitBoundText(text: BoundText): Result;\n}\nexport declare class NullVisitor implements Visitor<void> {\n    visitElement(element: Element): void;\n    visitTemplate(template: Template): void;\n    visitContent(content: Content): void;\n    visitVariable(variable: Variable): void;\n    visitReference(reference: Reference): void;\n    visitTextAttribute(attribute: TextAttribute): void;\n    visitBoundAttribute(attribute: BoundAttribute): void;\n    visitBoundEvent(attribute: BoundEvent): void;\n    visitText(text: Text): void;\n    visitBoundText(text: BoundText): void;\n}\nexport declare class RecursiveVisitor implements Visitor<void> {\n    visitElement(element: Element): void;\n    visitTemplate(template: Template): void;\n    visitContent(content: Content): void;\n    visitVariable(variable: Variable): void;\n    visitReference(reference: Reference): void;\n    visitTextAttribute(attribute: TextAttribute): void;\n    visitBoundAttribute(attribute: BoundAttribute): void;\n    visitBoundEvent(attribute: BoundEvent): void;\n    visitText(text: Text): void;\n    visitBoundText(text: BoundText): void;\n}\nexport declare class TransformVisitor implements Visitor<Node> {\n    visitElement(element: Element): Node;\n    visitTemplate(template: Template): Node;\n    visitContent(content: Content): Node;\n    visitVariable(variable: Variable): Node;\n    visitReference(reference: Reference): Node;\n    visitTextAttribute(attribute: TextAttribute): Node;\n    visitBoundAttribute(attribute: BoundAttribute): Node;\n    visitBoundEvent(attribute: BoundEvent): Node;\n    visitText(text: Text): Node;\n    visitBoundText(text: BoundText): Node;\n}\nexport declare function visitAll<Result>(visitor: Visitor<Result>, nodes: Node[]): Result[];\nexport declare function transformAll<Result extends Node>(visitor: Visitor<Node>, nodes: Result[]): Result[];\n"
  },
  {
    "path": "node_modules/@angular/common/src/viewport_scroller.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Manages the scroll position.\n */\nexport declare abstract class ViewportScroller {\n    /** @nocollapse */\n    static ngInjectableDef: never;\n    /**\n     * Configures the top offset used when scrolling to an anchor.\n     *\n     * When given a tuple with two number, the service will always use the numbers.\n     * When given a function, the service will invoke the function every time it restores scroll\n     * position.\n     */\n    abstract setOffset(offset: [number, number] | (() => [number, number])): void;\n    /**\n     * Returns the current scroll position.\n     */\n    abstract getScrollPosition(): [number, number];\n    /**\n     * Sets the scroll position.\n     */\n    abstract scrollToPosition(position: [number, number]): void;\n    /**\n     * Scrolls to the provided anchor.\n     */\n    abstract scrollToAnchor(anchor: string): void;\n    /**\n     *\n     * Disables automatic scroll restoration provided by the browser.\n     *\n     * See also [window.history.scrollRestoration\n     * info](https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration)\n     */\n    abstract setHistoryScrollRestoration(scrollRestoration: 'auto' | 'manual'): void;\n}\n/**\n * Manages the scroll position.\n */\nexport declare class BrowserViewportScroller implements ViewportScroller {\n    private document;\n    private window;\n    private offset;\n    constructor(document: any, window: any);\n    /**\n     * Configures the top offset used when scrolling to an anchor.\n     *\n     * * When given a number, the service will always use the number.\n     * * When given a function, the service will invoke the function every time it restores scroll\n     * position.\n     */\n    setOffset(offset: [number, number] | (() => [number, number])): void;\n    /**\n     * Returns the current scroll position.\n     */\n    getScrollPosition(): [number, number];\n    /**\n     * Sets the scroll position.\n     */\n    scrollToPosition(position: [number, number]): void;\n    /**\n     * Scrolls to the provided anchor.\n     */\n    scrollToAnchor(anchor: string): void;\n    /**\n     * Disables automatic scroll restoration provided by the browser.\n     */\n    setHistoryScrollRestoration(scrollRestoration: 'auto' | 'manual'): void;\n    private scrollToElement;\n    /**\n     * We only support scroll restoration when we can get a hold of window.\n     * This means that we do not support this behavior when running in a web worker.\n     *\n     * Lifting this restriction right now would require more changes in the dom adapter.\n     * Since webworkers aren't widely used, we will lift it once RouterScroller is\n     * battle-tested.\n     */\n    private supportScrollRestoration;\n}\n/**\n * Provides an empty implementation of the viewport scroller. This will\n * live in @angular/common as it will be used by both platform-server and platform-webworker.\n */\nexport declare class NullViewportScroller implements ViewportScroller {\n    /**\n     * Empty implementation\n     */\n    setOffset(offset: [number, number] | (() => [number, number])): void;\n    /**\n     * Empty implementation\n     */\n    getScrollPosition(): [number, number];\n    /**\n     * Empty implementation\n     */\n    scrollToPosition(position: [number, number]): void;\n    /**\n     * Empty implementation\n     */\n    scrollToAnchor(anchor: string): void;\n    /**\n     * Empty implementation\n     */\n    setHistoryScrollRestoration(scrollRestoration: 'auto' | 'manual'): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/platform_id.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare const PLATFORM_BROWSER_ID = \"browser\";\nexport declare const PLATFORM_SERVER_ID = \"server\";\nexport declare const PLATFORM_WORKER_APP_ID = \"browserWorkerApp\";\nexport declare const PLATFORM_WORKER_UI_ID = \"browserWorkerUi\";\n/**\n * Returns whether a platform id represents a browser platform.\n * @experimental\n */\nexport declare function isPlatformBrowser(platformId: Object): boolean;\n/**\n * Returns whether a platform id represents a server platform.\n * @experimental\n */\nexport declare function isPlatformServer(platformId: Object): boolean;\n/**\n * Returns whether a platform id represents a web worker app platform.\n * @experimental\n */\nexport declare function isPlatformWorkerApp(platformId: Object): boolean;\n/**\n * Returns whether a platform id represents a web worker UI platform.\n * @experimental\n */\nexport declare function isPlatformWorkerUi(platformId: Object): boolean;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/aot/compiler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileInjectableMetadata, CompileNgModuleMetadata, CompileShallowModuleMetadata } from '../compile_metadata';\nimport { CompilerConfig } from '../config';\nimport { MessageBundle } from '../i18n/message_bundle';\nimport { InjectableCompiler } from '../injectable_compiler';\nimport { CompileMetadataResolver } from '../metadata_resolver';\nimport { NgModuleCompiler } from '../ng_module_compiler';\nimport { OutputEmitter } from '../output/abstract_emitter';\nimport { StyleCompiler } from '../style_compiler';\nimport { SummaryResolver } from '../summary_resolver';\nimport { TemplateParser } from '../template_parser/template_parser';\nimport { TypeCheckCompiler } from '../view_compiler/type_check_compiler';\nimport { ViewCompiler } from '../view_compiler/view_compiler';\nimport { AotCompilerHost } from './compiler_host';\nimport { AotCompilerOptions } from './compiler_options';\nimport { GeneratedFile } from './generated_file';\nimport { LazyRoute } from './lazy_routes';\nimport { PartialModule } from './partial_module';\nimport { StaticReflector } from './static_reflector';\nimport { StaticSymbol } from './static_symbol';\nimport { StaticSymbolResolver } from './static_symbol_resolver';\nexport declare class AotCompiler {\n    private _config;\n    private _options;\n    private _host;\n    readonly reflector: StaticReflector;\n    private _metadataResolver;\n    private _templateParser;\n    private _styleCompiler;\n    private _viewCompiler;\n    private _typeCheckCompiler;\n    private _ngModuleCompiler;\n    private _injectableCompiler;\n    private _outputEmitter;\n    private _summaryResolver;\n    private _symbolResolver;\n    private _templateAstCache;\n    private _analyzedFiles;\n    private _analyzedFilesForInjectables;\n    constructor(_config: CompilerConfig, _options: AotCompilerOptions, _host: AotCompilerHost, reflector: StaticReflector, _metadataResolver: CompileMetadataResolver, _templateParser: TemplateParser, _styleCompiler: StyleCompiler, _viewCompiler: ViewCompiler, _typeCheckCompiler: TypeCheckCompiler, _ngModuleCompiler: NgModuleCompiler, _injectableCompiler: InjectableCompiler, _outputEmitter: OutputEmitter, _summaryResolver: SummaryResolver<StaticSymbol>, _symbolResolver: StaticSymbolResolver);\n    clearCache(): void;\n    analyzeModulesSync(rootFiles: string[]): NgAnalyzedModules;\n    analyzeModulesAsync(rootFiles: string[]): Promise<NgAnalyzedModules>;\n    private _analyzeFile;\n    private _analyzeFileForInjectables;\n    findGeneratedFileNames(fileName: string): string[];\n    emitBasicStub(genFileName: string, originalFileName?: string): GeneratedFile;\n    emitTypeCheckStub(genFileName: string, originalFileName: string): GeneratedFile | null;\n    loadFilesAsync(fileNames: string[], tsFiles: string[]): Promise<{\n        analyzedModules: NgAnalyzedModules;\n        analyzedInjectables: NgAnalyzedFileWithInjectables[];\n    }>;\n    loadFilesSync(fileNames: string[], tsFiles: string[]): {\n        analyzedModules: NgAnalyzedModules;\n        analyzedInjectables: NgAnalyzedFileWithInjectables[];\n    };\n    private _createNgFactoryStub;\n    private _externalIdentifierReferences;\n    private _createTypeCheckBlock;\n    emitMessageBundle(analyzeResult: NgAnalyzedModules, locale: string | null): MessageBundle;\n    emitAllPartialModules({ ngModuleByPipeOrDirective, files }: NgAnalyzedModules, r3Files: NgAnalyzedFileWithInjectables[]): PartialModule[];\n    private _compileShallowModules;\n    private _compilePartialModule;\n    emitAllPartialModules2(files: NgAnalyzedFileWithInjectables[]): PartialModule[];\n    private _emitPartialModule2;\n    emitAllImpls(analyzeResult: NgAnalyzedModules): GeneratedFile[];\n    private _compileImplFile;\n    private _createSummary;\n    private _compileModule;\n    private _compileComponentFactory;\n    private _compileComponent;\n    private _parseTemplate;\n    private _createOutputContext;\n    private _fileNameToModuleName;\n    private _codegenStyles;\n    private _codegenSourceModule;\n    listLazyRoutes(entryRoute?: string, analyzedModules?: NgAnalyzedModules): LazyRoute[];\n}\nexport interface NgAnalyzedModules {\n    ngModules: CompileNgModuleMetadata[];\n    ngModuleByPipeOrDirective: Map<StaticSymbol, CompileNgModuleMetadata>;\n    files: NgAnalyzedFile[];\n    symbolsMissingModule?: StaticSymbol[];\n}\nexport interface NgAnalyzedFileWithInjectables {\n    fileName: string;\n    injectables: CompileInjectableMetadata[];\n    shallowModules: CompileShallowModuleMetadata[];\n}\nexport interface NgAnalyzedFile {\n    fileName: string;\n    directives: StaticSymbol[];\n    pipes: StaticSymbol[];\n    ngModules: CompileNgModuleMetadata[];\n    injectables: CompileInjectableMetadata[];\n    exportsNonSourceFiles: boolean;\n}\nexport interface NgAnalyzeModulesHost {\n    isSourceFile(filePath: string): boolean;\n}\nexport declare function analyzeNgModules(fileNames: string[], host: NgAnalyzeModulesHost, staticSymbolResolver: StaticSymbolResolver, metadataResolver: CompileMetadataResolver): NgAnalyzedModules;\nexport declare function analyzeAndValidateNgModules(fileNames: string[], host: NgAnalyzeModulesHost, staticSymbolResolver: StaticSymbolResolver, metadataResolver: CompileMetadataResolver): NgAnalyzedModules;\nexport declare function analyzeFile(host: NgAnalyzeModulesHost, staticSymbolResolver: StaticSymbolResolver, metadataResolver: CompileMetadataResolver, fileName: string): NgAnalyzedFile;\nexport declare function analyzeFileForInjectables(host: NgAnalyzeModulesHost, staticSymbolResolver: StaticSymbolResolver, metadataResolver: CompileMetadataResolver, fileName: string): NgAnalyzedFileWithInjectables;\nexport declare function mergeAnalyzedFiles(analyzedFiles: NgAnalyzedFile[]): NgAnalyzedModules;\n"
  },
  {
    "path": "node_modules/@angular/compiler/testing/src/ng_module_resolver_mock.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileReflector, NgModuleResolver, core } from '@angular/compiler';\nexport declare class MockNgModuleResolver extends NgModuleResolver {\n    private _ngModules;\n    constructor(reflector: CompileReflector);\n    /**\n     * Overrides the {@link NgModule} for a module.\n     */\n    setNgModule(type: core.Type, metadata: core.NgModule): void;\n    /**\n     * Returns the {@link NgModule} for a module:\n     * - Set the {@link NgModule} to the overridden view when it exists or fallback to the\n     * default\n     * `NgModuleResolver`, see `setNgModule`.\n     */\n    resolve(type: core.Type, throwIfNotFound?: boolean): core.NgModule;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/expression_parser/ast.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SecurityContext } from '../core';\nimport { ParseSourceSpan } from '../parse_util';\nexport declare class ParserError {\n    input: string;\n    errLocation: string;\n    ctxLocation?: any;\n    message: string;\n    constructor(message: string, input: string, errLocation: string, ctxLocation?: any);\n}\nexport declare class ParseSpan {\n    start: number;\n    end: number;\n    constructor(start: number, end: number);\n}\nexport declare class AST {\n    span: ParseSpan;\n    constructor(span: ParseSpan);\n    visit(visitor: AstVisitor, context?: any): any;\n    toString(): string;\n}\n/**\n * Represents a quoted expression of the form:\n *\n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n *\n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\nexport declare class Quote extends AST {\n    prefix: string;\n    uninterpretedExpression: string;\n    location: any;\n    constructor(span: ParseSpan, prefix: string, uninterpretedExpression: string, location: any);\n    visit(visitor: AstVisitor, context?: any): any;\n    toString(): string;\n}\nexport declare class EmptyExpr extends AST {\n    visit(visitor: AstVisitor, context?: any): void;\n}\nexport declare class ImplicitReceiver extends AST {\n    visit(visitor: AstVisitor, context?: any): any;\n}\n/**\n * Multiple expressions separated by a semicolon.\n */\nexport declare class Chain extends AST {\n    expressions: any[];\n    constructor(span: ParseSpan, expressions: any[]);\n    visit(visitor: AstVisitor, context?: any): any;\n}\nexport declare class Conditional extends AST {\n    condition: AST;\n    trueExp: AST;\n    falseExp: AST;\n    constructor(span: ParseSpan, condition: AST, trueExp: AST, falseExp: AST);\n    visit(visitor: AstVisitor, context?: any): any;\n}\nexport declare class PropertyRead extends AST {\n    receiver: AST;\n    name: string;\n    constructor(span: ParseSpan, receiver: AST, name: string);\n    visit(visitor: AstVisitor, context?: any): any;\n}\nexport declare class PropertyWrite extends AST {\n    receiver: AST;\n    name: string;\n    value: AST;\n    constructor(span: ParseSpan, receiver: AST, name: string, value: AST);\n    visit(visitor: AstVisitor, context?: any): any;\n}\nexport declare class SafePropertyRead extends AST {\n    receiver: AST;\n    name: string;\n    constructor(span: ParseSpan, receiver: AST, name: string);\n    visit(visitor: AstVisitor, context?: any): any;\n}\nexport declare class KeyedRead extends AST {\n    obj: AST;\n    key: AST;\n    constructor(span: ParseSpan, obj: AST, key: AST);\n    visit(visitor: AstVisitor, context?: any): any;\n}\nexport declare class KeyedWrite extends AST {\n    obj: AST;\n    key: AST;\n    value: AST;\n    constructor(span: ParseSpan, obj: AST, key: AST, value: AST);\n    visit(visitor: AstVisitor, context?: any): any;\n}\nexport declare class BindingPipe extends AST {\n    exp: AST;\n    name: string;\n    args: any[];\n    constructor(span: ParseSpan, exp: AST, name: string, args: any[]);\n    visit(visitor: AstVisitor, context?: any): any;\n}\nexport declare class LiteralPrimitive extends AST {\n    value: any;\n    constructor(span: ParseSpan, value: any);\n    visit(visitor: AstVisitor, context?: any): any;\n}\nexport declare class LiteralArray extends AST {\n    expressions: any[];\n    constructor(span: ParseSpan, expressions: any[]);\n    visit(visitor: AstVisitor, context?: any): any;\n}\nexport declare type LiteralMapKey = {\n    key: string;\n    quoted: boolean;\n};\nexport declare class LiteralMap extends AST {\n    keys: LiteralMapKey[];\n    values: any[];\n    constructor(span: ParseSpan, keys: LiteralMapKey[], values: any[]);\n    visit(visitor: AstVisitor, context?: any): any;\n}\nexport declare class Interpolation extends AST {\n    strings: any[];\n    expressions: any[];\n    constructor(span: ParseSpan, strings: any[], expressions: any[]);\n    visit(visitor: AstVisitor, context?: any): any;\n}\nexport declare class Binary extends AST {\n    operation: string;\n    left: AST;\n    right: AST;\n    constructor(span: ParseSpan, operation: string, left: AST, right: AST);\n    visit(visitor: AstVisitor, context?: any): any;\n}\nexport declare class PrefixNot extends AST {\n    expression: AST;\n    constructor(span: ParseSpan, expression: AST);\n    visit(visitor: AstVisitor, context?: any): any;\n}\nexport declare class NonNullAssert extends AST {\n    expression: AST;\n    constructor(span: ParseSpan, expression: AST);\n    visit(visitor: AstVisitor, context?: any): any;\n}\nexport declare class MethodCall extends AST {\n    receiver: AST;\n    name: string;\n    args: any[];\n    constructor(span: ParseSpan, receiver: AST, name: string, args: any[]);\n    visit(visitor: AstVisitor, context?: any): any;\n}\nexport declare class SafeMethodCall extends AST {\n    receiver: AST;\n    name: string;\n    args: any[];\n    constructor(span: ParseSpan, receiver: AST, name: string, args: any[]);\n    visit(visitor: AstVisitor, context?: any): any;\n}\nexport declare class FunctionCall extends AST {\n    target: AST | null;\n    args: any[];\n    constructor(span: ParseSpan, target: AST | null, args: any[]);\n    visit(visitor: AstVisitor, context?: any): any;\n}\nexport declare class ASTWithSource extends AST {\n    ast: AST;\n    source: string | null;\n    location: string;\n    errors: ParserError[];\n    constructor(ast: AST, source: string | null, location: string, errors: ParserError[]);\n    visit(visitor: AstVisitor, context?: any): any;\n    toString(): string;\n}\nexport declare class TemplateBinding {\n    span: ParseSpan;\n    key: string;\n    keyIsVar: boolean;\n    name: string;\n    expression: ASTWithSource | null;\n    constructor(span: ParseSpan, key: string, keyIsVar: boolean, name: string, expression: ASTWithSource | null);\n}\nexport interface AstVisitor {\n    visitBinary(ast: Binary, context: any): any;\n    visitChain(ast: Chain, context: any): any;\n    visitConditional(ast: Conditional, context: any): any;\n    visitFunctionCall(ast: FunctionCall, context: any): any;\n    visitImplicitReceiver(ast: ImplicitReceiver, context: any): any;\n    visitInterpolation(ast: Interpolation, context: any): any;\n    visitKeyedRead(ast: KeyedRead, context: any): any;\n    visitKeyedWrite(ast: KeyedWrite, context: any): any;\n    visitLiteralArray(ast: LiteralArray, context: any): any;\n    visitLiteralMap(ast: LiteralMap, context: any): any;\n    visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any;\n    visitMethodCall(ast: MethodCall, context: any): any;\n    visitPipe(ast: BindingPipe, context: any): any;\n    visitPrefixNot(ast: PrefixNot, context: any): any;\n    visitNonNullAssert(ast: NonNullAssert, context: any): any;\n    visitPropertyRead(ast: PropertyRead, context: any): any;\n    visitPropertyWrite(ast: PropertyWrite, context: any): any;\n    visitQuote(ast: Quote, context: any): any;\n    visitSafeMethodCall(ast: SafeMethodCall, context: any): any;\n    visitSafePropertyRead(ast: SafePropertyRead, context: any): any;\n    visit?(ast: AST, context?: any): any;\n}\nexport declare class NullAstVisitor implements AstVisitor {\n    visitBinary(ast: Binary, context: any): any;\n    visitChain(ast: Chain, context: any): any;\n    visitConditional(ast: Conditional, context: any): any;\n    visitFunctionCall(ast: FunctionCall, context: any): any;\n    visitImplicitReceiver(ast: ImplicitReceiver, context: any): any;\n    visitInterpolation(ast: Interpolation, context: any): any;\n    visitKeyedRead(ast: KeyedRead, context: any): any;\n    visitKeyedWrite(ast: KeyedWrite, context: any): any;\n    visitLiteralArray(ast: LiteralArray, context: any): any;\n    visitLiteralMap(ast: LiteralMap, context: any): any;\n    visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any;\n    visitMethodCall(ast: MethodCall, context: any): any;\n    visitPipe(ast: BindingPipe, context: any): any;\n    visitPrefixNot(ast: PrefixNot, context: any): any;\n    visitNonNullAssert(ast: NonNullAssert, context: any): any;\n    visitPropertyRead(ast: PropertyRead, context: any): any;\n    visitPropertyWrite(ast: PropertyWrite, context: any): any;\n    visitQuote(ast: Quote, context: any): any;\n    visitSafeMethodCall(ast: SafeMethodCall, context: any): any;\n    visitSafePropertyRead(ast: SafePropertyRead, context: any): any;\n}\nexport declare class RecursiveAstVisitor implements AstVisitor {\n    visitBinary(ast: Binary, context: any): any;\n    visitChain(ast: Chain, context: any): any;\n    visitConditional(ast: Conditional, context: any): any;\n    visitPipe(ast: BindingPipe, context: any): any;\n    visitFunctionCall(ast: FunctionCall, context: any): any;\n    visitImplicitReceiver(ast: ImplicitReceiver, context: any): any;\n    visitInterpolation(ast: Interpolation, context: any): any;\n    visitKeyedRead(ast: KeyedRead, context: any): any;\n    visitKeyedWrite(ast: KeyedWrite, context: any): any;\n    visitLiteralArray(ast: LiteralArray, context: any): any;\n    visitLiteralMap(ast: LiteralMap, context: any): any;\n    visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any;\n    visitMethodCall(ast: MethodCall, context: any): any;\n    visitPrefixNot(ast: PrefixNot, context: any): any;\n    visitNonNullAssert(ast: NonNullAssert, context: any): any;\n    visitPropertyRead(ast: PropertyRead, context: any): any;\n    visitPropertyWrite(ast: PropertyWrite, context: any): any;\n    visitSafePropertyRead(ast: SafePropertyRead, context: any): any;\n    visitSafeMethodCall(ast: SafeMethodCall, context: any): any;\n    visitAll(asts: AST[], context: any): any;\n    visitQuote(ast: Quote, context: any): any;\n}\nexport declare class AstTransformer implements AstVisitor {\n    visitImplicitReceiver(ast: ImplicitReceiver, context: any): AST;\n    visitInterpolation(ast: Interpolation, context: any): AST;\n    visitLiteralPrimitive(ast: LiteralPrimitive, context: any): AST;\n    visitPropertyRead(ast: PropertyRead, context: any): AST;\n    visitPropertyWrite(ast: PropertyWrite, context: any): AST;\n    visitSafePropertyRead(ast: SafePropertyRead, context: any): AST;\n    visitMethodCall(ast: MethodCall, context: any): AST;\n    visitSafeMethodCall(ast: SafeMethodCall, context: any): AST;\n    visitFunctionCall(ast: FunctionCall, context: any): AST;\n    visitLiteralArray(ast: LiteralArray, context: any): AST;\n    visitLiteralMap(ast: LiteralMap, context: any): AST;\n    visitBinary(ast: Binary, context: any): AST;\n    visitPrefixNot(ast: PrefixNot, context: any): AST;\n    visitNonNullAssert(ast: NonNullAssert, context: any): AST;\n    visitConditional(ast: Conditional, context: any): AST;\n    visitPipe(ast: BindingPipe, context: any): AST;\n    visitKeyedRead(ast: KeyedRead, context: any): AST;\n    visitKeyedWrite(ast: KeyedWrite, context: any): AST;\n    visitAll(asts: any[]): any[];\n    visitChain(ast: Chain, context: any): AST;\n    visitQuote(ast: Quote, context: any): AST;\n}\nexport declare class AstMemoryEfficientTransformer implements AstVisitor {\n    visitImplicitReceiver(ast: ImplicitReceiver, context: any): AST;\n    visitInterpolation(ast: Interpolation, context: any): Interpolation;\n    visitLiteralPrimitive(ast: LiteralPrimitive, context: any): AST;\n    visitPropertyRead(ast: PropertyRead, context: any): AST;\n    visitPropertyWrite(ast: PropertyWrite, context: any): AST;\n    visitSafePropertyRead(ast: SafePropertyRead, context: any): AST;\n    visitMethodCall(ast: MethodCall, context: any): AST;\n    visitSafeMethodCall(ast: SafeMethodCall, context: any): AST;\n    visitFunctionCall(ast: FunctionCall, context: any): AST;\n    visitLiteralArray(ast: LiteralArray, context: any): AST;\n    visitLiteralMap(ast: LiteralMap, context: any): AST;\n    visitBinary(ast: Binary, context: any): AST;\n    visitPrefixNot(ast: PrefixNot, context: any): AST;\n    visitNonNullAssert(ast: NonNullAssert, context: any): AST;\n    visitConditional(ast: Conditional, context: any): AST;\n    visitPipe(ast: BindingPipe, context: any): AST;\n    visitKeyedRead(ast: KeyedRead, context: any): AST;\n    visitKeyedWrite(ast: KeyedWrite, context: any): AST;\n    visitAll(asts: any[]): any[];\n    visitChain(ast: Chain, context: any): AST;\n    visitQuote(ast: Quote, context: any): AST;\n}\nexport declare function visitAstChildren(ast: AST, visitor: AstVisitor, context?: any): void;\nexport declare class ParsedProperty {\n    name: string;\n    expression: ASTWithSource;\n    type: ParsedPropertyType;\n    sourceSpan: ParseSourceSpan;\n    readonly isLiteral: boolean;\n    readonly isAnimation: boolean;\n    constructor(name: string, expression: ASTWithSource, type: ParsedPropertyType, sourceSpan: ParseSourceSpan);\n}\nexport declare enum ParsedPropertyType {\n    DEFAULT = 0,\n    LITERAL_ATTR = 1,\n    ANIMATION = 2\n}\nexport declare const enum ParsedEventType {\n    Regular = 0,\n    Animation = 1\n}\nexport declare class ParsedEvent {\n    name: string;\n    targetOrPhase: string;\n    type: ParsedEventType;\n    handler: AST;\n    sourceSpan: ParseSourceSpan;\n    constructor(name: string, targetOrPhase: string, type: ParsedEventType, handler: AST, sourceSpan: ParseSourceSpan);\n}\nexport declare class ParsedVariable {\n    name: string;\n    value: string;\n    sourceSpan: ParseSourceSpan;\n    constructor(name: string, value: string, sourceSpan: ParseSourceSpan);\n}\nexport declare const enum BindingType {\n    Property = 0,\n    Attribute = 1,\n    Class = 2,\n    Style = 3,\n    Animation = 4\n}\nexport declare class BoundElementProperty {\n    name: string;\n    type: BindingType;\n    securityContext: SecurityContext;\n    value: AST;\n    unit: string | null;\n    sourceSpan: ParseSourceSpan;\n    constructor(name: string, type: BindingType, securityContext: SecurityContext, value: AST, unit: string | null, sourceSpan: ParseSourceSpan);\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/render3/view/compiler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileDirectiveMetadata } from '../../compile_metadata';\nimport { CompileReflector } from '../../compile_reflector';\nimport { ConstantPool } from '../../constant_pool';\nimport * as o from '../../output/output_ast';\nimport { BindingParser } from '../../template_parser/binding_parser';\nimport { OutputContext } from '../../util';\nimport { Render3ParseResult } from '../r3_template_transform';\nimport { R3ComponentDef, R3ComponentMetadata, R3DirectiveDef, R3DirectiveMetadata } from './api';\n/**\n * Compile a directive for the render3 runtime as defined by the `R3DirectiveMetadata`.\n */\nexport declare function compileDirectiveFromMetadata(meta: R3DirectiveMetadata, constantPool: ConstantPool, bindingParser: BindingParser): R3DirectiveDef;\nexport interface R3BaseRefMetaData {\n    inputs?: {\n        [key: string]: string | [string, string];\n    };\n    outputs?: {\n        [key: string]: string;\n    };\n}\n/**\n * Compile a base definition for the render3 runtime as defined by {@link R3BaseRefMetadata}\n * @param meta the metadata used for compilation.\n */\nexport declare function compileBaseDefFromMetadata(meta: R3BaseRefMetaData): {\n    expression: o.InvokeFunctionExpr;\n    type: o.ExpressionType;\n};\n/**\n * Compile a component for the render3 runtime as defined by the `R3ComponentMetadata`.\n */\nexport declare function compileComponentFromMetadata(meta: R3ComponentMetadata, constantPool: ConstantPool, bindingParser: BindingParser): R3ComponentDef;\n/**\n * A wrapper around `compileDirective` which depends on render2 global analysis data as its input\n * instead of the `R3DirectiveMetadata`.\n *\n * `R3DirectiveMetadata` is computed from `CompileDirectiveMetadata` and other statically reflected\n * information.\n */\nexport declare function compileDirectiveFromRender2(outputCtx: OutputContext, directive: CompileDirectiveMetadata, reflector: CompileReflector, bindingParser: BindingParser): void;\n/**\n * A wrapper around `compileComponent` which depends on render2 global analysis data as its input\n * instead of the `R3DirectiveMetadata`.\n *\n * `R3ComponentMetadata` is computed from `CompileDirectiveMetadata` and other statically reflected\n * information.\n */\nexport declare function compileComponentFromRender2(outputCtx: OutputContext, component: CompileDirectiveMetadata, render3Ast: Render3ParseResult, reflector: CompileReflector, bindingParser: BindingParser, directiveTypeBySel: Map<string, any>, pipeTypeByName: Map<string, any>): void;\nexport declare function parseHostBindings(host: {\n    [key: string]: string;\n}): {\n    attributes: {\n        [key: string]: string;\n    };\n    listeners: {\n        [key: string]: string;\n    };\n    properties: {\n        [key: string]: string;\n    };\n    animations: {\n        [key: string]: string;\n    };\n};\n"
  },
  {
    "path": "node_modules/@angular/core/src/zone/ng_zone.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '@angular/core';\n * import {NgIf} from '@angular/common';\n *\n * @Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * @experimental\n */\nexport declare class NgZone {\n    readonly hasPendingMicrotasks: boolean;\n    readonly hasPendingMacrotasks: boolean;\n    /**\n     * Whether there are no outstanding microtasks or macrotasks.\n     */\n    readonly isStable: boolean;\n    /**\n     * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n     */\n    readonly onUnstable: EventEmitter<any>;\n    /**\n     * Notifies when there is no more microtasks enqueued in the current VM Turn.\n     * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n     * For this reason this event can fire multiple times per VM Turn.\n     */\n    readonly onMicrotaskEmpty: EventEmitter<any>;\n    /**\n     * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n     * implies we are about to relinquish VM turn.\n     * This event gets called just once.\n     */\n    readonly onStable: EventEmitter<any>;\n    /**\n     * Notifies that an error has been delivered.\n     */\n    readonly onError: EventEmitter<any>;\n    constructor({ enableLongStackTrace }: {\n        enableLongStackTrace?: boolean | undefined;\n    });\n    static isInAngularZone(): boolean;\n    static assertInAngularZone(): void;\n    static assertNotInAngularZone(): void;\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    run<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T;\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    runTask<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[], name?: string): T;\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     */\n    runGuarded<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T;\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n     */\n    runOutsideAngular<T>(fn: (...args: any[]) => T): T;\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nexport declare class NoopNgZone implements NgZone {\n    readonly hasPendingMicrotasks: boolean;\n    readonly hasPendingMacrotasks: boolean;\n    readonly isStable: boolean;\n    readonly onUnstable: EventEmitter<any>;\n    readonly onMicrotaskEmpty: EventEmitter<any>;\n    readonly onStable: EventEmitter<any>;\n    readonly onError: EventEmitter<any>;\n    run(fn: () => any): any;\n    runGuarded(fn: () => any): any;\n    runOutsideAngular(fn: () => any): any;\n    runTask<T>(fn: () => any): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/core.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport interface Inject {\n    token: any;\n}\nexport declare const createInject: MetadataFactory<Inject>;\nexport declare const createInjectionToken: MetadataFactory<object>;\nexport interface Attribute {\n    attributeName?: string;\n}\nexport declare const createAttribute: MetadataFactory<Attribute>;\nexport interface Query {\n    descendants: boolean;\n    first: boolean;\n    read: any;\n    isViewQuery: boolean;\n    selector: any;\n}\nexport declare const createContentChildren: MetadataFactory<Query>;\nexport declare const createContentChild: MetadataFactory<Query>;\nexport declare const createViewChildren: MetadataFactory<Query>;\nexport declare const createViewChild: MetadataFactory<Query>;\nexport interface Directive {\n    selector?: string;\n    inputs?: string[];\n    outputs?: string[];\n    host?: {\n        [key: string]: string;\n    };\n    providers?: Provider[];\n    exportAs?: string;\n    queries?: {\n        [key: string]: any;\n    };\n    guards?: {\n        [key: string]: any;\n    };\n}\nexport declare const createDirective: MetadataFactory<Directive>;\nexport interface Component extends Directive {\n    changeDetection?: ChangeDetectionStrategy;\n    viewProviders?: Provider[];\n    moduleId?: string;\n    templateUrl?: string;\n    template?: string;\n    styleUrls?: string[];\n    styles?: string[];\n    animations?: any[];\n    encapsulation?: ViewEncapsulation;\n    interpolation?: [string, string];\n    entryComponents?: Array<Type | any[]>;\n    preserveWhitespaces?: boolean;\n}\nexport declare enum ViewEncapsulation {\n    Emulated = 0,\n    Native = 1,\n    None = 2,\n    ShadowDom = 3\n}\nexport declare enum ChangeDetectionStrategy {\n    OnPush = 0,\n    Default = 1\n}\nexport declare const createComponent: MetadataFactory<Component>;\nexport interface Pipe {\n    name: string;\n    pure?: boolean;\n}\nexport declare const createPipe: MetadataFactory<Pipe>;\nexport interface Input {\n    bindingPropertyName?: string;\n}\nexport declare const createInput: MetadataFactory<Input>;\nexport interface Output {\n    bindingPropertyName?: string;\n}\nexport declare const createOutput: MetadataFactory<Output>;\nexport interface HostBinding {\n    hostPropertyName?: string;\n}\nexport declare const createHostBinding: MetadataFactory<HostBinding>;\nexport interface HostListener {\n    eventName?: string;\n    args?: string[];\n}\nexport declare const createHostListener: MetadataFactory<HostListener>;\nexport interface NgModule {\n    providers?: Provider[];\n    declarations?: Array<Type | any[]>;\n    imports?: Array<Type | ModuleWithProviders | any[]>;\n    exports?: Array<Type | any[]>;\n    entryComponents?: Array<Type | any[]>;\n    bootstrap?: Array<Type | any[]>;\n    schemas?: Array<SchemaMetadata | any[]>;\n    id?: string;\n}\nexport declare const createNgModule: MetadataFactory<NgModule>;\nexport interface ModuleWithProviders {\n    ngModule: Type;\n    providers?: Provider[];\n}\nexport interface Injectable {\n    providedIn?: Type | 'root' | any;\n    useClass?: Type | any;\n    useExisting?: Type | any;\n    useValue?: any;\n    useFactory?: Type | any;\n    deps?: Array<Type | any[]>;\n}\nexport declare const createInjectable: MetadataFactory<Injectable>;\nexport interface SchemaMetadata {\n    name: string;\n}\nexport declare const CUSTOM_ELEMENTS_SCHEMA: SchemaMetadata;\nexport declare const NO_ERRORS_SCHEMA: SchemaMetadata;\nexport declare const createOptional: MetadataFactory<{}>;\nexport declare const createSelf: MetadataFactory<{}>;\nexport declare const createSkipSelf: MetadataFactory<{}>;\nexport declare const createHost: MetadataFactory<{}>;\nexport interface Type extends Function {\n    new (...args: any[]): any;\n}\nexport declare const Type: FunctionConstructor;\nexport declare enum SecurityContext {\n    NONE = 0,\n    HTML = 1,\n    STYLE = 2,\n    SCRIPT = 3,\n    URL = 4,\n    RESOURCE_URL = 5\n}\nexport declare type Provider = any;\nexport declare const enum NodeFlags {\n    None = 0,\n    TypeElement = 1,\n    TypeText = 2,\n    ProjectedTemplate = 4,\n    CatRenderNode = 3,\n    TypeNgContent = 8,\n    TypePipe = 16,\n    TypePureArray = 32,\n    TypePureObject = 64,\n    TypePurePipe = 128,\n    CatPureExpression = 224,\n    TypeValueProvider = 256,\n    TypeClassProvider = 512,\n    TypeFactoryProvider = 1024,\n    TypeUseExistingProvider = 2048,\n    LazyProvider = 4096,\n    PrivateProvider = 8192,\n    TypeDirective = 16384,\n    Component = 32768,\n    CatProviderNoDirective = 3840,\n    CatProvider = 20224,\n    OnInit = 65536,\n    OnDestroy = 131072,\n    DoCheck = 262144,\n    OnChanges = 524288,\n    AfterContentInit = 1048576,\n    AfterContentChecked = 2097152,\n    AfterViewInit = 4194304,\n    AfterViewChecked = 8388608,\n    EmbeddedViews = 16777216,\n    ComponentView = 33554432,\n    TypeContentQuery = 67108864,\n    TypeViewQuery = 134217728,\n    StaticQuery = 268435456,\n    DynamicQuery = 536870912,\n    TypeModuleProvider = 1073741824,\n    CatQuery = 201326592,\n    Types = 201347067\n}\nexport declare const enum DepFlags {\n    None = 0,\n    SkipSelf = 1,\n    Optional = 2,\n    Self = 4,\n    Value = 8\n}\n/**\n * Injection flags for DI.\n */\nexport declare const enum InjectFlags {\n    Default = 0,\n    /**\n     * Specifies that an injector should retrieve a dependency from any injector until reaching the\n     * host element of the current component. (Only used with Element Injector)\n     */\n    Host = 1,\n    /** Don't descend into ancestors of the node requesting injection. */\n    Self = 2,\n    /** Skip the node that is requesting injection. */\n    SkipSelf = 4,\n    /** Inject `defaultValue` instead if token not found. */\n    Optional = 8\n}\nexport declare const enum ArgumentType {\n    Inline = 0,\n    Dynamic = 1\n}\nexport declare const enum BindingFlags {\n    TypeElementAttribute = 1,\n    TypeElementClass = 2,\n    TypeElementStyle = 4,\n    TypeProperty = 8,\n    SyntheticProperty = 16,\n    SyntheticHostProperty = 32,\n    CatSyntheticProperty = 48,\n    Types = 15\n}\nexport declare const enum QueryBindingType {\n    First = 0,\n    All = 1\n}\nexport declare const enum QueryValueType {\n    ElementRef = 0,\n    RenderElement = 1,\n    TemplateRef = 2,\n    ViewContainerRef = 3,\n    Provider = 4\n}\nexport declare const enum ViewFlags {\n    None = 0,\n    OnPush = 2\n}\nexport declare enum MissingTranslationStrategy {\n    Error = 0,\n    Warning = 1,\n    Ignore = 2\n}\nexport interface MetadataFactory<T> {\n    (...args: any[]): T;\n    isTypeOf(obj: any): obj is T;\n    ngMetadataName: string;\n}\nexport interface Route {\n    children?: Route[];\n    loadChildren?: string | Type | any;\n}\n/**\n * Flags used to generate R3-style CSS Selectors. They are pasted from\n * core/src/render3/projection.ts because they cannot be referenced directly.\n */\nexport declare const enum SelectorFlags {\n    /** Indicates this is the beginning of a new negative selector */\n    NOT = 1,\n    /** Mode for matching attributes */\n    ATTRIBUTE = 2,\n    /** Mode for matching tag names */\n    ELEMENT = 4,\n    /** Mode for matching class names */\n    CLASS = 8\n}\nexport declare type R3CssSelector = (string | SelectorFlags)[];\nexport declare type R3CssSelectorList = R3CssSelector[];\nexport declare function parseSelectorToR3Selector(selector: string): R3CssSelectorList;\n/**\n * Flags passed into template functions to determine which blocks (i.e. creation, update)\n * should be executed.\n *\n * Typically, a template runs both the creation block and the update block on initialization and\n * subsequent runs only execute the update block. However, dynamically created views require that\n * the creation block be executed separately from the update block (for backwards compat).\n */\nexport declare const enum RenderFlags {\n    Create = 1,\n    Update = 2\n}\nexport declare const enum InitialStylingFlags {\n    VALUES_MODE = 1\n}\n/**\n * A set of marker values to be used in the attributes arrays. Those markers indicate that some\n * items are not regular attributes and the processing should be adapted accordingly.\n */\nexport declare const enum AttributeMarker {\n    /**\n     * Marker indicates that the following 3 values in the attributes array are:\n     * namespaceUri, attributeName, attributeValue\n     * in that order.\n     */\n    NamespaceURI = 0,\n    /**\n     * This marker indicates that the following attribute names were extracted from bindings (ex.:\n     * [foo]=\"exp\") and / or event handlers (ex. (bar)=\"doSth()\").\n     * Taking the above bindings and outputs as an example an attributes array could look as follows:\n     * ['class', 'fade in', AttributeMarker.SelectOnly, 'foo', 'bar']\n     */\n    SelectOnly = 1\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/ng_module_resolver.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileReflector } from './compile_reflector';\nimport { NgModule, Type } from './core';\n/**\n * Resolves types to {@link NgModule}.\n */\nexport declare class NgModuleResolver {\n    private _reflector;\n    constructor(_reflector: CompileReflector);\n    isNgModule(type: any): boolean;\n    resolve(type: Type, throwIfNotFound?: boolean): NgModule | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/dom_tokens.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n *\n *\n */\nexport declare const DOCUMENT: InjectionToken<Document>;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/aot/generated_file.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Statement } from '../output/output_ast';\nexport declare class GeneratedFile {\n    srcFileUrl: string;\n    genFileUrl: string;\n    source: string | null;\n    stmts: Statement[] | null;\n    constructor(srcFileUrl: string, genFileUrl: string, sourceOrStmts: string | Statement[]);\n    isEquivalent(other: GeneratedFile): boolean;\n}\nexport declare function toTypeScript(file: GeneratedFile, preamble?: string): string;\n"
  },
  {
    "path": "node_modules/@angular/common/testing/src/testing.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common/testing package.\n */\nexport { SpyLocation } from './location_mock';\nexport { MockLocationStrategy } from './mock_location_strategy';\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/output/ts_emitter.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EmitterVisitorContext, OutputEmitter } from './abstract_emitter';\nimport * as o from './output_ast';\nexport declare function debugOutputAstAsTypeScript(ast: o.Statement | o.Expression | o.Type | any[]): string;\nexport declare type ReferenceFilter = (reference: o.ExternalReference) => boolean;\nexport declare class TypeScriptEmitter implements OutputEmitter {\n    emitStatementsAndContext(genFilePath: string, stmts: o.Statement[], preamble?: string, emitSourceMaps?: boolean, referenceFilter?: ReferenceFilter, importFilter?: ReferenceFilter): {\n        sourceText: string;\n        context: EmitterVisitorContext;\n    };\n    emitStatements(genFilePath: string, stmts: o.Statement[], preamble?: string): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/cookie.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare function parseCookieValue(cookieStr: string, name: string): string | null;\n"
  },
  {
    "path": "node_modules/@angular/common/src/pipes/date_pipe.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PipeTransform } from '@angular/core';\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a date value according to locale rules.\n *\n * Only the `en-US` locale data comes with Angular. To localize dates\n * in another language, you must import the corresponding locale data.\n * See the [I18n guide](guide/i18n#i18n-pipes) for more information.\n *\n * @see `formatDate()`\n *\n *\n * @usageNotes\n *\n * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to\n * reformat the date on every change-detection cycle, treat the date as an immutable object\n * and change the reference when the pipe needs to run again.\n *\n * ### Pre-defined format options\n *\n * Examples are given in `en-US` locale.\n *\n * - `'short'`: equivalent to `'M/d/yy, h:mm a'` (`6/15/15, 9:03 AM`).\n * - `'medium'`: equivalent to `'MMM d, y, h:mm:ss a'` (`Jun 15, 2015, 9:03:01 AM`).\n * - `'long'`: equivalent to `'MMMM d, y, h:mm:ss a z'` (`June 15, 2015 at 9:03:01 AM\n * GMT+1`).\n * - `'full'`: equivalent to `'EEEE, MMMM d, y, h:mm:ss a zzzz'` (`Monday, June 15, 2015 at\n * 9:03:01 AM GMT+01:00`).\n * - `'shortDate'`: equivalent to `'M/d/yy'` (`6/15/15`).\n * - `'mediumDate'`: equivalent to `'MMM d, y'` (`Jun 15, 2015`).\n * - `'longDate'`: equivalent to `'MMMM d, y'` (`June 15, 2015`).\n * - `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` (`Monday, June 15, 2015`).\n * - `'shortTime'`: equivalent to `'h:mm a'` (`9:03 AM`).\n * - `'mediumTime'`: equivalent to `'h:mm:ss a'` (`9:03:01 AM`).\n * - `'longTime'`: equivalent to `'h:mm:ss a z'` (`9:03:01 AM GMT+1`).\n * - `'fullTime'`: equivalent to `'h:mm:ss a zzzz'` (`9:03:01 AM GMT+01:00`).\n *\n * ### Custom format options\n *\n * You can construct a format string using symbols to specify the components\n * of a date-time value, as described in the following table.\n * Format details depend on the locale.\n * Fields marked with (*) are only available in the extra data set for the given locale.\n *\n *  | Field type         | Format      | Description                                                   | Example Value                                              |\n *  |--------------------|-------------|---------------------------------------------------------------|------------------------------------------------------------|\n *  | Era                | G, GG & GGG | Abbreviated                                                   | AD                                                         |\n *  |                    | GGGG        | Wide                                                          | Anno Domini                                                |\n *  |                    | GGGGG       | Narrow                                                        | A                                                          |\n *  | Year               | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |\n *  |                    | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |\n *  |                    | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |\n *  |                    | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |\n *  | Month              | M           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                    | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                    | MMM         | Abbreviated                                                   | Sep                                                        |\n *  |                    | MMMM        | Wide                                                          | September                                                  |\n *  |                    | MMMMM       | Narrow                                                        | S                                                          |\n *  | Month standalone   | L           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                    | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                    | LLL         | Abbreviated                                                   | Sep                                                        |\n *  |                    | LLLL        | Wide                                                          | September                                                  |\n *  |                    | LLLLL       | Narrow                                                        | S                                                          |\n *  | Week of year       | w           | Numeric: minimum digits                                       | 1... 53                                                    |\n *  |                    | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |\n *  | Week of month      | W           | Numeric: 1 digit                                              | 1... 5                                                     |\n *  | Day of month       | d           | Numeric: minimum digits                                       | 1                                                          |\n *  |                    | dd          | Numeric: 2 digits + zero padded                               | 01                                                          |\n *  | Week day           | E, EE & EEE | Abbreviated                                                   | Tue                                                        |\n *  |                    | EEEE        | Wide                                                          | Tuesday                                                    |\n *  |                    | EEEEE       | Narrow                                                        | T                                                          |\n *  |                    | EEEEEE      | Short                                                         | Tu                                                         |\n *  | Period             | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |\n *  |                    | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |\n *  |                    | aaaaa       | Narrow                                                        | a/p                                                        |\n *  | Period*            | B, BB & BBB | Abbreviated                                                   | mid.                                                       |\n *  |                    | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                    | BBBBB       | Narrow                                                        | md                                                         |\n *  | Period standalone* | b, bb & bbb | Abbreviated                                                   | mid.                                                       |\n *  |                    | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                    | bbbbb       | Narrow                                                        | md                                                         |\n *  | Hour 1-12          | h           | Numeric: minimum digits                                       | 1, 12                                                      |\n *  |                    | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |\n *  | Hour 0-23          | H           | Numeric: minimum digits                                       | 0, 23                                                      |\n *  |                    | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |\n *  | Minute             | m           | Numeric: minimum digits                                       | 8, 59                                                      |\n *  |                    | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |\n *  | Second             | s           | Numeric: minimum digits                                       | 0... 59                                                    |\n *  |                    | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |\n *  | Fractional seconds | S           | Numeric: 1 digit                                              | 0... 9                                                     |\n *  |                    | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |\n *  |                    | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |\n *  | Zone               | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |\n *  |                    | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |\n *  |                    | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |\n *  |                    | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |\n *  |                    | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |\n *  |                    | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |\n *  |                    | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |\n *\n * Note that timezone correction is not applied to an ISO string that has no time component, such as \"2016-09-19\"\n *\n * ### Format examples\n *\n * These examples transform a date into various formats,\n * assuming that `dateObj` is a JavaScript `Date` object for\n * year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,\n * given in the local time for the `en-US` locale.\n *\n * ```\n * {{ dateObj | date }}               // output is 'Jun 15, 2015'\n * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n * {{ dateObj | date:'mmss' }}        // output is '43:11'\n * ```\n *\n * ### Usage example\n *\n * The following component uses a date pipe to display the current date in different formats.\n *\n * ```\n * @Component({\n *  selector: 'date-pipe',\n *  template: `<div>\n *    <p>Today is {{today | date}}</p>\n *    <p>Or if you prefer, {{today | date:'fullDate'}}</p>\n *    <p>The time is {{today | date:'h:mm a z'}}</p>\n *  </div>`\n * })\n * // Get the current date and time as a date-time value.\n * export class DatePipeComponent {\n *   today: number = Date.now();\n * }\n * ```\n *\n */\nexport declare class DatePipe implements PipeTransform {\n    private locale;\n    constructor(locale: string);\n    /**\n     * @param value The date expression: a `Date` object,  a number\n     * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).\n     * @param format The date/time components to include, using predefined options or a\n     * custom format string.\n     * @param timezone A timezone offset (such as `'+0430'`), or a standard\n     * UTC/GMT or continental US timezone abbreviation. Default is\n     * the local system timezone of the end-user's machine.\n     * @param locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     * @returns A date string in the desired format.\n     */\n    transform(value: any, format?: string, timezone?: string, locale?: string): string | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/config.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MissingTranslationStrategy, ViewEncapsulation } from './core';\nexport declare class CompilerConfig {\n    defaultEncapsulation: ViewEncapsulation | null;\n    useJit: boolean;\n    jitDevMode: boolean;\n    missingTranslation: MissingTranslationStrategy | null;\n    preserveWhitespaces: boolean;\n    strictInjectionParameters: boolean;\n    constructor({ defaultEncapsulation, useJit, jitDevMode, missingTranslation, preserveWhitespaces, strictInjectionParameters }?: {\n        defaultEncapsulation?: ViewEncapsulation;\n        useJit?: boolean;\n        jitDevMode?: boolean;\n        missingTranslation?: MissingTranslationStrategy | null;\n        preserveWhitespaces?: boolean;\n        strictInjectionParameters?: boolean;\n    });\n}\nexport declare function preserveWhitespacesDefault(preserveWhitespacesOption: boolean | null, defaultSetting?: boolean): boolean;\n"
  },
  {
    "path": "node_modules/@angular/core/src/codegen_private_exports.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { CodegenComponentFactoryResolver as ɵCodegenComponentFactoryResolver } from './linker/component_factory_resolver';\nexport { registerModuleFactory as ɵregisterModuleFactory } from './linker/ng_module_factory_loader';\nexport { ArgumentType as ɵArgumentType, BindingFlags as ɵBindingFlags, DepFlags as ɵDepFlags, EMPTY_ARRAY as ɵEMPTY_ARRAY, EMPTY_MAP as ɵEMPTY_MAP, NodeFlags as ɵNodeFlags, QueryBindingType as ɵQueryBindingType, QueryValueType as ɵQueryValueType, ViewDefinition as ɵViewDefinition, ViewFlags as ɵViewFlags, anchorDef as ɵand, createComponentFactory as ɵccf, createNgModuleFactory as ɵcmf, createRendererType2 as ɵcrt, directiveDef as ɵdid, elementDef as ɵeld, elementEventFullName as ɵelementEventFullName, getComponentViewDefinitionFactory as ɵgetComponentViewDefinitionFactory, inlineInterpolate as ɵinlineInterpolate, interpolate as ɵinterpolate, moduleDef as ɵmod, moduleProvideDef as ɵmpd, ngContentDef as ɵncd, nodeValue as ɵnov, pipeDef as ɵpid, providerDef as ɵprd, pureArrayDef as ɵpad, pureObjectDef as ɵpod, purePipeDef as ɵppd, queryDef as ɵqud, textDef as ɵted, unwrapValue as ɵunv, viewDef as ɵvid } from './view/index';\n"
  },
  {
    "path": "node_modules/@angular/core/src/metadata/ng_module.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef } from '../application_ref';\nimport { Provider } from '../di/provider';\nimport { Type } from '../type';\nimport { TypeDecorator } from '../util/decorators';\n/**\n * Represents the expansion of an `NgModule` into its scopes.\n *\n * A scope is a set of directives and pipes that are visible in a particular context. Each\n * `NgModule` has two scopes. The `compilation` scope is the set of directives and pipes that will\n * be recognized in the templates of components declared by the module. The `exported` scope is the\n * set of directives and pipes exported by a module (that is, module B's exported scope gets added\n * to module A's compilation scope when module A imports B).\n */\nexport interface NgModuleTransitiveScopes {\n    compilation: {\n        directives: Set<any>;\n        pipes: Set<any>;\n    };\n    exported: {\n        directives: Set<any>;\n        pipes: Set<any>;\n    };\n}\nexport declare type NgModuleDefWithMeta<T, Declarations, Imports, Exports> = NgModuleDef<T>;\n/**\n * Runtime link information for NgModules.\n *\n * This is the internal data structure used by the runtime to assemble components, directives,\n * pipes, and injectors.\n *\n * NOTE: Always use `defineNgModule` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n */\nexport interface NgModuleDef<T> {\n    /** Token representing the module. Used by DI. */\n    type: T;\n    /** List of components to bootstrap. */\n    bootstrap: Type<any>[];\n    /** List of components, directives, and pipes declared by this module. */\n    declarations: Type<any>[];\n    /** List of modules or `ModuleWithProviders` imported by this module. */\n    imports: Type<any>[];\n    /**\n     * List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this\n     * module.\n     */\n    exports: Type<any>[];\n    /**\n     * Cached value of computed `transitiveCompileScopes` for this module.\n     *\n     * This should never be read directly, but accessed via `transitiveScopesFor`.\n     */\n    transitiveCompileScopes: NgModuleTransitiveScopes | null;\n}\n/**\n * A wrapper around an NgModule that associates it with the providers.\n *\n * @param T the module type. In Ivy applications, this must be explicitly\n * provided.\n */\nexport interface ModuleWithProviders<T = any /** TODO(alxhub): remove default when callers pass explicit type param */> {\n    ngModule: Type<T>;\n    providers?: Provider[];\n}\n/**\n * A schema definition associated with an NgModule.\n *\n * @see `@NgModule`, `CUSTOM_ELEMENTS_SCHEMA`, `NO_ERRORS_SCHEMA`\n *\n * @param name The name of a defined schema.\n *\n * @experimental\n */\nexport interface SchemaMetadata {\n    name: string;\n}\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n *\n */\nexport declare const CUSTOM_ELEMENTS_SCHEMA: SchemaMetadata;\n/**\n * Defines a schema that allows any property on any element.\n *\n * @experimental\n */\nexport declare const NO_ERRORS_SCHEMA: SchemaMetadata;\n/**\n * Type of the NgModule decorator / constructor function.\n *\n *\n */\nexport interface NgModuleDecorator {\n    /**\n     * Marks a class as an NgModule and supplies configuration metadata.\n     */\n    (obj?: NgModule): TypeDecorator;\n    new (obj?: NgModule): NgModule;\n}\n/**\n * Type of the NgModule metadata.\n *\n *\n */\nexport interface NgModule {\n    /**\n     * The set of injectable objects that are available in the injector\n     * of this module.\n     *\n     * @see [Dependency Injection guide](guide/dependency-injection)\n     * @see [NgModule guide](guide/providers)\n     *\n     * @usageNotes\n     *\n     * Dependencies whose providers are listed here become available for injection\n     * into any component, directive, pipe or service that is a child of this injector.\n     * The NgModule used for bootstrapping uses the root injector, and can provide dependencies\n     * to any part of the app.\n     *\n     * A lazy-loaded module has its own injector, typically a child of the app root injector.\n     * Lazy-loaded services are scoped to the lazy-loaded module's injector.\n     * If a lazy-loaded module also provides the `UserService`, any component created\n     * within that module's context (such as by router navigation) gets the local instance\n     * of the service, not the instance in the root injector.\n     * Components in external modules continue to receive the instance provided by their injectors.\n     *\n     * ### Example\n     *\n     * The following example defines a class that is injected in\n     * the HelloWorld NgModule:\n     *\n     * ```\n     * class Greeter {\n     *    greet(name:string) {\n     *      return 'Hello ' + name + '!';\n     *    }\n     * }\n     *\n     * @NgModule({\n     *   providers: [\n     *     Greeter\n     *   ]\n     * })\n     * class HelloWorld {\n     *   greeter:Greeter;\n     *\n     *   constructor(greeter:Greeter) {\n     *     this.greeter = greeter;\n     *   }\n     * }\n     * ```\n     */\n    providers?: Provider[];\n    /**\n     * The set of components, directives, and pipes ([declarables](guide/glossary#declarable))\n     * that belong to this module.\n     *\n     * @usageNotes\n     *\n     * The set of selectors that are available to a template include those declared here, and\n     * those that are exported from imported NgModules.\n     *\n     * Declarables must belong to exactly one module.\n     * The compiler emits an error if you try to declare the same class in more than one module.\n     * Be careful not to declare a class that is imported from another module.\n     *\n     * ### Example\n     *\n     * The following example allows the CommonModule to use the `NgFor`\n     * directive.\n     *\n     * ```javascript\n     * @NgModule({\n     *   declarations: [NgFor]\n     * })\n     * class CommonModule {\n     * }\n     * ```\n     */\n    declarations?: Array<Type<any> | any[]>;\n    /**\n     * The set of NgModules whose exported [declarables](guide/glossary#declarable)\n     * are available to templates in this module.\n     *\n     * @usageNotes\n     *\n     * A template can use exported declarables from any\n     * imported module, including those from modules that are imported indirectly\n     * and re-exported.\n     * For example, `ModuleA` imports `ModuleB`, and also exports\n     * it, which makes the declarables from `ModuleB` available\n     * wherever `ModuleA` is imported.\n     *\n     * ### Example\n     *\n     * The following example allows MainModule to use anthing exported by\n     * `CommonModule`:\n     *\n     * ```javascript\n     * @NgModule({\n     *   imports: [CommonModule]\n     * })\n     * class MainModule {\n     * }\n     * ```\n     *\n     */\n    imports?: Array<Type<any> | ModuleWithProviders<{}> | any[]>;\n    /**\n     * The set of components, directives, and pipes declared in this\n     * NgModule that can be used in the template of any component that is part of an\n     * NgModule that imports this NgModule. Exported declarations are the module's public API.\n     *\n     * A declarable belongs to one and only one NgModule.\n     * A module can list another module among its exports, in which case all of that module's\n     * public declaration are exported.\n     *\n     * @usageNotes\n     *\n     * Declarations are private by default.\n     * If this ModuleA does not export UserComponent, then only the components within this\n     * ModuleA can use UserComponent.\n     *\n     * ModuleA can import ModuleB and also export it, making exports from ModuleB\n     * available to an NgModule that imports ModuleA.\n     *\n     * ### Example\n     *\n     * The following example exports the `NgFor` directive from CommonModule.\n     *\n     * ```javascript\n     * @NgModule({\n     *   exports: [NgFor]\n     * })\n     * class CommonModule {\n     * }\n     * ```\n     */\n    exports?: Array<Type<any> | any[]>;\n    /**\n     * The set of components to compile when this NgModule is defined,\n     * so that they can be dynamically loaded into the view.\n     *\n     * For each component listed here, Angular creates a `ComponentFactory`\n     * and stores it in the `ComponentFactoryResolver`.\n     *\n     * Angular automatically adds components in the module's bootstrap\n     * and route definitions into the `entryComponents` list. Use this\n     * option to add components that are bootstrapped\n     * using one of the imperative techniques, such as `ViewContainerRef.createComponent()`.\n     *\n     * @see [Entry Components](guide/entry-components)\n     */\n    entryComponents?: Array<Type<any> | any[]>;\n    /**\n     * The set of components that are bootstrapped when\n     * this module is bootstrapped. The components listed here\n     * are automatically added to `entryComponents`.\n     */\n    bootstrap?: Array<Type<any> | any[]>;\n    /**\n     * The set of schemas that declare elements to be allowed in the NgModule.\n     * Elements and properties that are neither Angular components nor directives\n     * must be declared in a schema.\n     *\n     * Allowed value are `NO_ERRORS_SCHEMA` and `CUSTOM_ELEMENTS_SCHEMA`.\n     *\n     * @security When using one of `NO_ERRORS_SCHEMA` or `CUSTOM_ELEMENTS_SCHEMA`\n     * you must ensure that allowed elements and properties securely escape inputs.\n     */\n    schemas?: Array<SchemaMetadata | any[]>;\n    /**\n     * A name or path that uniquely identifies this NgModule in `getModuleFactory`.\n     * If left `undefined`, the NgModule is not registered with\n     * `getModuleFactory`.\n     */\n    id?: string;\n    /**\n     * If true, this module will be skipped by the AOT compiler and so will always be compiled\n     * using JIT.\n     *\n     * This exists to support future Ivy work and has no effect currently.\n     */\n    jit?: true;\n}\n/**\n * @Annotation\n */\nexport declare const NgModule: NgModuleDecorator;\n/**\n * @description\n * Hook for manual bootstrapping of the application instead of using bootstrap array in @NgModule\n * annotation.\n *\n * Reference to the current application is provided as a parameter.\n *\n * See [\"Bootstrapping\"](guide/bootstrapping) and [\"Entry components\"](guide/entry-components).\n *\n * @usageNotes\n * ```typescript\n * class AppModule implements DoBootstrap {\n *   ngDoBootstrap(appRef: ApplicationRef) {\n *     appRef.bootstrap(AppComponent); // Or some other component\n *   }\n * }\n * ```\n *\n */\nexport interface DoBootstrap {\n    ngDoBootstrap(appRef: ApplicationRef): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/testing/src/directive_resolver_mock.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileReflector, DirectiveResolver, core } from '@angular/compiler';\n/**\n * An implementation of {@link DirectiveResolver} that allows overriding\n * various properties of directives.\n */\nexport declare class MockDirectiveResolver extends DirectiveResolver {\n    private _directives;\n    constructor(reflector: CompileReflector);\n    resolve(type: core.Type): core.Directive;\n    resolve(type: core.Type, throwIfNotFound: true): core.Directive;\n    resolve(type: core.Type, throwIfNotFound: boolean): core.Directive | null;\n    /**\n     * Overrides the {@link core.Directive} for a directive.\n     */\n    setDirective(type: core.Type, metadata: core.Directive): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/directive_resolver.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileReflector } from './compile_reflector';\nimport { Directive, Type } from './core';\nexport declare class DirectiveResolver {\n    private _reflector;\n    constructor(_reflector: CompileReflector);\n    isDirective(type: Type): boolean;\n    /**\n     * Return {@link Directive} for a given `Type`.\n     */\n    resolve(type: Type): Directive;\n    resolve(type: Type, throwIfNotFound: true): Directive;\n    resolve(type: Type, throwIfNotFound: boolean): Directive | null;\n    private _mergeWithPropertyMetadata;\n    private _extractPublicName;\n    private _dedupeBindings;\n    private _merge;\n}\nexport declare function findLast<T>(arr: T[], condition: (value: T) => boolean): T | null;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/metadata_resolver.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StaticSymbol, StaticSymbolCache } from './aot/static_symbol';\nimport * as cpl from './compile_metadata';\nimport { CompileReflector } from './compile_reflector';\nimport { CompilerConfig } from './config';\nimport { Directive, Type } from './core';\nimport { DirectiveNormalizer } from './directive_normalizer';\nimport { DirectiveResolver } from './directive_resolver';\nimport { HtmlParser } from './ml_parser/html_parser';\nimport { NgModuleResolver } from './ng_module_resolver';\nimport { PipeResolver } from './pipe_resolver';\nimport { ElementSchemaRegistry } from './schema/element_schema_registry';\nimport { SummaryResolver } from './summary_resolver';\nimport { Console, SyncAsync } from './util';\nexport declare type ErrorCollector = (error: any, type?: any) => void;\nexport declare const ERROR_COMPONENT_TYPE = \"ngComponentType\";\nexport declare class CompileMetadataResolver {\n    private _config;\n    private _htmlParser;\n    private _ngModuleResolver;\n    private _directiveResolver;\n    private _pipeResolver;\n    private _summaryResolver;\n    private _schemaRegistry;\n    private _directiveNormalizer;\n    private _console;\n    private _staticSymbolCache;\n    private _reflector;\n    private _errorCollector?;\n    private _nonNormalizedDirectiveCache;\n    private _directiveCache;\n    private _summaryCache;\n    private _pipeCache;\n    private _ngModuleCache;\n    private _ngModuleOfTypes;\n    private _shallowModuleCache;\n    constructor(_config: CompilerConfig, _htmlParser: HtmlParser, _ngModuleResolver: NgModuleResolver, _directiveResolver: DirectiveResolver, _pipeResolver: PipeResolver, _summaryResolver: SummaryResolver<any>, _schemaRegistry: ElementSchemaRegistry, _directiveNormalizer: DirectiveNormalizer, _console: Console, _staticSymbolCache: StaticSymbolCache, _reflector: CompileReflector, _errorCollector?: ErrorCollector | undefined);\n    getReflector(): CompileReflector;\n    clearCacheFor(type: Type): void;\n    clearCache(): void;\n    private _createProxyClass;\n    private getGeneratedClass;\n    private getComponentViewClass;\n    getHostComponentViewClass(dirType: any): StaticSymbol | cpl.ProxyClass;\n    getHostComponentType(dirType: any): StaticSymbol | cpl.ProxyClass;\n    private getRendererType;\n    private getComponentFactory;\n    private initComponentFactory;\n    private _loadSummary;\n    getHostComponentMetadata(compMeta: cpl.CompileDirectiveMetadata, hostViewType?: StaticSymbol | cpl.ProxyClass): cpl.CompileDirectiveMetadata;\n    loadDirectiveMetadata(ngModuleType: any, directiveType: any, isSync: boolean): SyncAsync<null>;\n    getNonNormalizedDirectiveMetadata(directiveType: any): {\n        annotation: Directive;\n        metadata: cpl.CompileDirectiveMetadata;\n    } | null;\n    /**\n     * Gets the metadata for the given directive.\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n     */\n    getDirectiveMetadata(directiveType: any): cpl.CompileDirectiveMetadata;\n    getDirectiveSummary(dirType: any): cpl.CompileDirectiveSummary;\n    isDirective(type: any): boolean;\n    isPipe(type: any): boolean;\n    isNgModule(type: any): boolean;\n    getNgModuleSummary(moduleType: any, alreadyCollecting?: Set<any> | null): cpl.CompileNgModuleSummary | null;\n    /**\n     * Loads the declared directives and pipes of an NgModule.\n     */\n    loadNgModuleDirectiveAndPipeMetadata(moduleType: any, isSync: boolean, throwIfNotFound?: boolean): Promise<any>;\n    getShallowModuleMetadata(moduleType: any): cpl.CompileShallowModuleMetadata | null;\n    getNgModuleMetadata(moduleType: any, throwIfNotFound?: boolean, alreadyCollecting?: Set<any> | null): cpl.CompileNgModuleMetadata | null;\n    private _checkSelfImport;\n    private _getTypeDescriptor;\n    private _addTypeToModule;\n    private _getTransitiveNgModuleMetadata;\n    private _getIdentifierMetadata;\n    isInjectable(type: any): boolean;\n    getInjectableSummary(type: any): cpl.CompileTypeSummary;\n    getInjectableMetadata(type: any, dependencies?: any[] | null, throwOnUnknownDeps?: boolean): cpl.CompileInjectableMetadata | null;\n    private _getTypeMetadata;\n    private _getFactoryMetadata;\n    /**\n     * Gets the metadata for the given pipe.\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n     */\n    getPipeMetadata(pipeType: any): cpl.CompilePipeMetadata | null;\n    getPipeSummary(pipeType: any): cpl.CompilePipeSummary;\n    getOrLoadPipeMetadata(pipeType: any): cpl.CompilePipeMetadata;\n    private _loadPipeMetadata;\n    private _getDependenciesMetadata;\n    private _getTokenMetadata;\n    private _getProvidersMetadata;\n    private _validateProvider;\n    private _getEntryComponentsFromProvider;\n    private _getEntryComponentMetadata;\n    private _getInjectableTypeMetadata;\n    getProviderMetadata(provider: cpl.ProviderMeta): cpl.CompileProviderMetadata;\n    private _getQueriesMetadata;\n    private _queryVarBindings;\n    private _getQueryMetadata;\n    private _reportError;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/fake_async.d.ts",
    "content": "/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @experimental\n */\nexport declare function resetFakeAsyncZone(): void;\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns The function wrapped to be executed in the fakeAsync zone\n *\n * @experimental\n */\nexport declare function fakeAsync(fn: Function): (...args: any[]) => any;\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @experimental\n */\nexport declare function tick(millis?: number): void;\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * @param maxTurns\n * @returns The simulated time elapsed, in millis.\n *\n * @experimental\n */\nexport declare function flush(maxTurns?: number): number;\n/**\n * Discard all remaining periodic tasks.\n *\n * @experimental\n */\nexport declare function discardPeriodicTasks(): void;\n/**\n * Flush any pending microtasks.\n *\n * @experimental\n */\nexport declare function flushMicrotasks(): void;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/view_compiler/view_compiler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileDirectiveMetadata, CompilePipeSummary } from '../compile_metadata';\nimport { CompileReflector } from '../compile_reflector';\nimport * as o from '../output/output_ast';\nimport { TemplateAst } from '../template_parser/template_ast';\nimport { OutputContext } from '../util';\nexport declare class ViewCompileResult {\n    viewClassVar: string;\n    rendererTypeVar: string;\n    constructor(viewClassVar: string, rendererTypeVar: string);\n}\nexport declare class ViewCompiler {\n    private _reflector;\n    constructor(_reflector: CompileReflector);\n    compileComponent(outputCtx: OutputContext, component: CompileDirectiveMetadata, template: TemplateAst[], styles: o.Expression, usedPipes: CompilePipeSummary[]): ViewCompileResult;\n}\nexport declare function elementEventFullName(target: string | null, name: string): string;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/selector.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A css selector contains an element name,\n * css classes and attribute/value pairs with the purpose\n * of selecting subsets out of them.\n */\nexport declare class CssSelector {\n    element: string | null;\n    classNames: string[];\n    /**\n     * The selectors are encoded in pairs where:\n     * - even locations are attribute names\n     * - odd locations are attribute values.\n     *\n     * Example:\n     * Selector: `[key1=value1][key2]` would parse to:\n     * ```\n     * ['key1', 'value1', 'key2', '']\n     * ```\n     */\n    attrs: string[];\n    notSelectors: CssSelector[];\n    static parse(selector: string): CssSelector[];\n    isElementSelector(): boolean;\n    hasElementSelector(): boolean;\n    setElement(element?: string | null): void;\n    /** Gets a template string for an element that matches the selector. */\n    getMatchingElementTemplate(): string;\n    getAttrs(): string[];\n    addAttribute(name: string, value?: string): void;\n    addClassName(name: string): void;\n    toString(): string;\n}\n/**\n * Reads a list of CssSelectors and allows to calculate which ones\n * are contained in a given CssSelector.\n */\nexport declare class SelectorMatcher<T = any> {\n    static createNotMatcher(notSelectors: CssSelector[]): SelectorMatcher<null>;\n    private _elementMap;\n    private _elementPartialMap;\n    private _classMap;\n    private _classPartialMap;\n    private _attrValueMap;\n    private _attrValuePartialMap;\n    private _listContexts;\n    addSelectables(cssSelectors: CssSelector[], callbackCtxt?: T): void;\n    /**\n     * Add an object that can be found later on by calling `match`.\n     * @param cssSelector A css selector\n     * @param callbackCtxt An opaque object that will be given to the callback of the `match` function\n     */\n    private _addSelectable;\n    private _addTerminal;\n    private _addPartial;\n    /**\n     * Find the objects that have been added via `addSelectable`\n     * whose css selector is contained in the given css selector.\n     * @param cssSelector A css selector\n     * @param matchedCallback This callback will be called with the object handed into `addSelectable`\n     * @return boolean true if a match was found\n    */\n    match(cssSelector: CssSelector, matchedCallback: ((c: CssSelector, a: T) => void) | null): boolean;\n}\nexport declare class SelectorListContext {\n    selectors: CssSelector[];\n    alreadyMatched: boolean;\n    constructor(selectors: CssSelector[]);\n}\nexport declare class SelectorContext<T = any> {\n    selector: CssSelector;\n    cbContext: T;\n    listContext: SelectorListContext;\n    notSelectors: CssSelector[];\n    constructor(selector: CssSelector, cbContext: T, listContext: SelectorListContext);\n    finalize(cssSelector: CssSelector, callback: ((c: CssSelector, a: T) => void) | null): boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/i18n/format_date.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare const ISO8601_DATE_REGEX: RegExp;\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a date according to locale rules.\n *\n * Where:\n * - `value` is a Date, a number (milliseconds since UTC epoch) or an ISO string\n *   (https://www.w3.org/TR/NOTE-datetime).\n * - `format` indicates which date/time components to include. See {@link DatePipe} for more\n *   details.\n * - `locale` is a `string` defining the locale to use.\n * - `timezone` to be used for formatting. It understands UTC/GMT and the continental US time zone\n *   abbreviations, but for general use, use a time zone offset (e.g. `'+0430'`).\n *   If not specified, host system settings are used.\n *\n * See {@link DatePipe} for more details.\n */\nexport declare function formatDate(value: string | number | Date, format: string, locale: string, timezone?: string): string;\n/**\n * Converts a value to date.\n *\n * Supported input formats:\n * - `Date`\n * - number: timestamp\n * - string: numeric (e.g. \"1234\"), ISO and date strings in a format supported by\n *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).\n *   Note: ISO strings without time return a date without timeoffset.\n *\n * Throws if unable to convert to a date.\n */\nexport declare function toDate(value: string | number | Date): Date;\n/**\n * Converts a date in ISO8601 to a Date.\n * Used instead of `Date.parse` because of browser discrepancies.\n */\nexport declare function isoStringToDate(match: RegExpMatchArray): Date;\nexport declare function isDate(value: any): value is Date;\n"
  },
  {
    "path": "node_modules/@angular/core/src/platform_core_providers.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PlatformRef } from './application_ref';\nimport { StaticProvider } from './di';\n/**\n * This platform has to be included in any other platform\n *\n * @experimental\n */\nexport declare const platformCore: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;\n"
  },
  {
    "path": "node_modules/@angular/common/src/common_module.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Exports all the basic Angular directives and pipes,\n * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * * The `providers` options configure the NgModule's injector to provide\n * localization dependencies to members.\n * * The `exports` options make the declared directives and pipes available for import\n * by other NgModules.\n *\n */\nexport declare class CommonModule {\n}\n/**\n * A module that contains the deprecated i18n pipes.\n *\n * @deprecated from v5\n */\nexport declare class DeprecatedI18NPipesModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/render3/view/t2_binder.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AST } from '../../expression_parser/ast';\nimport { SelectorMatcher } from '../../selector';\nimport { BoundAttribute, BoundEvent, Element, Reference, Template, TextAttribute, Variable } from '../r3_ast';\nimport { BoundTarget, DirectiveMeta, Target, TargetBinder } from './t2_api';\n/**\n * Processes `Target`s with a given set of directives and performs a binding operation, which\n * returns an object similar to TypeScript's `ts.TypeChecker` that contains knowledge about the\n * target.\n */\nexport declare class R3TargetBinder<DirectiveT extends DirectiveMeta> implements TargetBinder<DirectiveT> {\n    private directiveMatcher;\n    constructor(directiveMatcher: SelectorMatcher<DirectiveT>);\n    /**\n     * Perform a binding operation on the given `Target` and return a `BoundTarget` which contains\n     * metadata about the types referenced in the template.\n     */\n    bind(target: Target): BoundTarget<DirectiveT>;\n}\n/**\n * Metadata container for a `Target` that allows queries for specific bits of metadata.\n *\n * See `BoundTarget` for documentation on the individual methods.\n */\nexport declare class R3BoundTarget<DirectiveT extends DirectiveMeta> implements BoundTarget<DirectiveT> {\n    readonly target: Target;\n    private directives;\n    private bindings;\n    private references;\n    private exprTargets;\n    private symbols;\n    private nestingLevel;\n    constructor(target: Target, directives: Map<Element | Template, DirectiveT[]>, bindings: Map<BoundAttribute | BoundEvent | TextAttribute, DirectiveT | Element | Template>, references: Map<BoundAttribute | BoundEvent | Reference | TextAttribute, {\n        directive: DirectiveT;\n        node: Element | Template;\n    } | Element | Template>, exprTargets: Map<AST, Reference | Variable>, symbols: Map<Reference | Variable, Template>, nestingLevel: Map<Template, number>);\n    getDirectivesOfNode(node: Element | Template): DirectiveT[] | null;\n    getReferenceTarget(ref: Reference): {\n        directive: DirectiveT;\n        node: Element | Template;\n    } | Element | Template | null;\n    getConsumerOfBinding(binding: BoundAttribute | BoundEvent | TextAttribute): DirectiveT | Element | Template | null;\n    getExpressionTarget(expr: AST): Reference | Variable | null;\n    getTemplateOfSymbol(symbol: Reference | Variable): Template | null;\n    getNestingLevel(template: Template): number;\n    getUsedDirectives(): DirectiveT[];\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/render3/view/util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ConstantPool } from '../../constant_pool';\nimport * as o from '../../output/output_ast';\nimport * as t from '../r3_ast';\nimport { R3QueryMetadata } from './api';\n/** Name of the temporary to use during data binding */\nexport declare const TEMPORARY_NAME = \"_t\";\n/** Name of the context parameter passed into a template function */\nexport declare const CONTEXT_NAME = \"ctx\";\n/** Name of the RenderFlag passed into a template function */\nexport declare const RENDER_FLAGS = \"rf\";\n/** The prefix reference variables */\nexport declare const REFERENCE_PREFIX = \"_r\";\n/** The name of the implicit context reference */\nexport declare const IMPLICIT_REFERENCE = \"$implicit\";\n/** Name of the i18n attributes **/\nexport declare const I18N_ATTR = \"i18n\";\nexport declare const I18N_ATTR_PREFIX = \"i18n-\";\n/** I18n separators for metadata **/\nexport declare const MEANING_SEPARATOR = \"|\";\nexport declare const ID_SEPARATOR = \"@@\";\n/** Placeholder wrapper for i18n expressions **/\nexport declare const I18N_PLACEHOLDER_SYMBOL = \"\\uFFFD\";\n/** Non bindable attribute name **/\nexport declare const NON_BINDABLE_ATTR = \"ngNonBindable\";\n/**\n * Creates an allocator for a temporary variable.\n *\n * A variable declaration is added to the statements the first time the allocator is invoked.\n */\nexport declare function temporaryAllocator(statements: o.Statement[], name: string): () => o.ReadVarExpr;\nexport declare function unsupported(feature: string): never;\nexport declare function invalid<T>(arg: o.Expression | o.Statement | t.Node): never;\nexport declare function isI18NAttribute(name: string): boolean;\nexport declare function wrapI18nPlaceholder(content: string | number): string;\nexport declare function assembleI18nTemplate(strings: Array<string>): string;\nexport declare function asLiteral(value: any): o.Expression;\nexport declare function conditionallyCreateMapObjectLiteral(keys: {\n    [key: string]: string;\n}): o.Expression | null;\nexport declare function mapToExpression(map: {\n    [key: string]: any;\n}, quoted?: boolean): o.Expression;\n/**\n *  Remove trailing null nodes as they are implied.\n */\nexport declare function trimTrailingNulls(parameters: o.Expression[]): o.Expression[];\nexport declare function getQueryPredicate(query: R3QueryMetadata, constantPool: ConstantPool): o.Expression;\nexport declare function noop(): void;\nexport declare class DefinitionMap {\n    values: {\n        key: string;\n        quoted: boolean;\n        value: o.Expression;\n    }[];\n    set(key: string, value: o.Expression | null): void;\n    toLiteralMap(): o.LiteralMapExpr;\n}\n/**\n * Extract a map of properties to values for a given element or template node, which can be used\n * by the directive matching machinery.\n *\n * @param elOrTpl the element or template in question\n * @return an object set up for directive matching. For attributes on the element/template, this\n * object maps a property name to its (static) value. For any bindings, this map simply maps the\n * property name to an empty string.\n */\nexport declare function getAttrsForDirectiveMatching(elOrTpl: t.Element | t.Template): {\n    [name: string]: string;\n};\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/expression_parser/parser.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InterpolationConfig } from '../ml_parser/interpolation_config';\nimport { AST, ASTWithSource, BindingPipe, LiteralMap, ParseSpan, ParserError, TemplateBinding } from './ast';\nimport { Lexer, Token } from './lexer';\nexport declare class SplitInterpolation {\n    strings: string[];\n    expressions: string[];\n    offsets: number[];\n    constructor(strings: string[], expressions: string[], offsets: number[]);\n}\nexport declare class TemplateBindingParseResult {\n    templateBindings: TemplateBinding[];\n    warnings: string[];\n    errors: ParserError[];\n    constructor(templateBindings: TemplateBinding[], warnings: string[], errors: ParserError[]);\n}\nexport declare class Parser {\n    private _lexer;\n    private errors;\n    constructor(_lexer: Lexer);\n    parseAction(input: string, location: any, interpolationConfig?: InterpolationConfig): ASTWithSource;\n    parseBinding(input: string, location: any, interpolationConfig?: InterpolationConfig): ASTWithSource;\n    parseSimpleBinding(input: string, location: string, interpolationConfig?: InterpolationConfig): ASTWithSource;\n    private _reportError;\n    private _parseBindingAst;\n    private _parseQuote;\n    parseTemplateBindings(tplKey: string, tplValue: string, location: any): TemplateBindingParseResult;\n    parseInterpolation(input: string, location: any, interpolationConfig?: InterpolationConfig): ASTWithSource | null;\n    splitInterpolation(input: string, location: string, interpolationConfig?: InterpolationConfig): SplitInterpolation | null;\n    wrapLiteralPrimitive(input: string | null, location: any): ASTWithSource;\n    private _stripComments;\n    private _commentStart;\n    private _checkNoInterpolation;\n    private _findInterpolationErrorColumn;\n}\nexport declare class _ParseAST {\n    input: string;\n    location: any;\n    tokens: Token[];\n    inputLength: number;\n    parseAction: boolean;\n    private errors;\n    private offset;\n    private rparensExpected;\n    private rbracketsExpected;\n    private rbracesExpected;\n    index: number;\n    constructor(input: string, location: any, tokens: Token[], inputLength: number, parseAction: boolean, errors: ParserError[], offset: number);\n    peek(offset: number): Token;\n    readonly next: Token;\n    readonly inputIndex: number;\n    span(start: number): ParseSpan;\n    advance(): void;\n    optionalCharacter(code: number): boolean;\n    peekKeywordLet(): boolean;\n    peekKeywordAs(): boolean;\n    expectCharacter(code: number): void;\n    optionalOperator(op: string): boolean;\n    expectOperator(operator: string): void;\n    expectIdentifierOrKeyword(): string;\n    expectIdentifierOrKeywordOrString(): string;\n    parseChain(): AST;\n    parsePipe(): AST;\n    parseExpression(): AST;\n    parseConditional(): AST;\n    parseLogicalOr(): AST;\n    parseLogicalAnd(): AST;\n    parseEquality(): AST;\n    parseRelational(): AST;\n    parseAdditive(): AST;\n    parseMultiplicative(): AST;\n    parsePrefix(): AST;\n    parseCallChain(): AST;\n    parsePrimary(): AST;\n    parseExpressionList(terminator: number): AST[];\n    parseLiteralMap(): LiteralMap;\n    parseAccessMemberOrMethodCall(receiver: AST, isSafe?: boolean): AST;\n    parseCallArguments(): BindingPipe[];\n    /**\n     * An identifier, a keyword, a string with an optional `-` in between.\n     */\n    expectTemplateBindingKey(): string;\n    parseTemplateBindings(tplKey: string): TemplateBindingParseResult;\n    error(message: string, index?: number | null): void;\n    private locationText;\n    private skip;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/pipe_resolver.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileReflector } from './compile_reflector';\nimport { Pipe, Type } from './core';\n/**\n * Resolve a `Type` for {@link Pipe}.\n *\n * This interface can be overridden by the application developer to create custom behavior.\n *\n * See {@link Compiler}\n */\nexport declare class PipeResolver {\n    private _reflector;\n    constructor(_reflector: CompileReflector);\n    isPipe(type: Type): boolean;\n    /**\n     * Return {@link Pipe} for a given `Type`.\n     */\n    resolve(type: Type, throwIfNotFound?: boolean): Pipe | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/metadata/di.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\nimport { Type } from '../type';\n/**\n * This token can be used to create a virtual provider that will populate the\n * `entryComponents` fields of components and ng modules based on its `useValue`.\n * All components that are referenced in the `useValue` value (either directly\n * or in a nested array or map) will be added to the `entryComponents` property.\n *\n * @usageNotes\n * ### Example\n * The following example shows how the router can populate the `entryComponents`\n * field of an NgModule based on the router configuration which refers\n * to components.\n *\n * ```typescript\n * // helper function inside the router\n * function provideRoutes(routes) {\n *   return [\n *     {provide: ROUTES, useValue: routes},\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n *   ];\n * }\n *\n * // user code\n * let routes = [\n *   {path: '/root', component: RootComp},\n *   {path: '/teams', component: TeamsComp}\n * ];\n *\n * @NgModule({\n *   providers: [provideRoutes(routes)]\n * })\n * class ModuleWithRoutes {}\n * ```\n *\n * @experimental\n */\nexport declare const ANALYZE_FOR_ENTRY_COMPONENTS: InjectionToken<any>;\n/**\n * Type of the Attribute decorator / constructor function.\n *\n *\n */\nexport interface AttributeDecorator {\n    /**\n     * Specifies that a constant attribute value should be injected.\n     *\n     * The directive can inject constant string literals of host element attributes.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * Suppose we have an `<input>` element and want to know its `type`.\n     *\n     * ```html\n     * <input type=\"text\">\n     * ```\n     *\n     * A decorator can inject string literal `text` like so:\n     *\n     * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}\n     *\n     * ### Example as TypeScript Decorator\n     *\n     * {@example core/ts/metadata/metadata.ts region='attributeFactory'}\n     *\n     * ### Example as ES5 annotation\n     *\n     * ```\n     * var MyComponent = function(title) {\n     *   ...\n     * };\n     *\n     * MyComponent.annotations = [\n     *   new ng.Component({...})\n     * ]\n     * MyComponent.parameters = [\n     *   [new ng.Attribute('title')]\n     * ]\n     * ```\n     *\n     *\n     */\n    (name: string): any;\n    new (name: string): Attribute;\n}\n/**\n * Type of the Attribute metadata.\n */\nexport interface Attribute {\n    attributeName?: string;\n}\n/**\n * Attribute decorator and metadata.\n *\n * @Annotation\n */\nexport declare const Attribute: AttributeDecorator;\n/**\n * Type of the Query metadata.\n */\nexport interface Query {\n    descendants: boolean;\n    first: boolean;\n    read: any;\n    isViewQuery: boolean;\n    selector: any;\n}\n/**\n * Base class for query metadata.\n *\n * @see `ContentChildren`.\n * @see `ContentChild`.\n * @see `ViewChildren`.\n * @see `ViewChild`.\n */\nexport declare abstract class Query {\n}\n/**\n * Type of the ContentChildren decorator / constructor function.\n *\n * @see `ContentChildren`.\n */\nexport interface ContentChildrenDecorator {\n    /**\n     * Configures a content query.\n     *\n     * You can use ContentChildren to get the `QueryList` of elements or directives from the\n     * content DOM. Any time a child element is added, removed, or moved, the query list will be\n     * updated, and the changes observable of the query list will emit a new value.\n     *\n     * Content queries are set before the `ngAfterContentInit` callback is called.\n     *\n     * **Metadata Properties**:\n     *\n     * * **selector** - the directive type or the name used for querying.\n     * * **descendants** - include only direct children or all descendants.\n     * * **read** - read a different token from the queried elements.\n     *\n     * @usageNotes\n     * ### Basic Example\n     *\n     * Here is a simple demonstration of how the `ContentChildren` decorator can be used.\n     *\n     * {@example core/di/ts/contentChildren/content_children_howto.ts region='HowTo'}\n     *\n     * ### Tab-pane Example\n     *\n     * Here is a slightly more realistic example that shows how `ContentChildren` decorators\n     * can be used to implement a tab pane component.\n     *\n     * {@example core/di/ts/contentChildren/content_children_example.ts region='Component'}\n     *\n     * @Annotation\n     */\n    (selector: Type<any> | Function | string, opts?: {\n        descendants?: boolean;\n        read?: any;\n    }): any;\n    new (selector: Type<any> | Function | string, opts?: {\n        descendants?: boolean;\n        read?: any;\n    }): Query;\n}\n/**\n * Type of the ContentChildren metadata.\n *\n *\n * @Annotation\n */\nexport declare type ContentChildren = Query;\n/**\n * ContentChildren decorator and metadata.\n *\n *\n *  @Annotation\n */\nexport declare const ContentChildren: ContentChildrenDecorator;\n/**\n * Type of the ContentChild decorator / constructor function.\n *\n *\n *\n */\nexport interface ContentChildDecorator {\n    /**\n     * Configures a content query.\n     *\n     * You can use ContentChild to get the first element or the directive matching the selector from\n     * the content DOM. If the content DOM changes, and a new child matches the selector,\n     * the property will be updated.\n     *\n     * Content queries are set before the `ngAfterContentInit` callback is called.\n     *\n     * **Metadata Properties**:\n     *\n     * * **selector** - the directive type or the name used for querying.\n     * * **read** - read a different token from the queried element.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/di/ts/contentChild/content_child_howto.ts region='HowTo'}\n     *\n     * ### Example\n     *\n     * {@example core/di/ts/contentChild/content_child_example.ts region='Component'}\n     *\n     * @Annotation\n     */\n    (selector: Type<any> | Function | string, opts?: {\n        read?: any;\n    }): any;\n    new (selector: Type<any> | Function | string, opts?: {\n        read?: any;\n    }): ContentChild;\n}\n/**\n * Type of the ContentChild metadata.\n *\n * @see `ContentChild`.\n *\n *\n */\nexport declare type ContentChild = Query;\n/**\n * ContentChild decorator and metadata.\n *\n *\n * @Annotation\n */\nexport declare const ContentChild: ContentChildDecorator;\n/**\n * Type of the ViewChildren decorator / constructor function.\n *\n * @see `ViewChildren`.\n *\n *\n */\nexport interface ViewChildrenDecorator {\n    /**\n     * Configures a view query.\n     *\n     * You can use ViewChildren to get the `QueryList` of elements or directives from the\n     * view DOM. Any time a child element is added, removed, or moved, the query list will be updated,\n     * and the changes observable of the query list will emit a new value.\n     *\n     * View queries are set before the `ngAfterViewInit` callback is called.\n     *\n     * **Metadata Properties**:\n     *\n     * * **selector** - the directive type or the name used for querying.\n     * * **read** - read a different token from the queried elements.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * {@example core/di/ts/viewChildren/view_children_howto.ts region='HowTo'}\n     *\n     * ### Example\n     *\n     * {@example core/di/ts/viewChildren/view_children_example.ts region='Component'}\n     *\n     * @Annotation\n     */\n    (selector: Type<any> | Function | string, opts?: {\n        read?: any;\n    }): any;\n    new (selector: Type<any> | Function | string, opts?: {\n        read?: any;\n    }): ViewChildren;\n}\n/**\n * Type of the ViewChildren metadata.\n */\nexport declare type ViewChildren = Query;\n/**\n * ViewChildren decorator and metadata.\n *\n * @Annotation\n */\nexport declare const ViewChildren: ViewChildrenDecorator;\n/**\n * Type of the ViewChild decorator / constructor function.\n *\n * @see `ViewChild`.\n */\nexport interface ViewChildDecorator {\n    /**\n     * @description\n     * Property decorator that configures a view query.\n     * The change detector looks for the first element or the directive matching the selector\n     * in the view DOM. If the view DOM changes, and a new child matches the selector,\n     * the property is updated.\n     *\n     * View queries are set before the `ngAfterViewInit` callback is called.\n     *\n     * **Metadata Properties**:\n     *\n     * * **selector** - the directive type or the name used for querying.\n     * * **read** - read a different token from the queried elements.\n     *\n     * Supported selectors include:\n     *   * any class with the `@Component` or `@Directive` decorator\n     *   * a template reference variable as a string (e.g. query `<my-component #cmp></my-component>\n     * with `@ViewChild('cmp')`)\n     *   * any provider defined in the child component tree of the current component (e.g.\n     * `@ViewChild(SomeService) someService: SomeService`)\n     *   * any provider defined through a string token (e.g. `@ViewChild('someToken') someTokenVal:\n     * any`)\n     *   * a `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChild(TemplateRef)\n     * template;`)\n     *\n     * @usageNotes\n     *\n     * {@example core/di/ts/viewChild/view_child_example.ts region='Component'}\n     *\n     * ### Example\n     *\n     * {@example core/di/ts/viewChild/view_child_howto.ts region='HowTo'}\n     *\n     * ### Example\n     *\n     * {@example core/di/ts/viewChild/view_child_example.ts region='Component'}\n     *\n     * @Annotation\n     */\n    (selector: Type<any> | Function | string, opts?: {\n        read?: any;\n    }): any;\n    new (selector: Type<any> | Function | string, opts?: {\n        read?: any;\n    }): ViewChild;\n}\n/**\n * Type of the ViewChild metadata.\n */\nexport declare type ViewChild = Query;\n/**\n * ViewChild decorator and metadata.\n *\n * @Annotation\n */\nexport declare const ViewChild: ViewChildDecorator;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/ml_parser/html_tags.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TagContentType, TagDefinition } from './tags';\nexport declare class HtmlTagDefinition implements TagDefinition {\n    private closedByChildren;\n    closedByParent: boolean;\n    requiredParents: {\n        [key: string]: boolean;\n    };\n    parentToAdd: string;\n    implicitNamespacePrefix: string | null;\n    contentType: TagContentType;\n    isVoid: boolean;\n    ignoreFirstLf: boolean;\n    canSelfClose: boolean;\n    constructor({ closedByChildren, requiredParents, implicitNamespacePrefix, contentType, closedByParent, isVoid, ignoreFirstLf }?: {\n        closedByChildren?: string[];\n        closedByParent?: boolean;\n        requiredParents?: string[];\n        implicitNamespacePrefix?: string;\n        contentType?: TagContentType;\n        isVoid?: boolean;\n        ignoreFirstLf?: boolean;\n    });\n    requireExtraParent(currentParent: string): boolean;\n    isClosedByChild(name: string): boolean;\n}\nexport declare function getHtmlTagDefinition(tagName: string): HtmlTagDefinition;\n"
  },
  {
    "path": "node_modules/@angular/common/http/testing/src/module.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\n *\n * Inject `HttpTestingController` to expect and flush requests in your tests.\n *\n *\n */\nexport declare class HttpClientTestingModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/template_parser/template_parser.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileDirectiveMetadata, CompileDirectiveSummary, CompilePipeSummary, CompileTypeMetadata } from '../compile_metadata';\nimport { CompileReflector } from '../compile_reflector';\nimport { CompilerConfig } from '../config';\nimport { SchemaMetadata } from '../core';\nimport { Parser } from '../expression_parser/parser';\nimport { HtmlParser, ParseTreeResult } from '../ml_parser/html_parser';\nimport { InterpolationConfig } from '../ml_parser/interpolation_config';\nimport { ParseError, ParseErrorLevel, ParseSourceSpan } from '../parse_util';\nimport { ElementSchemaRegistry } from '../schema/element_schema_registry';\nimport { CssSelector } from '../selector';\nimport { Console } from '../util';\nimport * as t from './template_ast';\nexport declare class TemplateParseError extends ParseError {\n    constructor(message: string, span: ParseSourceSpan, level: ParseErrorLevel);\n}\nexport declare class TemplateParseResult {\n    templateAst?: t.TemplateAst[] | undefined;\n    usedPipes?: CompilePipeSummary[] | undefined;\n    errors?: ParseError[] | undefined;\n    constructor(templateAst?: t.TemplateAst[] | undefined, usedPipes?: CompilePipeSummary[] | undefined, errors?: ParseError[] | undefined);\n}\nexport declare class TemplateParser {\n    private _config;\n    private _reflector;\n    private _exprParser;\n    private _schemaRegistry;\n    private _htmlParser;\n    private _console;\n    transforms: t.TemplateAstVisitor[];\n    constructor(_config: CompilerConfig, _reflector: CompileReflector, _exprParser: Parser, _schemaRegistry: ElementSchemaRegistry, _htmlParser: HtmlParser, _console: Console, transforms: t.TemplateAstVisitor[]);\n    readonly expressionParser: Parser;\n    parse(component: CompileDirectiveMetadata, template: string | ParseTreeResult, directives: CompileDirectiveSummary[], pipes: CompilePipeSummary[], schemas: SchemaMetadata[], templateUrl: string, preserveWhitespaces: boolean): {\n        template: t.TemplateAst[];\n        pipes: CompilePipeSummary[];\n    };\n    tryParse(component: CompileDirectiveMetadata, template: string | ParseTreeResult, directives: CompileDirectiveSummary[], pipes: CompilePipeSummary[], schemas: SchemaMetadata[], templateUrl: string, preserveWhitespaces: boolean): TemplateParseResult;\n    tryParseHtml(htmlAstWithErrors: ParseTreeResult, component: CompileDirectiveMetadata, directives: CompileDirectiveSummary[], pipes: CompilePipeSummary[], schemas: SchemaMetadata[]): TemplateParseResult;\n    expandHtml(htmlAstWithErrors: ParseTreeResult, forced?: boolean): ParseTreeResult;\n    getInterpolationConfig(component: CompileDirectiveMetadata): InterpolationConfig | undefined;\n}\nexport declare function splitClasses(classAttrValue: string): string[];\nexport declare function createElementCssSelector(elementName: string, attributes: [string, string][]): CssSelector;\nexport declare function removeSummaryDuplicates<T extends {\n    type: CompileTypeMetadata;\n}>(items: T[]): T[];\n"
  },
  {
    "path": "node_modules/@angular/common/src/version.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\nimport { Version } from '@angular/core';\nexport declare const VERSION: Version;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/compile_metadata.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StaticSymbol } from './aot/static_symbol';\nimport { ChangeDetectionStrategy, SchemaMetadata, Type, ViewEncapsulation } from './core';\nimport { LifecycleHooks } from './lifecycle_reflector';\nimport { ParseTreeResult as HtmlParseTreeResult } from './ml_parser/parser';\nexport declare function sanitizeIdentifier(name: string): string;\nexport declare function identifierName(compileIdentifier: CompileIdentifierMetadata | null | undefined): string | null;\nexport declare function identifierModuleUrl(compileIdentifier: CompileIdentifierMetadata): string;\nexport declare function viewClassName(compType: any, embeddedTemplateIndex: number): string;\nexport declare function rendererTypeName(compType: any): string;\nexport declare function hostViewClassName(compType: any): string;\nexport declare function componentFactoryName(compType: any): string;\nexport interface ProxyClass {\n    setDelegate(delegate: any): void;\n}\nexport interface CompileIdentifierMetadata {\n    reference: any;\n}\nexport declare enum CompileSummaryKind {\n    Pipe = 0,\n    Directive = 1,\n    NgModule = 2,\n    Injectable = 3\n}\n/**\n * A CompileSummary is the data needed to use a directive / pipe / module\n * in other modules / components. However, this data is not enough to compile\n * the directive / module itself.\n */\nexport interface CompileTypeSummary {\n    summaryKind: CompileSummaryKind | null;\n    type: CompileTypeMetadata;\n}\nexport interface CompileDiDependencyMetadata {\n    isAttribute?: boolean;\n    isSelf?: boolean;\n    isHost?: boolean;\n    isSkipSelf?: boolean;\n    isOptional?: boolean;\n    isValue?: boolean;\n    token?: CompileTokenMetadata;\n    value?: any;\n}\nexport interface CompileProviderMetadata {\n    token: CompileTokenMetadata;\n    useClass?: CompileTypeMetadata;\n    useValue?: any;\n    useExisting?: CompileTokenMetadata;\n    useFactory?: CompileFactoryMetadata;\n    deps?: CompileDiDependencyMetadata[];\n    multi?: boolean;\n}\nexport interface CompileFactoryMetadata extends CompileIdentifierMetadata {\n    diDeps: CompileDiDependencyMetadata[];\n    reference: any;\n}\nexport declare function tokenName(token: CompileTokenMetadata): string | null;\nexport declare function tokenReference(token: CompileTokenMetadata): any;\nexport interface CompileTokenMetadata {\n    value?: any;\n    identifier?: CompileIdentifierMetadata | CompileTypeMetadata;\n}\nexport interface CompileInjectableMetadata {\n    symbol: StaticSymbol;\n    type: CompileTypeMetadata;\n    providedIn?: StaticSymbol;\n    useValue?: any;\n    useClass?: StaticSymbol;\n    useExisting?: StaticSymbol;\n    useFactory?: StaticSymbol;\n    deps?: any[];\n}\n/**\n * Metadata regarding compilation of a type.\n */\nexport interface CompileTypeMetadata extends CompileIdentifierMetadata {\n    diDeps: CompileDiDependencyMetadata[];\n    lifecycleHooks: LifecycleHooks[];\n    reference: any;\n}\nexport interface CompileQueryMetadata {\n    selectors: Array<CompileTokenMetadata>;\n    descendants: boolean;\n    first: boolean;\n    propertyName: string;\n    read: CompileTokenMetadata;\n}\n/**\n * Metadata about a stylesheet\n */\nexport declare class CompileStylesheetMetadata {\n    moduleUrl: string | null;\n    styles: string[];\n    styleUrls: string[];\n    constructor({ moduleUrl, styles, styleUrls }?: {\n        moduleUrl?: string;\n        styles?: string[];\n        styleUrls?: string[];\n    });\n}\n/**\n * Summary Metadata regarding compilation of a template.\n */\nexport interface CompileTemplateSummary {\n    ngContentSelectors: string[];\n    encapsulation: ViewEncapsulation | null;\n    styles: string[];\n    animations: any[] | null;\n}\n/**\n * Metadata regarding compilation of a template.\n */\nexport declare class CompileTemplateMetadata {\n    encapsulation: ViewEncapsulation | null;\n    template: string | null;\n    templateUrl: string | null;\n    htmlAst: HtmlParseTreeResult | null;\n    isInline: boolean;\n    styles: string[];\n    styleUrls: string[];\n    externalStylesheets: CompileStylesheetMetadata[];\n    animations: any[];\n    ngContentSelectors: string[];\n    interpolation: [string, string] | null;\n    preserveWhitespaces: boolean;\n    constructor({ encapsulation, template, templateUrl, htmlAst, styles, styleUrls, externalStylesheets, animations, ngContentSelectors, interpolation, isInline, preserveWhitespaces }: {\n        encapsulation: ViewEncapsulation | null;\n        template: string | null;\n        templateUrl: string | null;\n        htmlAst: HtmlParseTreeResult | null;\n        styles: string[];\n        styleUrls: string[];\n        externalStylesheets: CompileStylesheetMetadata[];\n        ngContentSelectors: string[];\n        animations: any[];\n        interpolation: [string, string] | null;\n        isInline: boolean;\n        preserveWhitespaces: boolean;\n    });\n    toSummary(): CompileTemplateSummary;\n}\nexport interface CompileEntryComponentMetadata {\n    componentType: any;\n    componentFactory: StaticSymbol | object;\n}\nexport interface CompileDirectiveSummary extends CompileTypeSummary {\n    type: CompileTypeMetadata;\n    isComponent: boolean;\n    selector: string | null;\n    exportAs: string | null;\n    inputs: {\n        [key: string]: string;\n    };\n    outputs: {\n        [key: string]: string;\n    };\n    hostListeners: {\n        [key: string]: string;\n    };\n    hostProperties: {\n        [key: string]: string;\n    };\n    hostAttributes: {\n        [key: string]: string;\n    };\n    providers: CompileProviderMetadata[];\n    viewProviders: CompileProviderMetadata[];\n    queries: CompileQueryMetadata[];\n    guards: {\n        [key: string]: any;\n    };\n    viewQueries: CompileQueryMetadata[];\n    entryComponents: CompileEntryComponentMetadata[];\n    changeDetection: ChangeDetectionStrategy | null;\n    template: CompileTemplateSummary | null;\n    componentViewType: StaticSymbol | ProxyClass | null;\n    rendererType: StaticSymbol | object | null;\n    componentFactory: StaticSymbol | object | null;\n}\n/**\n * Metadata regarding compilation of a directive.\n */\nexport declare class CompileDirectiveMetadata {\n    static create({ isHost, type, isComponent, selector, exportAs, changeDetection, inputs, outputs, host, providers, viewProviders, queries, guards, viewQueries, entryComponents, template, componentViewType, rendererType, componentFactory }: {\n        isHost: boolean;\n        type: CompileTypeMetadata;\n        isComponent: boolean;\n        selector: string | null;\n        exportAs: string | null;\n        changeDetection: ChangeDetectionStrategy | null;\n        inputs: string[];\n        outputs: string[];\n        host: {\n            [key: string]: string;\n        };\n        providers: CompileProviderMetadata[];\n        viewProviders: CompileProviderMetadata[];\n        queries: CompileQueryMetadata[];\n        guards: {\n            [key: string]: any;\n        };\n        viewQueries: CompileQueryMetadata[];\n        entryComponents: CompileEntryComponentMetadata[];\n        template: CompileTemplateMetadata;\n        componentViewType: StaticSymbol | ProxyClass | null;\n        rendererType: StaticSymbol | object | null;\n        componentFactory: StaticSymbol | object | null;\n    }): CompileDirectiveMetadata;\n    isHost: boolean;\n    type: CompileTypeMetadata;\n    isComponent: boolean;\n    selector: string | null;\n    exportAs: string | null;\n    changeDetection: ChangeDetectionStrategy | null;\n    inputs: {\n        [key: string]: string;\n    };\n    outputs: {\n        [key: string]: string;\n    };\n    hostListeners: {\n        [key: string]: string;\n    };\n    hostProperties: {\n        [key: string]: string;\n    };\n    hostAttributes: {\n        [key: string]: string;\n    };\n    providers: CompileProviderMetadata[];\n    viewProviders: CompileProviderMetadata[];\n    queries: CompileQueryMetadata[];\n    guards: {\n        [key: string]: any;\n    };\n    viewQueries: CompileQueryMetadata[];\n    entryComponents: CompileEntryComponentMetadata[];\n    template: CompileTemplateMetadata | null;\n    componentViewType: StaticSymbol | ProxyClass | null;\n    rendererType: StaticSymbol | object | null;\n    componentFactory: StaticSymbol | object | null;\n    constructor({ isHost, type, isComponent, selector, exportAs, changeDetection, inputs, outputs, hostListeners, hostProperties, hostAttributes, providers, viewProviders, queries, guards, viewQueries, entryComponents, template, componentViewType, rendererType, componentFactory }: {\n        isHost: boolean;\n        type: CompileTypeMetadata;\n        isComponent: boolean;\n        selector: string | null;\n        exportAs: string | null;\n        changeDetection: ChangeDetectionStrategy | null;\n        inputs: {\n            [key: string]: string;\n        };\n        outputs: {\n            [key: string]: string;\n        };\n        hostListeners: {\n            [key: string]: string;\n        };\n        hostProperties: {\n            [key: string]: string;\n        };\n        hostAttributes: {\n            [key: string]: string;\n        };\n        providers: CompileProviderMetadata[];\n        viewProviders: CompileProviderMetadata[];\n        queries: CompileQueryMetadata[];\n        guards: {\n            [key: string]: any;\n        };\n        viewQueries: CompileQueryMetadata[];\n        entryComponents: CompileEntryComponentMetadata[];\n        template: CompileTemplateMetadata | null;\n        componentViewType: StaticSymbol | ProxyClass | null;\n        rendererType: StaticSymbol | object | null;\n        componentFactory: StaticSymbol | object | null;\n    });\n    toSummary(): CompileDirectiveSummary;\n}\nexport interface CompilePipeSummary extends CompileTypeSummary {\n    type: CompileTypeMetadata;\n    name: string;\n    pure: boolean;\n}\nexport declare class CompilePipeMetadata {\n    type: CompileTypeMetadata;\n    name: string;\n    pure: boolean;\n    constructor({ type, name, pure }: {\n        type: CompileTypeMetadata;\n        name: string;\n        pure: boolean;\n    });\n    toSummary(): CompilePipeSummary;\n}\nexport interface CompileNgModuleSummary extends CompileTypeSummary {\n    type: CompileTypeMetadata;\n    exportedDirectives: CompileIdentifierMetadata[];\n    exportedPipes: CompileIdentifierMetadata[];\n    entryComponents: CompileEntryComponentMetadata[];\n    providers: {\n        provider: CompileProviderMetadata;\n        module: CompileIdentifierMetadata;\n    }[];\n    modules: CompileTypeMetadata[];\n}\nexport declare class CompileShallowModuleMetadata {\n    type: CompileTypeMetadata;\n    rawExports: any;\n    rawImports: any;\n    rawProviders: any;\n}\n/**\n * Metadata regarding compilation of a module.\n */\nexport declare class CompileNgModuleMetadata {\n    type: CompileTypeMetadata;\n    declaredDirectives: CompileIdentifierMetadata[];\n    exportedDirectives: CompileIdentifierMetadata[];\n    declaredPipes: CompileIdentifierMetadata[];\n    exportedPipes: CompileIdentifierMetadata[];\n    entryComponents: CompileEntryComponentMetadata[];\n    bootstrapComponents: CompileIdentifierMetadata[];\n    providers: CompileProviderMetadata[];\n    importedModules: CompileNgModuleSummary[];\n    exportedModules: CompileNgModuleSummary[];\n    schemas: SchemaMetadata[];\n    id: string | null;\n    transitiveModule: TransitiveCompileNgModuleMetadata;\n    constructor({ type, providers, declaredDirectives, exportedDirectives, declaredPipes, exportedPipes, entryComponents, bootstrapComponents, importedModules, exportedModules, schemas, transitiveModule, id }: {\n        type: CompileTypeMetadata;\n        providers: CompileProviderMetadata[];\n        declaredDirectives: CompileIdentifierMetadata[];\n        exportedDirectives: CompileIdentifierMetadata[];\n        declaredPipes: CompileIdentifierMetadata[];\n        exportedPipes: CompileIdentifierMetadata[];\n        entryComponents: CompileEntryComponentMetadata[];\n        bootstrapComponents: CompileIdentifierMetadata[];\n        importedModules: CompileNgModuleSummary[];\n        exportedModules: CompileNgModuleSummary[];\n        transitiveModule: TransitiveCompileNgModuleMetadata;\n        schemas: SchemaMetadata[];\n        id: string | null;\n    });\n    toSummary(): CompileNgModuleSummary;\n}\nexport declare class TransitiveCompileNgModuleMetadata {\n    directivesSet: Set<any>;\n    directives: CompileIdentifierMetadata[];\n    exportedDirectivesSet: Set<any>;\n    exportedDirectives: CompileIdentifierMetadata[];\n    pipesSet: Set<any>;\n    pipes: CompileIdentifierMetadata[];\n    exportedPipesSet: Set<any>;\n    exportedPipes: CompileIdentifierMetadata[];\n    modulesSet: Set<any>;\n    modules: CompileTypeMetadata[];\n    entryComponentsSet: Set<any>;\n    entryComponents: CompileEntryComponentMetadata[];\n    providers: {\n        provider: CompileProviderMetadata;\n        module: CompileIdentifierMetadata;\n    }[];\n    addProvider(provider: CompileProviderMetadata, module: CompileIdentifierMetadata): void;\n    addDirective(id: CompileIdentifierMetadata): void;\n    addExportedDirective(id: CompileIdentifierMetadata): void;\n    addPipe(id: CompileIdentifierMetadata): void;\n    addExportedPipe(id: CompileIdentifierMetadata): void;\n    addModule(id: CompileTypeMetadata): void;\n    addEntryComponent(ec: CompileEntryComponentMetadata): void;\n}\nexport declare class ProviderMeta {\n    token: any;\n    useClass: Type | null;\n    useValue: any;\n    useExisting: any;\n    useFactory: Function | null;\n    dependencies: Object[] | null;\n    multi: boolean;\n    constructor(token: any, { useClass, useValue, useExisting, useFactory, deps, multi }: {\n        useClass?: Type;\n        useValue?: any;\n        useExisting?: any;\n        useFactory?: Function | null;\n        deps?: Object[] | null;\n        multi?: boolean;\n    });\n}\nexport declare function flatten<T>(list: Array<T | T[]>): T[];\nexport declare function templateSourceUrl(ngModuleType: CompileIdentifierMetadata, compMeta: {\n    type: CompileIdentifierMetadata;\n}, templateMeta: {\n    isInline: boolean;\n    templateUrl: string | null;\n}): string;\nexport declare function sharedStylesheetJitUrl(meta: CompileStylesheetMetadata, id: number): string;\nexport declare function ngModuleJitUrl(moduleMeta: CompileNgModuleMetadata): string;\nexport declare function templateJitUrl(ngModuleType: CompileIdentifierMetadata, compMeta: CompileDirectiveMetadata): string;\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Change detection enables data binding in Angular.\n */\nexport { ChangeDetectionStrategy, ChangeDetectorRef, CollectionChangeRecord, DefaultIterableDiffer, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, IterableDiffers, KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory, KeyValueDiffers, NgIterable, PipeTransform, SimpleChange, SimpleChanges, TrackByFunction, WrappedValue } from './change_detection/change_detection';\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection/constants.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n */\nexport declare enum ChangeDetectionStrategy {\n    /**\n     * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n     * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n     * Change detection can still be explictly invoked.\n     */\n    OnPush = 0,\n    /**\n     * Use the default `CheckAlways` strategy, in which change detection is automatic until\n     * explicitly deactivated.\n     */\n    Default = 1\n}\n/**\n * Defines the possible states of the default change detector.\n * @see `ChangeDetectorRef`\n */\nexport declare enum ChangeDetectorStatus {\n    /**\n     * A state in which, after calling `detectChanges()`, the change detector\n     * state becomes `Checked`, and must be explicitly invoked or reactivated.\n     */\n    CheckOnce = 0,\n    /**\n     * A state in which change detection is skipped until the change detector mode\n     * becomes `CheckOnce`.\n     */\n    Checked = 1,\n    /**\n     * A state in which change detection continues automatically until explictly\n     * deactivated.\n     */\n    CheckAlways = 2,\n    /**\n     * A state in which a change detector sub tree is not a part of the main tree and\n     * should be skipped.\n     */\n    Detached = 3,\n    /**\n     * Indicates that the change detector encountered an error checking a binding\n     * or calling a directive lifecycle method and is now in an inconsistent state. Change\n     * detectors in this state do not detect changes.\n     */\n    Errored = 4,\n    /**\n     * Indicates that the change detector has been destroyed.\n     */\n    Destroyed = 5\n}\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @param changeDetectionStrategy The strategy to check.\n * @returns True if the given strategy is the current default, false otherwise.\n * @see `ChangeDetectorStatus`\n * @see `ChangeDetectorRef`\n */\nexport declare function isDefaultChangeDetectionStrategy(changeDetectionStrategy: ChangeDetectionStrategy): boolean;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/aot/summary_resolver.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Summary, SummaryResolver } from '../summary_resolver';\nimport { StaticSymbol, StaticSymbolCache } from './static_symbol';\nexport interface AotSummaryResolverHost {\n    /**\n     * Loads an NgModule/Directive/Pipe summary file\n     */\n    loadSummary(filePath: string): string | null;\n    /**\n     * Returns whether a file is a source file or not.\n     */\n    isSourceFile(sourceFilePath: string): boolean;\n    /**\n     * Converts a file name into a representation that should be stored in a summary file.\n     * This has to include changing the suffix as well.\n     * E.g.\n     * `some_file.ts` -> `some_file.d.ts`\n     *\n     * @param referringSrcFileName the soure file that refers to fileName\n     */\n    toSummaryFileName(fileName: string, referringSrcFileName: string): string;\n    /**\n     * Converts a fileName that was processed by `toSummaryFileName` back into a real fileName\n     * given the fileName of the library that is referrig to it.\n     */\n    fromSummaryFileName(fileName: string, referringLibFileName: string): string;\n}\nexport declare class AotSummaryResolver implements SummaryResolver<StaticSymbol> {\n    private host;\n    private staticSymbolCache;\n    private summaryCache;\n    private loadedFilePaths;\n    private importAs;\n    private knownFileNameToModuleNames;\n    constructor(host: AotSummaryResolverHost, staticSymbolCache: StaticSymbolCache);\n    isLibraryFile(filePath: string): boolean;\n    toSummaryFileName(filePath: string, referringSrcFileName: string): string;\n    fromSummaryFileName(fileName: string, referringLibFileName: string): string;\n    resolveSummary(staticSymbol: StaticSymbol): Summary<StaticSymbol> | null;\n    getSymbolsOf(filePath: string): StaticSymbol[] | null;\n    getImportAs(staticSymbol: StaticSymbol): StaticSymbol;\n    /**\n     * Converts a file path to a module name that can be used as an `import`.\n     */\n    getKnownModuleName(importedFilePath: string): string | null;\n    addSummary(summary: Summary<StaticSymbol>): void;\n    private _loadSummaryFile;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/resource_loader.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An interface for retrieving documents by URL that the compiler uses\n * to load templates.\n */\nexport declare class ResourceLoader {\n    get(url: string): Promise<string> | string;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/i18n/format_number.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare const NUMBER_FORMAT_REGEXP: RegExp;\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as currency using locale rules.\n *\n * Use `currency` to format a number as currency.\n *\n * Where:\n * - `value` is a number.\n * - `locale` is a `string` defining the locale to use.\n * - `currency` is the string that represents the currency, it can be its symbol or its name.\n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `digitInfo` See {@link DecimalPipe} for more details.\n *\n *\n */\nexport declare function formatCurrency(value: number, locale: string, currency: string, currencyCode?: string, digitsInfo?: string): string;\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as a percentage according to locale rules.\n *\n * Where:\n * - `value` is a number.\n * - `locale` is a `string` defining the locale to use.\n * - `digitInfo` See {@link DecimalPipe} for more details.\n *\n *\n */\nexport declare function formatPercent(value: number, locale: string, digitsInfo?: string): string;\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the locale.\n *\n * Where:\n * - `value` is a number.\n * - `locale` is a `string` defining the locale to use.\n * - `digitInfo` See {@link DecimalPipe} for more details.\n *\n *\n */\nexport declare function formatNumber(value: number, locale: string, digitsInfo?: string): string;\nexport declare function parseIntAutoRadix(text: string): number;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/aot/compiler_host.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StaticSymbolResolverHost } from './static_symbol_resolver';\nimport { AotSummaryResolverHost } from './summary_resolver';\n/**\n * The host of the AotCompiler disconnects the implementation from TypeScript / other language\n * services and from underlying file systems.\n */\nexport interface AotCompilerHost extends StaticSymbolResolverHost, AotSummaryResolverHost {\n    /**\n     * Converts a file path to a module name that can be used as an `import.\n     * I.e. `path/to/importedFile.ts` should be imported by `path/to/containingFile.ts`.\n     *\n     * See ImportResolver.\n     */\n    fileNameToModuleName(importedFilePath: string, containingFilePath: string): string;\n    /**\n     * Converts a path that refers to a resource into an absolute filePath\n     * that can be later on used for loading the resource via `loadResource.\n     */\n    resourceNameToFileName(resourceName: string, containingFileName: string): string | null;\n    /**\n     * Loads a resource (e.g. html / css)\n     */\n    loadResource(path: string): Promise<string> | string;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/testing/src/pipe_resolver_mock.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileReflector, PipeResolver, core } from '@angular/compiler';\nexport declare class MockPipeResolver extends PipeResolver {\n    private _pipes;\n    constructor(refector: CompileReflector);\n    /**\n     * Overrides the {@link Pipe} for a pipe.\n     */\n    setPipe(type: core.Type, metadata: core.Pipe): void;\n    /**\n     * Returns the {@link Pipe} for a pipe:\n     * - Set the {@link Pipe} to the overridden view when it exists or fallback to the\n     * default\n     * `PipeResolver`, see `setPipe`.\n     */\n    resolve(type: core.Type, throwIfNotFound?: boolean): core.Pipe;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/metadata/directives.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy } from '../change_detection/constants';\nimport { Provider } from '../di';\nimport { Type } from '../type';\nimport { TypeDecorator } from '../util/decorators';\nimport { ViewEncapsulation } from './view';\n/**\n * Type of the Directive decorator / constructor function.\n */\nexport interface DirectiveDecorator {\n    /**\n     * Marks a class as an Angular directive. You can define your own\n     * directives to attach custom behavior to elements in the DOM.\n     * The options provide configuration metadata that determines\n     * how the directive should be processed, instantiated and used at\n     * runtime.\n     *\n     * Directive classes, like component classes, can implement\n     * [life-cycle hooks](guide/lifecycle-hooks) to influence their configuration and behavior.\n     *\n     *\n     * @usageNotes\n     * To define a directive, mark the class with the decorator and provide metadata.\n     *\n     * ```\n     * import {Directive} from '@angular/core';\n     *\n     * @Directive({\n     *   selector: 'my-directive',\n     * })\n     * export class MyDirective {\n     * ...\n     * }\n     * ```\n     *\n     * ### Declaring directives\n     *\n     * Directives are [declarables](guide/glossary#declarable).\n     * They must be declared by an NgModule\n     * in order to be usable in an app.\n     *\n     * A directive must belong to exactly one NgModule. Do not re-declare\n     * a directive imported from another module.\n     * List the directive class in the `declarations` field of an NgModule.\n     *\n     * ```\n     * declarations: [\n     *  AppComponent,\n     *  MyDirective\n     * ],\n     * ```\n     *\n     * @Annotation\n     */\n    (obj: Directive): TypeDecorator;\n    /**\n     * See the `Directive` decorator.\n     */\n    new (obj: Directive): Directive;\n}\nexport interface Directive {\n    /**\n     * The CSS selector that triggers the instantiation of a directive.\n     *\n     * Declare as one of the following:\n     *\n     * - `element-name`: select by element name.\n     * - `.class`: select by class name.\n     * - `[attribute]`: select by attribute name.\n     * - `[attribute=value]`: select by attribute name and value.\n     * - `:not(sub_selector)`: select only if the element does not match the `sub_selector`.\n     * - `selector1, selector2`: select if either `selector1` or `selector2` matches.\n     *\n     * Angular only allows directives to trigger on CSS selectors that do not cross element\n     * boundaries. For example, consider a directive with an `input[type=text]` selector.\n     * For the following HTML, the directive is instantiated only on the\n     * `<input type=\"text\">` element.\n     *\n     * ```html\n     * <form>\n     *   <input type=\"text\">\n     *   <input type=\"radio\">\n     * <form>\n     * ```\n     *\n     */\n    selector?: string;\n    /**\n     * Enumerates the set of data-bound input properties for a directive\n     *\n     * Angular automatically updates input properties during change detection.\n     * The `inputs` property defines a set of `directiveProperty` to `bindingProperty`\n     * configuration:\n     *\n     * - `directiveProperty` specifies the component property where the value is written.\n     * - `bindingProperty` specifies the DOM property where the value is read from.\n     *\n     * When `bindingProperty` is not provided, it is assumed to be equal to `directiveProperty`.\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * The following example creates a component with two data-bound properties.\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'bank-account',\n     *   inputs: ['bankName', 'id: account-id'],\n     *   template: `\n     *     Bank Name: {{bankName}}\n     *     Account Id: {{id}}\n     *   `\n     * })\n     * class BankAccount {\n     *   bankName: string;\n     *   id: string;\n     *\n     * ```\n     */\n    inputs?: string[];\n    /**\n     * Enumerates the set of event-bound output properties.\n     *\n     * When an output property emits an event, an event handler attached to that event\n     * in the template is invoked.\n     *\n     * The `outputs` property defines a set of `directiveProperty` to `bindingProperty`\n     * configuration:\n     *\n     * - `directiveProperty` specifies the component property that emits events.\n     * - `bindingProperty` specifies the DOM property the event handler is attached to.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * ```typescript\n     * @Directive({\n     *   selector: 'child-dir',\n     *   exportAs: 'child'\n     * })\n     * class ChildDir {\n     * }\n     *\n     * @Component({\n     *   selector: 'main',\n     *   template: `<child-dir #c=\"child\"></child-dir>`\n     * })\n     * class MainComponent {\n     * }\n     * ```\n     */\n    outputs?: string[];\n    /**\n     * A set of injection tokens that allow the DI system to\n     * provide a dependency to this directive or component.\n     */\n    providers?: Provider[];\n    /**\n     * Defines the name that can be used in the template to assign this directive to a variable.\n     *\n     * @usageNotes\n     *\n     * ### Simple Example\n     *\n     * ```\n     * @Directive({\n     *   selector: 'child-dir',\n     *   exportAs: 'child'\n     * })\n     * class ChildDir {\n     * }\n     *\n     * @Component({\n     *   selector: 'main',\n     *   template: `<child-dir #c=\"child\"></child-dir>`\n     * })\n     * class MainComponent {\n     * }\n     * ```\n     */\n    exportAs?: string;\n    /**\n     * Configures the queries that will be injected into the directive.\n     *\n     * Content queries are set before the `ngAfterContentInit` callback is called.\n     * View queries are set before the `ngAfterViewInit` callback is called.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * The following example shows how queries are defined\n     * and when their results are available in lifecycle hooks:\n     *\n     * ```\n     * @Component({\n     *   selector: 'someDir',\n     *   queries: {\n     *     contentChildren: new ContentChildren(ChildDirective),\n     *     viewChildren: new ViewChildren(ChildDirective)\n     *   },\n     *   template: '<child-directive></child-directive>'\n     * })\n     * class SomeDir {\n     *   contentChildren: QueryList<ChildDirective>,\n     *   viewChildren: QueryList<ChildDirective>\n     *\n     *   ngAfterContentInit() {\n     *     // contentChildren is set\n     *   }\n     *\n     *   ngAfterViewInit() {\n     *     // viewChildren is set\n     *   }\n     * }\n     * ```\n     *\n     * @Annotation\n     */\n    queries?: {\n        [key: string]: any;\n    };\n    /**\n     * If true, this directive/component will be skipped by the AOT compiler and so will always be\n     * compiled using JIT.\n     *\n     * This exists to support future Ivy work and has no effect currently.\n     */\n    jit?: true;\n}\n/**\n * Directive decorator and metadata.\n *\n * @Annotation\n */\nexport interface Directive {\n    /**\n     * The CSS selector that identifies this directive in a template\n     * and triggers instantiation of the directive.\n     *\n     * Declare as one of the following:\n     *\n     * - `element-name`: Select by element name.\n     * - `.class`: Select by class name.\n     * - `[attribute]`: Select by attribute name.\n     * - `[attribute=value]`: Select by attribute name and value.\n     * - `:not(sub_selector)`: Select only if the element does not match the `sub_selector`.\n     * - `selector1, selector2`: Select if either `selector1` or `selector2` matches.\n     *\n     * Angular only allows directives to apply on CSS selectors that do not cross\n     * element boundaries.\n     *\n     * For the following template HTML, a directive with an `input[type=text]` selector,\n     * would be instantiated only on the `<input type=\"text\">` element.\n     *\n     * ```html\n     * <form>\n     *   <input type=\"text\">\n     *   <input type=\"radio\">\n     * <form>\n     * ```\n     *\n     */\n    selector?: string;\n    /**\n     * The set of event-bound output properties.\n     * When an output property emits an event, an event handler attached\n     * to that event in the template is invoked.\n     *\n     * Each output property maps a `directiveProperty` to a `bindingProperty`:\n     * - `directiveProperty` specifies the component property that emits events.\n     * - `bindingProperty` specifies the HTML attribute the event handler is attached to.\n     *\n     */\n    outputs?: string[];\n    /**\n     * Maps class properties to host element bindings for properties,\n     * attributes, and events, using a set of key-value pairs.\n     *\n     * Angular automatically checks host property bindings during change detection.\n     * If a binding changes, Angular updates the directive's host element.\n     *\n     * When the key is a property of the host element, the property value is\n     * the propagated to the specified DOM property.\n     *\n     * When the key is a static attribute in the DOM, the attribute value\n     * is propagated to the specified property in the host element.\n     *\n     * For event handling:\n     * - The key is the DOM event that the directive listens to.\n     * To listen to global events, add the target to the event name.\n     * The target can be `window`, `document` or `body`.\n     * - The value is the statement to execute when the event occurs. If the\n     * statement evalueates to `false`, then `preventDefault` is applied on the DOM\n     * event. A handler method can refer to the `$event` local variable.\n     *\n     */\n    host?: {\n        [key: string]: string;\n    };\n    /**\n     * Configures the [injector](guide/glossary#injector) of this\n     * directive or component with a [token](guide/glossary#di-token)\n     * that maps to a [provider](guide/glossary#provider) of a dependency.\n     */\n    providers?: Provider[];\n    /**\n     * The name or names that can be used in the template to assign this directive to a variable.\n     * For multiple names, use a comma-separated string.\n     *\n     */\n    exportAs?: string;\n    /**\n     * Configures the queries that will be injected into the directive.\n     *\n     * Content queries are set before the `ngAfterContentInit` callback is called.\n     * View queries are set before the `ngAfterViewInit` callback is called.\n     *\n     */\n    queries?: {\n        [key: string]: any;\n    };\n}\n/**\n * Type of the Directive metadata.\n */\nexport declare const Directive: DirectiveDecorator;\n/**\n * Component decorator interface\n *\n */\nexport interface ComponentDecorator {\n    /**\n     * Decorator that marks a class as an Angular component and provides configuration\n     * metadata that determines how the component should be processed,\n     * instantiated, and used at runtime.\n     *\n     * Components are the most basic UI building block of an Angular app.\n     * An Angular app contains a tree of Angular components.\n     *\n     * Angular components are a subset of directives, always associated with a template.\n     * Unlike other directives, only one component can be instantiated per an element in a template.\n     *\n     * A component must belong to an NgModule in order for it to be available\n     * to another component or application. To make it a member of an NgModule,\n     * list it in the `declarations` field of the `@NgModule` metadata.\n     *\n     * Note that, in addition to these options for configuring a directive,\n     * you can control a component's runtime behavior by implementing\n     * life-cycle hooks. For more information, see the\n     * [Lifecycle Hooks](guide/lifecycle-hooks) guide.\n     *\n     * @usageNotes\n     *\n     * ### Setting component inputs\n     *\n     * The following example creates a component with two data-bound properties,\n     * specified by the `inputs` value.\n     *\n     * <code-example path=\"core/ts/metadata/directives.ts\" region=\"component-input\">\n     * </code-example>\n     *\n     *\n     * ### Setting component outputs\n     *\n     * The following example shows two event emitters that emit on an interval. One\n     * emits an output every second, while the other emits every five seconds.\n     *\n     * {@example core/ts/metadata/directives.ts region='component-output-interval'}\n     *\n     * ### Injecting a class with a view provider\n     *\n     * The following simple example injects a class into a component\n     * using the view provider specified in component metadata:\n     *\n     * ```\n     * class Greeter {\n     *    greet(name:string) {\n     *      return 'Hello ' + name + '!';\n     *    }\n     * }\n     *\n     * @Directive({\n     *   selector: 'needs-greeter'\n     * })\n     * class NeedsGreeter {\n     *   greeter:Greeter;\n     *\n     *   constructor(greeter:Greeter) {\n     *     this.greeter = greeter;\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'greet',\n     *   viewProviders: [\n     *     Greeter\n     *   ],\n     *   template: `<needs-greeter></needs-greeter>`\n     * })\n     * class HelloWorld {\n     * }\n     *\n     * ```\n     *\n     *\n     * @Annotation\n     */\n    (obj: Component): TypeDecorator;\n    /**\n     * See the `@Component` decorator.\n     */\n    new (obj: Component): Component;\n}\n/**\n * Supplies configuration metadata for an Angular component.\n */\nexport interface Component extends Directive {\n    /**\n     * The change-detection strategy to use for this component.\n     *\n     * When a component is instantiated, Angular creates a change detector,\n     * which is responsible for propagating the component's bindings.\n     * The strategy is one of:\n     * - `ChangeDetectionStrategy#OnPush` sets the strategy to `CheckOnce` (on demand).\n     * - `ChangeDetectionStrategy#Default` sets the strategy to `CheckAlways`.\n     */\n    changeDetection?: ChangeDetectionStrategy;\n    /**\n     * Defines the set of injectable objects that are visible to its view DOM children.\n     * See [example](#injecting-a-class-with-a-view-provider).\n     *\n     */\n    viewProviders?: Provider[];\n    /**\n     * The module ID of the module that contains the component.\n     * The component must be able to resolve relative URLs for templates and styles.\n     * SystemJS exposes the `__moduleName` variable within each module.\n     * In CommonJS, this can  be set to `module.id`.\n     *\n     */\n    moduleId?: string;\n    /**\n     * The URL of a template file for an Angular component. If provided,\n     * do not supply an inline template using `template`.\n     *\n     */\n    templateUrl?: string;\n    /**\n     * An inline template for an Angular component. If provided,\n     * do not supply a template file using `templateUrl`.\n     *\n     */\n    template?: string;\n    /**\n     * One or more URLs for files containing CSS stylesheets to use\n     * in this component.\n     */\n    styleUrls?: string[];\n    /**\n     * One or more inline CSS stylesheets to use\n     * in this component.\n     */\n    styles?: string[];\n    /**\n     * One or more animation `trigger()` calls, containing\n     * `state()` and `transition()` definitions.\n     * See the [Animations guide](/guide/animations) and animations API documentation.\n     *\n     */\n    animations?: any[];\n    /**\n     * An encapsulation policy for the template and CSS styles. One of:\n     * - `ViewEncapsulation.Native`: Use shadow roots. This works\n     * only if natively available on the platform.\n     * - `ViewEncapsulation.Emulated`: Use shimmed CSS that\n     * emulates the native behavior.\n     * - `ViewEncapsulation.None`: Use global CSS without any\n     * encapsulation.\n     *\n     * If not supplied, the value is taken from `CompilerOptions`. The default compiler option is\n     * `ViewEncapsulation.Emulated`.\n     *\n     * If the policy is set to `ViewEncapsulation.Emulated` and the component has no `styles`\n     * or `styleUrls` specified, the policy is automatically switched to `ViewEncapsulation.None`.\n     */\n    encapsulation?: ViewEncapsulation;\n    /**\n     * Overrides the default encapsulation start and end delimiters (`{{` and `}}`)\n     */\n    interpolation?: [string, string];\n    /**\n     * A set of components that should be compiled along with\n     * this component. For each component listed here,\n     * Angular creates a {@link ComponentFactory} and stores it in the\n     * {@link ComponentFactoryResolver}.\n     */\n    entryComponents?: Array<Type<any> | any[]>;\n    /**\n     * True to preserve or false to remove potentially superfluous whitespace characters\n     * from the compiled template. Whitespace characters are those matching the `\\s`\n     * character class in JavaScript regular expressions. Default is false, unless\n     * overridden in compiler options.\n     */\n    preserveWhitespaces?: boolean;\n}\n/**\n * Component decorator and metadata.\n *\n * @usageNotes\n *\n * ### Using animations\n *\n * The following snippet shows an animation trigger in a component's\n * metadata. The trigger is attached to an element in the component's\n * template, using \"@_trigger_name_\", and a state expression that is evaluated\n * at run time to determine whether the animation should start.\n *\n * ```typescript\n * @Component({\n *   selector: 'animation-cmp',\n *   templateUrl: 'animation-cmp.html',\n *   animations: [\n *     trigger('myTriggerName', [\n *       state('on', style({ opacity: 1 }),\n *       state('off', style({ opacity: 0 }),\n *       transition('on => off', [\n *         animate(\"1s\")\n *       ])\n *     ])\n *   ]\n * })\n * ```\n *\n * ```html\n * <!-- animation-cmp.html -->\n * <div @myTriggerName=\"expression\">...</div>\n * ```\n *\n * ### Preserving whitespace\n *\n * Removing whitespace can greatly reduce AOT-generated code size, and speed up view creation.\n * As of Angular 6, default for `preserveWhitespaces` is false (whitespace is removed).\n * To change the default setting for all components in your application, set\n * the `preserveWhitespaces` option of the AOT compiler.\n *\n * Current implementation removes whitespace characters as follows:\n * - Trims all whitespaces at the beginning and the end of a template.\n * - Removes whitespace-only text nodes. For example,\n * `<button>Action 1</button>  <button>Action 2</button>` becomes\n * `<button>Action 1</button><button>Action 2</button>`.\n * - Replaces a series of whitespace characters in text nodes with a single space.\n * For example, `<span>\\n some text\\n</span>` becomes `<span> some text </span>`.\n * - Does NOT alter text nodes inside HTML tags such as `<pre>` or `<textarea>`,\n * where whitespace characters are significant.\n *\n * Note that these transformations can influence DOM nodes layout, although impact\n * should be minimal.\n *\n * You can override the default behavior to preserve whitespace characters\n * in certain fragments of a template. For example, you can exclude an entire\n * DOM sub-tree by using the `ngPreserveWhitespaces` attribute:\n *\n * ```html\n * <div ngPreserveWhitespaces>\n *     whitespaces are preserved here\n *     <span>    and here </span>\n * </div>\n * ```\n *\n * You can force a single space to be preserved in a text node by using `&ngsp;`,\n * which is replaced with a space character by Angular's template\n * compiler:\n *\n * ```html\n * <a>Spaces</a>&ngsp;<a>between</a>&ngsp;<a>links.</a>\n * <!-->compiled to be equivalent to:</>\n *  <a>Spaces</a> <a>between</a> <a>links.</a>\n * ```\n *\n * Note that sequences of `&ngsp;` are still collapsed to just one space character when\n * the `preserveWhitespaces` option is set to `false`.\n *\n * ```html\n * <a>before</a>&ngsp;&ngsp;&ngsp;<a>after</a>\n * <!-->compiled to be equivalent to:</>\n *  <a>Spaces</a> <a>between</a> <a>links.</a>\n * ```\n *\n * To preserve sequences of whitespace characters, use the\n * `ngPreserveWhitespaces` attribute.\n *\n * @Annotation\n */\nexport declare const Component: ComponentDecorator;\n/**\n * Type of the Pipe decorator / constructor function.\n */\nexport interface PipeDecorator {\n    /**\n     * Declares a reusable pipe function, and supplies configuration metadata.\n     *\n     */\n    (obj: Pipe): TypeDecorator;\n    /**\n     * See the `Pipe` decorator.\n     */\n    new (obj: Pipe): Pipe;\n}\n/**\n * Type of the Pipe metadata.\n */\nexport interface Pipe {\n    /**\n     * The pipe name to use in template bindings.\n     *\n     */\n    name: string;\n    /**\n     * When true, the pipe is pure, meaning that the\n     * `transform()` method is invoked only when its input arguments\n     * change. Pipes are pure by default.\n     *\n     * If the pipe has internal state (that is, the result\n     * depends on state other than its arguments), set `pure` to false.\n     * In this case, the pipe is invoked on each change-detection cycle,\n     * even if the arguments have not changed.\n     */\n    pure?: boolean;\n}\n/**\n *\n *\n * @Annotation\n */\nexport declare const Pipe: PipeDecorator;\n/**\n *\n */\nexport interface InputDecorator {\n    /**\n     * Decorator that marks a class as pipe and supplies configuration metadata.\n     *\n     * A pipe class must implement the `PipeTransform` interface.\n     * For example, if the name is \"myPipe\", use a template binding expression\n     * such as the following:\n     *\n     * ```\n     * {{ exp | myPipe }}\n     * ```\n     *\n     * The result of the expression is passed to the pipe's `transform()` method.\n     *\n     * A pipe must belong to an NgModule in order for it to be available\n     * to a template. To make it a member of an NgModule,\n     * list it in the `declarations` field of the `@NgModule` metadata.\n     *\n     */\n    (bindingPropertyName?: string): any;\n    new (bindingPropertyName?: string): any;\n}\n/**\n * Type of metadata for an `Input` property.\n *\n *\n */\nexport interface Input {\n    /**\n     * Decorator that marks a class field as an input property and supplies configuration metadata.\n     * Declares a data-bound input property, which Angular automatically updates\n     * during change detection.\n     *\n     * @usageNotes\n     *\n     * You can supply an optional name to use in templates when the\n     * component is instantiated, that maps to the\n     * name of the bound property. By default, the original\n     * name of the bound property is used for input binding.\n     *\n     * The following example creates a component with two input properties,\n     * one of which is given a special binding name.\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'bank-account',\n     *   template: `\n     *     Bank Name: {{bankName}}\n     *     Account Id: {{id}}\n     *   `\n     * })\n     * class BankAccount {\n     *   // This property is bound using its original name.\n     *   @Input() bankName: string;\n     *   // this property value is bound to a different property name\n     *   // when this component is instantiated in a template.\n     *   @Input('account-id') id: string;\n     *\n     *   // this property is not bound, and is not automatically updated by Angular\n     *   normalizedBankName: string;\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `\n     *     <bank-account bankName=\"RBC\" account-id=\"4747\"></bank-account>\n     *   `\n     * })\n     *\n     * class App {}\n     * ```\n     */\n    bindingPropertyName?: string;\n}\n/**\n *\n * @Annotation\n */\nexport declare const Input: InputDecorator;\n/**\n * Type of the Output decorator / constructor function.\n */\nexport interface OutputDecorator {\n    /**\n    * Decorator that marks a class field as an output property and supplies configuration metadata.\n    * Declares a data-bound output property, which Angular automatically updates\n    * during change detection.\n    *\n    * @usageNotes\n    *\n    * You can supply an optional name to use in templates when the\n    * component is instantiated, that maps to the\n    * name of the bound property. By default, the original\n    * name of the bound property is used for output binding.\n    *\n    * See `@Input` decorator for an example of providing a binding name.\n    *\n    */\n    (bindingPropertyName?: string): any;\n    new (bindingPropertyName?: string): any;\n}\n/**\n * Type of the Output metadata.\n */\nexport interface Output {\n    bindingPropertyName?: string;\n}\n/**\n *\n * @Annotation\n */\nexport declare const Output: OutputDecorator;\n/**\n * Type of the HostBinding decorator / constructor function.\n */\nexport interface HostBindingDecorator {\n    /**\n     * Decorator that marks a DOM property as a host-binding property and supplies configuration\n     * metadata.\n     * Angular automatically checks host property bindings during change detection, and\n     * if a binding changes it updates the host element of the directive.\n     *\n     * @usageNotes\n     *\n     * The following example creates a directive that sets the `valid` and `invalid`\n     * properties on the DOM element that has an `ngModel` directive on it.\n     *\n     * ```typescript\n     * @Directive({selector: '[ngModel]'})\n     * class NgModelStatus {\n     *   constructor(public control: NgModel) {}\n     *   @HostBinding('class.valid') get valid() { return this.control.valid; }\n     *   @HostBinding('class.invalid') get invalid() { return this.control.invalid; }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `<input [(ngModel)]=\"prop\">`,\n     * })\n     * class App {\n     *   prop;\n     * }\n     * ```\n     */\n    (hostPropertyName?: string): any;\n    new (hostPropertyName?: string): any;\n}\n/**\n * Type of the HostBinding metadata.\n *\n */\nexport interface HostBinding {\n    hostPropertyName?: string;\n}\n/**\n *\n * @Annotation\n */\nexport declare const HostBinding: HostBindingDecorator;\n/**\n * Type of the HostListener decorator / constructor function.\n */\nexport interface HostListenerDecorator {\n    (eventName: string, args?: string[]): any;\n    new (eventName: string, args?: string[]): any;\n}\n/**\n * Type of the HostListener metadata.\n */\nexport interface HostListener {\n    /**\n     * The CSS event to listen for.\n     */\n    eventName?: string;\n    /**\n     * A set of arguments to pass to the handler method when the event occurs.\n     */\n    args?: string[];\n}\n/**\n * Binds a CSS event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * @usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```\n * @Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n *   @HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *  }\n * }\n *\n * @Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n * ```\n *\n * @Annotation\n */\nexport declare const HostListener: HostListenerDecorator;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/aot/formatted_error.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport interface Position {\n    fileName: string;\n    line: number;\n    column: number;\n}\nexport interface FormattedMessageChain {\n    message: string;\n    position?: Position;\n    next?: FormattedMessageChain;\n}\nexport declare type FormattedError = Error & {\n    chain: FormattedMessageChain;\n    position?: Position;\n};\nexport declare function formattedError(chain: FormattedMessageChain): FormattedError;\nexport declare function isFormattedError(error: Error): error is FormattedError;\n"
  },
  {
    "path": "node_modules/@angular/common/src/pipes/i18n_plural_pipe.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PipeTransform } from '@angular/core';\nimport { NgLocalization } from '../i18n/localization';\n/**\n * @ngModule CommonModule\n * @description\n *\n * Maps a value to a string that pluralizes the value according to locale rules.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n *\n * @experimental\n */\nexport declare class I18nPluralPipe implements PipeTransform {\n    private _localization;\n    constructor(_localization: NgLocalization);\n    /**\n     * @param value the number to be formatted\n     * @param pluralMap an object that mimics the ICU format, see\n     * http://userguide.icu-project.org/formatparse/messages.\n     * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by\n     * default).\n     */\n    transform(value: number, pluralMap: {\n        [count: string]: string;\n    }, locale?: string): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/aot/static_symbol_resolver.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SummaryResolver } from '../summary_resolver';\nimport { StaticSymbol, StaticSymbolCache } from './static_symbol';\nexport declare class ResolvedStaticSymbol {\n    symbol: StaticSymbol;\n    metadata: any;\n    constructor(symbol: StaticSymbol, metadata: any);\n}\n/**\n * The host of the SymbolResolverHost disconnects the implementation from TypeScript / other\n * language\n * services and from underlying file systems.\n */\nexport interface StaticSymbolResolverHost {\n    /**\n     * Return a ModuleMetadata for the given module.\n     * Angular CLI will produce this metadata for a module whenever a .d.ts files is\n     * produced and the module has exported variables or classes with decorators. Module metadata can\n     * also be produced directly from TypeScript sources by using MetadataCollector in tools/metadata.\n     *\n     * @param modulePath is a string identifier for a module as an absolute path.\n     * @returns the metadata for the given module.\n     */\n    getMetadataFor(modulePath: string): {\n        [key: string]: any;\n    }[] | undefined;\n    /**\n     * Converts a module name that is used in an `import` to a file path.\n     * I.e.\n     * `path/to/containingFile.ts` containing `import {...} from 'module-name'`.\n     */\n    moduleNameToFileName(moduleName: string, containingFile?: string): string | null;\n    /**\n     * Get a file suitable for display to the user that should be relative to the project directory\n     * or the current directory.\n     */\n    getOutputName(filePath: string): string;\n}\n/**\n * This class is responsible for loading metadata per symbol,\n * and normalizing references between symbols.\n *\n * Internally, it only uses symbols without members,\n * and deduces the values for symbols with members based\n * on these symbols.\n */\nexport declare class StaticSymbolResolver {\n    private host;\n    private staticSymbolCache;\n    private summaryResolver;\n    private errorRecorder?;\n    private metadataCache;\n    private resolvedSymbols;\n    private resolvedFilePaths;\n    private importAs;\n    private symbolResourcePaths;\n    private symbolFromFile;\n    private knownFileNameToModuleNames;\n    constructor(host: StaticSymbolResolverHost, staticSymbolCache: StaticSymbolCache, summaryResolver: SummaryResolver<StaticSymbol>, errorRecorder?: ((error: any, fileName?: string | undefined) => void) | undefined);\n    resolveSymbol(staticSymbol: StaticSymbol): ResolvedStaticSymbol;\n    /**\n     * getImportAs produces a symbol that can be used to import the given symbol.\n     * The import might be different than the symbol if the symbol is exported from\n     * a library with a summary; in which case we want to import the symbol from the\n     * ngfactory re-export instead of directly to avoid introducing a direct dependency\n     * on an otherwise indirect dependency.\n     *\n     * @param staticSymbol the symbol for which to generate a import symbol\n     */\n    getImportAs(staticSymbol: StaticSymbol, useSummaries?: boolean): StaticSymbol | null;\n    /**\n     * getResourcePath produces the path to the original location of the symbol and should\n     * be used to determine the relative location of resource references recorded in\n     * symbol metadata.\n     */\n    getResourcePath(staticSymbol: StaticSymbol): string;\n    /**\n     * getTypeArity returns the number of generic type parameters the given symbol\n     * has. If the symbol is not a type the result is null.\n     */\n    getTypeArity(staticSymbol: StaticSymbol): number | null;\n    getKnownModuleName(filePath: string): string | null;\n    recordImportAs(sourceSymbol: StaticSymbol, targetSymbol: StaticSymbol): void;\n    recordModuleNameForFileName(fileName: string, moduleName: string): void;\n    /**\n     * Invalidate all information derived from the given file.\n     *\n     * @param fileName the file to invalidate\n     */\n    invalidateFile(fileName: string): void;\n    private _resolveSymbolMembers;\n    private _resolveSymbolFromSummary;\n    /**\n     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n     * All types passed to the StaticResolver should be pseudo-types returned by this method.\n     *\n     * @param declarationFile the absolute path of the file where the symbol is declared\n     * @param name the name of the type.\n     * @param members a symbol for a static member of the named type\n     */\n    getStaticSymbol(declarationFile: string, name: string, members?: string[]): StaticSymbol;\n    /**\n     * hasDecorators checks a file's metadata for the presence of decorators without evaluating the\n     * metadata.\n     *\n     * @param filePath the absolute path to examine for decorators.\n     * @returns true if any class in the file has a decorator.\n     */\n    hasDecorators(filePath: string): boolean;\n    getSymbolsOf(filePath: string): StaticSymbol[];\n    private _createSymbolsOf;\n    private createResolvedSymbol;\n    private createExport;\n    private reportError;\n    /**\n     * @param module an absolute path to a module file.\n     */\n    private getModuleMetadata;\n    getSymbolByModule(module: string, symbolName: string, containingFile?: string): StaticSymbol;\n    private resolveModule;\n}\nexport declare function unescapeIdentifier(identifier: string): string;\nexport declare function unwrapResolvedMetadata(metadata: any): any;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/i18n/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { Extractor, ExtractorHost } from './extractor';\nexport { I18NHtmlParser } from './i18n_html_parser';\nexport { MessageBundle } from './message_bundle';\nexport { Serializer } from './serializers/serializer';\nexport { Xliff } from './serializers/xliff';\nexport { Xliff2 } from './serializers/xliff2';\nexport { Xmb } from './serializers/xmb';\nexport { Xtb } from './serializers/xtb';\n"
  },
  {
    "path": "node_modules/@angular/core/src/core_render3_private_export.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { defineBase as ɵdefineBase, defineComponent as ɵdefineComponent, defineDirective as ɵdefineDirective, definePipe as ɵdefinePipe, defineNgModule as ɵdefineNgModule, detectChanges as ɵdetectChanges, renderComponent as ɵrenderComponent, ComponentType as ɵComponentType, ComponentFactory as ɵRender3ComponentFactory, ComponentRef as ɵRender3ComponentRef, DirectiveType as ɵDirectiveType, RenderFlags as ɵRenderFlags, directiveInject as ɵdirectiveInject, injectAttribute as ɵinjectAttribute, getFactoryOf as ɵgetFactoryOf, getInheritedFactory as ɵgetInheritedFactory, templateRefExtractor as ɵtemplateRefExtractor, PublicFeature as ɵPublicFeature, InheritDefinitionFeature as ɵInheritDefinitionFeature, NgOnChangesFeature as ɵNgOnChangesFeature, NgModuleType as ɵNgModuleType, NgModuleRef as ɵRender3NgModuleRef, CssSelectorList as ɵCssSelectorList, markDirty as ɵmarkDirty, NgModuleFactory as ɵNgModuleFactory, NO_CHANGE as ɵNO_CHANGE, container as ɵcontainer, nextContext as ɵnextContext, elementStart as ɵelementStart, namespaceHTML as ɵnamespaceHTML, namespaceMathML as ɵnamespaceMathML, namespaceSVG as ɵnamespaceSVG, element as ɵelement, listener as ɵlistener, text as ɵtext, embeddedViewStart as ɵembeddedViewStart, query as ɵquery, registerContentQuery as ɵregisterContentQuery, projection as ɵprojection, bind as ɵbind, interpolation1 as ɵinterpolation1, interpolation2 as ɵinterpolation2, interpolation3 as ɵinterpolation3, interpolation4 as ɵinterpolation4, interpolation5 as ɵinterpolation5, interpolation6 as ɵinterpolation6, interpolation7 as ɵinterpolation7, interpolation8 as ɵinterpolation8, interpolationV as ɵinterpolationV, pipeBind1 as ɵpipeBind1, pipeBind2 as ɵpipeBind2, pipeBind3 as ɵpipeBind3, pipeBind4 as ɵpipeBind4, pipeBindV as ɵpipeBindV, pureFunction0 as ɵpureFunction0, pureFunction1 as ɵpureFunction1, pureFunction2 as ɵpureFunction2, pureFunction3 as ɵpureFunction3, pureFunction4 as ɵpureFunction4, pureFunction5 as ɵpureFunction5, pureFunction6 as ɵpureFunction6, pureFunction7 as ɵpureFunction7, pureFunction8 as ɵpureFunction8, pureFunctionV as ɵpureFunctionV, getCurrentView as ɵgetCurrentView, restoreView as ɵrestoreView, containerRefreshStart as ɵcontainerRefreshStart, containerRefreshEnd as ɵcontainerRefreshEnd, queryRefresh as ɵqueryRefresh, loadQueryList as ɵloadQueryList, elementEnd as ɵelementEnd, elementProperty as ɵelementProperty, projectionDef as ɵprojectionDef, reference as ɵreference, enableBindings as ɵenableBindings, disableBindings as ɵdisableBindings, elementAttribute as ɵelementAttribute, elementStyling as ɵelementStyling, elementStylingMap as ɵelementStylingMap, elementStyleProp as ɵelementStyleProp, elementStylingApply as ɵelementStylingApply, elementClassProp as ɵelementClassProp, textBinding as ɵtextBinding, template as ɵtemplate, embeddedViewEnd as ɵembeddedViewEnd, store as ɵstore, load as ɵload, pipe as ɵpipe, BaseDef as ɵBaseDef, ComponentDef as ɵComponentDef, ComponentDefWithMeta as ɵComponentDefWithMeta, DirectiveDef as ɵDirectiveDef, DirectiveDefWithMeta as ɵDirectiveDefWithMeta, PipeDef as ɵPipeDef, PipeDefWithMeta as ɵPipeDefWithMeta, whenRendered as ɵwhenRendered, i18nAttribute as ɵi18nAttribute, i18nExp as ɵi18nExp, i18nStart as ɵi18nStart, i18nEnd as ɵi18nEnd, i18nApply as ɵi18nApply, i18nExpMapping as ɵi18nExpMapping, i18nInterpolation1 as ɵi18nInterpolation1, i18nInterpolation2 as ɵi18nInterpolation2, i18nInterpolation3 as ɵi18nInterpolation3, i18nInterpolation4 as ɵi18nInterpolation4, i18nInterpolation5 as ɵi18nInterpolation5, i18nInterpolation6 as ɵi18nInterpolation6, i18nInterpolation7 as ɵi18nInterpolation7, i18nInterpolation8 as ɵi18nInterpolation8, i18nInterpolationV as ɵi18nInterpolationV, i18nMapping as ɵi18nMapping, I18nInstruction as ɵI18nInstruction, I18nExpInstruction as ɵI18nExpInstruction, WRAP_RENDERER_FACTORY2 as ɵWRAP_RENDERER_FACTORY2 } from './render3/index';\nexport { Render3DebugRendererFactory2 as ɵRender3DebugRendererFactory2 } from './render3/debug';\nexport { R3_COMPILE_NGMODULE_DEFS as ɵcompileNgModuleDefs, R3_PATCH_COMPONENT_DEF_WTIH_SCOPE as ɵpatchComponentDefWithScope, R3_COMPILE_COMPONENT as ɵcompileComponent, R3_COMPILE_DIRECTIVE as ɵcompileDirective, R3_COMPILE_PIPE as ɵcompilePipe, } from './ivy_switch/compiler/ivy_switch_on';\nexport { NgModuleDef as ɵNgModuleDef, NgModuleDefWithMeta as ɵNgModuleDefWithMeta, NgModuleTransitiveScopes as ɵNgModuleTransitiveScopes, } from './metadata/ng_module';\nexport { sanitizeHtml as ɵsanitizeHtml, sanitizeStyle as ɵsanitizeStyle, sanitizeUrl as ɵsanitizeUrl, sanitizeResourceUrl as ɵsanitizeResourceUrl, } from './sanitization/sanitization';\nexport { bypassSanitizationTrustHtml as ɵbypassSanitizationTrustHtml, bypassSanitizationTrustStyle as ɵbypassSanitizationTrustStyle, bypassSanitizationTrustScript as ɵbypassSanitizationTrustScript, bypassSanitizationTrustUrl as ɵbypassSanitizationTrustUrl, bypassSanitizationTrustResourceUrl as ɵbypassSanitizationTrustResourceUrl, } from './sanitization/bypass';\nexport { getContext as ɵgetContext } from './render3/context_discovery';\nexport { Player as ɵPlayer, PlayState as ɵPlayState, PlayerHandler as ɵPlayerHandler, } from './render3/interfaces/player';\nexport { LContext as ɵLContext, } from './render3/interfaces/context';\nexport { addPlayer as ɵaddPlayer, getPlayers as ɵgetPlayers, } from './render3/player';\nexport { compileNgModuleFactory__POST_NGCC__ as ɵcompileNgModuleFactory__POST_NGCC__ } from './application_ref';\nexport { R3_COMPILE_COMPONENT__POST_NGCC__ as ɵR3_COMPILE_COMPONENT__POST_NGCC__, R3_COMPILE_DIRECTIVE__POST_NGCC__ as ɵR3_COMPILE_DIRECTIVE__POST_NGCC__, R3_COMPILE_INJECTABLE__POST_NGCC__ as ɵR3_COMPILE_INJECTABLE__POST_NGCC__, R3_COMPILE_NGMODULE__POST_NGCC__ as ɵR3_COMPILE_NGMODULE__POST_NGCC__, R3_COMPILE_PIPE__POST_NGCC__ as ɵR3_COMPILE_PIPE__POST_NGCC__, ivyEnable__POST_NGCC__ as ɵivyEnable__POST_NGCC__, } from './ivy_switch/compiler/legacy';\nexport { R3_ELEMENT_REF_FACTORY__POST_NGCC__ as ɵR3_ELEMENT_REF_FACTORY__POST_NGCC__, R3_TEMPLATE_REF_FACTORY__POST_NGCC__ as ɵR3_TEMPLATE_REF_FACTORY__POST_NGCC__, R3_CHANGE_DETECTOR_REF_FACTORY__POST_NGCC__ as ɵR3_CHANGE_DETECTOR_REF_FACTORY__POST_NGCC__, R3_VIEW_CONTAINER_REF_FACTORY__POST_NGCC__ as ɵR3_VIEW_CONTAINER_REF_FACTORY__POST_NGCC__, R3_RENDERER2_FACTORY__POST_NGCC__ as ɵR3_RENDERER2_FACTORY__POST_NGCC__, } from './ivy_switch/runtime/legacy';\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/directive_normalizer.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileDirectiveMetadata, CompileTemplateMetadata } from './compile_metadata';\nimport { CompilerConfig } from './config';\nimport { ViewEncapsulation } from './core';\nimport { HtmlParser } from './ml_parser/html_parser';\nimport { ResourceLoader } from './resource_loader';\nimport { UrlResolver } from './url_resolver';\nimport { SyncAsync } from './util';\nexport interface PrenormalizedTemplateMetadata {\n    ngModuleType: any;\n    componentType: any;\n    moduleUrl: string;\n    template: string | null;\n    templateUrl: string | null;\n    styles: string[];\n    styleUrls: string[];\n    interpolation: [string, string] | null;\n    encapsulation: ViewEncapsulation | null;\n    animations: any[];\n    preserveWhitespaces: boolean | null;\n}\nexport declare class DirectiveNormalizer {\n    private _resourceLoader;\n    private _urlResolver;\n    private _htmlParser;\n    private _config;\n    private _resourceLoaderCache;\n    constructor(_resourceLoader: ResourceLoader, _urlResolver: UrlResolver, _htmlParser: HtmlParser, _config: CompilerConfig);\n    clearCache(): void;\n    clearCacheFor(normalizedDirective: CompileDirectiveMetadata): void;\n    private _fetch;\n    normalizeTemplate(prenormData: PrenormalizedTemplateMetadata): SyncAsync<CompileTemplateMetadata>;\n    private _preParseTemplate;\n    private _preparseLoadedTemplate;\n    private _normalizeTemplateMetadata;\n    private _normalizeLoadedTemplateMetadata;\n    private _inlineStyles;\n    private _loadMissingExternalStylesheets;\n    private _normalizeStylesheet;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/pipes/i18n_select_pipe.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PipeTransform } from '@angular/core';\n/**\n * @ngModule CommonModule\n * @description\n *\n * Generic selector that displays the string that matches the current value.\n *\n * If none of the keys of the `mapping` match the `value`, then the content\n * of the `other` key is returned when present, otherwise an empty string is returned.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}\n *\n * @experimental\n */\nexport declare class I18nSelectPipe implements PipeTransform {\n    /**\n     * @param value a string to be internationalized.\n     * @param mapping an object that indicates the text that should be displayed\n     * for different values of the provided `value`.\n     */\n    transform(value: string | null | undefined, mapping: {\n        [key: string]: string;\n    }): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { RenderComponentType, Renderer, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, RootRenderer } from './render/api';\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/async.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n *\n */\nexport declare function async(fn: Function): (done: any) => any;\n"
  },
  {
    "path": "node_modules/@angular/common/src/pipes/number_pipe.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PipeTransform } from '@angular/core';\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms a number into a string,\n * formatted according to locale rules that determine group sizing and\n * separator, decimal-point character, and other locale-specific\n * configurations.\n *\n * If no parameters are specified, the function rounds off to the nearest value using this\n * [rounding method](https://en.wikibooks.org/wiki/Arithmetic/Rounding).\n * The behavior differs from that of the JavaScript ```Math.round()``` function.\n * In the following case for example, the pipe rounds down where\n * ```Math.round()``` rounds up:\n *\n * ```html\n * -2.5 | number:'1.0-0'\n * > -3\n * Math.round(-2.5)\n * > -2\n * ```\n *\n * @see `formatNumber()`\n *\n * @usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * ### Example\n *\n * <code-example path=\"common/pipes/ts/number_pipe.ts\" region='NumberPipe'></code-example>\n *\n */\nexport declare class DecimalPipe implements PipeTransform {\n    private _locale;\n    constructor(_locale: string);\n    /**\n     * @param value The number to be formatted.\n     * @param digitsInfo Decimal representation options, specified by a string\n     * in the following format:<br>\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n     * Default is `1`.\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n     * Default is `0`.\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n     * Default is `3`.\n     * @param locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     */\n    transform(value: any, digitsInfo?: string, locale?: string): string | null;\n}\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms a number to a percentage\n * string, formatted according to locale rules that determine group sizing and\n * separator, decimal-point character, and other locale-specific\n * configurations.\n *\n * @see `formatPercent()`\n *\n * @usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * <code-example path=\"common/pipes/ts/percent_pipe.ts\" region='PercentPipe'></code-example>\n *\n *\n */\nexport declare class PercentPipe implements PipeTransform {\n    private _locale;\n    constructor(_locale: string);\n    /**\n     *\n     * @param value The number to be formatted as a percentage.\n     * @param digitsInfo Decimal representation options, specified by a string\n     * in the following format:<br>\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n     * Default is `1`.\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n     * Default is `0`.\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n     * Default is `3`.\n     * @param locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     */\n    transform(value: any, digitsInfo?: string, locale?: string): string | null;\n}\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms a number to a currency string, formatted according to locale rules\n * that determine group sizing and separator, decimal-point character,\n * and other locale-specific configurations.\n *\n * @see `getCurrencySymbol()`\n * @see `formatCurrency()`\n *\n * @usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * <code-example path=\"common/pipes/ts/currency_pipe.ts\" region='CurrencyPipe'></code-example>\n *\n *\n */\nexport declare class CurrencyPipe implements PipeTransform {\n    private _locale;\n    constructor(_locale: string);\n    /**\n     *\n     * @param value The number to be formatted as currency.\n     * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,\n     * such as `USD` for the US dollar and `EUR` for the euro.\n     * @param display The format for the currency indicator. One of the following:\n     *   - `code`: Show the code (such as `USD`).\n     *   - `symbol`(default): Show the symbol (such as `$`).\n     *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their\n     * currency.\n     * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the\n     * locale has no narrow symbol, uses the standard symbol for the locale.\n     *   - String: Use the given string value instead of a code or a symbol.\n     * For example, an empty string will suppress the currency & symbol.\n     *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.\n     *\n     * @param digitsInfo Decimal representation options, specified by a string\n     * in the following format:<br>\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n     * Default is `1`.\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n     * Default is `0`.\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n     * Default is `3`.\n     * If not provided, the number will be formatted with the proper amount of digits,\n     * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.\n     * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.\n     * @param locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     */\n    transform(value: any, currencyCode?: string, display?: 'code' | 'symbol' | 'symbol-narrow' | string | boolean, digitsInfo?: string, locale?: string): string | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/testing/src/resource_loader_mock.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ResourceLoader } from '@angular/compiler';\n/**\n * A mock implementation of {@link ResourceLoader} that allows outgoing requests to be mocked\n * and responded to within a single test, without going to the network.\n */\nexport declare class MockResourceLoader extends ResourceLoader {\n    private _expectations;\n    private _definitions;\n    private _requests;\n    get(url: string): Promise<string>;\n    hasPendingRequests(): boolean;\n    /**\n     * Add an expectation for the given URL. Incoming requests will be checked against\n     * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\n     * can be used to check if any expectations have not yet been met.\n     *\n     * The response given will be returned if the expectation matches.\n     */\n    expect(url: string, response: string): void;\n    /**\n     * Add a definition for the given URL to return the given response. Unlike expectations,\n     * definitions have no order and will satisfy any matching request at any time. Also\n     * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\n     * to return an error.\n     */\n    when(url: string, response: string): void;\n    /**\n     * Process pending requests and verify there are no outstanding expectations. Also fails\n     * if no requests are pending.\n     */\n    flush(): void;\n    /**\n     * Throw an exception if any expectations have not been satisfied.\n     */\n    verifyNoOutstandingExpectations(): void;\n    private _processRequest;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/render3/r3_pipe_compiler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompilePipeMetadata } from '../compile_metadata';\nimport { CompileReflector } from '../compile_reflector';\nimport * as o from '../output/output_ast';\nimport { OutputContext } from '../util';\nimport { R3DependencyMetadata } from './r3_factory';\nexport interface R3PipeMetadata {\n    name: string;\n    type: o.Expression;\n    pipeName: string;\n    deps: R3DependencyMetadata[] | null;\n    pure: boolean;\n}\nexport interface R3PipeDef {\n    expression: o.Expression;\n    type: o.Type;\n    statements: o.Statement[];\n}\nexport declare function compilePipeFromMetadata(metadata: R3PipeMetadata): {\n    expression: o.InvokeFunctionExpr;\n    type: o.ExpressionType;\n    statements: o.Statement[];\n};\n/**\n * Write a pipe definition to the output context.\n */\nexport declare function compilePipeFromRender2(outputCtx: OutputContext, pipe: CompilePipeMetadata, reflector: CompileReflector): undefined;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/output/abstract_emitter.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ParseSourceSpan } from '../parse_util';\nimport * as o from './output_ast';\nimport { SourceMapGenerator } from './source_map';\nexport declare const CATCH_ERROR_VAR: o.ReadVarExpr;\nexport declare const CATCH_STACK_VAR: o.ReadVarExpr;\nexport interface OutputEmitter {\n    emitStatements(genFilePath: string, stmts: o.Statement[], preamble?: string | null): string;\n}\nexport declare class EmitterVisitorContext {\n    private _indent;\n    static createRoot(): EmitterVisitorContext;\n    private _lines;\n    private _classes;\n    private _preambleLineCount;\n    constructor(_indent: number);\n    private readonly _currentLine;\n    println(from?: {\n        sourceSpan: ParseSourceSpan | null;\n    } | null, lastPart?: string): void;\n    lineIsEmpty(): boolean;\n    lineLength(): number;\n    print(from: {\n        sourceSpan: ParseSourceSpan | null;\n    } | null, part: string, newLine?: boolean): void;\n    removeEmptyLastLine(): void;\n    incIndent(): void;\n    decIndent(): void;\n    pushClass(clazz: o.ClassStmt): void;\n    popClass(): o.ClassStmt;\n    readonly currentClass: o.ClassStmt | null;\n    toSource(): string;\n    toSourceMapGenerator(genFilePath: string, startsAtLine?: number): SourceMapGenerator;\n    setPreambleLineCount(count: number): number;\n    spanOf(line: number, column: number): ParseSourceSpan | null;\n    private readonly sourceLines;\n}\nexport declare abstract class AbstractEmitterVisitor implements o.StatementVisitor, o.ExpressionVisitor {\n    private _escapeDollarInStrings;\n    constructor(_escapeDollarInStrings: boolean);\n    visitExpressionStmt(stmt: o.ExpressionStatement, ctx: EmitterVisitorContext): any;\n    visitReturnStmt(stmt: o.ReturnStatement, ctx: EmitterVisitorContext): any;\n    abstract visitCastExpr(ast: o.CastExpr, context: any): any;\n    abstract visitDeclareClassStmt(stmt: o.ClassStmt, ctx: EmitterVisitorContext): any;\n    visitIfStmt(stmt: o.IfStmt, ctx: EmitterVisitorContext): any;\n    abstract visitTryCatchStmt(stmt: o.TryCatchStmt, ctx: EmitterVisitorContext): any;\n    visitThrowStmt(stmt: o.ThrowStmt, ctx: EmitterVisitorContext): any;\n    visitCommentStmt(stmt: o.CommentStmt, ctx: EmitterVisitorContext): any;\n    visitJSDocCommentStmt(stmt: o.JSDocCommentStmt, ctx: EmitterVisitorContext): null;\n    abstract visitDeclareVarStmt(stmt: o.DeclareVarStmt, ctx: EmitterVisitorContext): any;\n    visitWriteVarExpr(expr: o.WriteVarExpr, ctx: EmitterVisitorContext): any;\n    visitWriteKeyExpr(expr: o.WriteKeyExpr, ctx: EmitterVisitorContext): any;\n    visitWritePropExpr(expr: o.WritePropExpr, ctx: EmitterVisitorContext): any;\n    visitInvokeMethodExpr(expr: o.InvokeMethodExpr, ctx: EmitterVisitorContext): any;\n    abstract getBuiltinMethodName(method: o.BuiltinMethod): string;\n    visitInvokeFunctionExpr(expr: o.InvokeFunctionExpr, ctx: EmitterVisitorContext): any;\n    visitWrappedNodeExpr(ast: o.WrappedNodeExpr<any>, ctx: EmitterVisitorContext): any;\n    visitTypeofExpr(expr: o.TypeofExpr, ctx: EmitterVisitorContext): any;\n    visitReadVarExpr(ast: o.ReadVarExpr, ctx: EmitterVisitorContext): any;\n    visitInstantiateExpr(ast: o.InstantiateExpr, ctx: EmitterVisitorContext): any;\n    visitLiteralExpr(ast: o.LiteralExpr, ctx: EmitterVisitorContext): any;\n    abstract visitExternalExpr(ast: o.ExternalExpr, ctx: EmitterVisitorContext): any;\n    visitConditionalExpr(ast: o.ConditionalExpr, ctx: EmitterVisitorContext): any;\n    visitNotExpr(ast: o.NotExpr, ctx: EmitterVisitorContext): any;\n    visitAssertNotNullExpr(ast: o.AssertNotNull, ctx: EmitterVisitorContext): any;\n    abstract visitFunctionExpr(ast: o.FunctionExpr, ctx: EmitterVisitorContext): any;\n    abstract visitDeclareFunctionStmt(stmt: o.DeclareFunctionStmt, context: any): any;\n    visitBinaryOperatorExpr(ast: o.BinaryOperatorExpr, ctx: EmitterVisitorContext): any;\n    visitReadPropExpr(ast: o.ReadPropExpr, ctx: EmitterVisitorContext): any;\n    visitReadKeyExpr(ast: o.ReadKeyExpr, ctx: EmitterVisitorContext): any;\n    visitLiteralArrayExpr(ast: o.LiteralArrayExpr, ctx: EmitterVisitorContext): any;\n    visitLiteralMapExpr(ast: o.LiteralMapExpr, ctx: EmitterVisitorContext): any;\n    visitCommaExpr(ast: o.CommaExpr, ctx: EmitterVisitorContext): any;\n    visitAllExpressions(expressions: o.Expression[], ctx: EmitterVisitorContext, separator: string): void;\n    visitAllObjects<T>(handler: (t: T) => void, expressions: T[], ctx: EmitterVisitorContext, separator: string): void;\n    visitAllStatements(statements: o.Statement[], ctx: EmitterVisitorContext): void;\n}\nexport declare function escapeIdentifier(input: string, escapeDollar: boolean, alwaysQuote?: boolean): any;\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/before_each.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare const __core_private_testing_placeholder__ = \"\";\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/ml_parser/interpolation_config.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class InterpolationConfig {\n    start: string;\n    end: string;\n    static fromArray(markers: [string, string] | null): InterpolationConfig;\n    constructor(start: string, end: string);\n}\nexport declare const DEFAULT_INTERPOLATION_CONFIG: InterpolationConfig;\n"
  },
  {
    "path": "node_modules/@angular/core/src/event_emitter.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * @usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * @Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   @Output() open: EventEmitter<any> = new EventEmitter();\n *   @Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n */\nexport declare class EventEmitter<T> extends Subject<T> {\n    /**\n     * Internal\n     */\n    __isAsync: boolean;\n    /**\n     * Creates an instance of this class that can\n     * deliver events synchronously or asynchronously.\n     *\n     * @param isAsync When true, deliver events asynchronously.\n     *\n     */\n    constructor(isAsync?: boolean);\n    /**\n     * Emits an event containing a given value.\n     * @param value The value to emit.\n     */\n    emit(value?: T): void;\n    /**\n     * Registers handlers for events emitted by this instance.\n     * @param generatorOrNext When supplied, a custom handler for emitted events.\n     * @param error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     */\n    subscribe(generatorOrNext?: any, error?: any, complete?: any): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { anchorDef, elementDef } from './element';\nexport { clearOverrides, createNgModuleFactory, overrideComponentView, overrideProvider } from './entrypoint';\nexport { ngContentDef } from './ng_content';\nexport { moduleDef, moduleProvideDef } from './ng_module';\nexport { directiveDef, pipeDef, providerDef } from './provider';\nexport { pureArrayDef, pureObjectDef, purePipeDef } from './pure_expression';\nexport { queryDef } from './query';\nexport { ViewRef_, createComponentFactory, getComponentViewDefinitionFactory, nodeValue } from './refs';\nexport { initServicesIfNeeded } from './services';\nexport { textDef } from './text';\nexport { EMPTY_ARRAY, EMPTY_MAP, createRendererType2, elementEventFullName, inlineInterpolate, interpolate, rootRenderNodes, tokenKey, unwrapValue } from './util';\nexport { viewDef } from './view';\nexport { attachEmbeddedView, detachEmbeddedView, moveEmbeddedView } from './view_attach';\nexport * from './types';\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/compiler_util/expression_converter.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as cdAst from '../expression_parser/ast';\nimport * as o from '../output/output_ast';\nexport declare class EventHandlerVars {\n    static event: o.ReadVarExpr;\n}\nexport interface LocalResolver {\n    getLocal(name: string): o.Expression | null;\n}\nexport declare class ConvertActionBindingResult {\n    /**\n     * Render2 compatible statements,\n     */\n    stmts: o.Statement[];\n    /**\n     * Variable name used with render2 compatible statements.\n     */\n    allowDefault: o.ReadVarExpr;\n    /**\n     * Store statements which are render3 compatible.\n     */\n    render3Stmts: o.Statement[];\n    constructor(\n    /**\n     * Render2 compatible statements,\n     */\n    stmts: o.Statement[], \n    /**\n     * Variable name used with render2 compatible statements.\n     */\n    allowDefault: o.ReadVarExpr);\n}\nexport declare type InterpolationFunction = (args: o.Expression[]) => o.Expression;\n/**\n * Converts the given expression AST into an executable output AST, assuming the expression is\n * used in an action binding (e.g. an event handler).\n */\nexport declare function convertActionBinding(localResolver: LocalResolver | null, implicitReceiver: o.Expression, action: cdAst.AST, bindingId: string, interpolationFunction?: InterpolationFunction): ConvertActionBindingResult;\nexport interface BuiltinConverter {\n    (args: o.Expression[]): o.Expression;\n}\nexport interface BuiltinConverterFactory {\n    createLiteralArrayConverter(argCount: number): BuiltinConverter;\n    createLiteralMapConverter(keys: {\n        key: string;\n        quoted: boolean;\n    }[]): BuiltinConverter;\n    createPipeConverter(name: string, argCount: number): BuiltinConverter;\n}\nexport declare function convertPropertyBindingBuiltins(converterFactory: BuiltinConverterFactory, ast: cdAst.AST): cdAst.AST;\nexport declare class ConvertPropertyBindingResult {\n    stmts: o.Statement[];\n    currValExpr: o.Expression;\n    constructor(stmts: o.Statement[], currValExpr: o.Expression);\n}\nexport declare enum BindingForm {\n    General = 0,\n    TrySimple = 1\n}\n/**\n * Converts the given expression AST into an executable output AST, assuming the expression\n * is used in property binding. The expression has to be preprocessed via\n * `convertPropertyBindingBuiltins`.\n */\nexport declare function convertPropertyBinding(localResolver: LocalResolver | null, implicitReceiver: o.Expression, expressionWithoutBuiltins: cdAst.AST, bindingId: string, form: BindingForm, interpolationFunction?: InterpolationFunction): ConvertPropertyBindingResult;\nexport declare function temporaryDeclaration(bindingId: string, temporaryNumber: number): o.Statement;\nexport declare class BuiltinFunctionCall extends cdAst.FunctionCall {\n    args: cdAst.AST[];\n    converter: BuiltinConverter;\n    constructor(span: cdAst.ParseSpan, args: cdAst.AST[], converter: BuiltinConverter);\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/render3/r3_template_transform.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as html from '../ml_parser/ast';\nimport { ParseError } from '../parse_util';\nimport { BindingParser } from '../template_parser/binding_parser';\nimport * as t from './r3_ast';\nexport declare type Render3ParseResult = {\n    nodes: t.Node[];\n    errors: ParseError[];\n    ngContentSelectors: string[];\n    hasNgContent: boolean;\n};\nexport declare function htmlAstToRender3Ast(htmlNodes: html.Node[], bindingParser: BindingParser): Render3ParseResult;\n"
  },
  {
    "path": "node_modules/@angular/common/src/location/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './platform_location';\nexport * from './location_strategy';\nexport * from './hash_location_strategy';\nexport * from './path_location_strategy';\nexport * from './location';\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/render3/r3_jit.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as o from '../output/output_ast';\n/**\n * JIT compiles an expression and returns the result of executing that expression.\n *\n * @param def the definition which will be compiled and executed to get the value to patch\n * @param context an object map of @angular/core symbol names to symbols which will be available in\n * the context of the compiled expression\n * @param sourceUrl a URL to use for the source map of the compiled expression\n * @param constantPool an optional `ConstantPool` which contains constants used in the expression\n */\nexport declare function jitExpression(def: o.Expression, context: {\n    [key: string]: any;\n}, sourceUrl: string, preStatements: o.Statement[]): any;\n"
  },
  {
    "path": "node_modules/@angular/common/src/pipes/slice_pipe.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PipeTransform } from '@angular/core';\n/**\n * @ngModule CommonModule\n * @description\n *\n * Creates a new `Array` or `String` containing a subset (slice) of the elements.\n *\n * @usageNotes\n *\n * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`\n * and `String.prototype.slice()`.\n *\n * When operating on an `Array`, the returned `Array` is always a copy even when all\n * the elements are being returned.\n *\n * When operating on a blank value, the pipe returns the blank value.\n *\n * ### List Example\n *\n * This `ngFor` example:\n *\n * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}\n *\n * produces the following:\n *\n * ```html\n * <li>b</li>\n * <li>c</li>\n * ```\n *\n * ### String Examples\n *\n * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}\n *\n */\nexport declare class SlicePipe implements PipeTransform {\n    /**\n     * @param value a list or a string to be sliced.\n     * @param start the starting index of the subset to return:\n     *   - **a positive integer**: return the item at `start` index and all items after\n     *     in the list or string expression.\n     *   - **a negative integer**: return the item at `start` index from the end and all items after\n     *     in the list or string expression.\n     *   - **if positive and greater than the size of the expression**: return an empty list or\n     * string.\n     *   - **if negative and greater than the size of the expression**: return entire list or string.\n     * @param end the ending index of the subset to return:\n     *   - **omitted**: return all items until the end.\n     *   - **if positive**: return all items before `end` index of the list or string.\n     *   - **if negative**: return all items before `end` index from the end of the list or string.\n     */\n    transform(value: any, start: number, end?: number): any;\n    private supports;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/render3/view/t2_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AST } from '../../expression_parser/ast';\nimport { BoundAttribute, BoundEvent, Element, Node, Reference, Template, TextAttribute, Variable } from '../r3_ast';\n/**\n * A logical target for analysis, which could contain a template or other types of bindings.\n */\nexport interface Target {\n    template?: Node[];\n}\n/**\n * Metadata regarding a directive that's needed to match it against template elements. This is\n * provided by a consumer of the t2 APIs.\n */\nexport interface DirectiveMeta {\n    /**\n     * Name of the directive class (used for debugging).\n     */\n    name: string;\n    /**\n     * Whether the directive is a component.\n     */\n    isComponent: boolean;\n    /**\n     * Set of inputs which this directive claims.\n     *\n     * Goes from property names to field names.\n     */\n    inputs: {\n        [property: string]: string;\n    };\n    /**\n     * Set of outputs which this directive claims.\n     *\n     * Goes from property names to field names.\n     */\n    outputs: {\n        [property: string]: string;\n    };\n    /**\n     * Name under which the directive is exported, if any (exportAs in Angular).\n     *\n     * Null otherwise\n     */\n    exportAs: string | null;\n}\n/**\n * Interface to the binding API, which processes a template and returns an object similar to the\n * `ts.TypeChecker`.\n *\n * The returned `BoundTarget` has an API for extracting information about the processed target.\n */\nexport interface TargetBinder<D extends DirectiveMeta> {\n    bind(target: Target): BoundTarget<D>;\n}\n/**\n * Result of performing the binding operation against a `Target`.\n *\n * The original `Target` is accessible, as well as a suite of methods for extracting binding\n * information regarding the `Target`.\n *\n * @param DirectiveT directive metadata type\n */\nexport interface BoundTarget<DirectiveT extends DirectiveMeta> {\n    /**\n     * Get the original `Target` that was bound.\n     */\n    readonly target: Target;\n    /**\n     * For a given template node (either an `Element` or a `Template`), get the set of directives\n     * which matched the node, if any.\n     */\n    getDirectivesOfNode(node: Element | Template): DirectiveT[] | null;\n    /**\n     * For a given `Reference`, get the reference's target - either an `Element`, a `Template`, or\n     * a directive on a particular node.\n     */\n    getReferenceTarget(ref: Reference): {\n        directive: DirectiveT;\n        node: Element | Template;\n    } | Element | Template | null;\n    /**\n     * For a given binding, get the entity to which the binding is being made.\n     *\n     * This will either be a directive or the node itself.\n     */\n    getConsumerOfBinding(binding: BoundAttribute | BoundEvent | TextAttribute): DirectiveT | Element | Template | null;\n    /**\n     * If the given `AST` expression refers to a `Reference` or `Variable` within the `Target`, then\n     * return that.\n     *\n     * Otherwise, returns `null`.\n     *\n     * This is only defined for `AST` expressions that read or write to a property of an\n     * `ImplicitReceiver`.\n     */\n    getExpressionTarget(expr: AST): Reference | Variable | null;\n    /**\n     * Given a particular `Reference` or `Variable`, get the `Template` which created it.\n     *\n     * All `Variable`s are defined on templates, so this will always return a value for a `Variable`\n     * from the `Target`. For `Reference`s this only returns a value if the `Reference` points to a\n     * `Template`. Returns `null` otherwise.\n     */\n    getTemplateOfSymbol(symbol: Reference | Variable): Template | null;\n    /**\n     * Get the nesting level of a particular `Template`.\n     *\n     * This starts at 1 for top-level `Template`s within the `Target` and increases for `Template`s\n     * nested at deeper levels.\n     */\n    getNestingLevel(template: Template): number;\n    /**\n     * Get a list of all the directives used by the target.\n     */\n    getUsedDirectives(): DirectiveT[];\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/i18n/message_bundle.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HtmlParser } from '../ml_parser/html_parser';\nimport { InterpolationConfig } from '../ml_parser/interpolation_config';\nimport { ParseError } from '../parse_util';\nimport * as i18n from './i18n_ast';\nimport { Serializer } from './serializers/serializer';\n/**\n * A container for message extracted from the templates.\n */\nexport declare class MessageBundle {\n    private _htmlParser;\n    private _implicitTags;\n    private _implicitAttrs;\n    private _locale;\n    private _messages;\n    constructor(_htmlParser: HtmlParser, _implicitTags: string[], _implicitAttrs: {\n        [k: string]: string[];\n    }, _locale?: string | null);\n    updateFromTemplate(html: string, url: string, interpolationConfig: InterpolationConfig): ParseError[];\n    getMessages(): i18n.Message[];\n    write(serializer: Serializer, filterSources?: (path: string) => string): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/injectable_compiler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileInjectableMetadata } from './compile_metadata';\nimport { CompileReflector } from './compile_reflector';\nimport * as o from './output/output_ast';\nimport { OutputContext } from './util';\nexport declare class InjectableCompiler {\n    private reflector;\n    private alwaysGenerateDef;\n    private tokenInjector;\n    constructor(reflector: CompileReflector, alwaysGenerateDef: boolean);\n    private depsArray;\n    factoryFor(injectable: CompileInjectableMetadata, ctx: OutputContext): o.Expression;\n    injectableDef(injectable: CompileInjectableMetadata, ctx: OutputContext): o.Expression;\n    compile(injectable: CompileInjectableMetadata, ctx: OutputContext): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/style_compiler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileDirectiveMetadata, CompileStylesheetMetadata } from './compile_metadata';\nimport { UrlResolver } from './url_resolver';\nimport { OutputContext } from './util';\nexport declare const HOST_ATTR: string;\nexport declare const CONTENT_ATTR: string;\nexport declare class StylesCompileDependency {\n    name: string;\n    moduleUrl: string;\n    setValue: (value: any) => void;\n    constructor(name: string, moduleUrl: string, setValue: (value: any) => void);\n}\nexport declare class CompiledStylesheet {\n    outputCtx: OutputContext;\n    stylesVar: string;\n    dependencies: StylesCompileDependency[];\n    isShimmed: boolean;\n    meta: CompileStylesheetMetadata;\n    constructor(outputCtx: OutputContext, stylesVar: string, dependencies: StylesCompileDependency[], isShimmed: boolean, meta: CompileStylesheetMetadata);\n}\nexport declare class StyleCompiler {\n    private _urlResolver;\n    private _shadowCss;\n    constructor(_urlResolver: UrlResolver);\n    compileComponent(outputCtx: OutputContext, comp: CompileDirectiveMetadata): CompiledStylesheet;\n    compileStyles(outputCtx: OutputContext, comp: CompileDirectiveMetadata, stylesheet: CompileStylesheetMetadata, shim?: boolean): CompiledStylesheet;\n    needsStyleShim(comp: CompileDirectiveMetadata): boolean;\n    private _compileStyles;\n    private _shimIfNeeded;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/metadata/view.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Defines template and style encapsulation options available for Component's {@link Component}.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n */\nexport declare enum ViewEncapsulation {\n    /**\n     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n     * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n     * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n     * selectors.\n     *\n     * This is the default option.\n     */\n    Emulated = 0,\n    /**\n     * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n     * Use the native encapsulation mechanism of the renderer.\n     *\n     * For the DOM this means using the deprecated [Shadow DOM\n     * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    Native = 1,\n    /**\n     * Don't provide any template or style encapsulation.\n     */\n    None = 2,\n    /**\n     * Use Shadow DOM to encapsulate styles.\n     *\n     * For the DOM this means using modern [Shadow\n     * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    ShadowDom = 3\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/zone.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { NgZone, NoopNgZone as ɵNoopNgZone } from './zone/ng_zone';\n"
  },
  {
    "path": "node_modules/@angular/core/src/testability/testability.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgZone } from '../zone/ng_zone';\n/**\n * Testability API.\n * `declare` keyword causes tsickle to generate externs, so these methods are\n * not renamed by Closure Compiler.\n * @experimental\n */\nexport declare interface PublicTestability {\n    isStable(): boolean;\n    whenStable(callback: Function, timeout?: number, updateCallback?: Function): void;\n    findProviders(using: any, provider: string, exactMatch: boolean): any[];\n}\nexport interface PendingMacrotask {\n    source: string;\n    creationLocation: Error;\n    runCount?: number;\n    data: TaskData;\n}\nexport interface TaskData {\n    target?: XMLHttpRequest;\n    delay?: number;\n    isPeriodic?: boolean;\n}\nexport declare type DoneCallback = (didWork: boolean, tasks?: PendingMacrotask[]) => void;\nexport declare type UpdateCallback = (tasks: PendingMacrotask[]) => boolean;\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * @experimental\n */\nexport declare class Testability implements PublicTestability {\n    private _ngZone;\n    private _pendingCount;\n    private _isZoneStable;\n    private _callbacks;\n    private taskTrackingZone;\n    constructor(_ngZone: NgZone);\n    private _watchAngularEvents;\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     */\n    increasePendingRequestCount(): number;\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     */\n    decreasePendingRequestCount(): number;\n    /**\n     * Whether an associated application is stable\n     */\n    isStable(): boolean;\n    private _runCallbacksIfReady;\n    private getPendingTasks;\n    private addCallback;\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     */\n    whenStable(doneCb: Function, timeout?: number, updateCb?: Function): void;\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     */\n    getPendingRequestCount(): number;\n    /**\n     * Find providers by name\n     * @param using The root element to search from\n     * @param provider The name of binding variable\n     * @param exactMatch Whether using exactMatch\n     */\n    findProviders(using: any, provider: string, exactMatch: boolean): any[];\n}\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @experimental\n */\nexport declare class TestabilityRegistry {\n    constructor();\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param token token of application, root element\n     * @param testability Testability hook\n     */\n    registerApplication(token: any, testability: Testability): void;\n    /**\n     * Unregisters an application.\n     * @param token token of application, root element\n     */\n    unregisterApplication(token: any): void;\n    /**\n     * Unregisters all applications\n     */\n    unregisterAllApplications(): void;\n    /**\n     * Get a testability hook associated with the application\n     * @param elem root element\n     */\n    getTestability(elem: any): Testability | null;\n    /**\n     * Get all registered testabilities\n     */\n    getAllTestabilities(): Testability[];\n    /**\n     * Get all registered applications(root elements)\n     */\n    getAllRootElements(): any[];\n    /**\n     * Find testability of a node in the Tree\n     * @param elem node\n     * @param findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     */\n    findTestabilityInTree(elem: Node, findInAncestors?: boolean): Testability | null;\n}\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * @experimental Testability apis are primarily intended to be used by e2e test tool vendors like\n * the Protractor team.\n */\nexport interface GetTestability {\n    addToWindow(registry: TestabilityRegistry): void;\n    findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean): Testability | null;\n}\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @experimental\n */\nexport declare function setTestabilityGetter(getter: GetTestability): void;\n"
  },
  {
    "path": "node_modules/@angular/common/src/pipes/json_pipe.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PipeTransform } from '@angular/core';\n/**\n * @ngModule CommonModule\n * @description\n *\n * Converts a value into its JSON-format representation.  Useful for debugging.\n *\n * @usageNotes\n *\n * The following component uses a JSON pipe to convert an object\n * to JSON format, and displays the string in both formats for comparison.\n *\n * {@example common/pipes/ts/json_pipe.ts region='JsonPipe'}\n *\n */\nexport declare class JsonPipe implements PipeTransform {\n    /**\n     * @param value A value of any type to convert into a JSON-format string.\n     */\n    transform(value: any): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/output/source_map.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare type SourceMap = {\n    version: number;\n    file?: string;\n    sourceRoot: string;\n    sources: string[];\n    sourcesContent: (string | null)[];\n    mappings: string;\n};\nexport declare class SourceMapGenerator {\n    private file;\n    private sourcesContent;\n    private lines;\n    private lastCol0;\n    private hasMappings;\n    constructor(file?: string | null);\n    addSource(url: string, content?: string | null): this;\n    addLine(): this;\n    addMapping(col0: number, sourceUrl?: string, sourceLine0?: number, sourceCol0?: number): this;\n    private readonly currentLine;\n    toJSON(): SourceMap | null;\n    toJsComment(): string;\n}\nexport declare function toBase64String(value: string): string;\n"
  },
  {
    "path": "node_modules/@angular/common/src/pipes/keyvalue_pipe.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { KeyValueDiffers, PipeTransform } from '@angular/core';\n/**\n * A key value pair.\n * Usually used to represent the key value pairs from a Map or Object.\n */\nexport interface KeyValue<K, V> {\n    key: K;\n    value: V;\n}\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms Object or Map into an array of key value pairs.\n *\n * The output array will be ordered by keys.\n * By default the comparator will be by Unicode point value.\n * You can optionally pass a compareFn if your keys are complex types.\n *\n * @usageNotes\n * ### Examples\n *\n * This examples show how an Object or a Map and be iterated by ngFor with the use of this keyvalue\n * pipe.\n *\n * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\n */\nexport declare class KeyValuePipe implements PipeTransform {\n    private readonly differs;\n    constructor(differs: KeyValueDiffers);\n    private differ;\n    private keyValues;\n    transform<K, V>(input: null, compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): null;\n    transform<V>(input: {\n        [key: string]: V;\n    } | Map<string, V>, compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number): Array<KeyValue<string, V>>;\n    transform<V>(input: {\n        [key: number]: V;\n    } | Map<number, V>, compareFn?: (a: KeyValue<number, V>, b: KeyValue<number, V>) => number): Array<KeyValue<number, V>>;\n    transform<K, V>(input: Map<K, V>, compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;\n}\nexport declare function defaultComparator<K, V>(keyValueA: KeyValue<K, V>, keyValueB: KeyValue<K, V>): number;\n"
  },
  {
    "path": "node_modules/@angular/common/src/pipes/async_pipe.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, OnDestroy, PipeTransform } from '@angular/core';\nimport { Observable } from 'rxjs';\n/**\n * @ngModule CommonModule\n * @description\n *\n * Unwraps a value from an asynchronous primitive.\n *\n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks.\n *\n * @usageNotes\n *\n * ### Examples\n *\n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n *\n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n *\n */\nexport declare class AsyncPipe implements OnDestroy, PipeTransform {\n    private _ref;\n    private _latestValue;\n    private _latestReturnedValue;\n    private _subscription;\n    private _obj;\n    private _strategy;\n    constructor(_ref: ChangeDetectorRef);\n    ngOnDestroy(): void;\n    transform<T>(obj: null): null;\n    transform<T>(obj: undefined): undefined;\n    transform<T>(obj: Observable<T> | null | undefined): T | null;\n    transform<T>(obj: Promise<T> | null | undefined): T | null;\n    private _subscribe;\n    private _selectStrategy;\n    private _dispose;\n    private _updateLatestValue;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/sanitization/sanitization.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StyleSanitizeFn } from './style_sanitizer';\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted `html`, typically from the user.\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n */\nexport declare function sanitizeHtml(unsafeHtml: any): string;\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `style` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted `style`, typically from the user.\n * @returns `style` string which is safe to bind to the `style` properties, because all of the\n * dangerous javascript and urls have been removed.\n */\nexport declare function sanitizeStyle(unsafeStyle: any): string;\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n */\nexport declare function sanitizeUrl(unsafeUrl: any): string;\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n */\nexport declare function sanitizeResourceUrl(unsafeResourceUrl: any): string;\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {@link bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted `script`, typically from the user.\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts`s have been allowed to pass.\n */\nexport declare function sanitizeScript(unsafeScript: any): string;\n/**\n * The default style sanitizer will handle sanitization for style properties by\n * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n */\nexport declare const defaultStyleSanitizer: StyleSanitizeFn;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/context_discovery.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { LContext } from './interfaces/context';\nimport { LViewData } from './interfaces/view';\n/** Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LViewData` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n */\nexport declare function getContext(target: any): LContext | null;\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param componentInstance\n * @returns The component's view\n */\nexport declare function getComponentViewByInstance(componentInstance: {}): LViewData;\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n */\nexport declare function attachPatchData(target: any, data: LViewData | LContext): void;\nexport declare function isComponentInstance(instance: any): boolean;\nexport declare function isDirectiveInstance(instance: any): boolean;\n/**\n * Returns a list of directives extracted from the given view based on the\n * provided list of directive index values.\n *\n * @param nodeIndex The node index\n * @param lViewData The target view data\n * @param includeComponents Whether or not to include components in returned directives\n */\nexport declare function discoverDirectives(nodeIndex: number, lViewData: LViewData, includeComponents: boolean): any[] | null;\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n */\nexport declare function discoverLocalRefs(lViewData: LViewData, nodeIndex: number): {\n    [key: string]: any;\n} | null;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/view_compiler/type_check_compiler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AotCompilerOptions } from '../aot/compiler_options';\nimport { StaticReflector } from '../aot/static_reflector';\nimport { StaticSymbol } from '../aot/static_symbol';\nimport { CompileDirectiveMetadata, CompilePipeSummary } from '../compile_metadata';\nimport * as o from '../output/output_ast';\nimport { TemplateAst } from '../template_parser/template_ast';\nimport { OutputContext } from '../util';\n/**\n * Generates code that is used to type check templates.\n */\nexport declare class TypeCheckCompiler {\n    private options;\n    private reflector;\n    constructor(options: AotCompilerOptions, reflector: StaticReflector);\n    /**\n     * Important notes:\n     * - This must not produce new `import` statements, but only refer to types outside\n     *   of the file via the variables provided via externalReferenceVars.\n     *   This allows Typescript to reuse the old program's structure as no imports have changed.\n     * - This must not produce any exports, as this would pollute the .d.ts file\n     *   and also violate the point above.\n     */\n    compileComponent(componentId: string, component: CompileDirectiveMetadata, template: TemplateAst[], usedPipes: CompilePipeSummary[], externalReferenceVars: Map<StaticSymbol, string>, ctx: OutputContext): o.Statement[];\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/pipes/case_conversion_pipes.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PipeTransform } from '@angular/core';\n/**\n * Transforms text to all lower case.\n *\n * @see `UpperCasePipe`\n * @see `TitleCasePipe`\n * @usageNotes\n *\n * The following example defines a view that allows the user to enter\n * text, and then uses the pipe to convert the input text to all lower case.\n *\n * <code-example path=\"common/pipes/ts/lowerupper_pipe.ts\" region='LowerUpperPipe'></code-example>\n *\n * @ngModule CommonModule\n */\nexport declare class LowerCasePipe implements PipeTransform {\n    /**\n     * @param value The string to transform to lower case.\n     */\n    transform(value: string): string;\n}\n/**\n * Transforms text to title case.\n * Capitalizes the first letter of each word, and transforms the\n * rest of the word to lower case.\n * Words are delimited by any whitespace character, such as a space, tab, or line-feed character.\n *\n * @see `LowerCasePipe`\n * @see `UpperCasePipe`\n *\n * @usageNotes\n * The following example shows the result of transforming various strings into title case.\n *\n * <code-example path=\"common/pipes/ts/titlecase_pipe.ts\" region='TitleCasePipe'></code-example>\n *\n * @ngModule CommonModule\n */\nexport declare class TitleCasePipe implements PipeTransform {\n    /**\n     * @param value The string to transform to title case.\n     */\n    transform(value: string): string;\n}\n/**\n * Transforms text to all upper case.\n * @see `LowerCasePipe`\n * @see `TitleCasePipe`\n *\n * @ngModule CommonModule\n */\nexport declare class UpperCasePipe implements PipeTransform {\n    /**\n     * @param value The string to transform to upper case.\n     */\n    transform(value: string): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ConstantPool } from './constant_pool';\nimport * as o from './output/output_ast';\nimport { ParseError } from './parse_util';\nexport declare function dashCaseToCamelCase(input: string): string;\nexport declare function splitAtColon(input: string, defaultValues: string[]): string[];\nexport declare function splitAtPeriod(input: string, defaultValues: string[]): string[];\nexport declare function visitValue(value: any, visitor: ValueVisitor, context: any): any;\nexport declare function isDefined(val: any): boolean;\nexport declare function noUndefined<T>(val: T | undefined): T;\nexport interface ValueVisitor {\n    visitArray(arr: any[], context: any): any;\n    visitStringMap(map: {\n        [key: string]: any;\n    }, context: any): any;\n    visitPrimitive(value: any, context: any): any;\n    visitOther(value: any, context: any): any;\n}\nexport declare class ValueTransformer implements ValueVisitor {\n    visitArray(arr: any[], context: any): any;\n    visitStringMap(map: {\n        [key: string]: any;\n    }, context: any): any;\n    visitPrimitive(value: any, context: any): any;\n    visitOther(value: any, context: any): any;\n}\nexport declare type SyncAsync<T> = T | Promise<T>;\nexport declare const SyncAsync: {\n    assertSync: <T>(value: SyncAsync<T>) => T;\n    then: <T, R>(value: SyncAsync<T>, cb: (value: T) => SyncAsync<R>) => SyncAsync<R>;\n    all: <T>(syncAsyncValues: SyncAsync<T>[]) => SyncAsync<T[]>;\n};\nexport declare function error(msg: string): never;\nexport declare function syntaxError(msg: string, parseErrors?: ParseError[]): Error;\nexport declare function isSyntaxError(error: Error): boolean;\nexport declare function getParseErrors(error: Error): ParseError[];\nexport declare function escapeRegExp(s: string): string;\nexport declare function utf8Encode(str: string): string;\nexport interface OutputContext {\n    genFilePath: string;\n    statements: o.Statement[];\n    constantPool: ConstantPool;\n    importExpr(reference: any, typeParams?: o.Type[] | null, useSummaries?: boolean): o.Expression;\n}\nexport declare function stringify(token: any): string;\n/**\n * Lazily retrieves the reference value from a forwardRef.\n */\nexport declare function resolveForwardRef(type: any): any;\n/**\n * Determine if the argument is shaped like a Promise\n */\nexport declare function isPromise(obj: any): obj is Promise<any>;\nexport declare class Version {\n    full: string;\n    readonly major: string;\n    readonly minor: string;\n    readonly patch: string;\n    constructor(full: string);\n}\nexport interface Console {\n    log(message: string): void;\n    warn(message: string): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/ng_content.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NodeDef, ViewData } from './types';\nexport declare function ngContentDef(ngContentIndex: null | number, index: number): NodeDef;\nexport declare function appendNgContent(view: ViewData, renderHost: any, def: NodeDef): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/player.d.ts",
    "content": "import { ComponentInstance, DirectiveInstance, Player } from './interfaces/player';\nexport declare function addPlayer(ref: ComponentInstance | DirectiveInstance | HTMLElement, player: Player): void;\nexport declare function getPlayers(ref: ComponentInstance | DirectiveInstance | HTMLElement): Player[];\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewEncapsulation } from '../metadata/view';\nimport { RendererType2 } from '../render/api';\nimport { BindingDef, BindingFlags, Definition, DefinitionFactory, DepDef, DepFlags, ElementData, NodeDef, QueryValueType, ViewData } from './types';\nexport declare const NOOP: any;\nexport declare function tokenKey(token: any): string;\nexport declare function unwrapValue(view: ViewData, nodeIdx: number, bindingIdx: number, value: any): any;\nexport declare function createRendererType2(values: {\n    styles: (string | any[])[];\n    encapsulation: ViewEncapsulation;\n    data: {\n        [kind: string]: any[];\n    };\n}): RendererType2;\nexport declare function resolveRendererType2(type?: RendererType2 | null): RendererType2 | null;\nexport declare function checkBinding(view: ViewData, def: NodeDef, bindingIdx: number, value: any): boolean;\nexport declare function checkAndUpdateBinding(view: ViewData, def: NodeDef, bindingIdx: number, value: any): boolean;\nexport declare function checkBindingNoChanges(view: ViewData, def: NodeDef, bindingIdx: number, value: any): void;\nexport declare function markParentViewsForCheck(view: ViewData): void;\nexport declare function markParentViewsForCheckProjectedViews(view: ViewData, endView: ViewData): void;\nexport declare function dispatchEvent(view: ViewData, nodeIndex: number, eventName: string, event: any): boolean | undefined;\nexport declare function declaredViewContainer(view: ViewData): ElementData | null;\n/**\n * for component views, this is the host element.\n * for embedded views, this is the index of the parent node\n * that contains the view container.\n */\nexport declare function viewParentEl(view: ViewData): NodeDef | null;\nexport declare function renderNode(view: ViewData, def: NodeDef): any;\nexport declare function elementEventFullName(target: string | null, name: string): string;\nexport declare function isComponentView(view: ViewData): boolean;\nexport declare function isEmbeddedView(view: ViewData): boolean;\nexport declare function filterQueryId(queryId: number): number;\nexport declare function splitMatchedQueriesDsl(matchedQueriesDsl: [string | number, QueryValueType][] | null): {\n    matchedQueries: {\n        [queryId: string]: QueryValueType;\n    };\n    references: {\n        [refId: string]: QueryValueType;\n    };\n    matchedQueryIds: number;\n};\nexport declare function splitDepsDsl(deps: ([DepFlags, any] | any)[], sourceName?: string): DepDef[];\nexport declare function getParentRenderElement(view: ViewData, renderHost: any, def: NodeDef): any;\nexport declare function resolveDefinition<D extends Definition<any>>(factory: DefinitionFactory<D>): D;\nexport declare function rootRenderNodes(view: ViewData): any[];\nexport declare const enum RenderNodeAction {\n    Collect = 0,\n    AppendChild = 1,\n    InsertBefore = 2,\n    RemoveChild = 3\n}\nexport declare function visitRootRenderNodes(view: ViewData, action: RenderNodeAction, parentNode: any, nextSibling: any, target?: any[]): void;\nexport declare function visitSiblingRenderNodes(view: ViewData, action: RenderNodeAction, startIndex: number, endIndex: number, parentNode: any, nextSibling: any, target?: any[]): void;\nexport declare function visitProjectedRenderNodes(view: ViewData, ngContentIndex: number, action: RenderNodeAction, parentNode: any, nextSibling: any, target?: any[]): void;\nexport declare function splitNamespace(name: string): string[];\nexport declare function calcBindingFlags(bindings: BindingDef[]): BindingFlags;\nexport declare function interpolate(valueCount: number, constAndInterp: string[]): string;\nexport declare function inlineInterpolate(valueCount: number, c0: string, a1: any, c1: string, a2?: any, c2?: string, a3?: any, c3?: string, a4?: any, c4?: string, a5?: any, c5?: string, a6?: any, c6?: string, a7?: any, c7?: string, a8?: any, c8?: string, a9?: any, c9?: string): string;\nexport declare const EMPTY_ARRAY: any[];\nexport declare const EMPTY_MAP: {\n    [key: string]: any;\n};\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/private_export_testing.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { TestingCompiler as ɵTestingCompiler, TestingCompilerFactory as ɵTestingCompilerFactory } from './test_compiler';\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/element.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { RendererType2 } from '../render/api';\nimport { SecurityContext } from '../sanitization/security';\nimport { BindingFlags, ElementData, ElementHandleEventFn, NodeDef, NodeFlags, QueryValueType, ViewData, ViewDefinitionFactory } from './types';\nexport declare function anchorDef(flags: NodeFlags, matchedQueriesDsl: null | [string | number, QueryValueType][], ngContentIndex: null | number, childCount: number, handleEvent?: null | ElementHandleEventFn, templateFactory?: ViewDefinitionFactory): NodeDef;\nexport declare function elementDef(checkIndex: number, flags: NodeFlags, matchedQueriesDsl: null | [string | number, QueryValueType][], ngContentIndex: null | number, childCount: number, namespaceAndName: string | null, fixedAttrs?: null | [string, string][], bindings?: null | [BindingFlags, string, string | SecurityContext | null][], outputs?: null | ([string, string])[], handleEvent?: null | ElementHandleEventFn, componentView?: null | ViewDefinitionFactory, componentRendererType?: RendererType2 | null): NodeDef;\nexport declare function createElement(view: ViewData, renderHost: any, def: NodeDef): ElementData;\nexport declare function listenToElementOutputs(view: ViewData, compView: ViewData, def: NodeDef, el: any): void;\nexport declare function checkAndUpdateElementInline(view: ViewData, def: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any, v9: any): boolean;\nexport declare function checkAndUpdateElementDynamic(view: ViewData, def: NodeDef, values: any[]): boolean;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/template_parser/binding_parser.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileDirectiveSummary, CompilePipeSummary } from '../compile_metadata';\nimport { SecurityContext } from '../core';\nimport { ASTWithSource, BindingPipe, BoundElementProperty, ParsedEvent, ParsedProperty, ParsedVariable, RecursiveAstVisitor } from '../expression_parser/ast';\nimport { Parser } from '../expression_parser/parser';\nimport { InterpolationConfig } from '../ml_parser/interpolation_config';\nimport { ParseError, ParseSourceSpan } from '../parse_util';\nimport { ElementSchemaRegistry } from '../schema/element_schema_registry';\n/**\n * Parses bindings in templates and in the directive host area.\n */\nexport declare class BindingParser {\n    private _exprParser;\n    private _interpolationConfig;\n    private _schemaRegistry;\n    errors: ParseError[];\n    pipesByName: Map<string, CompilePipeSummary> | null;\n    private _usedPipes;\n    constructor(_exprParser: Parser, _interpolationConfig: InterpolationConfig, _schemaRegistry: ElementSchemaRegistry, pipes: CompilePipeSummary[] | null, errors: ParseError[]);\n    getUsedPipes(): CompilePipeSummary[];\n    createBoundHostProperties(dirMeta: CompileDirectiveSummary, sourceSpan: ParseSourceSpan): ParsedProperty[] | null;\n    createDirectiveHostPropertyAsts(dirMeta: CompileDirectiveSummary, elementSelector: string, sourceSpan: ParseSourceSpan): BoundElementProperty[] | null;\n    createDirectiveHostEventAsts(dirMeta: CompileDirectiveSummary, sourceSpan: ParseSourceSpan): ParsedEvent[] | null;\n    parseInterpolation(value: string, sourceSpan: ParseSourceSpan): ASTWithSource;\n    parseInlineTemplateBinding(tplKey: string, tplValue: string, sourceSpan: ParseSourceSpan, targetMatchableAttrs: string[][], targetProps: ParsedProperty[], targetVars: ParsedVariable[]): void;\n    private _parseTemplateBindings;\n    parseLiteralAttr(name: string, value: string | null, sourceSpan: ParseSourceSpan, targetMatchableAttrs: string[][], targetProps: ParsedProperty[]): void;\n    parsePropertyBinding(name: string, expression: string, isHost: boolean, sourceSpan: ParseSourceSpan, targetMatchableAttrs: string[][], targetProps: ParsedProperty[]): void;\n    parsePropertyInterpolation(name: string, value: string, sourceSpan: ParseSourceSpan, targetMatchableAttrs: string[][], targetProps: ParsedProperty[]): boolean;\n    private _parsePropertyAst;\n    private _parseAnimation;\n    private _parseBinding;\n    createBoundElementProperty(elementSelector: string, boundProp: ParsedProperty): BoundElementProperty;\n    parseEvent(name: string, expression: string, sourceSpan: ParseSourceSpan, targetMatchableAttrs: string[][], targetEvents: ParsedEvent[]): void;\n    private _parseAnimationEvent;\n    private _parseRegularEvent;\n    private _parseAction;\n    private _reportError;\n    private _reportExpressionParserErrors;\n    private _checkPipes;\n    /**\n     * @param propName the name of the property / attribute\n     * @param sourceSpan\n     * @param isAttr true when binding to an attribute\n     */\n    private _validatePropertyOrAttributeName;\n}\nexport declare class PipeCollector extends RecursiveAstVisitor {\n    pipes: Map<string, BindingPipe>;\n    visitPipe(ast: BindingPipe, context: any): any;\n}\nexport declare function calcPossibleSecurityContexts(registry: ElementSchemaRegistry, selector: string, propName: string, isAttribute: boolean): SecurityContext[];\n"
  },
  {
    "path": "node_modules/@angular/common/testing/src/mock_location_strategy.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LocationStrategy } from '@angular/common';\n/**\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\n * location events.\n *\n *\n */\nexport declare class MockLocationStrategy extends LocationStrategy {\n    internalBaseHref: string;\n    internalPath: string;\n    internalTitle: string;\n    urlChanges: string[];\n    constructor();\n    simulatePopState(url: string): void;\n    path(includeHash?: boolean): string;\n    prepareExternalUrl(internal: string): string;\n    pushState(ctx: any, title: string, path: string, query: string): void;\n    replaceState(ctx: any, title: string, path: string, query: string): void;\n    onPopState(fn: (value: any) => void): void;\n    getBaseHref(): string;\n    back(): void;\n    forward(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/jit/compiler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileProviderMetadata } from '../compile_metadata';\nimport { CompileReflector } from '../compile_reflector';\nimport { CompilerConfig } from '../config';\nimport { Type } from '../core';\nimport { CompileMetadataResolver } from '../metadata_resolver';\nimport { NgModuleCompiler } from '../ng_module_compiler';\nimport { StyleCompiler } from '../style_compiler';\nimport { SummaryResolver } from '../summary_resolver';\nimport { TemplateParser } from '../template_parser/template_parser';\nimport { Console } from '../util';\nimport { ViewCompiler } from '../view_compiler/view_compiler';\nexport interface ModuleWithComponentFactories {\n    ngModuleFactory: object;\n    componentFactories: object[];\n}\n/**\n * An internal module of the Angular compiler that begins with component types,\n * extracts templates, and eventually produces a compiled version of the component\n * ready for linking into an application.\n *\n * @security  When compiling templates at runtime, you must ensure that the entire template comes\n * from a trusted source. Attacker-controlled data introduced by a template could expose your\n * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).\n */\nexport declare class JitCompiler {\n    private _metadataResolver;\n    private _templateParser;\n    private _styleCompiler;\n    private _viewCompiler;\n    private _ngModuleCompiler;\n    private _summaryResolver;\n    private _reflector;\n    private _compilerConfig;\n    private _console;\n    private getExtraNgModuleProviders;\n    private _compiledTemplateCache;\n    private _compiledHostTemplateCache;\n    private _compiledDirectiveWrapperCache;\n    private _compiledNgModuleCache;\n    private _sharedStylesheetCount;\n    private _addedAotSummaries;\n    constructor(_metadataResolver: CompileMetadataResolver, _templateParser: TemplateParser, _styleCompiler: StyleCompiler, _viewCompiler: ViewCompiler, _ngModuleCompiler: NgModuleCompiler, _summaryResolver: SummaryResolver<Type>, _reflector: CompileReflector, _compilerConfig: CompilerConfig, _console: Console, getExtraNgModuleProviders: (ngModule: any) => CompileProviderMetadata[]);\n    compileModuleSync(moduleType: Type): object;\n    compileModuleAsync(moduleType: Type): Promise<object>;\n    compileModuleAndAllComponentsSync(moduleType: Type): ModuleWithComponentFactories;\n    compileModuleAndAllComponentsAsync(moduleType: Type): Promise<ModuleWithComponentFactories>;\n    getComponentFactory(component: Type): object;\n    loadAotSummaries(summaries: () => any[]): void;\n    private _addAotSummaries;\n    hasAotSummary(ref: Type): boolean;\n    private _filterJitIdentifiers;\n    private _compileModuleAndComponents;\n    private _compileModuleAndAllComponents;\n    private _loadModules;\n    private _compileModule;\n    clearCacheFor(type: Type): void;\n    clearCache(): void;\n    private _createCompiledHostTemplate;\n    private _createCompiledTemplate;\n    private _compileTemplate;\n    private _parseTemplate;\n    private _resolveStylesCompileResult;\n    private _resolveAndEvalStylesCompileResult;\n    private _interpretOrJit;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/query.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { QueryList } from '../linker/query_list';\nimport { NodeDef, NodeFlags, QueryBindingType, QueryValueType, ViewData } from './types';\nexport declare function queryDef(flags: NodeFlags, id: number, bindings: {\n    [propName: string]: QueryBindingType;\n}): NodeDef;\nexport declare function createQuery(): QueryList<any>;\nexport declare function dirtyParentQueries(view: ViewData): void;\nexport declare function checkAndUpdateQuery(view: ViewData, nodeDef: NodeDef): void;\nexport declare function getQueryValue(view: ViewData, nodeDef: NodeDef, queryValueType: QueryValueType): any;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/i18n/extractor.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StaticReflector } from '../aot/static_reflector';\nimport { StaticSymbolResolver, StaticSymbolResolverHost } from '../aot/static_symbol_resolver';\nimport { AotSummaryResolverHost } from '../aot/summary_resolver';\nimport { CompileMetadataResolver } from '../metadata_resolver';\nimport { MessageBundle } from './message_bundle';\n/**\n * The host of the Extractor disconnects the implementation from TypeScript / other language\n * services and from underlying file systems.\n */\nexport interface ExtractorHost extends StaticSymbolResolverHost, AotSummaryResolverHost {\n    /**\n     * Converts a path that refers to a resource into an absolute filePath\n     * that can be lateron used for loading the resource via `loadResource.\n     */\n    resourceNameToFileName(path: string, containingFile: string): string | null;\n    /**\n     * Loads a resource (e.g. html / css)\n     */\n    loadResource(path: string): Promise<string> | string;\n}\nexport declare class Extractor {\n    host: ExtractorHost;\n    private staticSymbolResolver;\n    private messageBundle;\n    private metadataResolver;\n    constructor(host: ExtractorHost, staticSymbolResolver: StaticSymbolResolver, messageBundle: MessageBundle, metadataResolver: CompileMetadataResolver);\n    extract(rootFiles: string[]): Promise<MessageBundle>;\n    static create(host: ExtractorHost, locale: string | null): {\n        extractor: Extractor;\n        staticReflector: StaticReflector;\n    };\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/pure_expression.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NodeDef, PureExpressionData, ViewData } from './types';\nexport declare function purePipeDef(checkIndex: number, argCount: number): NodeDef;\nexport declare function pureArrayDef(checkIndex: number, argCount: number): NodeDef;\nexport declare function pureObjectDef(checkIndex: number, propToIndex: {\n    [p: string]: number;\n}): NodeDef;\nexport declare function createPureExpression(view: ViewData, def: NodeDef): PureExpressionData;\nexport declare function checkAndUpdatePureExpressionInline(view: ViewData, def: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any, v9: any): boolean;\nexport declare function checkAndUpdatePureExpressionDynamic(view: ViewData, def: NodeDef, values: any[]): boolean;\n"
  },
  {
    "path": "node_modules/@angular/core/src/sanitization/bypass.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\ndeclare const BRAND = \"__SANITIZER_TRUSTED_BRAND__\";\nexport declare const enum BypassType {\n    Url = \"Url\",\n    Html = \"Html\",\n    ResourceUrl = \"ResourceUrl\",\n    Script = \"Script\",\n    Style = \"Style\"\n}\n/**\n * A branded trusted string used with sanitization.\n *\n * See: {@link TrustedHtmlString}, {@link TrustedResourceUrlString}, {@link TrustedScriptString},\n * {@link TrustedStyleString}, {@link TrustedUrlString}\n */\nexport interface TrustedString extends String {\n    [BRAND]: BypassType;\n}\n/**\n * A branded trusted string used with sanitization of `html` strings.\n *\n * See: {@link bypassSanitizationTrustHtml} and {@link htmlSanitizer}.\n */\nexport interface TrustedHtmlString extends TrustedString {\n    [BRAND]: BypassType.Html;\n}\n/**\n * A branded trusted string used with sanitization of `style` strings.\n *\n * See: {@link bypassSanitizationTrustStyle} and {@link styleSanitizer}.\n */\nexport interface TrustedStyleString extends TrustedString {\n    [BRAND]: BypassType.Style;\n}\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {@link bypassSanitizationTrustScript} and {@link scriptSanitizer}.\n */\nexport interface TrustedScriptString extends TrustedString {\n    [BRAND]: BypassType.Script;\n}\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {@link bypassSanitizationTrustUrl} and {@link urlSanitizer}.\n */\nexport interface TrustedUrlString extends TrustedString {\n    [BRAND]: BypassType.Url;\n}\n/**\n * A branded trusted string used with sanitization of `resourceUrl` strings.\n *\n * See: {@link bypassSanitizationTrustResourceUrl} and {@link resourceUrlSanitizer}.\n */\nexport interface TrustedResourceUrlString extends TrustedString {\n    [BRAND]: BypassType.ResourceUrl;\n}\nexport declare function allowSanitizationBypass(value: any, type: BypassType): boolean;\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n *\n * @param trustedHtml `html` string which needs to be implicitly trusted.\n * @returns a `html` `String` which has been branded to be implicitly trusted.\n */\nexport declare function bypassSanitizationTrustHtml(trustedHtml: string): TrustedHtmlString;\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\n *\n * @param trustedStyle `style` string which needs to be implicitly trusted.\n * @returns a `style` `String` which has been branded to be implicitly trusted.\n */\nexport declare function bypassSanitizationTrustStyle(trustedStyle: string): TrustedStyleString;\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n *\n * @param trustedScript `script` string which needs to be implicitly trusted.\n * @returns a `script` `String` which has been branded to be implicitly trusted.\n */\nexport declare function bypassSanitizationTrustScript(trustedScript: string): TrustedScriptString;\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\n *\n * @param trustedUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` `String` which has been branded to be implicitly trusted.\n */\nexport declare function bypassSanitizationTrustUrl(trustedUrl: string): TrustedUrlString;\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` `String` which has been branded to be implicitly trusted.\n */\nexport declare function bypassSanitizationTrustResourceUrl(trustedResourceUrl: string): TrustedResourceUrlString;\nexport {};\n"
  },
  {
    "path": "node_modules/@angular/core/src/debug/debug_node.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '../di';\nimport { DebugContext } from '../view/index';\nexport declare class EventListener {\n    name: string;\n    callback: Function;\n    constructor(name: string, callback: Function);\n}\n/**\n * @experimental All debugging apis are currently experimental.\n */\nexport declare class DebugNode {\n    nativeNode: any;\n    private _debugContext;\n    listeners: EventListener[];\n    parent: DebugElement | null;\n    constructor(nativeNode: any, parent: DebugNode | null, _debugContext: DebugContext);\n    readonly injector: Injector;\n    readonly componentInstance: any;\n    readonly context: any;\n    readonly references: {\n        [key: string]: any;\n    };\n    readonly providerTokens: any[];\n}\n/**\n * @experimental All debugging apis are currently experimental.\n */\nexport declare class DebugElement extends DebugNode {\n    name: string;\n    properties: {\n        [key: string]: any;\n    };\n    attributes: {\n        [key: string]: string | null;\n    };\n    classes: {\n        [key: string]: boolean;\n    };\n    styles: {\n        [key: string]: string | null;\n    };\n    childNodes: DebugNode[];\n    nativeElement: any;\n    constructor(nativeNode: any, parent: any, _debugContext: DebugContext);\n    addChild(child: DebugNode): void;\n    removeChild(child: DebugNode): void;\n    insertChildrenAfter(child: DebugNode, newChildren: DebugNode[]): void;\n    insertBefore(refChild: DebugNode, newChild: DebugNode): void;\n    query(predicate: Predicate<DebugElement>): DebugElement;\n    queryAll(predicate: Predicate<DebugElement>): DebugElement[];\n    queryAllNodes(predicate: Predicate<DebugNode>): DebugNode[];\n    readonly children: DebugElement[];\n    triggerEventHandler(eventName: string, eventObj: any): void;\n}\n/**\n * @experimental\n */\nexport declare function asNativeElements(debugEls: DebugElement[]): any;\n/**\n * @experimental\n */\nexport declare function getDebugNode(nativeNode: any): DebugNode | null;\nexport declare function getAllDebugNodes(): DebugNode[];\nexport declare function indexDebugNode(node: DebugNode): void;\nexport declare function removeDebugNodeFromIndex(node: DebugNode): void;\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n *\n * @experimental All debugging apis are currently experimental.\n */\nexport interface Predicate<T> {\n    (value: T): boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/i18n/i18n_html_parser.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MissingTranslationStrategy } from '../core';\nimport { HtmlParser } from '../ml_parser/html_parser';\nimport { InterpolationConfig } from '../ml_parser/interpolation_config';\nimport { ParseTreeResult } from '../ml_parser/parser';\nimport { Console } from '../util';\nexport declare class I18NHtmlParser implements HtmlParser {\n    private _htmlParser;\n    getTagDefinition: any;\n    private _translationBundle;\n    constructor(_htmlParser: HtmlParser, translations?: string, translationsFormat?: string, missingTranslation?: MissingTranslationStrategy, console?: Console);\n    parse(source: string, url: string, parseExpansionForms?: boolean, interpolationConfig?: InterpolationConfig): ParseTreeResult;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/ivy_switch/compiler/ivy_switch_on.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { compileComponent, compileDirective } from '../../render3/jit/directive';\nimport { compileInjectable } from '../../render3/jit/injectable';\nimport { compileNgModule, compileNgModuleDefs, patchComponentDefWithScope } from '../../render3/jit/module';\nimport { compilePipe } from '../../render3/jit/pipe';\nexport declare const ivyEnabled = true;\nexport declare const R3_COMPILE_COMPONENT: typeof compileComponent;\nexport declare const R3_COMPILE_DIRECTIVE: typeof compileDirective;\nexport declare const R3_COMPILE_INJECTABLE: typeof compileInjectable;\nexport declare const R3_COMPILE_NGMODULE: typeof compileNgModule;\nexport declare const R3_COMPILE_PIPE: typeof compilePipe;\nexport declare const R3_COMPILE_NGMODULE_DEFS: typeof compileNgModuleDefs;\nexport declare const R3_PATCH_COMPONENT_DEF_WTIH_SCOPE: typeof patchComponentDefWithScope;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/debug.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Renderer2, RendererType2 } from '../render/api';\nimport { DebugRendererFactory2 } from '../view/services';\n/**\n * Adapts the DebugRendererFactory2 to create a DebugRenderer2 specific for IVY.\n *\n * The created DebugRenderer know how to create a Debug Context specific to IVY.\n */\nexport declare class Render3DebugRendererFactory2 extends DebugRendererFactory2 {\n    createRenderer(element: any, renderData: RendererType2 | null): Renderer2;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/ml_parser/html_parser.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InterpolationConfig } from './interpolation_config';\nimport { ParseTreeResult, Parser } from './parser';\nexport { ParseTreeResult, TreeError } from './parser';\nexport declare class HtmlParser extends Parser {\n    constructor();\n    parse(source: string, url: string, parseExpansionForms?: boolean, interpolationConfig?: InterpolationConfig): ParseTreeResult;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/ivy_switch/runtime/legacy.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\ndeclare function noopFactory(...tokens: any[]): any;\ndeclare type FactoryFunction<T = any> = (...tokens: any[]) => T;\nexport declare const R3_ELEMENT_REF_FACTORY__POST_NGCC__: FactoryFunction;\nexport declare const R3_TEMPLATE_REF_FACTORY__POST_NGCC__: FactoryFunction;\nexport declare const R3_CHANGE_DETECTOR_REF_FACTORY__POST_NGCC__: FactoryFunction;\nexport declare const R3_VIEW_CONTAINER_REF_FACTORY__POST_NGCC__: FactoryFunction;\nexport declare const R3_RENDERER2_FACTORY__POST_NGCC__: FactoryFunction;\nexport declare const R3_ELEMENT_REF_FACTORY__PRE_NGCC__: typeof noopFactory;\nexport declare const R3_TEMPLATE_REF_FACTORY__PRE_NGCC__: typeof noopFactory;\nexport declare const R3_CHANGE_DETECTOR_REF_FACTORY__PRE_NGCC__: typeof noopFactory;\nexport declare const R3_VIEW_CONTAINER_REF_FACTORY__PRE_NGCC__: typeof noopFactory;\nexport declare const R3_RENDERER2_FACTORY__PRE_NGCC__: typeof noopFactory;\nexport declare let R3_ELEMENT_REF_FACTORY: typeof noopFactory;\nexport declare let R3_TEMPLATE_REF_FACTORY: typeof noopFactory;\nexport declare let R3_CHANGE_DETECTOR_REF_FACTORY: typeof noopFactory;\nexport declare let R3_VIEW_CONTAINER_REF_FACTORY: typeof noopFactory;\nexport declare let R3_RENDERER2_FACTORY: typeof noopFactory;\nexport {};\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/text.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NodeDef, TextData, ViewData } from './types';\nexport declare function textDef(checkIndex: number, ngContentIndex: number | null, staticText: string[]): NodeDef;\nexport declare function createText(view: ViewData, renderHost: any, def: NodeDef): TextData;\nexport declare function checkAndUpdateTextInline(view: ViewData, def: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any, v9: any): boolean;\nexport declare function checkAndUpdateTextDynamic(view: ViewData, def: NodeDef, values: any[]): boolean;\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/view.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ArgumentType, NodeDef, RootData, ViewData, ViewDefinition, ViewFlags, ViewUpdateFn } from './types';\nexport declare function viewDef(flags: ViewFlags, nodes: NodeDef[], updateDirectives?: null | ViewUpdateFn, updateRenderer?: null | ViewUpdateFn): ViewDefinition;\nexport declare function createEmbeddedView(parent: ViewData, anchorDef: NodeDef, viewDef: ViewDefinition, context?: any): ViewData;\nexport declare function createRootView(root: RootData, def: ViewDefinition, context?: any): ViewData;\nexport declare function createComponentView(parentView: ViewData, nodeDef: NodeDef, viewDef: ViewDefinition, hostElement: any): ViewData;\nexport declare function checkNoChangesView(view: ViewData): void;\nexport declare function checkAndUpdateView(view: ViewData): void;\nexport declare function checkAndUpdateNode(view: ViewData, nodeDef: NodeDef, argStyle: ArgumentType, v0?: any, v1?: any, v2?: any, v3?: any, v4?: any, v5?: any, v6?: any, v7?: any, v8?: any, v9?: any): boolean;\nexport declare function checkNoChangesNode(view: ViewData, nodeDef: NodeDef, argStyle: ArgumentType, v0?: any, v1?: any, v2?: any, v3?: any, v4?: any, v5?: any, v6?: any, v7?: any, v8?: any, v9?: any): any;\nexport declare function destroyView(view: ViewData): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/application_init.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from './di';\n/**\n * A function that will be executed when an application is initialized.\n */\nexport declare const APP_INITIALIZER: InjectionToken<(() => void)[]>;\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER}s.\n */\nexport declare class ApplicationInitStatus {\n    private appInits;\n    private resolve;\n    private reject;\n    private initialized;\n    readonly donePromise: Promise<any>;\n    readonly done = false;\n    constructor(appInits: (() => any)[]);\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/template_parser/template_ast.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AstPath } from '../ast_path';\nimport { CompileDirectiveSummary, CompileProviderMetadata, CompileTokenMetadata } from '../compile_metadata';\nimport { SecurityContext } from '../core';\nimport { AST, BoundElementProperty, ParsedEvent, ParsedVariable } from '../expression_parser/ast';\nimport { LifecycleHooks } from '../lifecycle_reflector';\nimport { ParseSourceSpan } from '../parse_util';\n/**\n * An Abstract Syntax Tree node representing part of a parsed Angular template.\n */\nexport interface TemplateAst {\n    /**\n     * The source span from which this node was parsed.\n     */\n    sourceSpan: ParseSourceSpan;\n    /**\n     * Visit this node and possibly transform it.\n     */\n    visit(visitor: TemplateAstVisitor, context: any): any;\n}\n/**\n * A segment of text within the template.\n */\nexport declare class TextAst implements TemplateAst {\n    value: string;\n    ngContentIndex: number;\n    sourceSpan: ParseSourceSpan;\n    constructor(value: string, ngContentIndex: number, sourceSpan: ParseSourceSpan);\n    visit(visitor: TemplateAstVisitor, context: any): any;\n}\n/**\n * A bound expression within the text of a template.\n */\nexport declare class BoundTextAst implements TemplateAst {\n    value: AST;\n    ngContentIndex: number;\n    sourceSpan: ParseSourceSpan;\n    constructor(value: AST, ngContentIndex: number, sourceSpan: ParseSourceSpan);\n    visit(visitor: TemplateAstVisitor, context: any): any;\n}\n/**\n * A plain attribute on an element.\n */\nexport declare class AttrAst implements TemplateAst {\n    name: string;\n    value: string;\n    sourceSpan: ParseSourceSpan;\n    constructor(name: string, value: string, sourceSpan: ParseSourceSpan);\n    visit(visitor: TemplateAstVisitor, context: any): any;\n}\nexport declare const enum PropertyBindingType {\n    Property = 0,\n    Attribute = 1,\n    Class = 2,\n    Style = 3,\n    Animation = 4\n}\n/**\n * A binding for an element property (e.g. `[property]=\"expression\"`) or an animation trigger (e.g.\n * `[@trigger]=\"stateExp\"`)\n */\nexport declare class BoundElementPropertyAst implements TemplateAst {\n    name: string;\n    type: PropertyBindingType;\n    securityContext: SecurityContext;\n    value: AST;\n    unit: string | null;\n    sourceSpan: ParseSourceSpan;\n    readonly isAnimation: boolean;\n    constructor(name: string, type: PropertyBindingType, securityContext: SecurityContext, value: AST, unit: string | null, sourceSpan: ParseSourceSpan);\n    static fromBoundProperty(prop: BoundElementProperty): BoundElementPropertyAst;\n    visit(visitor: TemplateAstVisitor, context: any): any;\n}\n/**\n * A binding for an element event (e.g. `(event)=\"handler()\"`) or an animation trigger event (e.g.\n * `(@trigger.phase)=\"callback($event)\"`).\n */\nexport declare class BoundEventAst implements TemplateAst {\n    name: string;\n    target: string | null;\n    phase: string | null;\n    handler: AST;\n    sourceSpan: ParseSourceSpan;\n    readonly fullName: string;\n    readonly isAnimation: boolean;\n    constructor(name: string, target: string | null, phase: string | null, handler: AST, sourceSpan: ParseSourceSpan);\n    static calcFullName(name: string, target: string | null, phase: string | null): string;\n    static fromParsedEvent(event: ParsedEvent): BoundEventAst;\n    visit(visitor: TemplateAstVisitor, context: any): any;\n}\n/**\n * A reference declaration on an element (e.g. `let someName=\"expression\"`).\n */\nexport declare class ReferenceAst implements TemplateAst {\n    name: string;\n    value: CompileTokenMetadata;\n    originalValue: string;\n    sourceSpan: ParseSourceSpan;\n    constructor(name: string, value: CompileTokenMetadata, originalValue: string, sourceSpan: ParseSourceSpan);\n    visit(visitor: TemplateAstVisitor, context: any): any;\n}\n/**\n * A variable declaration on a <ng-template> (e.g. `var-someName=\"someLocalName\"`).\n */\nexport declare class VariableAst implements TemplateAst {\n    name: string;\n    value: string;\n    sourceSpan: ParseSourceSpan;\n    constructor(name: string, value: string, sourceSpan: ParseSourceSpan);\n    static fromParsedVariable(v: ParsedVariable): VariableAst;\n    visit(visitor: TemplateAstVisitor, context: any): any;\n}\n/**\n * An element declaration in a template.\n */\nexport declare class ElementAst implements TemplateAst {\n    name: string;\n    attrs: AttrAst[];\n    inputs: BoundElementPropertyAst[];\n    outputs: BoundEventAst[];\n    references: ReferenceAst[];\n    directives: DirectiveAst[];\n    providers: ProviderAst[];\n    hasViewContainer: boolean;\n    queryMatches: QueryMatch[];\n    children: TemplateAst[];\n    ngContentIndex: number | null;\n    sourceSpan: ParseSourceSpan;\n    endSourceSpan: ParseSourceSpan | null;\n    constructor(name: string, attrs: AttrAst[], inputs: BoundElementPropertyAst[], outputs: BoundEventAst[], references: ReferenceAst[], directives: DirectiveAst[], providers: ProviderAst[], hasViewContainer: boolean, queryMatches: QueryMatch[], children: TemplateAst[], ngContentIndex: number | null, sourceSpan: ParseSourceSpan, endSourceSpan: ParseSourceSpan | null);\n    visit(visitor: TemplateAstVisitor, context: any): any;\n}\n/**\n * A `<ng-template>` element included in an Angular template.\n */\nexport declare class EmbeddedTemplateAst implements TemplateAst {\n    attrs: AttrAst[];\n    outputs: BoundEventAst[];\n    references: ReferenceAst[];\n    variables: VariableAst[];\n    directives: DirectiveAst[];\n    providers: ProviderAst[];\n    hasViewContainer: boolean;\n    queryMatches: QueryMatch[];\n    children: TemplateAst[];\n    ngContentIndex: number;\n    sourceSpan: ParseSourceSpan;\n    constructor(attrs: AttrAst[], outputs: BoundEventAst[], references: ReferenceAst[], variables: VariableAst[], directives: DirectiveAst[], providers: ProviderAst[], hasViewContainer: boolean, queryMatches: QueryMatch[], children: TemplateAst[], ngContentIndex: number, sourceSpan: ParseSourceSpan);\n    visit(visitor: TemplateAstVisitor, context: any): any;\n}\n/**\n * A directive property with a bound value (e.g. `*ngIf=\"condition\").\n */\nexport declare class BoundDirectivePropertyAst implements TemplateAst {\n    directiveName: string;\n    templateName: string;\n    value: AST;\n    sourceSpan: ParseSourceSpan;\n    constructor(directiveName: string, templateName: string, value: AST, sourceSpan: ParseSourceSpan);\n    visit(visitor: TemplateAstVisitor, context: any): any;\n}\n/**\n * A directive declared on an element.\n */\nexport declare class DirectiveAst implements TemplateAst {\n    directive: CompileDirectiveSummary;\n    inputs: BoundDirectivePropertyAst[];\n    hostProperties: BoundElementPropertyAst[];\n    hostEvents: BoundEventAst[];\n    contentQueryStartId: number;\n    sourceSpan: ParseSourceSpan;\n    constructor(directive: CompileDirectiveSummary, inputs: BoundDirectivePropertyAst[], hostProperties: BoundElementPropertyAst[], hostEvents: BoundEventAst[], contentQueryStartId: number, sourceSpan: ParseSourceSpan);\n    visit(visitor: TemplateAstVisitor, context: any): any;\n}\n/**\n * A provider declared on an element\n */\nexport declare class ProviderAst implements TemplateAst {\n    token: CompileTokenMetadata;\n    multiProvider: boolean;\n    eager: boolean;\n    providers: CompileProviderMetadata[];\n    providerType: ProviderAstType;\n    lifecycleHooks: LifecycleHooks[];\n    sourceSpan: ParseSourceSpan;\n    readonly isModule: boolean;\n    constructor(token: CompileTokenMetadata, multiProvider: boolean, eager: boolean, providers: CompileProviderMetadata[], providerType: ProviderAstType, lifecycleHooks: LifecycleHooks[], sourceSpan: ParseSourceSpan, isModule: boolean);\n    visit(visitor: TemplateAstVisitor, context: any): any;\n}\nexport declare enum ProviderAstType {\n    PublicService = 0,\n    PrivateService = 1,\n    Component = 2,\n    Directive = 3,\n    Builtin = 4\n}\n/**\n * Position where content is to be projected (instance of `<ng-content>` in a template).\n */\nexport declare class NgContentAst implements TemplateAst {\n    index: number;\n    ngContentIndex: number;\n    sourceSpan: ParseSourceSpan;\n    constructor(index: number, ngContentIndex: number, sourceSpan: ParseSourceSpan);\n    visit(visitor: TemplateAstVisitor, context: any): any;\n}\nexport interface QueryMatch {\n    queryId: number;\n    value: CompileTokenMetadata;\n}\n/**\n * A visitor for {@link TemplateAst} trees that will process each node.\n */\nexport interface TemplateAstVisitor {\n    visit?(ast: TemplateAst, context: any): any;\n    visitNgContent(ast: NgContentAst, context: any): any;\n    visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any;\n    visitElement(ast: ElementAst, context: any): any;\n    visitReference(ast: ReferenceAst, context: any): any;\n    visitVariable(ast: VariableAst, context: any): any;\n    visitEvent(ast: BoundEventAst, context: any): any;\n    visitElementProperty(ast: BoundElementPropertyAst, context: any): any;\n    visitAttr(ast: AttrAst, context: any): any;\n    visitBoundText(ast: BoundTextAst, context: any): any;\n    visitText(ast: TextAst, context: any): any;\n    visitDirective(ast: DirectiveAst, context: any): any;\n    visitDirectiveProperty(ast: BoundDirectivePropertyAst, context: any): any;\n}\n/**\n * A visitor that accepts each node but doesn't do anything. It is intended to be used\n * as the base class for a visitor that is only interested in a subset of the node types.\n */\nexport declare class NullTemplateVisitor implements TemplateAstVisitor {\n    visitNgContent(ast: NgContentAst, context: any): void;\n    visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): void;\n    visitElement(ast: ElementAst, context: any): void;\n    visitReference(ast: ReferenceAst, context: any): void;\n    visitVariable(ast: VariableAst, context: any): void;\n    visitEvent(ast: BoundEventAst, context: any): void;\n    visitElementProperty(ast: BoundElementPropertyAst, context: any): void;\n    visitAttr(ast: AttrAst, context: any): void;\n    visitBoundText(ast: BoundTextAst, context: any): void;\n    visitText(ast: TextAst, context: any): void;\n    visitDirective(ast: DirectiveAst, context: any): void;\n    visitDirectiveProperty(ast: BoundDirectivePropertyAst, context: any): void;\n}\n/**\n * Base class that can be used to build a visitor that visits each node\n * in an template ast recursively.\n */\nexport declare class RecursiveTemplateAstVisitor extends NullTemplateVisitor implements TemplateAstVisitor {\n    constructor();\n    visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any;\n    visitElement(ast: ElementAst, context: any): any;\n    visitDirective(ast: DirectiveAst, context: any): any;\n    protected visitChildren<T extends TemplateAst>(context: any, cb: (visit: (<V extends TemplateAst>(children: V[] | undefined) => void)) => void): any;\n}\n/**\n * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.\n */\nexport declare function templateVisitAll(visitor: TemplateAstVisitor, asts: TemplateAst[], context?: any): any[];\nexport declare type TemplateAstPath = AstPath<TemplateAst>;\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/metadata_overrider.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MetadataOverride } from './metadata_override';\nexport declare class MetadataOverrider {\n    private _references;\n    /**\n     * Creates a new instance for the given metadata class\n     * based on an old instance and overrides.\n     */\n    overrideMetadata<C extends T, T>(metadataClass: {\n        new (options: T): C;\n    }, oldMetadata: C, override: MetadataOverride<T>): C;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/version.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description Represents the version of Angular\n *\n *\n */\nexport declare class Version {\n    full: string;\n    readonly major: string;\n    readonly minor: string;\n    readonly patch: string;\n    constructor(full: string);\n}\nexport declare const VERSION: Version;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/i18n/serializers/xmb.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as i18n from '../i18n_ast';\nimport { PlaceholderMapper, Serializer } from './serializer';\nexport declare class Xmb extends Serializer {\n    write(messages: i18n.Message[], locale: string | null): string;\n    load(content: string, url: string): {\n        locale: string;\n        i18nNodesByMsgId: {\n            [msgId: string]: i18n.Node[];\n        };\n    };\n    digest(message: i18n.Message): string;\n    createNameMapper(message: i18n.Message): PlaceholderMapper;\n}\nexport declare function digest(message: i18n.Message): string;\nexport declare function toPublicName(internalName: string): string;\n"
  },
  {
    "path": "node_modules/@angular/common/src/location/location_strategy.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { LocationChangeListener } from './platform_location';\n/**\n * `LocationStrategy` is responsible for representing and reading route state\n * from the browser's URL. Angular provides two strategies:\n * {@link HashLocationStrategy} and {@link PathLocationStrategy}.\n *\n * This is used under the hood of the {@link Location} service.\n *\n * Applications should use the {@link Router} or {@link Location} services to\n * interact with application route state.\n *\n * For instance, {@link HashLocationStrategy} produces URLs like\n * `http://example.com#/foo`, and {@link PathLocationStrategy} produces\n * `http://example.com/foo` as an equivalent URL.\n *\n * See these two classes for more.\n *\n *\n */\nexport declare abstract class LocationStrategy {\n    abstract path(includeHash?: boolean): string;\n    abstract prepareExternalUrl(internal: string): string;\n    abstract pushState(state: any, title: string, url: string, queryParams: string): void;\n    abstract replaceState(state: any, title: string, url: string, queryParams: string): void;\n    abstract forward(): void;\n    abstract back(): void;\n    abstract onPopState(fn: LocationChangeListener): void;\n    abstract getBaseHref(): string;\n}\n/**\n * The `APP_BASE_HREF` token represents the base href to be used with the\n * {@link PathLocationStrategy}.\n *\n * If you're using {@link PathLocationStrategy}, you must provide a provider to a string\n * representing the URL prefix that should be preserved when generating and recognizing\n * URLs.\n *\n * @usageNotes\n *\n * ### Example\n *\n * ```typescript\n * import {Component, NgModule} from '@angular/core';\n * import {APP_BASE_HREF} from '@angular/common';\n *\n * @NgModule({\n *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n * })\n * class AppModule {}\n * ```\n *\n *\n */\nexport declare const APP_BASE_HREF: InjectionToken<string>;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/aot/lazy_routes.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileNgModuleMetadata } from '../compile_metadata';\nimport { StaticReflector } from './static_reflector';\nimport { StaticSymbol } from './static_symbol';\nexport interface LazyRoute {\n    module: StaticSymbol;\n    route: string;\n    referencedModule: StaticSymbol;\n}\nexport declare function listLazyRoutes(moduleMeta: CompileNgModuleMetadata, reflector: StaticReflector): LazyRoute[];\nexport declare function parseLazyRoute(route: string, reflector: StaticReflector, module?: StaticSymbol): LazyRoute;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/identifiers.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileTokenMetadata } from './compile_metadata';\nimport { CompileReflector } from './compile_reflector';\nimport * as o from './output/output_ast';\nexport declare class Identifiers {\n    static ANALYZE_FOR_ENTRY_COMPONENTS: o.ExternalReference;\n    static ElementRef: o.ExternalReference;\n    static NgModuleRef: o.ExternalReference;\n    static ViewContainerRef: o.ExternalReference;\n    static ChangeDetectorRef: o.ExternalReference;\n    static QueryList: o.ExternalReference;\n    static TemplateRef: o.ExternalReference;\n    static Renderer2: o.ExternalReference;\n    static CodegenComponentFactoryResolver: o.ExternalReference;\n    static ComponentFactoryResolver: o.ExternalReference;\n    static ComponentFactory: o.ExternalReference;\n    static ComponentRef: o.ExternalReference;\n    static NgModuleFactory: o.ExternalReference;\n    static createModuleFactory: o.ExternalReference;\n    static moduleDef: o.ExternalReference;\n    static moduleProviderDef: o.ExternalReference;\n    static RegisterModuleFactoryFn: o.ExternalReference;\n    static inject: o.ExternalReference;\n    static INJECTOR: o.ExternalReference;\n    static Injector: o.ExternalReference;\n    static defineInjectable: o.ExternalReference;\n    static InjectableDef: o.ExternalReference;\n    static ViewEncapsulation: o.ExternalReference;\n    static ChangeDetectionStrategy: o.ExternalReference;\n    static SecurityContext: o.ExternalReference;\n    static LOCALE_ID: o.ExternalReference;\n    static TRANSLATIONS_FORMAT: o.ExternalReference;\n    static inlineInterpolate: o.ExternalReference;\n    static interpolate: o.ExternalReference;\n    static EMPTY_ARRAY: o.ExternalReference;\n    static EMPTY_MAP: o.ExternalReference;\n    static Renderer: o.ExternalReference;\n    static viewDef: o.ExternalReference;\n    static elementDef: o.ExternalReference;\n    static anchorDef: o.ExternalReference;\n    static textDef: o.ExternalReference;\n    static directiveDef: o.ExternalReference;\n    static providerDef: o.ExternalReference;\n    static queryDef: o.ExternalReference;\n    static pureArrayDef: o.ExternalReference;\n    static pureObjectDef: o.ExternalReference;\n    static purePipeDef: o.ExternalReference;\n    static pipeDef: o.ExternalReference;\n    static nodeValue: o.ExternalReference;\n    static ngContentDef: o.ExternalReference;\n    static unwrapValue: o.ExternalReference;\n    static createRendererType2: o.ExternalReference;\n    static RendererType2: o.ExternalReference;\n    static ViewDefinition: o.ExternalReference;\n    static createComponentFactory: o.ExternalReference;\n}\nexport declare function createTokenForReference(reference: any): CompileTokenMetadata;\nexport declare function createTokenForExternalReference(reflector: CompileReflector, reference: o.ExternalReference): CompileTokenMetadata;\n"
  },
  {
    "path": "node_modules/@angular/core/src/ivy_switch/compiler/legacy.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport interface DirectiveCompiler {\n    (type: any, meta: any): void;\n}\nexport declare const R3_COMPILE_COMPONENT__POST_NGCC__: DirectiveCompiler;\nexport declare const R3_COMPILE_DIRECTIVE__POST_NGCC__: DirectiveCompiler;\nexport declare const R3_COMPILE_INJECTABLE__POST_NGCC__: DirectiveCompiler;\nexport declare const R3_COMPILE_NGMODULE__POST_NGCC__: DirectiveCompiler;\nexport declare const R3_COMPILE_PIPE__POST_NGCC__: DirectiveCompiler;\nexport declare const R3_COMPILE_NGMODULE_DEFS__POST_NGCC__: DirectiveCompiler;\nexport declare const R3_PATCH_COMPONENT_DEF_WTIH_SCOPE__POST_NGCC__: DirectiveCompiler;\nexport declare const ivyEnable__POST_NGCC__: boolean;\nexport declare const ivyEnabled = false;\nexport declare let R3_COMPILE_COMPONENT: DirectiveCompiler;\nexport declare let R3_COMPILE_DIRECTIVE: DirectiveCompiler;\nexport declare let R3_COMPILE_INJECTABLE: DirectiveCompiler;\nexport declare let R3_COMPILE_NGMODULE: DirectiveCompiler;\nexport declare let R3_COMPILE_PIPE: DirectiveCompiler;\nexport declare let R3_COMPILE_NGMODULE_DEFS: DirectiveCompiler;\nexport declare let R3_PATCH_COMPONENT_DEF_WTIH_SCOPE: DirectiveCompiler;\n"
  },
  {
    "path": "node_modules/@angular/core/src/core_private_export.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { ALLOW_MULTIPLE_PLATFORMS as ɵALLOW_MULTIPLE_PLATFORMS } from './application_ref';\nexport { APP_ID_RANDOM_PROVIDER as ɵAPP_ID_RANDOM_PROVIDER } from './application_tokens';\nexport { defaultIterableDiffers as ɵdefaultIterableDiffers, defaultKeyValueDiffers as ɵdefaultKeyValueDiffers } from './change_detection/change_detection';\nexport { devModeEqual as ɵdevModeEqual } from './change_detection/change_detection_util';\nexport { isListLikeIterable as ɵisListLikeIterable } from './change_detection/change_detection_util';\nexport { ChangeDetectorStatus as ɵChangeDetectorStatus, isDefaultChangeDetectionStrategy as ɵisDefaultChangeDetectionStrategy } from './change_detection/constants';\nexport { Console as ɵConsole } from './console';\nexport { InjectableDef as ɵInjectableDef, InjectorDef as ɵInjectorDef, getInjectableDef as ɵgetInjectableDef } from './di/defs';\nexport { inject as ɵinject, setCurrentInjector as ɵsetCurrentInjector } from './di/injector';\nexport { APP_ROOT as ɵAPP_ROOT } from './di/scope';\nexport { ivyEnabled as ɵivyEnabled } from './ivy_switch/compiler/index';\nexport { ComponentFactory as ɵComponentFactory } from './linker/component_factory';\nexport { CodegenComponentFactoryResolver as ɵCodegenComponentFactoryResolver } from './linker/component_factory_resolver';\nexport { resolveComponentResources as ɵresolveComponentResources } from './metadata/resource_loading';\nexport { ReflectionCapabilities as ɵReflectionCapabilities } from './reflection/reflection_capabilities';\nexport { GetterFn as ɵGetterFn, MethodFn as ɵMethodFn, SetterFn as ɵSetterFn } from './reflection/types';\nexport { DirectRenderer as ɵDirectRenderer, RenderDebugInfo as ɵRenderDebugInfo } from './render/api';\nexport { _sanitizeHtml as ɵ_sanitizeHtml } from './sanitization/html_sanitizer';\nexport { _sanitizeStyle as ɵ_sanitizeStyle } from './sanitization/style_sanitizer';\nexport { _sanitizeUrl as ɵ_sanitizeUrl } from './sanitization/url_sanitizer';\nexport { global as ɵglobal, looseIdentical as ɵlooseIdentical, stringify as ɵstringify } from './util';\nexport { makeDecorator as ɵmakeDecorator } from './util/decorators';\nexport { isObservable as ɵisObservable, isPromise as ɵisPromise } from './util/lang';\nexport { clearOverrides as ɵclearOverrides, initServicesIfNeeded as ɵinitServicesIfNeeded, overrideComponentView as ɵoverrideComponentView, overrideProvider as ɵoverrideProvider } from './view/index';\nexport { NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR } from './view/provider';\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/i18n/i18n_ast.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ParseSourceSpan } from '../parse_util';\nexport declare class Message {\n    nodes: Node[];\n    placeholders: {\n        [phName: string]: string;\n    };\n    placeholderToMessage: {\n        [phName: string]: Message;\n    };\n    meaning: string;\n    description: string;\n    id: string;\n    sources: MessageSpan[];\n    /**\n     * @param nodes message AST\n     * @param placeholders maps placeholder names to static content\n     * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)\n     * @param meaning\n     * @param description\n     * @param id\n     */\n    constructor(nodes: Node[], placeholders: {\n        [phName: string]: string;\n    }, placeholderToMessage: {\n        [phName: string]: Message;\n    }, meaning: string, description: string, id: string);\n}\nexport interface MessageSpan {\n    filePath: string;\n    startLine: number;\n    startCol: number;\n    endLine: number;\n    endCol: number;\n}\nexport interface Node {\n    sourceSpan: ParseSourceSpan;\n    visit(visitor: Visitor, context?: any): any;\n}\nexport declare class Text implements Node {\n    value: string;\n    sourceSpan: ParseSourceSpan;\n    constructor(value: string, sourceSpan: ParseSourceSpan);\n    visit(visitor: Visitor, context?: any): any;\n}\nexport declare class Container implements Node {\n    children: Node[];\n    sourceSpan: ParseSourceSpan;\n    constructor(children: Node[], sourceSpan: ParseSourceSpan);\n    visit(visitor: Visitor, context?: any): any;\n}\nexport declare class Icu implements Node {\n    expression: string;\n    type: string;\n    cases: {\n        [k: string]: Node;\n    };\n    sourceSpan: ParseSourceSpan;\n    expressionPlaceholder: string;\n    constructor(expression: string, type: string, cases: {\n        [k: string]: Node;\n    }, sourceSpan: ParseSourceSpan);\n    visit(visitor: Visitor, context?: any): any;\n}\nexport declare class TagPlaceholder implements Node {\n    tag: string;\n    attrs: {\n        [k: string]: string;\n    };\n    startName: string;\n    closeName: string;\n    children: Node[];\n    isVoid: boolean;\n    sourceSpan: ParseSourceSpan;\n    constructor(tag: string, attrs: {\n        [k: string]: string;\n    }, startName: string, closeName: string, children: Node[], isVoid: boolean, sourceSpan: ParseSourceSpan);\n    visit(visitor: Visitor, context?: any): any;\n}\nexport declare class Placeholder implements Node {\n    value: string;\n    name: string;\n    sourceSpan: ParseSourceSpan;\n    constructor(value: string, name: string, sourceSpan: ParseSourceSpan);\n    visit(visitor: Visitor, context?: any): any;\n}\nexport declare class IcuPlaceholder implements Node {\n    value: Icu;\n    name: string;\n    sourceSpan: ParseSourceSpan;\n    constructor(value: Icu, name: string, sourceSpan: ParseSourceSpan);\n    visit(visitor: Visitor, context?: any): any;\n}\nexport interface Visitor {\n    visitText(text: Text, context?: any): any;\n    visitContainer(container: Container, context?: any): any;\n    visitIcu(icu: Icu, context?: any): any;\n    visitTagPlaceholder(ph: TagPlaceholder, context?: any): any;\n    visitPlaceholder(ph: Placeholder, context?: any): any;\n    visitIcuPlaceholder(ph: IcuPlaceholder, context?: any): any;\n}\nexport declare class CloneVisitor implements Visitor {\n    visitText(text: Text, context?: any): Text;\n    visitContainer(container: Container, context?: any): Container;\n    visitIcu(icu: Icu, context?: any): Icu;\n    visitTagPlaceholder(ph: TagPlaceholder, context?: any): TagPlaceholder;\n    visitPlaceholder(ph: Placeholder, context?: any): Placeholder;\n    visitIcuPlaceholder(ph: IcuPlaceholder, context?: any): IcuPlaceholder;\n}\nexport declare class RecurseVisitor implements Visitor {\n    visitText(text: Text, context?: any): any;\n    visitContainer(container: Container, context?: any): any;\n    visitIcu(icu: Icu, context?: any): any;\n    visitTagPlaceholder(ph: TagPlaceholder, context?: any): any;\n    visitPlaceholder(ph: Placeholder, context?: any): any;\n    visitIcuPlaceholder(ph: IcuPlaceholder, context?: any): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/location/platform_location.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n *\n * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\n * agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that angular supports. For example, `@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `@angular/platform-webworker` provides\n * one suitable for use with web workers.\n *\n * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}\n * when they need to interact with the DOM apis like pushState, popState, etc...\n *\n * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly\n * by the {@link Router} in order to navigate between routes. Since all interactions between {@link\n * Router} /\n * {@link Location} / {@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\n * class they are all platform independent.\n *\n *\n */\nexport declare abstract class PlatformLocation {\n    abstract getBaseHrefFromDOM(): string;\n    abstract onPopState(fn: LocationChangeListener): void;\n    abstract onHashChange(fn: LocationChangeListener): void;\n    abstract readonly pathname: string;\n    abstract readonly search: string;\n    abstract readonly hash: string;\n    abstract replaceState(state: any, title: string, url: string): void;\n    abstract pushState(state: any, title: string, url: string): void;\n    abstract forward(): void;\n    abstract back(): void;\n}\n/**\n * @description Indicates when a location is initialized.\n * @experimental\n */\nexport declare const LOCATION_INITIALIZED: InjectionToken<Promise<any>>;\n/**\n * @description\n * A serializable version of the event from `onPopState` or `onHashChange`\n *\n * @experimental\n */\nexport interface LocationChangeEvent {\n    type: string;\n    state: any;\n}\n/**\n * @experimental\n */\nexport interface LocationChangeListener {\n    (event: LocationChangeEvent): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/refs.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef } from '../application_ref';\nimport { ChangeDetectorRef } from '../change_detection/change_detection';\nimport { Injector } from '../di/injector';\nimport { ComponentFactory } from '../linker/component_factory';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { ViewContainerRef } from '../linker/view_container_ref';\nimport { EmbeddedViewRef, InternalViewRef } from '../linker/view_ref';\nimport { Renderer as RendererV1 } from '../render/api';\nimport { Type } from '../type';\nimport { ElementData, NgModuleDefinition, NodeDef, TemplateData, ViewContainerData, ViewData, ViewDefinitionFactory } from './types';\nexport declare function createComponentFactory(selector: string, componentType: Type<any>, viewDefFactory: ViewDefinitionFactory, inputs: {\n    [propName: string]: string;\n} | null, outputs: {\n    [propName: string]: string;\n}, ngContentSelectors: string[]): ComponentFactory<any>;\nexport declare function getComponentViewDefinitionFactory(componentFactory: ComponentFactory<any>): ViewDefinitionFactory;\nexport declare function createViewContainerData(view: ViewData, elDef: NodeDef, elData: ElementData): ViewContainerData;\nexport declare function createChangeDetectorRef(view: ViewData): ChangeDetectorRef;\nexport declare class ViewRef_ implements EmbeddedViewRef<any>, InternalViewRef {\n    private _viewContainerRef;\n    private _appRef;\n    constructor(_view: ViewData);\n    readonly rootNodes: any[];\n    readonly context: any;\n    readonly destroyed: boolean;\n    markForCheck(): void;\n    detach(): void;\n    detectChanges(): void;\n    checkNoChanges(): void;\n    reattach(): void;\n    onDestroy(callback: Function): void;\n    destroy(): void;\n    detachFromAppRef(): void;\n    attachToAppRef(appRef: ApplicationRef): void;\n    attachToViewContainerRef(vcRef: ViewContainerRef): void;\n}\nexport declare function createTemplateData(view: ViewData, def: NodeDef): TemplateData;\nexport declare function createInjector(view: ViewData, elDef: NodeDef): Injector;\nexport declare function nodeValue(view: ViewData, index: number): any;\nexport declare function createRendererV1(view: ViewData): RendererV1;\nexport declare function createNgModuleRef(moduleType: Type<any>, parent: Injector, bootstrapComponents: Type<any>[], def: NgModuleDefinition): NgModuleRef<any>;\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/test_compiler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Compiler, CompilerOptions, Component, ComponentFactory, Directive, Injector, NgModule, Pipe, Type } from '@angular/core';\nimport { MetadataOverride } from './metadata_override';\n/**\n * Special interface to the compiler only used by testing\n *\n * @experimental\n */\nexport declare class TestingCompiler extends Compiler {\n    readonly injector: Injector;\n    overrideModule(module: Type<any>, overrides: MetadataOverride<NgModule>): void;\n    overrideDirective(directive: Type<any>, overrides: MetadataOverride<Directive>): void;\n    overrideComponent(component: Type<any>, overrides: MetadataOverride<Component>): void;\n    overridePipe(directive: Type<any>, overrides: MetadataOverride<Pipe>): void;\n    /**\n     * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n     * so that it can use the code generated by AOT.\n     */\n    loadAotSummaries(summaries: () => any[]): void;\n    /**\n     * Gets the component factory for the given component.\n     * This assumes that the component has been compiled before calling this call using\n     * `compileModuleAndAllComponents*`.\n     */\n    getComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n    /**\n     * Returns the component type that is stored in the given error.\n     * This can be used for errors created by compileModule...\n     */\n    getComponentFromError(error: Error): Type<any> | null;\n}\n/**\n * A factory for creating a Compiler\n *\n * @experimental\n */\nexport declare abstract class TestingCompilerFactory {\n    abstract createTestingCompiler(options?: CompilerOptions[]): TestingCompiler;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/testing/src/location_mock.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Location } from '@angular/common';\nimport { SubscriptionLike } from 'rxjs';\n/**\n * A spy for {@link Location} that allows tests to fire simulated location events.\n *\n * @experimental\n */\nexport declare class SpyLocation implements Location {\n    urlChanges: string[];\n    private _history;\n    private _historyIndex;\n    setInitialPath(url: string): void;\n    setBaseHref(url: string): void;\n    path(): string;\n    private state;\n    isCurrentPathEqualTo(path: string, query?: string): boolean;\n    simulateUrlPop(pathname: string): void;\n    simulateHashChange(pathname: string): void;\n    prepareExternalUrl(url: string): string;\n    go(path: string, query?: string, state?: any): void;\n    replaceState(path: string, query?: string, state?: any): void;\n    forward(): void;\n    back(): void;\n    subscribe(onNext: (value: any) => void, onThrow?: ((error: any) => void) | null, onReturn?: (() => void) | null): SubscriptionLike;\n    normalize(url: string): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/location/path_location_strategy.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LocationStrategy } from './location_strategy';\nimport { LocationChangeListener, PlatformLocation } from './platform_location';\n/**\n * @description\n * A {@link LocationStrategy} used to configure the {@link Location} service to\n * represent its state in the\n * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\n * browser's URL.\n *\n * If you're using `PathLocationStrategy`, you must provide a {@link APP_BASE_HREF}\n * or add a base element to the document. This URL prefix that will be preserved\n * when generating and recognizing URLs.\n *\n * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n *\n * Similarly, if you add `<base href='/my/app'/>` to the document and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/location/ts/path_location_component.ts region='LocationComponent'}\n *\n *\n */\nexport declare class PathLocationStrategy extends LocationStrategy {\n    private _platformLocation;\n    private _baseHref;\n    constructor(_platformLocation: PlatformLocation, href?: string);\n    onPopState(fn: LocationChangeListener): void;\n    getBaseHref(): string;\n    prepareExternalUrl(internal: string): string;\n    path(includeHash?: boolean): string;\n    pushState(state: any, title: string, url: string, queryParams: string): void;\n    replaceState(state: any, title: string, url: string, queryParams: string): void;\n    forward(): void;\n    back(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/common/src/location/location.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SubscriptionLike } from 'rxjs';\nimport { LocationStrategy } from './location_strategy';\n/** @experimental */\nexport interface PopStateEvent {\n    pop?: boolean;\n    state?: any;\n    type?: string;\n    url?: string;\n}\n/**\n * @description\n *\n * A service that applications can use to interact with a browser's URL.\n *\n * Depending on which {@link LocationStrategy} is used, `Location` will either persist\n * to the URL's path or the URL's hash segment.\n *\n * @usageNotes\n *\n * It's better to use {@link Router#navigate} service to trigger route changes. Use\n * `Location` only if you need to interact with or create normalized URLs outside of\n * routing.\n *\n * `Location` is responsible for normalizing the URL against the application's base href.\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n * trailing slash:\n * - `/my/app/user/123` is normalized\n * - `my/app/user/123` **is not** normalized\n * - `/my/app/user/123/` **is not** normalized\n *\n * ### Example\n *\n * {@example common/location/ts/path_location_component.ts region='LocationComponent'}\n *\n */\nexport declare class Location {\n    constructor(platformStrategy: LocationStrategy);\n    /**\n     * Returns the normalized URL path.\n     */\n    path(includeHash?: boolean): string;\n    /**\n     * Normalizes the given path and compares to the current normalized path.\n     */\n    isCurrentPathEqualTo(path: string, query?: string): boolean;\n    /**\n     * Given a string representing a URL, returns the normalized URL path without leading or\n     * trailing slashes.\n     */\n    normalize(url: string): string;\n    /**\n     * Given a string representing a URL, returns the platform-specific external URL path.\n     * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one\n     * before normalizing. This method will also add a hash if `HashLocationStrategy` is\n     * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n     */\n    prepareExternalUrl(url: string): string;\n    /**\n     * Changes the browsers URL to the normalized version of the given URL, and pushes a\n     * new item onto the platform's history.\n     */\n    go(path: string, query?: string, state?: any): void;\n    /**\n     * Changes the browsers URL to the normalized version of the given URL, and replaces\n     * the top item on the platform's history stack.\n     */\n    replaceState(path: string, query?: string, state?: any): void;\n    /**\n     * Navigates forward in the platform's history.\n     */\n    forward(): void;\n    /**\n     * Navigates back in the platform's history.\n     */\n    back(): void;\n    /**\n     * Subscribe to the platform's `popState` events.\n     */\n    subscribe(onNext: (value: PopStateEvent) => void, onThrow?: ((exception: any) => void) | null, onReturn?: (() => void) | null): SubscriptionLike;\n    /**\n     * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as\n     * is.\n     */\n    static normalizeQueryParams(params: string): string;\n    /**\n     * Given 2 parts of a url, join them with a slash if needed.\n     */\n    static joinWithSlash(start: string, end: string): string;\n    /**\n     * If url has a trailing slash, remove it, otherwise return url as is. This\n     * method looks for the first occurrence of either #, ?, or the end of the\n     * line as `/` characters after any of these should not be replaced.\n     */\n    static stripTrailingSlash(url: string): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/i18n/serializers/xliff2.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as i18n from '../i18n_ast';\nimport { Serializer } from './serializer';\nexport declare class Xliff2 extends Serializer {\n    write(messages: i18n.Message[], locale: string | null): string;\n    load(content: string, url: string): {\n        locale: string;\n        i18nNodesByMsgId: {\n            [msgId: string]: i18n.Node[];\n        };\n    };\n    digest(message: i18n.Message): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/i18n/serializers/serializer.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as i18n from '../i18n_ast';\nexport declare abstract class Serializer {\n    abstract write(messages: i18n.Message[], locale: string | null): string;\n    abstract load(content: string, url: string): {\n        locale: string | null;\n        i18nNodesByMsgId: {\n            [msgId: string]: i18n.Node[];\n        };\n    };\n    abstract digest(message: i18n.Message): string;\n    createNameMapper(message: i18n.Message): PlaceholderMapper | null;\n}\n/**\n * A `PlaceholderMapper` converts placeholder names from internal to serialized representation and\n * back.\n *\n * It should be used for serialization format that put constraints on the placeholder names.\n */\nexport interface PlaceholderMapper {\n    toPublicName(internalName: string): string | null;\n    toInternalName(publicName: string): string | null;\n}\n/**\n * A simple mapper that take a function to transform an internal name to a public name\n */\nexport declare class SimplePlaceholderMapper extends i18n.RecurseVisitor implements PlaceholderMapper {\n    private mapName;\n    private internalToPublic;\n    private publicToNextId;\n    private publicToInternal;\n    constructor(message: i18n.Message, mapName: (name: string) => string);\n    toPublicName(internalName: string): string | null;\n    toInternalName(publicName: string): string | null;\n    visitText(text: i18n.Text, context?: any): any;\n    visitTagPlaceholder(ph: i18n.TagPlaceholder, context?: any): any;\n    visitPlaceholder(ph: i18n.Placeholder, context?: any): any;\n    visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): any;\n    private visitPlaceholderName;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/ng_module.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DepDef, DepFlags, NgModuleData, NgModuleDefinition, NgModuleProviderDef, NodeFlags } from './types';\nexport declare function moduleProvideDef(flags: NodeFlags, token: any, value: any, deps: ([DepFlags, any] | any)[]): NgModuleProviderDef;\nexport declare function moduleDef(providers: NgModuleProviderDef[]): NgModuleDefinition;\nexport declare function initNgModule(data: NgModuleData): void;\nexport declare function resolveNgModuleDep(data: NgModuleData, depDef: DepDef, notFoundValue?: any): any;\nexport declare function callNgModuleLifecycle(ngModule: NgModuleData, lifecycles: NodeFlags): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/is_dev_mode.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport declare function isDevMode(): boolean;\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n */\nexport declare function enableProdMode(): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/jit/pipe.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Pipe } from '../../metadata/directives';\nimport { Type } from '../../type';\nexport declare function compilePipe(type: Type<any>, meta: Pipe): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/jit/module.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule, NgModuleTransitiveScopes } from '../../metadata/ng_module';\nimport { Type } from '../../type';\nimport { ComponentDef } from '../interfaces/definition';\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `@NgModule` decorator.\n */\nexport declare function compileNgModule(moduleType: Type<any>, ngModule: NgModule): void;\n/**\n * Compiles and adds the `ngModuleDef` and `ngInjectorDef` properties to the module class.\n */\nexport declare function compileNgModuleDefs(moduleType: Type<any>, ngModule: NgModule): void;\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n */\nexport declare function patchComponentDefWithScope<C>(componentDef: ComponentDef<C>, transitiveScopes: NgModuleTransitiveScopes): void;\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. It can be called\n * on modules with components that have not fully compiled yet, but the result should not be used\n * until they have.\n */\nexport declare function transitiveScopesFor<T>(moduleType: Type<T>): NgModuleTransitiveScopes;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/jit/directive.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, Directive } from '../../metadata/directives';\nimport { Type } from '../../type';\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * ngComponentDef onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ngComponentDef`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n */\nexport declare function compileComponent(type: Type<any>, metadata: Component): void;\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * ngDirectiveDef onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n */\nexport declare function compileDirective(type: Type<any>, directive: Directive): void;\nexport declare function extendsDirectlyFromObject(type: Type<any>): boolean;\n"
  },
  {
    "path": "node_modules/@angular/common/src/location/hash_location_strategy.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LocationStrategy } from './location_strategy';\nimport { LocationChangeListener, PlatformLocation } from './platform_location';\n/**\n * @description\n * A {@link LocationStrategy} used to configure the {@link Location} service to\n * represent its state in the\n * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\n * of the browser's URL.\n *\n * For instance, if you call `location.go('/foo')`, the browser's URL will become\n * `example.com#/foo`.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/location/ts/hash_location_component.ts region='LocationComponent'}\n *\n *\n */\nexport declare class HashLocationStrategy extends LocationStrategy {\n    private _platformLocation;\n    private _baseHref;\n    constructor(_platformLocation: PlatformLocation, _baseHref?: string);\n    onPopState(fn: LocationChangeListener): void;\n    getBaseHref(): string;\n    path(includeHash?: boolean): string;\n    prepareExternalUrl(internal: string): string;\n    pushState(state: any, title: string, path: string, queryParams: string): void;\n    replaceState(state: any, title: string, path: string, queryParams: string): void;\n    forward(): void;\n    back(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LifecycleHooksFeature, getHostElement, getRenderedText, renderComponent, whenRendered } from './component';\nimport { defineBase, defineComponent, defineDirective, defineNgModule, definePipe } from './definition';\nimport { InheritDefinitionFeature } from './features/inherit_definition_feature';\nimport { NgOnChangesFeature } from './features/ng_onchanges_feature';\nimport { PublicFeature } from './features/public_feature';\nimport { BaseDef, ComponentDef, ComponentDefWithMeta, ComponentTemplate, ComponentType, DirectiveDef, DirectiveDefFlags, DirectiveDefWithMeta, DirectiveType, PipeDef, PipeDefWithMeta } from './interfaces/definition';\nexport { ComponentFactory, ComponentFactoryResolver, ComponentRef, WRAP_RENDERER_FACTORY2, injectComponentFactoryResolver } from './component_ref';\nexport { directiveInject, getFactoryOf, getInheritedFactory, injectAttribute } from './di';\nexport { RenderFlags } from './interfaces/definition';\nexport { CssSelectorList } from './interfaces/projection';\nexport { NO_CHANGE, bind, interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV, container, containerRefreshStart, containerRefreshEnd, nextContext, element, elementAttribute, elementClassProp, elementEnd, elementProperty, elementStart, elementContainerStart, elementContainerEnd, elementStyling, elementStylingMap, elementStyleProp, elementStylingApply, getCurrentView, restoreView, listener, store, load, namespaceHTML, namespaceMathML, namespaceSVG, enableBindings, disableBindings, projection, projectionDef, text, textBinding, template, reference, embeddedViewStart, embeddedViewEnd, detectChanges, markDirty, tick, } from './instructions';\nexport { i18nAttribute, i18nExp, i18nStart, i18nEnd, i18nApply, i18nMapping, i18nInterpolation1, i18nInterpolation2, i18nInterpolation3, i18nInterpolation4, i18nInterpolation5, i18nInterpolation6, i18nInterpolation7, i18nInterpolation8, i18nInterpolationV, i18nExpMapping, I18nInstruction, I18nExpInstruction } from './i18n';\nexport { NgModuleFactory, NgModuleRef, NgModuleType } from './ng_module_ref';\nexport { AttributeMarker } from './interfaces/node';\nexport { pipe, pipeBind1, pipeBind2, pipeBind3, pipeBind4, pipeBindV, } from './pipe';\nexport { QueryList, query, queryRefresh, } from './query';\nexport { registerContentQuery, loadQueryList, } from './instructions';\nexport { pureFunction0, pureFunction1, pureFunction2, pureFunction3, pureFunction4, pureFunction5, pureFunction6, pureFunction7, pureFunction8, pureFunctionV, } from './pure_function';\nexport { templateRefExtractor } from './view_engine_compatibility_prebound';\nexport { BaseDef, ComponentDef, ComponentDefWithMeta, ComponentTemplate, ComponentType, DirectiveDef, DirectiveDefFlags, DirectiveDefWithMeta, DirectiveType, NgOnChangesFeature, InheritDefinitionFeature, PublicFeature, PipeDef, PipeDefWithMeta, LifecycleHooksFeature, defineComponent, defineDirective, defineNgModule, defineBase, definePipe, getHostElement, getRenderedText, renderComponent, whenRendered, };\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/jit/injectable.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '../../di/injectable';\nimport { Type } from '../../type';\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * `ngInjectableDef` onto the injectable type.\n */\nexport declare function compileInjectable(type: Type<any>, srcMeta?: Injectable): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/reflection/types.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare type SetterFn = (obj: any, value: any) => void;\nexport declare type GetterFn = (obj: any) => any;\nexport declare type MethodFn = (obj: any, args: any[]) => any;\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/view_attach.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementData, ViewData } from './types';\nexport declare function attachEmbeddedView(parentView: ViewData, elementData: ElementData, viewIndex: number | undefined | null, view: ViewData): void;\nexport declare function detachEmbeddedView(elementData: ElementData, viewIndex?: number): ViewData | null;\nexport declare function detachProjectedView(view: ViewData): void;\nexport declare function moveEmbeddedView(elementData: ElementData, oldViewIndex: number, newViewIndex: number): ViewData;\nexport declare function renderDetachView(view: ViewData): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/util/lang.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\n/**\n * Determine if the argument is shaped like a Promise\n */\nexport declare function isPromise(obj: any): obj is Promise<any>;\n/**\n * Determine if the argument is an Observable\n */\nexport declare function isObservable(obj: any | Observable<any>): obj is Observable<any>;\n"
  },
  {
    "path": "node_modules/@angular/core/src/ivy_switch/compiler/index.d.ts",
    "content": "export * from './legacy';\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/entrypoint.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentFactory } from '../linker/component_factory';\nimport { NgModuleFactory } from '../linker/ng_module_factory';\nimport { Type } from '../type';\nimport { NgModuleDefinitionFactory, ProviderOverride } from './types';\nexport declare function overrideProvider(override: ProviderOverride): void;\nexport declare function overrideComponentView(comp: Type<any>, componentFactory: ComponentFactory<any>): void;\nexport declare function clearOverrides(): void;\nexport declare function createNgModuleFactory(ngModuleType: Type<any>, bootstrapComponents: Type<any>[], defFactory: NgModuleDefinitionFactory): NgModuleFactory<any>;\n"
  },
  {
    "path": "node_modules/@angular/core/src/sanitization/html_sanitizer.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nexport declare function _sanitizeHtml(defaultDoc: any, unsafeHtmlInput: string): string;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/ml_parser/parser.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ParseError, ParseSourceSpan } from '../parse_util';\nimport * as html from './ast';\nimport { InterpolationConfig } from './interpolation_config';\nimport { TagDefinition } from './tags';\nexport declare class TreeError extends ParseError {\n    elementName: string | null;\n    static create(elementName: string | null, span: ParseSourceSpan, msg: string): TreeError;\n    constructor(elementName: string | null, span: ParseSourceSpan, msg: string);\n}\nexport declare class ParseTreeResult {\n    rootNodes: html.Node[];\n    errors: ParseError[];\n    constructor(rootNodes: html.Node[], errors: ParseError[]);\n}\nexport declare class Parser {\n    getTagDefinition: (tagName: string) => TagDefinition;\n    constructor(getTagDefinition: (tagName: string) => TagDefinition);\n    parse(source: string, url: string, parseExpansionForms?: boolean, interpolationConfig?: InterpolationConfig): ParseTreeResult;\n}\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/i18n/serializers/xtb.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as i18n from '../i18n_ast';\nimport { PlaceholderMapper, Serializer } from './serializer';\nexport declare class Xtb extends Serializer {\n    write(messages: i18n.Message[], locale: string | null): string;\n    load(content: string, url: string): {\n        locale: string;\n        i18nNodesByMsgId: {\n            [msgId: string]: i18n.Node[];\n        };\n    };\n    digest(message: i18n.Message): string;\n    createNameMapper(message: i18n.Message): PlaceholderMapper;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/metadata/resource_loading.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component } from './directives';\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponnent{\n * }\n *\n * // Calling `renderComponent` will fail because `MyComponent`'s `@Compenent.templateUrl`\n * // needs to be resolved because `renderComponent` is synchronous process.\n * // renderComponent(MyComponent);\n *\n * // Calling `resolveComponentResources` will resolve `@Compenent.templateUrl` into\n * // `@Compenent.template`, which would allow `renderComponent` to proceed in synchronous manner.\n * // Use browser's `fetch` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible to returning a `Promise` of the resolved\n * URL. Browser's `fetch` method is a good default implementation.\n */\nexport declare function resolveComponentResources(resourceResolver: (url: string) => (Promise<string | {\n    text(): Promise<string>;\n}>)): Promise<null>;\nexport declare function maybeQueueResolutionOfComponentResources(metadata: Component): void;\nexport declare function componentNeedsResolution(component: Component): string | number | undefined;\nexport declare function clearResolutionOfComponentResourcesQueue(): void;\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/lifecycle_reflector.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileReflector } from './compile_reflector';\nexport declare enum LifecycleHooks {\n    OnInit = 0,\n    OnDestroy = 1,\n    DoCheck = 2,\n    OnChanges = 3,\n    AfterContentInit = 4,\n    AfterContentChecked = 5,\n    AfterViewInit = 6,\n    AfterViewChecked = 7\n}\nexport declare const LIFECYCLE_HOOKS_VALUES: LifecycleHooks[];\nexport declare function hasLifecycleHook(reflector: CompileReflector, hook: LifecycleHooks, token: any): boolean;\nexport declare function getAllLifecycleHooks(reflector: CompileReflector, token: any): LifecycleHooks[];\n"
  },
  {
    "path": "node_modules/@angular/compiler/src/i18n/serializers/xliff.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as i18n from '../i18n_ast';\nimport { Serializer } from './serializer';\nexport declare class Xliff extends Serializer {\n    write(messages: i18n.Message[], locale: string | null): string;\n    load(content: string, url: string): {\n        locale: string;\n        i18nNodesByMsgId: {\n            [msgId: string]: i18n.Node[];\n        };\n    };\n    digest(message: i18n.Message): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/sanitization/url_sanitizer.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare function _sanitizeUrl(url: string): string;\nexport declare function sanitizeSrcset(srcset: string): string;\n"
  },
  {
    "path": "node_modules/@angular/core/src/console.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class Console {\n    log(message: string): void;\n    warn(message: string): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\ndeclare const _global: {\n    [name: string]: any;\n};\n/**\n * Attention: whenever providing a new value, be sure to add an\n * entry into the corresponding `....externs.js` file,\n * so that closure won't use that global for its purposes.\n */\nexport { _global as global };\nexport declare function getSymbolIterator(): string | symbol;\nexport declare function scheduleMicroTask(fn: Function): void;\nexport declare function looseIdentical(a: any, b: any): boolean;\nexport declare function stringify(token: any): string;\n"
  },
  {
    "path": "node_modules/@angular/core/src/reflection/reflection_capabilities.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\nimport { PlatformReflectionCapabilities } from './platform_reflection_capabilities';\nimport { GetterFn, MethodFn, SetterFn } from './types';\n/**\n * Attention: These regex has to hold even if the code is minified!\n */\nexport declare const DELEGATE_CTOR: RegExp;\nexport declare const INHERITED_CLASS: RegExp;\nexport declare const INHERITED_CLASS_WITH_CTOR: RegExp;\nexport declare class ReflectionCapabilities implements PlatformReflectionCapabilities {\n    private _reflect;\n    constructor(reflect?: any);\n    isReflectionEnabled(): boolean;\n    factory<T>(t: Type<T>): (args: any[]) => T;\n    private _ownParameters;\n    parameters(type: Type<any>): any[][];\n    private _ownAnnotations;\n    annotations(typeOrFunc: Type<any>): any[];\n    private _ownPropMetadata;\n    propMetadata(typeOrFunc: any): {\n        [key: string]: any[];\n    };\n    hasLifecycleHook(type: any, lcProperty: string): boolean;\n    guards(type: any): {\n        [key: string]: any;\n    };\n    getter(name: string): GetterFn;\n    setter(name: string): SetterFn;\n    method(name: string): MethodFn;\n    importUri(type: any): string;\n    resourceUri(type: any): string;\n    resolveIdentifier(name: string, moduleUrl: string, members: string[], runtime: any): any;\n    resolveEnum(enumIdentifier: any, name: string): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/ng_module_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '../di/injector';\nimport { StaticProvider } from '../di/provider';\nimport { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { InternalNgModuleRef, NgModuleFactory as viewEngine_NgModuleFactory, NgModuleRef as viewEngine_NgModuleRef } from '../linker/ng_module_factory';\nimport { NgModuleDef } from '../metadata/ng_module';\nimport { Type } from '../type';\nexport interface NgModuleType {\n    ngModuleDef: NgModuleDef<any>;\n}\nexport declare const COMPONENT_FACTORY_RESOLVER: StaticProvider;\nexport declare class NgModuleRef<T> extends viewEngine_NgModuleRef<T> implements InternalNgModuleRef<T> {\n    _bootstrapComponents: Type<any>[];\n    injector: Injector;\n    componentFactoryResolver: viewEngine_ComponentFactoryResolver;\n    instance: T;\n    destroyCbs: (() => void)[] | null;\n    constructor(ngModuleType: Type<T>, parentInjector: Injector | null);\n    destroy(): void;\n    onDestroy(callback: () => void): void;\n}\nexport declare class NgModuleFactory<T> extends viewEngine_NgModuleFactory<T> {\n    moduleType: Type<T>;\n    constructor(moduleType: Type<T>);\n    create(parentInjector: Injector | null): viewEngine_NgModuleRef<T>;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/scope.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from './injection_token';\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\nexport declare const APP_ROOT: InjectionToken<boolean>;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/view_engine_compatibility_prebound.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplateRef as ViewEngine_TemplateRef } from '../linker/template_ref';\nimport { TNode } from './interfaces/node';\nimport { LViewData } from './interfaces/view';\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n */\nexport declare function templateRefExtractor(tNode: TNode, currentView: LViewData): ViewEngine_TemplateRef<{}>;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/component.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../core';\nimport { Injector } from '../di/injector';\nimport { Sanitizer } from '../sanitization/security';\nimport { ComponentDef, ComponentType } from './interfaces/definition';\nimport { PlayerHandler } from './interfaces/player';\nimport { RElement, RNode, Renderer3, RendererFactory3 } from './interfaces/renderer';\nimport { LViewData, RootContext } from './interfaces/view';\n/** Options that control how the component should be bootstrapped. */\nexport interface CreateComponentOptions {\n    /** Which renderer factory to use. */\n    rendererFactory?: RendererFactory3;\n    /** A custom sanitizer instance */\n    sanitizer?: Sanitizer;\n    /** A custom animation player handler */\n    playerHandler?: PlayerHandler;\n    /**\n     * Host element on which the component will be bootstrapped. If not specified,\n     * the component definition's `tag` is used to query the existing DOM for the\n     * element to bootstrap.\n     */\n    host?: RElement | string;\n    /** Module injector for the component. If unspecified, the injector will be NULL_INJECTOR. */\n    injector?: Injector;\n    /**\n     * List of features to be applied to the created component. Features are simply\n     * functions that decorate a component with a certain behavior.\n     *\n     * Typically, the features in this list are features that cannot be added to the\n     * other features list in the component definition because they rely on other factors.\n     *\n     * Example: `RootLifecycleHooks` is a function that adds lifecycle hook capabilities\n     * to root components in a tree-shakable way. It cannot be added to the component\n     * features list because there's no way of knowing when the component will be used as\n     * a root component.\n     */\n    hostFeatures?: HostFeature[];\n    /**\n     * A function which is used to schedule change detection work in the future.\n     *\n     * When marking components as dirty, it is necessary to schedule the work of\n     * change detection in the future. This is done to coalesce multiple\n     * {@link markDirty} calls into a single changed detection processing.\n     *\n     * The default value of the scheduler is the `requestAnimationFrame` function.\n     *\n     * It is also useful to override this function for testing purposes.\n     */\n    scheduler?: (work: () => void) => void;\n}\n/** See CreateComponentOptions.hostFeatures */\ndeclare type HostFeature = (<T>(component: T, componentDef: ComponentDef<T>) => void);\nexport declare const NULL_INJECTOR: Injector;\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {@link ViewContainer#createComponent}.\n *\n * @param componentType Component to bootstrap\n * @param options Optional parameters which control bootstrapping\n */\nexport declare function renderComponent<T>(componentType: ComponentType<T> | Type<T>, opts?: CreateComponentOptions): T;\n/**\n * Creates the root component view and the root component node.\n *\n * @param rNode Render host element.\n * @param def ComponentDef\n * @param rootView The parent view where the host node is stored\n * @param renderer The current renderer\n * @param sanitizer The sanitizer, if provided\n *\n * @returns Component view created\n */\nexport declare function createRootComponentView(rNode: RElement | null, def: ComponentDef<any>, rootView: LViewData, renderer: Renderer3, sanitizer?: Sanitizer | null): LViewData;\n/**\n * Creates a root component and sets it up with features and host bindings. Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n */\nexport declare function createRootComponent<T>(hostRNode: RNode | null, componentView: LViewData, componentDef: ComponentDef<T>, rootView: LViewData, rootContext: RootContext, hostFeatures: HostFeature[] | null): any;\nexport declare function createRootContext(scheduler: (workFn: () => void) => void, playerHandler?: PlayerHandler | null): RootContext;\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n */\nexport declare function LifecycleHooksFeature(component: any, def: ComponentDef<any>): void;\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * @param component Component for which the host element should be retrieved.\n */\nexport declare function getHostElement<T>(component: T): HTMLElement;\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param component The component to return the content text for.\n */\nexport declare function getRenderedText(component: any): string;\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param component Component to wait upon\n * @returns Promise which resolves when the component is rendered.\n */\nexport declare function whenRendered(component: any): Promise<null>;\nexport {};\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/pure_function.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |------consts------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns a value\n * @param thisArg Optional calling context of pureFn\n * @returns value\n */\nexport declare function pureFunction0<T>(slotOffset: number, pureFn: () => T, thisArg?: any): T;\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport declare function pureFunction1(slotOffset: number, pureFn: (v: any) => any, exp: any, thisArg?: any): any;\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport declare function pureFunction2(slotOffset: number, pureFn: (v1: any, v2: any) => any, exp1: any, exp2: any, thisArg?: any): any;\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport declare function pureFunction3(slotOffset: number, pureFn: (v1: any, v2: any, v3: any) => any, exp1: any, exp2: any, exp3: any, thisArg?: any): any;\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport declare function pureFunction4(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, thisArg?: any): any;\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport declare function pureFunction5(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, thisArg?: any): any;\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport declare function pureFunction6(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, thisArg?: any): any;\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport declare function pureFunction7(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, exp7: any, thisArg?: any): any;\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param exp8\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport declare function pureFunction8(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, exp7: any, exp8: any, thisArg?: any): any;\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport declare function pureFunctionV(slotOffset: number, pureFn: (...v: any[]) => any, exps: any[], thisArg?: any): any;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/features/public_feature.d.ts",
    "content": "import { DirectiveDef } from '../interfaces/definition';\n/**\n * This feature publishes the directive (or component) into the DI system, making it visible to\n * others for injection.\n *\n * @param definition\n */\nexport declare function PublicFeature<T>(definition: DirectiveDef<T>): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/component_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef as ViewEngine_ChangeDetectorRef } from '../change_detection/change_detector_ref';\nimport { InjectionToken } from '../di/injection_token';\nimport { Injector } from '../di/injector';\nimport { ComponentFactory as viewEngine_ComponentFactory, ComponentRef as viewEngine_ComponentRef } from '../linker/component_factory';\nimport { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { ElementRef as viewEngine_ElementRef } from '../linker/element_ref';\nimport { NgModuleRef as viewEngine_NgModuleRef } from '../linker/ng_module_factory';\nimport { RendererFactory2 } from '../render/api';\nimport { Type } from '../type';\nimport { ComponentDef } from './interfaces/definition';\nimport { LViewData, RootContext } from './interfaces/view';\nimport { ViewRef } from './view_ref';\nexport declare class ComponentFactoryResolver extends viewEngine_ComponentFactoryResolver {\n    resolveComponentFactory<T>(component: Type<T>): viewEngine_ComponentFactory<T>;\n}\n/**\n * Default {@link RootContext} for all components rendered with {@link renderComponent}.\n */\nexport declare const ROOT_CONTEXT: InjectionToken<RootContext>;\n/**\n * A change detection scheduler token for {@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.\n */\nexport declare const SCHEDULER: InjectionToken<(fn: () => void) => void>;\n/**\n * A function used to wrap the `RendererFactory2`.\n * Used in tests to change the `RendererFactory2` into a `DebugRendererFactory2`.\n */\nexport declare const WRAP_RENDERER_FACTORY2: InjectionToken<(rf: RendererFactory2) => RendererFactory2>;\n/**\n * Render3 implementation of {@link viewEngine_ComponentFactory}.\n */\nexport declare class ComponentFactory<T> extends viewEngine_ComponentFactory<T> {\n    private componentDef;\n    selector: string;\n    componentType: Type<any>;\n    ngContentSelectors: string[];\n    readonly inputs: {\n        propName: string;\n        templateName: string;\n    }[];\n    readonly outputs: {\n        propName: string;\n        templateName: string;\n    }[];\n    constructor(componentDef: ComponentDef<any>);\n    create(injector: Injector, projectableNodes?: any[][] | undefined, rootSelectorOrNode?: any, ngModule?: viewEngine_NgModuleRef<any> | undefined): viewEngine_ComponentRef<T>;\n}\n/**\n * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the\n * ComponentFactoryResolver\n * already exists, retrieves the existing ComponentFactoryResolver.\n *\n * @returns The ComponentFactoryResolver instance to use\n */\nexport declare function injectComponentFactoryResolver(): viewEngine_ComponentFactoryResolver;\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nexport declare class ComponentRef<T> extends viewEngine_ComponentRef<T> {\n    location: viewEngine_ElementRef;\n    destroyCbs: (() => void)[] | null;\n    injector: Injector;\n    instance: T;\n    hostView: ViewRef<T>;\n    changeDetectorRef: ViewEngine_ChangeDetectorRef;\n    componentType: Type<T>;\n    constructor(componentType: Type<T>, instance: T, rootView: LViewData, injector: Injector, location: viewEngine_ElementRef);\n    destroy(): void;\n    onDestroy(callback: () => void): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/i18n.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NO_CHANGE } from './instructions';\n/**\n * A list of flags to encode the i18n instructions used to translate the template.\n * We shift the flags by 29 so that 30 & 31 & 32 bits contains the instructions.\n */\nexport declare const enum I18nInstructions {\n    Text = 536870912,\n    Element = 1073741824,\n    Expression = 1610612736,\n    TemplateRoot = -2147483648,\n    Any = -1610612736,\n    CloseNode = -1073741824,\n    RemoveNode = -536870912,\n    /** Used to decode the number encoded with the instruction. */\n    IndexMask = 536870911,\n    /** Used to test the type of instruction. */\n    InstructionMask = -536870912\n}\n/**\n * Represents the instructions used to translate the template.\n * Instructions can be a placeholder index, a static text or a simple bit field (`I18nFlag`).\n * When the instruction is the flag `Text`, it is always followed by its text value.\n */\nexport declare type I18nInstruction = number | string;\n/**\n * Represents the instructions used to translate attributes containing expressions.\n * Even indexes contain static strings, while odd indexes contain the index of the expression whose\n * value will be concatenated into the final translation.\n */\nexport declare type I18nExpInstruction = number | string;\n/** Mapping of placeholder names to their absolute indexes in their templates. */\nexport declare type PlaceholderMap = {\n    [name: string]: number;\n};\n/**\n * Takes a translation string, the initial list of placeholders (elements and expressions) and the\n * indexes of their corresponding expression nodes to return a list of instructions for each\n * template function.\n *\n * Because embedded templates have different indexes for each placeholder, each parameter (except\n * the translation) is an array, where each value corresponds to a different template, by order of\n * appearance.\n *\n * @param translation A translation string where placeholders are represented by `{$name}`\n * @param elements An array containing, for each template, the maps of element placeholders and\n * their indexes.\n * @param expressions An array containing, for each template, the maps of expression placeholders\n * and their indexes.\n * @param templateRoots An array of template roots whose content should be ignored when\n * generating the instructions for their parent template.\n * @param lastChildIndex The index of the last child of the i18n node. Used when the i18n block is\n * an ng-container.\n *\n * @returns A list of instructions used to translate each template.\n */\nexport declare function i18nMapping(translation: string, elements: (PlaceholderMap | null)[] | null, expressions?: (PlaceholderMap | null)[] | null, templateRoots?: string[] | null, lastChildIndex?: number | null): I18nInstruction[][];\nexport declare function i18nAttribute(index: number, attrs: any[]): void;\nexport declare function i18nExp(expression: any): void;\nexport declare function i18nStart(index: number, message: string, subTemplateIndex?: number): void;\nexport declare function i18nEnd(): void;\n/**\n * Takes a list of instructions generated by `i18nMapping()` to transform the template accordingly.\n *\n * @param startIndex Index of the first element to translate (for instance the first child of the\n * element with the i18n attribute).\n * @param instructions The list of instructions to apply on the current view.\n */\nexport declare function i18nApply(startIndex: number, instructions: I18nInstruction[]): void;\n/**\n * Takes a translation string and the initial list of expressions and returns a list of instructions\n * that will be used to translate an attribute.\n * Even indexes contain static strings, while odd indexes contain the index of the expression whose\n * value will be concatenated into the final translation.\n */\nexport declare function i18nExpMapping(translation: string, placeholders: PlaceholderMap): I18nExpInstruction[];\n/**\n * Checks if the value of an expression has changed and replaces it by its value in a translation,\n * or returns NO_CHANGE.\n *\n * @param instructions A list of instructions that will be used to translate an attribute.\n * @param v0 value checked for change.\n *\n * @returns The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport declare function i18nInterpolation1(instructions: I18nExpInstruction[], v0: any): string | NO_CHANGE;\n/**\n * Checks if the values of up to 2 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param instructions A list of instructions that will be used to translate an attribute.\n * @param v0 value checked for change.\n * @param v1 value checked for change.\n *\n * @returns The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport declare function i18nInterpolation2(instructions: I18nExpInstruction[], v0: any, v1: any): string | NO_CHANGE;\n/**\n * Checks if the values of up to 3 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param instructions A list of instructions that will be used to translate an attribute.\n * @param v0 value checked for change.\n * @param v1 value checked for change.\n * @param v2 value checked for change.\n *\n * @returns The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport declare function i18nInterpolation3(instructions: I18nExpInstruction[], v0: any, v1: any, v2: any): string | NO_CHANGE;\n/**\n * Checks if the values of up to 4 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param instructions A list of instructions that will be used to translate an attribute.\n * @param v0 value checked for change.\n * @param v1 value checked for change.\n * @param v2 value checked for change.\n * @param v3 value checked for change.\n *\n * @returns The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport declare function i18nInterpolation4(instructions: I18nExpInstruction[], v0: any, v1: any, v2: any, v3: any): string | NO_CHANGE;\n/**\n * Checks if the values of up to 5 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param instructions A list of instructions that will be used to translate an attribute.\n * @param v0 value checked for change.\n * @param v1 value checked for change.\n * @param v2 value checked for change.\n * @param v3 value checked for change.\n * @param v4 value checked for change.\n *\n * @returns The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport declare function i18nInterpolation5(instructions: I18nExpInstruction[], v0: any, v1: any, v2: any, v3: any, v4: any): string | NO_CHANGE;\n/**\n * Checks if the values of up to 6 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param instructions A list of instructions that will be used to translate an attribute.\n * @param v0 value checked for change.\n * @param v1 value checked for change.\n * @param v2 value checked for change.\n * @param v3 value checked for change.\n * @param v4 value checked for change.\n * @param v5 value checked for change.\n *\n * @returns The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */ export declare function i18nInterpolation6(instructions: I18nExpInstruction[], v0: any, v1: any, v2: any, v3: any, v4: any, v5: any): string | NO_CHANGE;\n/**\n * Checks if the values of up to 7 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param instructions A list of instructions that will be used to translate an attribute.\n * @param v0 value checked for change.\n * @param v1 value checked for change.\n * @param v2 value checked for change.\n * @param v3 value checked for change.\n * @param v4 value checked for change.\n * @param v5 value checked for change.\n * @param v6 value checked for change.\n *\n * @returns The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport declare function i18nInterpolation7(instructions: I18nExpInstruction[], v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any): string | NO_CHANGE;\n/**\n * Checks if the values of up to 8 expressions have changed and replaces them by their values in a\n * translation, or returns NO_CHANGE.\n *\n * @param instructions A list of instructions that will be used to translate an attribute.\n * @param v0 value checked for change.\n * @param v1 value checked for change.\n * @param v2 value checked for change.\n * @param v3 value checked for change.\n * @param v4 value checked for change.\n * @param v5 value checked for change.\n * @param v6 value checked for change.\n * @param v7 value checked for change.\n *\n * @returns The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport declare function i18nInterpolation8(instructions: I18nExpInstruction[], v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any): string | NO_CHANGE;\n/**\n * Create a translated interpolation binding with a variable number of expressions.\n *\n * If there are 1 to 8 expressions then `i18nInterpolation()` should be used instead. It is faster\n * because there is no need to create an array of expressions and iterate over it.\n *\n * @returns The concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport declare function i18nInterpolationV(instructions: I18nExpInstruction[], values: any[]): string | NO_CHANGE;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/features/ng_onchanges_feature.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DirectiveDef } from '../interfaces/definition';\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ngComponentDef = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n */\nexport declare function NgOnChangesFeature<T>(definition: DirectiveDef<T>): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/definition.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { ChangeDetectionStrategy } from '../change_detection/constants';\nimport { Provider } from '../di/provider';\nimport { NgModuleDef } from '../metadata/ng_module';\nimport { ViewEncapsulation } from '../metadata/view';\nimport { Type } from '../type';\nimport { BaseDef, ComponentDef, ComponentDefFeature, ComponentQuery, ComponentTemplate, ComponentType, DirectiveDef, DirectiveDefFeature, DirectiveType, DirectiveTypesOrFactory, PipeDef, PipeType, PipeTypesOrFactory } from './interfaces/definition';\nimport { CssSelectorList, SelectorFlags } from './interfaces/projection';\nexport declare const EMPTY: {};\nexport declare const EMPTY_ARRAY: any[];\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n */\nexport declare function defineComponent<T>(componentDefinition: {\n    /**\n     * Directive type, needed to configure the injector.\n     */\n    type: Type<T>;\n    /** The selectors that will be used to match nodes to this component. */\n    selectors: CssSelectorList;\n    /**\n     * Factory method used to create an instance of directive.\n     */\n    factory: () => T;\n    /**\n     * The number of nodes, local refs, and pipes in this component template.\n     *\n     * Used to calculate the length of this component's LViewData array, so we\n     * can pre-fill the array and set the binding start index.\n     */\n    consts: number;\n    /**\n     * The number of bindings in this component template (including pure fn bindings).\n     *\n     * Used to calculate the length of this component's LViewData array, so we\n     * can pre-fill the array and set the host binding start index.\n     */\n    vars: number;\n    /**\n     * The number of host bindings (including pure fn bindings) in this component.\n     *\n     * Used to calculate the length of the LViewData array for the *parent* component\n     * of this component.\n     */\n    hostVars?: number;\n    /**\n     * Static attributes to set on host element.\n     *\n     * Even indices: attribute name\n     * Odd indices: attribute value\n     */\n    attributes?: string[];\n    /**\n     * A map of input names.\n     *\n     * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n     *\n     * Given:\n     * ```\n     * class MyComponent {\n     *   @Input()\n     *   publicInput1: string;\n     *\n     *   @Input('publicInput2')\n     *   declaredInput2: string;\n     * }\n     * ```\n     *\n     * is described as:\n     * ```\n     * {\n     *   publicInput1: 'publicInput1',\n     *   declaredInput2: ['declaredInput2', 'publicInput2'],\n     * }\n     * ```\n     *\n     * Which the minifier may translate to:\n     * ```\n     * {\n     *   minifiedPublicInput1: 'publicInput1',\n     *   minifiedDeclaredInput2: [ 'publicInput2', 'declaredInput2'],\n     * }\n     * ```\n     *\n     * This allows the render to re-construct the minified, public, and declared names\n     * of properties.\n     *\n     * NOTE:\n     *  - Because declared and public name are usually same we only generate the array\n     *    `['declared', 'public']` format when they differ.\n     *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n     *    inconsistent behavior in that it uses declared names rather than minified or public. For\n     *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n     *    API will be simplified to be consistent with `output`.\n     */\n    inputs?: {\n        [P in keyof T]?: string | [string, string];\n    };\n    /**\n     * A map of output names.\n     *\n     * The format is in: `{[actualPropertyName: string]:string}`.\n     *\n     * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n     *\n     * This allows the render to re-construct the minified and non-minified names\n     * of properties.\n     */\n    outputs?: {\n        [P in keyof T]?: string;\n    };\n    /**\n     * Function executed by the parent template to allow child directive to apply host bindings.\n     */\n    hostBindings?: (directiveIndex: number, elementIndex: number) => void;\n    /**\n     * Function to create instances of content queries associated with a given directive.\n     */\n    contentQueries?: (() => void);\n    /** Refreshes content queries associated with directives in a given view */\n    contentQueriesRefresh?: ((directiveIndex: number, queryIndex: number) => void);\n    /**\n     * Defines the name that can be used in the template to assign this directive to a variable.\n     *\n     * See: {@link Directive.exportAs}\n     */\n    exportAs?: string;\n    /**\n     * Template function use for rendering DOM.\n     *\n     * This function has following structure.\n     *\n     * ```\n     * function Template<T>(ctx:T, creationMode: boolean) {\n     *   if (creationMode) {\n     *     // Contains creation mode instructions.\n     *   }\n     *   // Contains binding update instructions\n     * }\n     * ```\n     *\n     * Common instructions are:\n     * Creation mode instructions:\n     *  - `elementStart`, `elementEnd`\n     *  - `text`\n     *  - `container`\n     *  - `listener`\n     *\n     * Binding update instructions:\n     * - `bind`\n     * - `elementAttribute`\n     * - `elementProperty`\n     * - `elementClass`\n     * - `elementStyle`\n     *\n     */\n    template: ComponentTemplate<T>;\n    /**\n     * Additional set of instructions specific to view query processing. This could be seen as a\n     * set of instruction to be inserted into the template function.\n     *\n     * Query-related instructions need to be pulled out to a specific function as a timing of\n     * execution is different as compared to all other instructions (after change detection hooks but\n     * before view hooks).\n     */\n    viewQuery?: ComponentQuery<T> | null;\n    /**\n     * A list of optional features to apply.\n     *\n     * See: {@link NgOnChangesFeature}, {@link PublicFeature}\n     */\n    features?: ComponentDefFeature[];\n    /**\n     * Defines template and style encapsulation options available for Component's {@link Component}.\n     */\n    encapsulation?: ViewEncapsulation;\n    /**\n     * Defines arbitrary developer-defined data to be stored on a renderer instance.\n     * This is useful for renderers that delegate to other renderers.\n     *\n     * see: animation\n     */\n    data?: {\n        [kind: string]: any;\n    };\n    /**\n     * A set of styles that the component needs to be present for component to render correctly.\n     */\n    styles?: string[];\n    /**\n     * The strategy that the default change detector uses to detect changes.\n     * When set, takes effect the next time change detection is triggered.\n     */\n    changeDetection?: ChangeDetectionStrategy;\n    /**\n     * Defines the set of injectable objects that are visible to a Directive and its light DOM\n     * children.\n     */\n    providers?: Provider[];\n    /**\n     * Defines the set of injectable objects that are visible to its view DOM children.\n     */\n    viewProviders?: Provider[];\n    /**\n     * Registry of directives and components that may be found in this component's view.\n     *\n     * The property is either an array of `DirectiveDef`s or a function which returns the array of\n     * `DirectiveDef`s. The function is necessary to be able to support forward declarations.\n     */\n    directives?: DirectiveTypesOrFactory | null;\n    /**\n     * Registry of pipes that may be found in this component's view.\n     *\n     * The property is either an array of `PipeDefs`s or a function which returns the array of\n     * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n     */\n    pipes?: PipeTypesOrFactory | null;\n    /**\n     * Registry of the animation triggers present on the component that will be used by the view.\n     */\n    animations?: any[] | null;\n}): never;\nexport declare function extractDirectiveDef(type: DirectiveType<any> & ComponentType<any>): DirectiveDef<any> | ComponentDef<any>;\nexport declare function extractPipeDef(type: PipeType<any>): PipeDef<any>;\nexport declare function defineNgModule<T>(def: {\n    type: T;\n} & Partial<NgModuleDef<T>>): never;\n/**\n * Create a base definition\n *\n * # Example\n * ```\n * class ShouldBeInherited {\n *   static ngBaseDef = defineBase({\n *      ...\n *   })\n * }\n * @param baseDefinition The base definition parameters\n */\nexport declare function defineBase<T>(baseDefinition: {\n    /**\n     * A map of input names.\n     *\n     * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n     *\n     * Given:\n     * ```\n     * class MyComponent {\n     *   @Input()\n     *   publicInput1: string;\n     *\n     *   @Input('publicInput2')\n     *   declaredInput2: string;\n     * }\n     * ```\n     *\n     * is described as:\n     * ```\n     * {\n     *   publicInput1: 'publicInput1',\n     *   declaredInput2: ['declaredInput2', 'publicInput2'],\n     * }\n     * ```\n     *\n     * Which the minifier may translate to:\n     * ```\n     * {\n     *   minifiedPublicInput1: 'publicInput1',\n     *   minifiedDeclaredInput2: [ 'declaredInput2', 'publicInput2'],\n     * }\n     * ```\n     *\n     * This allows the render to re-construct the minified, public, and declared names\n     * of properties.\n     *\n     * NOTE:\n     *  - Because declared and public name are usually same we only generate the array\n     *    `['declared', 'public']` format when they differ.\n     *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n     *    inconsistent behavior in that it uses declared names rather than minified or public. For\n     *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n     *    API will be simplified to be consistent with `outputs`.\n     */\n    inputs?: {\n        [P in keyof T]?: string | [string, string];\n    };\n    /**\n     * A map of output names.\n     *\n     * The format is in: `{[actualPropertyName: string]:string}`.\n     *\n     * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n     *\n     * This allows the render to re-construct the minified and non-minified names\n     * of properties.\n     */\n    outputs?: {\n        [P in keyof T]?: string;\n    };\n}): BaseDef<T>;\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = defineDirective({\n *     ...\n *   });\n * }\n * ```\n */\nexport declare const defineDirective: <T>(directiveDefinition: {\n    /**\n     * Directive type, needed to configure the injector.\n     */\n    type: Type<T>;\n    /** The selectors that will be used to match nodes to this directive. */\n    selectors: (string | SelectorFlags)[][];\n    /**\n     * Factory method used to create an instance of directive.\n     */\n    factory: () => T;\n    /**\n     * Static attributes to set on host element.\n     *\n     * Even indices: attribute name\n     * Odd indices: attribute value\n     */\n    attributes?: string[] | undefined;\n    /**\n     * A map of input names.\n     *\n     * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n     *\n     * Given:\n     * ```\n     * class MyComponent {\n     *   @Input()\n     *   publicInput1: string;\n     *\n     *   @Input('publicInput2')\n     *   declaredInput2: string;\n     * }\n     * ```\n     *\n     * is described as:\n     * ```\n     * {\n     *   publicInput1: 'publicInput1',\n     *   declaredInput2: ['declaredInput2', 'publicInput2'],\n     * }\n     * ```\n     *\n     * Which the minifier may translate to:\n     * ```\n     * {\n     *   minifiedPublicInput1: 'publicInput1',\n     *   minifiedDeclaredInput2: [ 'publicInput2', 'declaredInput2'],\n     * }\n     * ```\n     *\n     * This allows the render to re-construct the minified, public, and declared names\n     * of properties.\n     *\n     * NOTE:\n     *  - Because declared and public name are usually same we only generate the array\n     *    `['declared', 'public']` format when they differ.\n     *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n     *    inconsistent behavior in that it uses declared names rather than minified or public. For\n     *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n     *    API will be simplified to be consistent with `output`.\n     */\n    inputs?: { [P in keyof T]?: string | [string, string] | undefined; } | undefined;\n    /**\n     * A map of output names.\n     *\n     * The format is in: `{[actualPropertyName: string]:string}`.\n     *\n     * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n     *\n     * This allows the render to re-construct the minified and non-minified names\n     * of properties.\n     */\n    outputs?: { [P in keyof T]?: string | undefined; } | undefined;\n    /**\n     * A list of optional features to apply.\n     *\n     * See: {@link NgOnChangesFeature}, {@link PublicFeature}, {@link InheritDefinitionFeature}\n     */\n    features?: DirectiveDefFeature[] | undefined;\n    /**\n     * The number of host bindings (including pure fn bindings) in this directive.\n     *\n     * Used to calculate the length of the LViewData array for the *parent* component\n     * of this directive.\n     */\n    hostVars?: number | undefined;\n    /**\n     * Function executed by the parent template to allow child directive to apply host bindings.\n     */\n    hostBindings?: ((directiveIndex: number, elementIndex: number) => void) | undefined;\n    /**\n     * Function to create instances of content queries associated with a given directive.\n     */\n    contentQueries?: (() => void) | undefined;\n    /** Refreshes content queries associated with directives in a given view */\n    contentQueriesRefresh?: ((directiveIndex: number, queryIndex: number) => void) | undefined;\n    /**\n     * Defines the name that can be used in the template to assign this directive to a variable.\n     *\n     * See: {@link Directive.exportAs}\n     */\n    exportAs?: string | undefined;\n}) => never;\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n */\nexport declare function definePipe<T>(pipeDef: {\n    /** Name of the pipe. Used for matching pipes in template to pipe defs. */\n    name: string;\n    /** Pipe class reference. Needed to extract pipe lifecycle hooks. */\n    type: Type<T>;\n    /** A factory for creating a pipe instance. */\n    factory: () => T;\n    /** Whether the pipe is pure. */\n    pure?: boolean;\n}): never;\n/**\n * The following getter methods retrieve the definition form the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n */\nexport declare function getComponentDef<T>(type: any): ComponentDef<T> | null;\nexport declare function getDirectiveDef<T>(type: any): DirectiveDef<T> | null;\nexport declare function getPipeDef<T>(type: any): PipeDef<T> | null;\nexport declare function getNgModuleDef<T>(type: any): NgModuleDef<T> | null;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/pipe.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Create a pipe.\n *\n * @param index Pipe index where the pipe will be stored.\n * @param pipeName The name of the pipe\n * @returns T the instance of the pipe.\n */\nexport declare function pipe(index: number, pipeName: string): any;\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n */\nexport declare function pipeBind1(index: number, slotOffset: number, v1: any): any;\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n */\nexport declare function pipeBind2(index: number, slotOffset: number, v1: any, v2: any): any;\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 4rd argument to {@link PipeTransform#transform}.\n */\nexport declare function pipeBind3(index: number, slotOffset: number, v1: any, v2: any, v3: any): any;\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 3rd argument to {@link PipeTransform#transform}.\n * @param v4 4th argument to {@link PipeTransform#transform}.\n */\nexport declare function pipeBind4(index: number, slotOffset: number, v1: any, v2: any, v3: any, v4: any): any;\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n */\nexport declare function pipeBindV(index: number, slotOffset: number, values: any[]): any;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/features/inherit_definition_feature.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentDef, DirectiveDef } from '../interfaces/definition';\n/**\n * Merges the definition from a super class to a sub class.\n * @param definition The definition that is a SubClass of another directive of component\n */\nexport declare function InheritDefinitionFeature(definition: DirectiveDef<any> | ComponentDef<any>): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/query.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { QueryList as viewEngine_QueryList } from '../linker/query_list';\nimport { Type } from '../type';\nimport { TContainerNode, TElementContainerNode, TElementNode } from './interfaces/node';\nimport { LQueries } from './interfaces/query';\n/**\n * A predicate which determines if a given element/directive should be included in the query\n * results.\n */\nexport interface QueryPredicate<T> {\n    /**\n     * If looking for directives then it contains the directive type.\n     */\n    type: Type<T> | null;\n    /**\n     * If selector then contains local names to query for.\n     */\n    selector: string[] | null;\n    /**\n     * Indicates which token should be read from DI for this query.\n     */\n    read: Type<T> | null;\n}\n/**\n * An object representing a query, which is a combination of:\n * - query predicate to determines if a given element/directive should be included in the query\n * - values collected based on a predicate\n * - `QueryList` to which collected values should be reported\n */\nexport interface LQuery<T> {\n    /**\n     * Next query. Used when queries are stored as a linked list in `LQueries`.\n     */\n    next: LQuery<any> | null;\n    /**\n     * Destination to which the value should be added.\n     */\n    list: QueryList<T>;\n    /**\n     * A predicate which determines if a given element/directive should be included in the query\n     * results.\n     */\n    predicate: QueryPredicate<T>;\n    /**\n     * Values which have been located.\n     *\n     * This is what builds up the `QueryList._valuesTree`.\n     */\n    values: any[];\n    /**\n     * A pointer to an array that stores collected values from views. This is necessary so we know a\n     * container into which to insert nodes collected from views.\n     */\n    containerValues: any[] | null;\n}\nexport declare class LQueries_ implements LQueries {\n    parent: LQueries_ | null;\n    private shallow;\n    private deep;\n    constructor(parent: LQueries_ | null, shallow: LQuery<any> | null, deep: LQuery<any> | null);\n    track<T>(queryList: viewEngine_QueryList<T>, predicate: Type<T> | string[], descend?: boolean, read?: Type<T>): void;\n    clone(): LQueries;\n    container(): LQueries | null;\n    createView(): LQueries | null;\n    insertView(index: number): void;\n    addNode(tNode: TElementNode | TContainerNode | TElementContainerNode): LQueries | null;\n    removeView(): void;\n}\nexport declare type QueryList<T> = viewEngine_QueryList<T>;\nexport declare const QueryList: typeof viewEngine_QueryList;\n/**\n * Creates and returns a QueryList.\n *\n * @param memoryIndex The index in memory where the QueryList should be saved. If null,\n * this is is a content query and the QueryList will be saved later through directiveCreate.\n * @param predicate The type for which the query will search\n * @param descend Whether or not to descend into children\n * @param read What to save in the query\n * @returns QueryList<T>\n */\nexport declare function query<T>(memoryIndex: number | null, predicate: Type<any> | string[], descend?: boolean, read?: any): QueryList<T>;\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n * Returns true if a query got dirty during change detection, false otherwise.\n */\nexport declare function queryRefresh(queryList: QueryList<any>): boolean;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/di.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\nimport { InjectFlags, Injector } from '../di/injector';\nimport { Type } from '../type';\nimport { DirectiveDef } from './interfaces/definition';\nimport { TContainerNode, TElementContainerNode, TElementNode, TNode } from './interfaces/node';\nimport { LViewData, TData, TView } from './interfaces/view';\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param injectorIndex The index of the node injector where this token should be registered\n * @param tView The TView for the injector's bloom filters\n * @param type The directive token to register\n */\nexport declare function bloomAdd(injectorIndex: number, tView: TView, type: Type<any>): void;\nexport declare function getOrCreateNodeInjector(): number;\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param tNode for which an injector should be retrieved / created.\n * @param hostView View where the node is stored\n * @returns Node injector\n */\nexport declare function getOrCreateNodeInjectorForNode(tNode: TElementNode | TContainerNode | TElementContainerNode, hostView: LViewData): number;\nexport declare function getInjectorIndex(tNode: TNode, hostView: LViewData): number;\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n */\nexport declare function getParentInjectorLocation(tNode: TNode, view: LViewData): number;\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LViewData instance from which to start walking up the view tree\n * @returns The LViewData instance that contains the parent injector\n */\nexport declare function getParentInjectorView(location: number, startView: LViewData): LViewData;\n/**\n * Makes a directive public to the DI system by adding it to an injector's bloom filter.\n *\n * @param di The node injector in which a directive will be added\n * @param def The definition of the directive to be made public\n */\nexport declare function diPublicInInjector(injectorIndex: number, view: LViewData, def: DirectiveDef<any>): void;\n/**\n * Makes a directive public to the DI system by adding it to an injector's bloom filter.\n *\n * @param def The definition of the directive to be made public\n */\nexport declare function diPublic(def: DirectiveDef<any>): void;\n/**\n * Returns the value associated to the given token from the injectors.\n *\n * `directiveInject` is intended to be used for directive, component and pipe factories.\n *  All other injection use `inject` which does not walk the node injector tree.\n *\n * Usage example (in factory function):\n *\n * class SomeDirective {\n *   constructor(directive: DirectiveA) {}\n *\n *   static ngDirectiveDef = defineDirective({\n *     type: SomeDirective,\n *     factory: () => new SomeDirective(directiveInject(DirectiveA))\n *   });\n * }\n *\n * @param token the type or token to inject\n * @param flags Injection flags\n * @returns the value from the injector or `null` when not found\n */\nexport declare function directiveInject<T>(token: Type<T> | InjectionToken<T>): T;\nexport declare function directiveInject<T>(token: Type<T> | InjectionToken<T>, flags: InjectFlags): T;\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * @Component(...)\n * class MyComponent {\n *   constructor(@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ngComponentDef = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * @experimental\n */\nexport declare function injectAttribute(attrNameToInject: string): string | undefined;\n/**\n * Returns the value associated to the given token from the injectors.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * @param nodeInjector Node injector where the search should start\n * @param token The token to look for\n * @param flags Injection flags\n * @returns the value from the injector or `null` when not found\n */\nexport declare function getOrCreateInjectable<T>(hostTNode: TElementNode | TContainerNode | TElementContainerNode, hostView: LViewData, token: Type<T> | InjectionToken<T>, flags?: InjectFlags): T | null;\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param token the injection token\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n */\nexport declare function bloomHashBitOrFactory(token: Type<any> | InjectionToken<any>): number | Function | undefined;\nexport declare function injectorHasToken(bloomHash: number, injectorIndex: number, injectorView: LViewData | TData): boolean;\nexport declare class NodeInjector implements Injector {\n    private _tNode;\n    private _hostView;\n    private _injectorIndex;\n    constructor(_tNode: TElementNode | TContainerNode | TElementContainerNode, _hostView: LViewData);\n    get(token: any): any;\n}\nexport declare function getFactoryOf<T>(type: Type<any>): ((type?: Type<T>) => T) | null;\nexport declare function getInheritedFactory<T>(type: Type<any>): (type: Type<T>) => T;\n"
  },
  {
    "path": "node_modules/@angular/core/src/reflection/platform_reflection_capabilities.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\nimport { GetterFn, MethodFn, SetterFn } from './types';\nexport interface PlatformReflectionCapabilities {\n    isReflectionEnabled(): boolean;\n    factory(type: Type<any>): Function;\n    hasLifecycleHook(type: any, lcProperty: string): boolean;\n    guards(type: any): {\n        [key: string]: any;\n    };\n    /**\n     * Return a list of annotations/types for constructor parameters\n     */\n    parameters(type: Type<any>): any[][];\n    /**\n     * Return a list of annotations declared on the class\n     */\n    annotations(type: Type<any>): any[];\n    /**\n     * Return a object literal which describes the annotations on Class fields/properties.\n     */\n    propMetadata(typeOrFunc: Type<any>): {\n        [key: string]: any[];\n    };\n    getter(name: string): GetterFn;\n    setter(name: string): SetterFn;\n    method(name: string): MethodFn;\n    importUri(type: Type<any>): string;\n    resourceUri(type: Type<any>): string;\n    resolveIdentifier(name: string, moduleUrl: string, members: string[], runtime: any): any;\n    resolveEnum(enumIdentifier: any, name: string): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/view_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef } from '../application_ref';\nimport { ChangeDetectorRef as viewEngine_ChangeDetectorRef } from '../change_detection/change_detector_ref';\nimport { ViewContainerRef as viewEngine_ViewContainerRef } from '../linker/view_container_ref';\nimport { EmbeddedViewRef as viewEngine_EmbeddedViewRef, InternalViewRef as viewEngine_InternalViewRef } from '../linker/view_ref';\nimport { LViewData } from './interfaces/view';\nexport interface viewEngine_ChangeDetectorRef_interface extends viewEngine_ChangeDetectorRef {\n}\nexport declare class ViewRef<T> implements viewEngine_EmbeddedViewRef<T>, viewEngine_InternalViewRef, viewEngine_ChangeDetectorRef_interface {\n    private _context;\n    private _componentIndex;\n    private _appRef;\n    private _viewContainerRef;\n    rootNodes: any[];\n    constructor(_view: LViewData, _context: T | null, _componentIndex: number);\n    readonly context: T;\n    readonly destroyed: boolean;\n    destroy(): void;\n    onDestroy(callback: Function): void;\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     */\n    markForCheck(): void;\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     */\n    detach(): void;\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     */\n    reattach(): void;\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {@link ChangeDetectorRef#detach detach} for more information.\n     */\n    detectChanges(): void;\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     */\n    checkNoChanges(): void;\n    attachToViewContainerRef(vcRef: viewEngine_ViewContainerRef): void;\n    detachFromAppRef(): void;\n    attachToAppRef(appRef: ApplicationRef): void;\n    private _lookUpContext;\n}\n"
  },
  {
    "path": "node_modules//animations/package.json",
    "content": "{\n  \"name\": \"@angular/animations\",\n  \"version\": \"7.0.0\",\n  \"description\": \"Angular - animations integration with web-animations\",\n  \"main\": \"./bundles/animations.umd.js\",\n  \"module\": \"./fesm5/animations.js\",\n  \"es2015\": \"./fesm2015/animations.js\",\n  \"esm5\": \"./esm5/animations.js\",\n  \"esm2015\": \"./esm2015/animations.js\",\n  \"fesm5\": \"./fesm5/animations.js\",\n  \"fesm2015\": \"./fesm2015/animations.js\",\n  \"typings\": \"./animations.d.ts\",\n  \"author\": \"angular\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"tslib\": \"^1.9.0\"\n  },\n  \"peerDependencies\": {\n    \"@angular/core\": \"7.0.0\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/angular/angular.git\"\n  },\n  \"ng-update\": {\n    \"packageGroup\": [\n      \"@angular/core\",\n      \"@angular/bazel\",\n      \"@angular/common\",\n      \"@angular/compiler\",\n      \"@angular/compiler-cli\",\n      \"@angular/animations\",\n      \"@angular/elements\",\n      \"@angular/platform-browser\",\n      \"@angular/platform-browser-dynamic\",\n      \"@angular/forms\",\n      \"@angular/http\",\n      \"@angular/platform-server\",\n      \"@angular/platform-webworker\",\n      \"@angular/platform-webworker-dynamic\",\n      \"@angular/upgrade\",\n      \"@angular/router\",\n      \"@angular/language-service\",\n      \"@angular/service-worker\"\n    ]\n  },\n  \"sideEffects\": false\n}"
  },
  {
    "path": "node_modules/@angular/animations/browser/testing/package.json",
    "content": "{\n  \"name\": \"@angular/animations/browser/testing\",\n  \"typings\": \"./testing.d.ts\",\n  \"main\": \"../../bundles/animations-browser-testing.umd.js\",\n  \"module\": \"../../fesm5/browser/testing.js\",\n  \"es2015\": \"../../fesm2015/browser/testing.js\",\n  \"esm5\": \"../../esm5/browser/testing/testing.js\",\n  \"esm2015\": \"../../esm2015/browser/testing/testing.js\",\n  \"fesm5\": \"../../fesm5/browser/testing.js\",\n  \"fesm2015\": \"../../fesm2015/browser/testing.js\"\n}"
  },
  {
    "path": "node_modules/@angular/animations/browser/package.json",
    "content": "{\n  \"name\": \"@angular/animations/browser\",\n  \"typings\": \"./browser.d.ts\",\n  \"main\": \"../bundles/animations-browser.umd.js\",\n  \"module\": \"../fesm5/browser.js\",\n  \"es2015\": \"../fesm2015/browser.js\",\n  \"esm5\": \"../esm5/browser/browser.js\",\n  \"esm2015\": \"../esm2015/browser/browser.js\",\n  \"fesm5\": \"../fesm5/browser.js\",\n  \"fesm2015\": \"../fesm2015/browser.js\",\n  \"sideEffects\": false\n}"
  },
  {
    "path": "node_modules/@angular/animations/browser/testing/testing.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"MockAnimationDriver\":{\"__symbolic\":\"class\",\"members\":{\"validateStyleProperty\":[{\"__symbolic\":\"method\"}],\"matchesElement\":[{\"__symbolic\":\"method\"}],\"containsElement\":[{\"__symbolic\":\"method\"}],\"query\":[{\"__symbolic\":\"method\"}],\"computeStyle\":[{\"__symbolic\":\"method\"}],\"animate\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"log\":[]}},\"MockAnimationPlayer\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"module\":\"@angular/animations\",\"name\":\"NoopAnimationPlayer\",\"line\":46,\"character\":41},\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":54,\"character\":45,\"module\":\"./src/mock_animation_driver\"}]},{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"any\"}]}]}],\"onInit\":[{\"__symbolic\":\"method\"}],\"init\":[{\"__symbolic\":\"method\"}],\"finish\":[{\"__symbolic\":\"method\"}],\"destroy\":[{\"__symbolic\":\"method\"}],\"triggerMicrotask\":[{\"__symbolic\":\"method\"}],\"play\":[{\"__symbolic\":\"method\"}],\"hasStarted\":[{\"__symbolic\":\"method\"}],\"beforeDestroy\":[{\"__symbolic\":\"method\"}]}}},\"origins\":{\"MockAnimationDriver\":\"./src/mock_animation_driver\",\"MockAnimationPlayer\":\"./src/mock_animation_driver\"},\"importAs\":\"@angular/animations/browser/testing\"}"
  },
  {
    "path": "node_modules/@angular/animations/browser/testing.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":3,\"metadata\":{},\"exports\":[{\"from\":\"./testing/testing\"}],\"flatModuleIndexRedirect\":true,\"importAs\":\"@angular/animations/browser/testing\"}\n"
  },
  {
    "path": "node_modules/@angular/animations/animations.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"AnimationBuilder\":{\"__symbolic\":\"class\",\"members\":{\"build\":[{\"__symbolic\":\"method\"}]}},\"AnimationFactory\":{\"__symbolic\":\"class\",\"members\":{\"create\":[{\"__symbolic\":\"method\"}]}},\"AnimationEvent\":{\"__symbolic\":\"interface\"},\"AUTO_STYLE\":\"*\",\"AnimateChildOptions\":{\"__symbolic\":\"interface\"},\"AnimateTimings\":{\"__symbolic\":\"interface\"},\"AnimationAnimateChildMetadata\":{\"__symbolic\":\"interface\"},\"AnimationAnimateMetadata\":{\"__symbolic\":\"interface\"},\"AnimationAnimateRefMetadata\":{\"__symbolic\":\"interface\"},\"AnimationGroupMetadata\":{\"__symbolic\":\"interface\"},\"AnimationKeyframesSequenceMetadata\":{\"__symbolic\":\"interface\"},\"AnimationMetadata\":{\"__symbolic\":\"interface\"},\"AnimationMetadataType\":{\"State\":0,\"Transition\":1,\"Sequence\":2,\"Group\":3,\"Animate\":4,\"Keyframes\":5,\"Style\":6,\"Trigger\":7,\"Reference\":8,\"AnimateChild\":9,\"AnimateRef\":10,\"Query\":11,\"Stagger\":12},\"AnimationOptions\":{\"__symbolic\":\"interface\"},\"AnimationQueryMetadata\":{\"__symbolic\":\"interface\"},\"AnimationQueryOptions\":{\"__symbolic\":\"interface\"},\"AnimationReferenceMetadata\":{\"__symbolic\":\"interface\"},\"AnimationSequenceMetadata\":{\"__symbolic\":\"interface\"},\"AnimationStaggerMetadata\":{\"__symbolic\":\"interface\"},\"AnimationStateMetadata\":{\"__symbolic\":\"interface\"},\"AnimationStyleMetadata\":{\"__symbolic\":\"interface\"},\"AnimationTransitionMetadata\":{\"__symbolic\":\"interface\"},\"AnimationTriggerMetadata\":{\"__symbolic\":\"interface\"},\"animate\":{\"__symbolic\":\"function\",\"parameters\":[\"timings\",\"styles\"],\"defaults\":[null,null],\"value\":{\"type\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"AnimationMetadataType\"},\"member\":\"Animate\"},\"styles\":{\"__symbolic\":\"reference\",\"name\":\"styles\"},\"timings\":{\"__symbolic\":\"reference\",\"name\":\"timings\"}}},\"animateChild\":{\"__symbolic\":\"function\",\"parameters\":[\"options\"],\"defaults\":[null],\"value\":{\"type\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"AnimationMetadataType\"},\"member\":\"AnimateChild\"},\"options\":{\"__symbolic\":\"reference\",\"name\":\"options\"}}},\"animation\":{\"__symbolic\":\"function\",\"parameters\":[\"steps\",\"options\"],\"defaults\":[null,null],\"value\":{\"type\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"AnimationMetadataType\"},\"member\":\"Reference\"},\"animation\":{\"__symbolic\":\"reference\",\"name\":\"steps\"},\"options\":{\"__symbolic\":\"reference\",\"name\":\"options\"}}},\"group\":{\"__symbolic\":\"function\",\"parameters\":[\"steps\",\"options\"],\"defaults\":[null,null],\"value\":{\"type\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"AnimationMetadataType\"},\"member\":\"Group\"},\"steps\":{\"__symbolic\":\"reference\",\"name\":\"steps\"},\"options\":{\"__symbolic\":\"reference\",\"name\":\"options\"}}},\"keyframes\":{\"__symbolic\":\"function\",\"parameters\":[\"steps\"],\"value\":{\"type\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"AnimationMetadataType\"},\"member\":\"Keyframes\"},\"steps\":{\"__symbolic\":\"reference\",\"name\":\"steps\"}}},\"query\":{\"__symbolic\":\"function\",\"parameters\":[\"selector\",\"animation\",\"options\"],\"defaults\":[null,null,null],\"value\":{\"type\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"AnimationMetadataType\"},\"member\":\"Query\"},\"selector\":{\"__symbolic\":\"reference\",\"name\":\"selector\"},\"animation\":{\"__symbolic\":\"reference\",\"name\":\"animation\"},\"options\":{\"__symbolic\":\"reference\",\"name\":\"options\"}}},\"sequence\":{\"__symbolic\":\"function\",\"parameters\":[\"steps\",\"options\"],\"defaults\":[null,null],\"value\":{\"type\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"AnimationMetadataType\"},\"member\":\"Sequence\"},\"steps\":{\"__symbolic\":\"reference\",\"name\":\"steps\"},\"options\":{\"__symbolic\":\"reference\",\"name\":\"options\"}}},\"stagger\":{\"__symbolic\":\"function\",\"parameters\":[\"timings\",\"animation\"],\"value\":{\"type\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"AnimationMetadataType\"},\"member\":\"Stagger\"},\"timings\":{\"__symbolic\":\"reference\",\"name\":\"timings\"},\"animation\":{\"__symbolic\":\"reference\",\"name\":\"animation\"}}},\"state\":{\"__symbolic\":\"function\",\"parameters\":[\"name\",\"styles\",\"options\"],\"value\":{\"type\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"AnimationMetadataType\"},\"member\":\"State\"},\"name\":{\"__symbolic\":\"reference\",\"name\":\"name\"},\"styles\":{\"__symbolic\":\"reference\",\"name\":\"styles\"},\"options\":{\"__symbolic\":\"reference\",\"name\":\"options\"}}},\"style\":{\"__symbolic\":\"function\",\"parameters\":[\"tokens\"],\"value\":{\"type\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"AnimationMetadataType\"},\"member\":\"Style\"},\"styles\":{\"__symbolic\":\"reference\",\"name\":\"tokens\"},\"offset\":null}},\"transition\":{\"__symbolic\":\"function\",\"parameters\":[\"stateChangeExpr\",\"steps\",\"options\"],\"defaults\":[null,null,null],\"value\":{\"type\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"AnimationMetadataType\"},\"member\":\"Transition\"},\"expr\":{\"__symbolic\":\"reference\",\"name\":\"stateChangeExpr\"},\"animation\":{\"__symbolic\":\"reference\",\"name\":\"steps\"},\"options\":{\"__symbolic\":\"reference\",\"name\":\"options\"}}},\"trigger\":{\"__symbolic\":\"function\",\"parameters\":[\"name\",\"definitions\"],\"value\":{\"type\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"AnimationMetadataType\"},\"member\":\"Trigger\"},\"name\":{\"__symbolic\":\"reference\",\"name\":\"name\"},\"definitions\":{\"__symbolic\":\"reference\",\"name\":\"definitions\"},\"options\":{}}},\"useAnimation\":{\"__symbolic\":\"function\",\"parameters\":[\"animation\",\"options\"],\"defaults\":[null,null],\"value\":{\"type\":{\"__symbolic\":\"select\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"AnimationMetadataType\"},\"member\":\"AnimateRef\"},\"animation\":{\"__symbolic\":\"reference\",\"name\":\"animation\"},\"options\":{\"__symbolic\":\"reference\",\"name\":\"options\"}}},\"ɵStyleData\":{\"__symbolic\":\"interface\"},\"AnimationPlayer\":{\"__symbolic\":\"interface\"},\"NoopAnimationPlayer\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"number\"}]}],\"_onFinish\":[{\"__symbolic\":\"method\"}],\"onStart\":[{\"__symbolic\":\"method\"}],\"onDone\":[{\"__symbolic\":\"method\"}],\"onDestroy\":[{\"__symbolic\":\"method\"}],\"hasStarted\":[{\"__symbolic\":\"method\"}],\"init\":[{\"__symbolic\":\"method\"}],\"play\":[{\"__symbolic\":\"method\"}],\"triggerMicrotask\":[{\"__symbolic\":\"method\"}],\"_onStart\":[{\"__symbolic\":\"method\"}],\"pause\":[{\"__symbolic\":\"method\"}],\"restart\":[{\"__symbolic\":\"method\"}],\"finish\":[{\"__symbolic\":\"method\"}],\"destroy\":[{\"__symbolic\":\"method\"}],\"reset\":[{\"__symbolic\":\"method\"}],\"setPosition\":[{\"__symbolic\":\"method\"}],\"getPosition\":[{\"__symbolic\":\"method\"}],\"triggerCallback\":[{\"__symbolic\":\"method\"}]}},\"ɵPRE_STYLE\":\"!\",\"ɵAnimationGroupPlayer\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"reference\",\"name\":\"AnimationPlayer\"}]}]}],\"_onFinish\":[{\"__symbolic\":\"method\"}],\"init\":[{\"__symbolic\":\"method\"}],\"onStart\":[{\"__symbolic\":\"method\"}],\"_onStart\":[{\"__symbolic\":\"method\"}],\"onDone\":[{\"__symbolic\":\"method\"}],\"onDestroy\":[{\"__symbolic\":\"method\"}],\"hasStarted\":[{\"__symbolic\":\"method\"}],\"play\":[{\"__symbolic\":\"method\"}],\"pause\":[{\"__symbolic\":\"method\"}],\"restart\":[{\"__symbolic\":\"method\"}],\"finish\":[{\"__symbolic\":\"method\"}],\"destroy\":[{\"__symbolic\":\"method\"}],\"_onDestroy\":[{\"__symbolic\":\"method\"}],\"reset\":[{\"__symbolic\":\"method\"}],\"setPosition\":[{\"__symbolic\":\"method\"}],\"getPosition\":[{\"__symbolic\":\"method\"}],\"beforeDestroy\":[{\"__symbolic\":\"method\"}],\"triggerCallback\":[{\"__symbolic\":\"method\"}]}}},\"origins\":{\"AnimationBuilder\":\"./src/animation_builder\",\"AnimationFactory\":\"./src/animation_builder\",\"AnimationEvent\":\"./src/animation_event\",\"AUTO_STYLE\":\"./src/animation_metadata\",\"AnimateChildOptions\":\"./src/animation_metadata\",\"AnimateTimings\":\"./src/animation_metadata\",\"AnimationAnimateChildMetadata\":\"./src/animation_metadata\",\"AnimationAnimateMetadata\":\"./src/animation_metadata\",\"AnimationAnimateRefMetadata\":\"./src/animation_metadata\",\"AnimationGroupMetadata\":\"./src/animation_metadata\",\"AnimationKeyframesSequenceMetadata\":\"./src/animation_metadata\",\"AnimationMetadata\":\"./src/animation_metadata\",\"AnimationMetadataType\":\"./src/animation_metadata\",\"AnimationOptions\":\"./src/animation_metadata\",\"AnimationQueryMetadata\":\"./src/animation_metadata\",\"AnimationQueryOptions\":\"./src/animation_metadata\",\"AnimationReferenceMetadata\":\"./src/animation_metadata\",\"AnimationSequenceMetadata\":\"./src/animation_metadata\",\"AnimationStaggerMetadata\":\"./src/animation_metadata\",\"AnimationStateMetadata\":\"./src/animation_metadata\",\"AnimationStyleMetadata\":\"./src/animation_metadata\",\"AnimationTransitionMetadata\":\"./src/animation_metadata\",\"AnimationTriggerMetadata\":\"./src/animation_metadata\",\"animate\":\"./src/animation_metadata\",\"animateChild\":\"./src/animation_metadata\",\"animation\":\"./src/animation_metadata\",\"group\":\"./src/animation_metadata\",\"keyframes\":\"./src/animation_metadata\",\"query\":\"./src/animation_metadata\",\"sequence\":\"./src/animation_metadata\",\"stagger\":\"./src/animation_metadata\",\"state\":\"./src/animation_metadata\",\"style\":\"./src/animation_metadata\",\"transition\":\"./src/animation_metadata\",\"trigger\":\"./src/animation_metadata\",\"useAnimation\":\"./src/animation_metadata\",\"ɵStyleData\":\"./src/animation_metadata\",\"AnimationPlayer\":\"./src/players/animation_player\",\"NoopAnimationPlayer\":\"./src/players/animation_player\",\"ɵPRE_STYLE\":\"./src/private_export\",\"ɵAnimationGroupPlayer\":\"./src/players/animation_group_player\"},\"importAs\":\"@angular/animations\"}"
  },
  {
    "path": "node_modules/@angular/animations/browser/browser.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":4,\"metadata\":{\"AnimationDriver\":{\"__symbolic\":\"class\",\"members\":{\"validateStyleProperty\":[{\"__symbolic\":\"method\"}],\"matchesElement\":[{\"__symbolic\":\"method\"}],\"containsElement\":[{\"__symbolic\":\"method\"}],\"query\":[{\"__symbolic\":\"method\"}],\"computeStyle\":[{\"__symbolic\":\"method\"}],\"animate\":[{\"__symbolic\":\"method\"}]},\"statics\":{\"NOOP\":{\"__symbolic\":\"new\",\"expression\":{\"__symbolic\":\"reference\",\"name\":\"NoopAnimationDriver\"}}}},\"ɵAnimation\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"ɵAnimationDriver\"},{\"__symbolic\":\"reference\",\"module\":\"@angular/animations\",\"name\":\"AnimationMetadata\",\"line\":20,\"character\":55}]}],\"buildTimelines\":[{\"__symbolic\":\"method\"}]}},\"ɵAnimationStyleNormalizer\":{\"__symbolic\":\"class\",\"members\":{\"normalizePropertyName\":[{\"__symbolic\":\"method\"}],\"normalizeStyleValue\":[{\"__symbolic\":\"method\"}]}},\"ɵNoopAnimationStyleNormalizer\":{\"__symbolic\":\"class\",\"members\":{\"normalizePropertyName\":[{\"__symbolic\":\"method\"}],\"normalizeStyleValue\":[{\"__symbolic\":\"method\"}]}},\"ɵWebAnimationsStyleNormalizer\":{\"__symbolic\":\"class\",\"extends\":{\"__symbolic\":\"reference\",\"name\":\"ɵAnimationStyleNormalizer\"},\"members\":{\"normalizePropertyName\":[{\"__symbolic\":\"method\"}],\"normalizeStyleValue\":[{\"__symbolic\":\"method\"}]}},\"ɵAnimationDriver\":{\"__symbolic\":\"reference\",\"name\":\"AnimationDriver\"},\"ɵNoopAnimationDriver\":{\"__symbolic\":\"class\",\"decorators\":[{\"__symbolic\":\"call\",\"expression\":{\"__symbolic\":\"reference\",\"module\":\"@angular/core\",\"name\":\"Injectable\",\"line\":15,\"character\":1}}],\"members\":{\"validateStyleProperty\":[{\"__symbolic\":\"method\"}],\"matchesElement\":[{\"__symbolic\":\"method\"}],\"containsElement\":[{\"__symbolic\":\"method\"}],\"query\":[{\"__symbolic\":\"method\"}],\"computeStyle\":[{\"__symbolic\":\"method\"}],\"animate\":[{\"__symbolic\":\"method\"}]}},\"ɵAnimationEngine\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"},{\"__symbolic\":\"reference\",\"name\":\"ɵAnimationDriver\"},{\"__symbolic\":\"reference\",\"name\":\"ɵAnimationStyleNormalizer\"}]}],\"registerTrigger\":[{\"__symbolic\":\"method\"}],\"register\":[{\"__symbolic\":\"method\"}],\"destroy\":[{\"__symbolic\":\"method\"}],\"onInsert\":[{\"__symbolic\":\"method\"}],\"onRemove\":[{\"__symbolic\":\"method\"}],\"disableAnimations\":[{\"__symbolic\":\"method\"}],\"process\":[{\"__symbolic\":\"method\"}],\"listen\":[{\"__symbolic\":\"method\"}],\"flush\":[{\"__symbolic\":\"method\"}],\"whenRenderingDone\":[{\"__symbolic\":\"method\"}]}},\"ɵCssKeyframesDriver\":{\"__symbolic\":\"class\",\"members\":{\"validateStyleProperty\":[{\"__symbolic\":\"method\"}],\"matchesElement\":[{\"__symbolic\":\"method\"}],\"containsElement\":[{\"__symbolic\":\"method\"}],\"query\":[{\"__symbolic\":\"method\"}],\"computeStyle\":[{\"__symbolic\":\"method\"}],\"buildKeyframeElement\":[{\"__symbolic\":\"method\"}],\"animate\":[{\"__symbolic\":\"method\"}],\"_notifyFaultyScrubber\":[{\"__symbolic\":\"method\"}]}},\"ɵCssKeyframesPlayer\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":37,\"character\":63,\"module\":\"./src/render/css_keyframes/css_keyframes_player\"}]},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"number\"},{\"__symbolic\":\"reference\",\"name\":\"string\"},{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":40,\"character\":37,\"module\":\"./src/render/css_keyframes/css_keyframes_player\"}]}],\"onStart\":[{\"__symbolic\":\"method\"}],\"onDone\":[{\"__symbolic\":\"method\"}],\"onDestroy\":[{\"__symbolic\":\"method\"}],\"destroy\":[{\"__symbolic\":\"method\"}],\"_flushDoneFns\":[{\"__symbolic\":\"method\"}],\"_flushStartFns\":[{\"__symbolic\":\"method\"}],\"finish\":[{\"__symbolic\":\"method\"}],\"setPosition\":[{\"__symbolic\":\"method\"}],\"getPosition\":[{\"__symbolic\":\"method\"}],\"hasStarted\":[{\"__symbolic\":\"method\"}],\"init\":[{\"__symbolic\":\"method\"}],\"play\":[{\"__symbolic\":\"method\"}],\"pause\":[{\"__symbolic\":\"method\"}],\"restart\":[{\"__symbolic\":\"method\"}],\"reset\":[{\"__symbolic\":\"method\"}],\"_buildStyler\":[{\"__symbolic\":\"method\"}],\"triggerCallback\":[{\"__symbolic\":\"method\"}],\"beforeDestroy\":[{\"__symbolic\":\"method\"}]}},\"ɵcontainsElement\":{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":145,\"character\":4,\"context\":{\"name\":\"_contains\"},\"module\":\"./src/render/shared\"},\"ɵinvokeQuery\":{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":148,\"character\":4,\"context\":{\"name\":\"_query\"},\"module\":\"./src/render/shared\"},\"ɵmatchesElement\":{\"__symbolic\":\"error\",\"message\":\"Reference to a local symbol\",\"line\":146,\"character\":4,\"context\":{\"name\":\"_matches\"},\"module\":\"./src/render/shared\"},\"ɵvalidateStyleProperty\":{\"__symbolic\":\"function\"},\"ɵWebAnimationsDriver\":{\"__symbolic\":\"class\",\"members\":{\"validateStyleProperty\":[{\"__symbolic\":\"method\"}],\"matchesElement\":[{\"__symbolic\":\"method\"}],\"containsElement\":[{\"__symbolic\":\"method\"}],\"query\":[{\"__symbolic\":\"method\"}],\"computeStyle\":[{\"__symbolic\":\"method\"}],\"overrideWebAnimationsSupport\":[{\"__symbolic\":\"method\"}],\"animate\":[{\"__symbolic\":\"method\"}]}},\"ɵsupportsWebAnimations\":{\"__symbolic\":\"function\",\"parameters\":[],\"value\":{\"__symbolic\":\"binop\",\"operator\":\"===\",\"left\":{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":73,\"character\":9,\"module\":\"./src/render/web_animations/web_animations_driver\"},\"right\":\"function\"}},\"ɵWebAnimationsPlayer\":{\"__symbolic\":\"class\",\"members\":{\"__ctor__\":[{\"__symbolic\":\"constructor\",\"parameters\":[{\"__symbolic\":\"reference\",\"name\":\"any\"},{\"__symbolic\":\"reference\",\"name\":\"Array\",\"arguments\":[{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":34,\"character\":45,\"module\":\"./src/render/web_animations/web_animations_player\"}]},{\"__symbolic\":\"error\",\"message\":\"Expression form not supported\",\"line\":35,\"character\":22,\"module\":\"./src/render/web_animations/web_animations_player\"}]}],\"_onFinish\":[{\"__symbolic\":\"method\"}],\"init\":[{\"__symbolic\":\"method\"}],\"_buildPlayer\":[{\"__symbolic\":\"method\"}],\"_preparePlayerBeforeStart\":[{\"__symbolic\":\"method\"}],\"_triggerWebAnimation\":[{\"__symbolic\":\"method\"}],\"onStart\":[{\"__symbolic\":\"method\"}],\"onDone\":[{\"__symbolic\":\"method\"}],\"onDestroy\":[{\"__symbolic\":\"method\"}],\"play\":[{\"__symbolic\":\"method\"}],\"pause\":[{\"__symbolic\":\"method\"}],\"finish\":[{\"__symbolic\":\"method\"}],\"reset\":[{\"__symbolic\":\"method\"}],\"_resetDomPlayerState\":[{\"__symbolic\":\"method\"}],\"restart\":[{\"__symbolic\":\"method\"}],\"hasStarted\":[{\"__symbolic\":\"method\"}],\"destroy\":[{\"__symbolic\":\"method\"}],\"setPosition\":[{\"__symbolic\":\"method\"}],\"getPosition\":[{\"__symbolic\":\"method\"}],\"beforeDestroy\":[{\"__symbolic\":\"method\"}],\"triggerCallback\":[{\"__symbolic\":\"method\"}]}},\"ɵallowPreviousPlayerStylesMerge\":{\"__symbolic\":\"function\",\"parameters\":[\"duration\",\"delay\"],\"value\":{\"__symbolic\":\"binop\",\"operator\":\"||\",\"left\":{\"__symbolic\":\"binop\",\"operator\":\"===\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"duration\"},\"right\":0},\"right\":{\"__symbolic\":\"binop\",\"operator\":\"===\",\"left\":{\"__symbolic\":\"reference\",\"name\":\"delay\"},\"right\":0}}}},\"origins\":{\"AnimationDriver\":\"./src/render/animation_driver\",\"ɵAnimation\":\"./src/dsl/animation\",\"ɵAnimationStyleNormalizer\":\"./src/dsl/style_normalization/animation_style_normalizer\",\"ɵNoopAnimationStyleNormalizer\":\"./src/dsl/style_normalization/animation_style_normalizer\",\"ɵWebAnimationsStyleNormalizer\":\"./src/dsl/style_normalization/web_animations_style_normalizer\",\"ɵAnimationDriver\":\"./src/render/animation_driver\",\"ɵNoopAnimationDriver\":\"./src/render/animation_driver\",\"ɵAnimationEngine\":\"./src/render/animation_engine_next\",\"ɵCssKeyframesDriver\":\"./src/render/css_keyframes/css_keyframes_driver\",\"ɵCssKeyframesPlayer\":\"./src/render/css_keyframes/css_keyframes_player\",\"ɵcontainsElement\":\"./src/render/shared\",\"ɵinvokeQuery\":\"./src/render/shared\",\"ɵmatchesElement\":\"./src/render/shared\",\"ɵvalidateStyleProperty\":\"./src/render/shared\",\"ɵWebAnimationsDriver\":\"./src/render/web_animations/web_animations_driver\",\"ɵsupportsWebAnimations\":\"./src/render/web_animations/web_animations_driver\",\"ɵWebAnimationsPlayer\":\"./src/render/web_animations/web_animations_player\",\"ɵallowPreviousPlayerStylesMerge\":\"./src/util\"},\"importAs\":\"@angular/animations/browser\"}"
  },
  {
    "path": "node_modules/@angular/animations/animations.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\n"
  },
  {
    "path": "node_modules/@angular/animations/browser.metadata.json",
    "content": "{\"__symbolic\":\"module\",\"version\":3,\"metadata\":{},\"exports\":[{\"from\":\"./browser/browser\"}],\"flatModuleIndexRedirect\":true,\"importAs\":\"@angular/animations/browser\"}\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/browser.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/testing/testing.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\n"
  },
  {
    "path": "node_modules/@angular/animations/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/testing/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/animations/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/animations';\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/testing/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n"
  },
  {
    "path": "node_modules/@angular/animations/src/animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all animation APIs of the animation package.\n */\nexport { AnimationBuilder, AnimationFactory } from './animation_builder';\nexport { AnimationEvent } from './animation_event';\nexport { AUTO_STYLE, AnimateChildOptions, AnimateTimings, AnimationAnimateChildMetadata, AnimationAnimateMetadata, AnimationAnimateRefMetadata, AnimationGroupMetadata, AnimationKeyframesSequenceMetadata, AnimationMetadata, AnimationMetadataType, AnimationOptions, AnimationQueryMetadata, AnimationQueryOptions, AnimationReferenceMetadata, AnimationSequenceMetadata, AnimationStaggerMetadata, AnimationStateMetadata, AnimationStyleMetadata, AnimationTransitionMetadata, AnimationTriggerMetadata, animate, animateChild, animation, group, keyframes, query, sequence, stagger, state, style, transition, trigger, useAnimation, ɵStyleData } from './animation_metadata';\nexport { AnimationPlayer, NoopAnimationPlayer } from './players/animation_player';\nexport * from './private_export';\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/browser';\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/testing/src/testing.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { MockAnimationDriver, MockAnimationPlayer } from './mock_animation_driver';\n"
  },
  {
    "path": "node_modules/@angular/animations/src/animation_event.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An instance of this class is returned as an event parameter when an animation\n * callback is captured for an animation either during the start or done phase.\n *\n * ```typescript\n * @Component({\n *   host: {\n *     '[@myAnimationTrigger]': 'someExpression',\n *     '(@myAnimationTrigger.start)': 'captureStartEvent($event)',\n *     '(@myAnimationTrigger.done)': 'captureDoneEvent($event)',\n *   },\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *        // ...\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   someExpression: any = false;\n *   captureStartEvent(event: AnimationEvent) {\n *     // the toState, fromState and totalTime data is accessible from the event variable\n *   }\n *\n *   captureDoneEvent(event: AnimationEvent) {\n *     // the toState, fromState and totalTime data is accessible from the event variable\n *   }\n * }\n * ```\n *\n * @experimental Animation support is experimental.\n */\nexport interface AnimationEvent {\n    /**\n     * The name of the state from which the animation is triggered.\n     */\n    fromState: string;\n    /**\n     * The name of the state in which the animation completes.\n     */\n    toState: string;\n    /**\n     * The time it takes the animation to complete, in milliseconds.\n     */\n    totalTime: number;\n    /**\n     * The animation phase in which the callback was invoked, one of\n     * \"start\" or \"done\".\n     */\n    phaseName: string;\n    /**\n     * The element to which the animation is attached.\n     */\n    element: any;\n    /**\n     * Internal.\n     */\n    triggerName: string;\n    /**\n     * Internal.\n     */\n    disabled: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/animations/src/players/animation_player.d.ts",
    "content": "/**\n * Provides programmatic control of a reusable animation sequence,\n * built using the `build()` method of `AnimationBuilder`. The `build()` method\n * returns a factory, whose `create()` method instantiates and initializes this interface.\n *\n * @see `AnimationBuilder`\n * @see `AnimationFactory`\n * @see `animate()`\n *\n */\nexport interface AnimationPlayer {\n    /**\n     * Provides a callback to invoke when the animation finishes.\n     * @param fn The callback function.\n     * @see `finish()`\n     */\n    onDone(fn: () => void): void;\n    /**\n     * Provides a callback to invoke when the animation starts.\n     * @param fn The callback function.\n     * @see `run()`\n     */\n    onStart(fn: () => void): void;\n    /**\n     * Provides a callback to invoke after the animation is destroyed.\n     * @param fn The callback function.\n     * @see `destroy()`\n     * @see `beforeDestroy()`\n     */\n    onDestroy(fn: () => void): void;\n    /**\n     * Initializes the animation.\n     */\n    init(): void;\n    /**\n     * Reports whether the animation has started.\n     * @returns True if the animation has started, false otherwise.\n     */\n    hasStarted(): boolean;\n    /**\n     * Runs the animation, invoking the `onStart()` callback.\n     */\n    play(): void;\n    /**\n     * Pauses the animation.\n     */\n    pause(): void;\n    /**\n     * Restarts the paused animation.\n     */\n    restart(): void;\n    /**\n     * Ends the animation, invoking the `onDone()` callback.\n     */\n    finish(): void;\n    /**\n     * Destroys the animation, after invoking the `beforeDestroy()` callback.\n     * Calls the `onDestroy()` callback when destruction is completed.\n     */\n    destroy(): void;\n    /**\n     * Resets the animation to its initial state.\n     */\n    reset(): void;\n    /**\n     * Sets the position of the animation.\n     * @param position A 0-based offset into the duration, in milliseconds.\n     */\n    setPosition(position: any /** TODO #9100 */): void;\n    /**\n     * Reports the current position of the animation.\n     * @returns A 0-based offset into the duration, in milliseconds.\n     */\n    getPosition(): number;\n    /**\n     * The parent of this player, if any.\n     */\n    parentPlayer: AnimationPlayer | null;\n    /**\n     * The total run time of the animation, in milliseconds.\n     */\n    readonly totalTime: number;\n    /**\n     * Provides a callback to invoke before the animation is destroyed.\n     */\n    beforeDestroy?: () => any;\n}\n/**\n * An empty programmatic controller for reusable animations.\n * Used internally when animations are disabled, to avoid\n * checking for the null case when an animation player is expected.\n *\n * @see `animate()`\n * @see `AnimationPlayer`\n * @see `GroupPlayer`\n *\n */\nexport declare class NoopAnimationPlayer implements AnimationPlayer {\n    private _onDoneFns;\n    private _onStartFns;\n    private _onDestroyFns;\n    private _started;\n    private _destroyed;\n    private _finished;\n    parentPlayer: AnimationPlayer | null;\n    readonly totalTime: number;\n    constructor(duration?: number, delay?: number);\n    private _onFinish;\n    onStart(fn: () => void): void;\n    onDone(fn: () => void): void;\n    onDestroy(fn: () => void): void;\n    hasStarted(): boolean;\n    init(): void;\n    play(): void;\n    private _onStart;\n    pause(): void;\n    restart(): void;\n    finish(): void;\n    destroy(): void;\n    reset(): void;\n    setPosition(position: number): void;\n    getPosition(): number;\n}\n"
  },
  {
    "path": "node_modules/@angular/animations/src/animation_builder.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationMetadata, AnimationOptions } from './animation_metadata';\nimport { AnimationPlayer } from './players/animation_player';\n/**\n * An injectable service that produces an animation sequence programmatically within an\n * Angular component or directive.\n * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.\n *\n * @usageNotes\n *\n * To use this service, add it to your component or directive as a dependency.\n * The service is instantiated along with your component.\n *\n * Apps do not typically need to create their own animation players, but if you\n * do need to, follow these steps:\n *\n * 1. Use the `build()` method to create a programmatic animation using the\n * `animate()` function. The method returns an `AnimationFactory` instance.\n *\n * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.\n *\n * 3. Use the player object to control the animation programmatically.\n *\n * For example:\n *\n * ```ts\n * // import the service from BrowserAnimationsModule\n * import {AnimationBuilder} from '@angular/animations';\n * // require the service as a dependency\n * class MyCmp {\n *   constructor(private _builder: AnimationBuilder) {}\n *\n *   makeAnimation(element: any) {\n *     // first define a reusable animation\n *     const myAnimation = this._builder.build([\n *       style({ width: 0 }),\n *       animate(1000, style({ width: '100px' }))\n *     ]);\n *\n *     // use the returned factory object to create a player\n *     const player = myAnimation.create(element);\n *\n *     player.play();\n *   }\n * }\n * ```\n *\n */\nexport declare abstract class AnimationBuilder {\n    /**\n     * Builds a factory for producing a defined animation.\n     * @param animation A reusable animation definition.\n     * @returns A factory object that can create a player for the defined animation.\n     * @see `animate()`\n     */\n    abstract build(animation: AnimationMetadata | AnimationMetadata[]): AnimationFactory;\n}\n/**\n * A factory object returned from the `AnimationBuilder`.`build()` method.\n *\n */\nexport declare abstract class AnimationFactory {\n    /**\n     * Creates an `AnimationPlayer` instance for the reusable animation defined by\n     * the `AnimationBuilder`.`build()` method that created this factory.\n     * Attaches the new player a DOM element.\n     * @param element The DOM element to which to attach the animation.\n     * @param options A set of options that can include a time delay and\n     * additional developer-defined parameters.\n     */\n    abstract create(element: any, options?: AnimationOptions): AnimationPlayer;\n}\n"
  },
  {
    "path": "node_modules/@angular/animations/src/animation_metadata.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a set of CSS styles for use in an animation style.\n */\nexport interface ɵStyleData {\n    [key: string]: string | number;\n}\n/**\n* Represents animation-step timing parameters for an animation step.\n* @see `animate()`\n*/\nexport declare type AnimateTimings = {\n    /**\n     * The full duration of an animation step. A number and optional time unit,\n     * such as \"1s\" or \"10ms\" for one second and 10 milliseconds, respectively.\n     * The default unit is milliseconds.\n     */\n    duration: number;\n    /**\n     * The delay in applying an animation step. A number and optional time unit.\n     * The default unit is milliseconds.\n     */\n    delay: number;\n    /**\n     * An easing style that controls how an animations step accelerates\n     * and decelerates during its run time. An easing function such as `cubic-bezier()`,\n     * or one of the following constants:\n     * - `ease-in`\n     * - `ease-out`\n     * - `ease-in-and-out`\n     */\n    easing: string | null;\n};\n/**\n * @description Options that control animation styling and timing.\n *\n * The following animation functions accept `AnimationOptions` data:\n *\n * - `transition()`\n * - `sequence()`\n * - `{@link animations/group group()}`\n * - `query()`\n * - `animation()`\n * - `useAnimation()`\n * - `animateChild()`\n *\n * Programmatic animations built using the `AnimationBuilder` service also\n * make use of `AnimationOptions`.\n */\nexport declare interface AnimationOptions {\n    /**\n     * Sets a time-delay for initiating an animation action.\n     * A number and optional time unit, such as \"1s\" or \"10ms\" for one second\n     * and 10 milliseconds, respectively.The default unit is milliseconds.\n     * Default value is 0, meaning no delay.\n     */\n    delay?: number | string;\n    /**\n    * A set of developer-defined parameters that modify styling and timing\n    * when an animation action starts. An array of key-value pairs, where the provided value\n    * is used as a default.\n    */\n    params?: {\n        [name: string]: any;\n    };\n}\n/**\n * Adds duration options to control animation styling and timing for a child animation.\n *\n * @see `animateChild()`\n */\nexport declare interface AnimateChildOptions extends AnimationOptions {\n    duration?: number | string;\n}\n/**\n * @description Constants for the categories of parameters that can be defined for animations.\n *\n * A corresponding function defines a set of parameters for each category, and\n * collects them into a corresponding `AnimationMetadata` object.\n */\nexport declare const enum AnimationMetadataType {\n    /**\n     * Associates a named animation state with a set of CSS styles.\n     * See `state()`\n     */\n    State = 0,\n    /**\n     * Data for a transition from one animation state to another.\n     * See `transition()`\n     */\n    Transition = 1,\n    /**\n     * Contains a set of animation steps.\n     * See `sequence()`\n     */\n    Sequence = 2,\n    /**\n     * Contains a set of animation steps.\n     * See `{@link animations/group group()}`\n     */\n    Group = 3,\n    /**\n     * Contains an animation step.\n     * See `animate()`\n     */\n    Animate = 4,\n    /**\n     * Contains a set of animation steps.\n     * See `keyframes()`\n     */\n    Keyframes = 5,\n    /**\n     * Contains a set of CSS property-value pairs into a named style.\n     * See `style()`\n     */\n    Style = 6,\n    /**\n     * Associates an animation with an entry trigger that can be attached to an element.\n     * See `trigger()`\n     */\n    Trigger = 7,\n    /**\n     * Contains a re-usable animation.\n     * See `animation()`\n     */\n    Reference = 8,\n    /**\n     * Contains data to use in executing child animations returned by a query.\n     * See `animateChild()`\n     */\n    AnimateChild = 9,\n    /**\n     * Contains animation parameters for a re-usable animation.\n     * See `useAnimation()`\n     */\n    AnimateRef = 10,\n    /**\n     * Contains child-animation query data.\n     * See `query()`\n     */\n    Query = 11,\n    /**\n     * Contains data for staggering an animation sequence.\n     * See `stagger()`\n     */\n    Stagger = 12\n}\n/**\n * Specifies automatic styling.\n */\nexport declare const AUTO_STYLE = \"*\";\n/**\n * Base for animation data structures.\n */\nexport interface AnimationMetadata {\n    type: AnimationMetadataType;\n}\n/**\n * Contains an animation trigger. Instantiated and returned by the\n * `trigger()` function.\n */\nexport interface AnimationTriggerMetadata extends AnimationMetadata {\n    /**\n      * The trigger name, used to associate it with an element. Unique within the component.\n      */\n    name: string;\n    /**\n     * An animation definition object, containing an array of state and transition declarations.\n     */\n    definitions: AnimationMetadata[];\n    /**\n     * An options object containing a delay and\n     * developer-defined parameters that provide styling defaults and\n     * can be overridden on invocation. Default delay is 0.\n     */\n    options: {\n        params?: {\n            [name: string]: any;\n        };\n    } | null;\n}\n/**\n * Encapsulates an animation state by associating a state name with a set of CSS styles.\n * Instantiated and returned by the `state()` function.\n */\nexport interface AnimationStateMetadata extends AnimationMetadata {\n    /**\n     * The state name, unique within the component.\n     */\n    name: string;\n    /**\n     *  The CSS styles associated with this state.\n     */\n    styles: AnimationStyleMetadata;\n    /**\n     * An options object containing\n     * developer-defined parameters that provide styling defaults and\n     * can be overridden on invocation.\n     */\n    options?: {\n        params: {\n            [name: string]: any;\n        };\n    };\n}\n/**\n * Encapsulates an animation transition. Instantiated and returned by the\n * `transition()` function.\n */\nexport interface AnimationTransitionMetadata extends AnimationMetadata {\n    /**\n     * An expression that describes a state change.\n     */\n    expr: string | ((fromState: string, toState: string, element?: any, params?: {\n        [key: string]: any;\n    }) => boolean);\n    /**\n     * One or more animation objects to which this transition applies.\n     */\n    animation: AnimationMetadata | AnimationMetadata[];\n    /**\n     * An options object containing a delay and\n     * developer-defined parameters that provide styling defaults and\n     * can be overridden on invocation. Default delay is 0.\n     */\n    options: AnimationOptions | null;\n}\n/**\n * Encapsulates a reusable animation, which is a collection of individual animation steps.\n * Instantiated and returned by the `animation()` function, and\n * passed to the `useAnimation()` function.\n */\nexport interface AnimationReferenceMetadata extends AnimationMetadata {\n    /**\n     *  One or more animation step objects.\n     */\n    animation: AnimationMetadata | AnimationMetadata[];\n    /**\n     * An options object containing a delay and\n     * developer-defined parameters that provide styling defaults and\n     * can be overridden on invocation. Default delay is 0.\n     */\n    options: AnimationOptions | null;\n}\n/**\n * Encapsulates an animation query. Instantiated and returned by\n * the `query()` function.\n */\nexport interface AnimationQueryMetadata extends AnimationMetadata {\n    /**\n     *  The CSS selector for this query.\n     */\n    selector: string;\n    /**\n     * One or more animation step objects.\n     */\n    animation: AnimationMetadata | AnimationMetadata[];\n    /**\n     * A query options object.\n     */\n    options: AnimationQueryOptions | null;\n}\n/**\n * Encapsulates a keyframes sequence. Instantiated and returned by\n * the `keyframes()` function.\n */\nexport interface AnimationKeyframesSequenceMetadata extends AnimationMetadata {\n    /**\n     * An array of animation styles.\n     */\n    steps: AnimationStyleMetadata[];\n}\n/**\n * Encapsulates an animation style. Instantiated and returned by\n * the `style()` function.\n */\nexport interface AnimationStyleMetadata extends AnimationMetadata {\n    /**\n     * A set of CSS style properties.\n     */\n    styles: '*' | {\n        [key: string]: string | number;\n    } | Array<{\n        [key: string]: string | number;\n    } | '*'>;\n    /**\n     * A percentage of the total animate time at which the style is to be applied.\n     */\n    offset: number | null;\n}\n/**\n * Encapsulates an animation step. Instantiated and returned by\n * the `animate()` function.\n */\nexport interface AnimationAnimateMetadata extends AnimationMetadata {\n    /**\n     * The timing data for the step.\n     */\n    timings: string | number | AnimateTimings;\n    /**\n     * A set of styles used in the step.\n     */\n    styles: AnimationStyleMetadata | AnimationKeyframesSequenceMetadata | null;\n}\n/**\n * Encapsulates a child animation, that can be run explicitly when the parent is run.\n * Instantiated and returned by the `animateChild` function.\n */\nexport interface AnimationAnimateChildMetadata extends AnimationMetadata {\n    /**\n     * An options object containing a delay and\n     * developer-defined parameters that provide styling defaults and\n     * can be overridden on invocation. Default delay is 0.\n     */\n    options: AnimationOptions | null;\n}\n/**\n * Encapsulates a reusable animation.\n * Instantiated and returned by the `useAnimation()` function.\n */\nexport interface AnimationAnimateRefMetadata extends AnimationMetadata {\n    /**\n     * An animation reference object.\n     */\n    animation: AnimationReferenceMetadata;\n    /**\n     * An options object containing a delay and\n     * developer-defined parameters that provide styling defaults and\n     * can be overridden on invocation. Default delay is 0.\n     */\n    options: AnimationOptions | null;\n}\n/**\n * Encapsulates an animation sequence.\n * Instantiated and returned by the `sequence()` function.\n */\nexport interface AnimationSequenceMetadata extends AnimationMetadata {\n    /**\n     *  An array of animation step objects.\n     */\n    steps: AnimationMetadata[];\n    /**\n     * An options object containing a delay and\n     * developer-defined parameters that provide styling defaults and\n     * can be overridden on invocation. Default delay is 0.\n     */\n    options: AnimationOptions | null;\n}\n/**\n * Encapsulates an animation group.\n * Instantiated and returned by the `{@link animations/group group()}` function.\n */\nexport interface AnimationGroupMetadata extends AnimationMetadata {\n    /**\n     * One or more animation or style steps that form this group.\n     */\n    steps: AnimationMetadata[];\n    /**\n     * An options object containing a delay and\n     * developer-defined parameters that provide styling defaults and\n     * can be overridden on invocation. Default delay is 0.\n     */\n    options: AnimationOptions | null;\n}\n/**\n * Encapsulates animation query options.\n * Passed to the `query()` function.\n */\nexport declare interface AnimationQueryOptions extends AnimationOptions {\n    /**\n     * True if this query is optional, false if it is required. Default is false.\n     * A required query throws an error if no elements are retrieved when\n     * the query is executed. An optional query does not.\n     *\n     */\n    optional?: boolean;\n    /**\n     * A maximum total number of results to return from the query.\n     * If negative, results are limited from the end of the query list towards the beginning.\n     * By default, results are not limited.\n     */\n    limit?: number;\n}\n/**\n * Encapsulates parameters for staggering the start times of a set of animation steps.\n * Instantiated and returned by the `stagger()` function.\n **/\nexport interface AnimationStaggerMetadata extends AnimationMetadata {\n    /**\n     * The timing data for the steps.\n     */\n    timings: string | number;\n    /**\n     * One or more animation steps.\n     */\n    animation: AnimationMetadata | AnimationMetadata[];\n}\n/**\n * Creates a named animation trigger, containing a  list of `state()`\n * and `transition()` entries to be evaluated when the expression\n * bound to the trigger changes.\n *\n * @param name An identifying string.\n * @param definitions  An animation definition object, containing an array of `state()`\n * and `transition()` declarations.\n *\n * @return An object that encapsulates the trigger data.\n *\n * @usageNotes\n * Define an animation trigger in the `animations` section of `@Component` metadata.\n * In the template, reference the trigger by name and bind it to a trigger expression that\n * evaluates to a defined animation state, using the following format:\n *\n * `[@triggerName]=\"expression\"`\n *\n * Animation trigger bindings convert all values to strings, and then match the\n * previous and current values against any linked transitions.\n * Booleans can be specified as `1` or `true` and `0` or `false`.\n *\n * ### Usage Example\n *\n * The following example creates an animation trigger reference based on the provided\n * name value.\n * The provided animation value is expected to be an array consisting of state and\n * transition declarations.\n *\n * ```typescript\n * @Component({\n *   selector: \"my-component\",\n *   templateUrl: \"my-component-tpl.html\",\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *       state(...),\n *       state(...),\n *       transition(...),\n *       transition(...)\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"something\";\n * }\n * ```\n *\n * The template associated with this component makes use of the defined trigger\n * by binding to an element within its template code.\n *\n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n *\n * ### Using an inline function\n * The `transition` animation method also supports reading an inline function which can decide\n * if its associated animation should be run.\n *\n * ```typescript\n * // this method is run each time the `myAnimationTrigger` trigger value changes.\n * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:\n string]: any}): boolean {\n *   // notice that `element` and `params` are also available here\n *   return toState == 'yes-please-animate';\n * }\n *\n * @Component({\n *   selector: 'my-component',\n *   templateUrl: 'my-component-tpl.html',\n *   animations: [\n *     trigger('myAnimationTrigger', [\n *       transition(myInlineMatcherFn, [\n *         // the animation sequence code\n *       ]),\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"yes-please-animate\";\n * }\n * ```\n *\n * ### Disabling Animations\n * When true, the special animation control binding `@.disabled` binding prevents\n * all animations from rendering.\n * Place the  `@.disabled` binding on an element to disable\n * animations on the element itself, as well as any inner animation triggers\n * within the element.\n *\n * The following example shows how to use this feature:\n *\n * ```typescript\n * @Component({\n *   selector: 'my-component',\n *   template: `\n *     <div [@.disabled]=\"isDisabled\">\n *       <div [@childAnimation]=\"exp\"></div>\n *     </div>\n *   `,\n *   animations: [\n *     trigger(\"childAnimation\", [\n *       // ...\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   isDisabled = true;\n *   exp = '...';\n * }\n * ```\n *\n * When `@.disabled` is true, it prevents the `@childAnimation` trigger from animating,\n * along with any inner animations.\n *\n * ### Disable animations application-wide\n * When an area of the template is set to have animations disabled,\n * **all** inner components have their animations disabled as well.\n * This means that you can disable all animations for an app\n * by placing a host binding set on `@.disabled` on the topmost Angular component.\n *\n * ```typescript\n * import {Component, HostBinding} from '@angular/core';\n *\n * @Component({\n *   selector: 'app-component',\n *   templateUrl: 'app.component.html',\n * })\n * class AppComponent {\n *   @HostBinding('@.disabled')\n *   public animationsDisabled = true;\n * }\n * ```\n *\n * ### Overriding disablement of inner animations\n * Despite inner animations being disabled, a parent animation can `query()`\n * for inner elements located in disabled areas of the template and still animate\n * them if needed. This is also the case for when a sub animation is\n * queried by a parent and then later animated using `animateChild()`.\n *\n * ### Detecting when an animation is disabled\n * If a region of the DOM (or the entire application) has its animations disabled, the animation\n * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides\n * an instance of an `AnimationEvent`. If animations are disabled,\n * the `.disabled` flag on the event is true.\n *\n * @experimental Animation support is experimental.\n */\nexport declare function trigger(name: string, definitions: AnimationMetadata[]): AnimationTriggerMetadata;\n/**\n * Defines an animation step that combines styling information with timing information.\n *\n * @param timings Sets `AnimateTimings` for the parent animation.\n * A string in the format \"duration [delay] [easing]\".\n *  - Duration and delay are expressed as a number and optional time unit,\n * such as \"1s\" or \"10ms\" for one second and 10 milliseconds, respectively.\n * The default unit is milliseconds.\n *  - The easing value controls how the animation accelerates and decelerates\n * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,\n * `ease-in-out`, or a `cubic-bezier()` function call.\n * If not supplied, no easing is applied.\n *\n * For example, the string \"1s 100ms ease-out\" specifies a duration of\n * 1000 milliseconds, and delay of 100 ms, and the \"ease-out\" easing style,\n * which decelerates near the end of the duration.\n * @param styles Sets AnimationStyles for the parent animation.\n * A function call to either `style()` or `keyframes()`\n * that returns a collection of CSS style entries to be applied to the parent animation.\n * When null, uses the styles from the destination state.\n * This is useful when describing an animation step that will complete an animation;\n * see \"Animating to the final state\" in `transitions()`.\n * @returns An object that encapsulates the animation step.\n *\n * @usageNotes\n * Call within an animation `sequence()`, `{@link animations/group group()}`, or\n * `transition()` call to specify an animation step\n * that applies given style data to the parent animation for a given amount of time.\n *\n * ### Syntax Examples\n * **Timing examples**\n *\n * The following examples show various `timings` specifications.\n * - `animate(500)` : Duration is 500 milliseconds.\n * - `animate(\"1s\")` : Duration is 1000 milliseconds.\n * - `animate(\"100ms 0.5s\")` : Duration is 100 milliseconds, delay is 500 milliseconds.\n * - `animate(\"5s ease-in\")` : Duration is 5000 milliseconds, easing in.\n * - `animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\")` : Duration is 5000 milliseconds, delay is 10\n * milliseconds, easing according to a bezier curve.\n *\n * **Style examples**\n *\n * The following example calls `style()` to set a single CSS style.\n * ```typescript\n * animate(500, style({ background: \"red\" }))\n * ```\n * The following example calls `keyframes()` to set a CSS style\n * to different values for successive keyframes.\n * ```typescript\n * animate(500, keyframes(\n *  [\n *   style({ background: \"blue\" })),\n *   style({ background: \"red\" }))\n *  ])\n * ```\n */\nexport declare function animate(timings: string | number, styles?: AnimationStyleMetadata | AnimationKeyframesSequenceMetadata | null): AnimationAnimateMetadata;\n/**\n * @description Defines a list of animation steps to be run in parallel.\n *\n * @param steps An array of animation step objects.\n * - When steps are defined by `style()` or `animate()`\n * function calls, each call within the group is executed instantly.\n * - To specify offset styles to be applied at a later time, define steps with\n * `keyframes()`, or use `animate()` calls with a delay value.\n * For example:\n *\n * ```typescript\n * group([\n *   animate(\"1s\", { background: \"black\" }))\n *   animate(\"2s\", { color: \"white\" }))\n * ])\n * ```\n *\n * @param options An options object containing a delay and\n * developer-defined parameters that provide styling defaults and\n * can be overridden on invocation.\n *\n * @return An object that encapsulates the group data.\n *\n * @usageNotes\n * Grouped animations are useful when a series of styles must be\n * animated at different starting times and closed off at different ending times.\n *\n * When called within a `sequence()` or a\n * `transition()` call, does not continue to the next\n * instruction until all of the inner animation steps have completed.\n */\nexport declare function group(steps: AnimationMetadata[], options?: AnimationOptions | null): AnimationGroupMetadata;\n/**\n * Defines a list of animation steps to be run sequentially, one by one.\n *\n * @param steps An array of animation step objects.\n * - Steps defined by `style()` calls apply the styling data immediately.\n * - Steps defined by `animate()` calls apply the styling data over time\n *   as specified by the timing data.\n *\n * ```typescript\n * sequence([\n *   style({ opacity: 0 })),\n *   animate(\"1s\", { opacity: 1 }))\n * ])\n * ```\n *\n * @param options An options object containing a delay and\n * developer-defined parameters that provide styling defaults and\n * can be overridden on invocation.\n *\n * @return An object that encapsulates the sequence data.\n *\n * @usageNotes\n * When you pass an array of steps to a\n * `transition()` call, the steps run sequentially by default.\n * Compare this to the `{@link animations/group group()}` call, which runs animation steps in parallel.\n *\n * When a sequence is used within a `{@link animations/group group()}` or a `transition()` call,\n * execution continues to the next instruction only after each of the inner animation\n * steps have completed.\n *\n **/\nexport declare function sequence(steps: AnimationMetadata[], options?: AnimationOptions | null): AnimationSequenceMetadata;\n/**\n * Declares a key/value object containing CSS properties/styles that\n * can then be used for an animation `state`, within an animation `sequence`,\n * or as styling data for calls to `animate()` and `keyframes()`.\n *\n * @param tokens A set of CSS styles or HTML styles associated with an animation state.\n * The value can be any of the following:\n * - A key-value style pair associating a CSS property with a value.\n * - An array of key-value style pairs.\n * - An asterisk (*), to use auto-styling, where styles are derived from the element\n * being animated and applied to the animation when it starts.\n *\n * Auto-styling can be used to define a state that depends on layout or other\n * environmental factors.\n *\n * @return An object that encapsulates the style data.\n *\n * @usageNotes\n * The following examples create animation styles that collect a set of\n * CSS property values:\n *\n * ```typescript\n * // string values for CSS properties\n * style({ background: \"red\", color: \"blue\" })\n *\n * // numerical pixel values\n * style({ width: 100, height: 0 })\n * ```\n *\n * The following example uses auto-styling to allow a component to animate from\n * a height of 0 up to the height of the parent element:\n *\n * ```\n * style({ height: 0 }),\n * animate(\"1s\", style({ height: \"*\" }))\n * ```\n *\n **/\nexport declare function style(tokens: '*' | {\n    [key: string]: string | number;\n} | Array<'*' | {\n    [key: string]: string | number;\n}>): AnimationStyleMetadata;\n/**\n * Declares an animation state within a trigger attached to an element.\n *\n * @param name One or more names for the defined state in a comma-separated string.\n * The following reserved state names can be supplied to define a style for specific use\n * cases:\n *\n * - `void` You can associate styles with this name to be used when\n * the element is detached from the application. For example, when an `ngIf` evaluates\n * to false, the state of the associated element is void.\n *  - `*` (asterisk) Indicates the default state. You can associate styles with this name\n * to be used as the fallback when the state that is being animated is not declared\n * within the trigger.\n *\n * @param styles A set of CSS styles associated with this state, created using the\n * `style()` function.\n * This set of styles persists on the element once the state has been reached.\n * @param options Parameters that can be passed to the state when it is invoked.\n * 0 or more key-value pairs.\n * @return An object that encapsulates the new state data.\n *\n * @usageNotes\n * Use the `trigger()` function to register states to an animation trigger.\n * Use the `transition()` function to animate between states.\n * When a state is active within a component, its associated styles persist on the element,\n * even when the animation ends.\n **/\nexport declare function state(name: string, styles: AnimationStyleMetadata, options?: {\n    params: {\n        [name: string]: any;\n    };\n}): AnimationStateMetadata;\n/**\n * Defines a set of animation styles, associating each style with an optional `offset` value.\n *\n * @param steps A set of animation styles with optional offset data.\n * The optional `offset` value for a style specifies a percentage of the total animation\n * time at which that style is applied.\n * @returns An object that encapsulates the keyframes data.\n *\n * @usageNotes\n * Use with the `animate()` call. Instead of applying animations\n * from the current state\n * to the destination state, keyframes describe how each style entry is applied and at what point\n * within the animation arc.\n * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).\n *\n * ### Usage\n *\n * In the following example, the offset values describe\n * when each `backgroundColor` value is applied. The color is red at the start, and changes to\n * blue when 20% of the total time has elapsed.\n *\n * ```typescript\n * // the provided offset values\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\", offset: 0 }),\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n *   style({ backgroundColor: \"black\", offset: 1 })\n * ]))\n * ```\n *\n * If there are no `offset` values specified in the style entries, the offsets\n * are calculated automatically.\n *\n * ```typescript\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\" }) // offset = 0\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n *   style({ backgroundColor: \"black\" }) // offset = 1\n * ]))\n *```\n */\nexport declare function keyframes(steps: AnimationStyleMetadata[]): AnimationKeyframesSequenceMetadata;\n/**\n * Declares an animation transition as a sequence of animation steps to run when a given\n * condition is satisfied. The condition is a Boolean expression or function that compares\n * the previous and current animation states, and returns true if this transition should occur.\n * When the state criteria of a defined transition are met, the associated animation is\n * triggered.\n *\n * @param stateChangeExpr A Boolean expression or function that compares the previous and current\n * animation states, and returns true if this transition should occur. Note that  \"true\" and \"false\"\n * match 1 and 0, respectively. An expression is evaluated each time a state change occurs in the\n * animation trigger element.\n * The animation steps run when the expression evaluates to true.\n *\n * - A state-change string takes the form \"state1 => state2\", where each side is a defined animation\n * state, or an asterix (*) to refer to a dynamic start or end state.\n *   - The expression string can contain multiple comma-separated statements;\n * for example \"state1 => state2, state3 => state4\".\n *   - Special values `:enter` and `:leave` initiate a transition on the entry and exit states,\n * equivalent to  \"void => *\"  and \"* => void\".\n *   - Special values `:increment` and `:decrement` initiate a transition when a numeric value has\n * increased or decreased in value.\n * - A function is executed each time a state change occurs in the animation trigger element.\n * The animation steps run when the function returns true.\n *\n * @param steps One or more animation objects, as returned by the `animate()` or\n * `sequence()` function, that form a transformation from one state to another.\n * A sequence is used by default when you pass an array.\n * @param options An options object that can contain a delay value for the start of the animation,\n * and additional developer-defined parameters. Provided values for additional parameters are used\n * as defaults, and override values can be passed to the caller on invocation.\n * @returns An object that encapsulates the transition data.\n *\n * @usageNotes\n * The template associated with a component binds an animation trigger to an element.\n *\n * ```HTML\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n *\n * All transitions are defined within an animation trigger,\n * along with named states that the transitions change to and from.\n *\n * ```typescript\n * trigger(\"myAnimationTrigger\", [\n *  // define states\n *  state(\"on\", style({ background: \"green\" })),\n *  state(\"off\", style({ background: \"grey\" })),\n *  ...]\n * ```\n *\n * Note that when you call the `sequence()` function within a `{@link animations/group group()}`\n * or a `transition()` call, execution does not continue to the next instruction\n * until each of the inner animation steps have completed.\n *\n * ### Syntax examples\n *\n * The following examples define transitions between the two defined states (and default states),\n * using various options:\n *\n * ```typescript\n * // Transition occurs when the state value\n * // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n * transition(\"on => off\", animate(500))\n * // Run the same animation for both directions\n * transition(\"on <=> off\", animate(500))\n * // Define multiple state-change pairs separated by commas\n * transition(\"on => off, off => void\", animate(500))\n * ```\n *\n * ### Special values for state-change expressions\n *\n * - Catch-all state change for when an element is inserted into the page and the\n * destination state is unknown:\n *\n * ```typescript\n * transition(\"void => *\", [\n *  style({ opacity: 0 }),\n *  animate(500)\n *  ])\n * ```\n *\n * - Capture a state change between any states:\n *\n *  `transition(\"* => *\", animate(\"1s 0s\"))`\n *\n * - Entry and exit transitions:\n *\n * ```typescript\n * transition(\":enter\", [\n *   style({ opacity: 0 }),\n *   animate(500, style({ opacity: 1 }))\n *   ]),\n * transition(\":leave\", [\n *   animate(500, style({ opacity: 0 }))\n *   ])\n * ```\n *\n * - Use `:increment` and `:decrement` to initiate transitions:\n *\n * ```typescript\n * transition(\":increment\", group([\n *  query(':enter', [\n *     style({ left: '100%' }),\n *     animate('0.5s ease-out', style('*'))\n *   ]),\n *  query(':leave', [\n *     animate('0.5s ease-out', style({ left: '-100%' }))\n *  ])\n * ]))\n *\n * transition(\":decrement\", group([\n *  query(':enter', [\n *     style({ left: '100%' }),\n *     animate('0.5s ease-out', style('*'))\n *   ]),\n *  query(':leave', [\n *     animate('0.5s ease-out', style({ left: '-100%' }))\n *  ])\n * ]))\n * ```\n *\n * ### State-change functions\n *\n * Here is an example of a `fromState` specified as a state-change function that invokes an\n * animation when true:\n *\n * ```typescript\n * transition((fromState, toState) =>\n *  {\n *   return fromState == \"off\" && toState == \"on\";\n *  },\n *  animate(\"1s 0s\"))\n * ```\n *\n * ### Animating to the final state\n *\n * If the final step in a transition is a call to `animate()` that uses a timing value\n * with no style data, that step is automatically considered the final animation arc,\n * for the element to reach the final state. Angular automatically adds or removes\n * CSS styles to ensure that the element is in the correct final state.\n *\n * The following example defines a transition that starts by hiding the element,\n * then makes sure that it animates properly to whatever state is currently active for trigger:\n *\n * ```typescript\n * transition(\"void => *\", [\n *   style({ opacity: 0 }),\n *   animate(500)\n *  ])\n * ```\n * ### Boolean value matching\n * If a trigger binding value is a Boolean, it can be matched using a transition expression\n * that compares true and false or 1 and 0. For example:\n *\n * ```\n * // in the template\n * <div [@openClose]=\"open ? true : false\">...</div>\n * // in the component metadata\n * trigger('openClose', [\n *   state('true', style({ height: '*' })),\n *   state('false', style({ height: '0px' })),\n *   transition('false <=> true', animate(500))\n * ])\n * ```\n **/\nexport declare function transition(stateChangeExpr: string | ((fromState: string, toState: string, element?: any, params?: {\n    [key: string]: any;\n}) => boolean), steps: AnimationMetadata | AnimationMetadata[], options?: AnimationOptions | null): AnimationTransitionMetadata;\n/**\n * Produces a reusable animation that can be invoked in another animation or sequence,\n * by calling the `useAnimation()` function.\n *\n * @param steps One or more animation objects, as returned by the `animate()`\n * or `sequence()` function, that form a transformation from one state to another.\n * A sequence is used by default when you pass an array.\n * @param options An options object that can contain a delay value for the start of the\n * animation, and additional developer-defined parameters.\n * Provided values for additional parameters are used as defaults,\n * and override values can be passed to the caller on invocation.\n * @returns An object that encapsulates the animation data.\n *\n * @usageNotes\n * The following example defines a reusable animation, providing some default parameter\n * values.\n *\n * ```typescript\n * var fadeAnimation = animation([\n *   style({ opacity: '{{ start }}' }),\n *   animate('{{ time }}',\n *   style({ opacity: '{{ end }}'}))\n *   ],\n *   { params: { time: '1000ms', start: 0, end: 1 }});\n * ```\n *\n * The following invokes the defined animation with a call to `useAnimation()`,\n * passing in override parameter values.\n *\n * ```js\n * useAnimation(fadeAnimation, {\n *   params: {\n *     time: '2s',\n *     start: 1,\n *     end: 0\n *   }\n * })\n * ```\n *\n * If any of the passed-in parameter values are missing from this call,\n * the default values are used. If one or more parameter values are missing before a step is\n * animated, `useAnimation()` throws an error.\n */\nexport declare function animation(steps: AnimationMetadata | AnimationMetadata[], options?: AnimationOptions | null): AnimationReferenceMetadata;\n/**\n * Executes a queried inner animation element within an animation sequence.\n *\n * @param options An options object that can contain a delay value for the start of the\n * animation, and additional override values for developer-defined parameters.\n * @return An object that encapsulates the child animation data.\n *\n * @usageNotes\n * Each time an animation is triggered in Angular, the parent animation\n * has priority and any child animations are blocked. In order\n * for a child animation to run, the parent animation must query each of the elements\n * containing child animations, and run them using this function.\n *\n * Note that this feature designed to be used with `query()` and it will only work\n * with animations that are assigned using the Angular animation library. CSS keyframes\n * and transitions are not handled by this API.\n */\nexport declare function animateChild(options?: AnimateChildOptions | null): AnimationAnimateChildMetadata;\n/**\n * Starts a reusable animation that is created using the `animation()` function.\n *\n * @param animation The reusable animation to start.\n * @param options An options object that can contain a delay value for the start of\n * the animation, and additional override values for developer-defined parameters.\n * @return An object that contains the animation parameters.\n */\nexport declare function useAnimation(animation: AnimationReferenceMetadata, options?: AnimationOptions | null): AnimationAnimateRefMetadata;\n/**\n * Finds one or more inner elements within the current element that is\n * being animated within a sequence. Use with `animateChild()`.\n *\n * @param selector The element to query, or a set of elements that contain Angular-specific\n * characteristics, specified with one or more of the following tokens.\n *  - `query(\":enter\")` or `query(\":leave\")` : Query for newly inserted/removed elements.\n *  - `query(\":animating\")` : Query all currently animating elements.\n *  - `query(\"@triggerName\")` : Query elements that contain an animation trigger.\n *  - `query(\"@*\")` : Query all elements that contain an animation triggers.\n *  - `query(\":self\")` : Include the current element into the animation sequence.\n *\n * @param animation One or more animation steps to apply to the queried element or elements.\n * An array is treated as an animation sequence.\n * @param options An options object. Use the 'limit' field to limit the total number of\n * items to collect.\n * @return An object that encapsulates the query data.\n *\n * @usageNotes\n * Tokens can be merged into a combined query selector string. For example:\n *\n * ```typescript\n *  query(':self, .record:enter, .record:leave, @subTrigger', [...])\n * ```\n *\n * The `query()` function collects multiple elements and works internally by using\n * `element.querySelectorAll`. Use the `limit` field of an options object to limit\n * the total number of items to be collected. For example:\n *\n * ```js\n * query('div', [\n *   animate(...),\n *   animate(...)\n * ], { limit: 1 })\n * ```\n *\n * By default, throws an error when zero items are found. Set the\n * `optional` flag to ignore this error. For example:\n *\n * ```js\n * query('.some-element-that-may-not-be-there', [\n *   animate(...),\n *   animate(...)\n * ], { optional: true })\n * ```\n *\n * ### Usage Example\n *\n * The following example queries for inner elements and animates them\n * individually using `animateChild()`.\n *\n * ```typescript\n * @Component({\n *   selector: 'inner',\n *   template: `\n *     <div [@queryAnimation]=\"exp\">\n *       <h1>Title</h1>\n *       <div class=\"content\">\n *         Blah blah blah\n *       </div>\n *     </div>\n *   `,\n *   animations: [\n *    trigger('queryAnimation', [\n *      transition('* => goAnimate', [\n *        // hide the inner elements\n *        query('h1', style({ opacity: 0 })),\n *        query('.content', style({ opacity: 0 })),\n *\n *        // animate the inner elements in, one by one\n *        query('h1', animate(1000, style({ opacity: 1 })),\n *        query('.content', animate(1000, style({ opacity: 1 })),\n *      ])\n *    ])\n *  ]\n * })\n * class Cmp {\n *   exp = '';\n *\n *   goAnimate() {\n *     this.exp = 'goAnimate';\n *   }\n * }\n * ```\n */\nexport declare function query(selector: string, animation: AnimationMetadata | AnimationMetadata[], options?: AnimationQueryOptions | null): AnimationQueryMetadata;\n/**\n * Use within an animation `query()` call to issue a timing gap after\n * each queried item is animated.\n *\n * @param timings A delay value.\n * @param animation One ore more animation steps.\n * @returns An object that encapsulates the stagger data.\n *\n * @usageNotes\n * In the following example, a container element wraps a list of items stamped out\n * by an `ngFor`. The container element contains an animation trigger that will later be set\n * to query for each of the inner items.\n *\n * Each time items are added, the opacity fade-in animation runs,\n * and each removed item is faded out.\n * When either of these animations occur, the stagger effect is\n * applied after each item's animation is started.\n *\n * ```html\n * <!-- list.component.html -->\n * <button (click)=\"toggle()\">Show / Hide Items</button>\n * <hr />\n * <div [@listAnimation]=\"items.length\">\n *   <div *ngFor=\"let item of items\">\n *     {{ item }}\n *   </div>\n * </div>\n * ```\n *\n * Here is the component code:\n *\n * ```typescript\n * import {trigger, transition, style, animate, query, stagger} from '@angular/animations';\n * @Component({\n *   templateUrl: 'list.component.html',\n *   animations: [\n *     trigger('listAnimation', [\n *     ...\n *     ])\n *   ]\n * })\n * class ListComponent {\n *   items = [];\n *\n *   showItems() {\n *     this.items = [0,1,2,3,4];\n *   }\n *\n *   hideItems() {\n *     this.items = [];\n *   }\n *\n *   toggle() {\n *     this.items.length ? this.hideItems() : this.showItems();\n *    }\n *  }\n * ```\n *\n * Here is the animation trigger code:\n *\n * ```typescript\n * trigger('listAnimation', [\n *   transition('* => *', [ // each time the binding value changes\n *     query(':leave', [\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 0 }))\n *       ])\n *     ]),\n *     query(':enter', [\n *       style({ opacity: 0 }),\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 1 }))\n *       ])\n *     ])\n *   ])\n * ])\n * ```\n */\nexport declare function stagger(timings: string | number, animation: AnimationMetadata | AnimationMetadata[]): AnimationStaggerMetadata;\n"
  },
  {
    "path": "node_modules/@angular/animations/src/private_export.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { AnimationGroupPlayer as ɵAnimationGroupPlayer } from './players/animation_group_player';\nexport declare const ɵPRE_STYLE = \"!\";\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/browser.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all animation APIs of the animation browser package.\n */\nexport { AnimationDriver } from './render/animation_driver';\nexport * from './private_export';\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/testing/src/mock_animation_driver.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationPlayer, NoopAnimationPlayer, ɵStyleData } from '@angular/animations';\nimport { ɵAnimationDriver as AnimationDriver } from '@angular/animations/browser';\n/**\n * @experimental Animation support is experimental.\n */\nexport declare class MockAnimationDriver implements AnimationDriver {\n    static log: AnimationPlayer[];\n    validateStyleProperty(prop: string): boolean;\n    matchesElement(element: any, selector: string): boolean;\n    containsElement(elm1: any, elm2: any): boolean;\n    query(element: any, selector: string, multi: boolean): any[];\n    computeStyle(element: any, prop: string, defaultValue?: string): string;\n    animate(element: any, keyframes: {\n        [key: string]: string | number;\n    }[], duration: number, delay: number, easing: string, previousPlayers?: any[]): MockAnimationPlayer;\n}\n/**\n * @experimental Animation support is experimental.\n */\nexport declare class MockAnimationPlayer extends NoopAnimationPlayer {\n    element: any;\n    keyframes: {\n        [key: string]: string | number;\n    }[];\n    duration: number;\n    delay: number;\n    easing: string;\n    previousPlayers: any[];\n    private __finished;\n    private __started;\n    previousStyles: {\n        [key: string]: string | number;\n    };\n    private _onInitFns;\n    currentSnapshot: ɵStyleData;\n    constructor(element: any, keyframes: {\n        [key: string]: string | number;\n    }[], duration: number, delay: number, easing: string, previousPlayers: any[]);\n    finish(): void;\n    destroy(): void;\n    play(): void;\n    hasStarted(): boolean;\n    beforeDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/render/animation_driver.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationPlayer } from '@angular/animations';\n/**\n * @experimental\n */\nexport declare class NoopAnimationDriver implements AnimationDriver {\n    validateStyleProperty(prop: string): boolean;\n    matchesElement(element: any, selector: string): boolean;\n    containsElement(elm1: any, elm2: any): boolean;\n    query(element: any, selector: string, multi: boolean): any[];\n    computeStyle(element: any, prop: string, defaultValue?: string): string;\n    animate(element: any, keyframes: {\n        [key: string]: string | number;\n    }[], duration: number, delay: number, easing: string, previousPlayers?: any[], scrubberAccessRequested?: boolean): AnimationPlayer;\n}\n/**\n * @experimental\n */\nexport declare abstract class AnimationDriver {\n    static NOOP: AnimationDriver;\n    abstract validateStyleProperty(prop: string): boolean;\n    abstract matchesElement(element: any, selector: string): boolean;\n    abstract containsElement(elm1: any, elm2: any): boolean;\n    abstract query(element: any, selector: string, multi: boolean): any[];\n    abstract computeStyle(element: any, prop: string, defaultValue?: string): string;\n    abstract animate(element: any, keyframes: {\n        [key: string]: string | number;\n    }[], duration: number, delay: number, easing?: string | null, previousPlayers?: any[], scrubberAccessRequested?: boolean): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/animations/src/players/animation_group_player.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationPlayer } from './animation_player';\n/**\n * A programmatic controller for a group of reusable animations.\n * Used internally to control animations.\n *\n * @see `AnimationPlayer`\n * @see `{@link animations/group group()}`\n *\n */\nexport declare class AnimationGroupPlayer implements AnimationPlayer {\n    private _onDoneFns;\n    private _onStartFns;\n    private _finished;\n    private _started;\n    private _destroyed;\n    private _onDestroyFns;\n    parentPlayer: AnimationPlayer | null;\n    totalTime: number;\n    readonly players: AnimationPlayer[];\n    constructor(_players: AnimationPlayer[]);\n    private _onFinish;\n    init(): void;\n    onStart(fn: () => void): void;\n    private _onStart;\n    onDone(fn: () => void): void;\n    onDestroy(fn: () => void): void;\n    hasStarted(): boolean;\n    play(): void;\n    pause(): void;\n    restart(): void;\n    finish(): void;\n    destroy(): void;\n    private _onDestroy;\n    reset(): void;\n    setPosition(p: number): void;\n    getPosition(): number;\n    beforeDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/private_export.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { Animation as ɵAnimation } from './dsl/animation';\nexport { AnimationStyleNormalizer as ɵAnimationStyleNormalizer, NoopAnimationStyleNormalizer as ɵNoopAnimationStyleNormalizer } from './dsl/style_normalization/animation_style_normalizer';\nexport { WebAnimationsStyleNormalizer as ɵWebAnimationsStyleNormalizer } from './dsl/style_normalization/web_animations_style_normalizer';\nexport { AnimationDriver as ɵAnimationDriver, NoopAnimationDriver as ɵNoopAnimationDriver } from './render/animation_driver';\nexport { AnimationEngine as ɵAnimationEngine } from './render/animation_engine_next';\nexport { CssKeyframesDriver as ɵCssKeyframesDriver } from './render/css_keyframes/css_keyframes_driver';\nexport { CssKeyframesPlayer as ɵCssKeyframesPlayer } from './render/css_keyframes/css_keyframes_player';\nexport { containsElement as ɵcontainsElement, invokeQuery as ɵinvokeQuery, matchesElement as ɵmatchesElement, validateStyleProperty as ɵvalidateStyleProperty } from './render/shared';\nexport { WebAnimationsDriver as ɵWebAnimationsDriver, supportsWebAnimations as ɵsupportsWebAnimations } from './render/web_animations/web_animations_driver';\nexport { WebAnimationsPlayer as ɵWebAnimationsPlayer } from './render/web_animations/web_animations_player';\nexport { allowPreviousPlayerStylesMerge as ɵallowPreviousPlayerStylesMerge } from './util';\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/dsl/style_normalization/animation_style_normalizer.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @experimental Animation support is experimental.\n */\nexport declare abstract class AnimationStyleNormalizer {\n    abstract normalizePropertyName(propertyName: string, errors: string[]): string;\n    abstract normalizeStyleValue(userProvidedProperty: string, normalizedProperty: string, value: string | number, errors: string[]): string;\n}\n/**\n * @experimental Animation support is experimental.\n */\nexport declare class NoopAnimationStyleNormalizer {\n    normalizePropertyName(propertyName: string, errors: string[]): string;\n    normalizeStyleValue(userProvidedProperty: string, normalizedProperty: string, value: string | number, errors: string[]): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/dsl/animation.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationMetadata, AnimationOptions, ɵStyleData } from '@angular/animations';\nimport { AnimationDriver } from '../render/animation_driver';\nimport { AnimationTimelineInstruction } from './animation_timeline_instruction';\nimport { ElementInstructionMap } from './element_instruction_map';\nexport declare class Animation {\n    private _driver;\n    private _animationAst;\n    constructor(_driver: AnimationDriver, input: AnimationMetadata | AnimationMetadata[]);\n    buildTimelines(element: any, startingStyles: ɵStyleData | ɵStyleData[], destinationStyles: ɵStyleData | ɵStyleData[], options: AnimationOptions, subInstructions?: ElementInstructionMap): AnimationTimelineInstruction[];\n}\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/render/animation_engine_next.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationPlayer, AnimationTriggerMetadata } from '@angular/animations';\nimport { AnimationStyleNormalizer } from '../dsl/style_normalization/animation_style_normalizer';\nimport { AnimationDriver } from './animation_driver';\nexport declare class AnimationEngine {\n    private bodyNode;\n    private _driver;\n    private _transitionEngine;\n    private _timelineEngine;\n    private _triggerCache;\n    onRemovalComplete: (element: any, context: any) => void;\n    constructor(bodyNode: any, _driver: AnimationDriver, normalizer: AnimationStyleNormalizer);\n    registerTrigger(componentId: string, namespaceId: string, hostElement: any, name: string, metadata: AnimationTriggerMetadata): void;\n    register(namespaceId: string, hostElement: any): void;\n    destroy(namespaceId: string, context: any): void;\n    onInsert(namespaceId: string, element: any, parent: any, insertBefore: boolean): void;\n    onRemove(namespaceId: string, element: any, context: any): void;\n    disableAnimations(element: any, disable: boolean): void;\n    process(namespaceId: string, element: any, property: string, value: any): void;\n    listen(namespaceId: string, element: any, eventName: string, eventPhase: string, callback: (event: any) => any): () => any;\n    flush(microtaskId?: number): void;\n    readonly players: AnimationPlayer[];\n    whenRenderingDone(): Promise<any>;\n}\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/dsl/style_normalization/web_animations_style_normalizer.d.ts",
    "content": "import { AnimationStyleNormalizer } from './animation_style_normalizer';\nexport declare class WebAnimationsStyleNormalizer extends AnimationStyleNormalizer {\n    normalizePropertyName(propertyName: string, errors: string[]): string;\n    normalizeStyleValue(userProvidedProperty: string, normalizedProperty: string, value: string | number, errors: string[]): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/render/web_animations/web_animations_player.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationPlayer } from '@angular/animations';\nimport { DOMAnimation } from './dom_animation';\nexport declare class WebAnimationsPlayer implements AnimationPlayer {\n    element: any;\n    keyframes: {\n        [key: string]: string | number;\n    }[];\n    options: {\n        [key: string]: string | number;\n    };\n    private _onDoneFns;\n    private _onStartFns;\n    private _onDestroyFns;\n    private _duration;\n    private _delay;\n    private _initialized;\n    private _finished;\n    private _started;\n    private _destroyed;\n    private _finalKeyframe;\n    readonly domPlayer: DOMAnimation;\n    time: number;\n    parentPlayer: AnimationPlayer | null;\n    currentSnapshot: {\n        [styleName: string]: string | number;\n    };\n    constructor(element: any, keyframes: {\n        [key: string]: string | number;\n    }[], options: {\n        [key: string]: string | number;\n    });\n    private _onFinish;\n    init(): void;\n    private _buildPlayer;\n    private _preparePlayerBeforeStart;\n    onStart(fn: () => void): void;\n    onDone(fn: () => void): void;\n    onDestroy(fn: () => void): void;\n    play(): void;\n    pause(): void;\n    finish(): void;\n    reset(): void;\n    private _resetDomPlayerState;\n    restart(): void;\n    hasStarted(): boolean;\n    destroy(): void;\n    setPosition(p: number): void;\n    getPosition(): number;\n    readonly totalTime: number;\n    beforeDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimateTimings, AnimationMetadata, AnimationMetadataType, AnimationOptions, ɵStyleData } from '@angular/animations';\nimport { Ast as AnimationAst, AstVisitor as AnimationAstVisitor } from './dsl/animation_ast';\nimport { AnimationDslVisitor } from './dsl/animation_dsl_visitor';\nexport declare const ONE_SECOND = 1000;\nexport declare const SUBSTITUTION_EXPR_START = \"{{\";\nexport declare const SUBSTITUTION_EXPR_END = \"}}\";\nexport declare const ENTER_CLASSNAME = \"ng-enter\";\nexport declare const LEAVE_CLASSNAME = \"ng-leave\";\nexport declare const ENTER_SELECTOR = \".ng-enter\";\nexport declare const LEAVE_SELECTOR = \".ng-leave\";\nexport declare const NG_TRIGGER_CLASSNAME = \"ng-trigger\";\nexport declare const NG_TRIGGER_SELECTOR = \".ng-trigger\";\nexport declare const NG_ANIMATING_CLASSNAME = \"ng-animating\";\nexport declare const NG_ANIMATING_SELECTOR = \".ng-animating\";\nexport declare function resolveTimingValue(value: string | number): number;\nexport declare function resolveTiming(timings: string | number | AnimateTimings, errors: any[], allowNegativeValues?: boolean): AnimateTimings;\nexport declare function copyObj(obj: {\n    [key: string]: any;\n}, destination?: {\n    [key: string]: any;\n}): {\n    [key: string]: any;\n};\nexport declare function normalizeStyles(styles: ɵStyleData | ɵStyleData[]): ɵStyleData;\nexport declare function copyStyles(styles: ɵStyleData, readPrototype: boolean, destination?: ɵStyleData): ɵStyleData;\nexport declare function setStyles(element: any, styles: ɵStyleData): void;\nexport declare function eraseStyles(element: any, styles: ɵStyleData): void;\nexport declare function normalizeAnimationEntry(steps: AnimationMetadata | AnimationMetadata[]): AnimationMetadata;\nexport declare function validateStyleParams(value: string | number, options: AnimationOptions, errors: any[]): void;\nexport declare function extractStyleParams(value: string | number): string[];\nexport declare function interpolateParams(value: string | number, params: {\n    [name: string]: any;\n}, errors: any[]): string | number;\nexport declare function iteratorToArray(iterator: any): any[];\nexport declare function mergeAnimationOptions(source: AnimationOptions, destination: AnimationOptions): AnimationOptions;\nexport declare function dashCaseToCamelCase(input: string): string;\nexport declare function allowPreviousPlayerStylesMerge(duration: number, delay: number): boolean;\nexport declare function balancePreviousStylesIntoKeyframes(element: any, keyframes: {\n    [key: string]: any;\n}[], previousStyles: {\n    [key: string]: any;\n}): {\n    [key: string]: any;\n}[];\nexport declare function visitDslNode(visitor: AnimationDslVisitor, node: AnimationMetadata, context: any): any;\nexport declare function visitDslNode(visitor: AnimationAstVisitor, node: AnimationAst<AnimationMetadataType>, context: any): any;\nexport declare function computeStyle(element: any, prop: string): string;\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/render/shared.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationEvent, AnimationPlayer, ɵStyleData } from '@angular/animations';\nimport { AnimationStyleNormalizer } from '../../src/dsl/style_normalization/animation_style_normalizer';\nimport { AnimationDriver } from '../../src/render/animation_driver';\nexport declare function isBrowser(): boolean;\nexport declare function isNode(): boolean;\nexport declare function optimizeGroupPlayer(players: AnimationPlayer[]): AnimationPlayer;\nexport declare function normalizeKeyframes(driver: AnimationDriver, normalizer: AnimationStyleNormalizer, element: any, keyframes: ɵStyleData[], preStyles?: ɵStyleData, postStyles?: ɵStyleData): ɵStyleData[];\nexport declare function listenOnPlayer(player: AnimationPlayer, eventName: string, event: AnimationEvent | undefined, callback: (event: any) => any): void;\nexport declare function copyAnimationEvent(e: AnimationEvent, phaseName: string, player: AnimationPlayer): AnimationEvent;\nexport declare function makeAnimationEvent(element: any, triggerName: string, fromState: string, toState: string, phaseName?: string, totalTime?: number, disabled?: boolean): AnimationEvent;\nexport declare function getOrSetAsInMap(map: Map<any, any> | {\n    [key: string]: any;\n}, key: any, defaultValue: any): any;\nexport declare function parseTimelineCommand(command: string): [string, string];\nexport declare function validateStyleProperty(prop: string): boolean;\nexport declare function getBodyNode(): any | null;\nexport declare const matchesElement: (element: any, selector: string) => boolean;\nexport declare const containsElement: (elm1: any, elm2: any) => boolean;\nexport declare const invokeQuery: (element: any, selector: string, multi: boolean) => any[];\nexport declare function hypenatePropsObject(object: {\n    [key: string]: any;\n}): {\n    [key: string]: any;\n};\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/render/web_animations/web_animations_driver.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationPlayer, ɵStyleData } from '@angular/animations';\nimport { AnimationDriver } from '../animation_driver';\nexport declare class WebAnimationsDriver implements AnimationDriver {\n    private _isNativeImpl;\n    private _cssKeyframesDriver;\n    validateStyleProperty(prop: string): boolean;\n    matchesElement(element: any, selector: string): boolean;\n    containsElement(elm1: any, elm2: any): boolean;\n    query(element: any, selector: string, multi: boolean): any[];\n    computeStyle(element: any, prop: string, defaultValue?: string): string;\n    overrideWebAnimationsSupport(supported: boolean): void;\n    animate(element: any, keyframes: ɵStyleData[], duration: number, delay: number, easing: string, previousPlayers?: AnimationPlayer[], scrubberAccessRequested?: boolean): AnimationPlayer;\n}\nexport declare function supportsWebAnimations(): boolean;\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/render/css_keyframes/css_keyframes_driver.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationPlayer, ɵStyleData } from '@angular/animations';\nimport { AnimationDriver } from '../animation_driver';\nexport declare class CssKeyframesDriver implements AnimationDriver {\n    private _count;\n    private readonly _head;\n    private _warningIssued;\n    validateStyleProperty(prop: string): boolean;\n    matchesElement(element: any, selector: string): boolean;\n    containsElement(elm1: any, elm2: any): boolean;\n    query(element: any, selector: string, multi: boolean): any[];\n    computeStyle(element: any, prop: string, defaultValue?: string): string;\n    buildKeyframeElement(element: any, name: string, keyframes: {\n        [key: string]: any;\n    }[]): any;\n    animate(element: any, keyframes: ɵStyleData[], duration: number, delay: number, easing: string, previousPlayers?: AnimationPlayer[], scrubberAccessRequested?: boolean): AnimationPlayer;\n    private _notifyFaultyScrubber;\n}\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/render/css_keyframes/css_keyframes_player.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationPlayer } from '@angular/animations';\nexport declare const enum AnimatorControlState {\n    INITIALIZED = 1,\n    STARTED = 2,\n    FINISHED = 3,\n    DESTROYED = 4\n}\nexport declare class CssKeyframesPlayer implements AnimationPlayer {\n    readonly element: any;\n    readonly keyframes: {\n        [key: string]: string | number;\n    }[];\n    readonly animationName: string;\n    private readonly _duration;\n    private readonly _delay;\n    private readonly _finalStyles;\n    private _onDoneFns;\n    private _onStartFns;\n    private _onDestroyFns;\n    private _started;\n    private _styler;\n    parentPlayer: AnimationPlayer;\n    readonly totalTime: number;\n    readonly easing: string;\n    currentSnapshot: {\n        [key: string]: string;\n    };\n    private _state;\n    constructor(element: any, keyframes: {\n        [key: string]: string | number;\n    }[], animationName: string, _duration: number, _delay: number, easing: string, _finalStyles: {\n        [key: string]: any;\n    });\n    onStart(fn: () => void): void;\n    onDone(fn: () => void): void;\n    onDestroy(fn: () => void): void;\n    destroy(): void;\n    private _flushDoneFns;\n    private _flushStartFns;\n    finish(): void;\n    setPosition(value: number): void;\n    getPosition(): number;\n    hasStarted(): boolean;\n    init(): void;\n    play(): void;\n    pause(): void;\n    restart(): void;\n    reset(): void;\n    private _buildStyler;\n    beforeDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/dsl/element_instruction_map.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTimelineInstruction } from './animation_timeline_instruction';\nexport declare class ElementInstructionMap {\n    private _map;\n    consume(element: any): AnimationTimelineInstruction[];\n    append(element: any, instructions: AnimationTimelineInstruction[]): void;\n    has(element: any): boolean;\n    clear(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/dsl/animation_timeline_instruction.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ɵStyleData } from '@angular/animations';\nimport { AnimationEngineInstruction } from '../render/animation_engine_instruction';\nexport interface AnimationTimelineInstruction extends AnimationEngineInstruction {\n    element: any;\n    keyframes: ɵStyleData[];\n    preStyleProps: string[];\n    postStyleProps: string[];\n    duration: number;\n    delay: number;\n    totalTime: number;\n    easing: string | null;\n    stretchStartingKeyframe?: boolean;\n    subTimeline: boolean;\n}\nexport declare function createTimelineInstruction(element: any, keyframes: ɵStyleData[], preStyleProps: string[], postStyleProps: string[], duration: number, delay: number, easing?: string | null, subTimeline?: boolean): AnimationTimelineInstruction;\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/render/web_animations/dom_animation.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * DOMAnimation represents the Animation Web API.\n *\n * It is an external API by the browser, and must thus use \"declare interface\",\n * to prevent renaming by Closure Compiler.\n *\n * @see https://developer.mozilla.org/de/docs/Web/API/Animation\n */\nexport declare interface DOMAnimation {\n    cancel(): void;\n    play(): void;\n    pause(): void;\n    finish(): void;\n    onfinish: Function;\n    position: number;\n    currentTime: number;\n    addEventListener(eventName: string, handler: (event: any) => any): any;\n    dispatchEvent(eventName: string): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/dsl/animation_dsl_visitor.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationAnimateChildMetadata, AnimationAnimateMetadata, AnimationAnimateRefMetadata, AnimationGroupMetadata, AnimationKeyframesSequenceMetadata, AnimationQueryMetadata, AnimationReferenceMetadata, AnimationSequenceMetadata, AnimationStaggerMetadata, AnimationStateMetadata, AnimationStyleMetadata, AnimationTransitionMetadata, AnimationTriggerMetadata } from '@angular/animations';\nexport interface AnimationDslVisitor {\n    visitTrigger(node: AnimationTriggerMetadata, context: any): any;\n    visitState(node: AnimationStateMetadata, context: any): any;\n    visitTransition(node: AnimationTransitionMetadata, context: any): any;\n    visitSequence(node: AnimationSequenceMetadata, context: any): any;\n    visitGroup(node: AnimationGroupMetadata, context: any): any;\n    visitAnimate(node: AnimationAnimateMetadata, context: any): any;\n    visitStyle(node: AnimationStyleMetadata, context: any): any;\n    visitKeyframes(node: AnimationKeyframesSequenceMetadata, context: any): any;\n    visitReference(node: AnimationReferenceMetadata, context: any): any;\n    visitAnimateChild(node: AnimationAnimateChildMetadata, context: any): any;\n    visitAnimateRef(node: AnimationAnimateRefMetadata, context: any): any;\n    visitQuery(node: AnimationQueryMetadata, context: any): any;\n    visitStagger(node: AnimationStaggerMetadata, context: any): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/dsl/animation_ast.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimateTimings, AnimationMetadataType, AnimationOptions, ɵStyleData } from '@angular/animations';\nexport interface AstVisitor {\n    visitTrigger(ast: TriggerAst, context: any): any;\n    visitState(ast: StateAst, context: any): any;\n    visitTransition(ast: TransitionAst, context: any): any;\n    visitSequence(ast: SequenceAst, context: any): any;\n    visitGroup(ast: GroupAst, context: any): any;\n    visitAnimate(ast: AnimateAst, context: any): any;\n    visitStyle(ast: StyleAst, context: any): any;\n    visitKeyframes(ast: KeyframesAst, context: any): any;\n    visitReference(ast: ReferenceAst, context: any): any;\n    visitAnimateChild(ast: AnimateChildAst, context: any): any;\n    visitAnimateRef(ast: AnimateRefAst, context: any): any;\n    visitQuery(ast: QueryAst, context: any): any;\n    visitStagger(ast: StaggerAst, context: any): any;\n}\nexport interface Ast<T extends AnimationMetadataType> {\n    type: T;\n    options: AnimationOptions | null;\n}\nexport interface TriggerAst extends Ast<AnimationMetadataType.Trigger> {\n    type: AnimationMetadataType.Trigger;\n    name: string;\n    states: StateAst[];\n    transitions: TransitionAst[];\n    queryCount: number;\n    depCount: number;\n}\nexport interface StateAst extends Ast<AnimationMetadataType.State> {\n    type: AnimationMetadataType.State;\n    name: string;\n    style: StyleAst;\n}\nexport interface TransitionAst extends Ast<AnimationMetadataType.Transition> {\n    matchers: ((fromState: string, toState: string, element: any, params: {\n        [key: string]: any;\n    }) => boolean)[];\n    animation: Ast<AnimationMetadataType>;\n    queryCount: number;\n    depCount: number;\n}\nexport interface SequenceAst extends Ast<AnimationMetadataType.Sequence> {\n    steps: Ast<AnimationMetadataType>[];\n}\nexport interface GroupAst extends Ast<AnimationMetadataType.Group> {\n    steps: Ast<AnimationMetadataType>[];\n}\nexport interface AnimateAst extends Ast<AnimationMetadataType.Animate> {\n    timings: TimingAst;\n    style: StyleAst | KeyframesAst;\n}\nexport interface StyleAst extends Ast<AnimationMetadataType.Style> {\n    styles: (ɵStyleData | string)[];\n    easing: string | null;\n    offset: number | null;\n    containsDynamicStyles: boolean;\n    isEmptyStep?: boolean;\n}\nexport interface KeyframesAst extends Ast<AnimationMetadataType.Keyframes> {\n    styles: StyleAst[];\n}\nexport interface ReferenceAst extends Ast<AnimationMetadataType.Reference> {\n    animation: Ast<AnimationMetadataType>;\n}\nexport interface AnimateChildAst extends Ast<AnimationMetadataType.AnimateChild> {\n}\nexport interface AnimateRefAst extends Ast<AnimationMetadataType.AnimateRef> {\n    animation: ReferenceAst;\n}\nexport interface QueryAst extends Ast<AnimationMetadataType.Query> {\n    selector: string;\n    limit: number;\n    optional: boolean;\n    includeSelf: boolean;\n    animation: Ast<AnimationMetadataType>;\n    originalSelector: string;\n}\nexport interface StaggerAst extends Ast<AnimationMetadataType.Stagger> {\n    timings: AnimateTimings;\n    animation: Ast<AnimationMetadataType>;\n}\nexport interface TimingAst {\n    duration: number;\n    delay: number;\n    easing: string | null;\n    dynamic?: boolean;\n}\nexport interface DynamicTimingAst extends TimingAst {\n    strValue: string;\n    dynamic: true;\n}\n"
  },
  {
    "path": "node_modules/@angular/animations/browser/src/render/animation_engine_instruction.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare const enum AnimationTransitionInstructionType {\n    TransitionAnimation = 0,\n    TimelineAnimation = 1\n}\nexport interface AnimationEngineInstruction {\n    type: AnimationTransitionInstructionType;\n}\n"
  }
]