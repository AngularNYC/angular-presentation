[
  {
    "path": "node_modules/@angular/core/@angular/core.d.ts",
    "content": "// Generated by dts-bundle v0.7.3\n// Dependencies for this module:\n//   ../../../rxjs\n\ndeclare module '@angular/core' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    export * from '@angular/core/public_api';\n}\n\ndeclare module '@angular/core/public_api' {\n    /**\n        * @module\n        * @description\n        * Entry point for all public APIs of this package.\n        */\n    export * from '@angular/core/src/core';\n}\n\ndeclare module '@angular/core/src/core' {\n    /**\n        * @module\n        * @description\n        * Entry point from which you should import all public core APIs.\n        */\n    export * from '@angular/core/src/metadata';\n    export * from '@angular/core/src/version';\n    export { TypeDecorator } from '@angular/core/src/util/decorators';\n    export * from '@angular/core/src/di';\n    export { createPlatform, assertPlatform, destroyPlatform, getPlatform, PlatformRef, ApplicationRef, createPlatformFactory, NgProbeToken } from '@angular/core/src/application_ref';\n    export { enableProdMode, isDevMode } from '@angular/core/src/is_dev_mode';\n    export { APP_ID, PACKAGE_ROOT_URL, PLATFORM_INITIALIZER, PLATFORM_ID, APP_BOOTSTRAP_LISTENER } from '@angular/core/src/application_tokens';\n    export { APP_INITIALIZER, ApplicationInitStatus } from '@angular/core/src/application_init';\n    export * from '@angular/core/src/zone';\n    export * from '@angular/core/src/render';\n    export * from '@angular/core/src/linker';\n    export { DebugElement, DebugNode, asNativeElements, getDebugNode, Predicate } from '@angular/core/src/debug/debug_node';\n    export { GetTestability, Testability, TestabilityRegistry, setTestabilityGetter } from '@angular/core/src/testability/testability';\n    export * from '@angular/core/src/change_detection';\n    export * from '@angular/core/src/platform_core_providers';\n    export { TRANSLATIONS, TRANSLATIONS_FORMAT, LOCALE_ID, MissingTranslationStrategy } from '@angular/core/src/i18n/tokens';\n    export { ApplicationModule } from '@angular/core/src/application_module';\n    export { wtfCreateScope, wtfLeave, wtfStartTimeRange, wtfEndTimeRange, WtfScopeFn } from '@angular/core/src/profile/profile';\n    export { Type } from '@angular/core/src/type';\n    export { EventEmitter } from '@angular/core/src/event_emitter';\n    export { ErrorHandler } from '@angular/core/src/error_handler';\n    export * from '@angular/core/src/core_private_export';\n    export * from '@angular/core/src/core_render3_private_export';\n    export { Sanitizer, SecurityContext } from '@angular/core/src/sanitization/security';\n    export * from '@angular/core/src/codegen_private_exports';\n}\n\ndeclare module '@angular/core/src/metadata' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    export { ANALYZE_FOR_ENTRY_COMPONENTS, Attribute, ContentChild, ContentChildDecorator, ContentChildren, ContentChildrenDecorator, Query, ViewChild, ViewChildDecorator, ViewChildren, ViewChildrenDecorator } from '@angular/core/src/metadata/di';\n    export { Component, ComponentDecorator, Directive, DirectiveDecorator, HostBinding, HostListener, Input, Output, Pipe } from '@angular/core/src/metadata/directives';\n    export { AfterContentChecked, AfterContentInit, AfterViewChecked, AfterViewInit, DoCheck, OnChanges, OnDestroy, OnInit } from '@angular/core/src/metadata/lifecycle_hooks';\n    export { CUSTOM_ELEMENTS_SCHEMA, DoBootstrap, ModuleWithProviders, NO_ERRORS_SCHEMA, NgModule, SchemaMetadata } from '@angular/core/src/metadata/ng_module';\n    export { ViewEncapsulation } from '@angular/core/src/metadata/view';\n}\n\ndeclare module '@angular/core/src/version' {\n    /**\n        * @description Represents the version of Angular\n        *\n        * @publicApi\n        */\n    export class Version {\n            full: string;\n            readonly major: string;\n            readonly minor: string;\n            readonly patch: string;\n            constructor(full: string);\n    }\n    /**\n        * @publicApi\n        */\n    export const VERSION: Version;\n}\n\ndeclare module '@angular/core/src/util/decorators' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Type } from '@angular/core/src/type';\n    /**\n        * An interface implemented by all Angular type decorators, which allows them to be used as ES7\n        * decorators as well as\n        * Angular DSL syntax.\n        *\n        * ES7 syntax:\n        *\n        * ```\n        * @ng.Component({...})\n        * class MyClass {...}\n        * ```\n        *\n        * @publicApi\n        */\n    export interface TypeDecorator {\n            /**\n                * Invoke as ES7 decorator.\n                */\n            <T extends Type<any>>(type: T): T;\n            (target: Object, propertyKey?: string | symbol, parameterIndex?: number): void;\n    }\n    export const ANNOTATIONS = \"__annotations__\";\n    export const PARAMETERS = \"__parameters__\";\n    export const PROP_METADATA = \"__prop__metadata__\";\n    /**\n        * @suppress {globalThis}\n        */\n    export function makeDecorator<T>(name: string, props?: (...args: any[]) => any, parentClass?: any, additionalProcessing?: (type: Type<T>) => void, typeFn?: (type: Type<T>, ...args: any[]) => void): {\n            new (...args: any[]): any;\n            (...args: any[]): any;\n            (...args: any[]): (cls: any) => any;\n    };\n    export function makeParamDecorator(name: string, props?: (...args: any[]) => any, parentClass?: any): any;\n    export function makePropDecorator(name: string, props?: (...args: any[]) => any, parentClass?: any, additionalProcessing?: (target: any, name: string, ...args: any[]) => void): any;\n}\n\ndeclare module '@angular/core/src/di' {\n    /**\n        * @module\n        * @description\n        * The `di` module provides dependency injection container services.\n        */\n    export * from '@angular/core/src/di/metadata';\n    export { InjectableType, InjectorType, defineInjectable, defineInjector } from '@angular/core/src/di/defs';\n    export { forwardRef, resolveForwardRef, ForwardRefFn } from '@angular/core/src/di/forward_ref';\n    export { Injectable, InjectableDecorator, InjectableProvider } from '@angular/core/src/di/injectable';\n    export { INJECTOR, Injector } from '@angular/core/src/di/injector';\n    export { inject, InjectFlags } from '@angular/core/src/di/injector_compatibility';\n    export { ReflectiveInjector } from '@angular/core/src/di/reflective_injector';\n    export { StaticProvider, ValueProvider, ConstructorSansProvider, ExistingProvider, FactoryProvider, Provider, TypeProvider, ClassProvider } from '@angular/core/src/di/provider';\n    export { createInjector } from '@angular/core/src/di/r3_injector';\n    export { ResolvedReflectiveFactory, ResolvedReflectiveProvider } from '@angular/core/src/di/reflective_provider';\n    export { ReflectiveKey } from '@angular/core/src/di/reflective_key';\n    export { InjectionToken } from '@angular/core/src/di/injection_token';\n}\n\ndeclare module '@angular/core/src/application_ref' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Observable } from 'rxjs';\n    import { InjectionToken, Injector, StaticProvider } from '@angular/core/src/di';\n    import { CompilerOptions } from '@angular/core/src/linker/compiler';\n    import { ComponentFactory, ComponentRef } from '@angular/core/src/linker/component_factory';\n    import { NgModuleFactory, NgModuleRef } from '@angular/core/src/linker/ng_module_factory';\n    import { ViewRef } from '@angular/core/src/linker/view_ref';\n    import { Type } from '@angular/core/src/type';\n    import { NgZone } from '@angular/core/src/zone/ng_zone';\n    export function compileNgModuleFactory__POST_R3__<M>(injector: Injector, options: CompilerOptions, moduleType: Type<M>): Promise<NgModuleFactory<M>>;\n    export const ALLOW_MULTIPLE_PLATFORMS: InjectionToken<boolean>;\n    /**\n        * A token for third-party components that can register themselves with NgProbe.\n        *\n        * @publicApi\n        */\n    export class NgProbeToken {\n            name: string;\n            token: any;\n            constructor(name: string, token: any);\n    }\n    /**\n        * Creates a platform.\n        * Platforms have to be eagerly created via this function.\n        *\n        * @publicApi\n        */\n    export function createPlatform(injector: Injector): PlatformRef;\n    /**\n        * Creates a factory for a platform\n        *\n        * @publicApi\n        */\n    export function createPlatformFactory(parentPlatformFactory: ((extraProviders?: StaticProvider[]) => PlatformRef) | null, name: string, providers?: StaticProvider[]): (extraProviders?: StaticProvider[]) => PlatformRef;\n    /**\n        * Checks that there currently is a platform which contains the given token as a provider.\n        *\n        * @publicApi\n        */\n    export function assertPlatform(requiredToken: any): PlatformRef;\n    /**\n        * Destroy the existing platform.\n        *\n        * @publicApi\n        */\n    export function destroyPlatform(): void;\n    /**\n        * Returns the current platform.\n        *\n        * @publicApi\n        */\n    export function getPlatform(): PlatformRef | null;\n    /**\n        * Provides additional options to the bootstraping process.\n        *\n        *\n        */\n    export interface BootstrapOptions {\n            /**\n                * Optionally specify which `NgZone` should be used.\n                *\n                * - Provide your own `NgZone` instance.\n                * - `zone.js` - Use default `NgZone` which requires `Zone.js`.\n                * - `noop` - Use `NoopNgZone` which does nothing.\n                */\n            ngZone?: NgZone | 'zone.js' | 'noop';\n    }\n    /**\n        * The Angular platform is the entry point for Angular on a web page. Each page\n        * has exactly one platform, and services (such as reflection) which are common\n        * to every Angular application running on the page are bound in its scope.\n        *\n        * A page's platform is initialized implicitly when a platform is created via a platform factory\n        * (e.g. {@link platformBrowser}), or explicitly by calling the {@link createPlatform} function.\n        *\n        * @publicApi\n        */\n    export class PlatformRef {\n            /**\n                * Creates an instance of an `@NgModule` for the given platform\n                * for offline compilation.\n                *\n                * @usageNotes\n                * ### Simple Example\n                *\n                * ```typescript\n                * my_module.ts:\n                *\n                * @NgModule({\n                *   imports: [BrowserModule]\n                * })\n                * class MyModule {}\n                *\n                * main.ts:\n                * import {MyModuleNgFactory} from './my_module.ngfactory';\n                * import {platformBrowser} from '@angular/platform-browser';\n                *\n                * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n                * ```\n                */\n            bootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>, options?: BootstrapOptions): Promise<NgModuleRef<M>>;\n            /**\n                * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n                *\n                * @usageNotes\n                * ### Simple Example\n                *\n                * ```typescript\n                * @NgModule({\n                *   imports: [BrowserModule]\n                * })\n                * class MyModule {}\n                *\n                * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n                * ```\n                *\n                */\n            bootstrapModule<M>(moduleType: Type<M>, compilerOptions?: (CompilerOptions & BootstrapOptions) | Array<CompilerOptions & BootstrapOptions>): Promise<NgModuleRef<M>>;\n            /**\n                * Register a listener to be called when the platform is disposed.\n                */\n            onDestroy(callback: () => void): void;\n            /**\n                * Retrieve the platform {@link Injector}, which is the parent injector for\n                * every Angular application on the page and provides singleton providers.\n                */\n            readonly injector: Injector;\n            /**\n                * Destroy the Angular platform and all Angular applications on the page.\n                */\n            destroy(): void;\n            readonly destroyed: boolean;\n    }\n    /**\n        * A reference to an Angular application running on a page.\n        *\n        * @publicApi\n        */\n    export class ApplicationRef {\n            /**\n                * Get a list of component types registered to this application.\n                * This list is populated even before the component is created.\n                */\n            readonly componentTypes: Type<any>[];\n            /**\n                * Get a list of components registered to this application.\n                */\n            readonly components: ComponentRef<any>[];\n            /**\n                * Returns an Observable that indicates when the application is stable or unstable.\n                */\n            readonly isStable: Observable<boolean>;\n            /**\n                * Bootstrap a new component at the root level of the application.\n                *\n                * @usageNotes\n                * ### Bootstrap process\n                *\n                * When bootstrapping a new root component into an application, Angular mounts the\n                * specified application component onto DOM elements identified by the componentType's\n                * selector and kicks off automatic change detection to finish initializing the component.\n                *\n                * Optionally, a component can be mounted onto a DOM element that does not match the\n                * componentType's selector.\n                *\n                * ### Example\n                * {@example core/ts/platform/platform.ts region='longform'}\n                */\n            bootstrap<C>(componentOrFactory: ComponentFactory<C> | Type<C>, rootSelectorOrNode?: string | any): ComponentRef<C>;\n            /**\n                * Invoke this method to explicitly process change detection and its side-effects.\n                *\n                * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n                * further changes are detected. If additional changes are picked up during this second cycle,\n                * bindings in the app have side-effects that cannot be resolved in a single change detection\n                * pass.\n                * In this case, Angular throws an error, since an Angular application can only have one change\n                * detection pass during which all change detection must complete.\n                */\n            tick(): void;\n            /**\n                * Attaches a view so that it will be dirty checked.\n                * The view will be automatically detached when it is destroyed.\n                * This will throw if the view is already attached to a ViewContainer.\n                */\n            attachView(viewRef: ViewRef): void;\n            /**\n                * Detaches a view from dirty checking again.\n                */\n            detachView(viewRef: ViewRef): void;\n            /**\n                * Returns the number of attached views.\n                */\n            readonly viewCount: number;\n    }\n}\n\ndeclare module '@angular/core/src/is_dev_mode' {\n    /**\n        * Returns whether Angular is in development mode. After called once,\n        * the value is locked and won't change any more.\n        *\n        * By default, this is true, unless a user calls `enableProdMode` before calling this.\n        *\n        * @publicApi\n        */\n    export function isDevMode(): boolean;\n    /**\n        * Disable Angular's development mode, which turns off assertions and other\n        * checks within the framework.\n        *\n        * One important assertion this disables verifies that a change detection pass\n        * does not result in additional changes to any bindings (also known as\n        * unidirectional data flow).\n        *\n        * @publicApi\n        */\n    export function enableProdMode(): void;\n}\n\ndeclare module '@angular/core/src/application_tokens' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { InjectionToken } from '@angular/core/src/di';\n    import { ComponentRef } from '@angular/core/src/linker/component_factory';\n    /**\n        * A DI Token representing a unique string id assigned to the application by Angular and used\n        * primarily for prefixing application attributes and CSS styles when\n        * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n        *\n        * If you need to avoid randomly generated value to be used as an application id, you can provide\n        * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n        * using this token.\n        * @publicApi\n        */\n    export const APP_ID: InjectionToken<string>;\n    export function _appIdRandomProviderFactory(): string;\n    /**\n        * Providers that will generate a random APP_ID_TOKEN.\n        * @publicApi\n        */\n    export const APP_ID_RANDOM_PROVIDER: {\n            provide: InjectionToken<string>;\n            useFactory: typeof _appIdRandomProviderFactory;\n            deps: any[];\n    };\n    /**\n        * A function that will be executed when a platform is initialized.\n        * @publicApi\n        */\n    export const PLATFORM_INITIALIZER: InjectionToken<(() => void)[]>;\n    /**\n        * A token that indicates an opaque platform id.\n        * @publicApi\n        */\n    export const PLATFORM_ID: InjectionToken<Object>;\n    /**\n        * All callbacks provided via this token will be called for every component that is bootstrapped.\n        * Signature of the callback:\n        *\n        * `(componentRef: ComponentRef) => void`.\n        *\n        * @publicApi\n        */\n    export const APP_BOOTSTRAP_LISTENER: InjectionToken<((compRef: ComponentRef<any>) => void)[]>;\n    /**\n        * A token which indicates the root directory of the application\n        * @publicApi\n        */\n    export const PACKAGE_ROOT_URL: InjectionToken<string>;\n}\n\ndeclare module '@angular/core/src/application_init' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { InjectionToken } from '@angular/core/src/di';\n    /**\n        * A function that will be executed when an application is initialized.\n        *\n        * @publicApi\n        */\n    export const APP_INITIALIZER: InjectionToken<(() => void)[]>;\n    /**\n        * A class that reflects the state of running {@link APP_INITIALIZER}s.\n        *\n        * @publicApi\n        */\n    export class ApplicationInitStatus {\n            readonly donePromise: Promise<any>;\n            readonly done = false;\n            constructor(appInits: (() => any)[]);\n    }\n}\n\ndeclare module '@angular/core/src/zone' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    export { NgZone, NoopNgZone as ɵNoopNgZone } from '@angular/core/src/zone/ng_zone';\n}\n\ndeclare module '@angular/core/src/render' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    export { RenderComponentType, Renderer, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, RootRenderer } from '@angular/core/src/render/api';\n}\n\ndeclare module '@angular/core/src/linker' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    export { COMPILER_OPTIONS, Compiler, CompilerFactory, CompilerOptions, ModuleWithComponentFactories } from '@angular/core/src/linker/compiler';\n    export { ComponentFactory, ComponentRef } from '@angular/core/src/linker/component_factory';\n    export { ComponentFactoryResolver } from '@angular/core/src/linker/component_factory_resolver';\n    export { ElementRef } from '@angular/core/src/linker/element_ref';\n    export { NgModuleFactory, NgModuleRef } from '@angular/core/src/linker/ng_module_factory';\n    export { NgModuleFactoryLoader, getModuleFactory } from '@angular/core/src/linker/ng_module_factory_loader';\n    export { QueryList } from '@angular/core/src/linker/query_list';\n    export { SystemJsNgModuleLoader, SystemJsNgModuleLoaderConfig } from '@angular/core/src/linker/system_js_ng_module_factory_loader';\n    export { TemplateRef } from '@angular/core/src/linker/template_ref';\n    export { ViewContainerRef } from '@angular/core/src/linker/view_container_ref';\n    export { EmbeddedViewRef, ViewRef } from '@angular/core/src/linker/view_ref';\n}\n\ndeclare module '@angular/core/src/debug/debug_node' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Injector } from '@angular/core/src/di';\n    import { DebugContext } from '@angular/core/src/view/index';\n    export class EventListener {\n            name: string;\n            callback: Function;\n            constructor(name: string, callback: Function);\n    }\n    /**\n        * @publicApi\n        */\n    export class DebugNode {\n            nativeNode: any;\n            listeners: EventListener[];\n            parent: DebugElement | null;\n            constructor(nativeNode: any, parent: DebugNode | null, _debugContext: DebugContext);\n            readonly injector: Injector;\n            readonly componentInstance: any;\n            readonly context: any;\n            readonly references: {\n                    [key: string]: any;\n            };\n            readonly providerTokens: any[];\n    }\n    /**\n        * @publicApi\n        */\n    export class DebugElement extends DebugNode {\n            name: string;\n            properties: {\n                    [key: string]: any;\n            };\n            attributes: {\n                    [key: string]: string | null;\n            };\n            classes: {\n                    [key: string]: boolean;\n            };\n            styles: {\n                    [key: string]: string | null;\n            };\n            childNodes: DebugNode[];\n            nativeElement: any;\n            constructor(nativeNode: any, parent: any, _debugContext: DebugContext);\n            addChild(child: DebugNode): void;\n            removeChild(child: DebugNode): void;\n            insertChildrenAfter(child: DebugNode, newChildren: DebugNode[]): void;\n            insertBefore(refChild: DebugNode, newChild: DebugNode): void;\n            query(predicate: Predicate<DebugElement>): DebugElement;\n            queryAll(predicate: Predicate<DebugElement>): DebugElement[];\n            queryAllNodes(predicate: Predicate<DebugNode>): DebugNode[];\n            readonly children: DebugElement[];\n            triggerEventHandler(eventName: string, eventObj: any): void;\n    }\n    /**\n        * @publicApi\n        */\n    export function asNativeElements(debugEls: DebugElement[]): any;\n    /**\n        * @publicApi\n        */\n    export function getDebugNode(nativeNode: any): DebugNode | null;\n    export function getAllDebugNodes(): DebugNode[];\n    export function indexDebugNode(node: DebugNode): void;\n    export function removeDebugNodeFromIndex(node: DebugNode): void;\n    /**\n        * A boolean-valued function over a value, possibly including context information\n        * regarding that value's position in an array.\n        *\n        * @publicApi\n        */\n    export interface Predicate<T> {\n            (value: T): boolean;\n    }\n}\n\ndeclare module '@angular/core/src/testability/testability' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { NgZone } from '@angular/core/src/zone/ng_zone';\n    /**\n        * Testability API.\n        * `declare` keyword causes tsickle to generate externs, so these methods are\n        * not renamed by Closure Compiler.\n        * @publicApi\n        */\n    export interface PublicTestability {\n            isStable(): boolean;\n            whenStable(callback: Function, timeout?: number, updateCallback?: Function): void;\n            findProviders(using: any, provider: string, exactMatch: boolean): any[];\n    }\n    export interface PendingMacrotask {\n            source: string;\n            creationLocation: Error;\n            runCount?: number;\n            data: TaskData;\n    }\n    export interface TaskData {\n            target?: XMLHttpRequest;\n            delay?: number;\n            isPeriodic?: boolean;\n    }\n    export type DoneCallback = (didWork: boolean, tasks?: PendingMacrotask[]) => void;\n    export type UpdateCallback = (tasks: PendingMacrotask[]) => boolean;\n    /**\n        * The Testability service provides testing hooks that can be accessed from\n        * the browser and by services such as Protractor. Each bootstrapped Angular\n        * application on the page will have an instance of Testability.\n        * @publicApi\n        */\n    export class Testability implements PublicTestability {\n            constructor(_ngZone: NgZone);\n            /**\n                * Increases the number of pending request\n                * @deprecated pending requests are now tracked with zones.\n                */\n            increasePendingRequestCount(): number;\n            /**\n                * Decreases the number of pending request\n                * @deprecated pending requests are now tracked with zones\n                */\n            decreasePendingRequestCount(): number;\n            /**\n                * Whether an associated application is stable\n                */\n            isStable(): boolean;\n            /**\n                * Wait for the application to be stable with a timeout. If the timeout is reached before that\n                * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n                *\n                * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n                *    whichever comes first.\n                * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n                *    specified, whenStable() will wait forever.\n                * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n                *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n                *    and no further updates will be issued.\n                */\n            whenStable(doneCb: Function, timeout?: number, updateCb?: Function): void;\n            /**\n                * Get the number of pending requests\n                * @deprecated pending requests are now tracked with zones\n                */\n            getPendingRequestCount(): number;\n            /**\n                * Find providers by name\n                * @param using The root element to search from\n                * @param provider The name of binding variable\n                * @param exactMatch Whether using exactMatch\n                */\n            findProviders(using: any, provider: string, exactMatch: boolean): any[];\n    }\n    /**\n        * A global registry of {@link Testability} instances for specific elements.\n        * @publicApi\n        */\n    export class TestabilityRegistry {\n            constructor();\n            /**\n                * Registers an application with a testability hook so that it can be tracked\n                * @param token token of application, root element\n                * @param testability Testability hook\n                */\n            registerApplication(token: any, testability: Testability): void;\n            /**\n                * Unregisters an application.\n                * @param token token of application, root element\n                */\n            unregisterApplication(token: any): void;\n            /**\n                * Unregisters all applications\n                */\n            unregisterAllApplications(): void;\n            /**\n                * Get a testability hook associated with the application\n                * @param elem root element\n                */\n            getTestability(elem: any): Testability | null;\n            /**\n                * Get all registered testabilities\n                */\n            getAllTestabilities(): Testability[];\n            /**\n                * Get all registered applications(root elements)\n                */\n            getAllRootElements(): any[];\n            /**\n                * Find testability of a node in the Tree\n                * @param elem node\n                * @param findInAncestors whether finding testability in ancestors if testability was not found in\n                * current node\n                */\n            findTestabilityInTree(elem: Node, findInAncestors?: boolean): Testability | null;\n    }\n    /**\n        * Adapter interface for retrieving the `Testability` service associated for a\n        * particular context.\n        *\n        * @publicApi\n        */\n    export interface GetTestability {\n            addToWindow(registry: TestabilityRegistry): void;\n            findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean): Testability | null;\n    }\n    /**\n        * Set the {@link GetTestability} implementation used by the Angular testing framework.\n        * @publicApi\n        */\n    export function setTestabilityGetter(getter: GetTestability): void;\n}\n\ndeclare module '@angular/core/src/change_detection' {\n    /**\n        * @module\n        * @description\n        * Change detection enables data binding in Angular.\n        */\n    export { ChangeDetectionStrategy, ChangeDetectorRef, CollectionChangeRecord, DefaultIterableDiffer, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, IterableDiffers, KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory, KeyValueDiffers, NgIterable, PipeTransform, SimpleChange, SimpleChanges, TrackByFunction, WrappedValue } from '@angular/core/src/change_detection/change_detection';\n}\n\ndeclare module '@angular/core/src/platform_core_providers' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { PlatformRef } from '@angular/core/src/application_ref';\n    import { StaticProvider } from '@angular/core/src/di';\n    /**\n        * This platform has to be included in any other platform\n        *\n        * @publicApi\n        */\n    export const platformCore: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;\n}\n\ndeclare module '@angular/core/src/i18n/tokens' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { InjectionToken } from '@angular/core/src/di/injection_token';\n    /**\n        * Provide this token to set the locale of your application.\n        * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n        * DecimalPipe and PercentPipe) and by ICU expressions.\n        *\n        * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * ```typescript\n        * import { LOCALE_ID } from '@angular/core';\n        * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n        * import { AppModule } from './app/app.module';\n        *\n        * platformBrowserDynamic().bootstrapModule(AppModule, {\n        *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n        * });\n        * ```\n        *\n        * @publicApi\n        */\n    export const LOCALE_ID: InjectionToken<string>;\n    /**\n        * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n        * `xlf` or `xlf2`) when you want to translate your application in another language.\n        *\n        * See the [i18n guide](guide/i18n#merge) for more information.\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * ```typescript\n        * import { TRANSLATIONS } from '@angular/core';\n        * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n        * import { AppModule } from './app/app.module';\n        *\n        * // content of your translation file\n        * const translations = '....';\n        *\n        * platformBrowserDynamic().bootstrapModule(AppModule, {\n        *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n        * });\n        * ```\n        *\n        * @publicApi\n        */\n    export const TRANSLATIONS: InjectionToken<string>;\n    /**\n        * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n        * `xlf` or `xlf2`.\n        *\n        * See the [i18n guide](guide/i18n#merge) for more information.\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * ```typescript\n        * import { TRANSLATIONS_FORMAT } from '@angular/core';\n        * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n        * import { AppModule } from './app/app.module';\n        *\n        * platformBrowserDynamic().bootstrapModule(AppModule, {\n        *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n        * });\n        * ```\n        *\n        * @publicApi\n        */\n    export const TRANSLATIONS_FORMAT: InjectionToken<string>;\n    /**\n        * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\n        * that the compiler should use in case of missing translations:\n        * - Error: throw if you have missing translations.\n        * - Warning (default): show a warning in the console and/or shell.\n        * - Ignore: do nothing.\n        *\n        * See the [i18n guide](guide/i18n#missing-translation) for more information.\n        *\n        * @usageNotes\n        * ### Example\n        * ```typescript\n        * import { MissingTranslationStrategy } from '@angular/core';\n        * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n        * import { AppModule } from './app/app.module';\n        *\n        * platformBrowserDynamic().bootstrapModule(AppModule, {\n        *   missingTranslation: MissingTranslationStrategy.Error\n        * });\n        * ```\n        *\n        * @publicApi\n        */\n    export enum MissingTranslationStrategy {\n            Error = 0,\n            Warning = 1,\n            Ignore = 2\n    }\n}\n\ndeclare module '@angular/core/src/application_module' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { ApplicationRef } from '@angular/core/src/application_ref';\n    import { IterableDiffers, KeyValueDiffers } from '@angular/core/src/change_detection/change_detection';\n    import { StaticProvider } from '@angular/core/src/di';\n    export function _iterableDiffersFactory(): IterableDiffers;\n    export function _keyValueDiffersFactory(): KeyValueDiffers;\n    export function _localeFactory(locale?: string): string;\n    /**\n        * A built-in [dependency injection token](guide/glossary#di-token)\n        * that is used to configure the root injector for bootstrapping.\n        */\n    export const APPLICATION_MODULE_PROVIDERS: StaticProvider[];\n    /**\n        * Configures the root injector for an app with\n        * providers of `@angular/core` dependencies that `ApplicationRef` needs\n        * to bootstrap components.\n        *\n        * Re-exported by `BrowserModule`, which is included automatically in the root\n        * `AppModule` when you create a new app with the CLI `new` command.\n        *\n        * @publicApi\n        */\n    export class ApplicationModule {\n            constructor(appRef: ApplicationRef);\n    }\n}\n\ndeclare module '@angular/core/src/profile/profile' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { WtfScopeFn } from '@angular/core/src/profile/wtf_impl';\n    export { WtfScopeFn } from '@angular/core/src/profile/wtf_impl';\n    /**\n        * True if WTF is enabled.\n        */\n    export const wtfEnabled: boolean;\n    /**\n        * Create trace scope.\n        *\n        * Scopes must be strictly nested and are analogous to stack frames, but\n        * do not have to follow the stack frames. Instead it is recommended that they follow logical\n        * nesting. You may want to use\n        * [Event\n        * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n        * as they are defined in WTF.\n        *\n        * Used to mark scope entry. The return value is used to leave the scope.\n        *\n        *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n        *\n        *     someMethod() {\n        *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n        *        // DO SOME WORK HERE\n        *        return wtfLeave(s, 123); // Return value 123\n        *     }\n        *\n        * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n        * negatively impact the performance of your application. For this reason we recommend that\n        * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n        * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n        * exception, will produce incorrect trace, but presence of exception signifies logic error which\n        * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n        * an exception is expected during normal execution while profiling.\n        *\n        * @publicApi\n        */\n    export const wtfCreateScope: (signature: string, flags?: any) => WtfScopeFn;\n    /**\n        * Used to mark end of Scope.\n        *\n        * - `scope` to end.\n        * - `returnValue` (optional) to be passed to the WTF.\n        *\n        * Returns the `returnValue for easy chaining.\n        * @publicApi\n        */\n    export const wtfLeave: <T>(scope: any, returnValue?: T) => T;\n    /**\n        * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n        * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n        * enabled.\n        *\n        *     someMethod() {\n        *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n        *        var future = new Future.delay(5).then((_) {\n        *          wtfEndTimeRange(s);\n        *        });\n        *     }\n        * @publicApi\n        */\n    export const wtfStartTimeRange: (rangeType: string, action: string) => any;\n    /**\n        * Ends a async time range operation.\n        * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n        * enabled.\n        * @publicApi\n        */\n    export const wtfEndTimeRange: (range: any) => void;\n}\n\ndeclare module '@angular/core/src/type' {\n    /**\n        * @description\n        *\n        * Represents a type that a Component or other object is instances of.\n        *\n        * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n        * the `MyCustomComponent` constructor function.\n        *\n        * @publicApi\n        */\n    export const Type: FunctionConstructor;\n    export function isType(v: any): v is Type<any>;\n    export interface Type<T> extends Function {\n            new (...args: any[]): T;\n    }\n    export type Mutable<T extends {\n            [x: string]: any;\n    }, K extends string> = {\n            [P in K]: T[P];\n    };\n}\n\ndeclare module '@angular/core/src/event_emitter' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Subject } from 'rxjs';\n    /**\n        * Use in directives and components to emit custom events synchronously\n        * or asynchronously, and register handlers for those events by subscribing\n        * to an instance.\n        *\n        * @usageNotes\n        *\n        * In the following example, a component defines two output properties\n        * that create event emitters. When the title is clicked, the emitter\n        * emits an open or close event to toggle the current visibility state.\n        *\n        * ```\n        * @Component({\n        *   selector: 'zippy',\n        *   template: `\n        *   <div class=\"zippy\">\n        *     <div (click)=\"toggle()\">Toggle</div>\n        *     <div [hidden]=\"!visible\">\n        *       <ng-content></ng-content>\n        *     </div>\n        *  </div>`})\n        * export class Zippy {\n        *   visible: boolean = true;\n        *   @Output() open: EventEmitter<any> = new EventEmitter();\n        *   @Output() close: EventEmitter<any> = new EventEmitter();\n        *\n        *   toggle() {\n        *     this.visible = !this.visible;\n        *     if (this.visible) {\n        *       this.open.emit(null);\n        *     } else {\n        *       this.close.emit(null);\n        *     }\n        *   }\n        * }\n        * ```\n        *\n        * Access the event object with the `$event` argument passed to the output event\n        * handler:\n        *\n        * ```\n        * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n        * ```\n        *\n        * ### Notes\n        *\n        * Uses Rx.Observable but provides an adapter to make it work as specified here:\n        * https://github.com/jhusain/observable-spec\n        *\n        * Once a reference implementation of the spec is available, switch to it.\n        *\n        * @publicApi\n        */\n    export class EventEmitter<T> extends Subject<T> {\n            /**\n                * Internal\n                */\n            __isAsync: boolean;\n            /**\n                * Creates an instance of this class that can\n                * deliver events synchronously or asynchronously.\n                *\n                * @param isAsync When true, deliver events asynchronously.\n                *\n                */\n            constructor(isAsync?: boolean);\n            /**\n                * Emits an event containing a given value.\n                * @param value The value to emit.\n                */\n            emit(value?: T): void;\n            /**\n                * Registers handlers for events emitted by this instance.\n                * @param generatorOrNext When supplied, a custom handler for emitted events.\n                * @param error When supplied, a custom handler for an error notification\n                * from this emitter.\n                * @param complete When supplied, a custom handler for a completion\n                * notification from this emitter.\n                */\n            subscribe(generatorOrNext?: any, error?: any, complete?: any): any;\n    }\n}\n\ndeclare module '@angular/core/src/error_handler' {\n    /**\n        * Provides a hook for centralized exception handling.\n        *\n        * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n        * intercept error handling, write a custom exception handler that replaces this default as\n        * appropriate for your app.\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * ```\n        * class MyErrorHandler implements ErrorHandler {\n        *   handleError(error) {\n        *     // do something with the exception\n        *   }\n        * }\n        *\n        * @NgModule({\n        *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n        * })\n        * class MyModule {}\n        * ```\n        *\n        * @publicApi\n        */\n    export class ErrorHandler {\n            handleError(error: any): void;\n    }\n    export function wrappedError(message: string, originalError: any): Error;\n}\n\ndeclare module '@angular/core/src/core_private_export' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    export { ALLOW_MULTIPLE_PLATFORMS as ɵALLOW_MULTIPLE_PLATFORMS } from '@angular/core/src/application_ref';\n    export { APP_ID_RANDOM_PROVIDER as ɵAPP_ID_RANDOM_PROVIDER } from '@angular/core/src/application_tokens';\n    export { defaultIterableDiffers as ɵdefaultIterableDiffers, defaultKeyValueDiffers as ɵdefaultKeyValueDiffers } from '@angular/core/src/change_detection/change_detection';\n    export { devModeEqual as ɵdevModeEqual } from '@angular/core/src/change_detection/change_detection_util';\n    export { isListLikeIterable as ɵisListLikeIterable } from '@angular/core/src/change_detection/change_detection_util';\n    export { ChangeDetectorStatus as ɵChangeDetectorStatus, isDefaultChangeDetectionStrategy as ɵisDefaultChangeDetectionStrategy } from '@angular/core/src/change_detection/constants';\n    export { Console as ɵConsole } from '@angular/core/src/console';\n    export { InjectableDef as ɵInjectableDef, InjectorDef as ɵInjectorDef, getInjectableDef as ɵgetInjectableDef } from '@angular/core/src/di/defs';\n    export { inject as ɵinject, setCurrentInjector as ɵsetCurrentInjector } from '@angular/core/src/di/injector_compatibility';\n    export { APP_ROOT as ɵAPP_ROOT } from '@angular/core/src/di/scope';\n    export { ivyEnabled as ɵivyEnabled } from '@angular/core/src/ivy_switch';\n    export { ComponentFactory as ɵComponentFactory } from '@angular/core/src/linker/component_factory';\n    export { CodegenComponentFactoryResolver as ɵCodegenComponentFactoryResolver } from '@angular/core/src/linker/component_factory_resolver';\n    export { resolveComponentResources as ɵresolveComponentResources } from '@angular/core/src/metadata/resource_loading';\n    export { ReflectionCapabilities as ɵReflectionCapabilities } from '@angular/core/src/reflection/reflection_capabilities';\n    export { GetterFn as ɵGetterFn, MethodFn as ɵMethodFn, SetterFn as ɵSetterFn } from '@angular/core/src/reflection/types';\n    export { DirectRenderer as ɵDirectRenderer, RenderDebugInfo as ɵRenderDebugInfo } from '@angular/core/src/render/api';\n    export { _sanitizeHtml as ɵ_sanitizeHtml } from '@angular/core/src/sanitization/html_sanitizer';\n    export { _sanitizeStyle as ɵ_sanitizeStyle } from '@angular/core/src/sanitization/style_sanitizer';\n    export { _sanitizeUrl as ɵ_sanitizeUrl } from '@angular/core/src/sanitization/url_sanitizer';\n    export { global as ɵglobal, looseIdentical as ɵlooseIdentical, stringify as ɵstringify } from '@angular/core/src/util';\n    export { makeDecorator as ɵmakeDecorator } from '@angular/core/src/util/decorators';\n    export { isObservable as ɵisObservable, isPromise as ɵisPromise } from '@angular/core/src/util/lang';\n    export { clearOverrides as ɵclearOverrides, initServicesIfNeeded as ɵinitServicesIfNeeded, overrideComponentView as ɵoverrideComponentView, overrideProvider as ɵoverrideProvider } from '@angular/core/src/view/index';\n    export { NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR } from '@angular/core/src/view/provider';\n}\n\ndeclare module '@angular/core/src/core_render3_private_export' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    export { defineBase as ɵdefineBase, defineComponent as ɵdefineComponent, defineDirective as ɵdefineDirective, definePipe as ɵdefinePipe, defineNgModule as ɵdefineNgModule, detectChanges as ɵdetectChanges, renderComponent as ɵrenderComponent, ComponentType as ɵComponentType, ComponentFactory as ɵRender3ComponentFactory, ComponentRef as ɵRender3ComponentRef, DirectiveType as ɵDirectiveType, RenderFlags as ɵRenderFlags, directiveInject as ɵdirectiveInject, injectAttribute as ɵinjectAttribute, getFactoryOf as ɵgetFactoryOf, getInheritedFactory as ɵgetInheritedFactory, templateRefExtractor as ɵtemplateRefExtractor, ProvidersFeature as ɵProvidersFeature, InheritDefinitionFeature as ɵInheritDefinitionFeature, NgOnChangesFeature as ɵNgOnChangesFeature, LifecycleHooksFeature as ɵLifecycleHooksFeature, NgModuleType as ɵNgModuleType, NgModuleRef as ɵRender3NgModuleRef, CssSelectorList as ɵCssSelectorList, markDirty as ɵmarkDirty, NgModuleFactory as ɵNgModuleFactory, NO_CHANGE as ɵNO_CHANGE, container as ɵcontainer, nextContext as ɵnextContext, elementStart as ɵelementStart, namespaceHTML as ɵnamespaceHTML, namespaceMathML as ɵnamespaceMathML, namespaceSVG as ɵnamespaceSVG, element as ɵelement, listener as ɵlistener, text as ɵtext, embeddedViewStart as ɵembeddedViewStart, query as ɵquery, registerContentQuery as ɵregisterContentQuery, projection as ɵprojection, bind as ɵbind, interpolation1 as ɵinterpolation1, interpolation2 as ɵinterpolation2, interpolation3 as ɵinterpolation3, interpolation4 as ɵinterpolation4, interpolation5 as ɵinterpolation5, interpolation6 as ɵinterpolation6, interpolation7 as ɵinterpolation7, interpolation8 as ɵinterpolation8, interpolationV as ɵinterpolationV, pipeBind1 as ɵpipeBind1, pipeBind2 as ɵpipeBind2, pipeBind3 as ɵpipeBind3, pipeBind4 as ɵpipeBind4, pipeBindV as ɵpipeBindV, pureFunction0 as ɵpureFunction0, pureFunction1 as ɵpureFunction1, pureFunction2 as ɵpureFunction2, pureFunction3 as ɵpureFunction3, pureFunction4 as ɵpureFunction4, pureFunction5 as ɵpureFunction5, pureFunction6 as ɵpureFunction6, pureFunction7 as ɵpureFunction7, pureFunction8 as ɵpureFunction8, pureFunctionV as ɵpureFunctionV, getCurrentView as ɵgetCurrentView, restoreView as ɵrestoreView, containerRefreshStart as ɵcontainerRefreshStart, containerRefreshEnd as ɵcontainerRefreshEnd, queryRefresh as ɵqueryRefresh, loadQueryList as ɵloadQueryList, elementEnd as ɵelementEnd, elementProperty as ɵelementProperty, projectionDef as ɵprojectionDef, reference as ɵreference, enableBindings as ɵenableBindings, disableBindings as ɵdisableBindings, elementAttribute as ɵelementAttribute, elementContainerStart as ɵelementContainerStart, elementContainerEnd as ɵelementContainerEnd, elementStyling as ɵelementStyling, elementStylingMap as ɵelementStylingMap, elementStyleProp as ɵelementStyleProp, elementStylingApply as ɵelementStylingApply, elementClassProp as ɵelementClassProp, textBinding as ɵtextBinding, template as ɵtemplate, embeddedViewEnd as ɵembeddedViewEnd, store as ɵstore, load as ɵload, pipe as ɵpipe, BaseDef as ɵBaseDef, ComponentDef as ɵComponentDef, ComponentDefWithMeta as ɵComponentDefWithMeta, DirectiveDef as ɵDirectiveDef, DirectiveDefWithMeta as ɵDirectiveDefWithMeta, PipeDef as ɵPipeDef, PipeDefWithMeta as ɵPipeDefWithMeta, whenRendered as ɵwhenRendered, i18n as ɵi18n, i18nAttributes as ɵi18nAttributes, i18nExp as ɵi18nExp, i18nStart as ɵi18nStart, i18nEnd as ɵi18nEnd, i18nApply as ɵi18nApply, i18nPostprocess as ɵi18nPostprocess, WRAP_RENDERER_FACTORY2 as ɵWRAP_RENDERER_FACTORY2, setClassMetadata as ɵsetClassMetadata, } from '@angular/core/src/render3/index';\n    export { Render3DebugRendererFactory2 as ɵRender3DebugRendererFactory2 } from '@angular/core/src/render3/debug';\n    export { compileComponent as ɵcompileComponent, compileDirective as ɵcompileDirective, } from '@angular/core/src/render3/jit/directive';\n    export { compileNgModule as ɵcompileNgModule, compileNgModuleDefs as ɵcompileNgModuleDefs, patchComponentDefWithScope as ɵpatchComponentDefWithScope, } from '@angular/core/src/render3/jit/module';\n    export { compilePipe as ɵcompilePipe, } from '@angular/core/src/render3/jit/pipe';\n    export { NgModuleDef as ɵNgModuleDef, NgModuleDefWithMeta as ɵNgModuleDefWithMeta, NgModuleTransitiveScopes as ɵNgModuleTransitiveScopes, } from '@angular/core/src/metadata/ng_module';\n    export { sanitizeHtml as ɵsanitizeHtml, sanitizeStyle as ɵsanitizeStyle, sanitizeUrl as ɵsanitizeUrl, sanitizeResourceUrl as ɵsanitizeResourceUrl, } from '@angular/core/src/sanitization/sanitization';\n    export { bypassSanitizationTrustHtml as ɵbypassSanitizationTrustHtml, bypassSanitizationTrustStyle as ɵbypassSanitizationTrustStyle, bypassSanitizationTrustScript as ɵbypassSanitizationTrustScript, bypassSanitizationTrustUrl as ɵbypassSanitizationTrustUrl, bypassSanitizationTrustResourceUrl as ɵbypassSanitizationTrustResourceUrl, } from '@angular/core/src/sanitization/bypass';\n    export { getContext as ɵgetContext } from '@angular/core/src/render3/context_discovery';\n    export { Player as ɵPlayer, PlayerFactory as ɵPlayerFactory, PlayState as ɵPlayState, PlayerHandler as ɵPlayerHandler, } from '@angular/core/src/render3/interfaces/player';\n    export { LContext as ɵLContext, } from '@angular/core/src/render3/interfaces/context';\n    export { bindPlayerFactory as ɵbindPlayerFactory, } from '@angular/core/src/render3/styling/player_factory';\n    export { addPlayer as ɵaddPlayer, getPlayers as ɵgetPlayers, } from '@angular/core/src/render3/players';\n    export { compileNgModuleFactory__POST_R3__ as ɵcompileNgModuleFactory__POST_R3__ } from '@angular/core/src/application_ref';\n    export { SWITCH_COMPILE_COMPONENT__POST_R3__ as ɵSWITCH_COMPILE_COMPONENT__POST_R3__, SWITCH_COMPILE_DIRECTIVE__POST_R3__ as ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__, SWITCH_COMPILE_PIPE__POST_R3__ as ɵSWITCH_COMPILE_PIPE__POST_R3__, } from '@angular/core/src/metadata/directives';\n    export { SWITCH_COMPILE_NGMODULE__POST_R3__ as ɵSWITCH_COMPILE_NGMODULE__POST_R3__, } from '@angular/core/src/metadata/ng_module';\n    export { SWITCH_COMPILE_INJECTABLE__POST_R3__ as ɵSWITCH_COMPILE_INJECTABLE__POST_R3__, } from '@angular/core/src/di/injectable';\n    export { SWITCH_IVY_ENABLED__POST_R3__ as ɵSWITCH_IVY_ENABLED__POST_R3__, } from '@angular/core/src/ivy_switch';\n    export { SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ as ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__, } from '@angular/core/src/change_detection/change_detector_ref';\n    export { SWITCH_ELEMENT_REF_FACTORY__POST_R3__ as ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__, } from '@angular/core/src/linker/element_ref';\n    export { SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ as ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__, } from '@angular/core/src/linker/template_ref';\n    export { SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ as ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__, } from '@angular/core/src/linker/view_container_ref';\n    export { SWITCH_RENDERER2_FACTORY__POST_R3__ as ɵSWITCH_RENDERER2_FACTORY__POST_R3__, } from '@angular/core/src/render/api';\n    export { publishGlobalUtil as ɵpublishGlobalUtil, publishDefaultGlobalUtils as ɵpublishDefaultGlobalUtils } from '@angular/core/src/render3/global_utils';\n    export { SWITCH_INJECTOR_FACTORY__POST_R3__ as ɵSWITCH_INJECTOR_FACTORY__POST_R3__, } from '@angular/core/src/di/injector';\n}\n\ndeclare module '@angular/core/src/sanitization/security' {\n    /**\n        * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n        * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n        * handled.\n        *\n        * See DomSanitizer for more details on security in Angular applications.\n        *\n        * @publicApi\n        */\n    export enum SecurityContext {\n            NONE = 0,\n            HTML = 1,\n            STYLE = 2,\n            SCRIPT = 3,\n            URL = 4,\n            RESOURCE_URL = 5\n    }\n    /**\n        * Sanitizer is used by the views to sanitize potentially dangerous values.\n        *\n        * @publicApi\n        */\n    export abstract class Sanitizer {\n            abstract sanitize(context: SecurityContext, value: {} | string | null): string | null;\n    }\n}\n\ndeclare module '@angular/core/src/codegen_private_exports' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    export { CodegenComponentFactoryResolver as ɵCodegenComponentFactoryResolver } from '@angular/core/src/linker/component_factory_resolver';\n    export { registerModuleFactory as ɵregisterModuleFactory } from '@angular/core/src/linker/ng_module_factory_loader';\n    export { ArgumentType as ɵArgumentType, BindingFlags as ɵBindingFlags, DepFlags as ɵDepFlags, EMPTY_ARRAY as ɵEMPTY_ARRAY, EMPTY_MAP as ɵEMPTY_MAP, NodeFlags as ɵNodeFlags, QueryBindingType as ɵQueryBindingType, QueryValueType as ɵQueryValueType, ViewDefinition as ɵViewDefinition, ViewFlags as ɵViewFlags, anchorDef as ɵand, createComponentFactory as ɵccf, createNgModuleFactory as ɵcmf, createRendererType2 as ɵcrt, directiveDef as ɵdid, elementDef as ɵeld, elementEventFullName as ɵelementEventFullName, getComponentViewDefinitionFactory as ɵgetComponentViewDefinitionFactory, inlineInterpolate as ɵinlineInterpolate, interpolate as ɵinterpolate, moduleDef as ɵmod, moduleProvideDef as ɵmpd, ngContentDef as ɵncd, nodeValue as ɵnov, pipeDef as ɵpid, providerDef as ɵprd, pureArrayDef as ɵpad, pureObjectDef as ɵpod, purePipeDef as ɵppd, queryDef as ɵqud, textDef as ɵted, unwrapValue as ɵunv, viewDef as ɵvid } from '@angular/core/src/view/index';\n}\n\ndeclare module '@angular/core/src/metadata/di' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { InjectionToken } from '@angular/core/src/di/injection_token';\n    import { Type } from '@angular/core/src/type';\n    /**\n        * This token can be used to create a virtual provider that will populate the\n        * `entryComponents` fields of components and ng modules based on its `useValue`.\n        * All components that are referenced in the `useValue` value (either directly\n        * or in a nested array or map) will be added to the `entryComponents` property.\n        *\n        * @usageNotes\n        * ### Example\n        * The following example shows how the router can populate the `entryComponents`\n        * field of an NgModule based on the router configuration which refers\n        * to components.\n        *\n        * ```typescript\n        * // helper function inside the router\n        * function provideRoutes(routes) {\n        *   return [\n        *     {provide: ROUTES, useValue: routes},\n        *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n        *   ];\n        * }\n        *\n        * // user code\n        * let routes = [\n        *   {path: '/root', component: RootComp},\n        *   {path: '/teams', component: TeamsComp}\n        * ];\n        *\n        * @NgModule({\n        *   providers: [provideRoutes(routes)]\n        * })\n        * class ModuleWithRoutes {}\n        * ```\n        *\n        * @publicApi\n        */\n    export const ANALYZE_FOR_ENTRY_COMPONENTS: InjectionToken<any>;\n    /**\n        * Type of the Attribute decorator / constructor function.\n        *\n        *\n        */\n    export interface AttributeDecorator {\n            /**\n                * Specifies that a constant attribute value should be injected.\n                *\n                * The directive can inject constant string literals of host element attributes.\n                *\n                * @usageNotes\n                * ### Example\n                *\n                * Suppose we have an `<input>` element and want to know its `type`.\n                *\n                * ```html\n                * <input type=\"text\">\n                * ```\n                *\n                * A decorator can inject string literal `text` like so:\n                *\n                * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}\n                *\n                * ### Example as TypeScript Decorator\n                *\n                * {@example core/ts/metadata/metadata.ts region='attributeFactory'}\n                *\n                * ### Example as ES5 annotation\n                *\n                * ```\n                * var MyComponent = function(title) {\n                *   ...\n                * };\n                *\n                * MyComponent.annotations = [\n                *   new ng.Component({...})\n                * ]\n                * MyComponent.parameters = [\n                *   [new ng.Attribute('title')]\n                * ]\n                * ```\n                *\n                *\n                */\n            (name: string): any;\n            new (name: string): Attribute;\n    }\n    /**\n        * Type of the Attribute metadata.\n        */\n    export interface Attribute {\n            attributeName?: string;\n    }\n    /**\n        * Attribute decorator and metadata.\n        *\n        * @Annotation\n        * @publicApi\n        */\n    export const Attribute: AttributeDecorator;\n    /**\n        * Type of the Query metadata.\n        */\n    export interface Query {\n            descendants: boolean;\n            first: boolean;\n            read: any;\n            isViewQuery: boolean;\n            selector: any;\n    }\n    /**\n        * Base class for query metadata.\n        *\n        * @see `ContentChildren`.\n        * @see `ContentChild`.\n        * @see `ViewChildren`.\n        * @see `ViewChild`.\n        *\n        * @publicApi\n        */\n    export abstract class Query {\n    }\n    /**\n        * Type of the ContentChildren decorator / constructor function.\n        *\n        * @see `ContentChildren`.\n        * @publicApi\n        */\n    export interface ContentChildrenDecorator {\n            /**\n                * Configures a content query.\n                *\n                * You can use ContentChildren to get the `QueryList` of elements or directives from the\n                * content DOM. Any time a child element is added, removed, or moved, the query list will be\n                * updated, and the changes observable of the query list will emit a new value.\n                *\n                * Content queries are set before the `ngAfterContentInit` callback is called.\n                *\n                * **Metadata Properties**:\n                *\n                * * **selector** - the directive type or the name used for querying.\n                * * **descendants** - include only direct children or all descendants.\n                * * **read** - read a different token from the queried elements.\n                *\n                * @usageNotes\n                * ### Basic Example\n                *\n                * Here is a simple demonstration of how the `ContentChildren` decorator can be used.\n                *\n                * {@example core/di/ts/contentChildren/content_children_howto.ts region='HowTo'}\n                *\n                * ### Tab-pane Example\n                *\n                * Here is a slightly more realistic example that shows how `ContentChildren` decorators\n                * can be used to implement a tab pane component.\n                *\n                * {@example core/di/ts/contentChildren/content_children_example.ts region='Component'}\n                *\n                * @Annotation\n                */\n            (selector: Type<any> | Function | string, opts?: {\n                    descendants?: boolean;\n                    read?: any;\n            }): any;\n            new (selector: Type<any> | Function | string, opts?: {\n                    descendants?: boolean;\n                    read?: any;\n            }): Query;\n    }\n    /**\n        * Type of the ContentChildren metadata.\n        *\n        *\n        * @Annotation\n        */\n    export type ContentChildren = Query;\n    /**\n        * ContentChildren decorator and metadata.\n        *\n        *\n        * @Annotation\n        * @publicApi\n        */\n    export const ContentChildren: ContentChildrenDecorator;\n    /**\n        * Type of the ContentChild decorator / constructor function.\n        *\n        * @publicApi\n        */\n    export interface ContentChildDecorator {\n            /**\n                * Configures a content query.\n                *\n                * You can use ContentChild to get the first element or the directive matching the selector from\n                * the content DOM. If the content DOM changes, and a new child matches the selector,\n                * the property will be updated.\n                *\n                * Content queries are set before the `ngAfterContentInit` callback is called.\n                *\n                * **Metadata Properties**:\n                *\n                * * **selector** - the directive type or the name used for querying.\n                * * **read** - read a different token from the queried element.\n                *\n                * @usageNotes\n                * ### Example\n                *\n                * {@example core/di/ts/contentChild/content_child_howto.ts region='HowTo'}\n                *\n                * ### Example\n                *\n                * {@example core/di/ts/contentChild/content_child_example.ts region='Component'}\n                *\n                * @Annotation\n                */\n            (selector: Type<any> | Function | string, opts?: {\n                    read?: any;\n            }): any;\n            new (selector: Type<any> | Function | string, opts?: {\n                    read?: any;\n            }): ContentChild;\n    }\n    /**\n        * Type of the ContentChild metadata.\n        *\n        * @see `ContentChild`.\n        *\n        *\n        */\n    export type ContentChild = Query;\n    /**\n        * ContentChild decorator and metadata.\n        *\n        *\n        * @Annotation\n        * @publicApi\n        */\n    export const ContentChild: ContentChildDecorator;\n    /**\n        * Type of the ViewChildren decorator / constructor function.\n        *\n        * @see `ViewChildren`.\n        *\n        * @publicApi\n        */\n    export interface ViewChildrenDecorator {\n            /**\n                * Configures a view query.\n                *\n                * You can use ViewChildren to get the `QueryList` of elements or directives from the\n                * view DOM. Any time a child element is added, removed, or moved, the query list will be updated,\n                * and the changes observable of the query list will emit a new value.\n                *\n                * View queries are set before the `ngAfterViewInit` callback is called.\n                *\n                * **Metadata Properties**:\n                *\n                * * **selector** - the directive type or the name used for querying.\n                * * **read** - read a different token from the queried elements.\n                *\n                * @usageNotes\n                *\n                * ### Example\n                *\n                * {@example core/di/ts/viewChildren/view_children_howto.ts region='HowTo'}\n                *\n                * ### Example\n                *\n                * {@example core/di/ts/viewChildren/view_children_example.ts region='Component'}\n                *\n                * @Annotation\n                */\n            (selector: Type<any> | Function | string, opts?: {\n                    read?: any;\n            }): any;\n            new (selector: Type<any> | Function | string, opts?: {\n                    read?: any;\n            }): ViewChildren;\n    }\n    /**\n        * Type of the ViewChildren metadata.\n        */\n    export type ViewChildren = Query;\n    /**\n        * ViewChildren decorator and metadata.\n        *\n        * @Annotation\n        * @publicApi\n        */\n    export const ViewChildren: ViewChildrenDecorator;\n    /**\n        * Type of the ViewChild decorator / constructor function.\n        *\n        * @see `ViewChild`.\n        * @publicApi\n        */\n    export interface ViewChildDecorator {\n            /**\n                * @description\n                * Property decorator that configures a view query.\n                * The change detector looks for the first element or the directive matching the selector\n                * in the view DOM. If the view DOM changes, and a new child matches the selector,\n                * the property is updated.\n                *\n                * View queries are set before the `ngAfterViewInit` callback is called.\n                *\n                * **Metadata Properties**:\n                *\n                * * **selector** - the directive type or the name used for querying.\n                * * **read** - read a different token from the queried elements.\n                *\n                * Supported selectors include:\n                *   * any class with the `@Component` or `@Directive` decorator\n                *   * a template reference variable as a string (e.g. query `<my-component #cmp></my-component>\n                * with `@ViewChild('cmp')`)\n                *   * any provider defined in the child component tree of the current component (e.g.\n                * `@ViewChild(SomeService) someService: SomeService`)\n                *   * any provider defined through a string token (e.g. `@ViewChild('someToken') someTokenVal:\n                * any`)\n                *   * a `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChild(TemplateRef)\n                * template;`)\n                *\n                * @usageNotes\n                *\n                * {@example core/di/ts/viewChild/view_child_example.ts region='Component'}\n                *\n                * ### Example\n                *\n                * {@example core/di/ts/viewChild/view_child_howto.ts region='HowTo'}\n                *\n                * ### Example\n                *\n                * {@example core/di/ts/viewChild/view_child_example.ts region='Component'}\n                *\n                * @Annotation\n                */\n            (selector: Type<any> | Function | string, opts?: {\n                    read?: any;\n            }): any;\n            new (selector: Type<any> | Function | string, opts?: {\n                    read?: any;\n            }): ViewChild;\n    }\n    /**\n        * Type of the ViewChild metadata.\n        */\n    export type ViewChild = Query;\n    /**\n        * ViewChild decorator and metadata.\n        *\n        * @Annotation\n        * @publicApi\n        */\n    export const ViewChild: ViewChildDecorator;\n}\n\ndeclare module '@angular/core/src/metadata/directives' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { ChangeDetectionStrategy } from '@angular/core/src/change_detection/constants';\n    import { Provider } from '@angular/core/src/di';\n    import { compileComponent as render3CompileComponent, compileDirective as render3CompileDirective } from '@angular/core/src/render3/jit/directive';\n    import { compilePipe as render3CompilePipe } from '@angular/core/src/render3/jit/pipe';\n    import { Type } from '@angular/core/src/type';\n    import { TypeDecorator } from '@angular/core/src/util/decorators';\n    import { ViewEncapsulation } from '@angular/core/src/metadata/view';\n    /**\n        * Type of the Directive decorator / constructor function.\n        * @publicApi\n        */\n    export interface DirectiveDecorator {\n            /**\n                * Marks a class as an Angular directive. You can define your own\n                * directives to attach custom behavior to elements in the DOM.\n                * The options provide configuration metadata that determines\n                * how the directive should be processed, instantiated and used at\n                * runtime.\n                *\n                * Directive classes, like component classes, can implement\n                * [life-cycle hooks](guide/lifecycle-hooks) to influence their configuration and behavior.\n                *\n                *\n                * @usageNotes\n                * To define a directive, mark the class with the decorator and provide metadata.\n                *\n                * ```\n                * import {Directive} from '@angular/core';\n                *\n                * @Directive({\n                *   selector: 'my-directive',\n                * })\n                * export class MyDirective {\n                * ...\n                * }\n                * ```\n                *\n                * ### Declaring directives\n                *\n                * Directives are [declarables](guide/glossary#declarable).\n                * They must be declared by an NgModule\n                * in order to be usable in an app.\n                *\n                * A directive must belong to exactly one NgModule. Do not re-declare\n                * a directive imported from another module.\n                * List the directive class in the `declarations` field of an NgModule.\n                *\n                * ```\n                * declarations: [\n                *  AppComponent,\n                *  MyDirective\n                * ],\n                * ```\n                *\n                * @Annotation\n                */\n            (obj: Directive): TypeDecorator;\n            /**\n                * See the `Directive` decorator.\n                */\n            new (obj: Directive): Directive;\n    }\n    export interface Directive {\n            /**\n                * The CSS selector that triggers the instantiation of a directive.\n                *\n                * Declare as one of the following:\n                *\n                * - `element-name`: select by element name.\n                * - `.class`: select by class name.\n                * - `[attribute]`: select by attribute name.\n                * - `[attribute=value]`: select by attribute name and value.\n                * - `:not(sub_selector)`: select only if the element does not match the `sub_selector`.\n                * - `selector1, selector2`: select if either `selector1` or `selector2` matches.\n                *\n                * Angular only allows directives to trigger on CSS selectors that do not cross element\n                * boundaries. For example, consider a directive with an `input[type=text]` selector.\n                * For the following HTML, the directive is instantiated only on the\n                * `<input type=\"text\">` element.\n                *\n                * ```html\n                * <form>\n                *   <input type=\"text\">\n                *   <input type=\"radio\">\n                * <form>\n                * ```\n                *\n                */\n            selector?: string;\n            /**\n                * Enumerates the set of data-bound input properties for a directive\n                *\n                * Angular automatically updates input properties during change detection.\n                * The `inputs` property defines a set of `directiveProperty` to `bindingProperty`\n                * configuration:\n                *\n                * - `directiveProperty` specifies the component property where the value is written.\n                * - `bindingProperty` specifies the DOM property where the value is read from.\n                *\n                * When `bindingProperty` is not provided, it is assumed to be equal to `directiveProperty`.\n                * @usageNotes\n                *\n                * ### Example\n                *\n                * The following example creates a component with two data-bound properties.\n                *\n                * ```typescript\n                * @Component({\n                *   selector: 'bank-account',\n                *   inputs: ['bankName', 'id: account-id'],\n                *   template: `\n                *     Bank Name: {{bankName}}\n                *     Account Id: {{id}}\n                *   `\n                * })\n                * class BankAccount {\n                *   bankName: string;\n                *   id: string;\n                *\n                * ```\n                *\n                */\n            inputs?: string[];\n            /**\n                * Enumerates the set of event-bound output properties.\n                *\n                * When an output property emits an event, an event handler attached to that event\n                * in the template is invoked.\n                *\n                * The `outputs` property defines a set of `directiveProperty` to `bindingProperty`\n                * configuration:\n                *\n                * - `directiveProperty` specifies the component property that emits events.\n                * - `bindingProperty` specifies the DOM property the event handler is attached to.\n                *\n                * @usageNotes\n                *\n                * ### Example\n                *\n                * ```typescript\n                * @Directive({\n                *   selector: 'child-dir',\n                *   exportAs: 'child'\n                * })\n                * class ChildDir {\n                * }\n                *\n                * @Component({\n                *   selector: 'main',\n                *   template: `<child-dir #c=\"child\"></child-dir>`\n                * })\n                * class MainComponent {\n                * }\n                * ```\n                *\n                */\n            outputs?: string[];\n            /**\n                * A set of injection tokens that allow the DI system to\n                * provide a dependency to this directive or component.\n                */\n            providers?: Provider[];\n            /**\n                * Defines the name that can be used in the template to assign this directive to a variable.\n                *\n                * @usageNotes\n                *\n                * ### Simple Example\n                *\n                * ```\n                * @Directive({\n                *   selector: 'child-dir',\n                *   exportAs: 'child'\n                * })\n                * class ChildDir {\n                * }\n                *\n                * @Component({\n                *   selector: 'main',\n                *   template: `<child-dir #c=\"child\"></child-dir>`\n                * })\n                * class MainComponent {\n                * }\n                * ```\n                *\n                */\n            exportAs?: string;\n            /**\n                * Configures the queries that will be injected into the directive.\n                *\n                * Content queries are set before the `ngAfterContentInit` callback is called.\n                * View queries are set before the `ngAfterViewInit` callback is called.\n                *\n                * @usageNotes\n                *\n                * ### Example\n                *\n                * The following example shows how queries are defined\n                * and when their results are available in lifecycle hooks:\n                *\n                * ```\n                * @Component({\n                *   selector: 'someDir',\n                *   queries: {\n                *     contentChildren: new ContentChildren(ChildDirective),\n                *     viewChildren: new ViewChildren(ChildDirective)\n                *   },\n                *   template: '<child-directive></child-directive>'\n                * })\n                * class SomeDir {\n                *   contentChildren: QueryList<ChildDirective>,\n                *   viewChildren: QueryList<ChildDirective>\n                *\n                *   ngAfterContentInit() {\n                *     // contentChildren is set\n                *   }\n                *\n                *   ngAfterViewInit() {\n                *     // viewChildren is set\n                *   }\n                * }\n                * ```\n                *\n                * @Annotation\n                */\n            queries?: {\n                    [key: string]: any;\n            };\n            /**\n                * If true, this directive/component will be skipped by the AOT compiler and so will always be\n                * compiled using JIT.\n                *\n                * This exists to support future Ivy work and has no effect currently.\n                */\n            jit?: true;\n    }\n    /**\n        * Directive decorator and metadata.\n        *\n        * @Annotation\n        */\n    export interface Directive {\n            /**\n                * The CSS selector that identifies this directive in a template\n                * and triggers instantiation of the directive.\n                *\n                * Declare as one of the following:\n                *\n                * - `element-name`: Select by element name.\n                * - `.class`: Select by class name.\n                * - `[attribute]`: Select by attribute name.\n                * - `[attribute=value]`: Select by attribute name and value.\n                * - `:not(sub_selector)`: Select only if the element does not match the `sub_selector`.\n                * - `selector1, selector2`: Select if either `selector1` or `selector2` matches.\n                *\n                * Angular only allows directives to apply on CSS selectors that do not cross\n                * element boundaries.\n                *\n                * For the following template HTML, a directive with an `input[type=text]` selector,\n                * would be instantiated only on the `<input type=\"text\">` element.\n                *\n                * ```html\n                * <form>\n                *   <input type=\"text\">\n                *   <input type=\"radio\">\n                * <form>\n                * ```\n                *\n                */\n            selector?: string;\n            /**\n                * The set of event-bound output properties.\n                * When an output property emits an event, an event handler attached\n                * to that event in the template is invoked.\n                *\n                * Each output property maps a `directiveProperty` to a `bindingProperty`:\n                * - `directiveProperty` specifies the component property that emits events.\n                * - `bindingProperty` specifies the HTML attribute the event handler is attached to.\n                *\n                */\n            outputs?: string[];\n            /**\n                * Maps class properties to host element bindings for properties,\n                * attributes, and events, using a set of key-value pairs.\n                *\n                * Angular automatically checks host property bindings during change detection.\n                * If a binding changes, Angular updates the directive's host element.\n                *\n                * When the key is a property of the host element, the property value is\n                * the propagated to the specified DOM property.\n                *\n                * When the key is a static attribute in the DOM, the attribute value\n                * is propagated to the specified property in the host element.\n                *\n                * For event handling:\n                * - The key is the DOM event that the directive listens to.\n                * To listen to global events, add the target to the event name.\n                * The target can be `window`, `document` or `body`.\n                * - The value is the statement to execute when the event occurs. If the\n                * statement evalueates to `false`, then `preventDefault` is applied on the DOM\n                * event. A handler method can refer to the `$event` local variable.\n                *\n                */\n            host?: {\n                    [key: string]: string;\n            };\n            /**\n                * Configures the [injector](guide/glossary#injector) of this\n                * directive or component with a [token](guide/glossary#di-token)\n                * that maps to a [provider](guide/glossary#provider) of a dependency.\n                */\n            providers?: Provider[];\n            /**\n                * The name or names that can be used in the template to assign this directive to a variable.\n                * For multiple names, use a comma-separated string.\n                *\n                */\n            exportAs?: string;\n            /**\n                * Configures the queries that will be injected into the directive.\n                *\n                * Content queries are set before the `ngAfterContentInit` callback is called.\n                * View queries are set before the `ngAfterViewInit` callback is called.\n                *\n                */\n            queries?: {\n                    [key: string]: any;\n            };\n    }\n    /**\n        * Type of the Directive metadata.\n        *\n        * @publicApi\n        */\n    export const Directive: DirectiveDecorator;\n    /**\n        * Component decorator interface\n        *\n        * @publicApi\n        */\n    export interface ComponentDecorator {\n            /**\n                * Decorator that marks a class as an Angular component and provides configuration\n                * metadata that determines how the component should be processed,\n                * instantiated, and used at runtime.\n                *\n                * Components are the most basic UI building block of an Angular app.\n                * An Angular app contains a tree of Angular components.\n                *\n                * Angular components are a subset of directives, always associated with a template.\n                * Unlike other directives, only one component can be instantiated per an element in a template.\n                *\n                * A component must belong to an NgModule in order for it to be available\n                * to another component or application. To make it a member of an NgModule,\n                * list it in the `declarations` field of the `@NgModule` metadata.\n                *\n                * Note that, in addition to these options for configuring a directive,\n                * you can control a component's runtime behavior by implementing\n                * life-cycle hooks. For more information, see the\n                * [Lifecycle Hooks](guide/lifecycle-hooks) guide.\n                *\n                * @usageNotes\n                *\n                * ### Setting component inputs\n                *\n                * The following example creates a component with two data-bound properties,\n                * specified by the `inputs` value.\n                *\n                * <code-example path=\"core/ts/metadata/directives.ts\" region=\"component-input\">\n                * </code-example>\n                *\n                *\n                * ### Setting component outputs\n                *\n                * The following example shows two event emitters that emit on an interval. One\n                * emits an output every second, while the other emits every five seconds.\n                *\n                * {@example core/ts/metadata/directives.ts region='component-output-interval'}\n                *\n                * ### Injecting a class with a view provider\n                *\n                * The following simple example injects a class into a component\n                * using the view provider specified in component metadata:\n                *\n                * ```\n                * class Greeter {\n                *    greet(name:string) {\n                *      return 'Hello ' + name + '!';\n                *    }\n                * }\n                *\n                * @Directive({\n                *   selector: 'needs-greeter'\n                * })\n                * class NeedsGreeter {\n                *   greeter:Greeter;\n                *\n                *   constructor(greeter:Greeter) {\n                *     this.greeter = greeter;\n                *   }\n                * }\n                *\n                * @Component({\n                *   selector: 'greet',\n                *   viewProviders: [\n                *     Greeter\n                *   ],\n                *   template: `<needs-greeter></needs-greeter>`\n                * })\n                * class HelloWorld {\n                * }\n                *\n                * ```\n                *\n                * ### Preserving whitespace\n                *\n                * Removing whitespace can greatly reduce AOT-generated code size and speed up view creation.\n                * As of Angular 6, the default for `preserveWhitespaces` is false (whitespace is removed).\n                * To change the default setting for all components in your application, set\n                * the `preserveWhitespaces` option of the AOT compiler.\n                *\n                * By default, the AOT compiler removes whitespace characters as follows:\n                * * Trims all whitespaces at the beginning and the end of a template.\n                * * Removes whitespace-only text nodes. For example,\n                *\n                * ```\n                * <button>Action 1</button>  <button>Action 2</button>\n                * ```\n                *\n                * becomes:\n                *\n                * ```\n                * <button>Action 1</button><button>Action 2</button>\n                * ```\n                *\n                * * Replaces a series of whitespace characters in text nodes with a single space.\n                * For example, `<span>\\n some text\\n</span>` becomes `<span> some text </span>`.\n                * * Does NOT alter text nodes inside HTML tags such as `<pre>` or `<textarea>`,\n                * where whitespace characters are significant.\n                *\n                * Note that these transformations can influence DOM nodes layout, although impact\n                * should be minimal.\n                *\n                * You can override the default behavior to preserve whitespace characters\n                * in certain fragments of a template. For example, you can exclude an entire\n                * DOM sub-tree by using the `ngPreserveWhitespaces` attribute:\n                *\n                * ```html\n                * <div ngPreserveWhitespaces>\n                *     whitespaces are preserved here\n                *     <span>    and here </span>\n                * </div>\n                * ```\n                *\n                * You can force a single space to be preserved in a text node by using `&ngsp;`,\n                * which is replaced with a space character by Angular's template\n                * compiler:\n                *\n                * ```html\n                * <a>Spaces</a>&ngsp;<a>between</a>&ngsp;<a>links.</a>\n                * <!-->compiled to be equivalent to:</>\n                *  <a>Spaces</a> <a>between</a> <a>links.</a>\n                * ```\n                *\n                * Note that sequences of `&ngsp;` are still collapsed to just one space character when\n                * the `preserveWhitespaces` option is set to `false`.\n                *\n                * ```html\n                * <a>before</a>&ngsp;&ngsp;&ngsp;<a>after</a>\n                * <!-->compiled to be equivalent to:</>\n                *  <a>Spaces</a> <a>between</a> <a>links.</a>\n                * ```\n                *\n                * To preserve sequences of whitespace characters, use the\n                * `ngPreserveWhitespaces` attribute.\n                *\n                * @Annotation\n                */\n            (obj: Component): TypeDecorator;\n            /**\n                * See the `@Component` decorator.\n                */\n            new (obj: Component): Component;\n    }\n    /**\n        * Supplies configuration metadata for an Angular component.\n        */\n    export interface Component extends Directive {\n            /**\n                * The change-detection strategy to use for this component.\n                *\n                * When a component is instantiated, Angular creates a change detector,\n                * which is responsible for propagating the component's bindings.\n                * The strategy is one of:\n                * - `ChangeDetectionStrategy#OnPush` sets the strategy to `CheckOnce` (on demand).\n                * - `ChangeDetectionStrategy#Default` sets the strategy to `CheckAlways`.\n                */\n            changeDetection?: ChangeDetectionStrategy;\n            /**\n                * Defines the set of injectable objects that are visible to its view DOM children.\n                * See [example](#injecting-a-class-with-a-view-provider).\n                *\n                */\n            viewProviders?: Provider[];\n            /**\n                * The module ID of the module that contains the component.\n                * The component must be able to resolve relative URLs for templates and styles.\n                * SystemJS exposes the `__moduleName` variable within each module.\n                * In CommonJS, this can  be set to `module.id`.\n                *\n                */\n            moduleId?: string;\n            /**\n                * The URL of a template file for an Angular component. If provided,\n                * do not supply an inline template using `template`.\n                *\n                */\n            templateUrl?: string;\n            /**\n                * An inline template for an Angular component. If provided,\n                * do not supply a template file using `templateUrl`.\n                *\n                */\n            template?: string;\n            /**\n                * One or more URLs for files containing CSS stylesheets to use\n                * in this component.\n                */\n            styleUrls?: string[];\n            /**\n                * One or more inline CSS stylesheets to use\n                * in this component.\n                */\n            styles?: string[];\n            /**\n                * One or more animation `trigger()` calls, containing\n                * `state()` and `transition()` definitions.\n                * See the [Animations guide](/guide/animations) and animations API documentation.\n                *\n                */\n            animations?: any[];\n            /**\n                * An encapsulation policy for the template and CSS styles. One of:\n                * - `ViewEncapsulation.Native`: Use shadow roots. This works\n                * only if natively available on the platform.\n                * - `ViewEncapsulation.Emulated`: Use shimmed CSS that\n                * emulates the native behavior.\n                * - `ViewEncapsulation.None`: Use global CSS without any\n                * encapsulation.\n                *\n                * If not supplied, the value is taken from `CompilerOptions`. The default compiler option is\n                * `ViewEncapsulation.Emulated`.\n                *\n                * If the policy is set to `ViewEncapsulation.Emulated` and the component has no `styles`\n                * or `styleUrls` specified, the policy is automatically switched to `ViewEncapsulation.None`.\n                */\n            encapsulation?: ViewEncapsulation;\n            /**\n                * Overrides the default encapsulation start and end delimiters (`{{` and `}}`)\n                */\n            interpolation?: [string, string];\n            /**\n                * A set of components that should be compiled along with\n                * this component. For each component listed here,\n                * Angular creates a {@link ComponentFactory} and stores it in the\n                * {@link ComponentFactoryResolver}.\n                */\n            entryComponents?: Array<Type<any> | any[]>;\n            /**\n                * True to preserve or false to remove potentially superfluous whitespace characters\n                * from the compiled template. Whitespace characters are those matching the `\\s`\n                * character class in JavaScript regular expressions. Default is false, unless\n                * overridden in compiler options.\n                */\n            preserveWhitespaces?: boolean;\n    }\n    /**\n        * Component decorator and metadata.\n        *\n        * @Annotation\n        * @publicApi\n        */\n    export const Component: ComponentDecorator;\n    /**\n        * Type of the Pipe decorator / constructor function.\n        *\n        * @publicApi\n        */\n    export interface PipeDecorator {\n            /**\n                * Declares a reusable pipe function, and supplies configuration metadata.\n                *\n                */\n            (obj: Pipe): TypeDecorator;\n            /**\n                * See the `Pipe` decorator.\n                */\n            new (obj: Pipe): Pipe;\n    }\n    /**\n        * Type of the Pipe metadata.\n        */\n    export interface Pipe {\n            /**\n                * The pipe name to use in template bindings.\n                *\n                */\n            name: string;\n            /**\n                * When true, the pipe is pure, meaning that the\n                * `transform()` method is invoked only when its input arguments\n                * change. Pipes are pure by default.\n                *\n                * If the pipe has internal state (that is, the result\n                * depends on state other than its arguments), set `pure` to false.\n                * In this case, the pipe is invoked on each change-detection cycle,\n                * even if the arguments have not changed.\n                */\n            pure?: boolean;\n    }\n    /**\n        * @Annotation\n        * @publicApi\n        */\n    export const Pipe: PipeDecorator;\n    /**\n        * @publicApi\n        */\n    export interface InputDecorator {\n            /**\n                * Decorator that marks a class as pipe and supplies configuration metadata.\n                *\n                * A pipe class must implement the `PipeTransform` interface.\n                * For example, if the name is \"myPipe\", use a template binding expression\n                * such as the following:\n                *\n                * ```\n                * {{ exp | myPipe }}\n                * ```\n                *\n                * The result of the expression is passed to the pipe's `transform()` method.\n                *\n                * A pipe must belong to an NgModule in order for it to be available\n                * to a template. To make it a member of an NgModule,\n                * list it in the `declarations` field of the `@NgModule` metadata.\n                *\n                */\n            (bindingPropertyName?: string): any;\n            new (bindingPropertyName?: string): any;\n    }\n    /**\n        * Type of metadata for an `Input` property.\n        *\n        *\n        */\n    export interface Input {\n            /**\n                * Decorator that marks a class field as an input property and supplies configuration metadata.\n                * Declares a data-bound input property, which Angular automatically updates\n                * during change detection.\n                *\n                * @usageNotes\n                *\n                * You can supply an optional name to use in templates when the\n                * component is instantiated, that maps to the\n                * name of the bound property. By default, the original\n                * name of the bound property is used for input binding.\n                *\n                * The following example creates a component with two input properties,\n                * one of which is given a special binding name.\n                *\n                * ```typescript\n                * @Component({\n                *   selector: 'bank-account',\n                *   template: `\n                *     Bank Name: {{bankName}}\n                *     Account Id: {{id}}\n                *   `\n                * })\n                * class BankAccount {\n                *   // This property is bound using its original name.\n                *   @Input() bankName: string;\n                *   // this property value is bound to a different property name\n                *   // when this component is instantiated in a template.\n                *   @Input('account-id') id: string;\n                *\n                *   // this property is not bound, and is not automatically updated by Angular\n                *   normalizedBankName: string;\n                * }\n                *\n                * @Component({\n                *   selector: 'app',\n                *   template: `\n                *     <bank-account bankName=\"RBC\" account-id=\"4747\"></bank-account>\n                *   `\n                * })\n                *\n                * class App {}\n                * ```\n                *\n                */\n            bindingPropertyName?: string;\n    }\n    /**\n        * @Annotation\n        * @publicApi\n        */\n    export const Input: InputDecorator;\n    /**\n        * Type of the Output decorator / constructor function.\n        *\n        * @publicApi\n        */\n    export interface OutputDecorator {\n            /**\n             * Decorator that marks a class field as an output property and supplies configuration metadata.\n             * Declares a data-bound output property, which Angular automatically updates\n             * during change detection.\n             *\n             * @usageNotes\n             *\n             * You can supply an optional name to use in templates when the\n             * component is instantiated, that maps to the\n             * name of the bound property. By default, the original\n             * name of the bound property is used for output binding.\n             *\n             * See `@Input` decorator for an example of providing a binding name.\n             *\n             */\n            (bindingPropertyName?: string): any;\n            new (bindingPropertyName?: string): any;\n    }\n    /**\n        * Type of the Output metadata.\n        */\n    export interface Output {\n            bindingPropertyName?: string;\n    }\n    /**\n        * @Annotation\n        * @publicApi\n        */\n    export const Output: OutputDecorator;\n    /**\n        * Type of the HostBinding decorator / constructor function.\n        *\n        * @publicApi\n        */\n    export interface HostBindingDecorator {\n            /**\n                * Decorator that marks a DOM property as a host-binding property and supplies configuration\n                * metadata.\n                * Angular automatically checks host property bindings during change detection, and\n                * if a binding changes it updates the host element of the directive.\n                *\n                * @usageNotes\n                *\n                * The following example creates a directive that sets the `valid` and `invalid`\n                * properties on the DOM element that has an `ngModel` directive on it.\n                *\n                * ```typescript\n                * @Directive({selector: '[ngModel]'})\n                * class NgModelStatus {\n                *   constructor(public control: NgModel) {}\n                *   @HostBinding('class.valid') get valid() { return this.control.valid; }\n                *   @HostBinding('class.invalid') get invalid() { return this.control.invalid; }\n                * }\n                *\n                * @Component({\n                *   selector: 'app',\n                *   template: `<input [(ngModel)]=\"prop\">`,\n                * })\n                * class App {\n                *   prop;\n                * }\n                * ```\n                *\n                */\n            (hostPropertyName?: string): any;\n            new (hostPropertyName?: string): any;\n    }\n    /**\n        * Type of the HostBinding metadata.\n        *\n        */\n    export interface HostBinding {\n            hostPropertyName?: string;\n    }\n    /**\n        * @Annotation\n        * @publicApi\n        */\n    export const HostBinding: HostBindingDecorator;\n    /**\n        * Type of the HostListener decorator / constructor function.\n        *\n        * @publicApi\n        */\n    export interface HostListenerDecorator {\n            (eventName: string, args?: string[]): any;\n            new (eventName: string, args?: string[]): any;\n    }\n    /**\n        * Type of the HostListener metadata.\n        */\n    export interface HostListener {\n            /**\n                * The CSS event to listen for.\n                */\n            eventName?: string;\n            /**\n                * A set of arguments to pass to the handler method when the event occurs.\n                */\n            args?: string[];\n    }\n    /**\n        * Binds a CSS event to a host listener and supplies configuration metadata.\n        * Angular invokes the supplied handler method when the host element emits the specified event,\n        * and updates the bound element with the result.\n        * If the handler method returns false, applies `preventDefault` on the bound element.\n        *\n        * @usageNotes\n        *\n        * The following example declares a directive\n        * that attaches a click listener to a button and counts clicks.\n        *\n        * ```\n        * @Directive({selector: 'button[counting]'})\n        * class CountClicks {\n        *   numberOfClicks = 0;\n        *\n        *   @HostListener('click', ['$event.target'])\n        *   onClick(btn) {\n        *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n        *  }\n        * }\n        *\n        * @Component({\n        *   selector: 'app',\n        *   template: '<button counting>Increment</button>',\n        * })\n        * class App {}\n        * ```\n        *\n        * @Annotation\n        * @publicApi\n        */\n    export const HostListener: HostListenerDecorator;\n    export const SWITCH_COMPILE_COMPONENT__POST_R3__: typeof render3CompileComponent;\n    export const SWITCH_COMPILE_DIRECTIVE__POST_R3__: typeof render3CompileDirective;\n    export const SWITCH_COMPILE_PIPE__POST_R3__: typeof render3CompilePipe;\n}\n\ndeclare module '@angular/core/src/metadata/lifecycle_hooks' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { SimpleChange } from '@angular/core/src/change_detection/change_detection_util';\n    /**\n        * Defines an object that associates properties with\n        * instances of `SimpleChange`.\n        *\n        * @see `OnChanges`\n        *\n        * @publicApi\n        */\n    export interface SimpleChanges {\n            [propName: string]: SimpleChange;\n    }\n    /**\n        * @description\n        * A lifecycle hook that is called when any data-bound property of a directive changes.\n        * Define an `ngOnChanges()` method to handle the changes.\n        *\n        * @see `DoCheck`\n        * @see `OnInit`\n        * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n        *\n        * @usageNotes\n        * The following snippet shows how a component can implement this interface to\n        * define an on-changes handler for an input property.\n        *\n        * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}\n        *\n        * @publicApi\n        */\n    export interface OnChanges {\n            /**\n                * A callback method that is invoked immediately after the\n                * default change detector has checked data-bound properties\n                * if at least one has changed, and before the view and content\n                * children are checked.\n                * @param changes The changed properties.\n                */\n            ngOnChanges(changes: SimpleChanges): void;\n    }\n    /**\n        * @description\n        * A lifecycle hook that is called after Angular has initialized\n        * all data-bound properties of a directive.\n        * Define an `ngOnInit()` method to handle any additional initialization tasks.\n        *\n        * @see `AfterContentInit`\n        * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n        *\n        * @usageNotes\n        * The following snippet shows how a component can implement this interface to\n        * define its own initialization method.\n        *\n        * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}\n        *\n        * @publicApi\n        */\n    export interface OnInit {\n            /**\n                * A callback method that is invoked immediately after the\n                * default change detector has checked the directive's\n                * data-bound properties for the first time,\n                * and before any of the view or content children have been checked.\n                * It is invoked only once when the directive is instantiated.\n                */\n            ngOnInit(): void;\n    }\n    /**\n        * A lifecycle hook that invokes a custom change-detection function for a directive,\n        * in addition to the check performed by the default change-detector.\n        *\n        * The default change-detection algorithm looks for differences by comparing\n        * bound-property values by reference across change detection runs. You can use this\n        * hook to check for and respond to changes by some other means.\n        *\n        * When the default change detector detects changes, it invokes `ngOnChanges()` if supplied,\n        * regardless of whether you perform additional change detection.\n        * Typically, you should not use both `DoCheck` and `OnChanges` to respond to\n        * changes on the same input.\n        *\n        * @see `OnChanges`\n        * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n        *\n        * @usageNotes\n        * The following snippet shows how a component can implement this interface\n        * to invoke it own change-detection cycle.\n        *\n        * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}\n        *\n        * @publicApi\n        */\n    export interface DoCheck {\n            /**\n                    * A callback method that performs change-detection, invoked\n                    * after the default change-detector runs.\n                    * See `KeyValueDiffers` and `IterableDiffers` for implementing\n                    * custom change checking for collections.\n                    *\n                    */\n            ngDoCheck(): void;\n    }\n    /**\n        * A lifecycle hook that is called when a directive, pipe, or service is destroyed.\n        * Use for any custom cleanup that needs to occur when the\n        * instance is destroyed.\n        * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n        *\n        * @usageNotes\n        * The following snippet shows how a component can implement this interface\n        * to define its own custom clean-up method.\n        *\n        * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}\n        *\n        * @publicApi\n        */\n    export interface OnDestroy {\n            /**\n                * A callback method that performs custom clean-up, invoked immediately\n                * after a directive, pipe, or service instance is destroyed.\n                */\n            ngOnDestroy(): void;\n    }\n    /**\n        * @description\n        * A lifecycle hook that is called after Angular has fully initialized\n        * all content of a directive.\n        * Define an `ngAfterContentInit()` method to handle any additional initialization tasks.\n        *\n        * @see `OnInit`\n        * @see `AfterViewInit`\n        * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n        *\n        * @usageNotes\n        * The following snippet shows how a component can implement this interface to\n        * define its own content initialization method.\n        *\n        * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}\n        *\n        * @publicApi\n        */\n    export interface AfterContentInit {\n            /**\n                * A callback method that is invoked immediately after\n                * Angular has completed initialization of all of the directive's\n                * content.\n                * It is invoked only once when the directive is instantiated.\n                */\n            ngAfterContentInit(): void;\n    }\n    /**\n        * @description\n        * A lifecycle hook that is called after the default change detector has\n        * completed checking all content of a directive.\n        *\n        * @see `AfterViewChecked`\n        * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n        *\n        * @usageNotes\n        * The following snippet shows how a component can implement this interface to\n        * define its own after-check functionality.\n        *\n        * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}\n        *\n        * @publicApi\n        */\n    export interface AfterContentChecked {\n            /**\n                * A callback method that is invoked immediately after the\n                * default change detector has completed checking all of the directive's\n                * content.\n                */\n            ngAfterContentChecked(): void;\n    }\n    /**\n        * @description\n        * A lifecycle hook that is called after Angular has fully initialized\n        * a component's view.\n        * Define an `ngAfterViewInit()` method to handle any additional initialization tasks.\n        *\n        * @see `OnInit`\n        * @see `AfterContentInit`\n        * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n        *\n        * @usageNotes\n        * The following snippet shows how a component can implement this interface to\n        * define its own view initialization method.\n        *\n        * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}\n        *\n        * @publicApi\n        */\n    export interface AfterViewInit {\n            /**\n                * A callback method that is invoked immediately after\n                * Angular has completed initialization of a component's view.\n                * It is invoked only once when the view is instantiated.\n                *\n                */\n            ngAfterViewInit(): void;\n    }\n    /**\n        * @description\n        * A lifecycle hook that is called after the default change detector has\n        * completed checking a component's view for changes.\n        *\n        * @see `AfterContentChecked`\n        * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n        *\n        * @usageNotes\n        * The following snippet shows how a component can implement this interface to\n        * define its own after-check functionality.\n        *\n        * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}\n        *\n        * @publicApi\n        */\n    export interface AfterViewChecked {\n            /**\n                * A callback method that is invoked immediately after the\n                * default change detector has completed one change-check cycle\n                * for a component's view.\n                */\n            ngAfterViewChecked(): void;\n    }\n}\n\ndeclare module '@angular/core/src/metadata/ng_module' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { ApplicationRef } from '@angular/core/src/application_ref';\n    import { Provider } from '@angular/core/src/di/provider';\n    import { compileNgModule as render3CompileNgModule } from '@angular/core/src/render3/jit/module';\n    import { Type } from '@angular/core/src/type';\n    import { TypeDecorator } from '@angular/core/src/util/decorators';\n    /**\n        * Represents the expansion of an `NgModule` into its scopes.\n        *\n        * A scope is a set of directives and pipes that are visible in a particular context. Each\n        * `NgModule` has two scopes. The `compilation` scope is the set of directives and pipes that will\n        * be recognized in the templates of components declared by the module. The `exported` scope is the\n        * set of directives and pipes exported by a module (that is, module B's exported scope gets added\n        * to module A's compilation scope when module A imports B).\n        */\n    export interface NgModuleTransitiveScopes {\n            compilation: {\n                    directives: Set<any>;\n                    pipes: Set<any>;\n            };\n            exported: {\n                    directives: Set<any>;\n                    pipes: Set<any>;\n            };\n    }\n    export type NgModuleDefWithMeta<T, Declarations, Imports, Exports> = NgModuleDef<T>;\n    /**\n        * Runtime link information for NgModules.\n        *\n        * This is the internal data structure used by the runtime to assemble components, directives,\n        * pipes, and injectors.\n        *\n        * NOTE: Always use `defineNgModule` function to create this object,\n        * never create the object directly since the shape of this object\n        * can change between versions.\n        */\n    export interface NgModuleDef<T> {\n            /** Token representing the module. Used by DI. */\n            type: T;\n            /** List of components to bootstrap. */\n            bootstrap: Type<any>[];\n            /** List of components, directives, and pipes declared by this module. */\n            declarations: Type<any>[];\n            /** List of modules or `ModuleWithProviders` imported by this module. */\n            imports: Type<any>[];\n            /**\n                * List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this\n                * module.\n                */\n            exports: Type<any>[];\n            /**\n                * Cached value of computed `transitiveCompileScopes` for this module.\n                *\n                * This should never be read directly, but accessed via `transitiveScopesFor`.\n                */\n            transitiveCompileScopes: NgModuleTransitiveScopes | null;\n    }\n    /**\n        * A wrapper around an NgModule that associates it with the providers.\n        *\n        * @param T the module type. In Ivy applications, this must be explicitly\n        * provided.\n        *\n        * @publicApi\n        */\n    export interface ModuleWithProviders<T = any /** TODO(alxhub): remove default when callers pass explicit type param */> {\n            ngModule: Type<T>;\n            providers?: Provider[];\n    }\n    /**\n        * A schema definition associated with an NgModule.\n        *\n        * @see `@NgModule`, `CUSTOM_ELEMENTS_SCHEMA`, `NO_ERRORS_SCHEMA`\n        *\n        * @param name The name of a defined schema.\n        *\n        * @publicApi\n        */\n    export interface SchemaMetadata {\n            name: string;\n    }\n    /**\n        * Defines a schema that allows an NgModule to contain the following:\n        * - Non-Angular elements named with dash case (`-`).\n        * - Element properties named with dash case (`-`).\n        * Dash case is the naming convention for custom elements.\n        *\n        * @publicApi\n        */\n    export const CUSTOM_ELEMENTS_SCHEMA: SchemaMetadata;\n    /**\n        * Defines a schema that allows any property on any element.\n        *\n        * @publicApi\n        */\n    export const NO_ERRORS_SCHEMA: SchemaMetadata;\n    /**\n        * Type of the NgModule decorator / constructor function.\n        */\n    export interface NgModuleDecorator {\n            /**\n                * Marks a class as an NgModule and supplies configuration metadata.\n                */\n            (obj?: NgModule): TypeDecorator;\n            new (obj?: NgModule): NgModule;\n    }\n    /**\n        * Type of the NgModule metadata.\n        */\n    export interface NgModule {\n            /**\n                * The set of injectable objects that are available in the injector\n                * of this module.\n                *\n                * @see [Dependency Injection guide](guide/dependency-injection)\n                * @see [NgModule guide](guide/providers)\n                *\n                * @usageNotes\n                *\n                * Dependencies whose providers are listed here become available for injection\n                * into any component, directive, pipe or service that is a child of this injector.\n                * The NgModule used for bootstrapping uses the root injector, and can provide dependencies\n                * to any part of the app.\n                *\n                * A lazy-loaded module has its own injector, typically a child of the app root injector.\n                * Lazy-loaded services are scoped to the lazy-loaded module's injector.\n                * If a lazy-loaded module also provides the `UserService`, any component created\n                * within that module's context (such as by router navigation) gets the local instance\n                * of the service, not the instance in the root injector.\n                * Components in external modules continue to receive the instance provided by their injectors.\n                *\n                * ### Example\n                *\n                * The following example defines a class that is injected in\n                * the HelloWorld NgModule:\n                *\n                * ```\n                * class Greeter {\n                *    greet(name:string) {\n                *      return 'Hello ' + name + '!';\n                *    }\n                * }\n                *\n                * @NgModule({\n                *   providers: [\n                *     Greeter\n                *   ]\n                * })\n                * class HelloWorld {\n                *   greeter:Greeter;\n                *\n                *   constructor(greeter:Greeter) {\n                *     this.greeter = greeter;\n                *   }\n                * }\n                * ```\n                */\n            providers?: Provider[];\n            /**\n                * The set of components, directives, and pipes ([declarables](guide/glossary#declarable))\n                * that belong to this module.\n                *\n                * @usageNotes\n                *\n                * The set of selectors that are available to a template include those declared here, and\n                * those that are exported from imported NgModules.\n                *\n                * Declarables must belong to exactly one module.\n                * The compiler emits an error if you try to declare the same class in more than one module.\n                * Be careful not to declare a class that is imported from another module.\n                *\n                * ### Example\n                *\n                * The following example allows the CommonModule to use the `NgFor`\n                * directive.\n                *\n                * ```javascript\n                * @NgModule({\n                *   declarations: [NgFor]\n                * })\n                * class CommonModule {\n                * }\n                * ```\n                */\n            declarations?: Array<Type<any> | any[]>;\n            /**\n                * The set of NgModules whose exported [declarables](guide/glossary#declarable)\n                * are available to templates in this module.\n                *\n                * @usageNotes\n                *\n                * A template can use exported declarables from any\n                * imported module, including those from modules that are imported indirectly\n                * and re-exported.\n                * For example, `ModuleA` imports `ModuleB`, and also exports\n                * it, which makes the declarables from `ModuleB` available\n                * wherever `ModuleA` is imported.\n                *\n                * ### Example\n                *\n                * The following example allows MainModule to use anthing exported by\n                * `CommonModule`:\n                *\n                * ```javascript\n                * @NgModule({\n                *   imports: [CommonModule]\n                * })\n                * class MainModule {\n                * }\n                * ```\n                *\n                */\n            imports?: Array<Type<any> | ModuleWithProviders<{}> | any[]>;\n            /**\n                * The set of components, directives, and pipes declared in this\n                * NgModule that can be used in the template of any component that is part of an\n                * NgModule that imports this NgModule. Exported declarations are the module's public API.\n                *\n                * A declarable belongs to one and only one NgModule.\n                * A module can list another module among its exports, in which case all of that module's\n                * public declaration are exported.\n                *\n                * @usageNotes\n                *\n                * Declarations are private by default.\n                * If this ModuleA does not export UserComponent, then only the components within this\n                * ModuleA can use UserComponent.\n                *\n                * ModuleA can import ModuleB and also export it, making exports from ModuleB\n                * available to an NgModule that imports ModuleA.\n                *\n                * ### Example\n                *\n                * The following example exports the `NgFor` directive from CommonModule.\n                *\n                * ```javascript\n                * @NgModule({\n                *   exports: [NgFor]\n                * })\n                * class CommonModule {\n                * }\n                * ```\n                */\n            exports?: Array<Type<any> | any[]>;\n            /**\n                * The set of components to compile when this NgModule is defined,\n                * so that they can be dynamically loaded into the view.\n                *\n                * For each component listed here, Angular creates a `ComponentFactory`\n                * and stores it in the `ComponentFactoryResolver`.\n                *\n                * Angular automatically adds components in the module's bootstrap\n                * and route definitions into the `entryComponents` list. Use this\n                * option to add components that are bootstrapped\n                * using one of the imperative techniques, such as `ViewContainerRef.createComponent()`.\n                *\n                * @see [Entry Components](guide/entry-components)\n                */\n            entryComponents?: Array<Type<any> | any[]>;\n            /**\n                * The set of components that are bootstrapped when\n                * this module is bootstrapped. The components listed here\n                * are automatically added to `entryComponents`.\n                */\n            bootstrap?: Array<Type<any> | any[]>;\n            /**\n                * The set of schemas that declare elements to be allowed in the NgModule.\n                * Elements and properties that are neither Angular components nor directives\n                * must be declared in a schema.\n                *\n                * Allowed value are `NO_ERRORS_SCHEMA` and `CUSTOM_ELEMENTS_SCHEMA`.\n                *\n                * @security When using one of `NO_ERRORS_SCHEMA` or `CUSTOM_ELEMENTS_SCHEMA`\n                * you must ensure that allowed elements and properties securely escape inputs.\n                */\n            schemas?: Array<SchemaMetadata | any[]>;\n            /**\n                * A name or path that uniquely identifies this NgModule in `getModuleFactory`.\n                * If left `undefined`, the NgModule is not registered with\n                * `getModuleFactory`.\n                */\n            id?: string;\n            /**\n                * If true, this module will be skipped by the AOT compiler and so will always be compiled\n                * using JIT.\n                *\n                * This exists to support future Ivy work and has no effect currently.\n                */\n            jit?: true;\n    }\n    /**\n        * @Annotation\n        * @publicApi\n        */\n    export const NgModule: NgModuleDecorator;\n    /**\n        * @description\n        * Hook for manual bootstrapping of the application instead of using bootstrap array in @NgModule\n        * annotation.\n        *\n        * Reference to the current application is provided as a parameter.\n        *\n        * See [\"Bootstrapping\"](guide/bootstrapping) and [\"Entry components\"](guide/entry-components).\n        *\n        * @usageNotes\n        * ```typescript\n        * class AppModule implements DoBootstrap {\n        *   ngDoBootstrap(appRef: ApplicationRef) {\n        *     appRef.bootstrap(AppComponent); // Or some other component\n        *   }\n        * }\n        * ```\n        *\n        * @publicApi\n        */\n    export interface DoBootstrap {\n            ngDoBootstrap(appRef: ApplicationRef): void;\n    }\n    export const SWITCH_COMPILE_NGMODULE__POST_R3__: typeof render3CompileNgModule;\n}\n\ndeclare module '@angular/core/src/metadata/view' {\n    /**\n        * Defines template and style encapsulation options available for Component's {@link Component}.\n        *\n        * See {@link Component#encapsulation encapsulation}.\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * {@example core/ts/metadata/encapsulation.ts region='longform'}\n        *\n        * @publicApi\n        */\n    export enum ViewEncapsulation {\n            /**\n                * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n                * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n                * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n                * selectors.\n                *\n                * This is the default option.\n                */\n            Emulated = 0,\n            /**\n                * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n                * Use the native encapsulation mechanism of the renderer.\n                *\n                * For the DOM this means using the deprecated [Shadow DOM\n                * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n                * creating a ShadowRoot for Component's Host Element.\n                */\n            Native = 1,\n            /**\n                * Don't provide any template or style encapsulation.\n                */\n            None = 2,\n            /**\n                * Use Shadow DOM to encapsulate styles.\n                *\n                * For the DOM this means using modern [Shadow\n                * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n                * creating a ShadowRoot for Component's Host Element.\n                */\n            ShadowDom = 3\n    }\n}\n\ndeclare module '@angular/core/src/di/metadata' {\n    /**\n        * Type of the Inject decorator / constructor function.\n        *\n        * @publicApi\n        */\n    export interface InjectDecorator {\n            /**\n                * A constructor parameter decorator that specifies a\n                * custom provider of a dependency.\n                *\n                * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n                *\n                * @usageNotes\n                * The following example shows a class constructor that specifies a\n                * custom provider of a dependency using the parameter decorator.\n                *\n                * {@example core/di/ts/metadata_spec.ts region='Inject'}\n                *\n                * When `@Inject()` is not present, the `Injector` uses the type annotation of the\n                * parameter as the provider.\n                *\n                * {@example core/di/ts/metadata_spec.ts region='InjectWithoutDecorator'}\n                */\n            (token: any): any;\n            new (token: any): Inject;\n    }\n    /**\n        * Type of the Inject metadata.\n        *\n        * @publicApi\n        */\n    export interface Inject {\n            /**\n                * Injector token that maps to the dependency to be injected.\n                */\n            token: any;\n    }\n    /**\n        * Inject decorator and metadata.\n        *\n        * @Annotation\n        * @publicApi\n        */\n    export const Inject: InjectDecorator;\n    /**\n        * Type of the Optional decorator / constructor function.\n        *\n        * @publicApi\n        */\n    export interface OptionalDecorator {\n            /**\n                * A constructor parameter decorator that marks a dependency as optional.\n                *\n                * The DI framework provides null if the dependency is not found.\n                * For example, the following code allows the possibility of a null result:\n                *\n                * {@example core/di/ts/metadata_spec.ts region='Optional'}\n                *\n                * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n                */\n            (): any;\n            new (): Optional;\n    }\n    /**\n        * Type of the Optional metadata.\n        *\n        * @publicApi\n        */\n    export interface Optional {\n    }\n    /**\n        * Optional decorator and metadata.\n        *\n        * @Annotation\n        * @publicApi\n        */\n    export const Optional: OptionalDecorator;\n    /**\n        * Type of the Self decorator / constructor function.\n        *\n        * @publicApi\n        */\n    export interface SelfDecorator {\n            /**\n                * A constructor parameter decorator that tells the DI framework\n                * to retrieve a dependency only from the local injector.\n                *\n                * In the following example, the dependency can be resolved\n                * by the local injector when instantiating the class itself, but not\n                * when instantiating a child.\n                *\n                * {@example core/di/ts/metadata_spec.ts region='Self'}\n                *\n                * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n                *\n                *\n                */\n            (): any;\n            new (): Self;\n    }\n    /**\n        * Type of the Self metadata.\n        *\n        * @publicApi\n        */\n    export interface Self {\n    }\n    /**\n        * Self decorator and metadata.\n        *\n        * @Annotation\n        * @publicApi\n        */\n    export const Self: SelfDecorator;\n    /**\n        * Type of the SkipSelf decorator / constructor function.\n        *\n        * @publicApi\n        */\n    export interface SkipSelfDecorator {\n            /**\n                * A constructor parameter decorator that tells the DI framework\n                * that dependency resolution should start from the parent injector.\n                *\n                * In the following example, the dependency can be resolved when\n                * instantiating a child, but not when instantiating the class itself.\n                *\n                * {@example core/di/ts/metadata_spec.ts region='SkipSelf'}\n                *\n                * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n                *\n                *\n                */\n            (): any;\n            new (): SkipSelf;\n    }\n    /**\n        * Type of the SkipSelf metadata.\n        *\n        * @publicApi\n        */\n    export interface SkipSelf {\n    }\n    /**\n        * SkipSelf decorator and metadata.\n        *\n        * @Annotation\n        * @publicApi\n        */\n    export const SkipSelf: SkipSelfDecorator;\n    /**\n        * Type of the Host decorator / constructor function.\n        *\n        * @publicApi\n        */\n    export interface HostDecorator {\n            /**\n                * A constructor parameter decorator that tells the DI framework\n                * to retrieve a dependency from any injector until\n                * reaching the host element of the current component.\n                *\n                * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n                *\n                * @usageNotes\n                *\n                * {@example core/di/ts/metadata_spec.ts region='Host'}\n                */\n            (): any;\n            new (): Host;\n    }\n    /**\n        * Type of the Host metadata.\n        *\n        * @publicApi\n        */\n    export interface Host {\n    }\n    /**\n        * Host decorator and metadata.\n        *\n        * @Annotation\n        * @publicApi\n        */\n    export const Host: HostDecorator;\n}\n\ndeclare module '@angular/core/src/di/defs' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Type } from '@angular/core/src/type';\n    import { ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, StaticClassProvider, ValueProvider } from '@angular/core/src/di/provider';\n    /**\n        * Information about how a type or `InjectionToken` interfaces with the DI system.\n        *\n        * At a minimum, this includes a `factory` which defines how to create the given type `T`, possibly\n        * requesting injection of other types if necessary.\n        *\n        * Optionally, a `providedIn` parameter specifies that the given type belongs to a particular\n        * `InjectorDef`, `NgModule`, or a special scope (e.g. `'root'`). A value of `null` indicates\n        * that the injectable does not belong to any scope.\n        *\n        * NOTE: This is a private type and should not be exported\n        */\n    export interface InjectableDef<T> {\n            /**\n                * Specifies that the given type belongs to a particular injector:\n                * - `InjectorType` such as `NgModule`,\n                * - `'root'` the root injector\n                * - `'any'` all injectors.\n                * - `null`, does not belong to any injector. Must be explicitly listed in the injector\n                *   `providers`.\n                */\n            providedIn: InjectorType<any> | 'root' | 'any' | null;\n            /**\n                * Factory method to execute to create an instance of the injectable.\n                */\n            factory: () => T;\n            /**\n                * In a case of no explicit injector, a location where the instance of the injectable is stored.\n                */\n            value: T | undefined;\n    }\n    /**\n        * Information about the providers to be included in an `Injector` as well as how the given type\n        * which carries the information should be created by the DI system.\n        *\n        * An `InjectorDef` can import other types which have `InjectorDefs`, forming a deep nested\n        * structure of providers with a defined priority (identically to how `NgModule`s also have\n        * an import/dependency structure).\n        *\n        * NOTE: This is a private type and should not be exported\n        */\n    export interface InjectorDef<T> {\n            factory: () => T;\n            providers: (Type<any> | ValueProvider | ExistingProvider | FactoryProvider | ConstructorProvider | StaticClassProvider | ClassProvider | any[])[];\n            imports: (InjectorType<any> | InjectorTypeWithProviders<any>)[];\n    }\n    /**\n        * A `Type` which has an `InjectableDef` static field.\n        *\n        * `InjectableDefType`s contain their own Dependency Injection metadata and are usable in an\n        * `InjectorDef`-based `StaticInjector.\n        *\n        * @publicApi\n        */\n    export interface InjectableType<T> extends Type<T> {\n            /**\n                * Opaque type whose structure is highly version dependent. Do not rely on any properties.\n                */\n            ngInjectableDef: never;\n    }\n    /**\n        * A type which has an `InjectorDef` static field.\n        *\n        * `InjectorDefTypes` can be used to configure a `StaticInjector`.\n        *\n        * @publicApi\n        */\n    export interface InjectorType<T> extends Type<T> {\n            /**\n                * Opaque type whose structure is highly version dependent. Do not rely on any properties.\n                */\n            ngInjectorDef: never;\n    }\n    /**\n        * Describes the `InjectorDef` equivalent of a `ModuleWithProviders`, an `InjectorDefType` with an\n        * associated array of providers.\n        *\n        * Objects of this type can be listed in the imports section of an `InjectorDef`.\n        *\n        * NOTE: This is a private type and should not be exported\n        */\n    export interface InjectorTypeWithProviders<T> {\n            ngModule: InjectorType<T>;\n            providers?: (Type<any> | ValueProvider | ExistingProvider | FactoryProvider | ConstructorProvider | StaticClassProvider | ClassProvider | any[])[];\n    }\n    /**\n        * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n        * in which injectors (if any) it will be available.\n        *\n        * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\n        * `InjectableType`.\n        *\n        * Options:\n        * * `providedIn` determines which injectors will include the injectable, by either associating it\n        *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n        *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n        * * `factory` gives the zero argument function which will create an instance of the injectable.\n        *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n        *\n        * @publicApi\n        */\n    export function defineInjectable<T>(opts: {\n            providedIn?: Type<any> | 'root' | 'any' | null;\n            factory: () => T;\n    }): never;\n    /**\n        * Construct an `InjectorDef` which configures an injector.\n        *\n        * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\n        * `InjectorType`.\n        *\n        * Options:\n        *\n        * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n        *   create the type must be provided. If that factory function needs to inject arguments, it can\n        *   use the `inject` function.\n        * * `providers`: an optional array of providers to add to the injector. Each provider must\n        *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\n        *   type must be an `InjectableType`).\n        * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n        *   whose providers will also be added to the injector. Locally provided types will override\n        *   providers from imports.\n        *\n        * @publicApi\n        */\n    export function defineInjector(options: {\n            factory: () => any;\n            providers?: any[];\n            imports?: any[];\n    }): never;\n    /**\n        * Read the `ngInjectableDef` type in a way which is immune to accidentally reading inherited value.\n        *\n        * @param type type which may have `ngInjectableDef`\n        */\n    export function getInjectableDef<T>(type: any): InjectableDef<T> | null;\n    /**\n        * Read the `ngInjectorDef` type in a way which is immune to accidentally reading inherited value.\n        *\n        * @param type type which may have `ngInjectorDef`\n        */\n    export function getInjectorDef<T>(type: any): InjectorDef<T> | null;\n}\n\ndeclare module '@angular/core/src/di/forward_ref' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Type } from '@angular/core/src/type';\n    /**\n        * An interface that a function passed into {@link forwardRef} has to implement.\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n        * @publicApi\n        */\n    export interface ForwardRefFn {\n            (): any;\n    }\n    /**\n        * Allows to refer to references which are not yet defined.\n        *\n        * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n        * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n        * a query is not yet defined.\n        *\n        * @usageNotes\n        * ### Example\n        * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n        * @publicApi\n        */\n    export function forwardRef(forwardRefFn: ForwardRefFn): Type<any>;\n    /**\n        * Lazily retrieves the reference value from a forwardRef.\n        *\n        * Acts as the identity function when given a non-forward-ref value.\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n        *\n        * @see `forwardRef`\n        * @publicApi\n        */\n    export function resolveForwardRef<T>(type: T): T;\n}\n\ndeclare module '@angular/core/src/di/injectable' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { compileInjectable as render3CompileInjectable } from '@angular/core/src/render3/jit/injectable';\n    import { Type } from '@angular/core/src/type';\n    import { InjectableDef } from '@angular/core/src/di/defs';\n    import { ClassSansProvider, ConstructorSansProvider, ExistingSansProvider, FactorySansProvider, StaticClassSansProvider, ValueSansProvider } from '@angular/core/src/di/provider';\n    /**\n        * Injectable providers used in `@Injectable` decorator.\n        *\n        * @publicApi\n        */\n    export type InjectableProvider = ValueSansProvider | ExistingSansProvider | StaticClassSansProvider | ConstructorSansProvider | FactorySansProvider | ClassSansProvider;\n    /**\n        * Type of the Injectable decorator / constructor function.\n        *\n        * @publicApi\n        */\n    export interface InjectableDecorator {\n            /**\n                * A marker metadata that marks a class as available to `Injector` for creation.\n                *\n                * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n                *\n                * @usageNotes\n                * ### Example\n                *\n                * {@example core/di/ts/metadata_spec.ts region='Injectable'}\n                *\n                * `Injector` will throw an error when trying to instantiate a class that\n                * does not have `@Injectable` marker, as shown in the example below.\n                *\n                * {@example core/di/ts/metadata_spec.ts region='InjectableThrows'}\n                *\n                */\n            (): any;\n            (options?: {\n                    providedIn: Type<any> | 'root' | null;\n            } & InjectableProvider): any;\n            new (): Injectable;\n            new (options?: {\n                    providedIn: Type<any> | 'root' | null;\n            } & InjectableProvider): Injectable;\n    }\n    /**\n        * Type of the Injectable metadata.\n        *\n        * @publicApi\n        */\n    export interface Injectable {\n            providedIn?: Type<any> | 'root' | null;\n    }\n    /**\n        * Injectable decorator and metadata.\n        *\n        * @Annotation\n        * @publicApi\n        */\n    export const Injectable: InjectableDecorator;\n    /**\n        * Type representing injectable service.\n        *\n        * @publicApi\n        */\n    export interface InjectableType<T> extends Type<T> {\n            ngInjectableDef: InjectableDef<T>;\n    }\n    export const SWITCH_COMPILE_INJECTABLE__POST_R3__: typeof render3CompileInjectable;\n}\n\ndeclare module '@angular/core/src/di/injector' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Type } from '@angular/core/src/type';\n    import { InjectionToken } from '@angular/core/src/di/injection_token';\n    import { InjectFlags } from '@angular/core/src/di/injector_compatibility';\n    import { StaticProvider } from '@angular/core/src/di/provider';\n    export const SOURCE = \"__source\";\n    export const THROW_IF_NOT_FOUND: Object;\n    /**\n        * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n        *\n        * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n        * project.\n        *\n        * @publicApi\n        */\n    export const INJECTOR: InjectionToken<Injector>;\n    export class NullInjector implements Injector {\n            get(token: any, notFoundValue?: any): any;\n    }\n    /**\n        * Concrete injectors implement this interface.\n        *\n        * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * {@example core/di/ts/injector_spec.ts region='Injector'}\n        *\n        * `Injector` returns itself when given `Injector` as a token:\n        *\n        * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n        *\n        * @publicApi\n        */\n    export abstract class Injector {\n            static THROW_IF_NOT_FOUND: Object;\n            static NULL: Injector;\n            /**\n                * Retrieves an instance from the injector based on the provided token.\n                * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n                * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n                */\n            abstract get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n            /**\n                * @deprecated from v4.0.0 use Type<T> or InjectionToken<T>\n                * @suppress {duplicate}\n                */\n            abstract get(token: any, notFoundValue?: any): any;\n            /**\n                * @deprecated from v5 use the new signature Injector.create(options)\n                */\n            static create(providers: StaticProvider[], parent?: Injector): Injector;\n            static create(options: {\n                    providers: StaticProvider[];\n                    parent?: Injector;\n                    name?: string;\n            }): Injector;\n            /** @nocollapse */\n            static ngInjectableDef: never;\n    }\n    export const SWITCH_INJECTOR_FACTORY__POST_R3__: () => import(\"@angular/core/src/render3/di\").NodeInjector;\n    export const USE_VALUE: string;\n    export class StaticInjector implements Injector {\n            readonly parent: Injector;\n            readonly source: string | null;\n            constructor(providers: StaticProvider[], parent?: Injector, source?: string | null);\n            get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n            get(token: any, notFoundValue?: any): any;\n            toString(): string;\n    }\n}\n\ndeclare module '@angular/core/src/di/injector_compatibility' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Type } from '@angular/core/src/type';\n    import { InjectionToken } from '@angular/core/src/di/injection_token';\n    import { Injector } from '@angular/core/src/di/injector';\n    /**\n        * Injection flags for DI.\n        *\n        * @publicApi\n        */\n    export enum InjectFlags {\n            Default = 0,\n            /**\n                * Specifies that an injector should retrieve a dependency from any injector until reaching the\n                * host element of the current component. (Only used with Element Injector)\n                */\n            Host = 1,\n            /** Don't descend into ancestors of the node requesting injection. */\n            Self = 2,\n            /** Skip the node that is requesting injection. */\n            SkipSelf = 4,\n            /** Inject `defaultValue` instead if token not found. */\n            Optional = 8\n    }\n    export function setCurrentInjector(injector: Injector | null | undefined): Injector | undefined | null;\n    /**\n        * Sets the current inject implementation.\n        */\n    export function setInjectImplementation(impl: (<T>(token: Type<T> | InjectionToken<T>, flags?: InjectFlags) => T | null) | undefined): (<T>(token: Type<T> | InjectionToken<T>, flags?: InjectFlags) => T | null) | undefined;\n    export function injectInjectorOnly<T>(token: Type<T> | InjectionToken<T>): T;\n    export function injectInjectorOnly<T>(token: Type<T> | InjectionToken<T>, flags?: InjectFlags): T | null;\n    /**\n        * Injects a token from the currently active injector.\n        *\n        * This function must be used in the context of a factory function such as one defined for an\n        * `InjectionToken`, and will throw an error if not called from such a context.\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * {@example core/di/ts/injector_spec.ts region='ShakeableInjectionToken'}\n        *\n        * Within such a factory function `inject` is utilized to request injection of a dependency, instead\n        * of providing an additional array of dependencies as was common to do with `useFactory` providers.\n        * `inject` is faster and more type-safe.\n        *\n        * @publicApi\n        */\n    export function inject<T>(token: Type<T> | InjectionToken<T>): T;\n    export function inject<T>(token: Type<T> | InjectionToken<T>, flags?: InjectFlags): T | null;\n    /**\n        * Injects `root` tokens in limp mode.\n        *\n        * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n        * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n        * `InjectableDef`.\n        */\n    export function injectRootLimpMode<T>(token: Type<T> | InjectionToken<T>, notFoundValue: T | undefined, flags: InjectFlags): T | null;\n    export function injectArgs(types: (Type<any> | InjectionToken<any> | any[])[]): any[];\n}\n\ndeclare module '@angular/core/src/di/reflective_injector' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Injector } from '@angular/core/src/di/injector';\n    import { Provider } from '@angular/core/src/di/provider';\n    import { ResolvedReflectiveProvider } from '@angular/core/src/di/reflective_provider';\n    /**\n        * A ReflectiveDependency injection container used for instantiating objects and resolving\n        * dependencies.\n        *\n        * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n        * constructor dependencies.\n        *\n        * In typical use, application code asks for the dependencies in the constructor and they are\n        * resolved by the `Injector`.\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * The following example creates an `Injector` configured to create `Engine` and `Car`.\n        *\n        * ```typescript\n        * @Injectable()\n        * class Engine {\n        * }\n        *\n        * @Injectable()\n        * class Car {\n        *   constructor(public engine:Engine) {}\n        * }\n        *\n        * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n        * var car = injector.get(Car);\n        * expect(car instanceof Car).toBe(true);\n        * expect(car.engine instanceof Engine).toBe(true);\n        * ```\n        *\n        * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n        * resolve all of the object's dependencies automatically.\n        *\n        * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n        * @publicApi\n        */\n    export abstract class ReflectiveInjector implements Injector {\n            /**\n                * Turns an array of provider definitions into an array of resolved providers.\n                *\n                * A resolution is a process of flattening multiple nested arrays and converting individual\n                * providers into an array of `ResolvedReflectiveProvider`s.\n                *\n                * @usageNotes\n                * ### Example\n                *\n                * ```typescript\n                * @Injectable()\n                * class Engine {\n                * }\n                *\n                * @Injectable()\n                * class Car {\n                *   constructor(public engine:Engine) {}\n                * }\n                *\n                * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n                *\n                * expect(providers.length).toEqual(2);\n                *\n                * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n                * expect(providers[0].key.displayName).toBe(\"Car\");\n                * expect(providers[0].dependencies.length).toEqual(1);\n                * expect(providers[0].factory).toBeDefined();\n                *\n                * expect(providers[1].key.displayName).toBe(\"Engine\");\n                * });\n                * ```\n                *\n                */\n            static resolve(providers: Provider[]): ResolvedReflectiveProvider[];\n            /**\n                * Resolves an array of providers and creates an injector from those providers.\n                *\n                * The passed-in providers can be an array of `Type`, `Provider`,\n                * or a recursive array of more providers.\n                *\n                * @usageNotes\n                * ### Example\n                *\n                * ```typescript\n                * @Injectable()\n                * class Engine {\n                * }\n                *\n                * @Injectable()\n                * class Car {\n                *   constructor(public engine:Engine) {}\n                * }\n                *\n                * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n                * expect(injector.get(Car) instanceof Car).toBe(true);\n                * ```\n                */\n            static resolveAndCreate(providers: Provider[], parent?: Injector): ReflectiveInjector;\n            /**\n                * Creates an injector from previously resolved providers.\n                *\n                * This API is the recommended way to construct injectors in performance-sensitive parts.\n                *\n                * @usageNotes\n                * ### Example\n                *\n                * ```typescript\n                * @Injectable()\n                * class Engine {\n                * }\n                *\n                * @Injectable()\n                * class Car {\n                *   constructor(public engine:Engine) {}\n                * }\n                *\n                * var providers = ReflectiveInjector.resolve([Car, Engine]);\n                * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n                * expect(injector.get(Car) instanceof Car).toBe(true);\n                * ```\n                */\n            static fromResolvedProviders(providers: ResolvedReflectiveProvider[], parent?: Injector): ReflectiveInjector;\n            /**\n                * Parent of this injector.\n                *\n                * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n                * -->\n                */\n            abstract readonly parent: Injector | null;\n            /**\n                * Resolves an array of providers and creates a child injector from those providers.\n                *\n                * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n                * -->\n                *\n                * The passed-in providers can be an array of `Type`, `Provider`,\n                * or a recursive array of more providers.\n                *\n                * @usageNotes\n                * ### Example\n                *\n                * ```typescript\n                * class ParentProvider {}\n                * class ChildProvider {}\n                *\n                * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n                * var child = parent.resolveAndCreateChild([ChildProvider]);\n                *\n                * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n                * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n                * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n                * ```\n                */\n            abstract resolveAndCreateChild(providers: Provider[]): ReflectiveInjector;\n            /**\n                * Creates a child injector from previously resolved providers.\n                *\n                * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n                * -->\n                *\n                * This API is the recommended way to construct injectors in performance-sensitive parts.\n                *\n                * @usageNotes\n                * ### Example\n                *\n                * ```typescript\n                * class ParentProvider {}\n                * class ChildProvider {}\n                *\n                * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n                * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n                *\n                * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n                * var child = parent.createChildFromResolved(childProviders);\n                *\n                * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n                * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n                * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n                * ```\n                */\n            abstract createChildFromResolved(providers: ResolvedReflectiveProvider[]): ReflectiveInjector;\n            /**\n                * Resolves a provider and instantiates an object in the context of the injector.\n                *\n                * The created object does not get cached by the injector.\n                *\n                * @usageNotes\n                * ### Example\n                *\n                * ```typescript\n                * @Injectable()\n                * class Engine {\n                * }\n                *\n                * @Injectable()\n                * class Car {\n                *   constructor(public engine:Engine) {}\n                * }\n                *\n                * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n                *\n                * var car = injector.resolveAndInstantiate(Car);\n                * expect(car.engine).toBe(injector.get(Engine));\n                * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n                * ```\n                */\n            abstract resolveAndInstantiate(provider: Provider): any;\n            /**\n                * Instantiates an object using a resolved provider in the context of the injector.\n                *\n                * The created object does not get cached by the injector.\n                *\n                * @usageNotes\n                * ### Example\n                *\n                * ```typescript\n                * @Injectable()\n                * class Engine {\n                * }\n                *\n                * @Injectable()\n                * class Car {\n                *   constructor(public engine:Engine) {}\n                * }\n                *\n                * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n                * var carProvider = ReflectiveInjector.resolve([Car])[0];\n                * var car = injector.instantiateResolved(carProvider);\n                * expect(car.engine).toBe(injector.get(Engine));\n                * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n                * ```\n                */\n            abstract instantiateResolved(provider: ResolvedReflectiveProvider): any;\n            abstract get(token: any, notFoundValue?: any): any;\n    }\n    export class ReflectiveInjector_ implements ReflectiveInjector {\n            readonly parent: Injector | null;\n            keyIds: number[];\n            objs: any[];\n            /**\n                * Private\n                */\n            constructor(_providers: ResolvedReflectiveProvider[], _parent?: Injector);\n            get(token: any, notFoundValue?: any): any;\n            resolveAndCreateChild(providers: Provider[]): ReflectiveInjector;\n            createChildFromResolved(providers: ResolvedReflectiveProvider[]): ReflectiveInjector;\n            resolveAndInstantiate(provider: Provider): any;\n            instantiateResolved(provider: ResolvedReflectiveProvider): any;\n            getProviderAtIndex(index: number): ResolvedReflectiveProvider;\n            readonly displayName: string;\n            toString(): string;\n    }\n}\n\ndeclare module '@angular/core/src/di/provider' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Type } from '@angular/core/src/type';\n    /**\n        * Configures the `Injector` to return a value for a token.\n        *\n        * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * {@example core/di/ts/provider_spec.ts region='ValueSansProvider'}\n        *\n        * @publicApi\n        */\n    export interface ValueSansProvider {\n            /**\n                * The value to inject.\n                */\n            useValue: any;\n    }\n    /**\n        * Configures the `Injector` to return a value for a token.\n        *\n        * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * {@example core/di/ts/provider_spec.ts region='ValueProvider'}\n        *\n        * ### Multi-value example\n        *\n        * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n        *\n        * @publicApi\n        */\n    export interface ValueProvider extends ValueSansProvider {\n            /**\n                * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n                */\n            provide: any;\n            /**\n                * If true, then injector returns an array of instances. This is useful to allow multiple\n                * providers spread across many files to provide configuration information to a common token.\n                */\n            multi?: boolean;\n    }\n    /**\n        * Configures the `Injector` to return an instance of `useClass` for a token.\n        *\n        * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * {@example core/di/ts/provider_spec.ts region='StaticClassSansProvider'}\n        *\n        * @publicApi\n        */\n    export interface StaticClassSansProvider {\n            /**\n                * An optional class to instantiate for the `token`. (If not provided `provide` is assumed to be a\n                * class to instantiate)\n                */\n            useClass: Type<any>;\n            /**\n                * A list of `token`s which need to be resolved by the injector. The list of values is then\n                * used as arguments to the `useClass` constructor.\n                */\n            deps: any[];\n    }\n    /**\n        * Configures the `Injector` to return an instance of `useClass` for a token.\n        *\n        * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * {@example core/di/ts/provider_spec.ts region='StaticClassProvider'}\n        *\n        * Note that following two providers are not equal:\n        *\n        * {@example core/di/ts/provider_spec.ts region='StaticClassProviderDifference'}\n        *\n        * ### Multi-value example\n        *\n        * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n        */\n    export interface StaticClassProvider extends StaticClassSansProvider {\n            /**\n                * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n                */\n            provide: any;\n            /**\n                * If true, then injector returns an array of instances. This is useful to allow multiple\n                * providers spread across many files to provide configuration information to a common token.\n                */\n            multi?: boolean;\n    }\n    /**\n        * Configures the `Injector` to return an instance of a token.\n        *\n        * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * ```\n        * @Injectable(SomeModule, {deps: []})\n        * class MyService {}\n        * ```\n        *\n        * @publicApi\n        */\n    export interface ConstructorSansProvider {\n            /**\n                * A list of `token`s which need to be resolved by the injector. The list of values is then\n                * used as arguments to the `useClass` constructor.\n                */\n            deps?: any[];\n    }\n    /**\n        * Configures the `Injector` to return an instance of a token.\n        *\n        * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n        *\n        * ### Multi-value example\n        *\n        * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n        */\n    export interface ConstructorProvider extends ConstructorSansProvider {\n            /**\n                * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n                */\n            provide: Type<any>;\n            /**\n                * If true, then injector returns an array of instances. This is useful to allow multiple\n                * providers spread across many files to provide configuration information to a common token.\n                */\n            multi?: boolean;\n    }\n    /**\n        * Configures the `Injector` to return a value of another `useExisting` token.\n        *\n        * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * {@example core/di/ts/provider_spec.ts region='ExistingSansProvider'}\n        */\n    export interface ExistingSansProvider {\n            /**\n                * Existing `token` to return. (equivalent to `injector.get(useExisting)`)\n                */\n            useExisting: any;\n    }\n    /**\n        * Configures the `Injector` to return a value of another `useExisting` token.\n        *\n        * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * {@example core/di/ts/provider_spec.ts region='ExistingProvider'}\n        *\n        * ### Multi-value example\n        *\n        * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n        *\n        * @publicApi\n        */\n    export interface ExistingProvider extends ExistingSansProvider {\n            /**\n                * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n                */\n            provide: any;\n            /**\n                * If true, then injector returns an array of instances. This is useful to allow multiple\n                * providers spread across many files to provide configuration information to a common token.\n                */\n            multi?: boolean;\n    }\n    /**\n        * Configures the `Injector` to return a value by invoking a `useFactory` function.\n        *\n        * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * {@example core/di/ts/provider_spec.ts region='FactorySansProvider'}\n        *\n        * @publicApi\n        */\n    export interface FactorySansProvider {\n            /**\n                * A function to invoke to create a value for this `token`. The function is invoked with\n                * resolved values of `token`s in the `deps` field.\n                */\n            useFactory: Function;\n            /**\n                * A list of `token`s which need to be resolved by the injector. The list of values is then\n                * used as arguments to the `useFactory` function.\n                */\n            deps?: any[];\n    }\n    /**\n        * Configures the `Injector` to return a value by invoking a `useFactory` function.\n        *\n        * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * {@example core/di/ts/provider_spec.ts region='FactoryProvider'}\n        *\n        * Dependencies can also be marked as optional:\n        *\n        * {@example core/di/ts/provider_spec.ts region='FactoryProviderOptionalDeps'}\n        *\n        * ### Multi-value example\n        *\n        * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n        *\n        * @publicApi\n        */\n    export interface FactoryProvider extends FactorySansProvider {\n            /**\n                * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n                */\n            provide: any;\n            /**\n                * If true, then injector returns an array of instances. This is useful to allow multiple\n                * providers spread across many files to provide configuration information to a common token.\n                */\n            multi?: boolean;\n    }\n    /**\n        * Describes how the `Injector` should be configured in a static way (Without reflection).\n        *\n        * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n        *\n        * @see `ValueProvider`\n        * @see `ExistingProvider`\n        * @see `FactoryProvider`\n        *\n        * @publicApi\n        */\n    export type StaticProvider = ValueProvider | ExistingProvider | StaticClassProvider | ConstructorProvider | FactoryProvider | any[];\n    /**\n        * Configures the `Injector` to return an instance of `Type` when `Type' is used as the token.\n        *\n        * Create an instance by invoking the `new` operator and supplying additional arguments.\n        * This form is a short form of `TypeProvider`;\n        *\n        * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * {@example core/di/ts/provider_spec.ts region='TypeProvider'}\n        *\n        * @publicApi\n        */\n    export interface TypeProvider extends Type<any> {\n    }\n    /**\n        * Configures the `Injector` to return a value by invoking a `useClass` function.\n        *\n        * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * {@example core/di/ts/provider_spec.ts region='ClassSansProvider'}\n        *\n        * @publicApi\n        */\n    export interface ClassSansProvider {\n            /**\n                * Class to instantiate for the `token`.\n                */\n            useClass: Type<any>;\n    }\n    /**\n        * Configures the `Injector` to return an instance of `useClass` for a token.\n        *\n        * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * {@example core/di/ts/provider_spec.ts region='ClassProvider'}\n        *\n        * Note that following two providers are not equal:\n        *\n        * {@example core/di/ts/provider_spec.ts region='ClassProviderDifference'}\n        *\n        * ### Multi-value example\n        *\n        * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n        *\n        * @publicApi\n        */\n    export interface ClassProvider extends ClassSansProvider {\n            /**\n                * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n                */\n            provide: any;\n            /**\n                * If true, then injector returns an array of instances. This is useful to allow multiple\n                * providers spread across many files to provide configuration information to a common token.\n                */\n            multi?: boolean;\n    }\n    /**\n        * Describes how the `Injector` should be configured.\n        *\n        * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n        *\n        * @see `TypeProvider`\n        * @see `ClassProvider`\n        * @see `StaticProvider`\n        *\n        * @publicApi\n        */\n    export type Provider = TypeProvider | ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider | any[];\n}\n\ndeclare module '@angular/core/src/di/r3_injector' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Type } from '@angular/core/src/type';\n    import { InjectorType } from '@angular/core/src/di/defs';\n    import { InjectionToken } from '@angular/core/src/di/injection_token';\n    import { Injector } from '@angular/core/src/di/injector';\n    import { InjectFlags } from '@angular/core/src/di/injector_compatibility';\n    import { ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, StaticClassProvider, StaticProvider, TypeProvider, ValueProvider } from '@angular/core/src/di/provider';\n    /**\n        * Internal type for a single provider in a deep provider array.\n        */\n    type SingleProvider = TypeProvider | ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider | StaticClassProvider;\n    /**\n        * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n        *\n        * @publicApi\n        */\n    export function createInjector(defType: any, parent?: Injector | null, additionalProviders?: StaticProvider[] | null): Injector;\n    export class R3Injector {\n            readonly parent: Injector;\n            constructor(def: InjectorType<any>, additionalProviders: StaticProvider[] | null, parent: Injector);\n            /**\n                * Destroy the injector and release references to every instance or provider associated with it.\n                *\n                * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n                * hook was found.\n                */\n            destroy(): void;\n            get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: any, flags?: InjectFlags): T;\n    }\n    /**\n        * Converts a `SingleProvider` into a factory function.\n        *\n        * @param provider provider to convert to factory\n        */\n    export function providerToFactory(provider: SingleProvider): () => any;\n    export function isTypeProvider(value: SingleProvider): value is TypeProvider;\n    export {};\n}\n\ndeclare module '@angular/core/src/di/reflective_provider' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Self, SkipSelf } from '@angular/core/src/di/metadata';\n    import { Provider } from '@angular/core/src/di/provider';\n    import { ReflectiveKey } from '@angular/core/src/di/reflective_key';\n    /**\n        * `Dependency` is used by the framework to extend DI.\n        * This is internal to Angular and should not be used directly.\n        */\n    export class ReflectiveDependency {\n            key: ReflectiveKey;\n            optional: boolean;\n            visibility: Self | SkipSelf | null;\n            constructor(key: ReflectiveKey, optional: boolean, visibility: Self | SkipSelf | null);\n            static fromKey(key: ReflectiveKey): ReflectiveDependency;\n    }\n    /**\n        * An internal resolved representation of a `Provider` used by the `Injector`.\n        *\n        * @usageNotes\n        * This is usually created automatically by `Injector.resolveAndCreate`.\n        *\n        * It can be created manually, as follows:\n        *\n        * ### Example\n        *\n        * ```typescript\n        * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);\n        * var injector = Injector.fromResolvedProviders(resolvedProviders);\n        *\n        * expect(injector.get('message')).toEqual('Hello');\n        * ```\n        *\n        * @publicApi\n        */\n    export interface ResolvedReflectiveProvider {\n            /**\n                * A key, usually a `Type<any>`.\n                */\n            key: ReflectiveKey;\n            /**\n                * Factory function which can return an instance of an object represented by a key.\n                */\n            resolvedFactories: ResolvedReflectiveFactory[];\n            /**\n                * Indicates if the provider is a multi-provider or a regular provider.\n                */\n            multiProvider: boolean;\n    }\n    export class ResolvedReflectiveProvider_ implements ResolvedReflectiveProvider {\n            key: ReflectiveKey;\n            resolvedFactories: ResolvedReflectiveFactory[];\n            multiProvider: boolean;\n            readonly resolvedFactory: ResolvedReflectiveFactory;\n            constructor(key: ReflectiveKey, resolvedFactories: ResolvedReflectiveFactory[], multiProvider: boolean);\n    }\n    /**\n        * An internal resolved representation of a factory function created by resolving `Provider`.\n        * @publicApi\n        */\n    export class ResolvedReflectiveFactory {\n            /**\n                * Factory function which can return an instance of an object represented by a key.\n                */\n            factory: Function;\n            /**\n                * Arguments (dependencies) to the `factory` function.\n                */\n            dependencies: ReflectiveDependency[];\n            constructor(\n            /**\n                * Factory function which can return an instance of an object represented by a key.\n                */\n            factory: Function, \n            /**\n                * Arguments (dependencies) to the `factory` function.\n                */\n            dependencies: ReflectiveDependency[]);\n    }\n    /**\n        * Resolve a list of Providers.\n        */\n    export function resolveReflectiveProviders(providers: Provider[]): ResolvedReflectiveProvider[];\n    /**\n        * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n        * multi providers have been merged.\n        */\n    export function mergeResolvedReflectiveProviders(providers: ResolvedReflectiveProvider[], normalizedProvidersMap: Map<number, ResolvedReflectiveProvider>): Map<number, ResolvedReflectiveProvider>;\n    export function constructDependencies(typeOrFunc: any, dependencies?: any[]): ReflectiveDependency[];\n}\n\ndeclare module '@angular/core/src/di/reflective_key' {\n    /**\n        * A unique object used for retrieving items from the {@link ReflectiveInjector}.\n        *\n        * Keys have:\n        * - a system-wide unique `id`.\n        * - a `token`.\n        *\n        * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows\n        * the\n        * injector to store created objects in a more efficient way.\n        *\n        * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\n        * resolving\n        * providers.\n        *\n        * @deprecated No replacement\n        * @publicApi\n        */\n    export class ReflectiveKey {\n            token: Object;\n            id: number;\n            readonly displayName: string;\n            /**\n                * Private\n                */\n            constructor(token: Object, id: number);\n            /**\n                * Retrieves a `Key` for a token.\n                */\n            static get(token: Object): ReflectiveKey;\n            /**\n                * @returns the number of keys registered in the system.\n                */\n            static readonly numberOfKeys: number;\n    }\n    export class KeyRegistry {\n            get(token: Object): ReflectiveKey;\n            readonly numberOfKeys: number;\n    }\n}\n\ndeclare module '@angular/core/src/di/injection_token' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Type } from '@angular/core/src/type';\n    /**\n        * Creates a token that can be used in a DI Provider.\n        *\n        * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n        * runtime representation) such as when injecting an interface, callable type, array or\n        * parametrized type.\n        *\n        * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n        * the `Injector`. This provides additional level of type safety.\n        *\n        * ```\n        * interface MyInterface {...}\n        * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n        * // myInterface is inferred to be MyInterface.\n        * ```\n        *\n        * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n        * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n        * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n        * application's root injector. If the factory function, which takes zero arguments, needs to inject\n        * dependencies, it can do so using the `inject` function. See below for an example.\n        *\n        * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n        * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As\n        * mentioned above, `'root'` is the default value for `providedIn`.\n        *\n        * @usageNotes\n        * ### Basic Example\n        *\n        * ### Plain InjectionToken\n        *\n        * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n        *\n        * ### Tree-shakable InjectionToken\n        *\n        * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n        *\n        *\n        * @publicApi\n        */\n    export class InjectionToken<T> {\n            protected _desc: string;\n            readonly ngInjectableDef: never | undefined;\n            constructor(_desc: string, options?: {\n                    providedIn?: Type<any> | 'root' | null;\n                    factory: () => T;\n            });\n            toString(): string;\n    }\n    export interface InjectableDefToken<T> extends InjectionToken<T> {\n            ngInjectableDef: never;\n    }\n}\n\ndeclare module '@angular/core/src/linker/compiler' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { InjectionToken } from '@angular/core/src/di/injection_token';\n    import { StaticProvider } from '@angular/core/src/di/provider';\n    import { MissingTranslationStrategy } from '@angular/core/src/i18n/tokens';\n    import { ViewEncapsulation } from '@angular/core/src/metadata';\n    import { Type } from '@angular/core/src/type';\n    import { ComponentFactory } from '@angular/core/src/linker/component_factory';\n    import { NgModuleFactory } from '@angular/core/src/linker/ng_module_factory';\n    /**\n        * Combination of NgModuleFactory and ComponentFactorys.\n        *\n        * @publicApi\n        */\n    export class ModuleWithComponentFactories<T> {\n            ngModuleFactory: NgModuleFactory<T>;\n            componentFactories: ComponentFactory<any>[];\n            constructor(ngModuleFactory: NgModuleFactory<T>, componentFactories: ComponentFactory<any>[]);\n    }\n    /**\n        * Low-level service for running the angular compiler during runtime\n        * to create {@link ComponentFactory}s, which\n        * can later be used to create and render a Component instance.\n        *\n        * Each `@NgModule` provides an own `Compiler` to its injector,\n        * that will use the directives/pipes of the ng module for compilation\n        * of components.\n        *\n        * @publicApi\n        */\n    export class Compiler {\n            /**\n                * Compiles the given NgModule and all of its components. All templates of the components listed\n                * in `entryComponents` have to be inlined.\n                */\n            compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T>;\n            /**\n                * Compiles the given NgModule and all of its components\n                */\n            compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>>;\n            /**\n                * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n                */\n            compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T>;\n            /**\n                * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n                */\n            compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>): Promise<ModuleWithComponentFactories<T>>;\n            /**\n                * Clears all caches.\n                */\n            clearCache(): void;\n            /**\n                * Clears the cache for the given component/ngModule.\n                */\n            clearCacheFor(type: Type<any>): void;\n            /**\n                * Returns the id for a given NgModule, if one is defined and known to the compiler.\n                */\n            getModuleId(moduleType: Type<any>): string | undefined;\n    }\n    /**\n        * Options for creating a compiler\n        *\n        * @publicApi\n        */\n    export type CompilerOptions = {\n            useJit?: boolean;\n            defaultEncapsulation?: ViewEncapsulation;\n            providers?: StaticProvider[];\n            missingTranslation?: MissingTranslationStrategy;\n            preserveWhitespaces?: boolean;\n    };\n    /**\n        * Token to provide CompilerOptions in the platform injector.\n        *\n        * @publicApi\n        */\n    export const COMPILER_OPTIONS: InjectionToken<CompilerOptions[]>;\n    /**\n        * A factory for creating a Compiler\n        *\n        * @publicApi\n        */\n    export abstract class CompilerFactory {\n            abstract createCompiler(options?: CompilerOptions[]): Compiler;\n    }\n}\n\ndeclare module '@angular/core/src/linker/component_factory' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { ChangeDetectorRef } from '@angular/core/src/change_detection/change_detection';\n    import { Injector } from '@angular/core/src/di/injector';\n    import { Type } from '@angular/core/src/type';\n    import { ElementRef } from '@angular/core/src/linker/element_ref';\n    import { NgModuleRef } from '@angular/core/src/linker/ng_module_factory';\n    import { ViewRef } from '@angular/core/src/linker/view_ref';\n    /**\n        * Represents a component created by a `ComponentFactory`.\n        * Provides access to the component instance and related objects,\n        * and provides the means of destroying the instance.\n        *\n        * @publicApi\n        */\n    export abstract class ComponentRef<C> {\n            /**\n                * The host or anchor [element](guide/glossary#element) for this component instance.\n                */\n            abstract readonly location: ElementRef;\n            /**\n                * The [dependency injector](guide/glossary#injector) for this component instance.\n                */\n            abstract readonly injector: Injector;\n            /**\n                * This component instance.\n                */\n            abstract readonly instance: C;\n            /**\n                * The [host view](guide/glossary#view-tree) defined by the template\n                * for this component instance.\n                */\n            abstract readonly hostView: ViewRef;\n            /**\n                * The change detector for this component instance.\n                */\n            abstract readonly changeDetectorRef: ChangeDetectorRef;\n            /**\n                * The component type.\n                */\n            abstract readonly componentType: Type<any>;\n            /**\n                * Destroys the component instance and all of the data structures associated with it.\n                */\n            abstract destroy(): void;\n            /**\n                * A lifecycle hook that provides additional developer-defined cleanup\n                * functionality for the component.\n                * @param callback A handler function that cleans up developer-defined data\n                * associated with this component. Called when the `destroy()` method is invoked.\n                */\n            abstract onDestroy(callback: Function): void;\n    }\n    /**\n        * @publicApi\n        */\n    export abstract class ComponentFactory<C> {\n            /**\n                * The component's HTML selector.\n                */\n            abstract readonly selector: string;\n            /**\n                * The component's type\n                */\n            abstract readonly componentType: Type<any>;\n            /**\n                * Selector for all <ng-content> elements in the component.\n                */\n            abstract readonly ngContentSelectors: string[];\n            /**\n                * The inputs of the component.\n                */\n            abstract readonly inputs: {\n                    propName: string;\n                    templateName: string;\n            }[];\n            /**\n                * The outputs of the component.\n                */\n            abstract readonly outputs: {\n                    propName: string;\n                    templateName: string;\n            }[];\n            /**\n                * Creates a new component.\n                */\n            abstract create(injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string | any, ngModule?: NgModuleRef<any>): ComponentRef<C>;\n    }\n}\n\ndeclare module '@angular/core/src/linker/ng_module_factory' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Injector } from '@angular/core/src/di/injector';\n    import { Type } from '@angular/core/src/type';\n    import { ComponentFactoryResolver } from '@angular/core/src/linker/component_factory_resolver';\n    /**\n        * Represents an instance of an NgModule created via a {@link NgModuleFactory}.\n        *\n        * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n        * NgModule Instance.\n        *\n        * @publicApi\n        */\n    export abstract class NgModuleRef<T> {\n            /**\n                * The injector that contains all of the providers of the NgModule.\n                */\n            abstract readonly injector: Injector;\n            /**\n                * The ComponentFactoryResolver to get hold of the ComponentFactories\n                * declared in the `entryComponents` property of the module.\n                */\n            abstract readonly componentFactoryResolver: ComponentFactoryResolver;\n            /**\n                * The NgModule instance.\n                */\n            abstract readonly instance: T;\n            /**\n                * Destroys the module instance and all of the data structures associated with it.\n                */\n            abstract destroy(): void;\n            /**\n                * Allows to register a callback that will be called when the module is destroyed.\n                */\n            abstract onDestroy(callback: () => void): void;\n    }\n    export interface InternalNgModuleRef<T> extends NgModuleRef<T> {\n            _bootstrapComponents: Type<any>[];\n    }\n    /**\n        * @publicApi\n        */\n    export abstract class NgModuleFactory<T> {\n            abstract readonly moduleType: Type<T>;\n            abstract create(parentInjector: Injector | null): NgModuleRef<T>;\n    }\n}\n\ndeclare module '@angular/core/src/linker/view_ref' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { ApplicationRef } from '@angular/core/src/application_ref';\n    import { ChangeDetectorRef } from '@angular/core/src/change_detection/change_detector_ref';\n    /**\n        * Represents an Angular [view](guide/glossary#view),\n        * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n        * Also serves as the base class\n        * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n        *\n        * @see `EmbeddedViewRef`\n        *\n        * @publicApi\n        */\n    export abstract class ViewRef extends ChangeDetectorRef {\n            /**\n                * Destroys this view and all of the data structures associated with it.\n                */\n            abstract destroy(): void;\n            /**\n                * Reports whether this view has been destroyed.\n                * @returns True after the `destroy()` method has been called, false otherwise.\n                */\n            abstract readonly destroyed: boolean;\n            /**\n                * A lifecycle hook that provides additional developer-defined cleanup\n                * functionality for views.\n                * @param callback A handler function that cleans up developer-defined data\n                * associated with a view. Called when the `destroy()` method is invoked.\n                */\n            abstract onDestroy(callback: Function): any /** TODO #9100 */;\n    }\n    /**\n        * Represents an Angular [view](guide/glossary#view) in a view container.\n        * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n        * other than the hosting component whose template defines it, or it can be defined\n        * independently by a `TemplateRef`.\n        *\n        * Properties of elements in a view can change, but the structure (number and order) of elements in\n        * a view cannot. Change the structure of elements by inserting, moving, or\n        * removing nested views in a view container.\n        *\n        * @see `ViewContainerRef`\n        *\n        * @usageNotes\n        *\n        * The following template breaks down into two separate `TemplateRef` instances,\n        * an outer one and an inner one.\n        *\n        * ```\n        * Count: {{items.length}}\n        * <ul>\n        *   <li *ngFor=\"let  item of items\">{{item}}</li>\n        * </ul>\n        * ```\n        *\n        * This is the outer `TemplateRef`:\n        *\n        * ```\n        * Count: {{items.length}}\n        * <ul>\n        *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n        * </ul>\n        * ```\n        *\n        * This is the inner `TemplateRef`:\n        *\n        * ```\n        *   <li>{{item}}</li>\n        * ```\n        *\n        * The outer and inner `TemplateRef` instances are assembled into views as follows:\n        *\n        * ```\n        * <!-- ViewRef: outer-0 -->\n        * Count: 2\n        * <ul>\n        *   <ng-template view-container-ref></ng-template>\n        *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n        *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n        * </ul>\n        * <!-- /ViewRef: outer-0 -->\n        * ```\n        * @publicApi\n        */\n    export abstract class EmbeddedViewRef<C> extends ViewRef {\n            /**\n                * The context for this view, inherited from the anchor element.\n                */\n            abstract readonly context: C;\n            /**\n                * The root nodes for this embedded view.\n                */\n            abstract readonly rootNodes: any[];\n    }\n    export interface InternalViewRef extends ViewRef {\n            detachFromAppRef(): void;\n            attachToAppRef(appRef: ApplicationRef): void;\n    }\n}\n\ndeclare module '@angular/core/src/zone/ng_zone' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { EventEmitter } from '@angular/core/src/event_emitter';\n    /**\n        * An injectable service for executing work inside or outside of the Angular zone.\n        *\n        * The most common use of this service is to optimize performance when starting a work consisting of\n        * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n        * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n        * can reenter the Angular zone via {@link #run}.\n        *\n        * <!-- TODO: add/fix links to:\n        *   - docs explaining zones and the use of zones in Angular and change-detection\n        *   - link to runOutsideAngular/run (throughout this file!)\n        *   -->\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * ```\n        * import {Component, NgZone} from '@angular/core';\n        * import {NgIf} from '@angular/common';\n        *\n        * @Component({\n        *   selector: 'ng-zone-demo',\n        *   template: `\n        *     <h2>Demo: NgZone</h2>\n        *\n        *     <p>Progress: {{progress}}%</p>\n        *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n        *\n        *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n        *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n        *   `,\n        * })\n        * export class NgZoneDemo {\n        *   progress: number = 0;\n        *   label: string;\n        *\n        *   constructor(private _ngZone: NgZone) {}\n        *\n        *   // Loop inside the Angular zone\n        *   // so the UI DOES refresh after each setTimeout cycle\n        *   processWithinAngularZone() {\n        *     this.label = 'inside';\n        *     this.progress = 0;\n        *     this._increaseProgress(() => console.log('Inside Done!'));\n        *   }\n        *\n        *   // Loop outside of the Angular zone\n        *   // so the UI DOES NOT refresh after each setTimeout cycle\n        *   processOutsideOfAngularZone() {\n        *     this.label = 'outside';\n        *     this.progress = 0;\n        *     this._ngZone.runOutsideAngular(() => {\n        *       this._increaseProgress(() => {\n        *         // reenter the Angular zone and display done\n        *         this._ngZone.run(() => { console.log('Outside Done!'); });\n        *       });\n        *     });\n        *   }\n        *\n        *   _increaseProgress(doneCallback: () => void) {\n        *     this.progress += 1;\n        *     console.log(`Current progress: ${this.progress}%`);\n        *\n        *     if (this.progress < 100) {\n        *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n        *     } else {\n        *       doneCallback();\n        *     }\n        *   }\n        * }\n        * ```\n        *\n        * @publicApi\n        */\n    export class NgZone {\n            readonly hasPendingMicrotasks: boolean;\n            readonly hasPendingMacrotasks: boolean;\n            /**\n                * Whether there are no outstanding microtasks or macrotasks.\n                */\n            readonly isStable: boolean;\n            /**\n                * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n                */\n            readonly onUnstable: EventEmitter<any>;\n            /**\n                * Notifies when there is no more microtasks enqueued in the current VM Turn.\n                * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n                * For this reason this event can fire multiple times per VM Turn.\n                */\n            readonly onMicrotaskEmpty: EventEmitter<any>;\n            /**\n                * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n                * implies we are about to relinquish VM turn.\n                * This event gets called just once.\n                */\n            readonly onStable: EventEmitter<any>;\n            /**\n                * Notifies that an error has been delivered.\n                */\n            readonly onError: EventEmitter<any>;\n            constructor({ enableLongStackTrace }: {\n                    enableLongStackTrace?: boolean | undefined;\n            });\n            static isInAngularZone(): boolean;\n            static assertInAngularZone(): void;\n            static assertNotInAngularZone(): void;\n            /**\n                * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n                * the function.\n                *\n                * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n                * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n                *\n                * Any future tasks or microtasks scheduled from within this function will continue executing from\n                * within the Angular zone.\n                *\n                * If a synchronous error happens it will be rethrown and not reported via `onError`.\n                */\n            run<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T;\n            /**\n                * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n                * returned by the function.\n                *\n                * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n                * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n                *\n                * Any future tasks or microtasks scheduled from within this function will continue executing from\n                * within the Angular zone.\n                *\n                * If a synchronous error happens it will be rethrown and not reported via `onError`.\n                */\n            runTask<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[], name?: string): T;\n            /**\n                * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n                * rethrown.\n                */\n            runGuarded<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T;\n            /**\n                * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n                * the function.\n                *\n                * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n                * work that\n                * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n                *\n                * Any future tasks or microtasks scheduled from within this function will continue executing from\n                * outside of the Angular zone.\n                *\n                * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n                */\n            runOutsideAngular<T>(fn: (...args: any[]) => T): T;\n    }\n    /**\n        * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n        * to framework to perform rendering.\n        */\n    export class NoopNgZone implements NgZone {\n            readonly hasPendingMicrotasks: boolean;\n            readonly hasPendingMacrotasks: boolean;\n            readonly isStable: boolean;\n            readonly onUnstable: EventEmitter<any>;\n            readonly onMicrotaskEmpty: EventEmitter<any>;\n            readonly onStable: EventEmitter<any>;\n            readonly onError: EventEmitter<any>;\n            run(fn: () => any): any;\n            runGuarded(fn: () => any): any;\n            runOutsideAngular(fn: () => any): any;\n            runTask<T>(fn: () => any): any;\n    }\n}\n\ndeclare module '@angular/core/src/render/api' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { InjectionToken } from '@angular/core/src/di/injection_token';\n    import { Injector } from '@angular/core/src/di/injector';\n    import { ViewEncapsulation } from '@angular/core/src/metadata/view';\n    import { injectRenderer2 as render3InjectRenderer2 } from '@angular/core/src/render3/view_engine_compatibility';\n    /**\n        * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n        * @publicApi\n        */\n    export class RenderComponentType {\n            id: string;\n            templateUrl: string;\n            slotCount: number;\n            encapsulation: ViewEncapsulation;\n            styles: Array<string | any[]>;\n            animations: any;\n            constructor(id: string, templateUrl: string, slotCount: number, encapsulation: ViewEncapsulation, styles: Array<string | any[]>, animations: any);\n    }\n    /**\n        * @deprecated Debug info is handled internally in the view engine now.\n        */\n    export abstract class RenderDebugInfo {\n            abstract readonly injector: Injector;\n            abstract readonly component: any;\n            abstract readonly providerTokens: any[];\n            abstract readonly references: {\n                    [key: string]: any;\n            };\n            abstract readonly context: any;\n            abstract readonly source: string;\n    }\n    /**\n        * @deprecated Use the `Renderer2` instead.\n        */\n    export interface DirectRenderer {\n            remove(node: any): void;\n            appendChild(node: any, parent: any): void;\n            insertBefore(node: any, refNode: any): void;\n            nextSibling(node: any): any;\n            parentElement(node: any): any;\n    }\n    /**\n        * @deprecated Use the `Renderer2` instead.\n        * @publicApi\n        */\n    export abstract class Renderer {\n            abstract selectRootElement(selectorOrNode: string | any, debugInfo?: RenderDebugInfo): any;\n            abstract createElement(parentElement: any, name: string, debugInfo?: RenderDebugInfo): any;\n            abstract createViewRoot(hostElement: any): any;\n            abstract createTemplateAnchor(parentElement: any, debugInfo?: RenderDebugInfo): any;\n            abstract createText(parentElement: any, value: string, debugInfo?: RenderDebugInfo): any;\n            abstract projectNodes(parentElement: any, nodes: any[]): void;\n            abstract attachViewAfter(node: any, viewRootNodes: any[]): void;\n            abstract detachView(viewRootNodes: any[]): void;\n            abstract destroyView(hostElement: any, viewAllNodes: any[]): void;\n            abstract listen(renderElement: any, name: string, callback: Function): Function;\n            abstract listenGlobal(target: string, name: string, callback: Function): Function;\n            abstract setElementProperty(renderElement: any, propertyName: string, propertyValue: any): void;\n            abstract setElementAttribute(renderElement: any, attributeName: string, attributeValue?: string): void;\n            /**\n                * Used only in debug mode to serialize property changes to dom nodes as attributes.\n                */\n            abstract setBindingDebugInfo(renderElement: any, propertyName: string, propertyValue: string): void;\n            abstract setElementClass(renderElement: any, className: string, isAdd: boolean): void;\n            abstract setElementStyle(renderElement: any, styleName: string, styleValue?: string): void;\n            abstract invokeElementMethod(renderElement: any, methodName: string, args?: any[]): void;\n            abstract setText(renderNode: any, text: string): void;\n            abstract animate(element: any, startingStyles: any, keyframes: any[], duration: number, delay: number, easing: string, previousPlayers?: any[]): any;\n    }\n    export const Renderer2Interceptor: InjectionToken<Renderer2[]>;\n    /**\n        * Injectable service that provides a low-level interface for modifying the UI.\n        *\n        * Use this service to bypass Angular's templating and make custom UI changes that can't be\n        * expressed declaratively. For example if you need to set a property or an attribute whose name is\n        * not statically known, use {@link Renderer#setElementProperty setElementProperty} or\n        * {@link Renderer#setElementAttribute setElementAttribute} respectively.\n        *\n        * If you are implementing a custom renderer, you must implement this interface.\n        *\n        * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n        *\n        * @deprecated Use `RendererFactory2` instead.\n        * @publicApi\n        */\n    export abstract class RootRenderer {\n            abstract renderComponent(componentType: RenderComponentType): Renderer;\n    }\n    /**\n        * Used by `RendererFactory2` to associate custom rendering data and styles\n        * with a rendering implementation.\n        *  @publicApi\n        */\n    export interface RendererType2 {\n            /**\n                * A unique identifying string for the new renderer, used when creating\n                * unique styles for encapsulation.\n                */\n            id: string;\n            /**\n                * The view encapsulation type, which determines how styles are applied to\n                * DOM elements. One of\n                * - `Emulated` (default): Emulate native scoping of styles.\n                * - `Native`: Use the native encapsulation mechanism of the renderer.\n                * - `ShadowDom`: Use modern [Shadow\n                * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n                * create a ShadowRoot for component's host element.\n                * - `None`: Do not provide any template or style encapsulation.\n                */\n            encapsulation: ViewEncapsulation;\n            /**\n                * Defines CSS styles to be stored on a renderer instance.\n                */\n            styles: (string | any[])[];\n            /**\n                * Defines arbitrary developer-defined data to be stored on a renderer instance.\n                * This is useful for renderers that delegate to other renderers.\n                */\n            data: {\n                    [kind: string]: any;\n            };\n    }\n    /**\n        * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n        *\n        * @publicApi\n        */\n    export abstract class RendererFactory2 {\n            /**\n                * Creates and initializes a custom renderer for a host DOM element.\n                * @param hostElement The element to render.\n                * @param type The base class to implement.\n                * @returns The new custom renderer instance.\n                */\n            abstract createRenderer(hostElement: any, type: RendererType2 | null): Renderer2;\n            /**\n                * A callback invoked when rendering has begun.\n                */\n            abstract begin?(): void;\n            /**\n                * A callback invoked when rendering has completed.\n                */\n            abstract end?(): void;\n            /**\n                * Use with animations test-only mode. Notifies the test when rendering has completed.\n                * @returns The asynchronous result of the developer-defined function.\n                */\n            abstract whenRenderingDone?(): Promise<any>;\n    }\n    /**\n        * Flags for renderer-specific style modifiers.\n        * @publicApi\n        */\n    export enum RendererStyleFlags2 {\n            /**\n                * Marks a style as important.\n                */\n            Important = 1,\n            /**\n                * Marks a style as using dash case naming (this-is-dash-case).\n                */\n            DashCase = 2\n    }\n    /**\n        * Extend this base class to implement custom rendering. By default, Angular\n        * renders a template into DOM. You can use custom rendering to intercept\n        * rendering calls, or to render to something other than DOM.\n        *\n        * Create your custom renderer using `RendererFactory2`.\n        *\n        * Use a custom renderer to bypass Angular's templating and\n        * make custom UI changes that can't be expressed declaratively.\n        * For example if you need to set a property or an attribute whose name is\n        * not statically known, use the `setProperty()` or\n        * `setAttribute()` method.\n        *\n        * @publicApi\n        */\n    export abstract class Renderer2 {\n            /**\n                * Use to store arbitrary developer-defined data on a renderer instance,\n                * as an object containing key-value pairs.\n                * This is useful for renderers that delegate to other renderers.\n                */\n            abstract readonly data: {\n                    [key: string]: any;\n            };\n            /**\n                * Implement this callback to destroy the renderer or the host element.\n                */\n            abstract destroy(): void;\n            /**\n                * Implement this callback to create an instance of the host element.\n                * @param name An identifying name for the new element, unique within the namespace.\n                * @param namespace The namespace for the new element.\n                * @returns The new element.\n                */\n            abstract createElement(name: string, namespace?: string | null): any;\n            /**\n                * Implement this callback to add a comment to the DOM of the host element.\n                * @param value The comment text.\n                * @returns The modified element.\n                */\n            abstract createComment(value: string): any;\n            /**\n                * Implement this callback to add text to the DOM of the host element.\n                * @param value The text string.\n                * @returns The modified element.\n                */\n            abstract createText(value: string): any;\n            /**\n                * If null or undefined, the view engine won't call it.\n                * This is used as a performance optimization for production mode.\n                */\n            destroyNode: ((node: any) => void) | null;\n            /**\n                * Appends a child to a given parent node in the host element DOM.\n                * @param parent The parent node.\n                * @param newChild The new child node.\n                */\n            abstract appendChild(parent: any, newChild: any): void;\n            /**\n                * Implement this callback to insert a child node at a given position in a parent node\n                * in the host element DOM.\n                * @param parent The parent node.\n                * @param newChild The new child nodes.\n                * @param refChild The existing child node that should precede the new node.\n                */\n            abstract insertBefore(parent: any, newChild: any, refChild: any): void;\n            /**\n                * Implement this callback to remove a child node from the host element's DOM.\n                * @param parent The parent node.\n                * @param oldChild The child node to remove.\n                */\n            abstract removeChild(parent: any, oldChild: any): void;\n            /**\n                * Implement this callback to prepare an element to be bootstrapped\n                * as a root element, and return the element instance.\n                * @param selectorOrNode The DOM element.\n                * @param preserveContent Whether the contents of the root element\n                * should be preserved, or cleared upon bootstrap (default behavior).\n                * Use with `ViewEncapsulation.ShadowDom` to allow simple native\n                * content projection via `<slot>` elements.\n                * @returns The root element.\n                */\n            abstract selectRootElement(selectorOrNode: string | any, preserveContent?: boolean): any;\n            /**\n                * Implement this callback to get the parent of a given node\n                * in the host element's DOM.\n                * @param node The child node to query.\n                * @returns The parent node, or null if there is no parent.\n                * For WebWorkers, always returns true.\n                * This is because the check is synchronous,\n                * and the caller can't rely on checking for null.\n                */\n            abstract parentNode(node: any): any;\n            /**\n                * Implement this callback to get the next sibling node of a given node\n                * in the host element's DOM.\n                * @returns The sibling node, or null if there is no sibling.\n                * For WebWorkers, always returns a value.\n                * This is because the check is synchronous,\n                * and the caller can't rely on checking for null.\n                */\n            abstract nextSibling(node: any): any;\n            /**\n                * Implement this callback to set an attribute value for an element in the DOM.\n                * @param el The element.\n                * @param name The attribute name.\n                * @param value The new value.\n                * @param namespace The namespace.\n                */\n            abstract setAttribute(el: any, name: string, value: string, namespace?: string | null): void;\n            /**\n                * Implement this callback to remove an attribute from an element in the DOM.\n                * @param el The element.\n                * @param name The attribute name.\n                * @param namespace The namespace.\n                */\n            abstract removeAttribute(el: any, name: string, namespace?: string | null): void;\n            /**\n                * Implement this callback to add a class to an element in the DOM.\n                * @param el The element.\n                * @param name The class name.\n                */\n            abstract addClass(el: any, name: string): void;\n            /**\n                * Implement this callback to remove a class from an element in the DOM.\n                * @param el The element.\n                * @param name The class name.\n                */\n            abstract removeClass(el: any, name: string): void;\n            /**\n                * Implement this callback to set a CSS style for an element in the DOM.\n                * @param el The element.\n                * @param style The name of the style.\n                * @param value The new value.\n                * @param flags Flags for style variations. No flags are set by default.\n                */\n            abstract setStyle(el: any, style: string, value: any, flags?: RendererStyleFlags2): void;\n            /**\n                * Implement this callback to remove the value from a CSS style for an element in the DOM.\n                * @param el The element.\n                * @param style The name of the style.\n                * @param flags Flags for style variations to remove, if set. ???\n                */\n            abstract removeStyle(el: any, style: string, flags?: RendererStyleFlags2): void;\n            /**\n                * Implement this callback to set the value of a property of an element in the DOM.\n                * @param el The element.\n                * @param name The property name.\n                * @param value The new value.\n                */\n            abstract setProperty(el: any, name: string, value: any): void;\n            /**\n                * Implement this callback to set the value of a node in the host element.\n                * @param node The node.\n                * @param value The new value.\n                */\n            abstract setValue(node: any, value: string): void;\n            /**\n                * Implement this callback to start an event listener.\n                * @param target The context in which to listen for events. Can be\n                * the entire window or document, the body of the document, or a specific\n                * DOM element.\n                * @param eventName The event to listen for.\n                * @param callback A handler function to invoke when the event occurs.\n                * @returns An \"unlisten\" function for disposing of this handler.\n                */\n            abstract listen(target: 'window' | 'document' | 'body' | any, eventName: string, callback: (event: any) => boolean | void): () => void;\n    }\n    export const SWITCH_RENDERER2_FACTORY__POST_R3__: typeof render3InjectRenderer2;\n}\n\ndeclare module '@angular/core/src/linker/component_factory_resolver' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Injector } from '@angular/core/src/di/injector';\n    import { Type } from '@angular/core/src/type';\n    import { ComponentFactory, ComponentRef } from '@angular/core/src/linker/component_factory';\n    import { NgModuleRef } from '@angular/core/src/linker/ng_module_factory';\n    export function noComponentFactoryError(component: Function): Error;\n    export function getComponent(error: Error): Type<any>;\n    /**\n        * @publicApi\n        */\n    export abstract class ComponentFactoryResolver {\n            static NULL: ComponentFactoryResolver;\n            abstract resolveComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n    }\n    export class CodegenComponentFactoryResolver implements ComponentFactoryResolver {\n            constructor(factories: ComponentFactory<any>[], _parent: ComponentFactoryResolver, _ngModule: NgModuleRef<any>);\n            resolveComponentFactory<T>(component: {\n                    new (...args: any[]): T;\n            }): ComponentFactory<T>;\n    }\n    export class ComponentFactoryBoundToModule<C> extends ComponentFactory<C> {\n            readonly selector: string;\n            readonly componentType: Type<any>;\n            readonly ngContentSelectors: string[];\n            readonly inputs: {\n                    propName: string;\n                    templateName: string;\n            }[];\n            readonly outputs: {\n                    propName: string;\n                    templateName: string;\n            }[];\n            constructor(factory: ComponentFactory<C>, ngModule: NgModuleRef<any>);\n            create(injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string | any, ngModule?: NgModuleRef<any>): ComponentRef<C>;\n    }\n}\n\ndeclare module '@angular/core/src/linker/element_ref' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { injectElementRef as render3InjectElementRef } from '@angular/core/src/render3/view_engine_compatibility';\n    /**\n        * A wrapper around a native element inside of a View.\n        *\n        * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n        * element.\n        *\n        * @security Permitting direct access to the DOM can make your application more vulnerable to\n        * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n        * [Security Guide](http://g.co/ng/security).\n        *\n        * @publicApi\n        */\n    export class ElementRef<T = any> {\n            /**\n                * The underlying native element or `null` if direct access to native elements is not supported\n                * (e.g. when the application runs in a web worker).\n                *\n                * <div class=\"callout is-critical\">\n                *   <header>Use with caution</header>\n                *   <p>\n                *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n                *    data-binding provided by Angular instead. Alternatively you can take a look at {@link\n                * Renderer2}\n                *    which provides API that can safely be used even when direct access to native elements is not\n                *    supported.\n                *   </p>\n                *   <p>\n                *    Relying on direct DOM access creates tight coupling between your application and rendering\n                *    layers which will make it impossible to separate the two and deploy your application into a\n                *    web worker.\n                *   </p>\n                * </div>\n                *\n                */\n            nativeElement: T;\n            constructor(nativeElement: T);\n    }\n    export const SWITCH_ELEMENT_REF_FACTORY__POST_R3__: typeof render3InjectElementRef;\n}\n\ndeclare module '@angular/core/src/linker/ng_module_factory_loader' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { NgModuleFactory } from '@angular/core/src/linker/ng_module_factory';\n    /**\n        * Used to load ng module factories.\n        *\n        * @publicApi\n        */\n    export abstract class NgModuleFactoryLoader {\n            abstract load(path: string): Promise<NgModuleFactory<any>>;\n    }\n    /**\n        * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n        * @publicApi\n        */\n    export function registerModuleFactory(id: string, factory: NgModuleFactory<any>): void;\n    export function clearModulesForTest(): void;\n    /**\n        * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n        * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n        * cannot be found.\n        * @publicApi\n        */\n    export function getModuleFactory(id: string): NgModuleFactory<any>;\n}\n\ndeclare module '@angular/core/src/linker/query_list' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Observable } from 'rxjs';\n    /**\n        * An unmodifiable list of items that Angular keeps up to date when the state\n        * of the application changes.\n        *\n        * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n        * provide.\n        *\n        * Implements an iterable interface, therefore it can be used in both ES6\n        * javascript `for (var i of items)` loops as well as in Angular templates with\n        * `*ngFor=\"let i of myList\"`.\n        *\n        * Changes can be observed by subscribing to the changes `Observable`.\n        *\n        * NOTE: In the future this class will implement an `Observable` interface.\n        *\n        * @usageNotes\n        * ### Example\n        * ```typescript\n        * @Component({...})\n        * class Container {\n        *   @ViewChildren(Item) items:QueryList<Item>;\n        * }\n        * ```\n        *\n        * @publicApi\n        */\n    export class QueryList<T> {\n            readonly dirty = true;\n            readonly changes: Observable<any>;\n            readonly length: number;\n            readonly first: T;\n            readonly last: T;\n            /**\n                * See\n                * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n                */\n            map<U>(fn: (item: T, index: number, array: T[]) => U): U[];\n            /**\n                * See\n                * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n                */\n            filter(fn: (item: T, index: number, array: T[]) => boolean): T[];\n            /**\n                * See\n                * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n                */\n            find(fn: (item: T, index: number, array: T[]) => boolean): T | undefined;\n            /**\n                * See\n                * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n                */\n            reduce<U>(fn: (prevValue: U, curValue: T, curIndex: number, array: T[]) => U, init: U): U;\n            /**\n                * See\n                * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n                */\n            forEach(fn: (item: T, index: number, array: T[]) => void): void;\n            /**\n                * See\n                * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n                */\n            some(fn: (value: T, index: number, array: T[]) => boolean): boolean;\n            toArray(): T[];\n            toString(): string;\n            reset(res: Array<T | any[]>): void;\n            notifyOnChanges(): void;\n            /** internal */\n            setDirty(): void;\n            /** internal */\n            destroy(): void;\n    }\n}\n\ndeclare module '@angular/core/src/linker/system_js_ng_module_factory_loader' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Compiler } from '@angular/core/src/linker/compiler';\n    import { NgModuleFactory } from '@angular/core/src/linker/ng_module_factory';\n    import { NgModuleFactoryLoader } from '@angular/core/src/linker/ng_module_factory_loader';\n    /**\n        * Configuration for SystemJsNgModuleLoader.\n        * token.\n        *\n        * @publicApi\n        */\n    export abstract class SystemJsNgModuleLoaderConfig {\n            /**\n                * Prefix to add when computing the name of the factory module for a given module name.\n                */\n            factoryPathPrefix: string;\n            /**\n                * Suffix to add when computing the name of the factory module for a given module name.\n                */\n            factoryPathSuffix: string;\n    }\n    /**\n        * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n        * @publicApi\n        */\n    export class SystemJsNgModuleLoader implements NgModuleFactoryLoader {\n            constructor(_compiler: Compiler, config?: SystemJsNgModuleLoaderConfig);\n            load(path: string): Promise<NgModuleFactory<any>>;\n    }\n}\n\ndeclare module '@angular/core/src/linker/template_ref' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { injectTemplateRef as render3InjectTemplateRef } from '@angular/core/src/render3/view_engine_compatibility';\n    import { ElementRef } from '@angular/core/src/linker/element_ref';\n    import { EmbeddedViewRef } from '@angular/core/src/linker/view_ref';\n    /**\n        * Represents an embedded template that can be used to instantiate embedded views.\n        * To instantiate embedded views based on a template, use the `ViewContainerRef`\n        * method `createEmbeddedView()`.\n        *\n        * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n        * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n        * is injected into the constructor of the directive,\n        * using the `TemplateRef` token.\n        *\n        * You can also use a `Query` to find a `TemplateRef` associated with\n        * a component or a directive.\n        *\n        * @see `ViewContainerRef`\n        * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n        *\n        * @publicApi\n        */\n    export abstract class TemplateRef<C> {\n            /**\n                * The anchor element in the parent view for this embedded view.\n                *\n                * The data-binding and injection contexts of embedded views created from this `TemplateRef`\n                * inherit from the contexts of this location.\n                *\n                * Typically new embedded views are attached to the view container of this location, but in\n                * advanced use-cases, the view can be attached to a different container while keeping the\n                * data-binding and injection context from the original location.\n                *\n                */\n            abstract readonly elementRef: ElementRef;\n            /**\n                * Creates a view object and attaches it to the view container of the parent view.\n                * @param context The context for the new view, inherited from the anchor element.\n                * @returns The new view object.\n                */\n            abstract createEmbeddedView(context: C): EmbeddedViewRef<C>;\n    }\n    export const SWITCH_TEMPLATE_REF_FACTORY__POST_R3__: typeof render3InjectTemplateRef;\n}\n\ndeclare module '@angular/core/src/linker/view_container_ref' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Injector } from '@angular/core/src/di/injector';\n    import { injectViewContainerRef as render3InjectViewContainerRef } from '@angular/core/src/render3/view_engine_compatibility';\n    import { ComponentFactory, ComponentRef } from '@angular/core/src/linker/component_factory';\n    import { ElementRef } from '@angular/core/src/linker/element_ref';\n    import { NgModuleRef } from '@angular/core/src/linker/ng_module_factory';\n    import { TemplateRef } from '@angular/core/src/linker/template_ref';\n    import { EmbeddedViewRef, ViewRef } from '@angular/core/src/linker/view_ref';\n    /**\n        * Represents a container where one or more views can be attached to a component.\n        *\n        * Can contain *host views* (created by instantiating a\n        * component with the `createComponent()` method), and *embedded views*\n        * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n        *\n        * A view container instance can contain other view containers,\n        * creating a [view hierarchy](guide/glossary#view-tree).\n        *\n        * @see `ComponentRef`\n        * @see `EmbeddedViewRef`\n        *\n        * @publicApi\n        */\n    export abstract class ViewContainerRef {\n            /**\n                * Anchor element that specifies the location of this container in the containing view.\n                * Each view container can have only one anchor element, and each anchor element\n                * can have only a single view container.\n                *\n                * Root elements of views attached to this container become siblings of the anchor element in\n                * the rendered view.\n                *\n                * Access the `ViewContainerRef` of an element by placing a `Directive` injected\n                * with `ViewContainerRef` on the element, or use a `ViewChild` query.\n                *\n                * <!-- TODO: rename to anchorElement -->\n                */\n            abstract readonly element: ElementRef;\n            /**\n                * The [dependency injector](guide/glossary#injector) for this view container.\n                */\n            abstract readonly injector: Injector;\n            /** @deprecated No replacement */\n            abstract readonly parentInjector: Injector;\n            /**\n                * Destroys all views in this container.\n                */\n            abstract clear(): void;\n            /**\n                * Retrieves a view from this container.\n                * @param index The 0-based index of the view to retrieve.\n                * @returns The `ViewRef` instance, or null if the index is out of range.\n                */\n            abstract get(index: number): ViewRef | null;\n            /**\n                * Reports how many views are currently attached to this container.\n                * @returns The number of views.\n                */\n            abstract readonly length: number;\n            /**\n                * Instantiates an embedded view and inserts it\n                * into this container.\n                * @param templateRef The HTML template that defines the view.\n                * @param index The 0-based index at which to insert the new view into this container.\n                * If not specified, appends the new view as the last entry.\n                *\n                * @returns The `ViewRef` instance for the newly created view.\n                */\n            abstract createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number): EmbeddedViewRef<C>;\n            /**\n                * Instantiates a single component and inserts its host view into this container.\n                *\n                * @param componentFactory The factory to use.\n                * @param index The index at which to insert the new component's host view into this container.\n                * If not specified, appends the new view as the last entry.\n                * @param injector The injector to use as the parent for the new component.\n                * @param projectableNodes\n                * @param ngModule\n                *\n                * @returns The new component instance, containing the host view.\n                *\n                */\n            abstract createComponent<C>(componentFactory: ComponentFactory<C>, index?: number, injector?: Injector, projectableNodes?: any[][], ngModule?: NgModuleRef<any>): ComponentRef<C>;\n            /**\n                * Inserts a view into this container.\n                * @param viewRef The view to insert.\n                * @param index The 0-based index at which to insert the view.\n                * If not specified, appends the new view as the last entry.\n                * @returns The inserted `ViewRef` instance.\n                *\n                */\n            abstract insert(viewRef: ViewRef, index?: number): ViewRef;\n            /**\n                * Moves a view to a new location in this container.\n                * @param viewRef The view to move.\n                * @param index The 0-based index of the new location.\n                * @returns The moved `ViewRef` instance.\n                */\n            abstract move(viewRef: ViewRef, currentIndex: number): ViewRef;\n            /**\n                * Returns the index of a view within the current container.\n                * @param viewRef The view to query.\n                * @returns The 0-based index of the view's position in this container,\n                * or `-1` if this container doesn't contain the view.\n                */\n            abstract indexOf(viewRef: ViewRef): number;\n            /**\n                * Destroys a view attached to this container\n                * @param index The 0-based index of the view to destroy.\n                * If not specified, the last view in the container is removed.\n                */\n            abstract remove(index?: number): void;\n            /**\n                * Detaches a view from this container without destroying it.\n                * Use along with `insert()` to move a view within the current container.\n                * @param index The 0-based index of the view to detach.\n                * If not specified, the last view in the container is detached.\n                */\n            abstract detach(index?: number): ViewRef | null;\n    }\n    export const SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__: typeof render3InjectViewContainerRef;\n}\n\ndeclare module '@angular/core/src/view/index' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    export { anchorDef, elementDef } from '@angular/core/src/view/element';\n    export { clearOverrides, createNgModuleFactory, overrideComponentView, overrideProvider } from '@angular/core/src/view/entrypoint';\n    export { ngContentDef } from '@angular/core/src/view/ng_content';\n    export { moduleDef, moduleProvideDef } from '@angular/core/src/view/ng_module';\n    export { directiveDef, pipeDef, providerDef } from '@angular/core/src/view/provider';\n    export { pureArrayDef, pureObjectDef, purePipeDef } from '@angular/core/src/view/pure_expression';\n    export { queryDef } from '@angular/core/src/view/query';\n    export { ViewRef_, createComponentFactory, getComponentViewDefinitionFactory, nodeValue } from '@angular/core/src/view/refs';\n    export { initServicesIfNeeded } from '@angular/core/src/view/services';\n    export { textDef } from '@angular/core/src/view/text';\n    export { EMPTY_ARRAY, EMPTY_MAP, createRendererType2, elementEventFullName, inlineInterpolate, interpolate, rootRenderNodes, tokenKey, unwrapValue } from '@angular/core/src/view/util';\n    export { viewDef } from '@angular/core/src/view/view';\n    export { attachEmbeddedView, detachEmbeddedView, moveEmbeddedView } from '@angular/core/src/view/view_attach';\n    export * from '@angular/core/src/view/types';\n}\n\ndeclare module '@angular/core/src/change_detection/change_detection' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    import { IterableDiffers } from '@angular/core/src/change_detection/differs/iterable_differs';\n    import { KeyValueDiffers } from '@angular/core/src/change_detection/differs/keyvalue_differs';\n    export { SimpleChanges } from '@angular/core/src/metadata/lifecycle_hooks';\n    export { SimpleChange, WrappedValue, devModeEqual } from '@angular/core/src/change_detection/change_detection_util';\n    export { ChangeDetectorRef } from '@angular/core/src/change_detection/change_detector_ref';\n    export { ChangeDetectionStrategy, ChangeDetectorStatus, isDefaultChangeDetectionStrategy } from '@angular/core/src/change_detection/constants';\n    export { DefaultIterableDifferFactory } from '@angular/core/src/change_detection/differs/default_iterable_differ';\n    export { DefaultIterableDiffer } from '@angular/core/src/change_detection/differs/default_iterable_differ';\n    export { DefaultKeyValueDifferFactory } from '@angular/core/src/change_detection/differs/default_keyvalue_differ';\n    export { CollectionChangeRecord, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, IterableDiffers, NgIterable, TrackByFunction } from '@angular/core/src/change_detection/differs/iterable_differs';\n    export { KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory, KeyValueDiffers } from '@angular/core/src/change_detection/differs/keyvalue_differs';\n    export { PipeTransform } from '@angular/core/src/change_detection/pipe_transform';\n    export const defaultIterableDiffers: IterableDiffers;\n    export const defaultKeyValueDiffers: KeyValueDiffers;\n}\n\ndeclare module '@angular/core/src/profile/wtf_impl' {\n    /**\n        * A scope function for the Web Tracing Framework (WTF).\n        *\n        * @publicApi\n        */\n    export interface WtfScopeFn {\n            (arg0?: any, arg1?: any): any;\n    }\n    export interface Range {\n    }\n    export interface Scope {\n            (...args: any[] /** TODO #9100 */): any;\n    }\n    export function detectWTF(): boolean;\n    export function createScope(signature: string, flags?: any): any;\n    export function leave<T>(scope: Scope): void;\n    export function leave<T>(scope: Scope, returnValue?: T): T;\n    export function startTimeRange(rangeType: string, action: string): Range;\n    export function endTimeRange(range: Range): void;\n}\n\ndeclare module '@angular/core/src/change_detection/change_detection_util' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    export function devModeEqual(a: any, b: any): boolean;\n    /**\n        * Indicates that the result of a {@link Pipe} transformation has changed even though the\n        * reference has not changed.\n        *\n        * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n        * is stored.\n        *\n        * Example:\n        *\n        * ```\n        * if (this._latestValue === this._latestReturnedValue) {\n        *    return this._latestReturnedValue;\n        *  } else {\n        *    this._latestReturnedValue = this._latestValue;\n        *    return WrappedValue.wrap(this._latestValue); // this will force update\n        *  }\n        * ```\n        *\n        * @publicApi\n        */\n    export class WrappedValue {\n            /** @deprecated from 5.3, use `unwrap()` instead - will switch to protected */\n            wrapped: any;\n            constructor(value: any);\n            /** Creates a wrapped value. */\n            static wrap(value: any): WrappedValue;\n            /**\n                * Returns the underlying value of a wrapped value.\n                * Returns the given `value` when it is not wrapped.\n                **/\n            static unwrap(value: any): any;\n            /** Returns true if `value` is a wrapped value. */\n            static isWrapped(value: any): value is WrappedValue;\n    }\n    /**\n        * Represents a basic change from a previous to a new value.\n        *\n        * @publicApi\n        */\n    export class SimpleChange {\n            previousValue: any;\n            currentValue: any;\n            firstChange: boolean;\n            constructor(previousValue: any, currentValue: any, firstChange: boolean);\n            /**\n                * Check whether the new value is the first value assigned.\n                */\n            isFirstChange(): boolean;\n    }\n    export function isListLikeIterable(obj: any): boolean;\n    export function areIterablesEqual(a: any, b: any, comparator: (a: any, b: any) => boolean): boolean;\n    export function iterateListLike(obj: any, fn: (p: any) => any): void;\n    export function isJsObject(o: any): boolean;\n}\n\ndeclare module '@angular/core/src/change_detection/constants' {\n    /**\n        * The strategy that the default change detector uses to detect changes.\n        * When set, takes effect the next time change detection is triggered.\n        *\n        * @publicApi\n        */\n    export enum ChangeDetectionStrategy {\n            /**\n                * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n                * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n                * Change detection can still be explictly invoked.\n                */\n            OnPush = 0,\n            /**\n                * Use the default `CheckAlways` strategy, in which change detection is automatic until\n                * explicitly deactivated.\n                */\n            Default = 1\n    }\n    /**\n        * Defines the possible states of the default change detector.\n        * @see `ChangeDetectorRef`\n        */\n    export enum ChangeDetectorStatus {\n            /**\n                * A state in which, after calling `detectChanges()`, the change detector\n                * state becomes `Checked`, and must be explicitly invoked or reactivated.\n                */\n            CheckOnce = 0,\n            /**\n                * A state in which change detection is skipped until the change detector mode\n                * becomes `CheckOnce`.\n                */\n            Checked = 1,\n            /**\n                * A state in which change detection continues automatically until explictly\n                * deactivated.\n                */\n            CheckAlways = 2,\n            /**\n                * A state in which a change detector sub tree is not a part of the main tree and\n                * should be skipped.\n                */\n            Detached = 3,\n            /**\n                * Indicates that the change detector encountered an error checking a binding\n                * or calling a directive lifecycle method and is now in an inconsistent state. Change\n                * detectors in this state do not detect changes.\n                */\n            Errored = 4,\n            /**\n                * Indicates that the change detector has been destroyed.\n                */\n            Destroyed = 5\n    }\n    /**\n        * Reports whether a given strategy is currently the default for change detection.\n        * @param changeDetectionStrategy The strategy to check.\n        * @returns True if the given strategy is the current default, false otherwise.\n        * @see `ChangeDetectorStatus`\n        * @see `ChangeDetectorRef`\n        */\n    export function isDefaultChangeDetectionStrategy(changeDetectionStrategy: ChangeDetectionStrategy): boolean;\n}\n\ndeclare module '@angular/core/src/console' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    export class Console {\n        log(message: string): void;\n        warn(message: string): void;\n    }\n}\n\ndeclare module '@angular/core/src/di/scope' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { InjectionToken } from '@angular/core/src/di/injection_token';\n    /**\n        * An internal token whose presence in an injector indicates that the injector should treat itself\n        * as a root scoped injector when processing requests for unknown tokens which may indicate\n        * they are provided in the root scope.\n        */\n    export const APP_ROOT: InjectionToken<boolean>;\n}\n\ndeclare module '@angular/core/src/ivy_switch' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    export const SWITCH_IVY_ENABLED__POST_R3__ = true;\n    export const ivyEnabled = false;\n}\n\ndeclare module '@angular/core/src/metadata/resource_loading' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Component } from '@angular/core/src/metadata/directives';\n    /**\n        * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n        *\n        * Example:\n        * ```\n        * @Component({\n        *   selector: 'my-comp',\n        *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n        * })\n        * class MyComponnent{\n        * }\n        *\n        * // Calling `renderComponent` will fail because `MyComponent`'s `@Compenent.templateUrl`\n        * // needs to be resolved because `renderComponent` is synchronous process.\n        * // renderComponent(MyComponent);\n        *\n        * // Calling `resolveComponentResources` will resolve `@Compenent.templateUrl` into\n        * // `@Compenent.template`, which would allow `renderComponent` to proceed in synchronous manner.\n        * // Use browser's `fetch` function as the default resource resolution strategy.\n        * resolveComponentResources(fetch).then(() => {\n        *   // After resolution all URLs have been converted into strings.\n        *   renderComponent(MyComponent);\n        * });\n        *\n        * ```\n        *\n        * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n        * to call this method outside JIT mode.\n        *\n        * @param resourceResolver a function which is responsible to returning a `Promise` of the resolved\n        * URL. Browser's `fetch` method is a good default implementation.\n        */\n    export function resolveComponentResources(resourceResolver: (url: string) => (Promise<string | {\n            text(): Promise<string>;\n    }>)): Promise<null>;\n    export function maybeQueueResolutionOfComponentResources(metadata: Component): void;\n    export function componentNeedsResolution(component: Component): string | number | undefined;\n    export function clearResolutionOfComponentResourcesQueue(): void;\n}\n\ndeclare module '@angular/core/src/reflection/reflection_capabilities' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Type } from '@angular/core/src/type';\n    import { PlatformReflectionCapabilities } from '@angular/core/src/reflection/platform_reflection_capabilities';\n    import { GetterFn, MethodFn, SetterFn } from '@angular/core/src/reflection/types';\n    /**\n        * Attention: These regex has to hold even if the code is minified!\n        */\n    export const DELEGATE_CTOR: RegExp;\n    export const INHERITED_CLASS: RegExp;\n    export const INHERITED_CLASS_WITH_CTOR: RegExp;\n    export class ReflectionCapabilities implements PlatformReflectionCapabilities {\n            constructor(reflect?: any);\n            isReflectionEnabled(): boolean;\n            factory<T>(t: Type<T>): (args: any[]) => T;\n            parameters(type: Type<any>): any[][];\n            annotations(typeOrFunc: Type<any>): any[];\n            propMetadata(typeOrFunc: any): {\n                    [key: string]: any[];\n            };\n            hasLifecycleHook(type: any, lcProperty: string): boolean;\n            guards(type: any): {\n                    [key: string]: any;\n            };\n            getter(name: string): GetterFn;\n            setter(name: string): SetterFn;\n            method(name: string): MethodFn;\n            importUri(type: any): string;\n            resourceUri(type: any): string;\n            resolveIdentifier(name: string, moduleUrl: string, members: string[], runtime: any): any;\n            resolveEnum(enumIdentifier: any, name: string): any;\n    }\n}\n\ndeclare module '@angular/core/src/reflection/types' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    export type SetterFn = (obj: any, value: any) => void;\n    export type GetterFn = (obj: any) => any;\n    export type MethodFn = (obj: any, args: any[]) => any;\n}\n\ndeclare module '@angular/core/src/sanitization/html_sanitizer' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    export const VALID_ELEMENTS: {\n            [k: string]: boolean;\n    };\n    export const URI_ATTRS: {\n            [k: string]: boolean;\n    };\n    export const SRCSET_ATTRS: {\n            [k: string]: boolean;\n    };\n    export const VALID_ATTRS: {\n            [k: string]: boolean;\n    };\n    /**\n        * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n        * the DOM in a browser environment.\n        */\n    export function _sanitizeHtml(defaultDoc: any, unsafeHtmlInput: string): string;\n    export function getTemplateContent(el: Node): Node | null;\n}\n\ndeclare module '@angular/core/src/sanitization/style_sanitizer' {\n    /**\n        * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n        * value) and returns a value that is safe to use in a browser environment.\n        */\n    export function _sanitizeStyle(value: string): string;\n    /**\n        * Used to intercept and sanitize style values before they are written to the renderer.\n        *\n        * This function is designed to be called in two modes. When a value is not provided\n        * then the function will return a boolean whether a property will be sanitized later.\n        * If a value is provided then the sanitized version of that will be returned.\n        */\n    export interface StyleSanitizeFn {\n            /** This mode is designed to instruct whether the property will be used for sanitization\n                * at a later point */\n            (prop: string): boolean;\n            /** This mode is designed to sanitize the provided value */\n            (prop: string, value: string): string;\n    }\n}\n\ndeclare module '@angular/core/src/sanitization/url_sanitizer' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    export function _sanitizeUrl(url: string): string;\n    export function sanitizeSrcset(srcset: string): string;\n}\n\ndeclare module '@angular/core/src/util' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    const _global: {\n            [name: string]: any;\n    };\n    /**\n        * Attention: whenever providing a new value, be sure to add an\n        * entry into the corresponding `....externs.js` file,\n        * so that closure won't use that global for its purposes.\n        */\n    export { _global as global };\n    export function getSymbolIterator(): string | symbol;\n    export function scheduleMicroTask(fn: Function): void;\n    export function looseIdentical(a: any, b: any): boolean;\n    export function stringify(token: any): string;\n    /**\n        * Convince closure compiler that the wrapped function has no side-effects.\n        *\n        * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n        * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n        * It is important that the return value for the `noSideEffects` function be assigned\n        * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n        * compiler.\n        */\n    export function noSideEffects(fn: () => void): string;\n}\n\ndeclare module '@angular/core/src/util/lang' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Observable } from 'rxjs';\n    /**\n        * Determine if the argument is shaped like a Promise\n        */\n    export function isPromise(obj: any): obj is Promise<any>;\n    /**\n        * Determine if the argument is an Observable\n        */\n    export function isObservable(obj: any | Observable<any>): obj is Observable<any>;\n}\n\ndeclare module '@angular/core/src/view/provider' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    import { BindingDef, DepDef, DepFlags, NodeDef, NodeFlags, OutputDef, QueryValueType, ViewData } from '@angular/core/src/view/types';\n    export function directiveDef(checkIndex: number, flags: NodeFlags, matchedQueries: null | [string | number, QueryValueType][], childCount: number, ctor: any, deps: ([DepFlags, any] | any)[], props?: null | {\n        [name: string]: [number, string];\n    }, outputs?: null | {\n        [name: string]: string;\n    }): NodeDef;\n    export function pipeDef(flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef;\n    export function providerDef(flags: NodeFlags, matchedQueries: null | [string | number, QueryValueType][], token: any, value: any, deps: ([DepFlags, any] | any)[]): NodeDef;\n    export function _def(checkIndex: number, flags: NodeFlags, matchedQueriesDsl: [string | number, QueryValueType][] | null, childCount: number, token: any, value: any, deps: ([DepFlags, any] | any)[], bindings?: BindingDef[], outputs?: OutputDef[]): NodeDef;\n    export function createProviderInstance(view: ViewData, def: NodeDef): any;\n    export function createPipeInstance(view: ViewData, def: NodeDef): any;\n    export function createDirectiveInstance(view: ViewData, def: NodeDef): any;\n    export function checkAndUpdateDirectiveInline(view: ViewData, def: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any, v9: any): boolean;\n    export function checkAndUpdateDirectiveDynamic(view: ViewData, def: NodeDef, values: any[]): boolean;\n    export const NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR: {};\n    export function resolveDep(view: ViewData, elDef: NodeDef, allowPrivateServices: boolean, depDef: DepDef, notFoundValue?: any): any;\n    export function callLifecycleHooksChildrenFirst(view: ViewData, lifecycles: NodeFlags): void;\n}\n\ndeclare module '@angular/core/src/render3/index' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    import { LifecycleHooksFeature, renderComponent, whenRendered } from '@angular/core/src/render3/component';\n    import { defineBase, defineComponent, defineDirective, defineNgModule, definePipe } from '@angular/core/src/render3/definition';\n    import { getHostElement, getRenderedText } from '@angular/core/src/render3/discovery_utils';\n    import { InheritDefinitionFeature } from '@angular/core/src/render3/features/inherit_definition_feature';\n    import { NgOnChangesFeature } from '@angular/core/src/render3/features/ng_onchanges_feature';\n    import { ProvidersFeature } from '@angular/core/src/render3/features/providers_feature';\n    import { BaseDef, ComponentDef, ComponentDefWithMeta, ComponentTemplate, ComponentType, DirectiveDef, DirectiveDefFlags, DirectiveDefWithMeta, DirectiveType, PipeDef, PipeDefWithMeta } from '@angular/core/src/render3/interfaces/definition';\n    export { ComponentFactory, ComponentFactoryResolver, ComponentRef, WRAP_RENDERER_FACTORY2, injectComponentFactoryResolver } from '@angular/core/src/render3/component_ref';\n    export { getFactoryOf, getInheritedFactory } from '@angular/core/src/render3/di';\n    export { RenderFlags } from '@angular/core/src/render3/interfaces/definition';\n    export { CssSelectorList } from '@angular/core/src/render3/interfaces/projection';\n    export { bind, interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV, container, containerRefreshStart, containerRefreshEnd, nextContext, element, elementAttribute, elementClassProp, elementEnd, elementProperty, elementStart, elementContainerStart, elementContainerEnd, elementStyling, elementStylingMap, elementStyleProp, elementStylingApply, listener, store, load, namespaceHTML, namespaceMathML, namespaceSVG, projection, projectionDef, text, textBinding, template, reference, embeddedViewStart, embeddedViewEnd, detectChanges, markDirty, tick, directiveInject, injectAttribute, } from '@angular/core/src/render3/instructions';\n    export { getCurrentView, restoreView, enableBindings, disableBindings, } from '@angular/core/src/render3/state';\n    export { i18n, i18nAttributes, i18nExp, i18nStart, i18nEnd, i18nApply, i18nPostprocess } from '@angular/core/src/render3/i18n';\n    export { NgModuleFactory, NgModuleRef, NgModuleType } from '@angular/core/src/render3/ng_module_ref';\n    export { AttributeMarker } from '@angular/core/src/render3/interfaces/node';\n    export { setClassMetadata, } from '@angular/core/src/render3/metadata';\n    export { pipe, pipeBind1, pipeBind2, pipeBind3, pipeBind4, pipeBindV, } from '@angular/core/src/render3/pipe';\n    export { QueryList, query, queryRefresh, } from '@angular/core/src/render3/query';\n    export { registerContentQuery, loadQueryList, } from '@angular/core/src/render3/instructions';\n    export { pureFunction0, pureFunction1, pureFunction2, pureFunction3, pureFunction4, pureFunction5, pureFunction6, pureFunction7, pureFunction8, pureFunctionV, } from '@angular/core/src/render3/pure_function';\n    export { templateRefExtractor } from '@angular/core/src/render3/view_engine_compatibility_prebound';\n    export { BaseDef, ComponentDef, ComponentDefWithMeta, ComponentTemplate, ComponentType, DirectiveDef, DirectiveDefFlags, DirectiveDefWithMeta, DirectiveType, NgOnChangesFeature, InheritDefinitionFeature, ProvidersFeature, PipeDef, PipeDefWithMeta, LifecycleHooksFeature, defineComponent, defineDirective, defineNgModule, defineBase, definePipe, getHostElement, getRenderedText, renderComponent, whenRendered, };\n    export { NO_CHANGE } from '@angular/core/src/render3/tokens';\n}\n\ndeclare module '@angular/core/src/render3/debug' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Renderer2, RendererType2 } from '@angular/core/src/render/api';\n    import { DebugRendererFactory2 } from '@angular/core/src/view/services';\n    /**\n        * Adapts the DebugRendererFactory2 to create a DebugRenderer2 specific for IVY.\n        *\n        * The created DebugRenderer know how to create a Debug Context specific to IVY.\n        */\n    export class Render3DebugRendererFactory2 extends DebugRendererFactory2 {\n            createRenderer(element: any, renderData: RendererType2 | null): Renderer2;\n    }\n}\n\ndeclare module '@angular/core/src/render3/jit/directive' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Query } from '@angular/core/src/metadata/di';\n    import { Component, Directive } from '@angular/core/src/metadata/directives';\n    import { Type } from '@angular/core/src/type';\n    import { R3QueryMetadataFacade } from '@angular/core/src/render3/jit/compiler_facade_interface';\n    /**\n        * Compile an Angular component according to its decorator metadata, and patch the resulting\n        * ngComponentDef onto the component type.\n        *\n        * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n        * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n        * will enqueue resource resolution into a global queue and will fail to return the `ngComponentDef`\n        * until the global queue has been resolved with a call to `resolveComponentResources`.\n        */\n    export function compileComponent(type: Type<any>, metadata: Component): void;\n    /**\n        * Compile an Angular directive according to its decorator metadata, and patch the resulting\n        * ngDirectiveDef onto the component type.\n        *\n        * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n        * will resolve when compilation completes and the directive becomes usable.\n        */\n    export function compileDirective(type: Type<any>, directive: Directive): void;\n    export function extendsDirectlyFromObject(type: Type<any>): boolean;\n    export function convertToR3QueryMetadata(propertyName: string, ann: Query): R3QueryMetadataFacade;\n}\n\ndeclare module '@angular/core/src/render3/jit/module' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { NgModule, NgModuleTransitiveScopes } from '@angular/core/src/metadata/ng_module';\n    import { Type } from '@angular/core/src/type';\n    import { ComponentDef } from '@angular/core/src/render3/interfaces/definition';\n    /**\n        * Compiles a module in JIT mode.\n        *\n        * This function automatically gets called when a class has a `@NgModule` decorator.\n        */\n    export function compileNgModule(moduleType: Type<any>, ngModule: NgModule): void;\n    /**\n        * Compiles and adds the `ngModuleDef` and `ngInjectorDef` properties to the module class.\n        */\n    export function compileNgModuleDefs(moduleType: Type<any>, ngModule: NgModule): void;\n    /**\n        * Patch the definition of a component with directives and pipes from the compilation scope of\n        * a given module.\n        */\n    export function patchComponentDefWithScope<C>(componentDef: ComponentDef<C>, transitiveScopes: NgModuleTransitiveScopes): void;\n    /**\n        * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n        *\n        * This operation is memoized and the result is cached on the module's definition. It can be called\n        * on modules with components that have not fully compiled yet, but the result should not be used\n        * until they have.\n        */\n    export function transitiveScopesFor<T>(moduleType: Type<T>): NgModuleTransitiveScopes;\n}\n\ndeclare module '@angular/core/src/render3/jit/pipe' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    import { Pipe } from '@angular/core/src/metadata/directives';\n    import { Type } from '@angular/core/src/type';\n    export function compilePipe(type: Type<any>, meta: Pipe): void;\n}\n\ndeclare module '@angular/core/src/sanitization/sanitization' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { StyleSanitizeFn } from '@angular/core/src/sanitization/style_sanitizer';\n    /**\n        * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n        * dangerous content.\n        *\n        * This method parses the `html` and locates potentially dangerous content (such as urls and\n        * javascript) and removes it.\n        *\n        * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n        *\n        * @param unsafeHtml untrusted `html`, typically from the user.\n        * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n        * and urls have been removed.\n        */\n    export function sanitizeHtml(unsafeHtml: any): string;\n    /**\n        * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n        * dangerous content.\n        *\n        * This method parses the `style` and locates potentially dangerous content (such as urls and\n        * javascript) and removes it.\n        *\n        * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n        *\n        * @param unsafeStyle untrusted `style`, typically from the user.\n        * @returns `style` string which is safe to bind to the `style` properties, because all of the\n        * dangerous javascript and urls have been removed.\n        */\n    export function sanitizeStyle(unsafeStyle: any): string;\n    /**\n        * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n        * dangerous\n        * content.\n        *\n        * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n        * removes it.\n        *\n        * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n        *\n        * @param unsafeUrl untrusted `url`, typically from the user.\n        * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n        * all of the dangerous javascript has been removed.\n        */\n    export function sanitizeUrl(unsafeUrl: any): string;\n    /**\n        * A `url` sanitizer which only lets trusted `url`s through.\n        *\n        * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n        *\n        * @param unsafeResourceUrl untrusted `url`, typically from the user.\n        * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n        * only trusted `url`s have been allowed to pass.\n        */\n    export function sanitizeResourceUrl(unsafeResourceUrl: any): string;\n    /**\n        * A `script` sanitizer which only lets trusted javascript through.\n        *\n        * This passes only `script`s marked trusted by calling {@link bypassSanitizationTrustScript}.\n        *\n        * @param unsafeScript untrusted `script`, typically from the user.\n        * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n        * because only trusted `scripts`s have been allowed to pass.\n        */\n    export function sanitizeScript(unsafeScript: any): string;\n    /**\n        * The default style sanitizer will handle sanitization for style properties by\n        * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n        */\n    export const defaultStyleSanitizer: StyleSanitizeFn;\n}\n\ndeclare module '@angular/core/src/sanitization/bypass' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    const BRAND = \"__SANITIZER_TRUSTED_BRAND__\";\n    export const enum BypassType {\n            Url = \"Url\",\n            Html = \"Html\",\n            ResourceUrl = \"ResourceUrl\",\n            Script = \"Script\",\n            Style = \"Style\"\n    }\n    /**\n        * A branded trusted string used with sanitization.\n        *\n        * See: {@link TrustedHtmlString}, {@link TrustedResourceUrlString}, {@link TrustedScriptString},\n        * {@link TrustedStyleString}, {@link TrustedUrlString}\n        */\n    export interface TrustedString extends String {\n            [BRAND]: BypassType;\n    }\n    /**\n        * A branded trusted string used with sanitization of `html` strings.\n        *\n        * See: {@link bypassSanitizationTrustHtml} and {@link htmlSanitizer}.\n        */\n    export interface TrustedHtmlString extends TrustedString {\n            [BRAND]: BypassType.Html;\n    }\n    /**\n        * A branded trusted string used with sanitization of `style` strings.\n        *\n        * See: {@link bypassSanitizationTrustStyle} and {@link styleSanitizer}.\n        */\n    export interface TrustedStyleString extends TrustedString {\n            [BRAND]: BypassType.Style;\n    }\n    /**\n        * A branded trusted string used with sanitization of `url` strings.\n        *\n        * See: {@link bypassSanitizationTrustScript} and {@link scriptSanitizer}.\n        */\n    export interface TrustedScriptString extends TrustedString {\n            [BRAND]: BypassType.Script;\n    }\n    /**\n        * A branded trusted string used with sanitization of `url` strings.\n        *\n        * See: {@link bypassSanitizationTrustUrl} and {@link urlSanitizer}.\n        */\n    export interface TrustedUrlString extends TrustedString {\n            [BRAND]: BypassType.Url;\n    }\n    /**\n        * A branded trusted string used with sanitization of `resourceUrl` strings.\n        *\n        * See: {@link bypassSanitizationTrustResourceUrl} and {@link resourceUrlSanitizer}.\n        */\n    export interface TrustedResourceUrlString extends TrustedString {\n            [BRAND]: BypassType.ResourceUrl;\n    }\n    export function allowSanitizationBypass(value: any, type: BypassType): boolean;\n    /**\n        * Mark `html` string as trusted.\n        *\n        * This function wraps the trusted string in `String` and brands it in a way which makes it\n        * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n        *\n        * @param trustedHtml `html` string which needs to be implicitly trusted.\n        * @returns a `html` `String` which has been branded to be implicitly trusted.\n        */\n    export function bypassSanitizationTrustHtml(trustedHtml: string): TrustedHtmlString;\n    /**\n        * Mark `style` string as trusted.\n        *\n        * This function wraps the trusted string in `String` and brands it in a way which makes it\n        * recognizable to {@link styleSanitizer} to be trusted implicitly.\n        *\n        * @param trustedStyle `style` string which needs to be implicitly trusted.\n        * @returns a `style` `String` which has been branded to be implicitly trusted.\n        */\n    export function bypassSanitizationTrustStyle(trustedStyle: string): TrustedStyleString;\n    /**\n        * Mark `script` string as trusted.\n        *\n        * This function wraps the trusted string in `String` and brands it in a way which makes it\n        * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n        *\n        * @param trustedScript `script` string which needs to be implicitly trusted.\n        * @returns a `script` `String` which has been branded to be implicitly trusted.\n        */\n    export function bypassSanitizationTrustScript(trustedScript: string): TrustedScriptString;\n    /**\n        * Mark `url` string as trusted.\n        *\n        * This function wraps the trusted string in `String` and brands it in a way which makes it\n        * recognizable to {@link urlSanitizer} to be trusted implicitly.\n        *\n        * @param trustedUrl `url` string which needs to be implicitly trusted.\n        * @returns a `url` `String` which has been branded to be implicitly trusted.\n        */\n    export function bypassSanitizationTrustUrl(trustedUrl: string): TrustedUrlString;\n    /**\n        * Mark `url` string as trusted.\n        *\n        * This function wraps the trusted string in `String` and brands it in a way which makes it\n        * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n        *\n        * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n        * @returns a `url` `String` which has been branded to be implicitly trusted.\n        */\n    export function bypassSanitizationTrustResourceUrl(trustedResourceUrl: string): TrustedResourceUrlString;\n    export {};\n}\n\ndeclare module '@angular/core/src/render3/context_discovery' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import './ng_dev_mode';\n    import { LContext } from '@angular/core/src/render3/interfaces/context';\n    import { LViewData } from '@angular/core/src/render3/interfaces/view';\n    /** Returns the matching `LContext` data for a given DOM node, directive or component instance.\n        *\n        * This function will examine the provided DOM element, component, or directive instance\\'s\n        * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n        * value will be that of the newly created `LContext`.\n        *\n        * If the monkey-patched value is the `LViewData` instance then the context value for that\n        * target will be created and the monkey-patch reference will be updated. Therefore when this\n        * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n        * directive\\'s monkey-patch values.\n        *\n        * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n        * is found which contains a monkey-patch reference. When that occurs then the provided element\n        * will be updated with a new context (which is then returned). If the monkey-patch value is not\n        * detected for a component/directive instance then it will throw an error (all components and\n        * directives should be automatically monkey-patched by ivy).\n        *\n        * @param target Component, Directive or DOM Node.\n        */\n    export function getContext(target: any): LContext | null;\n    /**\n        * Takes a component instance and returns the view for that component.\n        *\n        * @param componentInstance\n        * @returns The component's view\n        */\n    export function getComponentViewByInstance(componentInstance: {}): LViewData;\n    /**\n        * Assigns the given data to the given target (which could be a component,\n        * directive or DOM node instance) using monkey-patching.\n        */\n    export function attachPatchData(target: any, data: LViewData | LContext): void;\n    export function isComponentInstance(instance: any): boolean;\n    export function isDirectiveInstance(instance: any): boolean;\n    /**\n        * Returns a list of directives extracted from the given view based on the\n        * provided list of directive index values.\n        *\n        * @param nodeIndex The node index\n        * @param lViewData The target view data\n        * @param includeComponents Whether or not to include components in returned directives\n        */\n    export function getDirectivesAtNodeIndex(nodeIndex: number, lViewData: LViewData, includeComponents: boolean): any[] | null;\n    export function getComponentAtNodeIndex(nodeIndex: number, lViewData: LViewData): {} | null;\n    /**\n        * Returns a map of local references (local reference name => element or directive instance) that\n        * exist on a given element.\n        */\n    export function discoverLocalRefs(lViewData: LViewData, nodeIndex: number): {\n            [key: string]: any;\n    } | null;\n}\n\ndeclare module '@angular/core/src/render3/interfaces/player' {\n    /**\n        * A shared interface which contains an animation player\n        */\n    export interface Player {\n            parent?: Player | null;\n            state: PlayState;\n            play(): void;\n            pause(): void;\n            finish(): void;\n            destroy(): void;\n            addEventListener(state: PlayState | string, cb: (data?: any) => any): void;\n    }\n    export const enum BindingType {\n            Unset = 0,\n            Class = 1,\n            Style = 2\n    }\n    export interface BindingStore {\n            setValue(prop: string, value: any): void;\n    }\n    /**\n        * Defines the shape which produces the Player.\n        *\n        * Used to produce a player that will be placed on an element that contains\n        * styling bindings that make use of the player. This function is designed\n        * to be used with `PlayerFactory`.\n        */\n    export interface PlayerFactoryBuildFn {\n            (element: HTMLElement, type: BindingType, values: {\n                    [key: string]: any;\n            }, isFirstRender: boolean, currentPlayer: Player | null): Player | null;\n    }\n    /**\n        * Used as a reference to build a player from a styling template binding\n        * (`[style]` and `[class]`).\n        *\n        * The `fn` function will be called once any styling-related changes are\n        * evaluated on an element and is expected to return a player that will\n        * be then run on the element.\n        *\n        * `[style]`, `[style.prop]`, `[class]` and `[class.name]` template bindings\n        * all accept a `PlayerFactory` as input and this player factories.\n        */\n    export interface PlayerFactory {\n            '__brand__': 'Brand for PlayerFactory that nothing will match';\n    }\n    export interface PlayerBuilder extends BindingStore {\n            buildPlayer(currentPlayer: Player | null, isFirstRender: boolean): Player | undefined | null;\n    }\n    /**\n        * The state of a given player\n        *\n        * Do not change the increasing nature of the numbers since the player\n        * code may compare state by checking if a number is higher or lower than\n        * a certain numeric value.\n        */\n    export const enum PlayState {\n            Pending = 0,\n            Running = 1,\n            Paused = 2,\n            Finished = 100,\n            Destroyed = 200\n    }\n    /**\n        * The context that stores all the active players and queued player factories present on an element.\n        */\n    export interface PlayerContext extends Array<null | number | Player | PlayerBuilder> {\n            [PlayerIndex.NonBuilderPlayersStart]: number;\n            [PlayerIndex.ClassMapPlayerBuilderPosition]: PlayerBuilder | null;\n            [PlayerIndex.ClassMapPlayerPosition]: Player | null;\n            [PlayerIndex.StyleMapPlayerBuilderPosition]: PlayerBuilder | null;\n            [PlayerIndex.StyleMapPlayerPosition]: Player | null;\n    }\n    /**\n        * Designed to be used as an injection service to capture all animation players.\n        *\n        * When present all animation players will be passed into the flush method below.\n        * This feature is designed to service application-wide animation testing, live\n        * debugging as well as custom animation choreographing tools.\n        */\n    export interface PlayerHandler {\n            /**\n                * Designed to kick off the player at the end of change detection\n                */\n            flushPlayers(): void;\n            /**\n                * @param player The player that has been scheduled to run within the application.\n                * @param context The context as to where the player was bound to\n                */\n            queuePlayer(player: Player, context: ComponentInstance | DirectiveInstance | HTMLElement): void;\n    }\n    export const enum PlayerIndex {\n            NonBuilderPlayersStart = 0,\n            ClassMapPlayerBuilderPosition = 1,\n            ClassMapPlayerPosition = 2,\n            StyleMapPlayerBuilderPosition = 3,\n            StyleMapPlayerPosition = 4,\n            PlayerBuildersStartPosition = 1,\n            SinglePlayerBuildersStartPosition = 5,\n            PlayerAndPlayerBuildersTupleSize = 2,\n            PlayerOffsetPosition = 1\n    }\n    export type ComponentInstance = {};\n    export type DirectiveInstance = {};\n}\n\ndeclare module '@angular/core/src/render3/interfaces/context' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { RElement } from '@angular/core/src/render3/interfaces/renderer';\n    import { LViewData } from '@angular/core/src/render3/interfaces/view';\n    /**\n        * This property will be monkey-patched on elements, components and directives\n        */\n    export const MONKEY_PATCH_KEY_NAME = \"__ngContext__\";\n    /**\n        * The internal view context which is specific to a given DOM element, directive or\n        * component instance. Each value in here (besides the LViewData and element node details)\n        * can be present, null or undefined. If undefined then it implies the value has not been\n        * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\n        *\n        * Each value will get filled when the respective value is examined within the getContext\n        * function. The component, element and each directive instance will share the same instance\n        * of the context.\n        */\n    export interface LContext {\n            /**\n                * The component's parent view data.\n                */\n            lViewData: LViewData;\n            /**\n                * The index instance of the node.\n                */\n            nodeIndex: number;\n            /**\n                * The instance of the DOM node that is attached to the lNode.\n                */\n            native: RElement;\n            /**\n                * The instance of the Component node.\n                */\n            component: {} | null | undefined;\n            /**\n                * The list of active directives that exist on this element.\n                */\n            directives: any[] | null | undefined;\n            /**\n                * The map of local references (local reference name => element or directive instance) that exist\n                * on this element.\n                */\n            localRefs: {\n                    [key: string]: any;\n            } | null | undefined;\n    }\n}\n\ndeclare module '@angular/core/src/render3/styling/player_factory' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { PlayerFactory, PlayerFactoryBuildFn } from '@angular/core/src/render3/interfaces/player';\n    /**\n        * Combines the binding value and a factory for an animation player.\n        *\n        * Used to bind a player to an element template binding (currently only\n        * `[style]`, `[style.prop]`, `[class]` and `[class.name]` bindings\n        * supported). The provided `factoryFn` function will be run once all\n        * the associated bindings have been evaluated on the element and is\n        * designed to return a player which will then be placed on the element.\n        *\n        * @param factoryFn The function that is used to create a player\n        *   once all the rendering-related (styling values) have been\n        *   processed for the element binding.\n        * @param value The raw value that will be exposed to the binding\n        *   so that the binding can update its internal values when\n        *   any changes are evaluated.\n        */\n    export function bindPlayerFactory<T>(factoryFn: PlayerFactoryBuildFn, value: T): PlayerFactory;\n    export class BoundPlayerFactory<T> {\n            fn: PlayerFactoryBuildFn;\n            value: T;\n            '__brand__': 'Brand for PlayerFactory that nothing will match';\n            constructor(fn: PlayerFactoryBuildFn, value: T);\n    }\n}\n\ndeclare module '@angular/core/src/render3/players' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import './ng_dev_mode';\n    import { ComponentInstance, DirectiveInstance, Player } from '@angular/core/src/render3/interfaces/player';\n    /**\n        * Adds a player to an element, directive or component instance that will later be\n        * animated once change detection has passed.\n        *\n        * When a player is added to a reference it will stay active until `player.destroy()`\n        * is called. Once called then the player will be removed from the active players\n        * present on the associated ref instance.\n        *\n        * To get a list of all the active players on an element see [getPlayers].\n        *\n        * @param ref The element, directive or component that the player will be placed on.\n        * @param player The player that will be triggered to play once change detection has run.\n        */\n    export function addPlayer(ref: ComponentInstance | DirectiveInstance | HTMLElement, player: Player): void;\n    /**\n        * Returns a list of all the active players present on the provided ref instance (which can\n        * be an instance of a directive, component or element).\n        *\n        * This function will only return players that have been added to the ref instance using\n        * `addPlayer` or any players that are active through any template styling bindings\n        * (`[style]`, `[style.prop]`, `[class]` and `[class.name]`).\n        *\n        * @publicApi\n        */\n    export function getPlayers(ref: ComponentInstance | DirectiveInstance | HTMLElement): Player[];\n}\n\ndeclare module '@angular/core/src/change_detection/change_detector_ref' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { injectChangeDetectorRef as render3InjectChangeDetectorRef } from '@angular/core/src/render3/view_engine_compatibility';\n    /**\n        * Base class for Angular Views, provides change detection functionality.\n        * A change-detection tree collects all views that are to be checked for changes.\n        * Use the methods to add and remove views from the tree, initiate change-detection,\n        * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.\n        *\n        * @usageNotes\n        *\n        * The following examples demonstrate how to modify default change-detection behavior\n        * to perform explicit detection when needed.\n        *\n        * ### Use `markForCheck()` with `CheckOnce` strategy\n        *\n        * The following example sets the `OnPush` change-detection strategy for a component\n        * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n        * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n        *\n        * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n        * region=\"mark-for-check\"></code-example>\n        *\n        * ### Detach change detector to limit how often check occurs\n        *\n        * The following example defines a component with a large list of read-only data\n        * that is expected to change constantly, many times per second.\n        * To improve performance, we want to check and update the list\n        * less often than the changes actually occur. To do that, we detach\n        * the component's change detector and perform an explicit local check every five seconds.\n        *\n        * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n        *\n        *\n        * ### Reattaching a detached component\n        *\n        * The following example creates a component displaying live data.\n        * The component detaches its change detector from the main change detector tree\n        * when the `live` property is set to false, and reattaches it when the property\n        * becomes true.\n        *\n        * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n        *\n        * @publicApi\n        */\n    export abstract class ChangeDetectorRef {\n            /**\n                * When a view uses the {@link ChangeDetectionStrategy#OnPush OnPush} (checkOnce)\n                * change detection strategy, explicitly marks the view as changed so that\n                * it can be checked again.\n                *\n                * Components are normally marked as dirty (in need of rerendering) when inputs\n                * have changed or events have fired in the view. Call this method to ensure that\n                * a component is checked even if these triggers have not occured.\n                *\n                * <!-- TODO: Add a link to a chapter on OnPush components -->\n                *\n                */\n            abstract markForCheck(): void;\n            /**\n                * Detaches this view from the change-detection tree.\n                * A detached view is  not checked until it is reattached.\n                * Use in combination with `detectChanges()` to implement local change detection checks.\n                *\n                * Detached views are not checked during change detection runs until they are\n                * re-attached, even if they are marked as dirty.\n                *\n                * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n                * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n                *\n                */\n            abstract detach(): void;\n            /**\n                * Checks this view and its children. Use in combination with {@link ChangeDetectorRef#detach\n                * detach}\n                * to implement local change detection checks.\n                *\n                * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n                * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n                *\n                */\n            abstract detectChanges(): void;\n            /**\n                * Checks the change detector and its children, and throws if any changes are detected.\n                *\n                * Use in development mode to verify that running change detection doesn't introduce\n                * other changes.\n                */\n            abstract checkNoChanges(): void;\n            /**\n                * Re-attaches the previously detached view to the change detection tree.\n                * Views are attached to the tree by default.\n                *\n                * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n                *\n                */\n            abstract reattach(): void;\n    }\n    export const SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__: typeof render3InjectChangeDetectorRef;\n}\n\ndeclare module '@angular/core/src/render3/global_utils' {\n    /**\n        * This value reflects the property on the window where the dev\n        * tools are patched (window.ng).\n        * */\n    export const GLOBAL_PUBLISH_EXPANDO_KEY = \"ng\";\n    export function publishDefaultGlobalUtils(): void;\n    export type GlobalDevModeContainer = {\n            [GLOBAL_PUBLISH_EXPANDO_KEY]: {\n                    [fnName: string]: Function;\n            };\n    };\n    /**\n        * Publishes the given function to `window.ngDevMode` so that it can be\n        * used from the browser console when an application is not in production.\n        */\n    export function publishGlobalUtil(name: string, fn: Function): void;\n}\n\ndeclare module '@angular/core/src/render3/jit/injectable' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Injectable } from '@angular/core/src/di/injectable';\n    import { Type } from '@angular/core/src/type';\n    /**\n        * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n        * `ngInjectableDef` onto the injectable type.\n        */\n    export function compileInjectable(type: Type<any>, srcMeta?: Injectable): void;\n}\n\ndeclare module '@angular/core/src/render3/view_engine_compatibility' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { ChangeDetectorRef as ViewEngine_ChangeDetectorRef } from '@angular/core/src/change_detection/change_detector_ref';\n    import { Injector } from '@angular/core/src/di/injector';\n    import { ElementRef as ViewEngine_ElementRef } from '@angular/core/src/linker/element_ref';\n    import { TemplateRef as ViewEngine_TemplateRef } from '@angular/core/src/linker/template_ref';\n    import { ViewContainerRef as ViewEngine_ViewContainerRef } from '@angular/core/src/linker/view_container_ref';\n    import { Renderer2 } from '@angular/core/src/render/api';\n    import { TContainerNode, TElementContainerNode, TElementNode, TNode } from '@angular/core/src/render3/interfaces/node';\n    import { LViewData } from '@angular/core/src/render3/interfaces/view';\n    /**\n        * Creates an ElementRef from the most recent node.\n        *\n        * @returns The ElementRef instance to use\n        */\n    export function injectElementRef(ElementRefToken: typeof ViewEngine_ElementRef): ViewEngine_ElementRef;\n    /**\n        * Creates an ElementRef given a node.\n        *\n        * @param ElementRefToken The ElementRef type\n        * @param tNode The node for which you'd like an ElementRef\n        * @param view The view to which the node belongs\n        * @returns The ElementRef instance to use\n        */\n    export function createElementRef(ElementRefToken: typeof ViewEngine_ElementRef, tNode: TNode, view: LViewData): ViewEngine_ElementRef;\n    /**\n        * Creates a TemplateRef given a node.\n        *\n        * @returns The TemplateRef instance to use\n        */\n    export function injectTemplateRef<T>(TemplateRefToken: typeof ViewEngine_TemplateRef, ElementRefToken: typeof ViewEngine_ElementRef): ViewEngine_TemplateRef<T> | null;\n    /**\n        * Creates a TemplateRef and stores it on the injector.\n        *\n        * @param TemplateRefToken The TemplateRef type\n        * @param ElementRefToken The ElementRef type\n        * @param hostTNode The node that is requesting a TemplateRef\n        * @param hostView The view to which the node belongs\n        * @returns The TemplateRef instance to use\n        */\n    export function createTemplateRef<T>(TemplateRefToken: typeof ViewEngine_TemplateRef, ElementRefToken: typeof ViewEngine_ElementRef, hostTNode: TNode, hostView: LViewData): ViewEngine_TemplateRef<T> | null;\n    /**\n        * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n        * already exists, retrieves the existing ViewContainerRef.\n        *\n        * @returns The ViewContainerRef instance to use\n        */\n    export function injectViewContainerRef(ViewContainerRefToken: typeof ViewEngine_ViewContainerRef, ElementRefToken: typeof ViewEngine_ElementRef): ViewEngine_ViewContainerRef;\n    export class NodeInjector implements Injector {\n            constructor(_tNode: TElementNode | TContainerNode | TElementContainerNode, _hostView: LViewData);\n            get(token: any, notFoundValue?: any): any;\n    }\n    /**\n        * Creates a ViewContainerRef and stores it on the injector.\n        *\n        * @param ViewContainerRefToken The ViewContainerRef type\n        * @param ElementRefToken The ElementRef type\n        * @param hostTNode The node that is requesting a ViewContainerRef\n        * @param hostView The view to which the node belongs\n        * @returns The ViewContainerRef instance to use\n        */\n    export function createContainerRef(ViewContainerRefToken: typeof ViewEngine_ViewContainerRef, ElementRefToken: typeof ViewEngine_ElementRef, hostTNode: TElementNode | TContainerNode | TElementContainerNode, hostView: LViewData): ViewEngine_ViewContainerRef;\n    /** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\n    export function injectChangeDetectorRef(): ViewEngine_ChangeDetectorRef;\n    /**\n        * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n        *\n        * @param hostTNode The node that is requesting a ChangeDetectorRef\n        * @param hostView The view to which the node belongs\n        * @param context The context for this change detector ref\n        * @returns The ChangeDetectorRef to use\n        */\n    export function createViewRef(hostTNode: TNode, hostView: LViewData, context: any): ViewEngine_ChangeDetectorRef;\n    /** Returns a Renderer2 (or throws when application was bootstrapped with Renderer3) */\n    export function injectRenderer2(): Renderer2;\n}\n\ndeclare module '@angular/core/src/view/element' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    import { RendererType2 } from '@angular/core/src/render/api';\n    import { SecurityContext } from '@angular/core/src/sanitization/security';\n    import { BindingFlags, ElementData, ElementHandleEventFn, NodeDef, NodeFlags, QueryValueType, ViewData, ViewDefinitionFactory } from '@angular/core/src/view/types';\n    export function anchorDef(flags: NodeFlags, matchedQueriesDsl: null | [string | number, QueryValueType][], ngContentIndex: null | number, childCount: number, handleEvent?: null | ElementHandleEventFn, templateFactory?: ViewDefinitionFactory): NodeDef;\n    export function elementDef(checkIndex: number, flags: NodeFlags, matchedQueriesDsl: null | [string | number, QueryValueType][], ngContentIndex: null | number, childCount: number, namespaceAndName: string | null, fixedAttrs?: null | [string, string][], bindings?: null | [BindingFlags, string, string | SecurityContext | null][], outputs?: null | ([string, string])[], handleEvent?: null | ElementHandleEventFn, componentView?: null | ViewDefinitionFactory, componentRendererType?: RendererType2 | null): NodeDef;\n    export function createElement(view: ViewData, renderHost: any, def: NodeDef): ElementData;\n    export function listenToElementOutputs(view: ViewData, compView: ViewData, def: NodeDef, el: any): void;\n    export function checkAndUpdateElementInline(view: ViewData, def: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any, v9: any): boolean;\n    export function checkAndUpdateElementDynamic(view: ViewData, def: NodeDef, values: any[]): boolean;\n}\n\ndeclare module '@angular/core/src/view/entrypoint' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    import { ComponentFactory } from '@angular/core/src/linker/component_factory';\n    import { NgModuleFactory } from '@angular/core/src/linker/ng_module_factory';\n    import { Type } from '@angular/core/src/type';\n    import { NgModuleDefinitionFactory, ProviderOverride } from '@angular/core/src/view/types';\n    export function overrideProvider(override: ProviderOverride): void;\n    export function overrideComponentView(comp: Type<any>, componentFactory: ComponentFactory<any>): void;\n    export function clearOverrides(): void;\n    export function createNgModuleFactory(ngModuleType: Type<any>, bootstrapComponents: Type<any>[], defFactory: NgModuleDefinitionFactory): NgModuleFactory<any>;\n}\n\ndeclare module '@angular/core/src/view/ng_content' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    import { NodeDef, ViewData } from '@angular/core/src/view/types';\n    export function ngContentDef(ngContentIndex: null | number, index: number): NodeDef;\n    export function appendNgContent(view: ViewData, renderHost: any, def: NodeDef): void;\n}\n\ndeclare module '@angular/core/src/view/ng_module' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    import { DepDef, DepFlags, NgModuleData, NgModuleDefinition, NgModuleProviderDef, NodeFlags } from '@angular/core/src/view/types';\n    export function moduleProvideDef(flags: NodeFlags, token: any, value: any, deps: ([DepFlags, any] | any)[]): NgModuleProviderDef;\n    export function moduleDef(providers: NgModuleProviderDef[]): NgModuleDefinition;\n    export function initNgModule(data: NgModuleData): void;\n    export function resolveNgModuleDep(data: NgModuleData, depDef: DepDef, notFoundValue?: any): any;\n    export function callNgModuleLifecycle(ngModule: NgModuleData, lifecycles: NodeFlags): void;\n}\n\ndeclare module '@angular/core/src/view/pure_expression' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    import { NodeDef, PureExpressionData, ViewData } from '@angular/core/src/view/types';\n    export function purePipeDef(checkIndex: number, argCount: number): NodeDef;\n    export function pureArrayDef(checkIndex: number, argCount: number): NodeDef;\n    export function pureObjectDef(checkIndex: number, propToIndex: {\n        [p: string]: number;\n    }): NodeDef;\n    export function createPureExpression(view: ViewData, def: NodeDef): PureExpressionData;\n    export function checkAndUpdatePureExpressionInline(view: ViewData, def: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any, v9: any): boolean;\n    export function checkAndUpdatePureExpressionDynamic(view: ViewData, def: NodeDef, values: any[]): boolean;\n}\n\ndeclare module '@angular/core/src/view/query' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    import { QueryList } from '@angular/core/src/linker/query_list';\n    import { NodeDef, NodeFlags, QueryBindingType, QueryValueType, ViewData } from '@angular/core/src/view/types';\n    export function queryDef(flags: NodeFlags, id: number, bindings: {\n        [propName: string]: QueryBindingType;\n    }): NodeDef;\n    export function createQuery(): QueryList<any>;\n    export function dirtyParentQueries(view: ViewData): void;\n    export function checkAndUpdateQuery(view: ViewData, nodeDef: NodeDef): void;\n    export function getQueryValue(view: ViewData, nodeDef: NodeDef, queryValueType: QueryValueType): any;\n}\n\ndeclare module '@angular/core/src/view/refs' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    import { ApplicationRef } from '@angular/core/src/application_ref';\n    import { ChangeDetectorRef } from '@angular/core/src/change_detection/change_detection';\n    import { Injector } from '@angular/core/src/di/injector';\n    import { ComponentFactory } from '@angular/core/src/linker/component_factory';\n    import { NgModuleRef } from '@angular/core/src/linker/ng_module_factory';\n    import { ViewContainerRef } from '@angular/core/src/linker/view_container_ref';\n    import { EmbeddedViewRef, InternalViewRef } from '@angular/core/src/linker/view_ref';\n    import { Renderer as RendererV1 } from '@angular/core/src/render/api';\n    import { Type } from '@angular/core/src/type';\n    import { ElementData, NgModuleDefinition, NodeDef, TemplateData, ViewContainerData, ViewData, ViewDefinitionFactory } from '@angular/core/src/view/types';\n    export function createComponentFactory(selector: string, componentType: Type<any>, viewDefFactory: ViewDefinitionFactory, inputs: {\n        [propName: string]: string;\n    } | null, outputs: {\n        [propName: string]: string;\n    }, ngContentSelectors: string[]): ComponentFactory<any>;\n    export function getComponentViewDefinitionFactory(componentFactory: ComponentFactory<any>): ViewDefinitionFactory;\n    export function createViewContainerData(view: ViewData, elDef: NodeDef, elData: ElementData): ViewContainerData;\n    export function createChangeDetectorRef(view: ViewData): ChangeDetectorRef;\n    export class ViewRef_ implements EmbeddedViewRef<any>, InternalViewRef {\n        constructor(_view: ViewData);\n        readonly rootNodes: any[];\n        readonly context: any;\n        readonly destroyed: boolean;\n        markForCheck(): void;\n        detach(): void;\n        detectChanges(): void;\n        checkNoChanges(): void;\n        reattach(): void;\n        onDestroy(callback: Function): void;\n        destroy(): void;\n        detachFromAppRef(): void;\n        attachToAppRef(appRef: ApplicationRef): void;\n        attachToViewContainerRef(vcRef: ViewContainerRef): void;\n    }\n    export function createTemplateData(view: ViewData, def: NodeDef): TemplateData;\n    export function createInjector(view: ViewData, elDef: NodeDef): Injector;\n    export function nodeValue(view: ViewData, index: number): any;\n    export function createRendererV1(view: ViewData): RendererV1;\n    export function createNgModuleRef(moduleType: Type<any>, parent: Injector, bootstrapComponents: Type<any>[], def: NgModuleDefinition): NgModuleRef<any>;\n}\n\ndeclare module '@angular/core/src/view/services' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2 } from '@angular/core/src/render/api';\n    import { DebugContext } from '@angular/core/src/view/types';\n    export function initServicesIfNeeded(): void;\n    export function getCurrentDebugContext(): DebugContext | null;\n    export class DebugRendererFactory2 implements RendererFactory2 {\n            constructor(delegate: RendererFactory2);\n            createRenderer(element: any, renderData: RendererType2 | null): Renderer2;\n            begin(): void;\n            end(): void;\n            whenRenderingDone(): Promise<any>;\n    }\n    export class DebugRenderer2 implements Renderer2 {\n            readonly data: {\n                    [key: string]: any;\n            };\n            /**\n                * Factory function used to create a `DebugContext` when a node is created.\n                *\n                * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n                *\n                * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n                * or a Render context.\n                */\n            debugContextFactory: (nativeElement?: any) => DebugContext | null;\n            constructor(delegate: Renderer2);\n            destroyNode(node: any): void;\n            destroy(): void;\n            createElement(name: string, namespace?: string): any;\n            createComment(value: string): any;\n            createText(value: string): any;\n            appendChild(parent: any, newChild: any): void;\n            insertBefore(parent: any, newChild: any, refChild: any): void;\n            removeChild(parent: any, oldChild: any): void;\n            selectRootElement(selectorOrNode: string | any, preserveContent?: boolean): any;\n            setAttribute(el: any, name: string, value: string, namespace?: string): void;\n            removeAttribute(el: any, name: string, namespace?: string): void;\n            addClass(el: any, name: string): void;\n            removeClass(el: any, name: string): void;\n            setStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void;\n            removeStyle(el: any, style: string, flags: RendererStyleFlags2): void;\n            setProperty(el: any, name: string, value: any): void;\n            listen(target: 'document' | 'windows' | 'body' | any, eventName: string, callback: (event: any) => boolean): () => void;\n            parentNode(node: any): any;\n            nextSibling(node: any): any;\n            setValue(node: any, value: string): void;\n    }\n}\n\ndeclare module '@angular/core/src/view/text' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    import { NodeDef, TextData, ViewData } from '@angular/core/src/view/types';\n    export function textDef(checkIndex: number, ngContentIndex: number | null, staticText: string[]): NodeDef;\n    export function createText(view: ViewData, renderHost: any, def: NodeDef): TextData;\n    export function checkAndUpdateTextInline(view: ViewData, def: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any, v9: any): boolean;\n    export function checkAndUpdateTextDynamic(view: ViewData, def: NodeDef, values: any[]): boolean;\n}\n\ndeclare module '@angular/core/src/view/util' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { ViewEncapsulation } from '@angular/core/src/metadata/view';\n    import { RendererType2 } from '@angular/core/src/render/api';\n    import { BindingDef, BindingFlags, Definition, DefinitionFactory, DepDef, DepFlags, ElementData, NodeDef, QueryValueType, ViewData } from '@angular/core/src/view/types';\n    export const NOOP: any;\n    export function tokenKey(token: any): string;\n    export function unwrapValue(view: ViewData, nodeIdx: number, bindingIdx: number, value: any): any;\n    export function createRendererType2(values: {\n            styles: (string | any[])[];\n            encapsulation: ViewEncapsulation;\n            data: {\n                    [kind: string]: any[];\n            };\n    }): RendererType2;\n    export function resolveRendererType2(type?: RendererType2 | null): RendererType2 | null;\n    export function checkBinding(view: ViewData, def: NodeDef, bindingIdx: number, value: any): boolean;\n    export function checkAndUpdateBinding(view: ViewData, def: NodeDef, bindingIdx: number, value: any): boolean;\n    export function checkBindingNoChanges(view: ViewData, def: NodeDef, bindingIdx: number, value: any): void;\n    export function markParentViewsForCheck(view: ViewData): void;\n    export function markParentViewsForCheckProjectedViews(view: ViewData, endView: ViewData): void;\n    export function dispatchEvent(view: ViewData, nodeIndex: number, eventName: string, event: any): boolean | undefined;\n    export function declaredViewContainer(view: ViewData): ElementData | null;\n    /**\n        * for component views, this is the host element.\n        * for embedded views, this is the index of the parent node\n        * that contains the view container.\n        */\n    export function viewParentEl(view: ViewData): NodeDef | null;\n    export function renderNode(view: ViewData, def: NodeDef): any;\n    export function elementEventFullName(target: string | null, name: string): string;\n    export function isComponentView(view: ViewData): boolean;\n    export function isEmbeddedView(view: ViewData): boolean;\n    export function filterQueryId(queryId: number): number;\n    export function splitMatchedQueriesDsl(matchedQueriesDsl: [string | number, QueryValueType][] | null): {\n            matchedQueries: {\n                    [queryId: string]: QueryValueType;\n            };\n            references: {\n                    [refId: string]: QueryValueType;\n            };\n            matchedQueryIds: number;\n    };\n    export function splitDepsDsl(deps: ([DepFlags, any] | any)[], sourceName?: string): DepDef[];\n    export function getParentRenderElement(view: ViewData, renderHost: any, def: NodeDef): any;\n    export function resolveDefinition<D extends Definition<any>>(factory: DefinitionFactory<D>): D;\n    export function rootRenderNodes(view: ViewData): any[];\n    export const enum RenderNodeAction {\n            Collect = 0,\n            AppendChild = 1,\n            InsertBefore = 2,\n            RemoveChild = 3\n    }\n    export function visitRootRenderNodes(view: ViewData, action: RenderNodeAction, parentNode: any, nextSibling: any, target?: any[]): void;\n    export function visitSiblingRenderNodes(view: ViewData, action: RenderNodeAction, startIndex: number, endIndex: number, parentNode: any, nextSibling: any, target?: any[]): void;\n    export function visitProjectedRenderNodes(view: ViewData, ngContentIndex: number, action: RenderNodeAction, parentNode: any, nextSibling: any, target?: any[]): void;\n    export function splitNamespace(name: string): string[];\n    export function calcBindingFlags(bindings: BindingDef[]): BindingFlags;\n    export function interpolate(valueCount: number, constAndInterp: string[]): string;\n    export function inlineInterpolate(valueCount: number, c0: string, a1: any, c1: string, a2?: any, c2?: string, a3?: any, c3?: string, a4?: any, c4?: string, a5?: any, c5?: string, a6?: any, c6?: string, a7?: any, c7?: string, a8?: any, c8?: string, a9?: any, c9?: string): string;\n    export const EMPTY_ARRAY: any[];\n    export const EMPTY_MAP: {\n            [key: string]: any;\n    };\n}\n\ndeclare module '@angular/core/src/view/view' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    import { ArgumentType, NodeDef, RootData, ViewData, ViewDefinition, ViewFlags, ViewUpdateFn } from '@angular/core/src/view/types';\n    export function viewDef(flags: ViewFlags, nodes: NodeDef[], updateDirectives?: null | ViewUpdateFn, updateRenderer?: null | ViewUpdateFn): ViewDefinition;\n    export function createEmbeddedView(parent: ViewData, anchorDef: NodeDef, viewDef: ViewDefinition, context?: any): ViewData;\n    export function createRootView(root: RootData, def: ViewDefinition, context?: any): ViewData;\n    export function createComponentView(parentView: ViewData, nodeDef: NodeDef, viewDef: ViewDefinition, hostElement: any): ViewData;\n    export function checkNoChangesView(view: ViewData): void;\n    export function checkAndUpdateView(view: ViewData): void;\n    export function checkAndUpdateNode(view: ViewData, nodeDef: NodeDef, argStyle: ArgumentType, v0?: any, v1?: any, v2?: any, v3?: any, v4?: any, v5?: any, v6?: any, v7?: any, v8?: any, v9?: any): boolean;\n    export function checkNoChangesNode(view: ViewData, nodeDef: NodeDef, argStyle: ArgumentType, v0?: any, v1?: any, v2?: any, v3?: any, v4?: any, v5?: any, v6?: any, v7?: any, v8?: any, v9?: any): any;\n    export function destroyView(view: ViewData): void;\n}\n\ndeclare module '@angular/core/src/view/view_attach' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    import { ElementData, ViewData } from '@angular/core/src/view/types';\n    export function attachEmbeddedView(parentView: ViewData, elementData: ElementData, viewIndex: number | undefined | null, view: ViewData): void;\n    export function detachEmbeddedView(elementData: ElementData, viewIndex?: number): ViewData | null;\n    export function detachProjectedView(view: ViewData): void;\n    export function moveEmbeddedView(elementData: ElementData, oldViewIndex: number, newViewIndex: number): ViewData;\n    export function renderDetachView(view: ViewData): void;\n}\n\ndeclare module '@angular/core/src/view/types' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Injector } from '@angular/core/src/di';\n    import { ErrorHandler } from '@angular/core/src/error_handler';\n    import { ComponentFactory } from '@angular/core/src/linker/component_factory';\n    import { NgModuleRef } from '@angular/core/src/linker/ng_module_factory';\n    import { QueryList } from '@angular/core/src/linker/query_list';\n    import { TemplateRef } from '@angular/core/src/linker/template_ref';\n    import { ViewContainerRef } from '@angular/core/src/linker/view_container_ref';\n    import { Renderer2, RendererFactory2, RendererType2 } from '@angular/core/src/render/api';\n    import { Sanitizer, SecurityContext } from '@angular/core/src/sanitization/security';\n    import { Type } from '@angular/core/src/type';\n    /**\n        * Factory for ViewDefinitions/NgModuleDefinitions.\n        * We use a function so we can reexeute it in case an error happens and use the given logger\n        * function to log the error from the definition of the node, which is shown in all browser\n        * logs.\n        */\n    export interface DefinitionFactory<D extends Definition<any>> {\n            (logger: NodeLogger): D;\n    }\n    /**\n        * Function to call console.error at the right source location. This is an indirection\n        * via another function as browser will log the location that actually called\n        * `console.error`.\n        */\n    export interface NodeLogger {\n            (): () => void;\n    }\n    export interface Definition<DF extends DefinitionFactory<any>> {\n            factory: DF | null;\n    }\n    export interface NgModuleDefinition extends Definition<NgModuleDefinitionFactory> {\n            providers: NgModuleProviderDef[];\n            providersByKey: {\n                    [tokenKey: string]: NgModuleProviderDef;\n            };\n            modules: any[];\n            isRoot: boolean;\n    }\n    export interface NgModuleDefinitionFactory extends DefinitionFactory<NgModuleDefinition> {\n    }\n    export interface ViewDefinition extends Definition<ViewDefinitionFactory> {\n            flags: ViewFlags;\n            updateDirectives: ViewUpdateFn;\n            updateRenderer: ViewUpdateFn;\n            handleEvent: ViewHandleEventFn;\n            /**\n                * Order: Depth first.\n                * Especially providers are before elements / anchors.\n                */\n            nodes: NodeDef[];\n            /** aggregated NodeFlags for all nodes **/\n            nodeFlags: NodeFlags;\n            rootNodeFlags: NodeFlags;\n            lastRenderRootNode: NodeDef | null;\n            bindingCount: number;\n            outputCount: number;\n            /**\n                * Binary or of all query ids that are matched by one of the nodes.\n                * This includes query ids from templates as well.\n                * Used as a bloom filter.\n                */\n            nodeMatchedQueries: number;\n    }\n    export interface ViewDefinitionFactory extends DefinitionFactory<ViewDefinition> {\n    }\n    export interface ViewUpdateFn {\n            (check: NodeCheckFn, view: ViewData): void;\n    }\n    export interface NodeCheckFn {\n            (view: ViewData, nodeIndex: number, argStyle: ArgumentType.Dynamic, values: any[]): any;\n            (view: ViewData, nodeIndex: number, argStyle: ArgumentType.Inline, v0?: any, v1?: any, v2?: any, v3?: any, v4?: any, v5?: any, v6?: any, v7?: any, v8?: any, v9?: any): any;\n    }\n    export const enum ArgumentType {\n            Inline = 0,\n            Dynamic = 1\n    }\n    export interface ViewHandleEventFn {\n            (view: ViewData, nodeIndex: number, eventName: string, event: any): boolean;\n    }\n    /**\n        * Bitmask for ViewDefinition.flags.\n        */\n    export const enum ViewFlags {\n            None = 0,\n            OnPush = 2\n    }\n    /**\n        * A node definition in the view.\n        *\n        * Note: We use one type for all nodes so that loops that loop over all nodes\n        * of a ViewDefinition stay monomorphic!\n        */\n    export interface NodeDef {\n            flags: NodeFlags;\n            nodeIndex: number;\n            checkIndex: number;\n            parent: NodeDef | null;\n            renderParent: NodeDef | null;\n            /** this is checked against NgContentDef.index to find matched nodes */\n            ngContentIndex: number | null;\n            /** number of transitive children */\n            childCount: number;\n            /** aggregated NodeFlags for all transitive children (does not include self) **/\n            childFlags: NodeFlags;\n            /** aggregated NodeFlags for all direct children (does not include self) **/\n            directChildFlags: NodeFlags;\n            bindingIndex: number;\n            bindings: BindingDef[];\n            bindingFlags: BindingFlags;\n            outputIndex: number;\n            outputs: OutputDef[];\n            /**\n                * references that the user placed on the element\n                */\n            references: {\n                    [refId: string]: QueryValueType;\n            };\n            /**\n                * ids and value types of all queries that are matched by this node.\n                */\n            matchedQueries: {\n                    [queryId: number]: QueryValueType;\n            };\n            /** Binary or of all matched query ids of this node. */\n            matchedQueryIds: number;\n            /**\n                * Binary or of all query ids that are matched by one of the children.\n                * This includes query ids from templates as well.\n                * Used as a bloom filter.\n                */\n            childMatchedQueries: number;\n            element: ElementDef | null;\n            provider: ProviderDef | null;\n            text: TextDef | null;\n            query: QueryDef | null;\n            ngContent: NgContentDef | null;\n    }\n    /**\n        * Bitmask for NodeDef.flags.\n        * Naming convention:\n        * - `Type...`: flags that are mutually exclusive\n        * - `Cat...`: union of multiple `Type...` (short for category).\n        */\n    export const enum NodeFlags {\n            None = 0,\n            TypeElement = 1,\n            TypeText = 2,\n            ProjectedTemplate = 4,\n            CatRenderNode = 3,\n            TypeNgContent = 8,\n            TypePipe = 16,\n            TypePureArray = 32,\n            TypePureObject = 64,\n            TypePurePipe = 128,\n            CatPureExpression = 224,\n            TypeValueProvider = 256,\n            TypeClassProvider = 512,\n            TypeFactoryProvider = 1024,\n            TypeUseExistingProvider = 2048,\n            LazyProvider = 4096,\n            PrivateProvider = 8192,\n            TypeDirective = 16384,\n            Component = 32768,\n            CatProviderNoDirective = 3840,\n            CatProvider = 20224,\n            OnInit = 65536,\n            OnDestroy = 131072,\n            DoCheck = 262144,\n            OnChanges = 524288,\n            AfterContentInit = 1048576,\n            AfterContentChecked = 2097152,\n            AfterViewInit = 4194304,\n            AfterViewChecked = 8388608,\n            EmbeddedViews = 16777216,\n            ComponentView = 33554432,\n            TypeContentQuery = 67108864,\n            TypeViewQuery = 134217728,\n            StaticQuery = 268435456,\n            DynamicQuery = 536870912,\n            TypeNgModule = 1073741824,\n            CatQuery = 201326592,\n            Types = 201347067\n    }\n    export interface BindingDef {\n            flags: BindingFlags;\n            ns: string | null;\n            name: string | null;\n            nonMinifiedName: string | null;\n            securityContext: SecurityContext | null;\n            suffix: string | null;\n    }\n    export const enum BindingFlags {\n            TypeElementAttribute = 1,\n            TypeElementClass = 2,\n            TypeElementStyle = 4,\n            TypeProperty = 8,\n            SyntheticProperty = 16,\n            SyntheticHostProperty = 32,\n            CatSyntheticProperty = 48,\n            Types = 15\n    }\n    export interface OutputDef {\n            type: OutputType;\n            target: 'window' | 'document' | 'body' | 'component' | null;\n            eventName: string;\n            propName: string | null;\n    }\n    export const enum OutputType {\n            ElementOutput = 0,\n            DirectiveOutput = 1\n    }\n    export const enum QueryValueType {\n            ElementRef = 0,\n            RenderElement = 1,\n            TemplateRef = 2,\n            ViewContainerRef = 3,\n            Provider = 4\n    }\n    export interface ElementDef {\n            name: string | null;\n            ns: string | null;\n            /** ns, name, value */\n            attrs: [string, string, string][] | null;\n            template: ViewDefinition | null;\n            componentProvider: NodeDef | null;\n            componentRendererType: RendererType2 | null;\n            componentView: ViewDefinitionFactory | null;\n            /**\n                * visible public providers for DI in the view,\n                * as see from this element. This does not include private providers.\n                */\n            publicProviders: {\n                    [tokenKey: string]: NodeDef;\n            } | null;\n            /**\n                * same as visiblePublicProviders, but also includes private providers\n                * that are located on this element.\n                */\n            allProviders: {\n                    [tokenKey: string]: NodeDef;\n            } | null;\n            handleEvent: ElementHandleEventFn | null;\n    }\n    export interface ElementHandleEventFn {\n            (view: ViewData, eventName: string, event: any): boolean;\n    }\n    export interface ProviderDef {\n            token: any;\n            value: any;\n            deps: DepDef[];\n    }\n    export interface NgModuleProviderDef {\n            flags: NodeFlags;\n            index: number;\n            token: any;\n            value: any;\n            deps: DepDef[];\n    }\n    export interface DepDef {\n            flags: DepFlags;\n            token: any;\n            tokenKey: string;\n    }\n    /**\n        * Bitmask for DI flags\n        */\n    export const enum DepFlags {\n            None = 0,\n            SkipSelf = 1,\n            Optional = 2,\n            Self = 4,\n            Value = 8\n    }\n    export interface TextDef {\n            prefix: string;\n    }\n    export interface QueryDef {\n            id: number;\n            filterId: number;\n            bindings: QueryBindingDef[];\n    }\n    export interface QueryBindingDef {\n            propName: string;\n            bindingType: QueryBindingType;\n    }\n    export const enum QueryBindingType {\n            First = 0,\n            All = 1\n    }\n    export interface NgContentDef {\n            /**\n                * this index is checked against NodeDef.ngContentIndex to find the nodes\n                * that are matched by this ng-content.\n                * Note that a NodeDef with an ng-content can be reprojected, i.e.\n                * have a ngContentIndex on its own.\n                */\n            index: number;\n    }\n    export interface NgModuleData extends Injector, NgModuleRef<any> {\n            _def: NgModuleDefinition;\n            _parent: Injector;\n            _providers: any[];\n    }\n    /**\n        * View instance data.\n        * Attention: Adding fields to this is performance sensitive!\n        */\n    export interface ViewData {\n            def: ViewDefinition;\n            root: RootData;\n            renderer: Renderer2;\n            parentNodeDef: NodeDef | null;\n            parent: ViewData | null;\n            viewContainerParent: ViewData | null;\n            component: any;\n            context: any;\n            nodes: {\n                    [key: number]: NodeData;\n            };\n            state: ViewState;\n            oldValues: any[];\n            disposables: DisposableFn[] | null;\n            initIndex: number;\n    }\n    /**\n        * Bitmask of states\n        */\n    export const enum ViewState {\n            BeforeFirstCheck = 1,\n            FirstCheck = 2,\n            Attached = 4,\n            ChecksEnabled = 8,\n            IsProjectedView = 16,\n            CheckProjectedView = 32,\n            CheckProjectedViews = 64,\n            Destroyed = 128,\n            InitState_Mask = 1792,\n            InitState_BeforeInit = 0,\n            InitState_CallingOnInit = 256,\n            InitState_CallingAfterContentInit = 512,\n            InitState_CallingAfterViewInit = 768,\n            InitState_AfterInit = 1024,\n            CatDetectChanges = 12,\n            CatInit = 13\n    }\n    export function shiftInitState(view: ViewData, priorInitState: ViewState, newInitState: ViewState): boolean;\n    export function shouldCallLifecycleInitHook(view: ViewData, initState: ViewState, index: number): boolean;\n    export interface DisposableFn {\n            (): void;\n    }\n    /**\n        * Node instance data.\n        *\n        * We have a separate type per NodeType to save memory\n        * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n        *\n        * To keep our code monomorphic,\n        * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n        * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n        * purposes.\n        */\n    export class NodeData {\n    }\n    /**\n        * Data for an instantiated NodeType.Text.\n        *\n        * Attention: Adding fields to this is performance sensitive!\n        */\n    export interface TextData {\n            renderText: any;\n    }\n    /**\n        * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n        */\n    export function asTextData(view: ViewData, index: number): TextData;\n    /**\n        * Data for an instantiated NodeType.Element.\n        *\n        * Attention: Adding fields to this is performance sensitive!\n        */\n    export interface ElementData {\n            renderElement: any;\n            componentView: ViewData;\n            viewContainer: ViewContainerData | null;\n            template: TemplateData;\n    }\n    export interface ViewContainerData extends ViewContainerRef {\n            _embeddedViews: ViewData[];\n    }\n    export interface TemplateData extends TemplateRef<any> {\n            _projectedViews: ViewData[];\n    }\n    /**\n        * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n        */\n    export function asElementData(view: ViewData, index: number): ElementData;\n    /**\n        * Data for an instantiated NodeType.Provider.\n        *\n        * Attention: Adding fields to this is performance sensitive!\n        */\n    export interface ProviderData {\n            instance: any;\n    }\n    /**\n        * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n        */\n    export function asProviderData(view: ViewData, index: number): ProviderData;\n    /**\n        * Data for an instantiated NodeType.PureExpression.\n        *\n        * Attention: Adding fields to this is performance sensitive!\n        */\n    export interface PureExpressionData {\n            value: any;\n    }\n    /**\n        * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n        */\n    export function asPureExpressionData(view: ViewData, index: number): PureExpressionData;\n    /**\n        * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n        */\n    export function asQueryList(view: ViewData, index: number): QueryList<any>;\n    export interface RootData {\n            injector: Injector;\n            ngModule: NgModuleRef<any>;\n            projectableNodes: any[][];\n            selectorOrNode: any;\n            renderer: Renderer2;\n            rendererFactory: RendererFactory2;\n            errorHandler: ErrorHandler;\n            sanitizer: Sanitizer;\n    }\n    export abstract class DebugContext {\n            abstract readonly view: ViewData;\n            abstract readonly nodeIndex: number | null;\n            abstract readonly injector: Injector;\n            abstract readonly component: any;\n            abstract readonly providerTokens: any[];\n            abstract readonly references: {\n                    [key: string]: any;\n            };\n            abstract readonly context: any;\n            abstract readonly componentRenderElement: any;\n            abstract readonly renderNode: any;\n            abstract logError(console: Console, ...values: any[]): void;\n    }\n    export const enum CheckType {\n            CheckAndUpdate = 0,\n            CheckNoChanges = 1\n    }\n    export interface ProviderOverride {\n            token: any;\n            flags: NodeFlags;\n            value: any;\n            deps: ([DepFlags, any] | any)[];\n            deprecatedBehavior: boolean;\n    }\n    export interface Services {\n            setCurrentNode(view: ViewData, nodeIndex: number): void;\n            createRootView(injector: Injector, projectableNodes: any[][], rootSelectorOrNode: string | any, def: ViewDefinition, ngModule: NgModuleRef<any>, context?: any): ViewData;\n            createEmbeddedView(parent: ViewData, anchorDef: NodeDef, viewDef: ViewDefinition, context?: any): ViewData;\n            createComponentView(parentView: ViewData, nodeDef: NodeDef, viewDef: ViewDefinition, hostElement: any): ViewData;\n            createNgModuleRef(moduleType: Type<any>, parent: Injector, bootstrapComponents: Type<any>[], def: NgModuleDefinition): NgModuleRef<any>;\n            overrideProvider(override: ProviderOverride): void;\n            overrideComponentView(compType: Type<any>, compFactory: ComponentFactory<any>): void;\n            clearOverrides(): void;\n            checkAndUpdateView(view: ViewData): void;\n            checkNoChangesView(view: ViewData): void;\n            destroyView(view: ViewData): void;\n            resolveDep(view: ViewData, elDef: NodeDef | null, allowPrivateServices: boolean, depDef: DepDef, notFoundValue?: any): any;\n            createDebugContext(view: ViewData, nodeIndex: number): DebugContext;\n            handleEvent: ViewHandleEventFn;\n            updateDirectives: (view: ViewData, checkType: CheckType) => void;\n            updateRenderer: (view: ViewData, checkType: CheckType) => void;\n            dirtyParentQueries: (view: ViewData) => void;\n    }\n    /**\n        * This object is used to prevent cycles in the source files and to have a place where\n        * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n        */\n    export const Services: Services;\n}\n\ndeclare module '@angular/core/src/change_detection/differs/iterable_differs' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { StaticProvider } from '@angular/core/src/di/provider';\n    /**\n        * A type describing supported iterable types.\n        *\n        * @publicApi\n        */\n    export type NgIterable<T> = Array<T> | Iterable<T>;\n    /**\n        * A strategy for tracking changes over time to an iterable. Used by {@link NgForOf} to\n        * respond to changes in an iterable by effecting equivalent changes in the DOM.\n        *\n        * @publicApi\n        */\n    export interface IterableDiffer<V> {\n            /**\n                * Compute a difference between the previous state and the new `object` state.\n                *\n                * @param object containing the new value.\n                * @returns an object describing the difference. The return value is only valid until the next\n                * `diff()` invocation.\n                */\n            diff(object: NgIterable<V>): IterableChanges<V> | null;\n    }\n    /**\n        * An object describing the changes in the `Iterable` collection since last time\n        * `IterableDiffer#diff()` was invoked.\n        *\n        * @publicApi\n        */\n    export interface IterableChanges<V> {\n            /**\n                * Iterate over all changes. `IterableChangeRecord` will contain information about changes\n                * to each item.\n                */\n            forEachItem(fn: (record: IterableChangeRecord<V>) => void): void;\n            /**\n                * Iterate over a set of operations which when applied to the original `Iterable` will produce the\n                * new `Iterable`.\n                *\n                * NOTE: These are not necessarily the actual operations which were applied to the original\n                * `Iterable`, rather these are a set of computed operations which may not be the same as the\n                * ones applied.\n                *\n                * @param record A change which needs to be applied\n                * @param previousIndex The `IterableChangeRecord#previousIndex` of the `record` refers to the\n                *        original `Iterable` location, where as `previousIndex` refers to the transient location\n                *        of the item, after applying the operations up to this point.\n                * @param currentIndex The `IterableChangeRecord#currentIndex` of the `record` refers to the\n                *        original `Iterable` location, where as `currentIndex` refers to the transient location\n                *        of the item, after applying the operations up to this point.\n                */\n            forEachOperation(fn: (record: IterableChangeRecord<V>, previousIndex: number | null, currentIndex: number | null) => void): void;\n            /**\n                * Iterate over changes in the order of original `Iterable` showing where the original items\n                * have moved.\n                */\n            forEachPreviousItem(fn: (record: IterableChangeRecord<V>) => void): void;\n            /** Iterate over all added items. */\n            forEachAddedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n            /** Iterate over all moved items. */\n            forEachMovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n            /** Iterate over all removed items. */\n            forEachRemovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n            /** Iterate over all items which had their identity (as computed by the `TrackByFunction`)\n                * changed. */\n            forEachIdentityChange(fn: (record: IterableChangeRecord<V>) => void): void;\n    }\n    /**\n        * Record representing the item change information.\n        *\n        * @publicApi\n        */\n    export interface IterableChangeRecord<V> {\n            /** Current index of the item in `Iterable` or null if removed. */\n            readonly currentIndex: number | null;\n            /** Previous index of the item in `Iterable` or null if added. */\n            readonly previousIndex: number | null;\n            /** The item. */\n            readonly item: V;\n            /** Track by identity as computed by the `TrackByFunction`. */\n            readonly trackById: any;\n    }\n    /**\n        * @deprecated v4.0.0 - Use IterableChangeRecord instead.\n        * @publicApi\n        */\n    export interface CollectionChangeRecord<V> extends IterableChangeRecord<V> {\n    }\n    /**\n        * An optional function passed into {@link NgForOf} that defines how to track\n        * items in an iterable (e.g. fby index or id)\n        *\n        * @publicApi\n        */\n    export interface TrackByFunction<T> {\n            (index: number, item: T): any;\n    }\n    /**\n        * Provides a factory for {@link IterableDiffer}.\n        *\n        * @publicApi\n        */\n    export interface IterableDifferFactory {\n            supports(objects: any): boolean;\n            create<V>(trackByFn?: TrackByFunction<V>): IterableDiffer<V>;\n    }\n    /**\n        * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n        *\n        * @publicApi\n        */\n    export class IterableDiffers {\n            /** @nocollapse */\n            static ngInjectableDef: never;\n            /**\n                * @deprecated v4.0.0 - Should be private\n                */\n            factories: IterableDifferFactory[];\n            constructor(factories: IterableDifferFactory[]);\n            static create(factories: IterableDifferFactory[], parent?: IterableDiffers): IterableDiffers;\n            /**\n                * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n                * inherited {@link IterableDiffers} instance with the provided factories and return a new\n                * {@link IterableDiffers} instance.\n                *\n                * @usageNotes\n                * ### Example\n                *\n                * The following example shows how to extend an existing list of factories,\n                * which will only be applied to the injector for this component and its children.\n                * This step is all that's required to make a new {@link IterableDiffer} available.\n                *\n                * ```\n                * @Component({\n                *   viewProviders: [\n                *     IterableDiffers.extend([new ImmutableListDiffer()])\n                *   ]\n                * })\n                * ```\n                */\n            static extend(factories: IterableDifferFactory[]): StaticProvider;\n            find(iterable: any): IterableDifferFactory;\n    }\n    export function getTypeNameForDebugging(type: any): string;\n}\n\ndeclare module '@angular/core/src/change_detection/differs/keyvalue_differs' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { StaticProvider } from '@angular/core/src/di';\n    /**\n        * A differ that tracks changes made to an object over time.\n        *\n        * @publicApi\n        */\n    export interface KeyValueDiffer<K, V> {\n            /**\n                * Compute a difference between the previous state and the new `object` state.\n                *\n                * @param object containing the new value.\n                * @returns an object describing the difference. The return value is only valid until the next\n                * `diff()` invocation.\n                */\n            diff(object: Map<K, V>): KeyValueChanges<K, V> | null;\n            /**\n                * Compute a difference between the previous state and the new `object` state.\n                *\n                * @param object containing the new value.\n                * @returns an object describing the difference. The return value is only valid until the next\n                * `diff()` invocation.\n                */\n            diff(object: {\n                    [key: string]: V;\n            }): KeyValueChanges<string, V> | null;\n    }\n    /**\n        * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n        * `KeyValueDiffer#diff()` was invoked.\n        *\n        * @publicApi\n        */\n    export interface KeyValueChanges<K, V> {\n            /**\n                * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n                * to each item.\n                */\n            forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n            /**\n                * Iterate over changes in the order of original Map showing where the original items\n                * have moved.\n                */\n            forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n            /**\n                * Iterate over all keys for which values have changed.\n                */\n            forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n            /**\n                * Iterate over all added items.\n                */\n            forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n            /**\n                * Iterate over all removed items.\n                */\n            forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    }\n    /**\n        * Record representing the item change information.\n        *\n        * @publicApi\n        */\n    export interface KeyValueChangeRecord<K, V> {\n            /**\n                * Current key in the Map.\n                */\n            readonly key: K;\n            /**\n                * Current value for the key or `null` if removed.\n                */\n            readonly currentValue: V | null;\n            /**\n                * Previous value for the key or `null` if added.\n                */\n            readonly previousValue: V | null;\n    }\n    /**\n        * Provides a factory for {@link KeyValueDiffer}.\n        *\n        * @publicApi\n        */\n    export interface KeyValueDifferFactory {\n            /**\n                * Test to see if the differ knows how to diff this kind of object.\n                */\n            supports(objects: any): boolean;\n            /**\n                * Create a `KeyValueDiffer`.\n                */\n            create<K, V>(): KeyValueDiffer<K, V>;\n    }\n    /**\n        * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n        *\n        * @publicApi\n        */\n    export class KeyValueDiffers {\n            /** @nocollapse */\n            static ngInjectableDef: never;\n            /**\n                * @deprecated v4.0.0 - Should be private.\n                */\n            factories: KeyValueDifferFactory[];\n            constructor(factories: KeyValueDifferFactory[]);\n            static create<S>(factories: KeyValueDifferFactory[], parent?: KeyValueDiffers): KeyValueDiffers;\n            /**\n                * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n                * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n                * {@link KeyValueDiffers} instance.\n                *\n                * @usageNotes\n                * ### Example\n                *\n                * The following example shows how to extend an existing list of factories,\n                * which will only be applied to the injector for this component and its children.\n                * This step is all that's required to make a new {@link KeyValueDiffer} available.\n                *\n                * ```\n                * @Component({\n                *   viewProviders: [\n                *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n                *   ]\n                * })\n                * ```\n                */\n            static extend<S>(factories: KeyValueDifferFactory[]): StaticProvider;\n            find(kv: any): KeyValueDifferFactory;\n    }\n}\n\ndeclare module '@angular/core/src/change_detection/differs/default_iterable_differ' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, NgIterable, TrackByFunction } from '@angular/core/src/change_detection/differs/iterable_differs';\n    export class DefaultIterableDifferFactory implements IterableDifferFactory {\n            constructor();\n            supports(obj: Object | null | undefined): boolean;\n            create<V>(trackByFn?: TrackByFunction<V>): DefaultIterableDiffer<V>;\n    }\n    /**\n        * @deprecated v4.0.0 - Should not be part of public API.\n        * @publicApi\n        */\n    export class DefaultIterableDiffer<V> implements IterableDiffer<V>, IterableChanges<V> {\n            readonly length: number;\n            readonly collection: V[] | Iterable<V> | null;\n            constructor(trackByFn?: TrackByFunction<V>);\n            forEachItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n            forEachOperation(fn: (item: IterableChangeRecord<V>, previousIndex: number | null, currentIndex: number | null) => void): void;\n            forEachPreviousItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n            forEachAddedItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n            forEachMovedItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n            forEachRemovedItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n            forEachIdentityChange(fn: (record: IterableChangeRecord_<V>) => void): void;\n            diff(collection: NgIterable<V>): DefaultIterableDiffer<V> | null;\n            onDestroy(): void;\n            check(collection: NgIterable<V>): boolean;\n            readonly isDirty: boolean;\n    }\n    export class IterableChangeRecord_<V> implements IterableChangeRecord<V> {\n            item: V;\n            trackById: any;\n            currentIndex: number | null;\n            previousIndex: number | null;\n            constructor(item: V, trackById: any);\n    }\n}\n\ndeclare module '@angular/core/src/change_detection/differs/default_keyvalue_differ' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory } from '@angular/core/src/change_detection/differs/keyvalue_differs';\n    export class DefaultKeyValueDifferFactory<K, V> implements KeyValueDifferFactory {\n            constructor();\n            supports(obj: any): boolean;\n            create<K, V>(): KeyValueDiffer<K, V>;\n    }\n    export class DefaultKeyValueDiffer<K, V> implements KeyValueDiffer<K, V>, KeyValueChanges<K, V> {\n            readonly isDirty: boolean;\n            forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n            forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n            forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n            forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n            forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n            diff(map?: Map<any, any> | {\n                    [k: string]: any;\n            } | null): any;\n            onDestroy(): void;\n            /**\n                * Check the current state of the map vs the previous.\n                * The algorithm is optimised for when the keys do no change.\n                */\n            check(map: Map<any, any> | {\n                    [k: string]: any;\n            }): boolean;\n    }\n}\n\ndeclare module '@angular/core/src/change_detection/pipe_transform' {\n    /**\n        * To create a Pipe, you must implement this interface.\n        *\n        * Angular invokes the `transform` method with the value of a binding\n        * as the first argument, and any parameters as the second argument in list form.\n        *\n        * @usageNotes\n        * ### Example\n        *\n        * The `RepeatPipe` below repeats the value as many times as indicated by the first argument:\n        *\n        * ```\n        * import {Pipe, PipeTransform} from '@angular/core';\n        *\n        * @Pipe({name: 'repeat'})\n        * export class RepeatPipe implements PipeTransform {\n        *   transform(value: any, times: number) {\n        *     return value.repeat(times);\n        *   }\n        * }\n        * ```\n        *\n        * Invoking `{{ 'ok' | repeat:3 }}` in a template produces `okokok`.\n        *\n        * @publicApi\n        */\n    export interface PipeTransform {\n            transform(value: any, ...args: any[]): any;\n    }\n}\n\ndeclare module '@angular/core/src/reflection/platform_reflection_capabilities' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Type } from '@angular/core/src/type';\n    import { GetterFn, MethodFn, SetterFn } from '@angular/core/src/reflection/types';\n    export interface PlatformReflectionCapabilities {\n            isReflectionEnabled(): boolean;\n            factory(type: Type<any>): Function;\n            hasLifecycleHook(type: any, lcProperty: string): boolean;\n            guards(type: any): {\n                    [key: string]: any;\n            };\n            /**\n                * Return a list of annotations/types for constructor parameters\n                */\n            parameters(type: Type<any>): any[][];\n            /**\n                * Return a list of annotations declared on the class\n                */\n            annotations(type: Type<any>): any[];\n            /**\n                * Return a object literal which describes the annotations on Class fields/properties.\n                */\n            propMetadata(typeOrFunc: Type<any>): {\n                    [key: string]: any[];\n            };\n            getter(name: string): GetterFn;\n            setter(name: string): SetterFn;\n            method(name: string): MethodFn;\n            importUri(type: Type<any>): string;\n            resourceUri(type: Type<any>): string;\n            resolveIdentifier(name: string, moduleUrl: string, members: string[], runtime: any): any;\n            resolveEnum(enumIdentifier: any, name: string): any;\n    }\n}\n\ndeclare module '@angular/core/src/render3/component' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Type } from '@angular/core/src/core';\n    import { Injector } from '@angular/core/src/di/injector';\n    import { Sanitizer } from '@angular/core/src/sanitization/security';\n    import { ComponentDef, ComponentType } from '@angular/core/src/render3/interfaces/definition';\n    import { PlayerHandler } from '@angular/core/src/render3/interfaces/player';\n    import { RElement, Renderer3, RendererFactory3 } from '@angular/core/src/render3/interfaces/renderer';\n    import { LViewData, RootContext } from '@angular/core/src/render3/interfaces/view';\n    /** Options that control how the component should be bootstrapped. */\n    export interface CreateComponentOptions {\n            /** Which renderer factory to use. */\n            rendererFactory?: RendererFactory3;\n            /** A custom sanitizer instance */\n            sanitizer?: Sanitizer;\n            /** A custom animation player handler */\n            playerHandler?: PlayerHandler;\n            /**\n                * Host element on which the component will be bootstrapped. If not specified,\n                * the component definition's `tag` is used to query the existing DOM for the\n                * element to bootstrap.\n                */\n            host?: RElement | string;\n            /** Module injector for the component. If unspecified, the injector will be NULL_INJECTOR. */\n            injector?: Injector;\n            /**\n                * List of features to be applied to the created component. Features are simply\n                * functions that decorate a component with a certain behavior.\n                *\n                * Typically, the features in this list are features that cannot be added to the\n                * other features list in the component definition because they rely on other factors.\n                *\n                * Example: `RootLifecycleHooks` is a function that adds lifecycle hook capabilities\n                * to root components in a tree-shakable way. It cannot be added to the component\n                * features list because there's no way of knowing when the component will be used as\n                * a root component.\n                */\n            hostFeatures?: HostFeature[];\n            /**\n                * A function which is used to schedule change detection work in the future.\n                *\n                * When marking components as dirty, it is necessary to schedule the work of\n                * change detection in the future. This is done to coalesce multiple\n                * {@link markDirty} calls into a single changed detection processing.\n                *\n                * The default value of the scheduler is the `requestAnimationFrame` function.\n                *\n                * It is also useful to override this function for testing purposes.\n                */\n            scheduler?: (work: () => void) => void;\n    }\n    /** See CreateComponentOptions.hostFeatures */\n    type HostFeature = (<T>(component: T, componentDef: ComponentDef<T>) => void);\n    export const NULL_INJECTOR: Injector;\n    /**\n        * Bootstraps a Component into an existing host element and returns an instance\n        * of the component.\n        *\n        * Use this function to bootstrap a component into the DOM tree. Each invocation\n        * of this function will create a separate tree of components, injectors and\n        * change detection cycles and lifetimes. To dynamically insert a new component\n        * into an existing tree such that it shares the same injection, change detection\n        * and object lifetime, use {@link ViewContainer#createComponent}.\n        *\n        * @param componentType Component to bootstrap\n        * @param options Optional parameters which control bootstrapping\n        */\n    export function renderComponent<T>(componentType: ComponentType<T> | Type<T>, opts?: CreateComponentOptions): T;\n    /**\n        * Creates the root component view and the root component node.\n        *\n        * @param rNode Render host element.\n        * @param def ComponentDef\n        * @param rootView The parent view where the host node is stored\n        * @param renderer The current renderer\n        * @param sanitizer The sanitizer, if provided\n        *\n        * @returns Component view created\n        */\n    export function createRootComponentView(rNode: RElement | null, def: ComponentDef<any>, rootView: LViewData, renderer: Renderer3, sanitizer?: Sanitizer | null): LViewData;\n    /**\n        * Creates a root component and sets it up with features and host bindings. Shared by\n        * renderComponent() and ViewContainerRef.createComponent().\n        */\n    export function createRootComponent<T>(componentView: LViewData, componentDef: ComponentDef<T>, rootView: LViewData, rootContext: RootContext, hostFeatures: HostFeature[] | null): any;\n    export function createRootContext(scheduler?: (workFn: () => void) => void, playerHandler?: PlayerHandler | null): RootContext;\n    /**\n        * Used to enable lifecycle hooks on the root component.\n        *\n        * Include this feature when calling `renderComponent` if the root component\n        * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n        * be called properly.\n        *\n        * Example:\n        *\n        * ```\n        * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n        * ```\n        */\n    export function LifecycleHooksFeature(component: any, def: ComponentDef<any>): void;\n    /**\n        * Wait on component until it is rendered.\n        *\n        * This function returns a `Promise` which is resolved when the component's\n        * change detection is executed. This is determined by finding the scheduler\n        * associated with the `component`'s render tree and waiting until the scheduler\n        * flushes. If nothing is scheduled, the function returns a resolved promise.\n        *\n        * Example:\n        * ```\n        * await whenRendered(myComponent);\n        * ```\n        *\n        * @param component Component to wait upon\n        * @returns Promise which resolves when the component is rendered.\n        */\n    export function whenRendered(component: any): Promise<null>;\n    export {};\n}\n\ndeclare module '@angular/core/src/render3/definition' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import './ng_dev_mode';\n    import { ChangeDetectionStrategy } from '@angular/core/src/change_detection/constants';\n    import { NgModuleDef } from '@angular/core/src/metadata/ng_module';\n    import { ViewEncapsulation } from '@angular/core/src/metadata/view';\n    import { Type } from '@angular/core/src/type';\n    import { BaseDef, ComponentDef, ComponentDefFeature, ComponentQuery, ComponentTemplate, ComponentType, DirectiveDef, DirectiveDefFeature, DirectiveType, DirectiveTypesOrFactory, PipeDef, PipeType, PipeTypesOrFactory } from '@angular/core/src/render3/interfaces/definition';\n    import { CssSelectorList, SelectorFlags } from '@angular/core/src/render3/interfaces/projection';\n    export const EMPTY: {};\n    export const EMPTY_ARRAY: any[];\n    /**\n        * Create a component definition object.\n        *\n        *\n        * # Example\n        * ```\n        * class MyDirective {\n        *   // Generated by Angular Template Compiler\n        *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n        *   static ngComponentDef = defineComponent({\n        *     ...\n        *   });\n        * }\n        * ```\n        */\n    export function defineComponent<T>(componentDefinition: {\n            /**\n                * Directive type, needed to configure the injector.\n                */\n            type: Type<T>;\n            /** The selectors that will be used to match nodes to this component. */\n            selectors: CssSelectorList;\n            /**\n                * Factory method used to create an instance of directive.\n                */\n            factory: (t: Type<T> | null) => T;\n            /**\n                * The number of nodes, local refs, and pipes in this component template.\n                *\n                * Used to calculate the length of this component's LViewData array, so we\n                * can pre-fill the array and set the binding start index.\n                */\n            consts: number;\n            /**\n                * The number of bindings in this component template (including pure fn bindings).\n                *\n                * Used to calculate the length of this component's LViewData array, so we\n                * can pre-fill the array and set the host binding start index.\n                */\n            vars: number;\n            /**\n                * The number of host bindings (including pure fn bindings) in this component.\n                *\n                * Used to calculate the length of the LViewData array for the *parent* component\n                * of this component.\n                */\n            hostVars?: number;\n            /**\n                * Static attributes to set on host element.\n                *\n                * Even indices: attribute name\n                * Odd indices: attribute value\n                */\n            attributes?: string[];\n            /**\n                * A map of input names.\n                *\n                * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n                *\n                * Given:\n                * ```\n                * class MyComponent {\n                *   @Input()\n                *   publicInput1: string;\n                *\n                *   @Input('publicInput2')\n                *   declaredInput2: string;\n                * }\n                * ```\n                *\n                * is described as:\n                * ```\n                * {\n                *   publicInput1: 'publicInput1',\n                *   declaredInput2: ['declaredInput2', 'publicInput2'],\n                * }\n                * ```\n                *\n                * Which the minifier may translate to:\n                * ```\n                * {\n                *   minifiedPublicInput1: 'publicInput1',\n                *   minifiedDeclaredInput2: [ 'publicInput2', 'declaredInput2'],\n                * }\n                * ```\n                *\n                * This allows the render to re-construct the minified, public, and declared names\n                * of properties.\n                *\n                * NOTE:\n                *  - Because declared and public name are usually same we only generate the array\n                *    `['declared', 'public']` format when they differ.\n                *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n                *    inconsistent behavior in that it uses declared names rather than minified or public. For\n                *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n                *    API will be simplified to be consistent with `output`.\n                */\n            inputs?: {\n                    [P in keyof T]?: string | [string, string];\n            };\n            /**\n                * A map of output names.\n                *\n                * The format is in: `{[actualPropertyName: string]:string}`.\n                *\n                * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n                *\n                * This allows the render to re-construct the minified and non-minified names\n                * of properties.\n                */\n            outputs?: {\n                    [P in keyof T]?: string;\n            };\n            /**\n                * Function executed by the parent template to allow child directive to apply host bindings.\n                */\n            hostBindings?: (directiveIndex: number, elementIndex: number) => void;\n            /**\n                * Function to create instances of content queries associated with a given directive.\n                */\n            contentQueries?: ((dirIndex: number) => void);\n            /** Refreshes content queries associated with directives in a given view */\n            contentQueriesRefresh?: ((directiveIndex: number, queryIndex: number) => void);\n            /**\n                * Defines the name that can be used in the template to assign this directive to a variable.\n                *\n                * See: {@link Directive.exportAs}\n                */\n            exportAs?: string;\n            /**\n                * Template function use for rendering DOM.\n                *\n                * This function has following structure.\n                *\n                * ```\n                * function Template<T>(ctx:T, creationMode: boolean) {\n                *   if (creationMode) {\n                *     // Contains creation mode instructions.\n                *   }\n                *   // Contains binding update instructions\n                * }\n                * ```\n                *\n                * Common instructions are:\n                * Creation mode instructions:\n                *  - `elementStart`, `elementEnd`\n                *  - `text`\n                *  - `container`\n                *  - `listener`\n                *\n                * Binding update instructions:\n                * - `bind`\n                * - `elementAttribute`\n                * - `elementProperty`\n                * - `elementClass`\n                * - `elementStyle`\n                *\n                */\n            template: ComponentTemplate<T>;\n            /**\n                * Additional set of instructions specific to view query processing. This could be seen as a\n                * set of instruction to be inserted into the template function.\n                *\n                * Query-related instructions need to be pulled out to a specific function as a timing of\n                * execution is different as compared to all other instructions (after change detection hooks but\n                * before view hooks).\n                */\n            viewQuery?: ComponentQuery<T> | null;\n            /**\n                * A list of optional features to apply.\n                *\n                * See: {@link NgOnChangesFeature}, {@link ProvidersFeature}\n                */\n            features?: ComponentDefFeature[];\n            /**\n                * Defines template and style encapsulation options available for Component's {@link Component}.\n                */\n            encapsulation?: ViewEncapsulation;\n            /**\n                * Defines arbitrary developer-defined data to be stored on a renderer instance.\n                * This is useful for renderers that delegate to other renderers.\n                *\n                * see: animation\n                */\n            data?: {\n                    [kind: string]: any;\n            };\n            /**\n                * A set of styles that the component needs to be present for component to render correctly.\n                */\n            styles?: string[];\n            /**\n                * The strategy that the default change detector uses to detect changes.\n                * When set, takes effect the next time change detection is triggered.\n                */\n            changeDetection?: ChangeDetectionStrategy;\n            /**\n                * Registry of directives and components that may be found in this component's view.\n                *\n                * The property is either an array of `DirectiveDef`s or a function which returns the array of\n                * `DirectiveDef`s. The function is necessary to be able to support forward declarations.\n                */\n            directives?: DirectiveTypesOrFactory | null;\n            /**\n                * Registry of pipes that may be found in this component's view.\n                *\n                * The property is either an array of `PipeDefs`s or a function which returns the array of\n                * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n                */\n            pipes?: PipeTypesOrFactory | null;\n    }): never;\n    export function extractDirectiveDef(type: DirectiveType<any> & ComponentType<any>): DirectiveDef<any> | ComponentDef<any>;\n    export function extractPipeDef(type: PipeType<any>): PipeDef<any>;\n    export function defineNgModule<T>(def: {\n            type: T;\n    } & Partial<NgModuleDef<T>>): never;\n    /**\n        * Create a base definition\n        *\n        * # Example\n        * ```\n        * class ShouldBeInherited {\n        *   static ngBaseDef = defineBase({\n        *      ...\n        *   })\n        * }\n        * @param baseDefinition The base definition parameters\n        */\n    export function defineBase<T>(baseDefinition: {\n            /**\n                * A map of input names.\n                *\n                * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n                *\n                * Given:\n                * ```\n                * class MyComponent {\n                *   @Input()\n                *   publicInput1: string;\n                *\n                *   @Input('publicInput2')\n                *   declaredInput2: string;\n                * }\n                * ```\n                *\n                * is described as:\n                * ```\n                * {\n                *   publicInput1: 'publicInput1',\n                *   declaredInput2: ['declaredInput2', 'publicInput2'],\n                * }\n                * ```\n                *\n                * Which the minifier may translate to:\n                * ```\n                * {\n                *   minifiedPublicInput1: 'publicInput1',\n                *   minifiedDeclaredInput2: [ 'declaredInput2', 'publicInput2'],\n                * }\n                * ```\n                *\n                * This allows the render to re-construct the minified, public, and declared names\n                * of properties.\n                *\n                * NOTE:\n                *  - Because declared and public name are usually same we only generate the array\n                *    `['declared', 'public']` format when they differ.\n                *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n                *    inconsistent behavior in that it uses declared names rather than minified or public. For\n                *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n                *    API will be simplified to be consistent with `outputs`.\n                */\n            inputs?: {\n                    [P in keyof T]?: string | [string, string];\n            };\n            /**\n                * A map of output names.\n                *\n                * The format is in: `{[actualPropertyName: string]:string}`.\n                *\n                * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n                *\n                * This allows the render to re-construct the minified and non-minified names\n                * of properties.\n                */\n            outputs?: {\n                    [P in keyof T]?: string;\n            };\n    }): BaseDef<T>;\n    /**\n        * Create a directive definition object.\n        *\n        * # Example\n        * ```\n        * class MyDirective {\n        *   // Generated by Angular Template Compiler\n        *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n        *   static ngDirectiveDef = defineDirective({\n        *     ...\n        *   });\n        * }\n        * ```\n        */\n    export const defineDirective: <T>(directiveDefinition: {\n            /**\n                * Directive type, needed to configure the injector.\n                */\n            type: Type<T>;\n            /** The selectors that will be used to match nodes to this directive. */\n            selectors: (string | SelectorFlags)[][];\n            /**\n                * Factory method used to create an instance of directive.\n                */\n            factory: (t: Type<T> | null) => T;\n            /**\n                * Static attributes to set on host element.\n                *\n                * Even indices: attribute name\n                * Odd indices: attribute value\n                */\n            attributes?: string[] | undefined;\n            /**\n                * A map of input names.\n                *\n                * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n                *\n                * Given:\n                * ```\n                * class MyComponent {\n                *   @Input()\n                *   publicInput1: string;\n                *\n                *   @Input('publicInput2')\n                *   declaredInput2: string;\n                * }\n                * ```\n                *\n                * is described as:\n                * ```\n                * {\n                *   publicInput1: 'publicInput1',\n                *   declaredInput2: ['declaredInput2', 'publicInput2'],\n                * }\n                * ```\n                *\n                * Which the minifier may translate to:\n                * ```\n                * {\n                *   minifiedPublicInput1: 'publicInput1',\n                *   minifiedDeclaredInput2: [ 'publicInput2', 'declaredInput2'],\n                * }\n                * ```\n                *\n                * This allows the render to re-construct the minified, public, and declared names\n                * of properties.\n                *\n                * NOTE:\n                *  - Because declared and public name are usually same we only generate the array\n                *    `['declared', 'public']` format when they differ.\n                *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n                *    inconsistent behavior in that it uses declared names rather than minified or public. For\n                *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n                *    API will be simplified to be consistent with `output`.\n                */\n            inputs?: { [P in keyof T]?: string | [string, string] | undefined; } | undefined;\n            /**\n                * A map of output names.\n                *\n                * The format is in: `{[actualPropertyName: string]:string}`.\n                *\n                * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n                *\n                * This allows the render to re-construct the minified and non-minified names\n                * of properties.\n                */\n            outputs?: { [P in keyof T]?: string | undefined; } | undefined;\n            /**\n                * A list of optional features to apply.\n                *\n                * See: {@link NgOnChangesFeature}, {@link ProvidersFeature}, {@link InheritDefinitionFeature}\n                */\n            features?: DirectiveDefFeature[] | undefined;\n            /**\n                * The number of host bindings (including pure fn bindings) in this directive.\n                *\n                * Used to calculate the length of the LViewData array for the *parent* component\n                * of this directive.\n                */\n            hostVars?: number | undefined;\n            /**\n                * Function executed by the parent template to allow child directive to apply host bindings.\n                */\n            hostBindings?: ((directiveIndex: number, elementIndex: number) => void) | undefined;\n            /**\n                * Function to create instances of content queries associated with a given directive.\n                */\n            contentQueries?: ((directiveIndex: number) => void) | undefined;\n            /** Refreshes content queries associated with directives in a given view */\n            contentQueriesRefresh?: ((directiveIndex: number, queryIndex: number) => void) | undefined;\n            /**\n                * Defines the name that can be used in the template to assign this directive to a variable.\n                *\n                * See: {@link Directive.exportAs}\n                */\n            exportAs?: string | undefined;\n    }) => never;\n    /**\n        * Create a pipe definition object.\n        *\n        * # Example\n        * ```\n        * class MyPipe implements PipeTransform {\n        *   // Generated by Angular Template Compiler\n        *   static ngPipeDef = definePipe({\n        *     ...\n        *   });\n        * }\n        * ```\n        * @param pipeDef Pipe definition generated by the compiler\n        */\n    export function definePipe<T>(pipeDef: {\n            /** Name of the pipe. Used for matching pipes in template to pipe defs. */\n            name: string;\n            /** Pipe class reference. Needed to extract pipe lifecycle hooks. */\n            type: Type<T>;\n            /** A factory for creating a pipe instance. */\n            factory: (t: Type<T> | null) => T;\n            /** Whether the pipe is pure. */\n            pure?: boolean;\n    }): never;\n    /**\n        * The following getter methods retrieve the definition form the type. Currently the retrieval\n        * honors inheritance, but in the future we may change the rule to require that definitions are\n        * explicit. This would require some sort of migration strategy.\n        */\n    export function getComponentDef<T>(type: any): ComponentDef<T> | null;\n    export function getDirectiveDef<T>(type: any): DirectiveDef<T> | null;\n    export function getPipeDef<T>(type: any): PipeDef<T> | null;\n    export function getNgModuleDef<T>(type: any): NgModuleDef<T> | null;\n}\n\ndeclare module '@angular/core/src/render3/discovery_utils' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Injector } from '@angular/core/src/di/injector';\n    import { LContext } from '@angular/core/src/render3/interfaces/context';\n    import { LViewData, RootContext } from '@angular/core/src/render3/interfaces/view';\n    /**\n        * Returns the component instance associated with a given DOM host element.\n        * Elements which don't represent components return `null`.\n        *\n        * @param element Host DOM element from which the component should be retrieved for.\n        *\n        * ```\n        * <my-app>\n        *   #VIEW\n        *     <div>\n        *       <child-comp></child-comp>\n        *     </div>\n        * </mp-app>\n        *\n        * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n        * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n        * ```\n        *\n        * @publicApi\n        */\n    export function getComponent<T = {}>(element: Element): T | null;\n    /**\n        * Returns the component instance associated with view which owns the DOM element (`null`\n        * otherwise).\n        *\n        * @param element DOM element which is owned by an existing component's view.\n        *\n        * ```\n        * <my-app>\n        *   #VIEW\n        *     <div>\n        *       <child-comp></child-comp>\n        *     </div>\n        * </mp-app>\n        *\n        * expect(getViewComponent(<child-comp>) instanceof MyApp).toBeTruthy();\n        * expect(getViewComponent(<my-app>)).toEqual(null);\n        * ```\n        *\n        * @publicApi\n        */\n    export function getViewComponent<T = {}>(element: Element | {}): T | null;\n    /**\n        * Returns the `RootContext` instance that is associated with\n        * the application where the target is situated.\n        *\n        */\n    export function getRootContext(target: LViewData | {}): RootContext;\n    /**\n        * Retrieve all root components.\n        *\n        * Root components are those which have been bootstrapped by Angular.\n        *\n        * @param target A DOM element, component or directive instance.\n        *\n        * @publicApi\n        */\n    export function getRootComponents(target: {}): any[];\n    /**\n        * Retrieves an `Injector` associated with the element, component or directive.\n        *\n        * @param target A DOM element, component or directive instance.\n        *\n        * @publicApi\n        */\n    export function getInjector(target: {}): Injector;\n    /**\n        * Retrieves directives associated with a given DOM host element.\n        *\n        * @param target A DOM element, component or directive instance.\n        *\n        * @publicApi\n        */\n    export function getDirectives(target: {}): Array<{}>;\n    /**\n        * Returns LContext associated with a target passed as an argument.\n        * Throws if a given target doesn't have associated LContext.\n        *\n        */\n    export function loadContext(target: {}): LContext;\n    /**\n        * Retrieve the root view from any component by walking the parent `LViewData` until\n        * reaching the root `LViewData`.\n        *\n        * @param componentOrView any component or view\n        *\n        */\n    export function getRootView(componentOrView: LViewData | {}): LViewData;\n    /**\n        * Retrieve map of local references.\n        *\n        * The references are retrieved as a map of local reference name to element or directive instance.\n        *\n        * @param target A DOM element, component or directive instance.\n        *\n        * @publicApi\n        */\n    export function getLocalRefs(target: {}): {\n            [key: string]: any;\n    };\n    /**\n        * Retrieve the host element of the component.\n        *\n        * Use this function to retrieve the host element of the component. The host\n        * element is the element which the component is associated with.\n        *\n        * @param directive Component or Directive for which the host element should be retrieved.\n        *\n        * @publicApi\n        */\n    export function getHostElement<T>(directive: T): Element;\n    /**\n        * Retrieves the rendered text for a given component.\n        *\n        * This function retrieves the host element of a component and\n        * and then returns the `textContent` for that element. This implies\n        * that the text returned will include re-projected content of\n        * the component as well.\n        *\n        * @param component The component to return the content text for.\n        */\n    export function getRenderedText(component: any): string;\n}\n\ndeclare module '@angular/core/src/render3/features/inherit_definition_feature' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { ComponentDef, DirectiveDef } from '@angular/core/src/render3/interfaces/definition';\n    /**\n        * Merges the definition from a super class to a sub class.\n        * @param definition The definition that is a SubClass of another directive of component\n        */\n    export function InheritDefinitionFeature(definition: DirectiveDef<any> | ComponentDef<any>): void;\n}\n\ndeclare module '@angular/core/src/render3/features/ng_onchanges_feature' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { DirectiveDef } from '@angular/core/src/render3/interfaces/definition';\n    /**\n        * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n        * lifecycle hook, so it should be included in any component that implements\n        * that hook.\n        *\n        * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n        * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n        * inherited properties will not be propagated to the ngOnChanges lifecycle\n        * hook.\n        *\n        * Example usage:\n        *\n        * ```\n        * static ngComponentDef = defineComponent({\n        *   ...\n        *   inputs: {name: 'publicName'},\n        *   features: [NgOnChangesFeature]\n        * });\n        * ```\n        */\n    export function NgOnChangesFeature<T>(definition: DirectiveDef<T>): void;\n}\n\ndeclare module '@angular/core/src/render3/features/providers_feature' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Provider } from '@angular/core/src/di/provider';\n    import { DirectiveDef } from '@angular/core/src/render3/interfaces/definition';\n    /**\n        * This feature resolves the providers of a directive (or component),\n        * and publish them into the DI system, making it visible to others for injection.\n        *\n        * For example:\n        * class ComponentWithProviders {\n        *   constructor(private greeter: GreeterDE) {}\n        *\n        *   static ngComponentDef = defineComponent({\n        *     type: ComponentWithProviders,\n        *     selectors: [['component-with-providers']],\n        *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n        *    consts: 1,\n        *    vars: 1,\n        *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n        *      if (fs & RenderFlags.Create) {\n        *        text(0);\n        *      }\n        *      if (fs & RenderFlags.Update) {\n        *        textBinding(0, bind(ctx.greeter.greet()));\n        *      }\n        *    },\n        *    features: [ProvidersFeature([GreeterDE])]\n        *  });\n        * }\n        *\n        * @param definition\n        */\n    export function ProvidersFeature<T>(providers: Provider[], viewProviders?: Provider[]): (definition: DirectiveDef<T>) => void;\n}\n\ndeclare module '@angular/core/src/render3/interfaces/definition' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { ViewEncapsulation } from '@angular/core/src/core';\n    import { Type } from '@angular/core/src/type';\n    import { CssSelectorList } from '@angular/core/src/render3/interfaces/projection';\n    /**\n        * Definition of what a template rendering function should look like for a component.\n        */\n    export type ComponentTemplate<T> = {\n            (rf: RenderFlags, ctx: T): void;\n            ngPrivateData?: never;\n    };\n    /**\n        * Definition of what a query function should look like.\n        */\n    export type ComponentQuery<T> = ComponentTemplate<T>;\n    /**\n        * Flags passed into template functions to determine which blocks (i.e. creation, update)\n        * should be executed.\n        *\n        * Typically, a template runs both the creation block and the update block on initialization and\n        * subsequent runs only execute the update block. However, dynamically created views require that\n        * the creation block be executed separately from the update block (for backwards compat).\n        */\n    export const enum RenderFlags {\n            Create = 1,\n            Update = 2\n    }\n    /**\n        * A subclass of `Type` which has a static `ngComponentDef`:`ComponentDef` field making it\n        * consumable for rendering.\n        */\n    export interface ComponentType<T> extends Type<T> {\n            ngComponentDef: never;\n    }\n    /**\n        * A subclass of `Type` which has a static `ngDirectiveDef`:`DirectiveDef` field making it\n        * consumable for rendering.\n        */\n    export interface DirectiveType<T> extends Type<T> {\n            ngDirectiveDef: never;\n    }\n    export const enum DirectiveDefFlags {\n            ContentQuery = 2\n    }\n    /**\n        * A subclass of `Type` which has a static `ngPipeDef`:`PipeDef` field making it\n        * consumable for rendering.\n        */\n    export interface PipeType<T> extends Type<T> {\n            ngPipeDef: never;\n    }\n    export type DirectiveDefWithMeta<T, Selector extends string, ExportAs extends string, InputMap extends {\n            [key: string]: string;\n    }, OutputMap extends {\n            [key: string]: string;\n    }, QueryFields extends string[]> = DirectiveDef<T>;\n    /**\n        * Runtime information for classes that are inherited by components or directives\n        * that aren't defined as components or directives.\n        *\n        * This is an internal data structure used by the render to determine what inputs\n        * and outputs should be inherited.\n        *\n        * See: {@link defineBase}\n        */\n    export interface BaseDef<T> {\n            /**\n                * A dictionary mapping the inputs' minified property names to their public API names, which\n                * are their aliases if any, or their original unminified property names\n                * (as in `@Input('alias') propertyName: any;`).\n                */\n            readonly inputs: {\n                    [P in keyof T]: string;\n            };\n            /**\n                * @deprecated This is only here because `NgOnChanges` incorrectly uses declared name instead of\n                * public or minified name.\n                */\n            readonly declaredInputs: {\n                    [P in keyof T]: P;\n            };\n            /**\n                * A dictionary mapping the outputs' minified property names to their public API names, which\n                * are their aliases if any, or their original unminified property names\n                * (as in `@Output('alias') propertyName: any;`).\n                */\n            readonly outputs: {\n                    [P in keyof T]: P;\n            };\n    }\n    /**\n        * Runtime link information for Directives.\n        *\n        * This is internal data structure used by the render to link\n        * directives into templates.\n        *\n        * NOTE: Always use `defineDirective` function to create this object,\n        * never create the object directly since the shape of this object\n        * can change between versions.\n        *\n        * @param Selector type metadata specifying the selector of the directive or component\n        *\n        * See: {@link defineDirective}\n        */\n    export interface DirectiveDef<T> extends BaseDef<T> {\n            /** Token representing the directive. Used by DI. */\n            type: Type<T>;\n            /** Function that resolves providers and publishes them into the DI system. */\n            providersResolver: ((def: DirectiveDef<T>) => void) | null;\n            /** The selectors that will be used to match nodes to this directive. */\n            readonly selectors: CssSelectorList;\n            /**\n                * Name under which the directive is exported (for use with local references in template)\n                */\n            readonly exportAs: string | null;\n            /**\n                * Factory function used to create a new directive instance.\n                */\n            factory: (t: Type<T> | null) => T;\n            /**\n                * Function to create instances of content queries associated with a given directive.\n                */\n            contentQueries: ((directiveIndex: number) => void) | null;\n            /** Refreshes content queries associated with directives in a given view */\n            contentQueriesRefresh: ((directiveIndex: number, queryIndex: number) => void) | null;\n            /**\n                * The number of host bindings (including pure fn bindings) in this directive/component.\n                *\n                * Used to calculate the length of the LViewData array for the *parent* component\n                * of this directive/component.\n                */\n            readonly hostVars: number;\n            /** Refreshes host bindings on the associated directive. */\n            hostBindings: HostBindingsFunction | null;\n            /**\n                * Static attributes to set on host element.\n                *\n                * Even indices: attribute name\n                * Odd indices: attribute value\n                */\n            readonly attributes: string[] | null;\n            onInit: (() => void) | null;\n            doCheck: (() => void) | null;\n            afterContentInit: (() => void) | null;\n            afterContentChecked: (() => void) | null;\n            afterViewInit: (() => void) | null;\n            afterViewChecked: (() => void) | null;\n            onDestroy: (() => void) | null;\n            /**\n                * The features applied to this directive\n                */\n            readonly features: DirectiveDefFeature[] | null;\n    }\n    export type ComponentDefWithMeta<T, Selector extends String, ExportAs extends string, InputMap extends {\n            [key: string]: string;\n    }, OutputMap extends {\n            [key: string]: string;\n    }, QueryFields extends string[]> = ComponentDef<T>;\n    /**\n        * Runtime link information for Components.\n        *\n        * This is internal data structure used by the render to link\n        * components into templates.\n        *\n        * NOTE: Always use `defineComponent` function to create this object,\n        * never create the object directly since the shape of this object\n        * can change between versions.\n        *\n        * See: {@link defineComponent}\n        */\n    export interface ComponentDef<T> extends DirectiveDef<T> {\n            /**\n                * Runtime unique component ID.\n                */\n            readonly id: string;\n            /**\n                * The View template of the component.\n                */\n            readonly template: ComponentTemplate<T>;\n            /**\n                * A set of styles that the component needs to be present for component to render correctly.\n                */\n            readonly styles: string[];\n            /**\n                * The number of nodes, local refs, and pipes in this component template.\n                *\n                * Used to calculate the length of the component's LViewData array, so we\n                * can pre-fill the array and set the binding start index.\n                */\n            readonly consts: number;\n            /**\n                * The number of bindings in this component template (including pure fn bindings).\n                *\n                * Used to calculate the length of the component's LViewData array, so we\n                * can pre-fill the array and set the host binding start index.\n                */\n            readonly vars: number;\n            /**\n                * Query-related instructions for a component.\n                */\n            viewQuery: ComponentQuery<T> | null;\n            /**\n                * The view encapsulation type, which determines how styles are applied to\n                * DOM elements. One of\n                * - `Emulated` (default): Emulate native scoping of styles.\n                * - `Native`: Use the native encapsulation mechanism of the renderer.\n                * - `ShadowDom`: Use modern [ShadowDOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n                *   create a ShadowRoot for component's host element.\n                * - `None`: Do not provide any template or style encapsulation.\n                */\n            readonly encapsulation: ViewEncapsulation;\n            /**\n                * Defines arbitrary developer-defined data to be stored on a renderer instance.\n                * This is useful for renderers that delegate to other renderers.\n                */\n            readonly data: {\n                    [kind: string]: any;\n            };\n            /** Whether or not this component's ChangeDetectionStrategy is OnPush */\n            readonly onPush: boolean;\n            /**\n        \n                * Registry of directives and components that may be found in this view.\n                *\n                * The property is either an array of `DirectiveDef`s or a function which returns the array of\n                * `DirectiveDef`s. The function is necessary to be able to support forward declarations.\n                */\n            directiveDefs: DirectiveDefListOrFactory | null;\n            /**\n                * Registry of pipes that may be found in this view.\n                *\n                * The property is either an array of `PipeDefs`s or a function which returns the array of\n                * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n                */\n            pipeDefs: PipeDefListOrFactory | null;\n            /**\n                * Used to store the result of `noSideEffects` function so that it is not removed by closure\n                * compiler. The property should never be read.\n                */\n            readonly _?: never;\n    }\n    /**\n        * Runtime link information for Pipes.\n        *\n        * This is internal data structure used by the renderer to link\n        * pipes into templates.\n        *\n        * NOTE: Always use `definePipe` function to create this object,\n        * never create the object directly since the shape of this object\n        * can change between versions.\n        *\n        * See: {@link definePipe}\n        */\n    export interface PipeDef<T> {\n            /**\n                * Pipe name.\n                *\n                * Used to resolve pipe in templates.\n                */\n            readonly name: string;\n            /**\n                * Factory function used to create a new pipe instance.\n                */\n            factory: (t: Type<T> | null) => T;\n            /**\n                * Whether or not the pipe is pure.\n                *\n                * Pure pipes result only depends on the pipe input and not on internal\n                * state of the pipe.\n                */\n            readonly pure: boolean;\n            onDestroy: (() => void) | null;\n    }\n    export type PipeDefWithMeta<T, Name extends string> = PipeDef<T>;\n    export interface DirectiveDefFeature {\n            <T>(directiveDef: DirectiveDef<T>): void;\n            ngInherit?: true;\n    }\n    export interface ComponentDefFeature {\n            <T>(componentDef: ComponentDef<T>): void;\n            ngInherit?: true;\n    }\n    /**\n        * Type used for directiveDefs on component definition.\n        *\n        * The function is necessary to be able to support forward declarations.\n        */\n    export type DirectiveDefListOrFactory = (() => DirectiveDefList) | DirectiveDefList;\n    export type DirectiveDefList = (DirectiveDef<any> | ComponentDef<any>)[];\n    export type DirectiveTypesOrFactory = (() => DirectiveTypeList) | DirectiveTypeList;\n    export type DirectiveTypeList = (DirectiveDef<any> | ComponentDef<any> | Type<any>)[];\n    export type HostBindingsFunction = (directiveIndex: number, elementIndex: number) => void;\n    /**\n        * Type used for PipeDefs on component definition.\n        *\n        * The function is necessary to be able to support forward declarations.\n        */\n    export type PipeDefListOrFactory = (() => PipeDefList) | PipeDefList;\n    export type PipeDefList = PipeDef<any>[];\n    export type PipeTypesOrFactory = (() => DirectiveTypeList) | DirectiveTypeList;\n    export type PipeTypeList = (PipeDef<any> | Type<any>)[];\n    export const unusedValueExportToPlacateAjd = 1;\n    export const enum InitialStylingFlags {\n            VALUES_MODE = 1\n    }\n}\n\ndeclare module '@angular/core/src/render3/component_ref' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { ChangeDetectorRef as ViewEngine_ChangeDetectorRef } from '@angular/core/src/change_detection/change_detector_ref';\n    import { InjectionToken } from '@angular/core/src/di/injection_token';\n    import { Injector } from '@angular/core/src/di/injector';\n    import { ComponentFactory as viewEngine_ComponentFactory, ComponentRef as viewEngine_ComponentRef } from '@angular/core/src/linker/component_factory';\n    import { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '@angular/core/src/linker/component_factory_resolver';\n    import { ElementRef as viewEngine_ElementRef } from '@angular/core/src/linker/element_ref';\n    import { NgModuleRef as viewEngine_NgModuleRef } from '@angular/core/src/linker/ng_module_factory';\n    import { RendererFactory2 } from '@angular/core/src/render/api';\n    import { Type } from '@angular/core/src/type';\n    import { ComponentDef } from '@angular/core/src/render3/interfaces/definition';\n    import { TContainerNode, TElementContainerNode, TElementNode } from '@angular/core/src/render3/interfaces/node';\n    import { LViewData, RootContext } from '@angular/core/src/render3/interfaces/view';\n    import { ViewRef } from '@angular/core/src/render3/view_ref';\n    export class ComponentFactoryResolver extends viewEngine_ComponentFactoryResolver {\n            resolveComponentFactory<T>(component: Type<T>): viewEngine_ComponentFactory<T>;\n    }\n    /**\n        * Default {@link RootContext} for all components rendered with {@link renderComponent}.\n        */\n    export const ROOT_CONTEXT: InjectionToken<RootContext>;\n    /**\n        * A change detection scheduler token for {@link RootContext}. This token is the default value used\n        * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.\n        */\n    export const SCHEDULER: InjectionToken<(fn: () => void) => void>;\n    /**\n        * A function used to wrap the `RendererFactory2`.\n        * Used in tests to change the `RendererFactory2` into a `DebugRendererFactory2`.\n        */\n    export const WRAP_RENDERER_FACTORY2: InjectionToken<(rf: RendererFactory2) => RendererFactory2>;\n    /**\n        * Render3 implementation of {@link viewEngine_ComponentFactory}.\n        */\n    export class ComponentFactory<T> extends viewEngine_ComponentFactory<T> {\n            selector: string;\n            componentType: Type<any>;\n            ngContentSelectors: string[];\n            readonly inputs: {\n                    propName: string;\n                    templateName: string;\n            }[];\n            readonly outputs: {\n                    propName: string;\n                    templateName: string;\n            }[];\n            constructor(componentDef: ComponentDef<any>);\n            create(injector: Injector, projectableNodes?: any[][] | undefined, rootSelectorOrNode?: any, ngModule?: viewEngine_NgModuleRef<any> | undefined): viewEngine_ComponentRef<T>;\n    }\n    /**\n        * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the\n        * ComponentFactoryResolver\n        * already exists, retrieves the existing ComponentFactoryResolver.\n        *\n        * @returns The ComponentFactoryResolver instance to use\n        */\n    export function injectComponentFactoryResolver(): viewEngine_ComponentFactoryResolver;\n    /**\n        * Represents an instance of a Component created via a {@link ComponentFactory}.\n        *\n        * `ComponentRef` provides access to the Component Instance as well other objects related to this\n        * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n        * method.\n        *\n        */\n    export class ComponentRef<T> extends viewEngine_ComponentRef<T> {\n            location: viewEngine_ElementRef;\n            destroyCbs: (() => void)[] | null;\n            instance: T;\n            hostView: ViewRef<T>;\n            changeDetectorRef: ViewEngine_ChangeDetectorRef;\n            componentType: Type<T>;\n            constructor(componentType: Type<T>, instance: T, location: viewEngine_ElementRef, _rootView: LViewData, _tNode: TElementNode | TContainerNode | TElementContainerNode);\n            readonly injector: Injector;\n            destroy(): void;\n            onDestroy(callback: () => void): void;\n    }\n}\n\ndeclare module '@angular/core/src/render3/di' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { InjectionToken } from '@angular/core/src/di/injection_token';\n    import { Injector } from '@angular/core/src/di/injector';\n    import { InjectFlags } from '@angular/core/src/di/injector_compatibility';\n    import { Type } from '@angular/core/src/type';\n    import { RelativeInjectorLocation } from '@angular/core/src/render3/interfaces/injector';\n    import { TContainerNode, TElementContainerNode, TElementNode, TNode } from '@angular/core/src/render3/interfaces/node';\n    import { LViewData, TData, TView } from '@angular/core/src/render3/interfaces/view';\n    /**\n        * Registers this directive as present in its node's injector by flipping the directive's\n        * corresponding bit in the injector's bloom filter.\n        *\n        * @param injectorIndex The index of the node injector where this token should be registered\n        * @param tView The TView for the injector's bloom filters\n        * @param type The directive token to register\n        */\n    export function bloomAdd(injectorIndex: number, tView: TView, type: Type<any> | InjectionToken<any>): void;\n    /**\n        * Creates (or gets an existing) injector for a given element or container.\n        *\n        * @param tNode for which an injector should be retrieved / created.\n        * @param hostView View where the node is stored\n        * @returns Node injector\n        */\n    export function getOrCreateNodeInjectorForNode(tNode: TElementNode | TContainerNode | TElementContainerNode, hostView: LViewData): number;\n    export function getInjectorIndex(tNode: TNode, hostView: LViewData): number;\n    /**\n        * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n        * parent injector initially.\n        *\n        * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`\n        */\n    export function getParentInjectorLocation(tNode: TNode, view: LViewData): RelativeInjectorLocation;\n    /**\n        * Makes a type or an injection token public to the DI system by adding it to an\n        * injector's bloom filter.\n        *\n        * @param di The node injector in which a directive will be added\n        * @param token The type or the injection token to be made public\n        */\n    export function diPublicInInjector(injectorIndex: number, view: LViewData, token: InjectionToken<any> | Type<any>): void;\n    /**\n        * Inject static attribute value into directive constructor.\n        *\n        * This method is used with `factory` functions which are generated as part of\n        * `defineDirective` or `defineComponent`. The method retrieves the static value\n        * of an attribute. (Dynamic attributes are not supported since they are not resolved\n        *  at the time of injection and can change over time.)\n        *\n        * # Example\n        * Given:\n        * ```\n        * @Component(...)\n        * class MyComponent {\n        *   constructor(@Attribute('title') title: string) { ... }\n        * }\n        * ```\n        * When instantiated with\n        * ```\n        * <my-component title=\"Hello\"></my-component>\n        * ```\n        *\n        * Then factory method generated is:\n        * ```\n        * MyComponent.ngComponentDef = defineComponent({\n        *   factory: () => new MyComponent(injectAttribute('title'))\n        *   ...\n        * })\n        * ```\n        *\n        * @publicApi\n        */\n    export function injectAttributeImpl(tNode: TNode, attrNameToInject: string): string | undefined;\n    /**\n        * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n        *\n        * Look for the injector providing the token by walking up the node injector tree and then\n        * the module injector tree.\n        *\n        * @param nodeInjector Node injector where the search should start\n        * @param token The token to look for\n        * @param flags Injection flags\n        * @returns the value from the injector or `null` when not found\n        */\n    export function getOrCreateInjectable<T>(tNode: TElementNode | TContainerNode | TElementContainerNode, lViewData: LViewData, token: Type<T> | InjectionToken<T>, flags?: InjectFlags, notFoundValue?: any): T | null;\n    /**\n     * Retrieve or instantiate the injectable from the `lData` at particular `index`.\n     *\n     * This function checks to see if the value has already been instantiated and if so returns the\n     * cached `injectable`. Otherwise if it detects that the value is still a factory it\n     * instantiates the `injectable` and caches the value.\n     */\n    export function getNodeInjectable(tData: TData, lData: LViewData, index: number, tNode: TElementNode): any;\n    /**\n        * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n        * the directive might be provided by the injector.\n        *\n        * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n        * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n        * is returned as the node injector can not possibly provide that token.\n        *\n        * @param token the injection token\n        * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n        */\n    export function bloomHashBitOrFactory(token: Type<any> | InjectionToken<any>): number | Function | undefined;\n    export function bloomHasToken(bloomHash: number, injectorIndex: number, injectorView: LViewData | TData): boolean;\n    export function injectInjector(): NodeInjector;\n    export class NodeInjector implements Injector {\n            constructor(_tNode: TElementNode | TContainerNode | TElementContainerNode, _hostView: LViewData);\n            get(token: any): any;\n    }\n    export function getFactoryOf<T>(type: Type<any>): ((type: Type<T> | null) => T) | null;\n    export function getInheritedFactory<T>(type: Type<any>): (type: Type<T>) => T;\n}\n\ndeclare module '@angular/core/src/render3/interfaces/projection' {\n    /**\n        * Expresses a single CSS Selector.\n        *\n        * Beginning of array\n        * - First index: element name\n        * - Subsequent odd indices: attr keys\n        * - Subsequent even indices: attr values\n        *\n        * After SelectorFlags.CLASS flag\n        * - Class name values\n        *\n        * SelectorFlags.NOT flag\n        * - Changes the mode to NOT\n        * - Can be combined with other flags to set the element / attr / class mode\n        *\n        * e.g. SelectorFlags.NOT | SelectorFlags.ELEMENT\n        *\n        * Example:\n        * Original: `div.foo.bar[attr1=val1][attr2]`\n        * Parsed: ['div', 'attr1', 'val1', 'attr2', '', SelectorFlags.CLASS, 'foo', 'bar']\n        *\n        * Original: 'div[attr1]:not(.foo[attr2])\n        * Parsed: [\n        *  'div', 'attr1', '',\n        *  SelectorFlags.NOT | SelectorFlags.ATTRIBUTE 'attr2', '', SelectorFlags.CLASS, 'foo'\n        * ]\n        *\n        * See more examples in node_selector_matcher_spec.ts\n        */\n    export type CssSelector = (string | SelectorFlags)[];\n    /**\n        * A list of CssSelectors.\n        *\n        * A directive or component can have multiple selectors. This type is used for\n        * directive defs so any of the selectors in the list will match that directive.\n        *\n        * Original: 'form, [ngForm]'\n        * Parsed: [['form'], ['', 'ngForm', '']]\n        */\n    export type CssSelectorList = CssSelector[];\n    /** Flags used to build up CssSelectors */\n    export const enum SelectorFlags {\n            /** Indicates this is the beginning of a new negative selector */\n            NOT = 1,\n            /** Mode for matching attributes */\n            ATTRIBUTE = 2,\n            /** Mode for matching tag names */\n            ELEMENT = 4,\n            /** Mode for matching class names */\n            CLASS = 8\n    }\n    export const NG_PROJECT_AS_ATTR_NAME = \"ngProjectAs\";\n    export const unusedValueExportToPlacateAjd = 1;\n}\n\ndeclare module '@angular/core/src/render3/instructions' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { InjectionToken } from '@angular/core/src/di/injection_token';\n    import { Injector } from '@angular/core/src/di/injector';\n    import { InjectFlags } from '@angular/core/src/di/injector_compatibility';\n    import { QueryList } from '@angular/core/src/linker';\n    import { Sanitizer } from '@angular/core/src/sanitization/security';\n    import { StyleSanitizeFn } from '@angular/core/src/sanitization/style_sanitizer';\n    import { Type } from '@angular/core/src/type';\n    import { LContainer } from '@angular/core/src/render3/interfaces/container';\n    import { ComponentDef, ComponentQuery, ComponentTemplate, DirectiveDefListOrFactory, InitialStylingFlags, PipeDefListOrFactory, RenderFlags } from '@angular/core/src/render3/interfaces/definition';\n    import { LocalRefExtractor, TAttributes, TContainerNode, TElementContainerNode, TElementNode, TNode, TNodeType, TProjectionNode, TViewNode } from '@angular/core/src/render3/interfaces/node';\n    import { PlayerFactory } from '@angular/core/src/render3/interfaces/player';\n    import { CssSelectorList } from '@angular/core/src/render3/interfaces/projection';\n    import { LQueries } from '@angular/core/src/render3/interfaces/query';\n    import { RComment, RElement, RText, Renderer3, RendererFactory3 } from '@angular/core/src/render3/interfaces/renderer';\n    import { SanitizerFn } from '@angular/core/src/render3/interfaces/sanitization';\n    import { LViewData, LViewFlags, RootContext, RootContextFlags, TView } from '@angular/core/src/render3/interfaces/view';\n    import { NO_CHANGE } from '@angular/core/src/render3/tokens';\n    /**\n        * Refreshes the view, executing the following steps in that order:\n        * triggers init hooks, refreshes dynamic embedded views, triggers content hooks, sets host\n        * bindings, refreshes child components.\n        * Note: view hooks are triggered later when leaving the view.\n        */\n    export function refreshDescendantViews(viewData: LViewData, rf: RenderFlags | null): void;\n    /** Sets the host bindings for the current view. */\n    export function setHostBindings(tView: TView, viewData: LViewData): void;\n    export function createLViewData<T>(parentViewData: LViewData | null, renderer: Renderer3, tView: TView, context: T | null, flags: LViewFlags, sanitizer?: Sanitizer | null, injector?: Injector | null): LViewData;\n    /**\n        * Create and stores the TNode, and hooks it up to the tree.\n        *\n        * @param index The index at which the TNode should be saved (null if view, since they are not\n        * saved).\n        * @param type The type of TNode to create\n        * @param native The native element for this node, if applicable\n        * @param name The tag name of the associated native element, if applicable\n        * @param attrs Any attrs for the native element, if applicable\n        */\n    export function createNodeAtIndex(index: number, type: TNodeType.Element, native: RElement | RText | null, name: string | null, attrs: TAttributes | null): TElementNode;\n    export function createNodeAtIndex(index: number, type: TNodeType.Container, native: RComment, name: string | null, attrs: TAttributes | null): TContainerNode;\n    export function createNodeAtIndex(index: number, type: TNodeType.Projection, native: null, name: null, attrs: TAttributes | null): TProjectionNode;\n    export function createNodeAtIndex(index: number, type: TNodeType.ElementContainer, native: RComment, name: null, attrs: TAttributes | null): TElementContainerNode;\n    export function createNodeAtIndex(index: number, type: TNodeType.IcuContainer, native: RComment, name: null, attrs: TAttributes | null): TElementContainerNode;\n    export function createViewNode(index: number, view: LViewData): TViewNode;\n    /**\n        * When elements are created dynamically after a view blueprint is created (e.g. through\n        * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n        * template passes.\n        */\n    export function allocExpando(view: LViewData): void;\n    /**\n        *\n        * @param hostNode Existing node to render into.\n        * @param templateFn Template function with the instructions.\n        * @param consts The number of nodes, local refs, and pipes in this template\n        * @param context to pass into the template.\n        * @param providedRendererFactory renderer factory to use\n        * @param host The host element node to use\n        * @param directives Directive defs that should be used for matching\n        * @param pipes Pipe defs that should be used for matching\n        */\n    export function renderTemplate<T>(hostNode: RElement, templateFn: ComponentTemplate<T>, consts: number, vars: number, context: T, providedRendererFactory: RendererFactory3, hostView: LViewData | null, directives?: DirectiveDefListOrFactory | null, pipes?: PipeDefListOrFactory | null, sanitizer?: Sanitizer | null): LViewData;\n    /**\n        * Used for creating the LViewNode of a dynamic embedded view,\n        * either through ViewContainerRef.createEmbeddedView() or TemplateRef.createEmbeddedView().\n        * Such lViewNode will then be renderer with renderEmbeddedTemplate() (see below).\n        */\n    export function createEmbeddedViewAndNode<T>(tView: TView, context: T, declarationView: LViewData, renderer: Renderer3, queries: LQueries | null, injectorIndex: number): LViewData;\n    /**\n        * Used for rendering embedded views (e.g. dynamically created views)\n        *\n        * Dynamically created views must store/retrieve their TViews differently from component views\n        * because their template functions are nested in the template functions of their hosts, creating\n        * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor inside\n        * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\n        * can't store TViews in the template function itself (as we do for comps). Instead, we store the\n        * TView for dynamically created views on their host TNode, which only has one instance.\n        */\n    export function renderEmbeddedTemplate<T>(viewToRender: LViewData, tView: TView, context: T, rf: RenderFlags): void;\n    /**\n        * Retrieves a context at the level specified and saves it as the global, contextViewData.\n        * Will get the next level up if level is not specified.\n        *\n        * This is used to save contexts of parent views so they can be bound in embedded views, or\n        * in conjunction with reference() to bind a ref from a parent view.\n        *\n        * @param level The relative level of the view from which to grab context compared to contextVewData\n        * @returns context\n        */\n    export function nextContext<T = any>(level?: number): T;\n    export function namespaceSVG(): void;\n    export function namespaceMathML(): void;\n    export function namespaceHTML(): void;\n    /**\n        * Creates an empty element using {@link elementStart} and {@link elementEnd}\n        *\n        * @param index Index of the element in the data array\n        * @param name Name of the DOM Node\n        * @param attrs Statically bound set of attributes to be written into the DOM element on creation.\n        * @param localRefs A set of local reference bindings on the element.\n        */\n    export function element(index: number, name: string, attrs?: TAttributes | null, localRefs?: string[] | null): void;\n    /**\n        * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n        * The instruction must later be followed by `elementContainerEnd()` call.\n        *\n        * @param index Index of the element in the LViewData array\n        * @param attrs Set of attributes to be used when matching directives.\n        * @param localRefs A set of local reference bindings on the element.\n        *\n        * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n        * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n        * matching purposes and setting initial inputs of directives.\n        */\n    export function elementContainerStart(index: number, attrs?: TAttributes | null, localRefs?: string[] | null): void;\n    /** Mark the end of the <ng-container>. */\n    export function elementContainerEnd(): void;\n    /**\n        * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n        *\n        * @param index Index of the element in the LViewData array\n        * @param name Name of the DOM Node\n        * @param attrs Statically bound set of attributes to be written into the DOM element on creation.\n        * @param localRefs A set of local reference bindings on the element.\n        *\n        * Attributes and localRefs are passed as an array of strings where elements with an even index\n        * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n        * ['id', 'warning5', 'class', 'alert']\n        */\n    export function elementStart(index: number, name: string, attrs?: TAttributes | null, localRefs?: string[] | null): void;\n    /**\n        * Creates a native element from a tag name, using a renderer.\n        * @param name the tag name\n        * @param overriddenRenderer Optional A renderer to override the default one\n        * @returns the element created\n        */\n    export function elementCreate(name: string, overriddenRenderer?: Renderer3): RElement;\n    /**\n        * Gets TView from a template function or creates a new TView\n        * if it doesn't already exist.\n        *\n        * @param templateFn The template from which to get static data\n        * @param consts The number of nodes, local refs, and pipes in this view\n        * @param vars The number of bindings and pure function bindings in this view\n        * @param directives Directive defs that should be saved on TView\n        * @param pipes Pipe defs that should be saved on TView\n        * @returns TView\n        */\n    export function getOrCreateTView(templateFn: ComponentTemplate<any>, consts: number, vars: number, directives: DirectiveDefListOrFactory | null, pipes: PipeDefListOrFactory | null, viewQuery: ComponentQuery<any> | null): TView;\n    /**\n        * Creates a TView instance\n        *\n        * @param viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n        * @param templateFn Template function\n        * @param consts The number of nodes, local refs, and pipes in this template\n        * @param directives Registry of directives for this view\n        * @param pipes Registry of pipes for this view\n        */\n    export function createTView(viewIndex: number, templateFn: ComponentTemplate<any> | null, consts: number, vars: number, directives: DirectiveDefListOrFactory | null, pipes: PipeDefListOrFactory | null, viewQuery: ComponentQuery<any> | null): TView;\n    export function createError(text: string, token: any): Error;\n    /**\n        * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n        *\n        * @param elementOrSelector Render element or CSS selector to locate the element.\n        */\n    export function locateHostElement(factory: RendererFactory3, elementOrSelector: RElement | string): RElement | null;\n    /**\n        * Adds an event listener to the current node.\n        *\n        * If an output exists on one of the node's directives, it also subscribes to the output\n        * and saves the subscription for later cleanup.\n        *\n        * @param eventName Name of the event\n        * @param listenerFn The function to be called when event emits\n        * @param useCapture Whether or not to use capture in event listener.\n        */\n    export function listener(eventName: string, listenerFn: (e?: any) => any, useCapture?: boolean): void;\n    /**\n        * Saves context for this cleanup function in LView.cleanupInstances.\n        *\n        * On the first template pass, saves in TView:\n        * - Cleanup function\n        * - Index of context we just saved in LView.cleanupInstances\n        */\n    export function storeCleanupWithContext(view: LViewData | null, context: any, cleanupFn: Function): void;\n    /**\n        * Saves the cleanup function itself in LView.cleanupInstances.\n        *\n        * This is necessary for functions that are wrapped with their contexts, like in renderer2\n        * listeners.\n        *\n        * On the first template pass, the index of the cleanup function is saved in TView.\n        */\n    export function storeCleanupFn(view: LViewData, cleanupFn: Function): void;\n    /** Mark the end of the element. */\n    export function elementEnd(): void;\n    /**\n        * Updates the value of removes an attribute on an Element.\n        *\n        * @param number index The index of the element in the data array\n        * @param name name The name of the attribute.\n        * @param value value The attribute is removed when value is `null` or `undefined`.\n        *                  Otherwise the attribute value is set to the stringified value.\n        * @param sanitizer An optional function used to sanitize the value.\n        */\n    export function elementAttribute(index: number, name: string, value: any, sanitizer?: SanitizerFn | null): void;\n    /**\n        * Update a property on an Element.\n        *\n        * If the property name also exists as an input property on one of the element's directives,\n        * the component property will be set instead of the element property. This check must\n        * be conducted at runtime so child components that add new @Inputs don't have to be re-compiled.\n        *\n        * @param index The index of the element to update in the data array\n        * @param propName Name of property. Because it is going to DOM, this is not subject to\n        *        renaming as part of minification.\n        * @param value New value to write.\n        * @param sanitizer An optional function used to sanitize the value.\n        */\n    export function elementProperty<T>(index: number, propName: string, value: T | NO_CHANGE, sanitizer?: SanitizerFn | null): void;\n    /**\n        * Constructs a TNode object from the arguments.\n        *\n        * @param type The type of the node\n        * @param adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n        * @param tagName The tag name of the node\n        * @param attrs The attributes defined on this node\n        * @param tViews Any TViews attached to this node\n        * @returns the TNode object\n        */\n    export function createTNode(viewData: LViewData, type: TNodeType, adjustedIndex: number, tagName: string | null, attrs: TAttributes | null, tViews: TView[] | null): TNode;\n    /**\n        * Add or remove a class in a `classList` on a DOM element.\n        *\n        * This instruction is meant to handle the [class.foo]=\"exp\" case\n        *\n        * @param index The index of the element to update in the data array\n        * @param classIndex Index of class to toggle. Because it is going to DOM, this is not subject to\n        *        renaming as part of minification.\n        * @param value A value indicating if a given class should be added or removed.\n        * @param directiveIndex the index for the directive that is attempting to change styling.\n        */\n    export function elementClassProp(index: number, classIndex: number, value: boolean | PlayerFactory, directiveIndex?: number): void;\n    /**\n        * Assign any inline style values to the element during creation mode.\n        *\n        * This instruction is meant to be called during creation mode to apply all styling\n        * (e.g. `style=\"...\"`) values to the element. This is also where the provided index\n        * value is allocated for the styling details for its corresponding element (the element\n        * index is the previous index value from this one).\n        *\n        * (Note this function calls `elementStylingApply` immediately when called.)\n        *\n        *\n        * @param index Index value which will be allocated to store styling data for the element.\n        *        (Note that this is not the element index, but rather an index value allocated\n        *        specifically for element styling--the index must be the next index after the element\n        *        index.)\n        * @param classDeclarations A key/value array of CSS classes that will be registered on the element.\n        *   Each individual style will be used on the element as long as it is not overridden\n        *   by any classes placed on the element by multiple (`[class]`) or singular (`[class.named]`)\n        *   bindings. If a class binding changes its value to a falsy value then the matching initial\n        *   class value that are passed in here will be applied to the element (if matched).\n        * @param styleDeclarations A key/value array of CSS styles that will be registered on the element.\n        *   Each individual style will be used on the element as long as it is not overridden\n        *   by any styles placed on the element by multiple (`[style]`) or singular (`[style.prop]`)\n        *   bindings. If a style binding changes its value to null then the initial styling\n        *   values that are passed in here will be applied to the element (if matched).\n        * @param styleSanitizer An optional sanitizer function that will be used (if provided)\n        *   to sanitize the any CSS property values that are applied to the element (during rendering).\n        * @param directiveIndex the index for the directive that is attempting to change styling.\n        */\n    export function elementStyling(classDeclarations?: (string | boolean | InitialStylingFlags)[] | null, styleDeclarations?: (string | boolean | InitialStylingFlags)[] | null, styleSanitizer?: StyleSanitizeFn | null, directiveIndex?: number): void;\n    /**\n        * Apply all styling values to the element which have been queued by any styling instructions.\n        *\n        * This instruction is meant to be run once one or more `elementStyle` and/or `elementStyleProp`\n        * have been issued against the element. This function will also determine if any styles have\n        * changed and will then skip the operation if there is nothing new to render.\n        *\n        * Once called then all queued styles will be flushed.\n        *\n        * @param index Index of the element's styling storage that will be rendered.\n        *        (Note that this is not the element index, but rather an index value allocated\n        *        specifically for element styling--the index must be the next index after the element\n        *        index.)\n        * @param directiveIndex the index for the directive that is attempting to change styling.\n        */\n    export function elementStylingApply(index: number, directiveIndex?: number): void;\n    /**\n        * Queue a given style to be rendered on an Element.\n        *\n        * If the style value is `null` then it will be removed from the element\n        * (or assigned a different value depending if there are any styles placed\n        * on the element with `elementStyle` or any styles that are present\n        * from when the element was created (with `elementStyling`).\n        *\n        * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n        *\n        * @param index Index of the element's styling storage to change in the data array.\n        *        (Note that this is not the element index, but rather an index value allocated\n        *        specifically for element styling--the index must be the next index after the element\n        *        index.)\n        * @param styleIndex Index of the style property on this element. (Monotonically increasing.)\n        * @param value New value to write (null to remove).\n        * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n        *        Note that when a suffix is provided then the underlying sanitizer will\n        *        be ignored.\n        * @param directiveIndex the index for the directive that is attempting to change styling.\n        */\n    export function elementStyleProp(index: number, styleIndex: number, value: string | number | String | PlayerFactory | null, suffix?: string, directiveIndex?: number): void;\n    /**\n        * Queue a key/value map of styles to be rendered on an Element.\n        *\n        * This instruction is meant to handle the `[style]=\"exp\"` usage. When styles are applied to\n        * the Element they will then be placed with respect to any styles set with `elementStyleProp`.\n        * If any styles are set to `null` then they will be removed from the element (unless the same\n        * style properties have been assigned to the element during creation using `elementStyling`).\n        *\n        * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n        *\n        * @param index Index of the element's styling storage to change in the data array.\n        *        (Note that this is not the element index, but rather an index value allocated\n        *        specifically for element styling--the index must be the next index after the element\n        *        index.)\n        * @param classes A key/value style map of CSS classes that will be added to the given element.\n        *        Any missing classes (that have already been applied to the element beforehand) will be\n        *        removed (unset) from the element's list of CSS classes.\n        * @param styles A key/value style map of the styles that will be applied to the given element.\n        *        Any missing styles (that have already been applied to the element beforehand) will be\n        *        removed (unset) from the element's styling.\n        * @param directiveIndex the index for the directive that is attempting to change styling.\n        */\n    export function elementStylingMap<T>(index: number, classes: {\n            [key: string]: any;\n    } | string | NO_CHANGE | null, styles?: {\n            [styleName: string]: any;\n    } | NO_CHANGE | null, directiveIndex?: number): void;\n    /**\n        * Create static text node\n        *\n        * @param index Index of the node in the data array\n        * @param value Value to write. This value will be stringified.\n        */\n    export function text(index: number, value?: any): void;\n    /**\n        * Create text node with binding\n        * Bindings should be handled externally with the proper interpolation(1-8) method\n        *\n        * @param index Index of the node in the data array.\n        * @param value Stringified value to write.\n        */\n    export function textBinding<T>(index: number, value: T | NO_CHANGE): void;\n    /**\n        * Instantiate a root component.\n        */\n    export function instantiateRootComponent<T>(tView: TView, viewData: LViewData, def: ComponentDef<T>): T;\n    /**\n     * Generates a new block in TView.expandoInstructions for this node.\n     *\n     * Each expando block starts with the element index (turned negative so we can distinguish\n     * it from the hostVar count) and the directive count. See more in VIEW_DATA.md.\n     */\n    export function generateExpandoInstructionBlock(tView: TView, tNode: TNode, directiveCount: number): void;\n    /**\n     * On the first template pass, we need to reserve space for host binding values\n     * after directives are matched (so all directives are saved, then bindings).\n     * Because we are updating the blueprint, we only need to do this once.\n     */\n    export function prefillHostVars(tView: TView, viewData: LViewData, totalHostVars: number): void;\n    /** Stores index of component's host element so it will be queued for view refresh during CD. */\n    export function queueComponentIndexForCheck(previousOrParentTNode: TNode): void;\n    /**\n        * Initializes the flags on the current node, setting all indices to the initial index,\n        * the directive count to 0, and adding the isComponent flag.\n        * @param index the initial index\n        */\n    export function initNodeFlags(tNode: TNode, index: number, numberOfDirectives: number): void;\n    /**\n        * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n        *\n        * @param hostNative The host element for the LContainer\n        * @param hostTNode The host TNode for the LContainer\n        * @param currentView The parent view of the LContainer\n        * @param native The native comment element\n        * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n        * @returns LContainer\n        */\n    export function createLContainer(hostNative: RElement | RComment, hostTNode: TElementNode | TContainerNode | TElementContainerNode, currentView: LViewData, native: RComment, isForViewContainerRef?: boolean): LContainer;\n    /**\n        * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n        *\n        * <ng-template #foo>\n        *    <div></div>\n        * </ng-template>\n        *\n        * @param index The index of the container in the data array\n        * @param templateFn Inline template\n        * @param consts The number of nodes, local refs, and pipes for this template\n        * @param vars The number of bindings for this template\n        * @param tagName The name of the container element, if applicable\n        * @param attrs The attrs attached to the container, if applicable\n        * @param localRefs A set of local reference bindings on the element.\n        * @param localRefExtractor A function which extracts local-refs values from the template.\n        *        Defaults to the current element associated with the local-ref.\n        */\n    export function template(index: number, templateFn: ComponentTemplate<any> | null, consts: number, vars: number, tagName?: string | null, attrs?: TAttributes | null, localRefs?: string[] | null, localRefExtractor?: LocalRefExtractor): void;\n    /**\n        * Creates an LContainer for inline views, e.g.\n        *\n        * % if (showing) {\n        *   <div></div>\n        * % }\n        *\n        * @param index The index of the container in the data array\n        */\n    export function container(index: number): void;\n    /**\n        * Sets a container up to receive views.\n        *\n        * @param index The index of the container in the data array\n        */\n    export function containerRefreshStart(index: number): void;\n    /**\n        * Marks the end of the LContainer.\n        *\n        * Marking the end of LContainer is the time when to child views get inserted or removed.\n        */\n    export function containerRefreshEnd(): void;\n    /**\n        * Marks the start of an embedded view.\n        *\n        * @param viewBlockId The ID of this view\n        * @return boolean Whether or not this view is in creation mode\n        */\n    export function embeddedViewStart(viewBlockId: number, consts: number, vars: number): RenderFlags;\n    /** Marks the end of an embedded view. */\n    export function embeddedViewEnd(): void;\n    /**\n        * Refreshes components by entering the component view and processing its bindings, queries, etc.\n        *\n        * @param adjustedElementIndex  Element index in LViewData[] (adjusted for HEADER_OFFSET)\n        */\n    export function componentRefresh<T>(adjustedElementIndex: number, parentFirstTemplatePass: boolean, rf: RenderFlags | null): void;\n    /** Returns a boolean for whether the view is attached */\n    export function viewAttached(view: LViewData): boolean;\n    /**\n        * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n        * It takes all the selectors from the entire component's template and decides where\n        * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n        * backed by a selector).\n        *\n        * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n        * un-parsed form.\n        *\n        * The parsed form is needed for efficient matching of a node against a given CSS selector.\n        * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n        *\n        * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n        * drawbacks:\n        * - having only a textual form would require runtime parsing of CSS selectors;\n        * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n        * template author).\n        *\n        * @param selectors A collection of parsed CSS selectors\n        * @param rawSelectors A collection of CSS selectors in the raw, un-parsed form\n        */\n    export function projectionDef(selectors?: CssSelectorList[], textSelectors?: string[]): void;\n    /**\n        * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n        * to the projectionDef instruction.\n        *\n        * @param nodeIndex\n        * @param selectorIndex:\n        *        - 0 when the selector is `*` (or unspecified as this is the default value),\n        *        - 1 based index of the selector from the {@link projectionDef}\n        */\n    export function projection(nodeIndex: number, selectorIndex?: number, attrs?: string[]): void;\n    /**\n        * Adds LViewData or LContainer to the end of the current view tree.\n        *\n        * This structure will be used to traverse through nested views to remove listeners\n        * and call onDestroy callbacks.\n        *\n        * @param currentView The view where LViewData or LContainer should be added\n        * @param adjustedHostIndex Index of the view's host node in LViewData[], adjusted for header\n        * @param state The LViewData or LContainer to add to the view tree\n        * @returns The state passed in\n        */\n    export function addToViewTree<T extends LViewData | LContainer>(currentView: LViewData, adjustedHostIndex: number, state: T): T;\n    /** Marks current view and all ancestors dirty */\n    export function markViewDirty(view: LViewData): void;\n    /**\n        * Used to schedule change detection on the whole application.\n        *\n        * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n        * It is usually called indirectly by calling `markDirty` when the view needs to be\n        * re-rendered.\n        *\n        * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n        * `scheduleTick` requests. The scheduling function can be overridden in\n        * `renderComponent`'s `scheduler` option.\n        */\n    export function scheduleTick<T>(rootContext: RootContext, flags: RootContextFlags): void;\n    /**\n        * Used to perform change detection on the whole application.\n        *\n        * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`\n        * executes lifecycle hooks and conditionally checks components based on their\n        * `ChangeDetectionStrategy` and dirtiness.\n        *\n        * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally\n        * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a\n        * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can\n        * be changed when calling `renderComponent` and providing the `scheduler` option.\n        */\n    export function tick<T>(component: T): void;\n    /**\n        * Synchronously perform change detection on a component (and possibly its sub-components).\n        *\n        * This function triggers change detection in a synchronous way on a component. There should\n        * be very little reason to call this function directly since a preferred way to do change\n        * detection is to {@link markDirty} the component and wait for the scheduler to call this method\n        * at some future point in time. This is because a single user action often results in many\n        * components being invalidated and calling change detection on each component synchronously\n        * would be inefficient. It is better to wait until all components are marked as dirty and\n        * then perform single change detection across all of the components\n        *\n        * @param component The component which the change detection should be performed on.\n        */\n    export function detectChanges<T>(component: T): void;\n    /**\n        * Synchronously perform change detection on a root view and its components.\n        *\n        * @param lViewData The view which the change detection should be performed on.\n        */\n    export function detectChangesInRootView(lViewData: LViewData): void;\n    /**\n        * Checks the change detector and its children, and throws if any changes are detected.\n        *\n        * This is used in development mode to verify that running change detection doesn't\n        * introduce other changes.\n        */\n    export function checkNoChanges<T>(component: T): void;\n    /**\n        * Checks the change detector on a root view and its components, and throws if any changes are\n        * detected.\n        *\n        * This is used in development mode to verify that running change detection doesn't\n        * introduce other changes.\n        *\n        * @param lViewData The view which the change detection should be checked on.\n        */\n    export function checkNoChangesInRootView(lViewData: LViewData): void;\n    /**\n        * Mark the component as dirty (needing change detection).\n        *\n        * Marking a component dirty will schedule a change detection on this\n        * component at some point in the future. Marking an already dirty\n        * component as dirty is a noop. Only one outstanding change detection\n        * can be scheduled per component tree. (Two components bootstrapped with\n        * separate `renderComponent` will have separate schedulers)\n        *\n        * When the root component is bootstrapped with `renderComponent`, a scheduler\n        * can be provided.\n        *\n        * @param component Component to mark as dirty.\n        *\n        * @publicApi\n        */\n    export function markDirty<T>(component: T): void;\n    /**\n        * Creates a single value binding.\n        *\n        * @param value Value to diff\n        */\n    export function bind<T>(value: T): T | NO_CHANGE;\n    /**\n        * Create interpolation bindings with a variable number of expressions.\n        *\n        * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n        * Those are faster because there is no need to create an array of expressions and iterate over it.\n        *\n        * `values`:\n        * - has static text at even indexes,\n        * - has evaluated expressions at odd indexes.\n        *\n        * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n        */\n    export function interpolationV(values: any[]): string | NO_CHANGE;\n    /**\n        * Creates an interpolation binding with 1 expression.\n        *\n        * @param prefix static value used for concatenation only.\n        * @param v0 value checked for change.\n        * @param suffix static value used for concatenation only.\n        */\n    export function interpolation1(prefix: string, v0: any, suffix: string): string | NO_CHANGE;\n    /** Creates an interpolation binding with 2 expressions. */\n    export function interpolation2(prefix: string, v0: any, i0: string, v1: any, suffix: string): string | NO_CHANGE;\n    /** Creates an interpolation binding with 3 expressions. */\n    export function interpolation3(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, suffix: string): string | NO_CHANGE;\n    /** Create an interpolation binding with 4 expressions. */\n    export function interpolation4(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, suffix: string): string | NO_CHANGE;\n    /** Creates an interpolation binding with 5 expressions. */\n    export function interpolation5(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, suffix: string): string | NO_CHANGE;\n    /** Creates an interpolation binding with 6 expressions. */\n    export function interpolation6(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string): string | NO_CHANGE;\n    /** Creates an interpolation binding with 7 expressions. */\n    export function interpolation7(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string): string | NO_CHANGE;\n    /** Creates an interpolation binding with 8 expressions. */\n    export function interpolation8(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any, suffix: string): string | NO_CHANGE;\n    /** Store a value in the `data` at a given `index`. */\n    export function store<T>(index: number, value: T): void;\n    /**\n        * Retrieves a local reference from the current contextViewData.\n        *\n        * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n        * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n        *\n        * @param index The index of the local ref in contextViewData.\n        */\n    export function reference<T>(index: number): T;\n    export function loadQueryList<T>(queryListIdx: number): QueryList<T>;\n    /** Retrieves a value from current `viewData`. */\n    export function load<T>(index: number): T;\n    /** Gets the current binding value. */\n    export function getBinding(bindingIndex: number): any;\n    /** Updates binding if changed, then returns whether it was updated. */\n    export function bindingUpdated(bindingIndex: number, value: any): boolean;\n    /** Updates binding and returns the value. */\n    export function updateBinding(bindingIndex: number, value: any): any;\n    /** Updates 2 bindings if changed, then returns whether either was updated. */\n    export function bindingUpdated2(bindingIndex: number, exp1: any, exp2: any): boolean;\n    /** Updates 3 bindings if changed, then returns whether any was updated. */\n    export function bindingUpdated3(bindingIndex: number, exp1: any, exp2: any, exp3: any): boolean;\n    /** Updates 4 bindings if changed, then returns whether any was updated. */\n    export function bindingUpdated4(bindingIndex: number, exp1: any, exp2: any, exp3: any, exp4: any): boolean;\n    /**\n        * Returns the value associated to the given token from the injectors.\n        *\n        * `directiveInject` is intended to be used for directive, component and pipe factories.\n        *  All other injection use `inject` which does not walk the node injector tree.\n        *\n        * Usage example (in factory function):\n        *\n        * class SomeDirective {\n        *   constructor(directive: DirectiveA) {}\n        *\n        *   static ngDirectiveDef = defineDirective({\n        *     type: SomeDirective,\n        *     factory: () => new SomeDirective(directiveInject(DirectiveA))\n        *   });\n        * }\n        *\n        * @param token the type or token to inject\n        * @param flags Injection flags\n        * @returns the value from the injector or `null` when not found\n        */\n    export function directiveInject<T>(token: Type<T> | InjectionToken<T>): T;\n    export function directiveInject<T>(token: Type<T> | InjectionToken<T>, flags: InjectFlags): T;\n    /**\n        * Facade for the attribute injection from DI.\n        */\n    export function injectAttribute(attrNameToInject: string): string | undefined;\n    /**\n        * Registers a QueryList, associated with a content query, for later refresh (part of a view\n        * refresh).\n        */\n    export function registerContentQuery<Q>(queryList: QueryList<Q>, currentDirectiveIndex: number): void;\n    export const CLEAN_PROMISE: Promise<null>;\n    export function delegateToClassInput(tNode: TNode): number;\n}\n\ndeclare module '@angular/core/src/render3/state' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Sanitizer } from '@angular/core/src/sanitization/security';\n    import { TElementNode, TNode, TViewNode } from '@angular/core/src/render3/interfaces/node';\n    import { LQueries } from '@angular/core/src/render3/interfaces/query';\n    import { Renderer3, RendererFactory3 } from '@angular/core/src/render3/interfaces/renderer';\n    import { LViewData, OpaqueViewState, TView } from '@angular/core/src/render3/interfaces/view';\n    export function getRenderer(): Renderer3;\n    export function setRenderer(r: Renderer3): void;\n    export function getRendererFactory(): RendererFactory3;\n    export function setRendererFactory(factory: RendererFactory3): void;\n    export function getCurrentSanitizer(): Sanitizer | null;\n    export function getElementDepthCount(): number;\n    export function increaseElementDepthCount(): void;\n    export function decreaseElementDepthCount(): void;\n    export function getBindingsEnabled(): boolean;\n    /**\n        * Enables directive matching on elements.\n        *\n        *  * Example:\n        * ```\n        * <my-comp my-directive>\n        *   Should match component / directive.\n        * </my-comp>\n        * <div ngNonBindable>\n        *   <!-- disabledBindings() -->\n        *   <my-comp my-directive>\n        *     Should not match component / directive because we are in ngNonBindable.\n        *   </my-comp>\n        *   <!-- enableBindings() -->\n        * </div>\n        * ```\n        */\n    export function enableBindings(): void;\n    /**\n        * Disables directive matching on element.\n        *\n        *  * Example:\n        * ```\n        * <my-comp my-directive>\n        *   Should match component / directive.\n        * </my-comp>\n        * <div ngNonBindable>\n        *   <!-- disabledBindings() -->\n        *   <my-comp my-directive>\n        *     Should not match component / directive because we are in ngNonBindable.\n        *   </my-comp>\n        *   <!-- enableBindings() -->\n        * </div>\n        * ```\n        */\n    export function disableBindings(): void;\n    /**\n        * Returns the current OpaqueViewState instance.\n        *\n        * Used in conjunction with the restoreView() instruction to save a snapshot\n        * of the current view and restore it when listeners are invoked. This allows\n        * walking the declaration view tree in listeners to get vars from parent views.\n        */\n    export function getCurrentView(): OpaqueViewState;\n    export function _getViewData(): LViewData;\n    /**\n        * Restores `contextViewData` to the given OpaqueViewState instance.\n        *\n        * Used in conjunction with the getCurrentView() instruction to save a snapshot\n        * of the current view and restore it when listeners are invoked. This allows\n        * walking the declaration view tree in listeners to get vars from parent views.\n        *\n        * @param viewToRestore The OpaqueViewState instance to restore.\n        */\n    export function restoreView(viewToRestore: OpaqueViewState): void;\n    export function getPreviousOrParentTNode(): TNode;\n    export function setPreviousOrParentTNode(tNode: TNode): void;\n    export function setTNodeAndViewData(tNode: TNode, view: LViewData): void;\n    export function getIsParent(): boolean;\n    export function setIsParent(value: boolean): void;\n    export function getTView(): TView;\n    export function getCurrentQueries(): LQueries | null;\n    export function setCurrentQueries(queries: LQueries | null): void;\n    /**\n        * Query instructions can ask for \"current queries\" in 2 different cases:\n        * - when creating view queries (at the root of a component view, before any node is created - in\n        * this case currentQueries points to view queries)\n        * - when creating content queries (i.e. this previousOrParentTNode points to a node on which we\n        * create content queries).\n        */\n    export function getOrCreateCurrentQueries(QueryType: {\n            new (parent: null, shallow: null, deep: null): LQueries;\n    }): LQueries;\n    export function getCreationMode(): boolean;\n    /**\n        * Internal function that returns the current LViewData instance.\n        *\n        * The getCurrentView() instruction should be used for anything public.\n        */\n    export function getViewData(): LViewData;\n    export function getContextViewData(): LViewData;\n    export function getCleanup(view: LViewData): any[];\n    export function getTViewCleanup(view: LViewData): any[];\n    export function getCheckNoChangesMode(): boolean;\n    export function setCheckNoChangesMode(mode: boolean): void;\n    export function getFirstTemplatePass(): boolean;\n    export function setFirstTemplatePass(value: boolean): void;\n    export function getBindingRoot(): number;\n    export function setBindingRoot(value: number): void;\n    /**\n        * Swap the current state with a new state.\n        *\n        * For performance reasons we store the state in the top level of the module.\n        * This way we minimize the number of properties to read. Whenever a new view\n        * is entered we have to store the state for later, and when the view is\n        * exited the state has to be restored\n        *\n        * @param newView New state to become active\n        * @param host Element to which the View is a child of\n        * @returns the previous state;\n        */\n    export function enterView(newView: LViewData, hostTNode: TElementNode | TViewNode | null): LViewData;\n    export function nextContextImpl<T = any>(level?: number): T;\n    /**\n        * Resets the application state.\n        */\n    export function resetComponentState(): void;\n    /**\n        * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n        * the direction of traversal (up or down the view tree) a bit clearer.\n        *\n        * @param newView New state to become active\n        * @param creationOnly An optional boolean to indicate that the view was processed in creation mode\n        * only, i.e. the first update will be done later. Only possible for dynamically created views.\n        */\n    export function leaveView(newView: LViewData, creationOnly?: boolean): void;\n    export function assertPreviousIsParent(): void;\n    export function assertHasParent(): void;\n    export function assertDataInRange(index: number, arr?: any[]): void;\n    export function assertDataNext(index: number, arr?: any[]): void;\n}\n\ndeclare module '@angular/core/src/render3/i18n' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { NO_CHANGE } from '@angular/core/src/render3/tokens';\n    /**\n        * Extracts a part of a message and removes the rest.\n        *\n        * This method is used for extracting a part of the message associated with a template. A translated\n        * message can span multiple templates.\n        *\n        * Example:\n        * ```\n        * <div i18n>Translate <span *ngIf>me</span>!</div>\n        * ```\n        *\n        * @param message The message to crop\n        * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n        * external template and removes all sub-templates.\n        */\n    export function getTranslationForTemplate(message: string, subTemplateIndex?: number): string;\n    /**\n        * Marks a block of text as translatable.\n        *\n        * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n        * The translation `message` is the value which is locale specific. The translation string may\n        * contain placeholders which associate inner elements and sub-templates within the translation.\n        *\n        * The translation `message` placeholders are:\n        * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n        *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n        *   `block` that matches the sub-template in which it was declared.\n        * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n        *   and end of DOM element that were embedded in the original translation block. The placeholder\n        *   `index` points to the element index in the template instructions set. An optional `block` that\n        *   matches the sub-template in which it was declared.\n        * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n        *   split up and translated separately in each angular template function. The `index` points to the\n        *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n        *\n        * @param index A unique index of the translation in the static block.\n        * @param message The translation message.\n        * @param subTemplateIndex Optional sub-template index in the `message`.\n        */\n    export function i18nStart(index: number, message: string, subTemplateIndex?: number): void;\n    /**\n        * Handles message string post-processing for internationalization.\n        *\n        * Handles message string post-processing by transforming it from intermediate\n        * format (that might contain some markers that we need to replace) to the final\n        * form, consumable by i18nStart instruction. Post processing steps include:\n        *\n        * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n        * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n        * 3. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n        *    in case multiple ICUs have the same placeholder name\n        *\n        * @param message Raw translation string for post processing\n        * @param replacements Set of replacements that should be applied\n        *\n        * @returns Transformed string that can be consumed by i18nStart instruction\n        *\n        * @publicAPI\n        */\n    export function i18nPostprocess(message: string, replacements: {\n            [key: string]: (string | string[]);\n    }): string;\n    /**\n        * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n        * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n        */\n    export function i18nEnd(): void;\n    /**\n        *\n        * Use this instruction to create a translation block that doesn't contain any placeholder.\n        * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n        *\n        * The translation `message` is the value which is locale specific. The translation string may\n        * contain placeholders which associate inner elements and sub-templates within the translation.\n        *\n        * The translation `message` placeholders are:\n        * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n        *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n        *   `block` that matches the sub-template in which it was declared.\n        * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n        *   and end of DOM element that were embedded in the original translation block. The placeholder\n        *   `index` points to the element index in the template instructions set. An optional `block` that\n        *   matches the sub-template in which it was declared.\n        * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n        *   split up and translated separately in each angular template function. The `index` points to the\n        *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n        *\n        * @param index A unique index of the translation in the static block.\n        * @param message The translation message.\n        * @param subTemplateIndex Optional sub-template index in the `message`.\n        */\n    export function i18n(index: number, message: string, subTemplateIndex?: number): void;\n    /**\n        * Marks a list of attributes as translatable.\n        *\n        * @param index A unique index in the static block\n        * @param values\n        */\n    export function i18nAttributes(index: number, values: string[]): void;\n    /**\n        * Stores the values of the bindings during each update cycle in order to determine if we need to\n        * update the translated nodes.\n        *\n        * @param expression The binding's new value or NO_CHANGE\n        */\n    export function i18nExp<T>(expression: T | NO_CHANGE): void;\n    /**\n        * Updates a translation block or an i18n attribute when the bindings have changed.\n        *\n        * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n        * (i18n attribute) on which it should update the content.\n        */\n    export function i18nApply(index: number): void;\n}\n\ndeclare module '@angular/core/src/render3/ng_module_ref' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    import { Injector } from '@angular/core/src/di/injector';\n    import { StaticProvider } from '@angular/core/src/di/provider';\n    import { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '@angular/core/src/linker/component_factory_resolver';\n    import { InternalNgModuleRef, NgModuleFactory as viewEngine_NgModuleFactory, NgModuleRef as viewEngine_NgModuleRef } from '@angular/core/src/linker/ng_module_factory';\n    import { NgModuleDef } from '@angular/core/src/metadata/ng_module';\n    import { Type } from '@angular/core/src/type';\n    export interface NgModuleType {\n        ngModuleDef: NgModuleDef<any>;\n    }\n    export const COMPONENT_FACTORY_RESOLVER: StaticProvider;\n    export class NgModuleRef<T> extends viewEngine_NgModuleRef<T> implements InternalNgModuleRef<T> {\n        _bootstrapComponents: Type<any>[];\n        injector: Injector;\n        componentFactoryResolver: viewEngine_ComponentFactoryResolver;\n        instance: T;\n        destroyCbs: (() => void)[] | null;\n        constructor(ngModuleType: Type<T>, parentInjector: Injector | null);\n        destroy(): void;\n        onDestroy(callback: () => void): void;\n    }\n    export class NgModuleFactory<T> extends viewEngine_NgModuleFactory<T> {\n        moduleType: Type<T>;\n        constructor(moduleType: Type<T>);\n        create(parentInjector: Injector | null): viewEngine_NgModuleRef<T>;\n    }\n}\n\ndeclare module '@angular/core/src/render3/interfaces/node' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { StylingContext } from '@angular/core/src/render3/interfaces/styling';\n    import { LViewData, TView } from '@angular/core/src/render3/interfaces/view';\n    /**\n        * TNodeType corresponds to the TNode.type property. It contains information\n        * on how to map a particular set of bits in TNode.flags to the node type.\n        */\n    export const enum TNodeType {\n            Container = 0,\n            Projection = 1,\n            View = 2,\n            Element = 3,\n            ViewOrElement = 2,\n            ElementContainer = 4,\n            IcuContainer = 5\n    }\n    /**\n        * Corresponds to the TNode.flags property.\n        */\n    export const enum TNodeFlags {\n            /** The number of directives on this node is encoded on the least significant bits */\n            DirectiveCountMask = 4095,\n            /** This bit is set if the node is a component */\n            isComponent = 4096,\n            /** This bit is set if the node has been projected */\n            isProjected = 8192,\n            /** This bit is set if the node has any content queries */\n            hasContentQuery = 16384,\n            /** This bit is set if the node has any directives that contain [class properties */\n            hasClassInput = 32768,\n            /** The index of the first directive on this node is encoded on the most significant bits  */\n            DirectiveStartingIndexShift = 16\n    }\n    /**\n        * Corresponds to the TNode.providerIndexes property.\n        */\n    export const enum TNodeProviderIndexes {\n            /** The index of the first provider on this node is encoded on the least significant bits */\n            ProvidersStartIndexMask = 65535,\n            /** The count of view providers from the component on this node is encoded on the 16 most\n                 significant bits */\n            CptViewProvidersCountShift = 16,\n            CptViewProvidersCountShifter = 65536\n    }\n    /**\n        * A set of marker values to be used in the attributes arrays. Those markers indicate that some\n        * items are not regular attributes and the processing should be adapted accordingly.\n        */\n    export const enum AttributeMarker {\n            /**\n                * Marker indicates that the following 3 values in the attributes array are:\n                * namespaceUri, attributeName, attributeValue\n                * in that order.\n                */\n            NamespaceURI = 0,\n            /**\n                * This marker indicates that the following attribute names were extracted from bindings (ex.:\n                * [foo]=\"exp\") and / or event handlers (ex. (bar)=\"doSth()\").\n                * Taking the above bindings and outputs as an example an attributes array could look as follows:\n                * ['class', 'fade in', AttributeMarker.SelectOnly, 'foo', 'bar']\n                */\n            SelectOnly = 1\n    }\n    /**\n        * A combination of:\n        * - attribute names and values\n        * - special markers acting as flags to alter attributes processing.\n        */\n    export type TAttributes = (string | AttributeMarker)[];\n    /**\n        * Binding data (flyweight) for a particular node that is shared between all templates\n        * of a specific type.\n        *\n        * If a property is:\n        *    - PropertyAliases: that property's data was generated and this is it\n        *    - Null: that property's data was already generated and nothing was found.\n        *    - Undefined: that property's data has not yet been generated\n        *\n        * see: https://en.wikipedia.org/wiki/Flyweight_pattern for more on the Flyweight pattern\n        */\n    export interface TNode {\n            /** The type of the TNode. See TNodeType. */\n            type: TNodeType;\n            /**\n                * Index of the TNode in TView.data and corresponding native element in LViewData.\n                *\n                * This is necessary to get from any TNode to its corresponding native element when\n                * traversing the node tree.\n                *\n                * If index is -1, this is a dynamically created container node or embedded view node.\n                */\n            index: number;\n            /**\n                * The index of the closest injector in this node's LViewData.\n                *\n                * If the index === -1, there is no injector on this node or any ancestor node in this view.\n                *\n                * If the index !== -1, it is the index of this node's injector OR the index of a parent injector\n                * in the same view. We pass the parent injector index down the node tree of a view so it's\n                * possible to find the parent injector without walking a potentially deep node tree. Injector\n                * indices are not set across view boundaries because there could be multiple component hosts.\n                *\n                * If tNode.injectorIndex === tNode.parent.injectorIndex, then the index belongs to a parent\n                * injector.\n                */\n            injectorIndex: number;\n            /**\n                * This number stores two values using its bits:\n                *\n                * - the number of directives on that node (first 12 bits)\n                * - the starting index of the node's directives in the directives array (last 20 bits).\n                *\n                * These two values are necessary so DI can effectively search the directives associated\n                * with a node without searching the whole directives array.\n                */\n            flags: TNodeFlags;\n            /**\n                * This number stores two values using its bits:\n                *\n                * - the index of the first provider on that node (first 16 bits)\n                * - the count of view providers from the component on this node (last 16 bits)\n                */\n            providerIndexes: TNodeProviderIndexes;\n            /** The tag name associated with this node. */\n            tagName: string | null;\n            /**\n                * Attributes associated with an element. We need to store attributes to support various use-cases\n                * (attribute injection, content projection with selectors, directives matching).\n                * Attributes are stored statically because reading them from the DOM would be way too slow for\n                * content projection and queries.\n                *\n                * Since attrs will always be calculated first, they will never need to be marked undefined by\n                * other instructions.\n                *\n                * For regular attributes a name of an attribute and its value alternate in the array.\n                * e.g. ['role', 'checkbox']\n                * This array can contain flags that will indicate \"special attributes\" (attributes with\n                * namespaces, attributes extracted from bindings and outputs).\n                */\n            attrs: TAttributes | null;\n            /**\n                * A set of local names under which a given element is exported in a template and\n                * visible to queries. An entry in this array can be created for different reasons:\n                * - an element itself is referenced, ex.: `<div #foo>`\n                * - a component is referenced, ex.: `<my-cmpt #foo>`\n                * - a directive is referenced, ex.: `<my-cmpt #foo=\"directiveExportAs\">`.\n                *\n                * A given element might have different local names and those names can be associated\n                * with a directive. We store local names at even indexes while odd indexes are reserved\n                * for directive index in a view (or `-1` if there is no associated directive).\n                *\n                * Some examples:\n                * - `<div #foo>` => `[\"foo\", -1]`\n                * - `<my-cmpt #foo>` => `[\"foo\", myCmptIdx]`\n                * - `<my-cmpt #foo #bar=\"directiveExportAs\">` => `[\"foo\", myCmptIdx, \"bar\", directiveIdx]`\n                * - `<div #foo #bar=\"directiveExportAs\">` => `[\"foo\", -1, \"bar\", directiveIdx]`\n                */\n            localNames: (string | number)[] | null;\n            /** Information about input properties that need to be set once from attribute data. */\n            initialInputs: InitialInputData | null | undefined;\n            /**\n                * Input data for all directives on this node.\n                *\n                * - `undefined` means that the prop has not been initialized yet,\n                * - `null` means that the prop has been initialized but no inputs have been found.\n                */\n            inputs: PropertyAliases | null | undefined;\n            /**\n                * Output data for all directives on this node.\n                *\n                * - `undefined` means that the prop has not been initialized yet,\n                * - `null` means that the prop has been initialized but no outputs have been found.\n                */\n            outputs: PropertyAliases | null | undefined;\n            /**\n                * The TView or TViews attached to this node.\n                *\n                * If this TNode corresponds to an LContainer with inline views, the container will\n                * need to store separate static data for each of its view blocks (TView[]). Otherwise,\n                * nodes in inline views with the same index as nodes in their parent views will overwrite\n                * each other, as they are in the same template.\n                *\n                * Each index in this array corresponds to the static data for a certain\n                * view. So if you had V(0) and V(1) in a container, you might have:\n                *\n                * [\n                *   [{tagName: 'div', attrs: ...}, null],     // V(0) TView\n                *   [{tagName: 'button', attrs ...}, null]    // V(1) TView\n                *\n                * If this TNode corresponds to an LContainer with a template (e.g. structural\n                * directive), the template's TView will be stored here.\n                *\n                * If this TNode corresponds to an element, tViews will be null .\n                */\n            tViews: TView | TView[] | null;\n            /**\n                * The next sibling node. Necessary so we can propagate through the root nodes of a view\n                * to insert them or remove them from the DOM.\n                */\n            next: TNode | null;\n            /**\n                * First child of the current node.\n                *\n                * For component nodes, the child will always be a ContentChild (in same view).\n                * For embedded view nodes, the child will be in their child view.\n                */\n            child: TNode | null;\n            /**\n                * Parent node (in the same view only).\n                *\n                * We need a reference to a node's parent so we can append the node to its parent's native\n                * element at the appropriate time.\n                *\n                * If the parent would be in a different view (e.g. component host), this property will be null.\n                * It's important that we don't try to cross component boundaries when retrieving the parent\n                * because the parent will change (e.g. index, attrs) depending on where the component was\n                * used (and thus shouldn't be stored on TNode). In these cases, we retrieve the parent through\n                * LView.node instead (which will be instance-specific).\n                *\n                * If this is an inline view node (V), the parent will be its container.\n                */\n            parent: TElementNode | TContainerNode | null;\n            /**\n                * If this node is part of an i18n block, it indicates whether this node is part of the DOM.\n                * If this node is not part of an i18n block, this field is null.\n                */\n            detached: boolean | null;\n            stylingTemplate: StylingContext | null;\n            /**\n                * List of projected TNodes for a given component host element OR index into the said nodes.\n                *\n                * For easier discussion assume this example:\n                * `<parent>`'s view definition:\n                * ```\n                * <child id=\"c1\">content1</child>\n                * <child id=\"c2\"><span>content2</span></child>\n                * ```\n                * `<child>`'s view definition:\n                * ```\n                * <ng-content id=\"cont1\"></ng-content>\n                * ```\n                *\n                * If `Array.isArray(projection)` then `TNode` is a host element:\n                * - `projection` stores the content nodes which are to be projected.\n                *    - The nodes represent categories defined by the selector: For example:\n                *      `<ng-content/><ng-content select=\"abc\"/>` would represent the heads for `<ng-content/>`\n                *      and `<ng-content select=\"abc\"/>` respectively.\n                *    - The nodes we store in `projection` are heads only, we used `.next` to get their\n                *      siblings.\n                *    - The nodes `.next` is sorted/rewritten as part of the projection setup.\n                *    - `projection` size is equal to the number of projections `<ng-content>`. The size of\n                *      `c1` will be `1` because `<child>` has only one `<ng-content>`.\n                * - we store `projection` with the host (`c1`, `c2`) rather than the `<ng-content>` (`cont1`)\n                *   because the same component (`<child>`) can be used in multiple locations (`c1`, `c2`) and as\n                *   a result have different set of nodes to project.\n                * - without `projection` it would be difficult to efficiently traverse nodes to be projected.\n                *\n                * If `typeof projection == 'number'` then `TNode` is a `<ng-content>` element:\n                * - `projection` is an index of the host's `projection`Nodes.\n                *   - This would return the first head node to project:\n                *     `getHost(currentTNode).projection[currentTNode.projection]`.\n                * - When projecting nodes the parent node retrieved may be a `<ng-content>` node, in which case\n                *   the process is recursive in nature (not implementation).\n                */\n            projection: (TNode | null)[] | number | null;\n    }\n    /** Static data for an element  */\n    export interface TElementNode extends TNode {\n            /** Index in the data[] array */\n            index: number;\n            child: TElementNode | TTextNode | TElementContainerNode | TContainerNode | TProjectionNode | null;\n            /**\n                * Element nodes will have parents unless they are the first node of a component or\n                * embedded view (which means their parent is in a different view and must be\n                * retrieved using viewData[HOST_NODE]).\n                */\n            parent: TElementNode | TElementContainerNode | null;\n            tViews: null;\n            /**\n                * If this is a component TNode with projection, this will be an array of projected\n                * TNodes (see TNode.projection for more info). If it's a regular element node or a\n                * component without projection, it will be null.\n                */\n            projection: (TNode | null)[] | null;\n    }\n    /** Static data for a text node */\n    export interface TTextNode extends TNode {\n            /** Index in the data[] array */\n            index: number;\n            child: null;\n            /**\n                * Text nodes will have parents unless they are the first node of a component or\n                * embedded view (which means their parent is in a different view and must be\n                * retrieved using LView.node).\n                */\n            parent: TElementNode | TElementContainerNode | null;\n            tViews: null;\n            projection: null;\n    }\n    /** Static data for an LContainer */\n    export interface TContainerNode extends TNode {\n            /**\n                * Index in the data[] array.\n                *\n                * If it's -1, this is a dynamically created container node that isn't stored in\n                * data[] (e.g. when you inject ViewContainerRef) .\n                */\n            index: number;\n            child: null;\n            /**\n                * Container nodes will have parents unless:\n                *\n                * - They are the first node of a component or embedded view\n                * - They are dynamically created\n                */\n            parent: TElementNode | TElementContainerNode | null;\n            tViews: TView | TView[] | null;\n            projection: null;\n    }\n    /** Static data for an <ng-container> */\n    export interface TElementContainerNode extends TNode {\n            /** Index in the LViewData[] array. */\n            index: number;\n            child: TElementNode | TTextNode | TContainerNode | TElementContainerNode | TProjectionNode | null;\n            parent: TElementNode | TElementContainerNode | null;\n            tViews: null;\n            projection: null;\n    }\n    /** Static data for an ICU expression */\n    export interface TIcuContainerNode extends TNode {\n            /** Index in the LViewData[] array. */\n            index: number;\n            child: TElementNode | TTextNode | null;\n            parent: TElementNode | TElementContainerNode | null;\n            tViews: null;\n            projection: null;\n            /**\n                * Indicates the current active case for an ICU expression.\n                * It is null when there is no active case.\n                */\n            activeCaseIndex: number | null;\n    }\n    /** Static data for a view  */\n    export interface TViewNode extends TNode {\n            /** If -1, it's a dynamically created view. Otherwise, it is the view block ID. */\n            index: number;\n            child: TElementNode | TTextNode | TElementContainerNode | TContainerNode | TProjectionNode | null;\n            parent: TContainerNode | null;\n            tViews: null;\n            projection: null;\n    }\n    /** Static data for an LProjectionNode  */\n    export interface TProjectionNode extends TNode {\n            /** Index in the data[] array */\n            child: null;\n            /**\n                * Projection nodes will have parents unless they are the first node of a component\n                * or embedded view (which means their parent is in a different view and must be\n                * retrieved using LView.node).\n                */\n            parent: TElementNode | TElementContainerNode | null;\n            tViews: null;\n            /** Index of the projection node. (See TNode.projection for more info.) */\n            projection: number;\n    }\n    /**\n        * This mapping is necessary so we can set input properties and output listeners\n        * properly at runtime when property names are minified or aliased.\n        *\n        * Key: unminified / public input or output name\n        * Value: array containing minified / internal name and related directive index\n        *\n        * The value must be an array to support inputs and outputs with the same name\n        * on the same node.\n        */\n    export type PropertyAliases = {\n            [key: string]: PropertyAliasValue;\n    };\n    /**\n        * Store the runtime input or output names for all the directives.\n        *\n        * - Even indices: directive index\n        * - Odd indices: minified / internal name\n        *\n        * e.g. [0, 'change-minified']\n        */\n    export type PropertyAliasValue = (number | string)[];\n    /**\n        * This array contains information about input properties that\n        * need to be set once from attribute data. It's ordered by\n        * directive index (relative to element) so it's simple to\n        * look up a specific directive's initial input data.\n        *\n        * Within each sub-array:\n        *\n        * Even indices: minified/internal input name\n        * Odd indices: initial value\n        *\n        * If a directive on a node does not have any input properties\n        * that should be set from attributes, its index is set to null\n        * to avoid a sparse array.\n        *\n        * e.g. [null, ['role-min', 'button']]\n        */\n    export type InitialInputData = (InitialInputs | null)[];\n    /**\n        * Used by InitialInputData to store input properties\n        * that should be set once from attributes.\n        *\n        * Even indices: minified/internal input name\n        * Odd indices: initial value\n        *\n        * e.g. ['role-min', 'button']\n        */\n    export type InitialInputs = string[];\n    export const unusedValueExportToPlacateAjd = 1;\n    /**\n        * Type representing a set of TNodes that can have local refs (`#foo`) placed on them.\n        */\n    export type TNodeWithLocalRefs = TContainerNode | TElementNode | TElementContainerNode;\n    /**\n        * Type for a function that extracts a value for a local refs.\n        * Example:\n        * - `<div #nativeDivEl>` - `nativeDivEl` should point to the native `<div>` element;\n        * - `<ng-template #tplRef>` - `tplRef` should point to the `TemplateRef` instance;\n        */\n    export type LocalRefExtractor = (tNode: TNodeWithLocalRefs, currentView: LViewData) => any;\n}\n\ndeclare module '@angular/core/src/render3/metadata' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { Type } from '@angular/core/src/type';\n    /**\n        * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n        * on the type.\n        *\n        * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n        *\n        * Calls to `setClassMetadata` can be marked as pure, resulting in the metadata assignments being\n        * tree-shaken away during production builds.\n        */\n    export function setClassMetadata(type: Type<any>, decorators: any[] | null, ctorParameters: any[] | null, propDecorators: {\n            [field: string]: any;\n    } | null): void;\n}\n\ndeclare module '@angular/core/src/render3/pipe' {\n    /**\n        * Create a pipe.\n        *\n        * @param index Pipe index where the pipe will be stored.\n        * @param pipeName The name of the pipe\n        * @returns T the instance of the pipe.\n        */\n    export function pipe(index: number, pipeName: string): any;\n    /**\n        * Invokes a pipe with 1 arguments.\n        *\n        * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n        * the pipe only when an input to the pipe changes.\n        *\n        * @param index Pipe index where the pipe was stored on creation.\n        * @param slotOffset the offset in the reserved slot space\n        * @param v1 1st argument to {@link PipeTransform#transform}.\n        */\n    export function pipeBind1(index: number, slotOffset: number, v1: any): any;\n    /**\n        * Invokes a pipe with 2 arguments.\n        *\n        * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n        * the pipe only when an input to the pipe changes.\n        *\n        * @param index Pipe index where the pipe was stored on creation.\n        * @param slotOffset the offset in the reserved slot space\n        * @param v1 1st argument to {@link PipeTransform#transform}.\n        * @param v2 2nd argument to {@link PipeTransform#transform}.\n        */\n    export function pipeBind2(index: number, slotOffset: number, v1: any, v2: any): any;\n    /**\n        * Invokes a pipe with 3 arguments.\n        *\n        * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n        * the pipe only when an input to the pipe changes.\n        *\n        * @param index Pipe index where the pipe was stored on creation.\n        * @param slotOffset the offset in the reserved slot space\n        * @param v1 1st argument to {@link PipeTransform#transform}.\n        * @param v2 2nd argument to {@link PipeTransform#transform}.\n        * @param v3 4rd argument to {@link PipeTransform#transform}.\n        */\n    export function pipeBind3(index: number, slotOffset: number, v1: any, v2: any, v3: any): any;\n    /**\n        * Invokes a pipe with 4 arguments.\n        *\n        * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n        * the pipe only when an input to the pipe changes.\n        *\n        * @param index Pipe index where the pipe was stored on creation.\n        * @param slotOffset the offset in the reserved slot space\n        * @param v1 1st argument to {@link PipeTransform#transform}.\n        * @param v2 2nd argument to {@link PipeTransform#transform}.\n        * @param v3 3rd argument to {@link PipeTransform#transform}.\n        * @param v4 4th argument to {@link PipeTransform#transform}.\n        */\n    export function pipeBind4(index: number, slotOffset: number, v1: any, v2: any, v3: any, v4: any): any;\n    /**\n        * Invokes a pipe with variable number of arguments.\n        *\n        * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n        * the pipe only when an input to the pipe changes.\n        *\n        * @param index Pipe index where the pipe was stored on creation.\n        * @param slotOffset the offset in the reserved slot space\n        * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n        */\n    export function pipeBindV(index: number, slotOffset: number, values: any[]): any;\n}\n\ndeclare module '@angular/core/src/render3/query' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { QueryList as viewEngine_QueryList } from '@angular/core/src/linker/query_list';\n    import { Type } from '@angular/core/src/type';\n    import { TContainerNode, TElementContainerNode, TElementNode } from '@angular/core/src/render3/interfaces/node';\n    import { LQueries } from '@angular/core/src/render3/interfaces/query';\n    /**\n        * A predicate which determines if a given element/directive should be included in the query\n        * results.\n        */\n    export interface QueryPredicate<T> {\n            /**\n                * If looking for directives then it contains the directive type.\n                */\n            type: Type<T> | null;\n            /**\n                * If selector then contains local names to query for.\n                */\n            selector: string[] | null;\n            /**\n                * Indicates which token should be read from DI for this query.\n                */\n            read: Type<T> | null;\n    }\n    /**\n        * An object representing a query, which is a combination of:\n        * - query predicate to determines if a given element/directive should be included in the query\n        * - values collected based on a predicate\n        * - `QueryList` to which collected values should be reported\n        */\n    export interface LQuery<T> {\n            /**\n                * Next query. Used when queries are stored as a linked list in `LQueries`.\n                */\n            next: LQuery<any> | null;\n            /**\n                * Destination to which the value should be added.\n                */\n            list: QueryList<T>;\n            /**\n                * A predicate which determines if a given element/directive should be included in the query\n                * results.\n                */\n            predicate: QueryPredicate<T>;\n            /**\n                * Values which have been located.\n                *\n                * This is what builds up the `QueryList._valuesTree`.\n                */\n            values: any[];\n            /**\n                * A pointer to an array that stores collected values from views. This is necessary so we know a\n                * container into which to insert nodes collected from views.\n                */\n            containerValues: any[] | null;\n    }\n    export class LQueries_ implements LQueries {\n            parent: LQueries_ | null;\n            constructor(parent: LQueries_ | null, shallow: LQuery<any> | null, deep: LQuery<any> | null);\n            track<T>(queryList: viewEngine_QueryList<T>, predicate: Type<T> | string[], descend?: boolean, read?: Type<T>): void;\n            clone(): LQueries;\n            container(): LQueries | null;\n            createView(): LQueries | null;\n            insertView(index: number): void;\n            addNode(tNode: TElementNode | TContainerNode | TElementContainerNode): LQueries | null;\n            removeView(): void;\n    }\n    export type QueryList<T> = viewEngine_QueryList<T>;\n    export const QueryList: typeof viewEngine_QueryList;\n    /**\n        * Creates and returns a QueryList.\n        *\n        * @param memoryIndex The index in memory where the QueryList should be saved. If null,\n        * this is is a content query and the QueryList will be saved later through directiveCreate.\n        * @param predicate The type for which the query will search\n        * @param descend Whether or not to descend into children\n        * @param read What to save in the query\n        * @returns QueryList<T>\n        */\n    export function query<T>(memoryIndex: number | null, predicate: Type<any> | string[], descend?: boolean, read?: any): QueryList<T>;\n    /**\n        * Refreshes a query by combining matches from all active views and removing matches from deleted\n        * views.\n        * Returns true if a query got dirty during change detection, false otherwise.\n        */\n    export function queryRefresh(queryList: QueryList<any>): boolean;\n}\n\ndeclare module '@angular/core/src/render3/pure_function' {\n    /**\n        * If the value hasn't been saved, calls the pure function to store and return the\n        * value. If it has been saved, returns the saved value.\n        *\n        * @param slotOffset the offset from binding root to the reserved slot\n        * @param pureFn Function that returns a value\n        * @param thisArg Optional calling context of pureFn\n        * @returns value\n        */\n    export function pureFunction0<T>(slotOffset: number, pureFn: () => T, thisArg?: any): T;\n    /**\n        * If the value of the provided exp has changed, calls the pure function to return\n        * an updated value. Or if the value has not changed, returns cached value.\n        *\n        * @param slotOffset the offset from binding root to the reserved slot\n        * @param pureFn Function that returns an updated value\n        * @param exp Updated expression value\n        * @param thisArg Optional calling context of pureFn\n        * @returns Updated or cached value\n        */\n    export function pureFunction1(slotOffset: number, pureFn: (v: any) => any, exp: any, thisArg?: any): any;\n    /**\n        * If the value of any provided exp has changed, calls the pure function to return\n        * an updated value. Or if no values have changed, returns cached value.\n        *\n        * @param slotOffset the offset from binding root to the reserved slot\n        * @param pureFn\n        * @param exp1\n        * @param exp2\n        * @param thisArg Optional calling context of pureFn\n        * @returns Updated or cached value\n        */\n    export function pureFunction2(slotOffset: number, pureFn: (v1: any, v2: any) => any, exp1: any, exp2: any, thisArg?: any): any;\n    /**\n        * If the value of any provided exp has changed, calls the pure function to return\n        * an updated value. Or if no values have changed, returns cached value.\n        *\n        * @param slotOffset the offset from binding root to the reserved slot\n        * @param pureFn\n        * @param exp1\n        * @param exp2\n        * @param exp3\n        * @param thisArg Optional calling context of pureFn\n        * @returns Updated or cached value\n        */\n    export function pureFunction3(slotOffset: number, pureFn: (v1: any, v2: any, v3: any) => any, exp1: any, exp2: any, exp3: any, thisArg?: any): any;\n    /**\n        * If the value of any provided exp has changed, calls the pure function to return\n        * an updated value. Or if no values have changed, returns cached value.\n        *\n        * @param slotOffset the offset from binding root to the reserved slot\n        * @param pureFn\n        * @param exp1\n        * @param exp2\n        * @param exp3\n        * @param exp4\n        * @param thisArg Optional calling context of pureFn\n        * @returns Updated or cached value\n        */\n    export function pureFunction4(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, thisArg?: any): any;\n    /**\n        * If the value of any provided exp has changed, calls the pure function to return\n        * an updated value. Or if no values have changed, returns cached value.\n        *\n        * @param slotOffset the offset from binding root to the reserved slot\n        * @param pureFn\n        * @param exp1\n        * @param exp2\n        * @param exp3\n        * @param exp4\n        * @param exp5\n        * @param thisArg Optional calling context of pureFn\n        * @returns Updated or cached value\n        */\n    export function pureFunction5(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, thisArg?: any): any;\n    /**\n        * If the value of any provided exp has changed, calls the pure function to return\n        * an updated value. Or if no values have changed, returns cached value.\n        *\n        * @param slotOffset the offset from binding root to the reserved slot\n        * @param pureFn\n        * @param exp1\n        * @param exp2\n        * @param exp3\n        * @param exp4\n        * @param exp5\n        * @param exp6\n        * @param thisArg Optional calling context of pureFn\n        * @returns Updated or cached value\n        */\n    export function pureFunction6(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, thisArg?: any): any;\n    /**\n        * If the value of any provided exp has changed, calls the pure function to return\n        * an updated value. Or if no values have changed, returns cached value.\n        *\n        * @param slotOffset the offset from binding root to the reserved slot\n        * @param pureFn\n        * @param exp1\n        * @param exp2\n        * @param exp3\n        * @param exp4\n        * @param exp5\n        * @param exp6\n        * @param exp7\n        * @param thisArg Optional calling context of pureFn\n        * @returns Updated or cached value\n        */\n    export function pureFunction7(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, exp7: any, thisArg?: any): any;\n    /**\n        * If the value of any provided exp has changed, calls the pure function to return\n        * an updated value. Or if no values have changed, returns cached value.\n        *\n        * @param slotOffset the offset from binding root to the reserved slot\n        * @param pureFn\n        * @param exp1\n        * @param exp2\n        * @param exp3\n        * @param exp4\n        * @param exp5\n        * @param exp6\n        * @param exp7\n        * @param exp8\n        * @param thisArg Optional calling context of pureFn\n        * @returns Updated or cached value\n        */\n    export function pureFunction8(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, exp7: any, exp8: any, thisArg?: any): any;\n    /**\n        * pureFunction instruction that can support any number of bindings.\n        *\n        * If the value of any provided exp has changed, calls the pure function to return\n        * an updated value. Or if no values have changed, returns cached value.\n        *\n        * @param slotOffset the offset from binding root to the reserved slot\n        * @param pureFn A pure function that takes binding values and builds an object or array\n        * containing those values.\n        * @param exps An array of binding values\n        * @param thisArg Optional calling context of pureFn\n        * @returns Updated or cached value\n        */\n    export function pureFunctionV(slotOffset: number, pureFn: (...v: any[]) => any, exps: any[], thisArg?: any): any;\n}\n\ndeclare module '@angular/core/src/render3/view_engine_compatibility_prebound' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { TemplateRef as ViewEngine_TemplateRef } from '@angular/core/src/linker/template_ref';\n    import { TNode } from '@angular/core/src/render3/interfaces/node';\n    import { LViewData } from '@angular/core/src/render3/interfaces/view';\n    /**\n        * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n        * `<ng-template>` element.\n        */\n    export function templateRefExtractor(tNode: TNode, currentView: LViewData): ViewEngine_TemplateRef<{}> | null;\n}\n\ndeclare module '@angular/core/src/render3/tokens' {\n    /**\n      * @license\n      * Copyright Google Inc. All Rights Reserved.\n      *\n      * Use of this source code is governed by an MIT-style license that can be\n      * found in the LICENSE file at https://angular.io/license\n      */\n    export interface NO_CHANGE {\n        brand: 'NO_CHANGE';\n    }\n    /** A special value which designates that a value has not changed. */\n    export const NO_CHANGE: NO_CHANGE;\n}\n\ndeclare module '@angular/core/src/render3/jit/compiler_facade_interface' {\n    /**\n        * A set of interfaces which are shared between `@angular/core` and `@angular/compiler` to allow\n        * for late binding of `@angular/compiler` for JIT purposes.\n        *\n        * This file has two copies. Please ensure that they are in sync:\n        *  - packages/compiler/src/compiler_facade_interface.ts             (master)\n        *  - packages/core/src/render3/jit/compiler_facade_interface.ts     (copy)\n        *\n        * Please ensure that the two files are in sync using this command:\n        * ```\n        * cp packages/compiler/src/compiler_facade_interface.ts \\\n        *    packages/core/src/render3/jit/compiler_facade_interface.ts\n        * ```\n        */\n    export interface ExportedCompilerFacade {\n            ɵcompilerFacade: CompilerFacade;\n    }\n    export interface CompilerFacade {\n            compilePipe(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3PipeMetadataFacade): any;\n            compileInjectable(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3InjectableMetadataFacade): any;\n            compileInjector(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3InjectorMetadataFacade): any;\n            compileNgModule(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3NgModuleMetadataFacade): any;\n            compileDirective(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3DirectiveMetadataFacade): any;\n            compileComponent(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3ComponentMetadataFacade): any;\n            R3ResolvedDependencyType: typeof R3ResolvedDependencyType;\n    }\n    export interface CoreEnvironment {\n            [name: string]: Function;\n    }\n    export type StringMap = {\n            [key: string]: string;\n    };\n    export type StringMapWithRename = {\n            [key: string]: string | [string, string];\n    };\n    export type Provider = any;\n    export enum R3ResolvedDependencyType {\n            Token = 0,\n            Attribute = 1\n    }\n    export interface R3DependencyMetadataFacade {\n            token: any;\n            resolved: R3ResolvedDependencyType;\n            host: boolean;\n            optional: boolean;\n            self: boolean;\n            skipSelf: boolean;\n    }\n    export interface R3PipeMetadataFacade {\n            name: string;\n            type: any;\n            pipeName: string;\n            deps: R3DependencyMetadataFacade[] | null;\n            pure: boolean;\n    }\n    export interface R3InjectableMetadataFacade {\n            name: string;\n            type: any;\n            ctorDeps: R3DependencyMetadataFacade[] | null;\n            providedIn: any;\n            useClass?: any;\n            useFactory?: any;\n            useExisting?: any;\n            useValue?: any;\n            userDeps?: R3DependencyMetadataFacade[];\n    }\n    export interface R3NgModuleMetadataFacade {\n            type: any;\n            bootstrap: Function[];\n            declarations: Function[];\n            imports: Function[];\n            exports: Function[];\n            emitInline: boolean;\n    }\n    export interface R3InjectorMetadataFacade {\n            name: string;\n            type: any;\n            deps: R3DependencyMetadataFacade[] | null;\n            providers: any;\n            imports: any;\n    }\n    export interface R3DirectiveMetadataFacade {\n            name: string;\n            type: any;\n            typeArgumentCount: number;\n            typeSourceSpan: null;\n            deps: R3DependencyMetadataFacade[] | null;\n            selector: string | null;\n            queries: R3QueryMetadataFacade[];\n            host: {\n                    [key: string]: string;\n            };\n            propMetadata: {\n                    [key: string]: any[];\n            };\n            lifecycle: {\n                    usesOnChanges: boolean;\n            };\n            inputs: string[];\n            outputs: string[];\n            usesInheritance: boolean;\n            exportAs: string | null;\n            providers: Provider[] | null;\n    }\n    export interface R3ComponentMetadataFacade extends R3DirectiveMetadataFacade {\n            template: string;\n            preserveWhitespaces: boolean;\n            animations: any[] | undefined;\n            viewQueries: R3QueryMetadataFacade[];\n            pipes: Map<string, any>;\n            directives: Map<string, any>;\n            styles: string[];\n            encapsulation: ViewEncapsulation;\n            viewProviders: Provider[] | null;\n    }\n    export type ViewEncapsulation = number;\n    export interface R3QueryMetadataFacade {\n            propertyName: string;\n            first: boolean;\n            predicate: any | string[];\n            descendants: boolean;\n            read: any | null;\n    }\n}\n\ndeclare module '@angular/core/src/render3/interfaces/view' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { InjectionToken } from '@angular/core/src/di/injection_token';\n    import { Injector } from '@angular/core/src/di/injector';\n    import { QueryList } from '@angular/core/src/linker';\n    import { Sanitizer } from '@angular/core/src/sanitization/security';\n    import { Type } from '@angular/core/src/type';\n    import { LContainer } from '@angular/core/src/render3/interfaces/container';\n    import { ComponentDef, ComponentQuery, ComponentTemplate, DirectiveDef, DirectiveDefList, HostBindingsFunction, PipeDef, PipeDefList } from '@angular/core/src/render3/interfaces/definition';\n    import { I18nUpdateOpCodes, TI18n } from '@angular/core/src/render3/interfaces/i18n';\n    import { TElementNode, TNode, TViewNode } from '@angular/core/src/render3/interfaces/node';\n    import { PlayerHandler } from '@angular/core/src/render3/interfaces/player';\n    import { LQueries } from '@angular/core/src/render3/interfaces/query';\n    import { RElement, Renderer3 } from '@angular/core/src/render3/interfaces/renderer';\n    import { StylingContext } from '@angular/core/src/render3/interfaces/styling';\n    /** Size of LViewData's header. Necessary to adjust for it when setting slots.  */\n    export const HEADER_OFFSET = 17;\n    export const TVIEW = 0;\n    export const FLAGS = 1;\n    export const PARENT = 2;\n    export const NEXT = 3;\n    export const QUERIES = 4;\n    export const HOST = 5;\n    export const HOST_NODE = 6;\n    export const BINDING_INDEX = 7;\n    export const CLEANUP = 8;\n    export const CONTEXT = 9;\n    export const INJECTOR = 10;\n    export const RENDERER = 11;\n    export const SANITIZER = 12;\n    export const TAIL = 13;\n    export const CONTAINER_INDEX = 14;\n    export const CONTENT_QUERIES = 15;\n    export const DECLARATION_VIEW = 16;\n    export interface OpaqueViewState {\n            '__brand__': 'Brand for OpaqueViewState that nothing will match';\n    }\n    /**\n        * `LViewData` stores all of the information needed to process the instructions as\n        * they are invoked from the template. Each embedded view and component view has its\n        * own `LViewData`. When processing a particular view, we set the `viewData` to that\n        * `LViewData`. When that view is done processing, the `viewData` is set back to\n        * whatever the original `viewData` was before (the parent `LViewData`).\n        *\n        * Keeping separate state for each view facilities view insertion / deletion, so we\n        * don't have to edit the data array based on which views are present.\n        */\n    export interface LViewData extends Array<any> {\n            /**\n                * The static data for this view. We need a reference to this so we can easily walk up the\n                * node tree in DI and get the TView.data array associated with a node (where the\n                * directive defs are stored).\n                */\n            readonly [TVIEW]: TView;\n            /** Flags for this view. See LViewFlags for more info. */\n            [FLAGS]: LViewFlags;\n            /**\n                * The parent view is needed when we exit the view and must restore the previous\n                * `LViewData`. Without this, the render method would have to keep a stack of\n                * views as it is recursively rendering templates.\n                *\n                * This is the \"insertion\" view for embedded views. This allows us to properly\n                * destroy embedded views.\n                */\n            [PARENT]: LViewData | null;\n            /**\n                *\n                * The next sibling LViewData or LContainer.\n                *\n                * Allows us to propagate between sibling view states that aren't in the same\n                * container. Embedded views already have a node.next, but it is only set for\n                * views in the same container. We need a way to link component views and views\n                * across containers as well.\n                */\n            [NEXT]: LViewData | LContainer | null;\n            /** Queries active for this view - nodes from a view are reported to those queries. */\n            [QUERIES]: LQueries | null;\n            /**\n                * The host node for this LViewData instance, if this is a component view.\n                *\n                * If this is an embedded view, HOST will be null.\n                */\n            [HOST]: RElement | StylingContext | null;\n            /**\n                * Pointer to the `TViewNode` or `TElementNode` which represents the root of the view.\n                *\n                * If `TViewNode`, this is an embedded view of a container. We need this to be able to\n                * efficiently find the `LViewNode` when inserting the view into an anchor.\n                *\n                * If `TElementNode`, this is the LView of a component.\n                *\n                * If null, this is the root view of an application (root component is in this view).\n                */\n            [HOST_NODE]: TViewNode | TElementNode | null;\n            /**\n                * The binding index we should access next.\n                *\n                * This is stored so that bindings can continue where they left off\n                * if a view is left midway through processing bindings (e.g. if there is\n                * a setter that creates an embedded view, like in ngIf).\n                */\n            [BINDING_INDEX]: number;\n            /**\n                * When a view is destroyed, listeners need to be released and outputs need to be\n                * unsubscribed. This context array stores both listener functions wrapped with\n                * their context and output subscription instances for a particular view.\n                *\n                * These change per LView instance, so they cannot be stored on TView. Instead,\n                * TView.cleanup saves an index to the necessary context in this array.\n                */\n            [CLEANUP]: any[] | null;\n            /**\n                * - For dynamic views, this is the context with which to render the template (e.g.\n                *   `NgForContext`), or `{}` if not defined explicitly.\n                * - For root view of the root component the context contains change detection data.\n                * - For non-root components, the context is the component instance,\n                * - For inline views, the context is null.\n                */\n            [CONTEXT]: {} | RootContext | null;\n            /** An optional Module Injector to be used as fall back after Element Injectors are consulted. */\n            readonly [INJECTOR]: Injector | null;\n            /** Renderer to be used for this view. */\n            [RENDERER]: Renderer3;\n            /** An optional custom sanitizer. */\n            [SANITIZER]: Sanitizer | null;\n            /**\n                * The last LViewData or LContainer beneath this LViewData in the hierarchy.\n                *\n                * The tail allows us to quickly add a new state to the end of the view list\n                * without having to propagate starting from the first child.\n                */\n            [TAIL]: LViewData | LContainer | null;\n            /**\n                * The index of the parent container's host node. Applicable only to embedded views that\n                * have been inserted dynamically. Will be -1 for component views and inline views.\n                *\n                * This is necessary to jump from dynamically created embedded views to their parent\n                * containers because their parent cannot be stored on the TViewNode (views may be inserted\n                * in multiple containers, so the parent cannot be shared between view instances).\n                */\n            [CONTAINER_INDEX]: number;\n            /**\n                * Stores QueryLists associated with content queries of a directive. This data structure is\n                * filled-in as part of a directive creation process and is later used to retrieve a QueryList to\n                * be refreshed.\n                */\n            [CONTENT_QUERIES]: QueryList<any>[] | null;\n            /**\n                * View where this view's template was declared.\n                *\n                * Only applicable for dynamically created views. Will be null for inline/component views.\n                *\n                * The template for a dynamically created view may be declared in a different view than\n                * it is inserted. We already track the \"insertion view\" (view where the template was\n                * inserted) in LViewData[PARENT], but we also need access to the \"declaration view\"\n                * (view where the template was declared). Otherwise, we wouldn't be able to call the\n                * view's template function with the proper contexts. Context should be inherited from\n                * the declaration view tree, not the insertion view tree.\n                *\n                * Example (AppComponent template):\n                *\n                * <ng-template #foo></ng-template>       <-- declared here -->\n                * <some-comp [tpl]=\"foo\"></some-comp>    <-- inserted inside this component -->\n                *\n                * The <ng-template> above is declared in the AppComponent template, but it will be passed into\n                * SomeComp and inserted there. In this case, the declaration view would be the AppComponent,\n                * but the insertion view would be SomeComp. When we are removing views, we would want to\n                * traverse through the insertion view to clean up listeners. When we are calling the\n                * template function during change detection, we need the declaration view to get inherited\n                * context.\n                */\n            [DECLARATION_VIEW]: LViewData | null;\n    }\n    /** Flags associated with an LView (saved in LViewData[FLAGS]) */\n    export const enum LViewFlags {\n            /**\n                * Whether or not the view is in creationMode.\n                *\n                * This must be stored in the view rather than using `data` as a marker so that\n                * we can properly support embedded views. Otherwise, when exiting a child view\n                * back into the parent view, `data` will be defined and `creationMode` will be\n                * improperly reported as false.\n                */\n            CreationMode = 1,\n            /** Whether this view has default change detection strategy (checks always) or onPush */\n            CheckAlways = 2,\n            /** Whether or not this view is currently dirty (needing check) */\n            Dirty = 4,\n            /** Whether or not this view is currently attached to change detection tree. */\n            Attached = 8,\n            /**\n                *  Whether or not the init hooks have run.\n                *\n                * If on, the init hooks haven't yet been run and should be executed by the first component that\n                * runs OR the first cR() instruction that runs (so inits are run for the top level view before\n                * any embedded views).\n                */\n            RunInit = 16,\n            /** Whether or not this view is destroyed. */\n            Destroyed = 32,\n            /** Whether or not this view is the root view */\n            IsRoot = 64\n    }\n    /**\n        * The static data for an LView (shared between all templates of a\n        * given type).\n        *\n        * Stored on the template function as ngPrivateData.\n        */\n    export interface TView {\n            /**\n                * ID for inline views to determine whether a view is the same as the previous view\n                * in a certain position. If it's not, we know the new view needs to be inserted\n                * and the one that exists needs to be removed (e.g. if/else statements)\n                *\n                * If this is -1, then this is a component view or a dynamically created view.\n                */\n            readonly id: number;\n            /**\n                * This is a blueprint used to generate LViewData instances for this TView. Copying this\n                * blueprint is faster than creating a new LViewData from scratch.\n                */\n            blueprint: LViewData;\n            /**\n                * The template function used to refresh the view of dynamically created views\n                * and components. Will be null for inline views.\n                */\n            template: ComponentTemplate<{}> | null;\n            /**\n                * A function containing query-related instructions.\n                */\n            viewQuery: ComponentQuery<{}> | null;\n            /**\n                * Pointer to the `TNode` that represents the root of the view.\n                *\n                * If this is a `TNode` for an `LViewNode`, this is an embedded view of a container.\n                * We need this pointer to be able to efficiently find this node when inserting the view\n                * into an anchor.\n                *\n                * If this is a `TElementNode`, this is the view of a root component. It has exactly one\n                * root TNode.\n                *\n                * If this is null, this is the view of a component that is not at root. We do not store\n                * the host TNodes for child component views because they can potentially have several\n                * different host TNodes, depending on where the component is being used. These host\n                * TNodes cannot be shared (due to different indices, etc).\n                */\n            node: TViewNode | TElementNode | null;\n            /** Whether or not this template has been processed. */\n            firstTemplatePass: boolean;\n            /** Static data equivalent of LView.data[]. Contains TNodes, PipeDefInternal or TI18n. */\n            data: TData;\n            /**\n                * The binding start index is the index at which the data array\n                * starts to store bindings only. Saving this value ensures that we\n                * will begin reading bindings at the correct point in the array when\n                * we are in update mode.\n                */\n            bindingStartIndex: number;\n            /**\n                * The index where the \"expando\" section of `LViewData` begins. The expando\n                * section contains injectors, directive instances, and host binding values.\n                * Unlike the \"consts\" and \"vars\" sections of `LViewData`, the length of this\n                * section cannot be calculated at compile-time because directives are matched\n                * at runtime to preserve locality.\n                *\n                * We store this start index so we know where to start checking host bindings\n                * in `setHostBindings`.\n                */\n            expandoStartIndex: number;\n            /**\n                * Index of the host node of the first LView or LContainer beneath this LView in\n                * the hierarchy.\n                *\n                * Necessary to store this so views can traverse through their nested views\n                * to remove listeners and call onDestroy callbacks.\n                *\n                * For embedded views, we store the index of an LContainer's host rather than the first\n                * LView to avoid managing splicing when views are added/removed.\n                */\n            childIndex: number;\n            /**\n                * A reference to the first child node located in the view.\n                */\n            firstChild: TNode | null;\n            /**\n                * Set of instructions used to process host bindings efficiently.\n                *\n                * See VIEW_DATA.md for more information.\n                */\n            expandoInstructions: (number | HostBindingsFunction)[] | null;\n            /**\n                * Full registry of directives and components that may be found in this view.\n                *\n                * It's necessary to keep a copy of the full def list on the TView so it's possible\n                * to render template functions without a host component.\n                */\n            directiveRegistry: DirectiveDefList | null;\n            /**\n                * Full registry of pipes that may be found in this view.\n                *\n                * The property is either an array of `PipeDefs`s or a function which returns the array of\n                * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n                *\n                * It's necessary to keep a copy of the full def list on the TView so it's possible\n                * to render template functions without a host component.\n                */\n            pipeRegistry: PipeDefList | null;\n            /**\n                * Array of ngOnInit and ngDoCheck hooks that should be executed for this view in\n                * creation mode.\n                *\n                * Even indices: Directive index\n                * Odd indices: Hook function\n                */\n            initHooks: HookData | null;\n            /**\n                * Array of ngDoCheck hooks that should be executed for this view in update mode.\n                *\n                * Even indices: Directive index\n                * Odd indices: Hook function\n                */\n            checkHooks: HookData | null;\n            /**\n                * Array of ngAfterContentInit and ngAfterContentChecked hooks that should be executed\n                * for this view in creation mode.\n                *\n                * Even indices: Directive index\n                * Odd indices: Hook function\n                */\n            contentHooks: HookData | null;\n            /**\n                * Array of ngAfterContentChecked hooks that should be executed for this view in update\n                * mode.\n                *\n                * Even indices: Directive index\n                * Odd indices: Hook function\n                */\n            contentCheckHooks: HookData | null;\n            /**\n                * Array of ngAfterViewInit and ngAfterViewChecked hooks that should be executed for\n                * this view in creation mode.\n                *\n                * Even indices: Directive index\n                * Odd indices: Hook function\n                */\n            viewHooks: HookData | null;\n            /**\n                * Array of ngAfterViewChecked hooks that should be executed for this view in\n                * update mode.\n                *\n                * Even indices: Directive index\n                * Odd indices: Hook function\n                */\n            viewCheckHooks: HookData | null;\n            /**\n                * Array of ngOnDestroy hooks that should be executed when this view is destroyed.\n                *\n                * Even indices: Directive index\n                * Odd indices: Hook function\n                */\n            destroyHooks: HookData | null;\n            /**\n                * Array of pipe ngOnDestroy hooks that should be executed when this view is destroyed.\n                *\n                * Even indices: Index of pipe in data\n                * Odd indices: Hook function\n                *\n                * These must be stored separately from directive destroy hooks because their contexts\n                * are stored in data.\n                */\n            pipeDestroyHooks: HookData | null;\n            /**\n                * When a view is destroyed, listeners need to be released and outputs need to be\n                * unsubscribed. This cleanup array stores both listener data (in chunks of 4)\n                * and output data (in chunks of 2) for a particular view. Combining the arrays\n                * saves on memory (70 bytes per array) and on a few bytes of code size (for two\n                * separate for loops).\n                *\n                * If it's a native DOM listener being stored:\n                * 1st index is: event name to remove\n                * 2nd index is: index of native element in LView.data[]\n                * 3rd index is: index of wrapped listener function in LView.cleanupInstances[]\n                * 4th index is: useCapture boolean\n                *\n                * If it's a renderer2 style listener or ViewRef destroy hook being stored:\n                * 1st index is: index of the cleanup function in LView.cleanupInstances[]\n                * 2nd index is: null\n                *\n                * If it's an output subscription or query list destroy hook:\n                * 1st index is: output unsubscribe function / query list destroy function\n                * 2nd index is: index of function context in LView.cleanupInstances[]\n                */\n            cleanup: any[] | null;\n            /**\n                * A list of element indices for child components that will need to be\n                * refreshed when the current view has finished its check. These indices have\n                * already been adjusted for the HEADER_OFFSET.\n                *\n                */\n            components: number[] | null;\n            /**\n                * A list of indices for child directives that have content queries.\n                *\n                * Even indices: Directive indices\n                * Odd indices: Starting index of content queries (stored in CONTENT_QUERIES) for this directive\n                */\n            contentQueries: number[] | null;\n    }\n    export const enum RootContextFlags {\n            Empty = 0,\n            DetectChanges = 1,\n            FlushPlayers = 2\n    }\n    /**\n        * RootContext contains information which is shared for all components which\n        * were bootstrapped with {@link renderComponent}.\n        */\n    export interface RootContext {\n            /**\n                * A function used for scheduling change detection in the future. Usually\n                * this is `requestAnimationFrame`.\n                */\n            scheduler: (workFn: () => void) => void;\n            /**\n                * A promise which is resolved when all components are considered clean (not dirty).\n                *\n                * This promise is overwritten every time a first call to {@link markDirty} is invoked.\n                */\n            clean: Promise<null>;\n            /**\n                * RootComponents - The components that were instantiated by the call to\n                * {@link renderComponent}.\n                */\n            components: {}[];\n            /**\n                * The player flushing handler to kick off all animations\n                */\n            playerHandler: PlayerHandler | null;\n            /**\n                * What render-related operations to run once a scheduler has been set\n                */\n            flags: RootContextFlags;\n    }\n    /**\n        * Array of hooks that should be executed for a view and their directive indices.\n        *\n        * Even indices: Directive index\n        * Odd indices: Hook function\n        */\n    export type HookData = (number | (() => void))[];\n    /**\n        * Static data that corresponds to the instance-specific data array on an LView.\n        *\n        * Each node's static data is stored in tData at the same index that it's stored\n        * in the data array.  Any nodes that do not have static data store a null value in\n        * tData to avoid a sparse array.\n        *\n        * Each pipe's definition is stored here at the same index as its pipe instance in\n        * the data array.\n        *\n        * Injector bloom filters are also stored here.\n        */\n    export type TData = (TNode | PipeDef<any> | DirectiveDef<any> | ComponentDef<any> | number | Type<any> | InjectionToken<any> | TI18n | I18nUpdateOpCodes | null)[];\n    export const unusedValueExportToPlacateAjd = 1;\n}\n\ndeclare module '@angular/core/src/render3/interfaces/renderer' {\n    /**\n        * The goal here is to make sure that the browser DOM API is the Renderer.\n        * We do this by defining a subset of DOM API to be the renderer and than\n        * use that time for rendering.\n        *\n        * At runtime we can than use the DOM api directly, in server or web-worker\n        * it will be easy to implement such API.\n        */\n    import { RendererStyleFlags2, RendererType2 } from '@angular/core/src/render/api';\n    export enum RendererStyleFlags3 {\n            Important = 1,\n            DashCase = 2\n    }\n    export type Renderer3 = ObjectOrientedRenderer3 | ProceduralRenderer3;\n    /**\n        * Object Oriented style of API needed to create elements and text nodes.\n        *\n        * This is the native browser API style, e.g. operations are methods on individual objects\n        * like HTMLElement. With this style, no additional code is needed as a facade\n        * (reducing payload size).\n        * */\n    export interface ObjectOrientedRenderer3 {\n            createComment(data: string): RComment;\n            createElement(tagName: string): RElement;\n            createElementNS(namespace: string, tagName: string): RElement;\n            createTextNode(data: string): RText;\n            querySelector(selectors: string): RElement | null;\n    }\n    /** Returns whether the `renderer` is a `ProceduralRenderer3` */\n    export function isProceduralRenderer(renderer: ProceduralRenderer3 | ObjectOrientedRenderer3): renderer is ProceduralRenderer3;\n    /**\n        * Procedural style of API needed to create elements and text nodes.\n        *\n        * In non-native browser environments (e.g. platforms such as web-workers), this is the\n        * facade that enables element manipulation. This also facilitates backwards compatibility\n        * with Renderer2.\n        */\n    export interface ProceduralRenderer3 {\n            destroy(): void;\n            createComment(value: string): RComment;\n            createElement(name: string, namespace?: string | null): RElement;\n            createText(value: string): RText;\n            /**\n                * This property is allowed to be null / undefined,\n                * in which case the view engine won't call it.\n                * This is used as a performance optimization for production mode.\n                */\n            destroyNode?: ((node: RNode) => void) | null;\n            appendChild(parent: RElement, newChild: RNode): void;\n            insertBefore(parent: RNode, newChild: RNode, refChild: RNode | null): void;\n            removeChild(parent: RElement, oldChild: RNode): void;\n            selectRootElement(selectorOrNode: string | any): RElement;\n            parentNode(node: RNode): RElement | null;\n            nextSibling(node: RNode): RNode | null;\n            setAttribute(el: RElement, name: string, value: string, namespace?: string | null): void;\n            removeAttribute(el: RElement, name: string, namespace?: string | null): void;\n            addClass(el: RElement, name: string): void;\n            removeClass(el: RElement, name: string): void;\n            setStyle(el: RElement, style: string, value: any, flags?: RendererStyleFlags2 | RendererStyleFlags3): void;\n            removeStyle(el: RElement, style: string, flags?: RendererStyleFlags2 | RendererStyleFlags3): void;\n            setProperty(el: RElement, name: string, value: any): void;\n            setValue(node: RText, value: string): void;\n            listen(target: RNode, eventName: string, callback: (event: any) => boolean | void): () => void;\n    }\n    export interface RendererFactory3 {\n            createRenderer(hostElement: RElement | null, rendererType: RendererType2 | null): Renderer3;\n            begin?(): void;\n            end?(): void;\n    }\n    export const domRendererFactory3: RendererFactory3;\n    /** Subset of API needed for appending elements and text nodes. */\n    export interface RNode {\n            parentNode: RNode | null;\n            nextSibling: RNode | null;\n            removeChild(oldChild: RNode): void;\n            /**\n                * Insert a child node.\n                *\n                * Used exclusively for adding View root nodes into ViewAnchor location.\n                */\n            insertBefore(newChild: RNode, refChild: RNode | null, isViewRoot: boolean): void;\n            /**\n                * Append a child node.\n                *\n                * Used exclusively for building up DOM which are static (ie not View roots)\n                */\n            appendChild(newChild: RNode): RNode;\n    }\n    /**\n        * Subset of API needed for writing attributes, properties, and setting up\n        * listeners on Element.\n        */\n    export interface RElement extends RNode {\n            style: RCssStyleDeclaration;\n            classList: RDomTokenList;\n            className: string;\n            setAttribute(name: string, value: string): void;\n            removeAttribute(name: string): void;\n            setAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void;\n            addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\n            removeEventListener(type: string, listener?: EventListener, options?: boolean): void;\n            setProperty?(name: string, value: any): void;\n    }\n    export interface RCssStyleDeclaration {\n            removeProperty(propertyName: string): string;\n            setProperty(propertyName: string, value: string | null, priority?: string): void;\n    }\n    export interface RDomTokenList {\n            add(token: string): void;\n            remove(token: string): void;\n    }\n    export interface RText extends RNode {\n            textContent: string | null;\n    }\n    export interface RComment extends RNode {\n    }\n    export const unusedValueExportToPlacateAjd = 1;\n}\n\ndeclare module '@angular/core/src/render3/view_ref' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { ApplicationRef } from '@angular/core/src/application_ref';\n    import { ChangeDetectorRef as viewEngine_ChangeDetectorRef } from '@angular/core/src/change_detection/change_detector_ref';\n    import { ViewContainerRef as viewEngine_ViewContainerRef } from '@angular/core/src/linker/view_container_ref';\n    import { EmbeddedViewRef as viewEngine_EmbeddedViewRef, InternalViewRef as viewEngine_InternalViewRef } from '@angular/core/src/linker/view_ref';\n    import { LViewData } from '@angular/core/src/render3/interfaces/view';\n    export interface viewEngine_ChangeDetectorRef_interface extends viewEngine_ChangeDetectorRef {\n    }\n    export class ViewRef<T> implements viewEngine_EmbeddedViewRef<T>, viewEngine_InternalViewRef, viewEngine_ChangeDetectorRef_interface {\n            readonly rootNodes: any[];\n            constructor(_view: LViewData, _context: T | null, _componentIndex: number);\n            readonly context: T;\n            readonly destroyed: boolean;\n            destroy(): void;\n            onDestroy(callback: Function): void;\n            /**\n                * Marks a view and all of its ancestors dirty.\n                *\n                * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n                * multiple `markForCheck` calls to into one change detection run.\n                *\n                * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n                * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n                * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n                *\n                * <!-- TODO: Add a link to a chapter on OnPush components -->\n                *\n                * @usageNotes\n                * ### Example\n                *\n                * ```typescript\n                * @Component({\n                *   selector: 'my-app',\n                *   template: `Number of ticks: {{numberOfTicks}}`\n                *   changeDetection: ChangeDetectionStrategy.OnPush,\n                * })\n                * class AppComponent {\n                *   numberOfTicks = 0;\n                *\n                *   constructor(private ref: ChangeDetectorRef) {\n                *     setInterval(() => {\n                *       this.numberOfTicks++;\n                *       // the following is required, otherwise the view will not be updated\n                *       this.ref.markForCheck();\n                *     }, 1000);\n                *   }\n                * }\n                * ```\n                */\n            markForCheck(): void;\n            /**\n                * Detaches the view from the change detection tree.\n                *\n                * Detached views will not be checked during change detection runs until they are\n                * re-attached, even if they are dirty. `detach` can be used in combination with\n                * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n                * detection checks.\n                *\n                * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n                * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n                *\n                * @usageNotes\n                * ### Example\n                *\n                * The following example defines a component with a large list of readonly data.\n                * Imagine the data changes constantly, many times per second. For performance reasons,\n                * we want to check and update the list every five seconds. We can do that by detaching\n                * the component's change detector and doing a local check every five seconds.\n                *\n                * ```typescript\n                * class DataProvider {\n                *   // in a real application the returned data will be different every time\n                *   get data() {\n                *     return [1,2,3,4,5];\n                *   }\n                * }\n                *\n                * @Component({\n                *   selector: 'giant-list',\n                *   template: `\n                *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n                *   `,\n                * })\n                * class GiantList {\n                *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n                *     ref.detach();\n                *     setInterval(() => {\n                *       this.ref.detectChanges();\n                *     }, 5000);\n                *   }\n                * }\n                *\n                * @Component({\n                *   selector: 'app',\n                *   providers: [DataProvider],\n                *   template: `\n                *     <giant-list><giant-list>\n                *   `,\n                * })\n                * class App {\n                * }\n                * ```\n                */\n            detach(): void;\n            /**\n                * Re-attaches a view to the change detection tree.\n                *\n                * This can be used to re-attach views that were previously detached from the tree\n                * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n                *\n                * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n                *\n                * @usageNotes\n                * ### Example\n                *\n                * The following example creates a component displaying `live` data. The component will detach\n                * its change detector from the main change detector tree when the component's live property\n                * is set to false.\n                *\n                * ```typescript\n                * class DataProvider {\n                *   data = 1;\n                *\n                *   constructor() {\n                *     setInterval(() => {\n                *       this.data = this.data * 2;\n                *     }, 500);\n                *   }\n                * }\n                *\n                * @Component({\n                *   selector: 'live-data',\n                *   inputs: ['live'],\n                *   template: 'Data: {{dataProvider.data}}'\n                * })\n                * class LiveData {\n                *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n                *\n                *   set live(value) {\n                *     if (value) {\n                *       this.ref.reattach();\n                *     } else {\n                *       this.ref.detach();\n                *     }\n                *   }\n                * }\n                *\n                * @Component({\n                *   selector: 'my-app',\n                *   providers: [DataProvider],\n                *   template: `\n                *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n                *     <live-data [live]=\"live\"><live-data>\n                *   `,\n                * })\n                * class AppComponent {\n                *   live = true;\n                * }\n                * ```\n                */\n            reattach(): void;\n            /**\n                * Checks the view and its children.\n                *\n                * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n                * local change detection checks.\n                *\n                * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n                * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n                *\n                * @usageNotes\n                * ### Example\n                *\n                * The following example defines a component with a large list of readonly data.\n                * Imagine, the data changes constantly, many times per second. For performance reasons,\n                * we want to check and update the list every five seconds.\n                *\n                * We can do that by detaching the component's change detector and doing a local change detection\n                * check every five seconds.\n                *\n                * See {@link ChangeDetectorRef#detach detach} for more information.\n                */\n            detectChanges(): void;\n            /**\n                * Checks the change detector and its children, and throws if any changes are detected.\n                *\n                * This is used in development mode to verify that running change detection doesn't\n                * introduce other changes.\n                */\n            checkNoChanges(): void;\n            attachToViewContainerRef(vcRef: viewEngine_ViewContainerRef): void;\n            detachFromAppRef(): void;\n            attachToAppRef(appRef: ApplicationRef): void;\n    }\n}\n\ndeclare module '@angular/core/src/render3/interfaces/injector' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { InjectionToken } from '@angular/core/src/di/injection_token';\n    import { InjectFlags } from '@angular/core/src/di/injector_compatibility';\n    import { Type } from '@angular/core/src/type';\n    import { TElementNode } from '@angular/core/src/render3/interfaces/node';\n    import { LViewData, TData } from '@angular/core/src/render3/interfaces/view';\n    export const TNODE = 8;\n    export const PARENT_INJECTOR = 8;\n    export const INJECTOR_SIZE = 9;\n    /**\n        * Represents a relative location of parent injector.\n        *\n        * The interfaces encodes number of parents `LViewData`s to traverse and index in the `LViewData`\n        * pointing to the parent injector.\n        */\n    export interface RelativeInjectorLocation {\n            __brand__: 'RelativeInjectorLocationFlags';\n    }\n    export const enum RelativeInjectorLocationFlags {\n            InjectorIndexMask = 32767,\n            AcrossHostBoundary = 32768,\n            ViewOffsetShift = 16,\n            NO_PARENT = -1\n    }\n    export const NO_PARENT_INJECTOR: RelativeInjectorLocation;\n    /**\n     * Factory for creating instances of injectors in the NodeInjector.\n     *\n     * This factory is complicated by the fact that it can resolve `multi` factories as well.\n     *\n     * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n     * - One without `multi` support (most common)\n     * - One with `multi` values, (rare).\n     *\n     * Since VMs can cache up to 4 inline hidden classes this is OK.\n     *\n     * - Single factory: Only `resolving` and `factory` is defined.\n     * - `providers` factory: `componentProviders` is a number and `index = -1`.\n     * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n     */\n    export class NodeInjectorFactory {\n            /**\n                * Factory to invoke in order to create a new instance.\n                */\n            factory: (this: NodeInjectorFactory, _: null, \n            /**\n                * array where injectables tokens are stored. This is used in\n                * case of an error reporting to produce friendlier errors.\n                */\n            tData: TData, \n            /**\n                * array where existing instances of injectables are stored. This is used in case\n                * of multi shadow is needed. See `multi` field documentation.\n                */\n            lData: LViewData, \n            /**\n                * The TNode of the same element injector.\n                */\n            tNode: TElementNode) => any;\n            /**\n                * The inject implementation to be activated when using the factory.\n                */\n            injectImpl: null | (<T>(token: Type<T> | InjectionToken<T>, flags: InjectFlags) => T);\n            /**\n                * Marker set to true during factory invocation to see if we get into recursive loop.\n                * Recursive loop causes an error to be displayed.\n                */\n            resolving: boolean;\n            /**\n                * Marks that the token can see other Tokens declared in `viewProviders` on the same node.\n                */\n            canSeeViewProviders: boolean;\n            /**\n                * An array of factories to use in case of `multi` provider.\n                */\n            multi?: Array<() => any>;\n            /**\n                * Number of `multi`-providers which belong to the component.\n                *\n                * This is needed because when multiple components and directives declare the `multi` provider\n                * they have to be concatenated in the correct order.\n                *\n                * Example:\n                *\n                * If we have a component and directive active an a single element as declared here\n                * ```\n                * component:\n                *   provides: [ {provide: String, useValue: 'component', multi: true} ],\n                *   viewProvides: [ {provide: String, useValue: 'componentView', multi: true} ],\n                *\n                * directive:\n                *   provides: [ {provide: String, useValue: 'directive', multi: true} ],\n                * ```\n                *\n                * Then the expected results are:\n                *\n                * ```\n                * providers: ['component', 'directive']\n                * viewProviders: ['component', 'componentView', 'directive']\n                * ```\n                *\n                * The way to think about it is that the `viewProviders` have been inserted after the component\n                * but before the directives, which is why we need to know how many `multi`s have been declared by\n                * the component.\n                */\n            componentProviders?: number;\n            /**\n                * Current index of the Factory in the `data`. Needed for `viewProviders` and `providers` merging.\n                * See `providerFactory`.\n                */\n            index?: number;\n            /**\n                * Because the same `multi` provider can be declared in `provides` and `viewProvides` it is\n                * possible for `viewProvides` to shadow the `provides`. For this reason we store the\n                * `provideFactory` of the `providers` so that `providers` can be extended with `viewProviders`.\n                *\n                * Example:\n                *\n                * Given:\n                * ```\n                * provides: [ {provide: String, useValue: 'all', multi: true} ],\n                * viewProvides: [ {provide: String, useValue: 'viewOnly', multi: true} ],\n                * ```\n                *\n                * We have to return `['all']` in case of content injection, but `['all', 'viewOnly']` in case\n                * of view injection. We further have to make sure that the shared instances (in our case\n                * `all`) are the exact same instance in both the content as well as the view injection. (We\n                * have to make sure that we don't double instantiate.) For this reason the `viewProvides`\n                * `Factory` has a pointer to the shadowed `provides` factory so that it can instantiate the\n                * `providers` (`['all']`) and then extend it with `viewProviders` (`['all'] + ['viewOnly'] =\n                * ['all', 'viewOnly']`).\n                */\n            providerFactory?: NodeInjectorFactory | null;\n            constructor(\n            /**\n                * Factory to invoke in order to create a new instance.\n                */\n            factory: (this: NodeInjectorFactory, _: null, \n            /**\n                * array where injectables tokens are stored. This is used in\n                * case of an error reporting to produce friendlier errors.\n                */\n            tData: TData, \n            /**\n                * array where existing instances of injectables are stored. This is used in case\n                * of multi shadow is needed. See `multi` field documentation.\n                */\n            lData: LViewData, \n            /**\n                * The TNode of the same element injector.\n                */\n            tNode: TElementNode) => any, \n            /**\n                * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n                */\n            isViewProvider: boolean, injectImplementation: null | (<T>(token: Type<T> | InjectionToken<T>, flags: InjectFlags) => T));\n    }\n    export function isFactory(obj: any): obj is NodeInjectorFactory;\n    export const unusedValueExportToPlacateAjd = 1;\n}\n\ndeclare module '@angular/core/src/render3/interfaces/container' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { LQueries } from '@angular/core/src/render3/interfaces/query';\n    import { RComment, RElement } from '@angular/core/src/render3/interfaces/renderer';\n    import { StylingContext } from '@angular/core/src/render3/interfaces/styling';\n    import { HOST, LViewData, NEXT, PARENT, QUERIES } from '@angular/core/src/render3/interfaces/view';\n    /**\n        * Below are constants for LContainer indices to help us look up LContainer members\n        * without having to remember the specific indices.\n        * Uglify will inline these when minifying so there shouldn't be a cost.\n        */\n    export const ACTIVE_INDEX = 0;\n    export const VIEWS = 1;\n    export const NATIVE = 6;\n    export const RENDER_PARENT = 7;\n    /**\n        * The state associated with a container.\n        *\n        * This is an array so that its structure is closer to LViewData. This helps\n        * when traversing the view tree (which is a mix of containers and component\n        * views), so we can jump to viewOrContainer[NEXT] in the same way regardless\n        * of type.\n        */\n    export interface LContainer extends Array<any> {\n            /**\n                * The next active index in the views array to read or write to. This helps us\n                * keep track of where we are in the views array.\n                * In the case the LContainer is created for a ViewContainerRef,\n                * it is set to null to identify this scenario, as indices are \"absolute\" in that case,\n                * i.e. provided directly by the user of the ViewContainerRef API.\n                */\n            [ACTIVE_INDEX]: number;\n            /**\n                * A list of the container's currently active child views. Views will be inserted\n                * here as they are added and spliced from here when they are removed. We need\n                * to keep a record of current views so we know which views are already in the DOM\n                * (and don't need to be re-added) and so we can remove views from the DOM when they\n                * are no longer required.\n                */\n            [VIEWS]: LViewData[];\n            /**\n                * Access to the parent view is necessary so we can propagate back\n                * up from inside a container to parent[NEXT].\n                */\n            [PARENT]: LViewData | null;\n            /**\n                * This allows us to jump from a container to a sibling container or component\n                * view with the same parent, so we can remove listeners efficiently.\n                */\n            [NEXT]: LViewData | LContainer | null;\n            /**\n                * Queries active for this container - all the views inserted to / removed from\n                * this container are reported to queries referenced here.\n                */\n            [QUERIES]: LQueries | null;\n            /**\n                * The host element of this LContainer.\n                *\n                * The host could be an LViewData if this container is on a component node.\n                * In that case, the component LViewData is its HOST.\n                *\n                * It could also be a styling context if this is a node with a style/class\n                * binding.\n                */\n            [HOST]: RElement | RComment | StylingContext | LViewData;\n            /** The comment element that serves as an anchor for this LContainer. */\n            [NATIVE]: RComment;\n            /**\n                * Parent Element which will contain the location where all of the views will be\n                * inserted into to.\n                *\n                * If `renderParent` is `null` it is headless. This means that it is contained\n                * in another view which in turn is contained in another container and\n                * therefore it does not yet have its own parent.\n                *\n                * If `renderParent` is not `null` then it may be:\n                * - same as `tContainerNode.parent` in which case it is just a normal container.\n                * - different from `tContainerNode.parent` in which case it has been re-projected.\n                *   In other words `tContainerNode.parent` is logical parent where as\n                *   `tContainerNode.projectedParent` is render parent.\n                *\n                * When views are inserted into `LContainer` then `renderParent` is:\n                * - `null`, we are in a view, keep going up a hierarchy until actual\n                *   `renderParent` is found.\n                * - not `null`, then use the `projectedParent.native` as the `RElement` to insert\n                * views into.\n                */\n            [RENDER_PARENT]: RElement | null;\n    }\n    export const unusedValueExportToPlacateAjd = 1;\n}\n\ndeclare module '@angular/core/src/render3/interfaces/query' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { QueryList } from '@angular/core/src/linker';\n    import { Type } from '@angular/core/src/type';\n    import { TContainerNode, TElementContainerNode, TElementNode } from '@angular/core/src/render3/interfaces/node';\n    /** Used for tracking queries (e.g. ViewChild, ContentChild). */\n    export interface LQueries {\n            /**\n                * The parent LQueries instance.\n                *\n                * When there is a content query, a new LQueries instance is created to avoid mutating any\n                * existing LQueries. After we are done searching content children, the parent property allows\n                * us to traverse back up to the original LQueries instance to continue to search for matches\n                * in the main view.\n                */\n            parent: LQueries | null;\n            /**\n                * Ask queries to prepare copy of itself. This assures that tracking new queries on content nodes\n                * doesn't mutate list of queries tracked on a parent node. We will clone LQueries before\n                * constructing content queries.\n                */\n            clone(): LQueries;\n            /**\n                * Notify `LQueries` that a new `TNode` has been created and needs to be added to query results\n                * if matching query predicate.\n                */\n            addNode(tNode: TElementNode | TContainerNode | TElementContainerNode): LQueries | null;\n            /**\n                * Notify `LQueries` that a new LContainer was added to ivy data structures. As a result we need\n                * to prepare room for views that might be inserted into this container.\n                */\n            container(): LQueries | null;\n            /**\n                * Notify `LQueries` that a new `LView` has been created. As a result we need to prepare room\n                * and collect nodes that match query predicate.\n                */\n            createView(): LQueries | null;\n            /**\n                * Notify `LQueries` that a new `LView` has been added to `LContainer`. As a result all\n                * the matching nodes from this view should be added to container's queries.\n                */\n            insertView(newViewIndex: number): void;\n            /**\n                * Notify `LQueries` that an `LView` has been removed from `LContainer`. As a result all\n                * the matching nodes from this view should be removed from container's queries.\n                */\n            removeView(): void;\n            /**\n                * Add additional `QueryList` to track.\n                *\n                * @param queryList `QueryList` to update with changes.\n                * @param predicate Either `Type` or selector array of [key, value] predicates.\n                * @param descend If true the query will recursively apply to the children.\n                * @param read Indicates which token should be read from DI for this query.\n                */\n            track<T>(queryList: QueryList<T>, predicate: Type<any> | string[], descend?: boolean, read?: Type<T>): void;\n    }\n    export const unusedValueExportToPlacateAjd = 1;\n}\n\ndeclare module '@angular/core/src/render3/interfaces/sanitization' {\n    /**\n        * Function used to sanitize the value before writing it into the renderer.\n        */\n    export type SanitizerFn = (value: any) => string;\n}\n\ndeclare module '@angular/core/src/render3/interfaces/styling' {\n    /**\n        * @license\n        * Copyright Google Inc. All Rights Reserved.\n        *\n        * Use of this source code is governed by an MIT-style license that can be\n        * found in the LICENSE file at https://angular.io/license\n        */\n    import { StyleSanitizeFn } from '@angular/core/src/sanitization/style_sanitizer';\n    import { RElement } from '@angular/core/src/render3/interfaces/renderer';\n    import { PlayerContext } from '@angular/core/src/render3/interfaces/player';\n    /**\n        * The styling context acts as a styling manifest (shaped as an array) for determining which\n        * styling properties have been assigned via the provided `updateStylingMap`, `updateStyleProp`\n        * and `updateClassProp` functions. There are also two initialization functions\n        * `allocStylingContext` and `createStylingContextTemplate` which are used to initialize\n        * and/or clone the context.\n        *\n        * The context is an array where the first two cells are used for static data (initial styling)\n        * and dirty flags / index offsets). The remaining set of cells is used for multi (map) and single\n        * (prop) style values.\n        *\n        * each value from here onwards is mapped as so:\n        * [i] = mutation/type flag for the style/class value\n        * [i + 1] = prop string (or null incase it has been removed)\n        * [i + 2] = value string (or null incase it has been removed)\n        *\n        * There are three types of styling types stored in this context:\n        *   initial: any styles that are passed in once the context is created\n        *            (these are stored in the first cell of the array and the first\n        *             value of this array is always `null` even if no initial styling exists.\n        *             the `null` value is there so that any new styles have a parent to point\n        *             to. This way we can always assume that there is a parent.)\n        *\n        *   single: any styles that are updated using `updateStyleProp` or `updateClassProp` (fixed set)\n        *\n        *   multi: any styles that are updated using `updateStylingMap` (dynamic set)\n        *\n        * Note that context is only used to collect style information. Only when `renderStyling`\n        * is called is when the styling payload will be rendered (or built as a key/value map).\n        *\n        * When the context is created, depending on what initial styling values are passed in, the\n        * context itself will be pre-filled with slots based on the initial style properties. Say\n        * for example we have a series of initial styles that look like so:\n        *\n        *   style=\"width:100px; height:200px;\"\n        *   class=\"foo\"\n        *\n        * Then the initial state of the context (once initialized) will look like so:\n        *\n        * ```\n        * context = [\n        *   element,\n        *   playerContext | null,\n        *   styleSanitizer | null,\n        *   [null, '100px', '200px', true],  // property names are not needed since they have already been\n        * written to DOM.\n        *\n        *   configMasterVal,\n        *   1, // this instructs how many `style` values there are so that class index values can be\n        * offsetted\n        *   { classOne: true, classTwo: false } | 'classOne classTwo' | null // last class value provided\n        * into updateStylingMap\n        *   { styleOne: '100px', styleTwo: 0 } | null // last style value provided into updateStylingMap\n        *\n        *   // 8\n        *   'width',\n        *   pointers(1, 15);  // Point to static `width`: `100px` and multi `width`.\n        *   null,\n        *\n        *   // 11\n        *   'height',\n        *   pointers(2, 18); // Point to static `height`: `200px` and multi `height`.\n        *   null,\n        *\n        *   // 14\n        *   'foo',\n        *   pointers(1, 21);  // Point to static `foo`: `true` and multi `foo`.\n        *   null,\n        *\n        *   // 17\n        *   'width',\n        *   pointers(1, 6);  // Point to static `width`: `100px` and single `width`.\n        *   null,\n        *\n        *   // 21\n        *   'height',\n        *   pointers(2, 9);  // Point to static `height`: `200px` and single `height`.\n        *   null,\n        *\n        *   // 24\n        *   'foo',\n        *   pointers(3, 12);  // Point to static `foo`: `true` and single `foo`.\n        *   null,\n        * ]\n        *\n        * function pointers(staticIndex: number, dynamicIndex: number) {\n        *   // combine the two indices into a single word.\n        *   return (staticIndex << StylingFlags.BitCountSize) |\n        *     (dynamicIndex << (StylingIndex.BitCountSize + StylingFlags.BitCountSize));\n        * }\n        * ```\n        *\n        * The values are duplicated so that space is set aside for both multi ([style] and [class])\n        * and single ([style.prop] or [class.named]) values. The respective config values\n        * (configValA, configValB, etc...) are a combination of the StylingFlags with two index\n        * values: the `initialIndex` (which points to the index location of the style value in\n        * the initial styles array in slot 0) and the `dynamicIndex` (which points to the\n        * matching single/multi index position in the context array for the same prop).\n        *\n        * This means that every time `updateStyleProp` or `updateClassProp` are called then they\n        * must be called using an index value (not a property string) which references the index\n        * value of the initial style prop/class when the context was created. This also means that\n        * `updateStyleProp` or `updateClassProp` cannot be called with a new property (only\n        * `updateStylingMap` can include new CSS properties that will be added to the context).\n        */\n    export interface StylingContext extends Array<InitialStyles | {\n            [key: string]: any;\n    } | number | string | boolean | RElement | StyleSanitizeFn | PlayerContext | null> {\n            /**\n                * Location of animation context (which contains the active players) for this element styling\n                * context.\n                */\n            [StylingIndex.PlayerContext]: PlayerContext | null;\n            /**\n                * The style sanitizer that is used within this context\n                */\n            [StylingIndex.StyleSanitizerPosition]: StyleSanitizeFn | null;\n            /**\n                * Location of initial data shared by all instances of this style.\n                */\n            [StylingIndex.InitialStylesPosition]: InitialStyles;\n            /**\n                * A numeric value representing the configuration status (whether the context is dirty or not)\n                * mixed together (using bit shifting) with a index value which tells the starting index value\n                * of where the multi style entries begin.\n                */\n            [StylingIndex.MasterFlagPosition]: number;\n            /**\n                * A numeric value representing the class index offset value. Whenever a single class is\n                * applied (using `elementClassProp`) it should have an styling index value that doesn't\n                * need to take into account any style values that exist in the context.\n                */\n            [StylingIndex.ClassOffsetPosition]: number;\n            /**\n                * Location of element that is used as a target for this context.\n                */\n            [StylingIndex.ElementPosition]: RElement | null;\n            /**\n                * The last class value that was interpreted by elementStylingMap. This is cached\n                * So that the algorithm can exit early incase the value has not changed.\n                */\n            [StylingIndex.PreviousOrCachedMultiClassValue]: {\n                    [key: string]: any;\n            } | string | null;\n            /**\n                * The last style value that was interpreted by elementStylingMap. This is cached\n                * So that the algorithm can exit early incase the value has not changed.\n                */\n            [StylingIndex.PreviousMultiStyleValue]: {\n                    [key: string]: any;\n            } | null;\n    }\n    /**\n        * The initial styles is populated whether or not there are any initial styles passed into\n        * the context during allocation. The 0th value must be null so that index values of `0` within\n        * the context flags can always point to a null value safely when nothing is set.\n        *\n        * All other entries in this array are of `string` value and correspond to the values that\n        * were extracted from the `style=\"\"` attribute in the HTML code for the provided template.\n        */\n    export interface InitialStyles extends Array<string | null | boolean> {\n            [0]: null;\n    }\n    /**\n        * Used to set the context to be dirty or not both on the master flag (position 1)\n        * or for each single/multi property that exists in the context.\n        */\n    export const enum StylingFlags {\n            None = 0,\n            Dirty = 1,\n            Class = 2,\n            Sanitize = 4,\n            PlayerBuildersDirty = 8,\n            OnlyProcessSingleClasses = 16,\n            BitCountSize = 5,\n            BitMask = 31\n    }\n    /** Used as numeric pointer values to determine what cells to update in the `StylingContext` */\n    export const enum StylingIndex {\n            PlayerContext = 0,\n            StyleSanitizerPosition = 1,\n            InitialStylesPosition = 2,\n            MasterFlagPosition = 3,\n            ClassOffsetPosition = 4,\n            ElementPosition = 5,\n            PreviousOrCachedMultiClassValue = 6,\n            PreviousMultiStyleValue = 7,\n            SingleStylesStartPosition = 8,\n            FlagsOffset = 0,\n            PropertyOffset = 1,\n            ValueOffset = 2,\n            PlayerBuilderIndexOffset = 3,\n            Size = 4,\n            BitCountSize = 14,\n            BitMask = 16383\n    }\n}\n\ndeclare module '@angular/core/src/render3/interfaces/i18n' {\n    /**\n        * `I18nMutateOpCode` defines OpCodes for `I18nMutateOpCodes` array.\n        *\n        * OpCodes contain three parts:\n        *  1) Parent node index offset.\n        *  2) Reference node index offset.\n        *  3) The OpCode to execute.\n        *\n        * See: `I18nCreateOpCodes` for example of usage.\n        */\n    import { SanitizerFn } from '@angular/core/src/render3/interfaces/sanitization';\n    export const enum I18nMutateOpCode {\n            SHIFT_REF = 3,\n            SHIFT_PARENT = 17,\n            MASK_OPCODE = 7,\n            MASK_REF = 136,\n            Select = 0,\n            AppendChild = 1,\n            InsertBefore = 2,\n            Remove = 3,\n            Attr = 4,\n            ElementEnd = 5,\n            RemoveNestedIcu = 6\n    }\n    /**\n        * Marks that the next string is for element.\n        *\n        * See `I18nMutateOpCodes` documentation.\n        */\n    export const ELEMENT_MARKER: ELEMENT_MARKER;\n    export interface ELEMENT_MARKER {\n            marker: 'element';\n    }\n    /**\n        * Marks that the next string is for comment.\n        *\n        * See `I18nMutateOpCodes` documentation.\n        */\n    export const COMMENT_MARKER: COMMENT_MARKER;\n    export interface COMMENT_MARKER {\n            marker: 'comment';\n    }\n    /**\n        * Array storing OpCode for dynamically creating `i18n` blocks.\n        *\n        * Example:\n        * ```\n        * <I18nCreateOpCode>[\n        *   // For adding text nodes\n        *   // ---------------------\n        *   // Equivalent to:\n        *   //   const node = lViewData[index++] = document.createTextNode('abc');\n        *   //   lViewData[1].insertBefore(node, lViewData[2]);\n        *   'abc', 1 << SHIFT_PARENT | 2 << SHIFT_REF | InsertBefore,\n        *\n        *   // Equivalent to:\n        *   //   const node = lViewData[index++] = document.createTextNode('xyz');\n        *   //   lViewData[1].appendChild(node);\n        *   'xyz', 1 << SHIFT_PARENT | AppendChild,\n        *\n        *   // For adding element nodes\n        *   // ---------------------\n        *   // Equivalent to:\n        *   //   const node = lViewData[index++] = document.createElement('div');\n        *   //   lViewData[1].insertBefore(node, lViewData[2]);\n        *   ELEMENT_MARKER, 'div', 1 << SHIFT_PARENT | 2 << SHIFT_REF | InsertBefore,\n        *\n        *   // Equivalent to:\n        *   //   const node = lViewData[index++] = document.createElement('div');\n        *   //   lViewData[1].appendChild(node);\n        *   ELEMENT_MARKER, 'div', 1 << SHIFT_PARENT | AppendChild,\n        *\n        *   // For adding comment nodes\n        *   // ---------------------\n        *   // Equivalent to:\n        *   //   const node = lViewData[index++] = document.createComment('');\n        *   //   lViewData[1].insertBefore(node, lViewData[2]);\n        *   COMMENT_MARKER, '', 1 << SHIFT_PARENT | 2 << SHIFT_REF | InsertBefore,\n        *\n        *   // Equivalent to:\n        *   //   const node = lViewData[index++] = document.createComment('');\n        *   //   lViewData[1].appendChild(node);\n        *   COMMENT_MARKER, '', 1 << SHIFT_PARENT | AppendChild,\n        *\n        *   // For moving existing nodes to a different location\n        *   // --------------------------------------------------\n        *   // Equivalent to:\n        *   //   const node = lViewData[1];\n        *   //   lViewData[2].insertBefore(node, lViewData[3]);\n        *   1 << SHIFT_REF | Select, 2 << SHIFT_PARENT | 3 << SHIFT_REF | InsertBefore,\n        *\n        *   // Equivalent to:\n        *   //   const node = lViewData[1];\n        *   //   lViewData[2].appendChild(node);\n        *   1 << SHIFT_REF | Select, 2 << SHIFT_PARENT | AppendChild,\n        *\n        *   // For removing existing nodes\n        *   // --------------------------------------------------\n        *   //   const node = lViewData[1];\n        *   //   removeChild(tView.data(1), node, lViewData);\n        *   1 << SHIFT_REF | Remove,\n        *\n        *   // For writing attributes\n        *   // --------------------------------------------------\n        *   //   const node = lViewData[1];\n        *   //   node.setAttribute('attr', 'value');\n        *   1 << SHIFT_REF | Select, 'attr', 'value'\n        *            // NOTE: Select followed by two string (vs select followed by OpCode)\n        * ];\n        * ```\n        * NOTE:\n        *   - `index` is initial location where the extra nodes should be stored in the EXPANDO section of\n        * `LVIewData`.\n        *\n        * See: `applyI18nCreateOpCodes`;\n        */\n    export interface I18nMutateOpCodes extends Array<number | string | ELEMENT_MARKER | COMMENT_MARKER | null> {\n    }\n    export const enum I18nUpdateOpCode {\n            SHIFT_REF = 2,\n            SHIFT_ICU = 17,\n            MASK_OPCODE = 3,\n            MASK_REF = 68,\n            Text = 0,\n            Attr = 1,\n            IcuSwitch = 2,\n            IcuUpdate = 3\n    }\n    /**\n        * Stores DOM operations which need to be applied to update DOM render tree due to changes in\n        * expressions.\n        *\n        * The basic idea is that `i18nExp` OpCodes capture expression changes and update a change\n        * mask bit. (Bit 1 for expression 1, bit 2 for expression 2 etc..., bit 32 for expression 32 and\n        * higher.) The OpCodes then compare its own change mask against the expression change mask to\n        * determine if the OpCodes should execute.\n        *\n        * These OpCodes can be used by both the i18n block as well as ICU sub-block.\n        *\n        * ## Example\n        *\n        * Assume\n        * ```\n        *   if (rf & RenderFlags.Update) {\n        *    i18nExp(bind(ctx.exp1)); // If changed set mask bit 1\n        *    i18nExp(bind(ctx.exp2)); // If changed set mask bit 2\n        *    i18nExp(bind(ctx.exp3)); // If changed set mask bit 3\n        *    i18nExp(bind(ctx.exp4)); // If changed set mask bit 4\n        *    i18nApply(0);            // Apply all changes by executing the OpCodes.\n        *  }\n        * ```\n        * We can assume that each call to `i18nExp` sets an internal `changeMask` bit depending on the\n        * index of `i18nExp`.\n        *\n        * OpCodes\n        * ```\n        * <I18nUpdateOpCodes>[\n        *   // The following OpCodes represent: `<div i18n-title=\"pre{{exp1}}in{{exp2}}post\">`\n        *   // If `changeMask & 0b11`\n        *   //        has changed then execute update OpCodes.\n        *   //        has NOT changed then skip `7` values and start processing next OpCodes.\n        *   0b11, 7,\n        *   // Concatenate `newValue = 'pre'+lViewData[bindIndex-4]+'in'+lViewData[bindIndex-3]+'post';`.\n        *   'pre', -4, 'in', -3, 'post',\n        *   // Update attribute: `elementAttribute(1, 'title', sanitizerFn(newValue));`\n        *   1 << SHIFT_REF | Attr, 'title', sanitizerFn,\n        *\n        *   // The following OpCodes represent: `<div i18n>Hello {{exp3}}!\">`\n        *   // If `changeMask & 0b100`\n        *   //        has changed then execute update OpCodes.\n        *   //        has NOT changed then skip `4` values and start processing next OpCodes.\n        *   0b100, 4,\n        *   // Concatenate `newValue = 'Hello ' + lViewData[bindIndex -2] + '!';`.\n        *   'Hello ', -2, '!',\n        *   // Update text: `lViewData[1].textContent = newValue;`\n        *   1 << SHIFT_REF | Text,\n        *\n        *   // The following OpCodes represent: `<div i18n>{exp4, plural, ... }\">`\n        *   // If `changeMask & 0b1000`\n        *   //        has changed then execute update OpCodes.\n        *   //        has NOT changed then skip `4` values and start processing next OpCodes.\n        *   0b1000, 4,\n        *   // Concatenate `newValue = lViewData[bindIndex -1];`.\n        *   -1,\n        *   // Switch ICU: `icuSwitchCase(lViewData[1], 0, newValue);`\n        *   0 << SHIFT_ICU | 1 << SHIFT_REF | IcuSwitch,\n        *\n        *   // Note `changeMask & -1` is always true, so the IcuUpdate will always execute.\n        *   -1, 1,\n        *   // Update ICU: `icuUpdateCase(lViewData[1], 0);`\n        *   0 << SHIFT_ICU | 1 << SHIFT_REF | IcuUpdate,\n        *\n        * ];\n        * ```\n        *\n        */\n    export interface I18nUpdateOpCodes extends Array<string | number | SanitizerFn | null> {\n    }\n    /**\n        * Store information for the i18n translation block.\n        */\n    export interface TI18n {\n            /**\n                * Number of slots to allocate in expando.\n                *\n                * This is the max number of DOM elements which will be created by this i18n + ICU blocks. When\n                * the DOM elements are being created they are stored in the EXPANDO, so that update OpCodes can\n                * write into them.\n                */\n            vars: number;\n            /**\n                * Index in EXPANDO where the i18n stores its DOM nodes.\n                *\n                * When the bindings are processed by the `i18nEnd` instruction it is necessary to know where the\n                * newly created DOM nodes will be inserted.\n                */\n            expandoStartIndex: number;\n            /**\n                * A set of OpCodes which will create the Text Nodes and ICU anchors for the translation blocks.\n                *\n                * NOTE: The ICU anchors are filled in with ICU Update OpCode.\n                */\n            create: I18nMutateOpCodes;\n            /**\n                * A set of OpCodes which will be executed on each change detection to determine if any changes to\n                * DOM are required.\n                */\n            update: I18nUpdateOpCodes;\n            /**\n                * A list of ICUs in a translation block (or `null` if block has no ICUs).\n                *\n                * Example:\n                * Given: `<div i18n>You have {count, plural, ...} and {state, switch, ...}</div>`\n                * There would be 2 ICUs in this array.\n                *   1. `{count, plural, ...}`\n                *   2. `{state, switch, ...}`\n                */\n            icus: TIcu[] | null;\n    }\n    /**\n        * Defines the ICU type of `select` or `plural`\n        */\n    export const enum IcuType {\n            select = 0,\n            plural = 1\n    }\n    export interface TIcu {\n            /**\n                * Defines the ICU type of `select` or `plural`\n                */\n            type: IcuType;\n            /**\n                * Number of slots to allocate in expando for each case.\n                *\n                * This is the max number of DOM elements which will be created by this i18n + ICU blocks. When\n                * the DOM elements are being created they are stored in the EXPANDO, so that update OpCodes can\n                * write into them.\n                */\n            vars: number[];\n            /**\n                * An optional array of child/sub ICUs.\n                *\n                * In case of nested ICUs such as:\n                * ```\n                * {�0�, plural,\n                *   =0 {zero}\n                *   other {�0� {�1�, select,\n                *                     cat {cats}\n                *                     dog {dogs}\n                *                     other {animals}\n                *                   }!\n                *   }\n                * }\n                * ```\n                * When the parent ICU is changing it must clean up child ICUs as well. For this reason it needs\n                * to know which child ICUs to run clean up for as well.\n                *\n                * In the above example this would be:\n                * ```\n                * [\n                *   [],   // `=0` has no sub ICUs\n                *   [1],  // `other` has one subICU at `1`st index.\n                * ]\n                * ```\n                *\n                * The reason why it is Array of Arrays is because first array represents the case, and second\n                * represents the child ICUs to clean up. There may be more than one child ICUs per case.\n                */\n            childIcus: number[][];\n            /**\n                * Index in EXPANDO where the i18n stores its DOM nodes.\n                *\n                * When the bindings are processed by the `i18nEnd` instruction it is necessary to know where the\n                * newly created DOM nodes will be inserted.\n                */\n            expandoStartIndex: number;\n            /**\n                * A list of case values which the current ICU will try to match.\n                *\n                * The last value is `other`\n                */\n            cases: any[];\n            /**\n                * A set of OpCodes to apply in order to build up the DOM render tree for the ICU\n                */\n            create: I18nMutateOpCodes[];\n            /**\n                * A set of OpCodes to apply in order to destroy the DOM render tree for the ICU.\n                */\n            remove: I18nMutateOpCodes[];\n            /**\n                * A set of OpCodes to apply in order to update the DOM render tree for the ICU bindings.\n                */\n            update: I18nUpdateOpCodes[];\n    }\n    export const unusedValueExportToPlacateAjd = 1;\n}\n\n"
  },
  {
    "path": "node_modules/@angular/core/core.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { APPLICATION_MODULE_PROVIDERS as ɵangular_packages_core_core_p, _iterableDiffersFactory as ɵangular_packages_core_core_m, _keyValueDiffersFactory as ɵangular_packages_core_core_n, _localeFactory as ɵangular_packages_core_core_o } from './src/application_module';\nexport { _appIdRandomProviderFactory as ɵangular_packages_core_core_g } from './src/application_tokens';\nexport { DefaultIterableDifferFactory as ɵangular_packages_core_core_k } from './src/change_detection/differs/default_iterable_differ';\nexport { DefaultKeyValueDifferFactory as ɵangular_packages_core_core_l } from './src/change_detection/differs/default_keyvalue_differ';\nexport { injectInjectorOnly as ɵangular_packages_core_core_c } from './src/di/injector_compatibility';\nexport { ReflectiveInjector_ as ɵangular_packages_core_core_d } from './src/di/reflective_injector';\nexport { ReflectiveDependency as ɵangular_packages_core_core_e, resolveReflectiveProviders as ɵangular_packages_core_core_f } from './src/di/reflective_provider';\nexport { wtfEnabled as ɵangular_packages_core_core_q } from './src/profile/profile';\nexport { createScope as ɵangular_packages_core_core_s, detectWTF as ɵangular_packages_core_core_r, endTimeRange as ɵangular_packages_core_core_v, leave as ɵangular_packages_core_core_t, startTimeRange as ɵangular_packages_core_core_u } from './src/profile/wtf_impl';\nexport { injectAttributeImpl as ɵangular_packages_core_core_z } from './src/render3/di';\nexport { NG_INJECTABLE_DEF as ɵangular_packages_core_core_bh } from './src/render3/fields';\nexport { bindingUpdated as ɵangular_packages_core_core_ba } from './src/render3/instructions';\nexport { TElementNode as ɵangular_packages_core_core_be } from './src/render3/interfaces/node';\nexport { PlayerFactoryBuildFn as ɵangular_packages_core_core_bf } from './src/render3/interfaces/player';\nexport { LViewData as ɵangular_packages_core_core_bj } from './src/render3/interfaces/view';\nexport { getPreviousOrParentTNode as ɵangular_packages_core_core_bb, getViewData as ɵangular_packages_core_core_bc, nextContextImpl as ɵangular_packages_core_core_bd } from './src/render3/state';\nexport { BoundPlayerFactory as ɵangular_packages_core_core_bg } from './src/render3/styling/player_factory';\nexport { loadInternal as ɵangular_packages_core_core_bk } from './src/render3/util';\nexport { createElementRef as ɵangular_packages_core_core_h, createTemplateRef as ɵangular_packages_core_core_i, createViewRef as ɵangular_packages_core_core_j } from './src/render3/view_engine_compatibility';\nexport { makeParamDecorator as ɵangular_packages_core_core_a, makePropDecorator as ɵangular_packages_core_core_b } from './src/util/decorators';\nexport { getClosureSafeProperty as ɵangular_packages_core_core_bi } from './src/util/property';\nexport { _def as ɵangular_packages_core_core_w } from './src/view/provider';\nexport { DebugRendererFactory2 as ɵangular_packages_core_core_x } from './src/view/services';\nexport { DebugContext as ɵangular_packages_core_core_y } from './src/view/types';\n"
  },
  {
    "path": "node_modules/@angular/core/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/core/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/core';\n"
  },
  {
    "path": "node_modules/@angular/core/src/application_init.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from './di';\n/**\n * A function that will be executed when an application is initialized.\n *\n * @publicApi\n */\nexport declare const APP_INITIALIZER: InjectionToken<(() => void)[]>;\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER}s.\n *\n * @publicApi\n */\nexport declare class ApplicationInitStatus {\n    private appInits;\n    private resolve;\n    private reject;\n    private initialized;\n    readonly donePromise: Promise<any>;\n    readonly done = false;\n    constructor(appInits: (() => any)[]);\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/application_module.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef } from './application_ref';\nimport { IterableDiffers, KeyValueDiffers } from './change_detection/change_detection';\nimport { StaticProvider } from './di';\nexport declare function _iterableDiffersFactory(): IterableDiffers;\nexport declare function _keyValueDiffersFactory(): KeyValueDiffers;\nexport declare function _localeFactory(locale?: string): string;\n/**\n * A built-in [dependency injection token](guide/glossary#di-token)\n * that is used to configure the root injector for bootstrapping.\n */\nexport declare const APPLICATION_MODULE_PROVIDERS: StaticProvider[];\n/**\n * Configures the root injector for an app with\n * providers of `@angular/core` dependencies that `ApplicationRef` needs\n * to bootstrap components.\n *\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * @publicApi\n */\nexport declare class ApplicationModule {\n    constructor(appRef: ApplicationRef);\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/application_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { InjectionToken, Injector, StaticProvider } from './di';\nimport { CompilerOptions } from './linker/compiler';\nimport { ComponentFactory, ComponentRef } from './linker/component_factory';\nimport { NgModuleFactory, NgModuleRef } from './linker/ng_module_factory';\nimport { ViewRef } from './linker/view_ref';\nimport { Type } from './type';\nimport { NgZone } from './zone/ng_zone';\nexport declare function compileNgModuleFactory__POST_R3__<M>(injector: Injector, options: CompilerOptions, moduleType: Type<M>): Promise<NgModuleFactory<M>>;\nexport declare const ALLOW_MULTIPLE_PLATFORMS: InjectionToken<boolean>;\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * @publicApi\n */\nexport declare class NgProbeToken {\n    name: string;\n    token: any;\n    constructor(name: string, token: any);\n}\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * @publicApi\n */\nexport declare function createPlatform(injector: Injector): PlatformRef;\n/**\n * Creates a factory for a platform\n *\n * @publicApi\n */\nexport declare function createPlatformFactory(parentPlatformFactory: ((extraProviders?: StaticProvider[]) => PlatformRef) | null, name: string, providers?: StaticProvider[]): (extraProviders?: StaticProvider[]) => PlatformRef;\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * @publicApi\n */\nexport declare function assertPlatform(requiredToken: any): PlatformRef;\n/**\n * Destroy the existing platform.\n *\n * @publicApi\n */\nexport declare function destroyPlatform(): void;\n/**\n * Returns the current platform.\n *\n * @publicApi\n */\nexport declare function getPlatform(): PlatformRef | null;\n/**\n * Provides additional options to the bootstraping process.\n *\n *\n */\nexport interface BootstrapOptions {\n    /**\n     * Optionally specify which `NgZone` should be used.\n     *\n     * - Provide your own `NgZone` instance.\n     * - `zone.js` - Use default `NgZone` which requires `Zone.js`.\n     * - `noop` - Use `NoopNgZone` which does nothing.\n     */\n    ngZone?: NgZone | 'zone.js' | 'noop';\n}\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {@link platformBrowser}), or explicitly by calling the {@link createPlatform} function.\n *\n * @publicApi\n */\nexport declare class PlatformRef {\n    private _injector;\n    private _modules;\n    private _destroyListeners;\n    private _destroyed;\n    /**\n     * Creates an instance of an `@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     */\n    bootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>, options?: BootstrapOptions): Promise<NgModuleRef<M>>;\n    /**\n     * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     */\n    bootstrapModule<M>(moduleType: Type<M>, compilerOptions?: (CompilerOptions & BootstrapOptions) | Array<CompilerOptions & BootstrapOptions>): Promise<NgModuleRef<M>>;\n    private _moduleDoBootstrap;\n    /**\n     * Register a listener to be called when the platform is disposed.\n     */\n    onDestroy(callback: () => void): void;\n    /**\n     * Retrieve the platform {@link Injector}, which is the parent injector for\n     * every Angular application on the page and provides singleton providers.\n     */\n    readonly injector: Injector;\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     */\n    destroy(): void;\n    readonly destroyed: boolean;\n}\n/**\n * A reference to an Angular application running on a page.\n *\n * @publicApi\n */\nexport declare class ApplicationRef {\n    private _zone;\n    private _console;\n    private _injector;\n    private _exceptionHandler;\n    private _componentFactoryResolver;\n    private _initStatus;\n    private _bootstrapListeners;\n    private _views;\n    private _runningTick;\n    private _enforceNoNewChanges;\n    private _stable;\n    /**\n     * Get a list of component types registered to this application.\n     * This list is populated even before the component is created.\n     */\n    readonly componentTypes: Type<any>[];\n    /**\n     * Get a list of components registered to this application.\n     */\n    readonly components: ComponentRef<any>[];\n    /**\n     * Returns an Observable that indicates when the application is stable or unstable.\n     */\n    readonly isStable: Observable<boolean>;\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * @usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {@example core/ts/platform/platform.ts region='longform'}\n     */\n    bootstrap<C>(componentOrFactory: ComponentFactory<C> | Type<C>, rootSelectorOrNode?: string | any): ComponentRef<C>;\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     */\n    tick(): void;\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     */\n    attachView(viewRef: ViewRef): void;\n    /**\n     * Detaches a view from dirty checking again.\n     */\n    detachView(viewRef: ViewRef): void;\n    private _loadComponent;\n    private _unloadComponent;\n    /**\n     * Returns the number of attached views.\n     */\n    readonly viewCount: number;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/application_tokens.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from './di';\nimport { ComponentRef } from './linker/component_factory';\n/**\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n * using this token.\n * @publicApi\n */\nexport declare const APP_ID: InjectionToken<string>;\nexport declare function _appIdRandomProviderFactory(): string;\n/**\n * Providers that will generate a random APP_ID_TOKEN.\n * @publicApi\n */\nexport declare const APP_ID_RANDOM_PROVIDER: {\n    provide: InjectionToken<string>;\n    useFactory: typeof _appIdRandomProviderFactory;\n    deps: any[];\n};\n/**\n * A function that will be executed when a platform is initialized.\n * @publicApi\n */\nexport declare const PLATFORM_INITIALIZER: InjectionToken<(() => void)[]>;\n/**\n * A token that indicates an opaque platform id.\n * @publicApi\n */\nexport declare const PLATFORM_ID: InjectionToken<Object>;\n/**\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * @publicApi\n */\nexport declare const APP_BOOTSTRAP_LISTENER: InjectionToken<((compRef: ComponentRef<any>) => void)[]>;\n/**\n * A token which indicates the root directory of the application\n * @publicApi\n */\nexport declare const PACKAGE_ROOT_URL: InjectionToken<string>;\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Change detection enables data binding in Angular.\n */\nexport { ChangeDetectionStrategy, ChangeDetectorRef, CollectionChangeRecord, DefaultIterableDiffer, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, IterableDiffers, KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory, KeyValueDiffers, NgIterable, PipeTransform, SimpleChange, SimpleChanges, TrackByFunction, WrappedValue } from './change_detection/change_detection';\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection/change_detection_util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare function devModeEqual(a: any, b: any): boolean;\n/**\n * Indicates that the result of a {@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n * @publicApi\n */\nexport declare class WrappedValue {\n    /** @deprecated from 5.3, use `unwrap()` instead - will switch to protected */\n    wrapped: any;\n    constructor(value: any);\n    /** Creates a wrapped value. */\n    static wrap(value: any): WrappedValue;\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     **/\n    static unwrap(value: any): any;\n    /** Returns true if `value` is a wrapped value. */\n    static isWrapped(value: any): value is WrappedValue;\n}\n/**\n * Represents a basic change from a previous to a new value.\n *\n * @publicApi\n */\nexport declare class SimpleChange {\n    previousValue: any;\n    currentValue: any;\n    firstChange: boolean;\n    constructor(previousValue: any, currentValue: any, firstChange: boolean);\n    /**\n     * Check whether the new value is the first value assigned.\n     */\n    isFirstChange(): boolean;\n}\nexport declare function isListLikeIterable(obj: any): boolean;\nexport declare function areIterablesEqual(a: any, b: any, comparator: (a: any, b: any) => boolean): boolean;\nexport declare function iterateListLike(obj: any, fn: (p: any) => any): void;\nexport declare function isJsObject(o: any): boolean;\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection/change_detection.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { IterableDiffers } from './differs/iterable_differs';\nimport { KeyValueDiffers } from './differs/keyvalue_differs';\nexport { SimpleChanges } from '../metadata/lifecycle_hooks';\nexport { SimpleChange, WrappedValue, devModeEqual } from './change_detection_util';\nexport { ChangeDetectorRef } from './change_detector_ref';\nexport { ChangeDetectionStrategy, ChangeDetectorStatus, isDefaultChangeDetectionStrategy } from './constants';\nexport { DefaultIterableDifferFactory } from './differs/default_iterable_differ';\nexport { DefaultIterableDiffer } from './differs/default_iterable_differ';\nexport { DefaultKeyValueDifferFactory } from './differs/default_keyvalue_differ';\nexport { CollectionChangeRecord, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, IterableDiffers, NgIterable, TrackByFunction } from './differs/iterable_differs';\nexport { KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory, KeyValueDiffers } from './differs/keyvalue_differs';\nexport { PipeTransform } from './pipe_transform';\nexport declare const defaultIterableDiffers: IterableDiffers;\nexport declare const defaultKeyValueDiffers: KeyValueDiffers;\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection/change_detector_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectChangeDetectorRef as render3InjectChangeDetectorRef } from '../render3/view_engine_compatibility';\n/**\n * Base class for Angular Views, provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.\n *\n * @usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * @publicApi\n */\nexport declare abstract class ChangeDetectorRef {\n    /**\n     * When a view uses the {@link ChangeDetectionStrategy#OnPush OnPush} (checkOnce)\n     * change detection strategy, explicitly marks the view as changed so that\n     * it can be checked again.\n     *\n     * Components are normally marked as dirty (in need of rerendering) when inputs\n     * have changed or events have fired in the view. Call this method to ensure that\n     * a component is checked even if these triggers have not occured.\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     */\n    abstract markForCheck(): void;\n    /**\n     * Detaches this view from the change-detection tree.\n     * A detached view is  not checked until it is reattached.\n     * Use in combination with `detectChanges()` to implement local change detection checks.\n     *\n     * Detached views are not checked during change detection runs until they are\n     * re-attached, even if they are marked as dirty.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     */\n    abstract detach(): void;\n    /**\n     * Checks this view and its children. Use in combination with {@link ChangeDetectorRef#detach\n     * detach}\n     * to implement local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     */\n    abstract detectChanges(): void;\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * Use in development mode to verify that running change detection doesn't introduce\n     * other changes.\n     */\n    abstract checkNoChanges(): void;\n    /**\n     * Re-attaches the previously detached view to the change detection tree.\n     * Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     */\n    abstract reattach(): void;\n}\nexport declare const SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__: typeof render3InjectChangeDetectorRef;\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection/constants.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n * @publicApi\n */\nexport declare enum ChangeDetectionStrategy {\n    /**\n     * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n     * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n     * Change detection can still be explictly invoked.\n     */\n    OnPush = 0,\n    /**\n     * Use the default `CheckAlways` strategy, in which change detection is automatic until\n     * explicitly deactivated.\n     */\n    Default = 1\n}\n/**\n * Defines the possible states of the default change detector.\n * @see `ChangeDetectorRef`\n */\nexport declare enum ChangeDetectorStatus {\n    /**\n     * A state in which, after calling `detectChanges()`, the change detector\n     * state becomes `Checked`, and must be explicitly invoked or reactivated.\n     */\n    CheckOnce = 0,\n    /**\n     * A state in which change detection is skipped until the change detector mode\n     * becomes `CheckOnce`.\n     */\n    Checked = 1,\n    /**\n     * A state in which change detection continues automatically until explictly\n     * deactivated.\n     */\n    CheckAlways = 2,\n    /**\n     * A state in which a change detector sub tree is not a part of the main tree and\n     * should be skipped.\n     */\n    Detached = 3,\n    /**\n     * Indicates that the change detector encountered an error checking a binding\n     * or calling a directive lifecycle method and is now in an inconsistent state. Change\n     * detectors in this state do not detect changes.\n     */\n    Errored = 4,\n    /**\n     * Indicates that the change detector has been destroyed.\n     */\n    Destroyed = 5\n}\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @param changeDetectionStrategy The strategy to check.\n * @returns True if the given strategy is the current default, false otherwise.\n * @see `ChangeDetectorStatus`\n * @see `ChangeDetectorRef`\n */\nexport declare function isDefaultChangeDetectionStrategy(changeDetectionStrategy: ChangeDetectionStrategy): boolean;\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection/differs/default_iterable_differ.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, NgIterable, TrackByFunction } from './iterable_differs';\nexport declare class DefaultIterableDifferFactory implements IterableDifferFactory {\n    constructor();\n    supports(obj: Object | null | undefined): boolean;\n    create<V>(trackByFn?: TrackByFunction<V>): DefaultIterableDiffer<V>;\n}\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @publicApi\n */\nexport declare class DefaultIterableDiffer<V> implements IterableDiffer<V>, IterableChanges<V> {\n    readonly length: number;\n    readonly collection: V[] | Iterable<V> | null;\n    private _linkedRecords;\n    private _unlinkedRecords;\n    private _previousItHead;\n    private _itHead;\n    private _itTail;\n    private _additionsHead;\n    private _additionsTail;\n    private _movesHead;\n    private _movesTail;\n    private _removalsHead;\n    private _removalsTail;\n    private _identityChangesHead;\n    private _identityChangesTail;\n    private _trackByFn;\n    constructor(trackByFn?: TrackByFunction<V>);\n    forEachItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n    forEachOperation(fn: (item: IterableChangeRecord<V>, previousIndex: number | null, currentIndex: number | null) => void): void;\n    forEachPreviousItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n    forEachAddedItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n    forEachMovedItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n    forEachRemovedItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n    forEachIdentityChange(fn: (record: IterableChangeRecord_<V>) => void): void;\n    diff(collection: NgIterable<V>): DefaultIterableDiffer<V> | null;\n    onDestroy(): void;\n    check(collection: NgIterable<V>): boolean;\n    readonly isDirty: boolean;\n    private _addToRemovals;\n}\nexport declare class IterableChangeRecord_<V> implements IterableChangeRecord<V> {\n    item: V;\n    trackById: any;\n    currentIndex: number | null;\n    previousIndex: number | null;\n    constructor(item: V, trackById: any);\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection/differs/default_keyvalue_differ.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory } from './keyvalue_differs';\nexport declare class DefaultKeyValueDifferFactory<K, V> implements KeyValueDifferFactory {\n    constructor();\n    supports(obj: any): boolean;\n    create<K, V>(): KeyValueDiffer<K, V>;\n}\nexport declare class DefaultKeyValueDiffer<K, V> implements KeyValueDiffer<K, V>, KeyValueChanges<K, V> {\n    private _records;\n    private _mapHead;\n    private _appendAfter;\n    private _previousMapHead;\n    private _changesHead;\n    private _changesTail;\n    private _additionsHead;\n    private _additionsTail;\n    private _removalsHead;\n    private _removalsTail;\n    readonly isDirty: boolean;\n    forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    diff(map?: Map<any, any> | {\n        [k: string]: any;\n    } | null): any;\n    onDestroy(): void;\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     */\n    check(map: Map<any, any> | {\n        [k: string]: any;\n    }): boolean;\n    /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     */\n    private _insertBeforeOrAppend;\n    private _getOrCreateRecordForKey;\n    private _maybeAddToChanges;\n    private _addToAdditions;\n    private _addToChanges;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection/differs/iterable_differs.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StaticProvider } from '../../di/provider';\n/**\n * A type describing supported iterable types.\n *\n * @publicApi\n */\nexport declare type NgIterable<T> = Array<T> | Iterable<T>;\n/**\n * A strategy for tracking changes over time to an iterable. Used by {@link NgForOf} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n *\n * @publicApi\n */\nexport interface IterableDiffer<V> {\n    /**\n     * Compute a difference between the previous state and the new `object` state.\n     *\n     * @param object containing the new value.\n     * @returns an object describing the difference. The return value is only valid until the next\n     * `diff()` invocation.\n     */\n    diff(object: NgIterable<V>): IterableChanges<V> | null;\n}\n/**\n * An object describing the changes in the `Iterable` collection since last time\n * `IterableDiffer#diff()` was invoked.\n *\n * @publicApi\n */\nexport interface IterableChanges<V> {\n    /**\n     * Iterate over all changes. `IterableChangeRecord` will contain information about changes\n     * to each item.\n     */\n    forEachItem(fn: (record: IterableChangeRecord<V>) => void): void;\n    /**\n     * Iterate over a set of operations which when applied to the original `Iterable` will produce the\n     * new `Iterable`.\n     *\n     * NOTE: These are not necessarily the actual operations which were applied to the original\n     * `Iterable`, rather these are a set of computed operations which may not be the same as the\n     * ones applied.\n     *\n     * @param record A change which needs to be applied\n     * @param previousIndex The `IterableChangeRecord#previousIndex` of the `record` refers to the\n     *        original `Iterable` location, where as `previousIndex` refers to the transient location\n     *        of the item, after applying the operations up to this point.\n     * @param currentIndex The `IterableChangeRecord#currentIndex` of the `record` refers to the\n     *        original `Iterable` location, where as `currentIndex` refers to the transient location\n     *        of the item, after applying the operations up to this point.\n     */\n    forEachOperation(fn: (record: IterableChangeRecord<V>, previousIndex: number | null, currentIndex: number | null) => void): void;\n    /**\n     * Iterate over changes in the order of original `Iterable` showing where the original items\n     * have moved.\n     */\n    forEachPreviousItem(fn: (record: IterableChangeRecord<V>) => void): void;\n    /** Iterate over all added items. */\n    forEachAddedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n    /** Iterate over all moved items. */\n    forEachMovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n    /** Iterate over all removed items. */\n    forEachRemovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n    /** Iterate over all items which had their identity (as computed by the `TrackByFunction`)\n     * changed. */\n    forEachIdentityChange(fn: (record: IterableChangeRecord<V>) => void): void;\n}\n/**\n * Record representing the item change information.\n *\n * @publicApi\n */\nexport interface IterableChangeRecord<V> {\n    /** Current index of the item in `Iterable` or null if removed. */\n    readonly currentIndex: number | null;\n    /** Previous index of the item in `Iterable` or null if added. */\n    readonly previousIndex: number | null;\n    /** The item. */\n    readonly item: V;\n    /** Track by identity as computed by the `TrackByFunction`. */\n    readonly trackById: any;\n}\n/**\n * @deprecated v4.0.0 - Use IterableChangeRecord instead.\n * @publicApi\n */\nexport interface CollectionChangeRecord<V> extends IterableChangeRecord<V> {\n}\n/**\n * An optional function passed into {@link NgForOf} that defines how to track\n * items in an iterable (e.g. fby index or id)\n *\n * @publicApi\n */\nexport interface TrackByFunction<T> {\n    (index: number, item: T): any;\n}\n/**\n * Provides a factory for {@link IterableDiffer}.\n *\n * @publicApi\n */\nexport interface IterableDifferFactory {\n    supports(objects: any): boolean;\n    create<V>(trackByFn?: TrackByFunction<V>): IterableDiffer<V>;\n}\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * @publicApi\n */\nexport declare class IterableDiffers {\n    /** @nocollapse */\n    static ngInjectableDef: never;\n    /**\n     * @deprecated v4.0.0 - Should be private\n     */\n    factories: IterableDifferFactory[];\n    constructor(factories: IterableDifferFactory[]);\n    static create(factories: IterableDifferFactory[], parent?: IterableDiffers): IterableDiffers;\n    /**\n     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {@link IterableDiffers} instance with the provided factories and return a new\n     * {@link IterableDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link IterableDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    static extend(factories: IterableDifferFactory[]): StaticProvider;\n    find(iterable: any): IterableDifferFactory;\n}\nexport declare function getTypeNameForDebugging(type: any): string;\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection/differs/keyvalue_differs.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StaticProvider } from '../../di';\n/**\n * A differ that tracks changes made to an object over time.\n *\n * @publicApi\n */\nexport interface KeyValueDiffer<K, V> {\n    /**\n     * Compute a difference between the previous state and the new `object` state.\n     *\n     * @param object containing the new value.\n     * @returns an object describing the difference. The return value is only valid until the next\n     * `diff()` invocation.\n     */\n    diff(object: Map<K, V>): KeyValueChanges<K, V> | null;\n    /**\n     * Compute a difference between the previous state and the new `object` state.\n     *\n     * @param object containing the new value.\n     * @returns an object describing the difference. The return value is only valid until the next\n     * `diff()` invocation.\n     */\n    diff(object: {\n        [key: string]: V;\n    }): KeyValueChanges<string, V> | null;\n}\n/**\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n * `KeyValueDiffer#diff()` was invoked.\n *\n * @publicApi\n */\nexport interface KeyValueChanges<K, V> {\n    /**\n     * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n     * to each item.\n     */\n    forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    /**\n     * Iterate over changes in the order of original Map showing where the original items\n     * have moved.\n     */\n    forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    /**\n     * Iterate over all keys for which values have changed.\n     */\n    forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    /**\n     * Iterate over all added items.\n     */\n    forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n    /**\n     * Iterate over all removed items.\n     */\n    forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n}\n/**\n * Record representing the item change information.\n *\n * @publicApi\n */\nexport interface KeyValueChangeRecord<K, V> {\n    /**\n     * Current key in the Map.\n     */\n    readonly key: K;\n    /**\n     * Current value for the key or `null` if removed.\n     */\n    readonly currentValue: V | null;\n    /**\n     * Previous value for the key or `null` if added.\n     */\n    readonly previousValue: V | null;\n}\n/**\n * Provides a factory for {@link KeyValueDiffer}.\n *\n * @publicApi\n */\nexport interface KeyValueDifferFactory {\n    /**\n     * Test to see if the differ knows how to diff this kind of object.\n     */\n    supports(objects: any): boolean;\n    /**\n     * Create a `KeyValueDiffer`.\n     */\n    create<K, V>(): KeyValueDiffer<K, V>;\n}\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * @publicApi\n */\nexport declare class KeyValueDiffers {\n    /** @nocollapse */\n    static ngInjectableDef: never;\n    /**\n     * @deprecated v4.0.0 - Should be private.\n     */\n    factories: KeyValueDifferFactory[];\n    constructor(factories: KeyValueDifferFactory[]);\n    static create<S>(factories: KeyValueDifferFactory[], parent?: KeyValueDiffers): KeyValueDiffers;\n    /**\n     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n     * {@link KeyValueDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link KeyValueDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    static extend<S>(factories: KeyValueDifferFactory[]): StaticProvider;\n    find(kv: any): KeyValueDifferFactory;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/change_detection/pipe_transform.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To create a Pipe, you must implement this interface.\n *\n * Angular invokes the `transform` method with the value of a binding\n * as the first argument, and any parameters as the second argument in list form.\n *\n * @usageNotes\n * ### Example\n *\n * The `RepeatPipe` below repeats the value as many times as indicated by the first argument:\n *\n * ```\n * import {Pipe, PipeTransform} from '@angular/core';\n *\n * @Pipe({name: 'repeat'})\n * export class RepeatPipe implements PipeTransform {\n *   transform(value: any, times: number) {\n *     return value.repeat(times);\n *   }\n * }\n * ```\n *\n * Invoking `{{ 'ok' | repeat:3 }}` in a template produces `okokok`.\n *\n * @publicApi\n */\nexport interface PipeTransform {\n    transform(value: any, ...args: any[]): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/codegen_private_exports.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { CodegenComponentFactoryResolver as ɵCodegenComponentFactoryResolver } from './linker/component_factory_resolver';\nexport { registerModuleFactory as ɵregisterModuleFactory } from './linker/ng_module_factory_loader';\nexport { ArgumentType as ɵArgumentType, BindingFlags as ɵBindingFlags, DepFlags as ɵDepFlags, EMPTY_ARRAY as ɵEMPTY_ARRAY, EMPTY_MAP as ɵEMPTY_MAP, NodeFlags as ɵNodeFlags, QueryBindingType as ɵQueryBindingType, QueryValueType as ɵQueryValueType, ViewDefinition as ɵViewDefinition, ViewFlags as ɵViewFlags, anchorDef as ɵand, createComponentFactory as ɵccf, createNgModuleFactory as ɵcmf, createRendererType2 as ɵcrt, directiveDef as ɵdid, elementDef as ɵeld, elementEventFullName as ɵelementEventFullName, getComponentViewDefinitionFactory as ɵgetComponentViewDefinitionFactory, inlineInterpolate as ɵinlineInterpolate, interpolate as ɵinterpolate, moduleDef as ɵmod, moduleProvideDef as ɵmpd, ngContentDef as ɵncd, nodeValue as ɵnov, pipeDef as ɵpid, providerDef as ɵprd, pureArrayDef as ɵpad, pureObjectDef as ɵpod, purePipeDef as ɵppd, queryDef as ɵqud, textDef as ɵted, unwrapValue as ɵunv, viewDef as ɵvid } from './view/index';\n"
  },
  {
    "path": "node_modules/@angular/core/src/console.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class Console {\n    log(message: string): void;\n    warn(message: string): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/core_private_export.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { ALLOW_MULTIPLE_PLATFORMS as ɵALLOW_MULTIPLE_PLATFORMS } from './application_ref';\nexport { APP_ID_RANDOM_PROVIDER as ɵAPP_ID_RANDOM_PROVIDER } from './application_tokens';\nexport { defaultIterableDiffers as ɵdefaultIterableDiffers, defaultKeyValueDiffers as ɵdefaultKeyValueDiffers } from './change_detection/change_detection';\nexport { devModeEqual as ɵdevModeEqual } from './change_detection/change_detection_util';\nexport { isListLikeIterable as ɵisListLikeIterable } from './change_detection/change_detection_util';\nexport { ChangeDetectorStatus as ɵChangeDetectorStatus, isDefaultChangeDetectionStrategy as ɵisDefaultChangeDetectionStrategy } from './change_detection/constants';\nexport { Console as ɵConsole } from './console';\nexport { InjectableDef as ɵInjectableDef, InjectorDef as ɵInjectorDef, getInjectableDef as ɵgetInjectableDef } from './di/defs';\nexport { inject as ɵinject, setCurrentInjector as ɵsetCurrentInjector } from './di/injector_compatibility';\nexport { APP_ROOT as ɵAPP_ROOT } from './di/scope';\nexport { ivyEnabled as ɵivyEnabled } from './ivy_switch';\nexport { ComponentFactory as ɵComponentFactory } from './linker/component_factory';\nexport { CodegenComponentFactoryResolver as ɵCodegenComponentFactoryResolver } from './linker/component_factory_resolver';\nexport { resolveComponentResources as ɵresolveComponentResources } from './metadata/resource_loading';\nexport { ReflectionCapabilities as ɵReflectionCapabilities } from './reflection/reflection_capabilities';\nexport { GetterFn as ɵGetterFn, MethodFn as ɵMethodFn, SetterFn as ɵSetterFn } from './reflection/types';\nexport { DirectRenderer as ɵDirectRenderer, RenderDebugInfo as ɵRenderDebugInfo } from './render/api';\nexport { _sanitizeHtml as ɵ_sanitizeHtml } from './sanitization/html_sanitizer';\nexport { _sanitizeStyle as ɵ_sanitizeStyle } from './sanitization/style_sanitizer';\nexport { _sanitizeUrl as ɵ_sanitizeUrl } from './sanitization/url_sanitizer';\nexport { global as ɵglobal, looseIdentical as ɵlooseIdentical, stringify as ɵstringify } from './util';\nexport { makeDecorator as ɵmakeDecorator } from './util/decorators';\nexport { isObservable as ɵisObservable, isPromise as ɵisPromise } from './util/lang';\nexport { clearOverrides as ɵclearOverrides, initServicesIfNeeded as ɵinitServicesIfNeeded, overrideComponentView as ɵoverrideComponentView, overrideProvider as ɵoverrideProvider } from './view/index';\nexport { NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR } from './view/provider';\n"
  },
  {
    "path": "node_modules/@angular/core/src/core_render3_private_export.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { defineBase as ɵdefineBase, defineComponent as ɵdefineComponent, defineDirective as ɵdefineDirective, definePipe as ɵdefinePipe, defineNgModule as ɵdefineNgModule, detectChanges as ɵdetectChanges, renderComponent as ɵrenderComponent, ComponentType as ɵComponentType, ComponentFactory as ɵRender3ComponentFactory, ComponentRef as ɵRender3ComponentRef, DirectiveType as ɵDirectiveType, RenderFlags as ɵRenderFlags, directiveInject as ɵdirectiveInject, injectAttribute as ɵinjectAttribute, getFactoryOf as ɵgetFactoryOf, getInheritedFactory as ɵgetInheritedFactory, templateRefExtractor as ɵtemplateRefExtractor, ProvidersFeature as ɵProvidersFeature, InheritDefinitionFeature as ɵInheritDefinitionFeature, NgOnChangesFeature as ɵNgOnChangesFeature, LifecycleHooksFeature as ɵLifecycleHooksFeature, NgModuleType as ɵNgModuleType, NgModuleRef as ɵRender3NgModuleRef, CssSelectorList as ɵCssSelectorList, markDirty as ɵmarkDirty, NgModuleFactory as ɵNgModuleFactory, NO_CHANGE as ɵNO_CHANGE, container as ɵcontainer, nextContext as ɵnextContext, elementStart as ɵelementStart, namespaceHTML as ɵnamespaceHTML, namespaceMathML as ɵnamespaceMathML, namespaceSVG as ɵnamespaceSVG, element as ɵelement, listener as ɵlistener, text as ɵtext, embeddedViewStart as ɵembeddedViewStart, query as ɵquery, registerContentQuery as ɵregisterContentQuery, projection as ɵprojection, bind as ɵbind, interpolation1 as ɵinterpolation1, interpolation2 as ɵinterpolation2, interpolation3 as ɵinterpolation3, interpolation4 as ɵinterpolation4, interpolation5 as ɵinterpolation5, interpolation6 as ɵinterpolation6, interpolation7 as ɵinterpolation7, interpolation8 as ɵinterpolation8, interpolationV as ɵinterpolationV, pipeBind1 as ɵpipeBind1, pipeBind2 as ɵpipeBind2, pipeBind3 as ɵpipeBind3, pipeBind4 as ɵpipeBind4, pipeBindV as ɵpipeBindV, pureFunction0 as ɵpureFunction0, pureFunction1 as ɵpureFunction1, pureFunction2 as ɵpureFunction2, pureFunction3 as ɵpureFunction3, pureFunction4 as ɵpureFunction4, pureFunction5 as ɵpureFunction5, pureFunction6 as ɵpureFunction6, pureFunction7 as ɵpureFunction7, pureFunction8 as ɵpureFunction8, pureFunctionV as ɵpureFunctionV, getCurrentView as ɵgetCurrentView, restoreView as ɵrestoreView, containerRefreshStart as ɵcontainerRefreshStart, containerRefreshEnd as ɵcontainerRefreshEnd, queryRefresh as ɵqueryRefresh, loadQueryList as ɵloadQueryList, elementEnd as ɵelementEnd, elementProperty as ɵelementProperty, projectionDef as ɵprojectionDef, reference as ɵreference, enableBindings as ɵenableBindings, disableBindings as ɵdisableBindings, elementAttribute as ɵelementAttribute, elementContainerStart as ɵelementContainerStart, elementContainerEnd as ɵelementContainerEnd, elementStyling as ɵelementStyling, elementStylingMap as ɵelementStylingMap, elementStyleProp as ɵelementStyleProp, elementStylingApply as ɵelementStylingApply, elementClassProp as ɵelementClassProp, textBinding as ɵtextBinding, template as ɵtemplate, embeddedViewEnd as ɵembeddedViewEnd, store as ɵstore, load as ɵload, pipe as ɵpipe, BaseDef as ɵBaseDef, ComponentDef as ɵComponentDef, ComponentDefWithMeta as ɵComponentDefWithMeta, DirectiveDef as ɵDirectiveDef, DirectiveDefWithMeta as ɵDirectiveDefWithMeta, PipeDef as ɵPipeDef, PipeDefWithMeta as ɵPipeDefWithMeta, whenRendered as ɵwhenRendered, i18n as ɵi18n, i18nAttributes as ɵi18nAttributes, i18nExp as ɵi18nExp, i18nStart as ɵi18nStart, i18nEnd as ɵi18nEnd, i18nApply as ɵi18nApply, i18nPostprocess as ɵi18nPostprocess, WRAP_RENDERER_FACTORY2 as ɵWRAP_RENDERER_FACTORY2, setClassMetadata as ɵsetClassMetadata, } from './render3/index';\nexport { Render3DebugRendererFactory2 as ɵRender3DebugRendererFactory2 } from './render3/debug';\nexport { compileComponent as ɵcompileComponent, compileDirective as ɵcompileDirective, } from './render3/jit/directive';\nexport { compileNgModule as ɵcompileNgModule, compileNgModuleDefs as ɵcompileNgModuleDefs, patchComponentDefWithScope as ɵpatchComponentDefWithScope, } from './render3/jit/module';\nexport { compilePipe as ɵcompilePipe, } from './render3/jit/pipe';\nexport { NgModuleDef as ɵNgModuleDef, NgModuleDefWithMeta as ɵNgModuleDefWithMeta, NgModuleTransitiveScopes as ɵNgModuleTransitiveScopes, } from './metadata/ng_module';\nexport { sanitizeHtml as ɵsanitizeHtml, sanitizeStyle as ɵsanitizeStyle, sanitizeUrl as ɵsanitizeUrl, sanitizeResourceUrl as ɵsanitizeResourceUrl, } from './sanitization/sanitization';\nexport { bypassSanitizationTrustHtml as ɵbypassSanitizationTrustHtml, bypassSanitizationTrustStyle as ɵbypassSanitizationTrustStyle, bypassSanitizationTrustScript as ɵbypassSanitizationTrustScript, bypassSanitizationTrustUrl as ɵbypassSanitizationTrustUrl, bypassSanitizationTrustResourceUrl as ɵbypassSanitizationTrustResourceUrl, } from './sanitization/bypass';\nexport { getContext as ɵgetContext } from './render3/context_discovery';\nexport { Player as ɵPlayer, PlayerFactory as ɵPlayerFactory, PlayState as ɵPlayState, PlayerHandler as ɵPlayerHandler, } from './render3/interfaces/player';\nexport { LContext as ɵLContext, } from './render3/interfaces/context';\nexport { bindPlayerFactory as ɵbindPlayerFactory, } from './render3/styling/player_factory';\nexport { addPlayer as ɵaddPlayer, getPlayers as ɵgetPlayers, } from './render3/players';\nexport { compileNgModuleFactory__POST_R3__ as ɵcompileNgModuleFactory__POST_R3__ } from './application_ref';\nexport { SWITCH_COMPILE_COMPONENT__POST_R3__ as ɵSWITCH_COMPILE_COMPONENT__POST_R3__, SWITCH_COMPILE_DIRECTIVE__POST_R3__ as ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__, SWITCH_COMPILE_PIPE__POST_R3__ as ɵSWITCH_COMPILE_PIPE__POST_R3__, } from './metadata/directives';\nexport { SWITCH_COMPILE_NGMODULE__POST_R3__ as ɵSWITCH_COMPILE_NGMODULE__POST_R3__, } from './metadata/ng_module';\nexport { SWITCH_COMPILE_INJECTABLE__POST_R3__ as ɵSWITCH_COMPILE_INJECTABLE__POST_R3__, } from './di/injectable';\nexport { SWITCH_IVY_ENABLED__POST_R3__ as ɵSWITCH_IVY_ENABLED__POST_R3__, } from './ivy_switch';\nexport { SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ as ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__, } from './change_detection/change_detector_ref';\nexport { SWITCH_ELEMENT_REF_FACTORY__POST_R3__ as ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__, } from './linker/element_ref';\nexport { SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ as ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__, } from './linker/template_ref';\nexport { SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ as ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__, } from './linker/view_container_ref';\nexport { SWITCH_RENDERER2_FACTORY__POST_R3__ as ɵSWITCH_RENDERER2_FACTORY__POST_R3__, } from './render/api';\nexport { publishGlobalUtil as ɵpublishGlobalUtil, publishDefaultGlobalUtils as ɵpublishDefaultGlobalUtils } from './render3/global_utils';\nexport { SWITCH_INJECTOR_FACTORY__POST_R3__ as ɵSWITCH_INJECTOR_FACTORY__POST_R3__, } from './di/injector';\n"
  },
  {
    "path": "node_modules/@angular/core/src/core.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point from which you should import all public core APIs.\n */\nexport * from './metadata';\nexport * from './version';\nexport { TypeDecorator } from './util/decorators';\nexport * from './di';\nexport { createPlatform, assertPlatform, destroyPlatform, getPlatform, PlatformRef, ApplicationRef, createPlatformFactory, NgProbeToken } from './application_ref';\nexport { enableProdMode, isDevMode } from './is_dev_mode';\nexport { APP_ID, PACKAGE_ROOT_URL, PLATFORM_INITIALIZER, PLATFORM_ID, APP_BOOTSTRAP_LISTENER } from './application_tokens';\nexport { APP_INITIALIZER, ApplicationInitStatus } from './application_init';\nexport * from './zone';\nexport * from './render';\nexport * from './linker';\nexport { DebugElement, DebugNode, asNativeElements, getDebugNode, Predicate } from './debug/debug_node';\nexport { GetTestability, Testability, TestabilityRegistry, setTestabilityGetter } from './testability/testability';\nexport * from './change_detection';\nexport * from './platform_core_providers';\nexport { TRANSLATIONS, TRANSLATIONS_FORMAT, LOCALE_ID, MissingTranslationStrategy } from './i18n/tokens';\nexport { ApplicationModule } from './application_module';\nexport { wtfCreateScope, wtfLeave, wtfStartTimeRange, wtfEndTimeRange, WtfScopeFn } from './profile/profile';\nexport { Type } from './type';\nexport { EventEmitter } from './event_emitter';\nexport { ErrorHandler } from './error_handler';\nexport * from './core_private_export';\nexport * from './core_render3_private_export';\nexport { Sanitizer, SecurityContext } from './sanitization/security';\nexport * from './codegen_private_exports';\n"
  },
  {
    "path": "node_modules/@angular/core/src/debug/debug_node.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '../di';\nimport { DebugContext } from '../view/index';\nexport declare class EventListener {\n    name: string;\n    callback: Function;\n    constructor(name: string, callback: Function);\n}\n/**\n * @publicApi\n */\nexport declare class DebugNode {\n    nativeNode: any;\n    private _debugContext;\n    listeners: EventListener[];\n    parent: DebugElement | null;\n    constructor(nativeNode: any, parent: DebugNode | null, _debugContext: DebugContext);\n    readonly injector: Injector;\n    readonly componentInstance: any;\n    readonly context: any;\n    readonly references: {\n        [key: string]: any;\n    };\n    readonly providerTokens: any[];\n}\n/**\n * @publicApi\n */\nexport declare class DebugElement extends DebugNode {\n    name: string;\n    properties: {\n        [key: string]: any;\n    };\n    attributes: {\n        [key: string]: string | null;\n    };\n    classes: {\n        [key: string]: boolean;\n    };\n    styles: {\n        [key: string]: string | null;\n    };\n    childNodes: DebugNode[];\n    nativeElement: any;\n    constructor(nativeNode: any, parent: any, _debugContext: DebugContext);\n    addChild(child: DebugNode): void;\n    removeChild(child: DebugNode): void;\n    insertChildrenAfter(child: DebugNode, newChildren: DebugNode[]): void;\n    insertBefore(refChild: DebugNode, newChild: DebugNode): void;\n    query(predicate: Predicate<DebugElement>): DebugElement;\n    queryAll(predicate: Predicate<DebugElement>): DebugElement[];\n    queryAllNodes(predicate: Predicate<DebugNode>): DebugNode[];\n    readonly children: DebugElement[];\n    triggerEventHandler(eventName: string, eventObj: any): void;\n}\n/**\n * @publicApi\n */\nexport declare function asNativeElements(debugEls: DebugElement[]): any;\n/**\n * @publicApi\n */\nexport declare function getDebugNode(nativeNode: any): DebugNode | null;\nexport declare function getAllDebugNodes(): DebugNode[];\nexport declare function indexDebugNode(node: DebugNode): void;\nexport declare function removeDebugNodeFromIndex(node: DebugNode): void;\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n *\n * @publicApi\n */\nexport interface Predicate<T> {\n    (value: T): boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/di.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * The `di` module provides dependency injection container services.\n */\nexport * from './di/metadata';\nexport { InjectableType, InjectorType, defineInjectable, defineInjector } from './di/defs';\nexport { forwardRef, resolveForwardRef, ForwardRefFn } from './di/forward_ref';\nexport { Injectable, InjectableDecorator, InjectableProvider } from './di/injectable';\nexport { INJECTOR, Injector } from './di/injector';\nexport { inject, InjectFlags } from './di/injector_compatibility';\nexport { ReflectiveInjector } from './di/reflective_injector';\nexport { StaticProvider, ValueProvider, ConstructorSansProvider, ExistingProvider, FactoryProvider, Provider, TypeProvider, ClassProvider } from './di/provider';\nexport { createInjector } from './di/r3_injector';\nexport { ResolvedReflectiveFactory, ResolvedReflectiveProvider } from './di/reflective_provider';\nexport { ReflectiveKey } from './di/reflective_key';\nexport { InjectionToken } from './di/injection_token';\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/defs.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\nimport { ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, StaticClassProvider, ValueProvider } from './provider';\n/**\n * Information about how a type or `InjectionToken` interfaces with the DI system.\n *\n * At a minimum, this includes a `factory` which defines how to create the given type `T`, possibly\n * requesting injection of other types if necessary.\n *\n * Optionally, a `providedIn` parameter specifies that the given type belongs to a particular\n * `InjectorDef`, `NgModule`, or a special scope (e.g. `'root'`). A value of `null` indicates\n * that the injectable does not belong to any scope.\n *\n * NOTE: This is a private type and should not be exported\n */\nexport interface InjectableDef<T> {\n    /**\n     * Specifies that the given type belongs to a particular injector:\n     * - `InjectorType` such as `NgModule`,\n     * - `'root'` the root injector\n     * - `'any'` all injectors.\n     * - `null`, does not belong to any injector. Must be explicitly listed in the injector\n     *   `providers`.\n     */\n    providedIn: InjectorType<any> | 'root' | 'any' | null;\n    /**\n     * Factory method to execute to create an instance of the injectable.\n     */\n    factory: () => T;\n    /**\n     * In a case of no explicit injector, a location where the instance of the injectable is stored.\n     */\n    value: T | undefined;\n}\n/**\n * Information about the providers to be included in an `Injector` as well as how the given type\n * which carries the information should be created by the DI system.\n *\n * An `InjectorDef` can import other types which have `InjectorDefs`, forming a deep nested\n * structure of providers with a defined priority (identically to how `NgModule`s also have\n * an import/dependency structure).\n *\n * NOTE: This is a private type and should not be exported\n */\nexport interface InjectorDef<T> {\n    factory: () => T;\n    providers: (Type<any> | ValueProvider | ExistingProvider | FactoryProvider | ConstructorProvider | StaticClassProvider | ClassProvider | any[])[];\n    imports: (InjectorType<any> | InjectorTypeWithProviders<any>)[];\n}\n/**\n * A `Type` which has an `InjectableDef` static field.\n *\n * `InjectableDefType`s contain their own Dependency Injection metadata and are usable in an\n * `InjectorDef`-based `StaticInjector.\n *\n * @publicApi\n */\nexport interface InjectableType<T> extends Type<T> {\n    /**\n     * Opaque type whose structure is highly version dependent. Do not rely on any properties.\n     */\n    ngInjectableDef: never;\n}\n/**\n * A type which has an `InjectorDef` static field.\n *\n * `InjectorDefTypes` can be used to configure a `StaticInjector`.\n *\n * @publicApi\n */\nexport interface InjectorType<T> extends Type<T> {\n    /**\n     * Opaque type whose structure is highly version dependent. Do not rely on any properties.\n     */\n    ngInjectorDef: never;\n}\n/**\n * Describes the `InjectorDef` equivalent of a `ModuleWithProviders`, an `InjectorDefType` with an\n * associated array of providers.\n *\n * Objects of this type can be listed in the imports section of an `InjectorDef`.\n *\n * NOTE: This is a private type and should not be exported\n */\nexport interface InjectorTypeWithProviders<T> {\n    ngModule: InjectorType<T>;\n    providers?: (Type<any> | ValueProvider | ExistingProvider | FactoryProvider | ConstructorProvider | StaticClassProvider | ClassProvider | any[])[];\n}\n/**\n * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n * in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * @publicApi\n */\nexport declare function defineInjectable<T>(opts: {\n    providedIn?: Type<any> | 'root' | 'any' | null;\n    factory: () => T;\n}): never;\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n *   create the type must be provided. If that factory function needs to inject arguments, it can\n *   use the `inject` function.\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @publicApi\n */\nexport declare function defineInjector(options: {\n    factory: () => any;\n    providers?: any[];\n    imports?: any[];\n}): never;\n/**\n * Read the `ngInjectableDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectableDef`\n */\nexport declare function getInjectableDef<T>(type: any): InjectableDef<T> | null;\n/**\n * Read the `ngInjectorDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectorDef`\n */\nexport declare function getInjectorDef<T>(type: any): InjectorDef<T> | null;\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/forward_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\n/**\n * An interface that a function passed into {@link forwardRef} has to implement.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * @publicApi\n */\nexport interface ForwardRefFn {\n    (): any;\n}\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @publicApi\n */\nexport declare function forwardRef(forwardRefFn: ForwardRefFn): Type<any>;\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @publicApi\n */\nexport declare function resolveForwardRef<T>(type: T): T;\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/injectable.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { compileInjectable as render3CompileInjectable } from '../render3/jit/injectable';\nimport { Type } from '../type';\nimport { InjectableDef } from './defs';\nimport { ClassSansProvider, ConstructorSansProvider, ExistingSansProvider, FactorySansProvider, StaticClassSansProvider, ValueSansProvider } from './provider';\n/**\n * Injectable providers used in `@Injectable` decorator.\n *\n * @publicApi\n */\nexport declare type InjectableProvider = ValueSansProvider | ExistingSansProvider | StaticClassSansProvider | ConstructorSansProvider | FactorySansProvider | ClassSansProvider;\n/**\n * Type of the Injectable decorator / constructor function.\n *\n * @publicApi\n */\nexport interface InjectableDecorator {\n    /**\n     * A marker metadata that marks a class as available to `Injector` for creation.\n     *\n     * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/di/ts/metadata_spec.ts region='Injectable'}\n     *\n     * `Injector` will throw an error when trying to instantiate a class that\n     * does not have `@Injectable` marker, as shown in the example below.\n     *\n     * {@example core/di/ts/metadata_spec.ts region='InjectableThrows'}\n     *\n     */\n    (): any;\n    (options?: {\n        providedIn: Type<any> | 'root' | null;\n    } & InjectableProvider): any;\n    new (): Injectable;\n    new (options?: {\n        providedIn: Type<any> | 'root' | null;\n    } & InjectableProvider): Injectable;\n}\n/**\n * Type of the Injectable metadata.\n *\n * @publicApi\n */\nexport interface Injectable {\n    providedIn?: Type<any> | 'root' | null;\n}\n/**\n * Injectable decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const Injectable: InjectableDecorator;\n/**\n * Type representing injectable service.\n *\n * @publicApi\n */\nexport interface InjectableType<T> extends Type<T> {\n    ngInjectableDef: InjectableDef<T>;\n}\nexport declare const SWITCH_COMPILE_INJECTABLE__POST_R3__: typeof render3CompileInjectable;\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/injection_token.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * @usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * @publicApi\n */\nexport declare class InjectionToken<T> {\n    protected _desc: string;\n    readonly ngInjectableDef: never | undefined;\n    constructor(_desc: string, options?: {\n        providedIn?: Type<any> | 'root' | null;\n        factory: () => T;\n    });\n    toString(): string;\n}\nexport interface InjectableDefToken<T> extends InjectionToken<T> {\n    ngInjectableDef: never;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/injector_compatibility.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\nimport { InjectionToken } from './injection_token';\nimport { Injector } from './injector';\n/**\n * Injection flags for DI.\n *\n * @publicApi\n */\nexport declare enum InjectFlags {\n    Default = 0,\n    /**\n     * Specifies that an injector should retrieve a dependency from any injector until reaching the\n     * host element of the current component. (Only used with Element Injector)\n     */\n    Host = 1,\n    /** Don't descend into ancestors of the node requesting injection. */\n    Self = 2,\n    /** Skip the node that is requesting injection. */\n    SkipSelf = 4,\n    /** Inject `defaultValue` instead if token not found. */\n    Optional = 8\n}\nexport declare function setCurrentInjector(injector: Injector | null | undefined): Injector | undefined | null;\n/**\n * Sets the current inject implementation.\n */\nexport declare function setInjectImplementation(impl: (<T>(token: Type<T> | InjectionToken<T>, flags?: InjectFlags) => T | null) | undefined): (<T>(token: Type<T> | InjectionToken<T>, flags?: InjectFlags) => T | null) | undefined;\nexport declare function injectInjectorOnly<T>(token: Type<T> | InjectionToken<T>): T;\nexport declare function injectInjectorOnly<T>(token: Type<T> | InjectionToken<T>, flags?: InjectFlags): T | null;\n/**\n * Injects a token from the currently active injector.\n *\n * This function must be used in the context of a factory function such as one defined for an\n * `InjectionToken`, and will throw an error if not called from such a context.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/injector_spec.ts region='ShakeableInjectionToken'}\n *\n * Within such a factory function `inject` is utilized to request injection of a dependency, instead\n * of providing an additional array of dependencies as was common to do with `useFactory` providers.\n * `inject` is faster and more type-safe.\n *\n * @publicApi\n */\nexport declare function inject<T>(token: Type<T> | InjectionToken<T>): T;\nexport declare function inject<T>(token: Type<T> | InjectionToken<T>, flags?: InjectFlags): T | null;\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * `InjectableDef`.\n */\nexport declare function injectRootLimpMode<T>(token: Type<T> | InjectionToken<T>, notFoundValue: T | undefined, flags: InjectFlags): T | null;\nexport declare function injectArgs(types: (Type<any> | InjectionToken<any> | any[])[]): any[];\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/injector.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\nimport { InjectionToken } from './injection_token';\nimport { InjectFlags } from './injector_compatibility';\nimport { StaticProvider } from './provider';\nexport declare const SOURCE = \"__source\";\nexport declare const THROW_IF_NOT_FOUND: Object;\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nexport declare const INJECTOR: InjectionToken<Injector>;\nexport declare class NullInjector implements Injector {\n    get(token: any, notFoundValue?: any): any;\n}\n/**\n * Concrete injectors implement this interface.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nexport declare abstract class Injector {\n    static THROW_IF_NOT_FOUND: Object;\n    static NULL: Injector;\n    /**\n     * Retrieves an instance from the injector based on the provided token.\n     * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n     * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n     */\n    abstract get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n    /**\n     * @deprecated from v4.0.0 use Type<T> or InjectionToken<T>\n     * @suppress {duplicate}\n     */\n    abstract get(token: any, notFoundValue?: any): any;\n    /**\n     * @deprecated from v5 use the new signature Injector.create(options)\n     */\n    static create(providers: StaticProvider[], parent?: Injector): Injector;\n    static create(options: {\n        providers: StaticProvider[];\n        parent?: Injector;\n        name?: string;\n    }): Injector;\n    /** @nocollapse */\n    static ngInjectableDef: never;\n}\nexport declare const SWITCH_INJECTOR_FACTORY__POST_R3__: () => import(\"@angular/core/src/render3/di\").NodeInjector;\nexport declare const USE_VALUE: string;\nexport declare class StaticInjector implements Injector {\n    readonly parent: Injector;\n    readonly source: string | null;\n    private _records;\n    constructor(providers: StaticProvider[], parent?: Injector, source?: string | null);\n    get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n    get(token: any, notFoundValue?: any): any;\n    toString(): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/metadata.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type of the Inject decorator / constructor function.\n *\n * @publicApi\n */\nexport interface InjectDecorator {\n    /**\n     * A constructor parameter decorator that specifies a\n     * custom provider of a dependency.\n     *\n     * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n     *\n     * @usageNotes\n     * The following example shows a class constructor that specifies a\n     * custom provider of a dependency using the parameter decorator.\n     *\n     * {@example core/di/ts/metadata_spec.ts region='Inject'}\n     *\n     * When `@Inject()` is not present, the `Injector` uses the type annotation of the\n     * parameter as the provider.\n     *\n     * {@example core/di/ts/metadata_spec.ts region='InjectWithoutDecorator'}\n     */\n    (token: any): any;\n    new (token: any): Inject;\n}\n/**\n * Type of the Inject metadata.\n *\n * @publicApi\n */\nexport interface Inject {\n    /**\n     * Injector token that maps to the dependency to be injected.\n     */\n    token: any;\n}\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const Inject: InjectDecorator;\n/**\n * Type of the Optional decorator / constructor function.\n *\n * @publicApi\n */\nexport interface OptionalDecorator {\n    /**\n     * A constructor parameter decorator that marks a dependency as optional.\n     *\n     * The DI framework provides null if the dependency is not found.\n     * For example, the following code allows the possibility of a null result:\n     *\n     * {@example core/di/ts/metadata_spec.ts region='Optional'}\n     *\n     * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n     */\n    (): any;\n    new (): Optional;\n}\n/**\n * Type of the Optional metadata.\n *\n * @publicApi\n */\nexport interface Optional {\n}\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const Optional: OptionalDecorator;\n/**\n * Type of the Self decorator / constructor function.\n *\n * @publicApi\n */\nexport interface SelfDecorator {\n    /**\n     * A constructor parameter decorator that tells the DI framework\n     * to retrieve a dependency only from the local injector.\n     *\n     * In the following example, the dependency can be resolved\n     * by the local injector when instantiating the class itself, but not\n     * when instantiating a child.\n     *\n     * {@example core/di/ts/metadata_spec.ts region='Self'}\n     *\n     * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n     *\n     *\n     */\n    (): any;\n    new (): Self;\n}\n/**\n * Type of the Self metadata.\n *\n * @publicApi\n */\nexport interface Self {\n}\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const Self: SelfDecorator;\n/**\n * Type of the SkipSelf decorator / constructor function.\n *\n * @publicApi\n */\nexport interface SkipSelfDecorator {\n    /**\n     * A constructor parameter decorator that tells the DI framework\n     * that dependency resolution should start from the parent injector.\n     *\n     * In the following example, the dependency can be resolved when\n     * instantiating a child, but not when instantiating the class itself.\n     *\n     * {@example core/di/ts/metadata_spec.ts region='SkipSelf'}\n     *\n     * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n     *\n     *\n     */\n    (): any;\n    new (): SkipSelf;\n}\n/**\n * Type of the SkipSelf metadata.\n *\n * @publicApi\n */\nexport interface SkipSelf {\n}\n/**\n * SkipSelf decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const SkipSelf: SkipSelfDecorator;\n/**\n * Type of the Host decorator / constructor function.\n *\n * @publicApi\n */\nexport interface HostDecorator {\n    /**\n     * A constructor parameter decorator that tells the DI framework\n     * to retrieve a dependency from any injector until\n     * reaching the host element of the current component.\n     *\n     * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n     *\n     * @usageNotes\n     *\n     * {@example core/di/ts/metadata_spec.ts region='Host'}\n     */\n    (): any;\n    new (): Host;\n}\n/**\n * Type of the Host metadata.\n *\n * @publicApi\n */\nexport interface Host {\n}\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const Host: HostDecorator;\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/provider.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\n/**\n * Configures the `Injector` to return a value for a token.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ValueSansProvider'}\n *\n * @publicApi\n */\nexport interface ValueSansProvider {\n    /**\n     * The value to inject.\n     */\n    useValue: any;\n}\n/**\n * Configures the `Injector` to return a value for a token.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ValueProvider'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface ValueProvider extends ValueSansProvider {\n    /**\n     * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n     */\n    provide: any;\n    /**\n     * If true, then injector returns an array of instances. This is useful to allow multiple\n     * providers spread across many files to provide configuration information to a common token.\n     */\n    multi?: boolean;\n}\n/**\n * Configures the `Injector` to return an instance of `useClass` for a token.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='StaticClassSansProvider'}\n *\n * @publicApi\n */\nexport interface StaticClassSansProvider {\n    /**\n     * An optional class to instantiate for the `token`. (If not provided `provide` is assumed to be a\n     * class to instantiate)\n     */\n    useClass: Type<any>;\n    /**\n     * A list of `token`s which need to be resolved by the injector. The list of values is then\n     * used as arguments to the `useClass` constructor.\n     */\n    deps: any[];\n}\n/**\n * Configures the `Injector` to return an instance of `useClass` for a token.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='StaticClassProvider'}\n *\n * Note that following two providers are not equal:\n *\n * {@example core/di/ts/provider_spec.ts region='StaticClassProviderDifference'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n */\nexport interface StaticClassProvider extends StaticClassSansProvider {\n    /**\n     * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n     */\n    provide: any;\n    /**\n     * If true, then injector returns an array of instances. This is useful to allow multiple\n     * providers spread across many files to provide configuration information to a common token.\n     */\n    multi?: boolean;\n}\n/**\n * Configures the `Injector` to return an instance of a token.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Injectable(SomeModule, {deps: []})\n * class MyService {}\n * ```\n *\n * @publicApi\n */\nexport interface ConstructorSansProvider {\n    /**\n     * A list of `token`s which need to be resolved by the injector. The list of values is then\n     * used as arguments to the `useClass` constructor.\n     */\n    deps?: any[];\n}\n/**\n * Configures the `Injector` to return an instance of a token.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n */\nexport interface ConstructorProvider extends ConstructorSansProvider {\n    /**\n     * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n     */\n    provide: Type<any>;\n    /**\n     * If true, then injector returns an array of instances. This is useful to allow multiple\n     * providers spread across many files to provide configuration information to a common token.\n     */\n    multi?: boolean;\n}\n/**\n * Configures the `Injector` to return a value of another `useExisting` token.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ExistingSansProvider'}\n */\nexport interface ExistingSansProvider {\n    /**\n     * Existing `token` to return. (equivalent to `injector.get(useExisting)`)\n     */\n    useExisting: any;\n}\n/**\n * Configures the `Injector` to return a value of another `useExisting` token.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ExistingProvider'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface ExistingProvider extends ExistingSansProvider {\n    /**\n     * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n     */\n    provide: any;\n    /**\n     * If true, then injector returns an array of instances. This is useful to allow multiple\n     * providers spread across many files to provide configuration information to a common token.\n     */\n    multi?: boolean;\n}\n/**\n * Configures the `Injector` to return a value by invoking a `useFactory` function.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='FactorySansProvider'}\n *\n * @publicApi\n */\nexport interface FactorySansProvider {\n    /**\n     * A function to invoke to create a value for this `token`. The function is invoked with\n     * resolved values of `token`s in the `deps` field.\n     */\n    useFactory: Function;\n    /**\n     * A list of `token`s which need to be resolved by the injector. The list of values is then\n     * used as arguments to the `useFactory` function.\n     */\n    deps?: any[];\n}\n/**\n * Configures the `Injector` to return a value by invoking a `useFactory` function.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='FactoryProvider'}\n *\n * Dependencies can also be marked as optional:\n *\n * {@example core/di/ts/provider_spec.ts region='FactoryProviderOptionalDeps'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface FactoryProvider extends FactorySansProvider {\n    /**\n     * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n     */\n    provide: any;\n    /**\n     * If true, then injector returns an array of instances. This is useful to allow multiple\n     * providers spread across many files to provide configuration information to a common token.\n     */\n    multi?: boolean;\n}\n/**\n * Describes how the `Injector` should be configured in a static way (Without reflection).\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @see `ValueProvider`\n * @see `ExistingProvider`\n * @see `FactoryProvider`\n *\n * @publicApi\n */\nexport declare type StaticProvider = ValueProvider | ExistingProvider | StaticClassProvider | ConstructorProvider | FactoryProvider | any[];\n/**\n * Configures the `Injector` to return an instance of `Type` when `Type' is used as the token.\n *\n * Create an instance by invoking the `new` operator and supplying additional arguments.\n * This form is a short form of `TypeProvider`;\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='TypeProvider'}\n *\n * @publicApi\n */\nexport interface TypeProvider extends Type<any> {\n}\n/**\n * Configures the `Injector` to return a value by invoking a `useClass` function.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ClassSansProvider'}\n *\n * @publicApi\n */\nexport interface ClassSansProvider {\n    /**\n     * Class to instantiate for the `token`.\n     */\n    useClass: Type<any>;\n}\n/**\n * Configures the `Injector` to return an instance of `useClass` for a token.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ClassProvider'}\n *\n * Note that following two providers are not equal:\n *\n * {@example core/di/ts/provider_spec.ts region='ClassProviderDifference'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface ClassProvider extends ClassSansProvider {\n    /**\n     * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n     */\n    provide: any;\n    /**\n     * If true, then injector returns an array of instances. This is useful to allow multiple\n     * providers spread across many files to provide configuration information to a common token.\n     */\n    multi?: boolean;\n}\n/**\n * Describes how the `Injector` should be configured.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @see `TypeProvider`\n * @see `ClassProvider`\n * @see `StaticProvider`\n *\n * @publicApi\n */\nexport declare type Provider = TypeProvider | ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider | any[];\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/r3_injector.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\nimport { InjectorType } from './defs';\nimport { InjectionToken } from './injection_token';\nimport { Injector } from './injector';\nimport { InjectFlags } from './injector_compatibility';\nimport { ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, StaticClassProvider, StaticProvider, TypeProvider, ValueProvider } from './provider';\n/**\n * Internal type for a single provider in a deep provider array.\n */\ndeclare type SingleProvider = TypeProvider | ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider | StaticClassProvider;\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * @publicApi\n */\nexport declare function createInjector(defType: any, parent?: Injector | null, additionalProviders?: StaticProvider[] | null): Injector;\nexport declare class R3Injector {\n    readonly parent: Injector;\n    /**\n     * Map of tokens to records which contain the instances of those tokens.\n     */\n    private records;\n    /**\n     * The transitive set of `InjectorType`s which define this injector.\n     */\n    private injectorDefTypes;\n    /**\n     * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n     */\n    private onDestroy;\n    /**\n     * Flag indicating this injector provides the APP_ROOT_SCOPE token, and thus counts as the\n     * root scope.\n     */\n    private readonly isRootInjector;\n    /**\n     * Flag indicating that this injector was previously destroyed.\n     */\n    private destroyed;\n    constructor(def: InjectorType<any>, additionalProviders: StaticProvider[] | null, parent: Injector);\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     */\n    destroy(): void;\n    get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: any, flags?: InjectFlags): T;\n    private assertNotDestroyed;\n    /**\n     * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\n     * to this injector.\n     */\n    private processInjectorType;\n    /**\n     * Process a `SingleProvider` and add it.\n     */\n    private processProvider;\n    private hydrate;\n    private injectableDefInScope;\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param provider provider to convert to factory\n */\nexport declare function providerToFactory(provider: SingleProvider): () => any;\nexport declare function isTypeProvider(value: SingleProvider): value is TypeProvider;\nexport {};\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/reflective_errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\nimport { ReflectiveInjector } from './reflective_injector';\nimport { ReflectiveKey } from './reflective_key';\nexport interface InjectionError extends Error {\n    keys: ReflectiveKey[];\n    injectors: ReflectiveInjector[];\n    constructResolvingMessage: (keys: ReflectiveKey[]) => string;\n    addKey(injector: ReflectiveInjector, key: ReflectiveKey): void;\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the\n * {@link Injector} does not have a {@link Provider} for the given key.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n */\nexport declare function noProviderError(injector: ReflectiveInjector, key: ReflectiveKey): InjectionError;\n/**\n * Thrown when dependencies form a cycle.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n */\nexport declare function cyclicDependencyError(injector: ReflectiveInjector, key: ReflectiveKey): InjectionError;\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n */\nexport declare function instantiationError(injector: ReflectiveInjector, originalException: any, originalStack: any, key: ReflectiveKey): InjectionError;\n/**\n * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}\n * creation.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n */\nexport declare function invalidProviderError(provider: any): Error;\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n *\n */\nexport declare function noAnnotationError(typeOrFunc: Type<any> | Function, params: any[][]): Error;\n/**\n * Thrown when getting an object by index.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n *\n */\nexport declare function outOfBoundsError(index: number): Error;\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n */\nexport declare function mixingMultiProvidersWithRegularProvidersError(provider1: any, provider2: any): Error;\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/reflective_injector.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from './injector';\nimport { Provider } from './provider';\nimport { ResolvedReflectiveProvider } from './reflective_provider';\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * @usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * @Injectable()\n * class Engine {\n * }\n *\n * @Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @publicApi\n */\nexport declare abstract class ReflectiveInjector implements Injector {\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     */\n    static resolve(providers: Provider[]): ResolvedReflectiveProvider[];\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     */\n    static resolveAndCreate(providers: Provider[], parent?: Injector): ReflectiveInjector;\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     */\n    static fromResolvedProviders(providers: ResolvedReflectiveProvider[], parent?: Injector): ReflectiveInjector;\n    /**\n     * Parent of this injector.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     */\n    abstract readonly parent: Injector | null;\n    /**\n     * Resolves an array of providers and creates a child injector from those providers.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class ParentProvider {}\n     * class ChildProvider {}\n     *\n     * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n     * var child = parent.resolveAndCreateChild([ChildProvider]);\n     *\n     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n     * ```\n     */\n    abstract resolveAndCreateChild(providers: Provider[]): ReflectiveInjector;\n    /**\n     * Creates a child injector from previously resolved providers.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class ParentProvider {}\n     * class ChildProvider {}\n     *\n     * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n     * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n     *\n     * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n     * var child = parent.createChildFromResolved(childProviders);\n     *\n     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n     * ```\n     */\n    abstract createChildFromResolved(providers: ResolvedReflectiveProvider[]): ReflectiveInjector;\n    /**\n     * Resolves a provider and instantiates an object in the context of the injector.\n     *\n     * The created object does not get cached by the injector.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n     *\n     * var car = injector.resolveAndInstantiate(Car);\n     * expect(car.engine).toBe(injector.get(Engine));\n     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n     * ```\n     */\n    abstract resolveAndInstantiate(provider: Provider): any;\n    /**\n     * Instantiates an object using a resolved provider in the context of the injector.\n     *\n     * The created object does not get cached by the injector.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n     * var carProvider = ReflectiveInjector.resolve([Car])[0];\n     * var car = injector.instantiateResolved(carProvider);\n     * expect(car.engine).toBe(injector.get(Engine));\n     * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n     * ```\n     */\n    abstract instantiateResolved(provider: ResolvedReflectiveProvider): any;\n    abstract get(token: any, notFoundValue?: any): any;\n}\nexport declare class ReflectiveInjector_ implements ReflectiveInjector {\n    private static INJECTOR_KEY;\n    readonly parent: Injector | null;\n    keyIds: number[];\n    objs: any[];\n    /**\n     * Private\n     */\n    constructor(_providers: ResolvedReflectiveProvider[], _parent?: Injector);\n    get(token: any, notFoundValue?: any): any;\n    resolveAndCreateChild(providers: Provider[]): ReflectiveInjector;\n    createChildFromResolved(providers: ResolvedReflectiveProvider[]): ReflectiveInjector;\n    resolveAndInstantiate(provider: Provider): any;\n    instantiateResolved(provider: ResolvedReflectiveProvider): any;\n    getProviderAtIndex(index: number): ResolvedReflectiveProvider;\n    private _getMaxNumberOfObjects;\n    private _instantiateProvider;\n    private _instantiate;\n    private _getByReflectiveDependency;\n    private _getByKey;\n    private _getObjByKeyId;\n    readonly displayName: string;\n    toString(): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/reflective_key.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A unique object used for retrieving items from the {@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * @publicApi\n */\nexport declare class ReflectiveKey {\n    token: Object;\n    id: number;\n    readonly displayName: string;\n    /**\n     * Private\n     */\n    constructor(token: Object, id: number);\n    /**\n     * Retrieves a `Key` for a token.\n     */\n    static get(token: Object): ReflectiveKey;\n    /**\n     * @returns the number of keys registered in the system.\n     */\n    static readonly numberOfKeys: number;\n}\nexport declare class KeyRegistry {\n    private _allKeys;\n    get(token: Object): ReflectiveKey;\n    readonly numberOfKeys: number;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/reflective_provider.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Self, SkipSelf } from './metadata';\nimport { Provider } from './provider';\nimport { ReflectiveKey } from './reflective_key';\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nexport declare class ReflectiveDependency {\n    key: ReflectiveKey;\n    optional: boolean;\n    visibility: Self | SkipSelf | null;\n    constructor(key: ReflectiveKey, optional: boolean, visibility: Self | SkipSelf | null);\n    static fromKey(key: ReflectiveKey): ReflectiveDependency;\n}\n/**\n * An internal resolved representation of a `Provider` used by the `Injector`.\n *\n * @usageNotes\n * This is usually created automatically by `Injector.resolveAndCreate`.\n *\n * It can be created manually, as follows:\n *\n * ### Example\n *\n * ```typescript\n * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);\n * var injector = Injector.fromResolvedProviders(resolvedProviders);\n *\n * expect(injector.get('message')).toEqual('Hello');\n * ```\n *\n * @publicApi\n */\nexport interface ResolvedReflectiveProvider {\n    /**\n     * A key, usually a `Type<any>`.\n     */\n    key: ReflectiveKey;\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     */\n    resolvedFactories: ResolvedReflectiveFactory[];\n    /**\n     * Indicates if the provider is a multi-provider or a regular provider.\n     */\n    multiProvider: boolean;\n}\nexport declare class ResolvedReflectiveProvider_ implements ResolvedReflectiveProvider {\n    key: ReflectiveKey;\n    resolvedFactories: ResolvedReflectiveFactory[];\n    multiProvider: boolean;\n    readonly resolvedFactory: ResolvedReflectiveFactory;\n    constructor(key: ReflectiveKey, resolvedFactories: ResolvedReflectiveFactory[], multiProvider: boolean);\n}\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * @publicApi\n */\nexport declare class ResolvedReflectiveFactory {\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     */\n    factory: Function;\n    /**\n     * Arguments (dependencies) to the `factory` function.\n     */\n    dependencies: ReflectiveDependency[];\n    constructor(\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     */\n    factory: Function, \n    /**\n     * Arguments (dependencies) to the `factory` function.\n     */\n    dependencies: ReflectiveDependency[]);\n}\n/**\n * Resolve a list of Providers.\n */\nexport declare function resolveReflectiveProviders(providers: Provider[]): ResolvedReflectiveProvider[];\n/**\n * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n * multi providers have been merged.\n */\nexport declare function mergeResolvedReflectiveProviders(providers: ResolvedReflectiveProvider[], normalizedProvidersMap: Map<number, ResolvedReflectiveProvider>): Map<number, ResolvedReflectiveProvider>;\nexport declare function constructDependencies(typeOrFunc: any, dependencies?: any[]): ReflectiveDependency[];\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/scope.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from './injection_token';\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\nexport declare const APP_ROOT: InjectionToken<boolean>;\n"
  },
  {
    "path": "node_modules/@angular/core/src/di/util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\nimport { ClassSansProvider, ConstructorSansProvider, ExistingSansProvider, FactorySansProvider, StaticClassSansProvider, ValueSansProvider } from './provider';\nexport declare function convertInjectableProviderToFactory(type: Type<any>, provider?: ValueSansProvider | ExistingSansProvider | StaticClassSansProvider | ConstructorSansProvider | FactorySansProvider | ClassSansProvider): () => any;\n"
  },
  {
    "path": "node_modules/@angular/core/src/error_handler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\nexport declare class ErrorHandler {\n    handleError(error: any): void;\n}\nexport declare function wrappedError(message: string, originalError: any): Error;\n"
  },
  {
    "path": "node_modules/@angular/core/src/errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DebugContext } from './view';\nexport declare const ERROR_TYPE = \"ngType\";\nexport declare const ERROR_DEBUG_CONTEXT = \"ngDebugContext\";\nexport declare const ERROR_ORIGINAL_ERROR = \"ngOriginalError\";\nexport declare const ERROR_LOGGER = \"ngErrorLogger\";\nexport declare function getType(error: Error): Function;\nexport declare function getDebugContext(error: Error): DebugContext;\nexport declare function getOriginalError(error: Error): Error;\nexport declare function getErrorLogger(error: Error): (console: Console, ...values: any[]) => void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/event_emitter.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * @usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * @Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   @Output() open: EventEmitter<any> = new EventEmitter();\n *   @Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * @publicApi\n */\nexport declare class EventEmitter<T> extends Subject<T> {\n    /**\n     * Internal\n     */\n    __isAsync: boolean;\n    /**\n     * Creates an instance of this class that can\n     * deliver events synchronously or asynchronously.\n     *\n     * @param isAsync When true, deliver events asynchronously.\n     *\n     */\n    constructor(isAsync?: boolean);\n    /**\n     * Emits an event containing a given value.\n     * @param value The value to emit.\n     */\n    emit(value?: T): void;\n    /**\n     * Registers handlers for events emitted by this instance.\n     * @param generatorOrNext When supplied, a custom handler for emitted events.\n     * @param error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     */\n    subscribe(generatorOrNext?: any, error?: any, complete?: any): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/i18n/tokens.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport declare const LOCALE_ID: InjectionToken<string>;\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * @publicApi\n */\nexport declare const TRANSLATIONS: InjectionToken<string>;\n/**\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport declare const TRANSLATIONS_FORMAT: InjectionToken<string>;\n/**\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\n * that the compiler should use in case of missing translations:\n * - Error: throw if you have missing translations.\n * - Warning (default): show a warning in the console and/or shell.\n * - Ignore: do nothing.\n *\n * See the [i18n guide](guide/i18n#missing-translation) for more information.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * import { MissingTranslationStrategy } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   missingTranslation: MissingTranslationStrategy.Error\n * });\n * ```\n *\n * @publicApi\n */\nexport declare enum MissingTranslationStrategy {\n    Error = 0,\n    Warning = 1,\n    Ignore = 2\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/is_dev_mode.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * @publicApi\n */\nexport declare function isDevMode(): boolean;\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * @publicApi\n */\nexport declare function enableProdMode(): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/ivy_switch.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare const SWITCH_IVY_ENABLED__POST_R3__ = true;\nexport declare const ivyEnabled = false;\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { COMPILER_OPTIONS, Compiler, CompilerFactory, CompilerOptions, ModuleWithComponentFactories } from './linker/compiler';\nexport { ComponentFactory, ComponentRef } from './linker/component_factory';\nexport { ComponentFactoryResolver } from './linker/component_factory_resolver';\nexport { ElementRef } from './linker/element_ref';\nexport { NgModuleFactory, NgModuleRef } from './linker/ng_module_factory';\nexport { NgModuleFactoryLoader, getModuleFactory } from './linker/ng_module_factory_loader';\nexport { QueryList } from './linker/query_list';\nexport { SystemJsNgModuleLoader, SystemJsNgModuleLoaderConfig } from './linker/system_js_ng_module_factory_loader';\nexport { TemplateRef } from './linker/template_ref';\nexport { ViewContainerRef } from './linker/view_container_ref';\nexport { EmbeddedViewRef, ViewRef } from './linker/view_ref';\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/compiler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\nimport { StaticProvider } from '../di/provider';\nimport { MissingTranslationStrategy } from '../i18n/tokens';\nimport { ViewEncapsulation } from '../metadata';\nimport { Type } from '../type';\nimport { ComponentFactory } from './component_factory';\nimport { NgModuleFactory } from './ng_module_factory';\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * @publicApi\n */\nexport declare class ModuleWithComponentFactories<T> {\n    ngModuleFactory: NgModuleFactory<T>;\n    componentFactories: ComponentFactory<any>[];\n    constructor(ngModuleFactory: NgModuleFactory<T>, componentFactories: ComponentFactory<any>[]);\n}\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * @publicApi\n */\nexport declare class Compiler {\n    /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     */\n    compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T>;\n    /**\n     * Compiles the given NgModule and all of its components\n     */\n    compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>>;\n    /**\n     * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n     */\n    compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T>;\n    /**\n     * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     */\n    compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>): Promise<ModuleWithComponentFactories<T>>;\n    /**\n     * Clears all caches.\n     */\n    clearCache(): void;\n    /**\n     * Clears the cache for the given component/ngModule.\n     */\n    clearCacheFor(type: Type<any>): void;\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     */\n    getModuleId(moduleType: Type<any>): string | undefined;\n}\n/**\n * Options for creating a compiler\n *\n * @publicApi\n */\nexport declare type CompilerOptions = {\n    useJit?: boolean;\n    defaultEncapsulation?: ViewEncapsulation;\n    providers?: StaticProvider[];\n    missingTranslation?: MissingTranslationStrategy;\n    preserveWhitespaces?: boolean;\n};\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @publicApi\n */\nexport declare const COMPILER_OPTIONS: InjectionToken<CompilerOptions[]>;\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n */\nexport declare abstract class CompilerFactory {\n    abstract createCompiler(options?: CompilerOptions[]): Compiler;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/component_factory_resolver.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '../di/injector';\nimport { Type } from '../type';\nimport { ComponentFactory, ComponentRef } from './component_factory';\nimport { NgModuleRef } from './ng_module_factory';\nexport declare function noComponentFactoryError(component: Function): Error;\nexport declare function getComponent(error: Error): Type<any>;\n/**\n * @publicApi\n */\nexport declare abstract class ComponentFactoryResolver {\n    static NULL: ComponentFactoryResolver;\n    abstract resolveComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n}\nexport declare class CodegenComponentFactoryResolver implements ComponentFactoryResolver {\n    private _parent;\n    private _ngModule;\n    private _factories;\n    constructor(factories: ComponentFactory<any>[], _parent: ComponentFactoryResolver, _ngModule: NgModuleRef<any>);\n    resolveComponentFactory<T>(component: {\n        new (...args: any[]): T;\n    }): ComponentFactory<T>;\n}\nexport declare class ComponentFactoryBoundToModule<C> extends ComponentFactory<C> {\n    private factory;\n    private ngModule;\n    readonly selector: string;\n    readonly componentType: Type<any>;\n    readonly ngContentSelectors: string[];\n    readonly inputs: {\n        propName: string;\n        templateName: string;\n    }[];\n    readonly outputs: {\n        propName: string;\n        templateName: string;\n    }[];\n    constructor(factory: ComponentFactory<C>, ngModule: NgModuleRef<any>);\n    create(injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string | any, ngModule?: NgModuleRef<any>): ComponentRef<C>;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/component_factory.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef } from '../change_detection/change_detection';\nimport { Injector } from '../di/injector';\nimport { Type } from '../type';\nimport { ElementRef } from './element_ref';\nimport { NgModuleRef } from './ng_module_factory';\nimport { ViewRef } from './view_ref';\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\nexport declare abstract class ComponentRef<C> {\n    /**\n     * The host or anchor [element](guide/glossary#element) for this component instance.\n     */\n    abstract readonly location: ElementRef;\n    /**\n     * The [dependency injector](guide/glossary#injector) for this component instance.\n     */\n    abstract readonly injector: Injector;\n    /**\n     * This component instance.\n     */\n    abstract readonly instance: C;\n    /**\n     * The [host view](guide/glossary#view-tree) defined by the template\n     * for this component instance.\n     */\n    abstract readonly hostView: ViewRef;\n    /**\n     * The change detector for this component instance.\n     */\n    abstract readonly changeDetectorRef: ChangeDetectorRef;\n    /**\n     * The component type.\n     */\n    abstract readonly componentType: Type<any>;\n    /**\n     * Destroys the component instance and all of the data structures associated with it.\n     */\n    abstract destroy(): void;\n    /**\n     * A lifecycle hook that provides additional developer-defined cleanup\n     * functionality for the component.\n     * @param callback A handler function that cleans up developer-defined data\n     * associated with this component. Called when the `destroy()` method is invoked.\n     */\n    abstract onDestroy(callback: Function): void;\n}\n/**\n * @publicApi\n */\nexport declare abstract class ComponentFactory<C> {\n    /**\n     * The component's HTML selector.\n     */\n    abstract readonly selector: string;\n    /**\n     * The component's type\n     */\n    abstract readonly componentType: Type<any>;\n    /**\n     * Selector for all <ng-content> elements in the component.\n     */\n    abstract readonly ngContentSelectors: string[];\n    /**\n     * The inputs of the component.\n     */\n    abstract readonly inputs: {\n        propName: string;\n        templateName: string;\n    }[];\n    /**\n     * The outputs of the component.\n     */\n    abstract readonly outputs: {\n        propName: string;\n        templateName: string;\n    }[];\n    /**\n     * Creates a new component.\n     */\n    abstract create(injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string | any, ngModule?: NgModuleRef<any>): ComponentRef<C>;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/element_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectElementRef as render3InjectElementRef } from '../render3/view_engine_compatibility';\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n * @publicApi\n */\nexport declare class ElementRef<T = any> {\n    /**\n     * The underlying native element or `null` if direct access to native elements is not supported\n     * (e.g. when the application runs in a web worker).\n     *\n     * <div class=\"callout is-critical\">\n     *   <header>Use with caution</header>\n     *   <p>\n     *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n     *    data-binding provided by Angular instead. Alternatively you can take a look at {@link\n     * Renderer2}\n     *    which provides API that can safely be used even when direct access to native elements is not\n     *    supported.\n     *   </p>\n     *   <p>\n     *    Relying on direct DOM access creates tight coupling between your application and rendering\n     *    layers which will make it impossible to separate the two and deploy your application into a\n     *    web worker.\n     *   </p>\n     * </div>\n     *\n     */\n    nativeElement: T;\n    constructor(nativeElement: T);\n}\nexport declare const SWITCH_ELEMENT_REF_FACTORY__POST_R3__: typeof render3InjectElementRef;\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/ng_module_factory_loader.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModuleFactory } from './ng_module_factory';\n/**\n * Used to load ng module factories.\n *\n * @publicApi\n */\nexport declare abstract class NgModuleFactoryLoader {\n    abstract load(path: string): Promise<NgModuleFactory<any>>;\n}\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * @publicApi\n */\nexport declare function registerModuleFactory(id: string, factory: NgModuleFactory<any>): void;\nexport declare function clearModulesForTest(): void;\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * @publicApi\n */\nexport declare function getModuleFactory(id: string): NgModuleFactory<any>;\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/ng_module_factory.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '../di/injector';\nimport { Type } from '../type';\nimport { ComponentFactoryResolver } from './component_factory_resolver';\n/**\n * Represents an instance of an NgModule created via a {@link NgModuleFactory}.\n *\n * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n * NgModule Instance.\n *\n * @publicApi\n */\nexport declare abstract class NgModuleRef<T> {\n    /**\n     * The injector that contains all of the providers of the NgModule.\n     */\n    abstract readonly injector: Injector;\n    /**\n     * The ComponentFactoryResolver to get hold of the ComponentFactories\n     * declared in the `entryComponents` property of the module.\n     */\n    abstract readonly componentFactoryResolver: ComponentFactoryResolver;\n    /**\n     * The NgModule instance.\n     */\n    abstract readonly instance: T;\n    /**\n     * Destroys the module instance and all of the data structures associated with it.\n     */\n    abstract destroy(): void;\n    /**\n     * Allows to register a callback that will be called when the module is destroyed.\n     */\n    abstract onDestroy(callback: () => void): void;\n}\nexport interface InternalNgModuleRef<T> extends NgModuleRef<T> {\n    _bootstrapComponents: Type<any>[];\n}\n/**\n * @publicApi\n */\nexport declare abstract class NgModuleFactory<T> {\n    abstract readonly moduleType: Type<T>;\n    abstract create(parentInjector: Injector | null): NgModuleRef<T>;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/query_list.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * @Component({...})\n * class Container {\n *   @ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * @publicApi\n */\nexport declare class QueryList<T> {\n    readonly dirty = true;\n    private _results;\n    readonly changes: Observable<any>;\n    readonly length: number;\n    readonly first: T;\n    readonly last: T;\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    map<U>(fn: (item: T, index: number, array: T[]) => U): U[];\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     */\n    filter(fn: (item: T, index: number, array: T[]) => boolean): T[];\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    find(fn: (item: T, index: number, array: T[]) => boolean): T | undefined;\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    reduce<U>(fn: (prevValue: U, curValue: T, curIndex: number, array: T[]) => U, init: U): U;\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    forEach(fn: (item: T, index: number, array: T[]) => void): void;\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    some(fn: (value: T, index: number, array: T[]) => boolean): boolean;\n    toArray(): T[];\n    toString(): string;\n    reset(res: Array<T | any[]>): void;\n    notifyOnChanges(): void;\n    /** internal */\n    setDirty(): void;\n    /** internal */\n    destroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/system_js_ng_module_factory_loader.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Compiler } from './compiler';\nimport { NgModuleFactory } from './ng_module_factory';\nimport { NgModuleFactoryLoader } from './ng_module_factory_loader';\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * @publicApi\n */\nexport declare abstract class SystemJsNgModuleLoaderConfig {\n    /**\n     * Prefix to add when computing the name of the factory module for a given module name.\n     */\n    factoryPathPrefix: string;\n    /**\n     * Suffix to add when computing the name of the factory module for a given module name.\n     */\n    factoryPathSuffix: string;\n}\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n * @publicApi\n */\nexport declare class SystemJsNgModuleLoader implements NgModuleFactoryLoader {\n    private _compiler;\n    private _config;\n    constructor(_compiler: Compiler, config?: SystemJsNgModuleLoaderConfig);\n    load(path: string): Promise<NgModuleFactory<any>>;\n    private loadAndCompile;\n    private loadFactory;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/template_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectTemplateRef as render3InjectTemplateRef } from '../render3/view_engine_compatibility';\nimport { ElementRef } from './element_ref';\nimport { EmbeddedViewRef } from './view_ref';\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * @publicApi\n */\nexport declare abstract class TemplateRef<C> {\n    /**\n     * The anchor element in the parent view for this embedded view.\n     *\n     * The data-binding and injection contexts of embedded views created from this `TemplateRef`\n     * inherit from the contexts of this location.\n     *\n     * Typically new embedded views are attached to the view container of this location, but in\n     * advanced use-cases, the view can be attached to a different container while keeping the\n     * data-binding and injection context from the original location.\n     *\n     */\n    abstract readonly elementRef: ElementRef;\n    /**\n     * Creates a view object and attaches it to the view container of the parent view.\n     * @param context The context for the new view, inherited from the anchor element.\n     * @returns The new view object.\n     */\n    abstract createEmbeddedView(context: C): EmbeddedViewRef<C>;\n}\nexport declare const SWITCH_TEMPLATE_REF_FACTORY__POST_R3__: typeof render3InjectTemplateRef;\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/view_container_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '../di/injector';\nimport { injectViewContainerRef as render3InjectViewContainerRef } from '../render3/view_engine_compatibility';\nimport { ComponentFactory, ComponentRef } from './component_factory';\nimport { ElementRef } from './element_ref';\nimport { NgModuleRef } from './ng_module_factory';\nimport { TemplateRef } from './template_ref';\nimport { EmbeddedViewRef, ViewRef } from './view_ref';\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * @publicApi\n */\nexport declare abstract class ViewContainerRef {\n    /**\n     * Anchor element that specifies the location of this container in the containing view.\n     * Each view container can have only one anchor element, and each anchor element\n     * can have only a single view container.\n     *\n     * Root elements of views attached to this container become siblings of the anchor element in\n     * the rendered view.\n     *\n     * Access the `ViewContainerRef` of an element by placing a `Directive` injected\n     * with `ViewContainerRef` on the element, or use a `ViewChild` query.\n     *\n     * <!-- TODO: rename to anchorElement -->\n     */\n    abstract readonly element: ElementRef;\n    /**\n     * The [dependency injector](guide/glossary#injector) for this view container.\n     */\n    abstract readonly injector: Injector;\n    /** @deprecated No replacement */\n    abstract readonly parentInjector: Injector;\n    /**\n     * Destroys all views in this container.\n     */\n    abstract clear(): void;\n    /**\n     * Retrieves a view from this container.\n     * @param index The 0-based index of the view to retrieve.\n     * @returns The `ViewRef` instance, or null if the index is out of range.\n     */\n    abstract get(index: number): ViewRef | null;\n    /**\n     * Reports how many views are currently attached to this container.\n     * @returns The number of views.\n     */\n    abstract readonly length: number;\n    /**\n     * Instantiates an embedded view and inserts it\n     * into this container.\n     * @param templateRef The HTML template that defines the view.\n     * @param index The 0-based index at which to insert the new view into this container.\n     * If not specified, appends the new view as the last entry.\n     *\n     * @returns The `ViewRef` instance for the newly created view.\n     */\n    abstract createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number): EmbeddedViewRef<C>;\n    /**\n     * Instantiates a single component and inserts its host view into this container.\n     *\n     * @param componentFactory The factory to use.\n     * @param index The index at which to insert the new component's host view into this container.\n     * If not specified, appends the new view as the last entry.\n     * @param injector The injector to use as the parent for the new component.\n     * @param projectableNodes\n     * @param ngModule\n     *\n     * @returns The new component instance, containing the host view.\n     *\n     */\n    abstract createComponent<C>(componentFactory: ComponentFactory<C>, index?: number, injector?: Injector, projectableNodes?: any[][], ngModule?: NgModuleRef<any>): ComponentRef<C>;\n    /**\n     * Inserts a view into this container.\n     * @param viewRef The view to insert.\n     * @param index The 0-based index at which to insert the view.\n     * If not specified, appends the new view as the last entry.\n     * @returns The inserted `ViewRef` instance.\n     *\n     */\n    abstract insert(viewRef: ViewRef, index?: number): ViewRef;\n    /**\n     * Moves a view to a new location in this container.\n     * @param viewRef The view to move.\n     * @param index The 0-based index of the new location.\n     * @returns The moved `ViewRef` instance.\n     */\n    abstract move(viewRef: ViewRef, currentIndex: number): ViewRef;\n    /**\n     * Returns the index of a view within the current container.\n     * @param viewRef The view to query.\n     * @returns The 0-based index of the view's position in this container,\n     * or `-1` if this container doesn't contain the view.\n     */\n    abstract indexOf(viewRef: ViewRef): number;\n    /**\n     * Destroys a view attached to this container\n     * @param index The 0-based index of the view to destroy.\n     * If not specified, the last view in the container is removed.\n     */\n    abstract remove(index?: number): void;\n    /**\n     * Detaches a view from this container without destroying it.\n     * Use along with `insert()` to move a view within the current container.\n     * @param index The 0-based index of the view to detach.\n     * If not specified, the last view in the container is detached.\n     */\n    abstract detach(index?: number): ViewRef | null;\n}\nexport declare const SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__: typeof render3InjectViewContainerRef;\n"
  },
  {
    "path": "node_modules/@angular/core/src/linker/view_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef } from '../application_ref';\nimport { ChangeDetectorRef } from '../change_detection/change_detector_ref';\n/**\n * Represents an Angular [view](guide/glossary#view),\n * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n * Also serves as the base class\n * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n *\n * @see `EmbeddedViewRef`\n *\n * @publicApi\n */\nexport declare abstract class ViewRef extends ChangeDetectorRef {\n    /**\n     * Destroys this view and all of the data structures associated with it.\n     */\n    abstract destroy(): void;\n    /**\n     * Reports whether this view has been destroyed.\n     * @returns True after the `destroy()` method has been called, false otherwise.\n     */\n    abstract readonly destroyed: boolean;\n    /**\n     * A lifecycle hook that provides additional developer-defined cleanup\n     * functionality for views.\n     * @param callback A handler function that cleans up developer-defined data\n     * associated with a view. Called when the `destroy()` method is invoked.\n     */\n    abstract onDestroy(callback: Function): any /** TODO #9100 */;\n}\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * @usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * @publicApi\n */\nexport declare abstract class EmbeddedViewRef<C> extends ViewRef {\n    /**\n     * The context for this view, inherited from the anchor element.\n     */\n    abstract readonly context: C;\n    /**\n     * The root nodes for this embedded view.\n     */\n    abstract readonly rootNodes: any[];\n}\nexport interface InternalViewRef extends ViewRef {\n    detachFromAppRef(): void;\n    attachToAppRef(appRef: ApplicationRef): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/metadata.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { ANALYZE_FOR_ENTRY_COMPONENTS, Attribute, ContentChild, ContentChildDecorator, ContentChildren, ContentChildrenDecorator, Query, ViewChild, ViewChildDecorator, ViewChildren, ViewChildrenDecorator } from './metadata/di';\nexport { Component, ComponentDecorator, Directive, DirectiveDecorator, HostBinding, HostListener, Input, Output, Pipe } from './metadata/directives';\nexport { AfterContentChecked, AfterContentInit, AfterViewChecked, AfterViewInit, DoCheck, OnChanges, OnDestroy, OnInit } from './metadata/lifecycle_hooks';\nexport { CUSTOM_ELEMENTS_SCHEMA, DoBootstrap, ModuleWithProviders, NO_ERRORS_SCHEMA, NgModule, SchemaMetadata } from './metadata/ng_module';\nexport { ViewEncapsulation } from './metadata/view';\n"
  },
  {
    "path": "node_modules/@angular/core/src/metadata/di.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\nimport { Type } from '../type';\n/**\n * This token can be used to create a virtual provider that will populate the\n * `entryComponents` fields of components and ng modules based on its `useValue`.\n * All components that are referenced in the `useValue` value (either directly\n * or in a nested array or map) will be added to the `entryComponents` property.\n *\n * @usageNotes\n * ### Example\n * The following example shows how the router can populate the `entryComponents`\n * field of an NgModule based on the router configuration which refers\n * to components.\n *\n * ```typescript\n * // helper function inside the router\n * function provideRoutes(routes) {\n *   return [\n *     {provide: ROUTES, useValue: routes},\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n *   ];\n * }\n *\n * // user code\n * let routes = [\n *   {path: '/root', component: RootComp},\n *   {path: '/teams', component: TeamsComp}\n * ];\n *\n * @NgModule({\n *   providers: [provideRoutes(routes)]\n * })\n * class ModuleWithRoutes {}\n * ```\n *\n * @publicApi\n */\nexport declare const ANALYZE_FOR_ENTRY_COMPONENTS: InjectionToken<any>;\n/**\n * Type of the Attribute decorator / constructor function.\n *\n *\n */\nexport interface AttributeDecorator {\n    /**\n     * Specifies that a constant attribute value should be injected.\n     *\n     * The directive can inject constant string literals of host element attributes.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * Suppose we have an `<input>` element and want to know its `type`.\n     *\n     * ```html\n     * <input type=\"text\">\n     * ```\n     *\n     * A decorator can inject string literal `text` like so:\n     *\n     * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}\n     *\n     * ### Example as TypeScript Decorator\n     *\n     * {@example core/ts/metadata/metadata.ts region='attributeFactory'}\n     *\n     * ### Example as ES5 annotation\n     *\n     * ```\n     * var MyComponent = function(title) {\n     *   ...\n     * };\n     *\n     * MyComponent.annotations = [\n     *   new ng.Component({...})\n     * ]\n     * MyComponent.parameters = [\n     *   [new ng.Attribute('title')]\n     * ]\n     * ```\n     *\n     *\n     */\n    (name: string): any;\n    new (name: string): Attribute;\n}\n/**\n * Type of the Attribute metadata.\n */\nexport interface Attribute {\n    attributeName?: string;\n}\n/**\n * Attribute decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const Attribute: AttributeDecorator;\n/**\n * Type of the Query metadata.\n */\nexport interface Query {\n    descendants: boolean;\n    first: boolean;\n    read: any;\n    isViewQuery: boolean;\n    selector: any;\n}\n/**\n * Base class for query metadata.\n *\n * @see `ContentChildren`.\n * @see `ContentChild`.\n * @see `ViewChildren`.\n * @see `ViewChild`.\n *\n * @publicApi\n */\nexport declare abstract class Query {\n}\n/**\n * Type of the ContentChildren decorator / constructor function.\n *\n * @see `ContentChildren`.\n * @publicApi\n */\nexport interface ContentChildrenDecorator {\n    /**\n     * Configures a content query.\n     *\n     * You can use ContentChildren to get the `QueryList` of elements or directives from the\n     * content DOM. Any time a child element is added, removed, or moved, the query list will be\n     * updated, and the changes observable of the query list will emit a new value.\n     *\n     * Content queries are set before the `ngAfterContentInit` callback is called.\n     *\n     * **Metadata Properties**:\n     *\n     * * **selector** - the directive type or the name used for querying.\n     * * **descendants** - include only direct children or all descendants.\n     * * **read** - read a different token from the queried elements.\n     *\n     * @usageNotes\n     * ### Basic Example\n     *\n     * Here is a simple demonstration of how the `ContentChildren` decorator can be used.\n     *\n     * {@example core/di/ts/contentChildren/content_children_howto.ts region='HowTo'}\n     *\n     * ### Tab-pane Example\n     *\n     * Here is a slightly more realistic example that shows how `ContentChildren` decorators\n     * can be used to implement a tab pane component.\n     *\n     * {@example core/di/ts/contentChildren/content_children_example.ts region='Component'}\n     *\n     * @Annotation\n     */\n    (selector: Type<any> | Function | string, opts?: {\n        descendants?: boolean;\n        read?: any;\n    }): any;\n    new (selector: Type<any> | Function | string, opts?: {\n        descendants?: boolean;\n        read?: any;\n    }): Query;\n}\n/**\n * Type of the ContentChildren metadata.\n *\n *\n * @Annotation\n */\nexport declare type ContentChildren = Query;\n/**\n * ContentChildren decorator and metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nexport declare const ContentChildren: ContentChildrenDecorator;\n/**\n * Type of the ContentChild decorator / constructor function.\n *\n * @publicApi\n */\nexport interface ContentChildDecorator {\n    /**\n     * Configures a content query.\n     *\n     * You can use ContentChild to get the first element or the directive matching the selector from\n     * the content DOM. If the content DOM changes, and a new child matches the selector,\n     * the property will be updated.\n     *\n     * Content queries are set before the `ngAfterContentInit` callback is called.\n     *\n     * **Metadata Properties**:\n     *\n     * * **selector** - the directive type or the name used for querying.\n     * * **read** - read a different token from the queried element.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/di/ts/contentChild/content_child_howto.ts region='HowTo'}\n     *\n     * ### Example\n     *\n     * {@example core/di/ts/contentChild/content_child_example.ts region='Component'}\n     *\n     * @Annotation\n     */\n    (selector: Type<any> | Function | string, opts?: {\n        read?: any;\n    }): any;\n    new (selector: Type<any> | Function | string, opts?: {\n        read?: any;\n    }): ContentChild;\n}\n/**\n * Type of the ContentChild metadata.\n *\n * @see `ContentChild`.\n *\n *\n */\nexport declare type ContentChild = Query;\n/**\n * ContentChild decorator and metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nexport declare const ContentChild: ContentChildDecorator;\n/**\n * Type of the ViewChildren decorator / constructor function.\n *\n * @see `ViewChildren`.\n *\n * @publicApi\n */\nexport interface ViewChildrenDecorator {\n    /**\n     * Configures a view query.\n     *\n     * You can use ViewChildren to get the `QueryList` of elements or directives from the\n     * view DOM. Any time a child element is added, removed, or moved, the query list will be updated,\n     * and the changes observable of the query list will emit a new value.\n     *\n     * View queries are set before the `ngAfterViewInit` callback is called.\n     *\n     * **Metadata Properties**:\n     *\n     * * **selector** - the directive type or the name used for querying.\n     * * **read** - read a different token from the queried elements.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * {@example core/di/ts/viewChildren/view_children_howto.ts region='HowTo'}\n     *\n     * ### Example\n     *\n     * {@example core/di/ts/viewChildren/view_children_example.ts region='Component'}\n     *\n     * @Annotation\n     */\n    (selector: Type<any> | Function | string, opts?: {\n        read?: any;\n    }): any;\n    new (selector: Type<any> | Function | string, opts?: {\n        read?: any;\n    }): ViewChildren;\n}\n/**\n * Type of the ViewChildren metadata.\n */\nexport declare type ViewChildren = Query;\n/**\n * ViewChildren decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const ViewChildren: ViewChildrenDecorator;\n/**\n * Type of the ViewChild decorator / constructor function.\n *\n * @see `ViewChild`.\n * @publicApi\n */\nexport interface ViewChildDecorator {\n    /**\n     * @description\n     * Property decorator that configures a view query.\n     * The change detector looks for the first element or the directive matching the selector\n     * in the view DOM. If the view DOM changes, and a new child matches the selector,\n     * the property is updated.\n     *\n     * View queries are set before the `ngAfterViewInit` callback is called.\n     *\n     * **Metadata Properties**:\n     *\n     * * **selector** - the directive type or the name used for querying.\n     * * **read** - read a different token from the queried elements.\n     *\n     * Supported selectors include:\n     *   * any class with the `@Component` or `@Directive` decorator\n     *   * a template reference variable as a string (e.g. query `<my-component #cmp></my-component>\n     * with `@ViewChild('cmp')`)\n     *   * any provider defined in the child component tree of the current component (e.g.\n     * `@ViewChild(SomeService) someService: SomeService`)\n     *   * any provider defined through a string token (e.g. `@ViewChild('someToken') someTokenVal:\n     * any`)\n     *   * a `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChild(TemplateRef)\n     * template;`)\n     *\n     * @usageNotes\n     *\n     * {@example core/di/ts/viewChild/view_child_example.ts region='Component'}\n     *\n     * ### Example\n     *\n     * {@example core/di/ts/viewChild/view_child_howto.ts region='HowTo'}\n     *\n     * ### Example\n     *\n     * {@example core/di/ts/viewChild/view_child_example.ts region='Component'}\n     *\n     * @Annotation\n     */\n    (selector: Type<any> | Function | string, opts?: {\n        read?: any;\n    }): any;\n    new (selector: Type<any> | Function | string, opts?: {\n        read?: any;\n    }): ViewChild;\n}\n/**\n * Type of the ViewChild metadata.\n */\nexport declare type ViewChild = Query;\n/**\n * ViewChild decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const ViewChild: ViewChildDecorator;\n"
  },
  {
    "path": "node_modules/@angular/core/src/metadata/directives.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy } from '../change_detection/constants';\nimport { Provider } from '../di';\nimport { compileComponent as render3CompileComponent, compileDirective as render3CompileDirective } from '../render3/jit/directive';\nimport { compilePipe as render3CompilePipe } from '../render3/jit/pipe';\nimport { Type } from '../type';\nimport { TypeDecorator } from '../util/decorators';\nimport { ViewEncapsulation } from './view';\n/**\n * Type of the Directive decorator / constructor function.\n * @publicApi\n */\nexport interface DirectiveDecorator {\n    /**\n     * Marks a class as an Angular directive. You can define your own\n     * directives to attach custom behavior to elements in the DOM.\n     * The options provide configuration metadata that determines\n     * how the directive should be processed, instantiated and used at\n     * runtime.\n     *\n     * Directive classes, like component classes, can implement\n     * [life-cycle hooks](guide/lifecycle-hooks) to influence their configuration and behavior.\n     *\n     *\n     * @usageNotes\n     * To define a directive, mark the class with the decorator and provide metadata.\n     *\n     * ```\n     * import {Directive} from '@angular/core';\n     *\n     * @Directive({\n     *   selector: 'my-directive',\n     * })\n     * export class MyDirective {\n     * ...\n     * }\n     * ```\n     *\n     * ### Declaring directives\n     *\n     * Directives are [declarables](guide/glossary#declarable).\n     * They must be declared by an NgModule\n     * in order to be usable in an app.\n     *\n     * A directive must belong to exactly one NgModule. Do not re-declare\n     * a directive imported from another module.\n     * List the directive class in the `declarations` field of an NgModule.\n     *\n     * ```\n     * declarations: [\n     *  AppComponent,\n     *  MyDirective\n     * ],\n     * ```\n     *\n     * @Annotation\n     */\n    (obj: Directive): TypeDecorator;\n    /**\n     * See the `Directive` decorator.\n     */\n    new (obj: Directive): Directive;\n}\nexport interface Directive {\n    /**\n     * The CSS selector that triggers the instantiation of a directive.\n     *\n     * Declare as one of the following:\n     *\n     * - `element-name`: select by element name.\n     * - `.class`: select by class name.\n     * - `[attribute]`: select by attribute name.\n     * - `[attribute=value]`: select by attribute name and value.\n     * - `:not(sub_selector)`: select only if the element does not match the `sub_selector`.\n     * - `selector1, selector2`: select if either `selector1` or `selector2` matches.\n     *\n     * Angular only allows directives to trigger on CSS selectors that do not cross element\n     * boundaries. For example, consider a directive with an `input[type=text]` selector.\n     * For the following HTML, the directive is instantiated only on the\n     * `<input type=\"text\">` element.\n     *\n     * ```html\n     * <form>\n     *   <input type=\"text\">\n     *   <input type=\"radio\">\n     * <form>\n     * ```\n     *\n     */\n    selector?: string;\n    /**\n     * Enumerates the set of data-bound input properties for a directive\n     *\n     * Angular automatically updates input properties during change detection.\n     * The `inputs` property defines a set of `directiveProperty` to `bindingProperty`\n     * configuration:\n     *\n     * - `directiveProperty` specifies the component property where the value is written.\n     * - `bindingProperty` specifies the DOM property where the value is read from.\n     *\n     * When `bindingProperty` is not provided, it is assumed to be equal to `directiveProperty`.\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * The following example creates a component with two data-bound properties.\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'bank-account',\n     *   inputs: ['bankName', 'id: account-id'],\n     *   template: `\n     *     Bank Name: {{bankName}}\n     *     Account Id: {{id}}\n     *   `\n     * })\n     * class BankAccount {\n     *   bankName: string;\n     *   id: string;\n     *\n     * ```\n     *\n     */\n    inputs?: string[];\n    /**\n     * Enumerates the set of event-bound output properties.\n     *\n     * When an output property emits an event, an event handler attached to that event\n     * in the template is invoked.\n     *\n     * The `outputs` property defines a set of `directiveProperty` to `bindingProperty`\n     * configuration:\n     *\n     * - `directiveProperty` specifies the component property that emits events.\n     * - `bindingProperty` specifies the DOM property the event handler is attached to.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * ```typescript\n     * @Directive({\n     *   selector: 'child-dir',\n     *   exportAs: 'child'\n     * })\n     * class ChildDir {\n     * }\n     *\n     * @Component({\n     *   selector: 'main',\n     *   template: `<child-dir #c=\"child\"></child-dir>`\n     * })\n     * class MainComponent {\n     * }\n     * ```\n     *\n     */\n    outputs?: string[];\n    /**\n     * A set of injection tokens that allow the DI system to\n     * provide a dependency to this directive or component.\n     */\n    providers?: Provider[];\n    /**\n     * Defines the name that can be used in the template to assign this directive to a variable.\n     *\n     * @usageNotes\n     *\n     * ### Simple Example\n     *\n     * ```\n     * @Directive({\n     *   selector: 'child-dir',\n     *   exportAs: 'child'\n     * })\n     * class ChildDir {\n     * }\n     *\n     * @Component({\n     *   selector: 'main',\n     *   template: `<child-dir #c=\"child\"></child-dir>`\n     * })\n     * class MainComponent {\n     * }\n     * ```\n     *\n     */\n    exportAs?: string;\n    /**\n     * Configures the queries that will be injected into the directive.\n     *\n     * Content queries are set before the `ngAfterContentInit` callback is called.\n     * View queries are set before the `ngAfterViewInit` callback is called.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * The following example shows how queries are defined\n     * and when their results are available in lifecycle hooks:\n     *\n     * ```\n     * @Component({\n     *   selector: 'someDir',\n     *   queries: {\n     *     contentChildren: new ContentChildren(ChildDirective),\n     *     viewChildren: new ViewChildren(ChildDirective)\n     *   },\n     *   template: '<child-directive></child-directive>'\n     * })\n     * class SomeDir {\n     *   contentChildren: QueryList<ChildDirective>,\n     *   viewChildren: QueryList<ChildDirective>\n     *\n     *   ngAfterContentInit() {\n     *     // contentChildren is set\n     *   }\n     *\n     *   ngAfterViewInit() {\n     *     // viewChildren is set\n     *   }\n     * }\n     * ```\n     *\n     * @Annotation\n     */\n    queries?: {\n        [key: string]: any;\n    };\n    /**\n     * If true, this directive/component will be skipped by the AOT compiler and so will always be\n     * compiled using JIT.\n     *\n     * This exists to support future Ivy work and has no effect currently.\n     */\n    jit?: true;\n}\n/**\n * Directive decorator and metadata.\n *\n * @Annotation\n */\nexport interface Directive {\n    /**\n     * The CSS selector that identifies this directive in a template\n     * and triggers instantiation of the directive.\n     *\n     * Declare as one of the following:\n     *\n     * - `element-name`: Select by element name.\n     * - `.class`: Select by class name.\n     * - `[attribute]`: Select by attribute name.\n     * - `[attribute=value]`: Select by attribute name and value.\n     * - `:not(sub_selector)`: Select only if the element does not match the `sub_selector`.\n     * - `selector1, selector2`: Select if either `selector1` or `selector2` matches.\n     *\n     * Angular only allows directives to apply on CSS selectors that do not cross\n     * element boundaries.\n     *\n     * For the following template HTML, a directive with an `input[type=text]` selector,\n     * would be instantiated only on the `<input type=\"text\">` element.\n     *\n     * ```html\n     * <form>\n     *   <input type=\"text\">\n     *   <input type=\"radio\">\n     * <form>\n     * ```\n     *\n     */\n    selector?: string;\n    /**\n     * The set of event-bound output properties.\n     * When an output property emits an event, an event handler attached\n     * to that event in the template is invoked.\n     *\n     * Each output property maps a `directiveProperty` to a `bindingProperty`:\n     * - `directiveProperty` specifies the component property that emits events.\n     * - `bindingProperty` specifies the HTML attribute the event handler is attached to.\n     *\n     */\n    outputs?: string[];\n    /**\n     * Maps class properties to host element bindings for properties,\n     * attributes, and events, using a set of key-value pairs.\n     *\n     * Angular automatically checks host property bindings during change detection.\n     * If a binding changes, Angular updates the directive's host element.\n     *\n     * When the key is a property of the host element, the property value is\n     * the propagated to the specified DOM property.\n     *\n     * When the key is a static attribute in the DOM, the attribute value\n     * is propagated to the specified property in the host element.\n     *\n     * For event handling:\n     * - The key is the DOM event that the directive listens to.\n     * To listen to global events, add the target to the event name.\n     * The target can be `window`, `document` or `body`.\n     * - The value is the statement to execute when the event occurs. If the\n     * statement evalueates to `false`, then `preventDefault` is applied on the DOM\n     * event. A handler method can refer to the `$event` local variable.\n     *\n     */\n    host?: {\n        [key: string]: string;\n    };\n    /**\n     * Configures the [injector](guide/glossary#injector) of this\n     * directive or component with a [token](guide/glossary#di-token)\n     * that maps to a [provider](guide/glossary#provider) of a dependency.\n     */\n    providers?: Provider[];\n    /**\n     * The name or names that can be used in the template to assign this directive to a variable.\n     * For multiple names, use a comma-separated string.\n     *\n     */\n    exportAs?: string;\n    /**\n     * Configures the queries that will be injected into the directive.\n     *\n     * Content queries are set before the `ngAfterContentInit` callback is called.\n     * View queries are set before the `ngAfterViewInit` callback is called.\n     *\n     */\n    queries?: {\n        [key: string]: any;\n    };\n}\n/**\n * Type of the Directive metadata.\n *\n * @publicApi\n */\nexport declare const Directive: DirectiveDecorator;\n/**\n * Component decorator interface\n *\n * @publicApi\n */\nexport interface ComponentDecorator {\n    /**\n     * Decorator that marks a class as an Angular component and provides configuration\n     * metadata that determines how the component should be processed,\n     * instantiated, and used at runtime.\n     *\n     * Components are the most basic UI building block of an Angular app.\n     * An Angular app contains a tree of Angular components.\n     *\n     * Angular components are a subset of directives, always associated with a template.\n     * Unlike other directives, only one component can be instantiated per an element in a template.\n     *\n     * A component must belong to an NgModule in order for it to be available\n     * to another component or application. To make it a member of an NgModule,\n     * list it in the `declarations` field of the `@NgModule` metadata.\n     *\n     * Note that, in addition to these options for configuring a directive,\n     * you can control a component's runtime behavior by implementing\n     * life-cycle hooks. For more information, see the\n     * [Lifecycle Hooks](guide/lifecycle-hooks) guide.\n     *\n     * @usageNotes\n     *\n     * ### Setting component inputs\n     *\n     * The following example creates a component with two data-bound properties,\n     * specified by the `inputs` value.\n     *\n     * <code-example path=\"core/ts/metadata/directives.ts\" region=\"component-input\">\n     * </code-example>\n     *\n     *\n     * ### Setting component outputs\n     *\n     * The following example shows two event emitters that emit on an interval. One\n     * emits an output every second, while the other emits every five seconds.\n     *\n     * {@example core/ts/metadata/directives.ts region='component-output-interval'}\n     *\n     * ### Injecting a class with a view provider\n     *\n     * The following simple example injects a class into a component\n     * using the view provider specified in component metadata:\n     *\n     * ```\n     * class Greeter {\n     *    greet(name:string) {\n     *      return 'Hello ' + name + '!';\n     *    }\n     * }\n     *\n     * @Directive({\n     *   selector: 'needs-greeter'\n     * })\n     * class NeedsGreeter {\n     *   greeter:Greeter;\n     *\n     *   constructor(greeter:Greeter) {\n     *     this.greeter = greeter;\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'greet',\n     *   viewProviders: [\n     *     Greeter\n     *   ],\n     *   template: `<needs-greeter></needs-greeter>`\n     * })\n     * class HelloWorld {\n     * }\n     *\n     * ```\n     *\n     * ### Preserving whitespace\n     *\n     * Removing whitespace can greatly reduce AOT-generated code size and speed up view creation.\n     * As of Angular 6, the default for `preserveWhitespaces` is false (whitespace is removed).\n     * To change the default setting for all components in your application, set\n     * the `preserveWhitespaces` option of the AOT compiler.\n     *\n     * By default, the AOT compiler removes whitespace characters as follows:\n     * * Trims all whitespaces at the beginning and the end of a template.\n     * * Removes whitespace-only text nodes. For example,\n     *\n     * ```\n     * <button>Action 1</button>  <button>Action 2</button>\n     * ```\n     *\n     * becomes:\n     *\n     * ```\n     * <button>Action 1</button><button>Action 2</button>\n     * ```\n     *\n     * * Replaces a series of whitespace characters in text nodes with a single space.\n     * For example, `<span>\\n some text\\n</span>` becomes `<span> some text </span>`.\n     * * Does NOT alter text nodes inside HTML tags such as `<pre>` or `<textarea>`,\n     * where whitespace characters are significant.\n     *\n     * Note that these transformations can influence DOM nodes layout, although impact\n     * should be minimal.\n     *\n     * You can override the default behavior to preserve whitespace characters\n     * in certain fragments of a template. For example, you can exclude an entire\n     * DOM sub-tree by using the `ngPreserveWhitespaces` attribute:\n     *\n     * ```html\n     * <div ngPreserveWhitespaces>\n     *     whitespaces are preserved here\n     *     <span>    and here </span>\n     * </div>\n     * ```\n     *\n     * You can force a single space to be preserved in a text node by using `&ngsp;`,\n     * which is replaced with a space character by Angular's template\n     * compiler:\n     *\n     * ```html\n     * <a>Spaces</a>&ngsp;<a>between</a>&ngsp;<a>links.</a>\n     * <!-->compiled to be equivalent to:</>\n     *  <a>Spaces</a> <a>between</a> <a>links.</a>\n     * ```\n     *\n     * Note that sequences of `&ngsp;` are still collapsed to just one space character when\n     * the `preserveWhitespaces` option is set to `false`.\n     *\n     * ```html\n     * <a>before</a>&ngsp;&ngsp;&ngsp;<a>after</a>\n     * <!-->compiled to be equivalent to:</>\n     *  <a>Spaces</a> <a>between</a> <a>links.</a>\n     * ```\n     *\n     * To preserve sequences of whitespace characters, use the\n     * `ngPreserveWhitespaces` attribute.\n     *\n     * @Annotation\n     */\n    (obj: Component): TypeDecorator;\n    /**\n     * See the `@Component` decorator.\n     */\n    new (obj: Component): Component;\n}\n/**\n * Supplies configuration metadata for an Angular component.\n */\nexport interface Component extends Directive {\n    /**\n     * The change-detection strategy to use for this component.\n     *\n     * When a component is instantiated, Angular creates a change detector,\n     * which is responsible for propagating the component's bindings.\n     * The strategy is one of:\n     * - `ChangeDetectionStrategy#OnPush` sets the strategy to `CheckOnce` (on demand).\n     * - `ChangeDetectionStrategy#Default` sets the strategy to `CheckAlways`.\n     */\n    changeDetection?: ChangeDetectionStrategy;\n    /**\n     * Defines the set of injectable objects that are visible to its view DOM children.\n     * See [example](#injecting-a-class-with-a-view-provider).\n     *\n     */\n    viewProviders?: Provider[];\n    /**\n     * The module ID of the module that contains the component.\n     * The component must be able to resolve relative URLs for templates and styles.\n     * SystemJS exposes the `__moduleName` variable within each module.\n     * In CommonJS, this can  be set to `module.id`.\n     *\n     */\n    moduleId?: string;\n    /**\n     * The URL of a template file for an Angular component. If provided,\n     * do not supply an inline template using `template`.\n     *\n     */\n    templateUrl?: string;\n    /**\n     * An inline template for an Angular component. If provided,\n     * do not supply a template file using `templateUrl`.\n     *\n     */\n    template?: string;\n    /**\n     * One or more URLs for files containing CSS stylesheets to use\n     * in this component.\n     */\n    styleUrls?: string[];\n    /**\n     * One or more inline CSS stylesheets to use\n     * in this component.\n     */\n    styles?: string[];\n    /**\n     * One or more animation `trigger()` calls, containing\n     * `state()` and `transition()` definitions.\n     * See the [Animations guide](/guide/animations) and animations API documentation.\n     *\n     */\n    animations?: any[];\n    /**\n     * An encapsulation policy for the template and CSS styles. One of:\n     * - `ViewEncapsulation.Native`: Use shadow roots. This works\n     * only if natively available on the platform.\n     * - `ViewEncapsulation.Emulated`: Use shimmed CSS that\n     * emulates the native behavior.\n     * - `ViewEncapsulation.None`: Use global CSS without any\n     * encapsulation.\n     *\n     * If not supplied, the value is taken from `CompilerOptions`. The default compiler option is\n     * `ViewEncapsulation.Emulated`.\n     *\n     * If the policy is set to `ViewEncapsulation.Emulated` and the component has no `styles`\n     * or `styleUrls` specified, the policy is automatically switched to `ViewEncapsulation.None`.\n     */\n    encapsulation?: ViewEncapsulation;\n    /**\n     * Overrides the default encapsulation start and end delimiters (`{{` and `}}`)\n     */\n    interpolation?: [string, string];\n    /**\n     * A set of components that should be compiled along with\n     * this component. For each component listed here,\n     * Angular creates a {@link ComponentFactory} and stores it in the\n     * {@link ComponentFactoryResolver}.\n     */\n    entryComponents?: Array<Type<any> | any[]>;\n    /**\n     * True to preserve or false to remove potentially superfluous whitespace characters\n     * from the compiled template. Whitespace characters are those matching the `\\s`\n     * character class in JavaScript regular expressions. Default is false, unless\n     * overridden in compiler options.\n     */\n    preserveWhitespaces?: boolean;\n}\n/**\n * Component decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const Component: ComponentDecorator;\n/**\n * Type of the Pipe decorator / constructor function.\n *\n * @publicApi\n */\nexport interface PipeDecorator {\n    /**\n     * Declares a reusable pipe function, and supplies configuration metadata.\n     *\n     */\n    (obj: Pipe): TypeDecorator;\n    /**\n     * See the `Pipe` decorator.\n     */\n    new (obj: Pipe): Pipe;\n}\n/**\n * Type of the Pipe metadata.\n */\nexport interface Pipe {\n    /**\n     * The pipe name to use in template bindings.\n     *\n     */\n    name: string;\n    /**\n     * When true, the pipe is pure, meaning that the\n     * `transform()` method is invoked only when its input arguments\n     * change. Pipes are pure by default.\n     *\n     * If the pipe has internal state (that is, the result\n     * depends on state other than its arguments), set `pure` to false.\n     * In this case, the pipe is invoked on each change-detection cycle,\n     * even if the arguments have not changed.\n     */\n    pure?: boolean;\n}\n/**\n * @Annotation\n * @publicApi\n */\nexport declare const Pipe: PipeDecorator;\n/**\n * @publicApi\n */\nexport interface InputDecorator {\n    /**\n     * Decorator that marks a class as pipe and supplies configuration metadata.\n     *\n     * A pipe class must implement the `PipeTransform` interface.\n     * For example, if the name is \"myPipe\", use a template binding expression\n     * such as the following:\n     *\n     * ```\n     * {{ exp | myPipe }}\n     * ```\n     *\n     * The result of the expression is passed to the pipe's `transform()` method.\n     *\n     * A pipe must belong to an NgModule in order for it to be available\n     * to a template. To make it a member of an NgModule,\n     * list it in the `declarations` field of the `@NgModule` metadata.\n     *\n     */\n    (bindingPropertyName?: string): any;\n    new (bindingPropertyName?: string): any;\n}\n/**\n * Type of metadata for an `Input` property.\n *\n *\n */\nexport interface Input {\n    /**\n     * Decorator that marks a class field as an input property and supplies configuration metadata.\n     * Declares a data-bound input property, which Angular automatically updates\n     * during change detection.\n     *\n     * @usageNotes\n     *\n     * You can supply an optional name to use in templates when the\n     * component is instantiated, that maps to the\n     * name of the bound property. By default, the original\n     * name of the bound property is used for input binding.\n     *\n     * The following example creates a component with two input properties,\n     * one of which is given a special binding name.\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'bank-account',\n     *   template: `\n     *     Bank Name: {{bankName}}\n     *     Account Id: {{id}}\n     *   `\n     * })\n     * class BankAccount {\n     *   // This property is bound using its original name.\n     *   @Input() bankName: string;\n     *   // this property value is bound to a different property name\n     *   // when this component is instantiated in a template.\n     *   @Input('account-id') id: string;\n     *\n     *   // this property is not bound, and is not automatically updated by Angular\n     *   normalizedBankName: string;\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `\n     *     <bank-account bankName=\"RBC\" account-id=\"4747\"></bank-account>\n     *   `\n     * })\n     *\n     * class App {}\n     * ```\n     *\n     */\n    bindingPropertyName?: string;\n}\n/**\n * @Annotation\n * @publicApi\n */\nexport declare const Input: InputDecorator;\n/**\n * Type of the Output decorator / constructor function.\n *\n * @publicApi\n */\nexport interface OutputDecorator {\n    /**\n    * Decorator that marks a class field as an output property and supplies configuration metadata.\n    * Declares a data-bound output property, which Angular automatically updates\n    * during change detection.\n    *\n    * @usageNotes\n    *\n    * You can supply an optional name to use in templates when the\n    * component is instantiated, that maps to the\n    * name of the bound property. By default, the original\n    * name of the bound property is used for output binding.\n    *\n    * See `@Input` decorator for an example of providing a binding name.\n    *\n    */\n    (bindingPropertyName?: string): any;\n    new (bindingPropertyName?: string): any;\n}\n/**\n * Type of the Output metadata.\n */\nexport interface Output {\n    bindingPropertyName?: string;\n}\n/**\n * @Annotation\n * @publicApi\n */\nexport declare const Output: OutputDecorator;\n/**\n * Type of the HostBinding decorator / constructor function.\n *\n * @publicApi\n */\nexport interface HostBindingDecorator {\n    /**\n     * Decorator that marks a DOM property as a host-binding property and supplies configuration\n     * metadata.\n     * Angular automatically checks host property bindings during change detection, and\n     * if a binding changes it updates the host element of the directive.\n     *\n     * @usageNotes\n     *\n     * The following example creates a directive that sets the `valid` and `invalid`\n     * properties on the DOM element that has an `ngModel` directive on it.\n     *\n     * ```typescript\n     * @Directive({selector: '[ngModel]'})\n     * class NgModelStatus {\n     *   constructor(public control: NgModel) {}\n     *   @HostBinding('class.valid') get valid() { return this.control.valid; }\n     *   @HostBinding('class.invalid') get invalid() { return this.control.invalid; }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `<input [(ngModel)]=\"prop\">`,\n     * })\n     * class App {\n     *   prop;\n     * }\n     * ```\n     *\n     */\n    (hostPropertyName?: string): any;\n    new (hostPropertyName?: string): any;\n}\n/**\n * Type of the HostBinding metadata.\n *\n */\nexport interface HostBinding {\n    hostPropertyName?: string;\n}\n/**\n * @Annotation\n * @publicApi\n */\nexport declare const HostBinding: HostBindingDecorator;\n/**\n * Type of the HostListener decorator / constructor function.\n *\n * @publicApi\n */\nexport interface HostListenerDecorator {\n    (eventName: string, args?: string[]): any;\n    new (eventName: string, args?: string[]): any;\n}\n/**\n * Type of the HostListener metadata.\n */\nexport interface HostListener {\n    /**\n     * The CSS event to listen for.\n     */\n    eventName?: string;\n    /**\n     * A set of arguments to pass to the handler method when the event occurs.\n     */\n    args?: string[];\n}\n/**\n * Binds a CSS event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * @usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```\n * @Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n *   @HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *  }\n * }\n *\n * @Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n * ```\n *\n * @Annotation\n * @publicApi\n */\nexport declare const HostListener: HostListenerDecorator;\nexport declare const SWITCH_COMPILE_COMPONENT__POST_R3__: typeof render3CompileComponent;\nexport declare const SWITCH_COMPILE_DIRECTIVE__POST_R3__: typeof render3CompileDirective;\nexport declare const SWITCH_COMPILE_PIPE__POST_R3__: typeof render3CompilePipe;\n"
  },
  {
    "path": "node_modules/@angular/core/src/metadata/lifecycle_hooks.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SimpleChange } from '../change_detection/change_detection_util';\n/**\n * Defines an object that associates properties with\n * instances of `SimpleChange`.\n *\n * @see `OnChanges`\n *\n * @publicApi\n */\nexport interface SimpleChanges {\n    [propName: string]: SimpleChange;\n}\n/**\n * @description\n * A lifecycle hook that is called when any data-bound property of a directive changes.\n * Define an `ngOnChanges()` method to handle the changes.\n *\n * @see `DoCheck`\n * @see `OnInit`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define an on-changes handler for an input property.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}\n *\n * @publicApi\n */\nexport interface OnChanges {\n    /**\n     * A callback method that is invoked immediately after the\n     * default change detector has checked data-bound properties\n     * if at least one has changed, and before the view and content\n     * children are checked.\n     * @param changes The changed properties.\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n}\n/**\n * @description\n * A lifecycle hook that is called after Angular has initialized\n * all data-bound properties of a directive.\n * Define an `ngOnInit()` method to handle any additional initialization tasks.\n *\n * @see `AfterContentInit`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own initialization method.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}\n *\n * @publicApi\n */\nexport interface OnInit {\n    /**\n     * A callback method that is invoked immediately after the\n     * default change detector has checked the directive's\n     * data-bound properties for the first time,\n     * and before any of the view or content children have been checked.\n     * It is invoked only once when the directive is instantiated.\n     */\n    ngOnInit(): void;\n}\n/**\n * A lifecycle hook that invokes a custom change-detection function for a directive,\n * in addition to the check performed by the default change-detector.\n *\n * The default change-detection algorithm looks for differences by comparing\n * bound-property values by reference across change detection runs. You can use this\n * hook to check for and respond to changes by some other means.\n *\n * When the default change detector detects changes, it invokes `ngOnChanges()` if supplied,\n * regardless of whether you perform additional change detection.\n * Typically, you should not use both `DoCheck` and `OnChanges` to respond to\n * changes on the same input.\n *\n * @see `OnChanges`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface\n * to invoke it own change-detection cycle.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}\n *\n * @publicApi\n */\nexport interface DoCheck {\n    /**\n       * A callback method that performs change-detection, invoked\n       * after the default change-detector runs.\n       * See `KeyValueDiffers` and `IterableDiffers` for implementing\n       * custom change checking for collections.\n       *\n       */\n    ngDoCheck(): void;\n}\n/**\n * A lifecycle hook that is called when a directive, pipe, or service is destroyed.\n * Use for any custom cleanup that needs to occur when the\n * instance is destroyed.\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface\n * to define its own custom clean-up method.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}\n *\n * @publicApi\n */\nexport interface OnDestroy {\n    /**\n     * A callback method that performs custom clean-up, invoked immediately\n     * after a directive, pipe, or service instance is destroyed.\n     */\n    ngOnDestroy(): void;\n}\n/**\n * @description\n * A lifecycle hook that is called after Angular has fully initialized\n * all content of a directive.\n * Define an `ngAfterContentInit()` method to handle any additional initialization tasks.\n *\n * @see `OnInit`\n * @see `AfterViewInit`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own content initialization method.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}\n *\n * @publicApi\n */\nexport interface AfterContentInit {\n    /**\n     * A callback method that is invoked immediately after\n     * Angular has completed initialization of all of the directive's\n     * content.\n     * It is invoked only once when the directive is instantiated.\n     */\n    ngAfterContentInit(): void;\n}\n/**\n * @description\n * A lifecycle hook that is called after the default change detector has\n * completed checking all content of a directive.\n *\n * @see `AfterViewChecked`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own after-check functionality.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}\n *\n * @publicApi\n */\nexport interface AfterContentChecked {\n    /**\n     * A callback method that is invoked immediately after the\n     * default change detector has completed checking all of the directive's\n     * content.\n     */\n    ngAfterContentChecked(): void;\n}\n/**\n * @description\n * A lifecycle hook that is called after Angular has fully initialized\n * a component's view.\n * Define an `ngAfterViewInit()` method to handle any additional initialization tasks.\n *\n * @see `OnInit`\n * @see `AfterContentInit`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own view initialization method.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}\n *\n * @publicApi\n */\nexport interface AfterViewInit {\n    /**\n     * A callback method that is invoked immediately after\n     * Angular has completed initialization of a component's view.\n     * It is invoked only once when the view is instantiated.\n     *\n     */\n    ngAfterViewInit(): void;\n}\n/**\n * @description\n * A lifecycle hook that is called after the default change detector has\n * completed checking a component's view for changes.\n *\n * @see `AfterContentChecked`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own after-check functionality.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}\n *\n * @publicApi\n */\nexport interface AfterViewChecked {\n    /**\n     * A callback method that is invoked immediately after the\n     * default change detector has completed one change-check cycle\n     * for a component's view.\n     */\n    ngAfterViewChecked(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/metadata/ng_module.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef } from '../application_ref';\nimport { Provider } from '../di/provider';\nimport { compileNgModule as render3CompileNgModule } from '../render3/jit/module';\nimport { Type } from '../type';\nimport { TypeDecorator } from '../util/decorators';\n/**\n * Represents the expansion of an `NgModule` into its scopes.\n *\n * A scope is a set of directives and pipes that are visible in a particular context. Each\n * `NgModule` has two scopes. The `compilation` scope is the set of directives and pipes that will\n * be recognized in the templates of components declared by the module. The `exported` scope is the\n * set of directives and pipes exported by a module (that is, module B's exported scope gets added\n * to module A's compilation scope when module A imports B).\n */\nexport interface NgModuleTransitiveScopes {\n    compilation: {\n        directives: Set<any>;\n        pipes: Set<any>;\n    };\n    exported: {\n        directives: Set<any>;\n        pipes: Set<any>;\n    };\n}\nexport declare type NgModuleDefWithMeta<T, Declarations, Imports, Exports> = NgModuleDef<T>;\n/**\n * Runtime link information for NgModules.\n *\n * This is the internal data structure used by the runtime to assemble components, directives,\n * pipes, and injectors.\n *\n * NOTE: Always use `defineNgModule` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n */\nexport interface NgModuleDef<T> {\n    /** Token representing the module. Used by DI. */\n    type: T;\n    /** List of components to bootstrap. */\n    bootstrap: Type<any>[];\n    /** List of components, directives, and pipes declared by this module. */\n    declarations: Type<any>[];\n    /** List of modules or `ModuleWithProviders` imported by this module. */\n    imports: Type<any>[];\n    /**\n     * List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this\n     * module.\n     */\n    exports: Type<any>[];\n    /**\n     * Cached value of computed `transitiveCompileScopes` for this module.\n     *\n     * This should never be read directly, but accessed via `transitiveScopesFor`.\n     */\n    transitiveCompileScopes: NgModuleTransitiveScopes | null;\n}\n/**\n * A wrapper around an NgModule that associates it with the providers.\n *\n * @param T the module type. In Ivy applications, this must be explicitly\n * provided.\n *\n * @publicApi\n */\nexport interface ModuleWithProviders<T = any /** TODO(alxhub): remove default when callers pass explicit type param */> {\n    ngModule: Type<T>;\n    providers?: Provider[];\n}\n/**\n * A schema definition associated with an NgModule.\n *\n * @see `@NgModule`, `CUSTOM_ELEMENTS_SCHEMA`, `NO_ERRORS_SCHEMA`\n *\n * @param name The name of a defined schema.\n *\n * @publicApi\n */\nexport interface SchemaMetadata {\n    name: string;\n}\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * @publicApi\n */\nexport declare const CUSTOM_ELEMENTS_SCHEMA: SchemaMetadata;\n/**\n * Defines a schema that allows any property on any element.\n *\n * @publicApi\n */\nexport declare const NO_ERRORS_SCHEMA: SchemaMetadata;\n/**\n * Type of the NgModule decorator / constructor function.\n */\nexport interface NgModuleDecorator {\n    /**\n     * Marks a class as an NgModule and supplies configuration metadata.\n     */\n    (obj?: NgModule): TypeDecorator;\n    new (obj?: NgModule): NgModule;\n}\n/**\n * Type of the NgModule metadata.\n */\nexport interface NgModule {\n    /**\n     * The set of injectable objects that are available in the injector\n     * of this module.\n     *\n     * @see [Dependency Injection guide](guide/dependency-injection)\n     * @see [NgModule guide](guide/providers)\n     *\n     * @usageNotes\n     *\n     * Dependencies whose providers are listed here become available for injection\n     * into any component, directive, pipe or service that is a child of this injector.\n     * The NgModule used for bootstrapping uses the root injector, and can provide dependencies\n     * to any part of the app.\n     *\n     * A lazy-loaded module has its own injector, typically a child of the app root injector.\n     * Lazy-loaded services are scoped to the lazy-loaded module's injector.\n     * If a lazy-loaded module also provides the `UserService`, any component created\n     * within that module's context (such as by router navigation) gets the local instance\n     * of the service, not the instance in the root injector.\n     * Components in external modules continue to receive the instance provided by their injectors.\n     *\n     * ### Example\n     *\n     * The following example defines a class that is injected in\n     * the HelloWorld NgModule:\n     *\n     * ```\n     * class Greeter {\n     *    greet(name:string) {\n     *      return 'Hello ' + name + '!';\n     *    }\n     * }\n     *\n     * @NgModule({\n     *   providers: [\n     *     Greeter\n     *   ]\n     * })\n     * class HelloWorld {\n     *   greeter:Greeter;\n     *\n     *   constructor(greeter:Greeter) {\n     *     this.greeter = greeter;\n     *   }\n     * }\n     * ```\n     */\n    providers?: Provider[];\n    /**\n     * The set of components, directives, and pipes ([declarables](guide/glossary#declarable))\n     * that belong to this module.\n     *\n     * @usageNotes\n     *\n     * The set of selectors that are available to a template include those declared here, and\n     * those that are exported from imported NgModules.\n     *\n     * Declarables must belong to exactly one module.\n     * The compiler emits an error if you try to declare the same class in more than one module.\n     * Be careful not to declare a class that is imported from another module.\n     *\n     * ### Example\n     *\n     * The following example allows the CommonModule to use the `NgFor`\n     * directive.\n     *\n     * ```javascript\n     * @NgModule({\n     *   declarations: [NgFor]\n     * })\n     * class CommonModule {\n     * }\n     * ```\n     */\n    declarations?: Array<Type<any> | any[]>;\n    /**\n     * The set of NgModules whose exported [declarables](guide/glossary#declarable)\n     * are available to templates in this module.\n     *\n     * @usageNotes\n     *\n     * A template can use exported declarables from any\n     * imported module, including those from modules that are imported indirectly\n     * and re-exported.\n     * For example, `ModuleA` imports `ModuleB`, and also exports\n     * it, which makes the declarables from `ModuleB` available\n     * wherever `ModuleA` is imported.\n     *\n     * ### Example\n     *\n     * The following example allows MainModule to use anthing exported by\n     * `CommonModule`:\n     *\n     * ```javascript\n     * @NgModule({\n     *   imports: [CommonModule]\n     * })\n     * class MainModule {\n     * }\n     * ```\n     *\n     */\n    imports?: Array<Type<any> | ModuleWithProviders<{}> | any[]>;\n    /**\n     * The set of components, directives, and pipes declared in this\n     * NgModule that can be used in the template of any component that is part of an\n     * NgModule that imports this NgModule. Exported declarations are the module's public API.\n     *\n     * A declarable belongs to one and only one NgModule.\n     * A module can list another module among its exports, in which case all of that module's\n     * public declaration are exported.\n     *\n     * @usageNotes\n     *\n     * Declarations are private by default.\n     * If this ModuleA does not export UserComponent, then only the components within this\n     * ModuleA can use UserComponent.\n     *\n     * ModuleA can import ModuleB and also export it, making exports from ModuleB\n     * available to an NgModule that imports ModuleA.\n     *\n     * ### Example\n     *\n     * The following example exports the `NgFor` directive from CommonModule.\n     *\n     * ```javascript\n     * @NgModule({\n     *   exports: [NgFor]\n     * })\n     * class CommonModule {\n     * }\n     * ```\n     */\n    exports?: Array<Type<any> | any[]>;\n    /**\n     * The set of components to compile when this NgModule is defined,\n     * so that they can be dynamically loaded into the view.\n     *\n     * For each component listed here, Angular creates a `ComponentFactory`\n     * and stores it in the `ComponentFactoryResolver`.\n     *\n     * Angular automatically adds components in the module's bootstrap\n     * and route definitions into the `entryComponents` list. Use this\n     * option to add components that are bootstrapped\n     * using one of the imperative techniques, such as `ViewContainerRef.createComponent()`.\n     *\n     * @see [Entry Components](guide/entry-components)\n     */\n    entryComponents?: Array<Type<any> | any[]>;\n    /**\n     * The set of components that are bootstrapped when\n     * this module is bootstrapped. The components listed here\n     * are automatically added to `entryComponents`.\n     */\n    bootstrap?: Array<Type<any> | any[]>;\n    /**\n     * The set of schemas that declare elements to be allowed in the NgModule.\n     * Elements and properties that are neither Angular components nor directives\n     * must be declared in a schema.\n     *\n     * Allowed value are `NO_ERRORS_SCHEMA` and `CUSTOM_ELEMENTS_SCHEMA`.\n     *\n     * @security When using one of `NO_ERRORS_SCHEMA` or `CUSTOM_ELEMENTS_SCHEMA`\n     * you must ensure that allowed elements and properties securely escape inputs.\n     */\n    schemas?: Array<SchemaMetadata | any[]>;\n    /**\n     * A name or path that uniquely identifies this NgModule in `getModuleFactory`.\n     * If left `undefined`, the NgModule is not registered with\n     * `getModuleFactory`.\n     */\n    id?: string;\n    /**\n     * If true, this module will be skipped by the AOT compiler and so will always be compiled\n     * using JIT.\n     *\n     * This exists to support future Ivy work and has no effect currently.\n     */\n    jit?: true;\n}\n/**\n * @Annotation\n * @publicApi\n */\nexport declare const NgModule: NgModuleDecorator;\n/**\n * @description\n * Hook for manual bootstrapping of the application instead of using bootstrap array in @NgModule\n * annotation.\n *\n * Reference to the current application is provided as a parameter.\n *\n * See [\"Bootstrapping\"](guide/bootstrapping) and [\"Entry components\"](guide/entry-components).\n *\n * @usageNotes\n * ```typescript\n * class AppModule implements DoBootstrap {\n *   ngDoBootstrap(appRef: ApplicationRef) {\n *     appRef.bootstrap(AppComponent); // Or some other component\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport interface DoBootstrap {\n    ngDoBootstrap(appRef: ApplicationRef): void;\n}\nexport declare const SWITCH_COMPILE_NGMODULE__POST_R3__: typeof render3CompileNgModule;\n"
  },
  {
    "path": "node_modules/@angular/core/src/metadata/resource_loading.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component } from './directives';\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponnent{\n * }\n *\n * // Calling `renderComponent` will fail because `MyComponent`'s `@Compenent.templateUrl`\n * // needs to be resolved because `renderComponent` is synchronous process.\n * // renderComponent(MyComponent);\n *\n * // Calling `resolveComponentResources` will resolve `@Compenent.templateUrl` into\n * // `@Compenent.template`, which would allow `renderComponent` to proceed in synchronous manner.\n * // Use browser's `fetch` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible to returning a `Promise` of the resolved\n * URL. Browser's `fetch` method is a good default implementation.\n */\nexport declare function resolveComponentResources(resourceResolver: (url: string) => (Promise<string | {\n    text(): Promise<string>;\n}>)): Promise<null>;\nexport declare function maybeQueueResolutionOfComponentResources(metadata: Component): void;\nexport declare function componentNeedsResolution(component: Component): string | number | undefined;\nexport declare function clearResolutionOfComponentResourcesQueue(): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/metadata/view.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Defines template and style encapsulation options available for Component's {@link Component}.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n *\n * @publicApi\n */\nexport declare enum ViewEncapsulation {\n    /**\n     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n     * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n     * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n     * selectors.\n     *\n     * This is the default option.\n     */\n    Emulated = 0,\n    /**\n     * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n     * Use the native encapsulation mechanism of the renderer.\n     *\n     * For the DOM this means using the deprecated [Shadow DOM\n     * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    Native = 1,\n    /**\n     * Don't provide any template or style encapsulation.\n     */\n    None = 2,\n    /**\n     * Use Shadow DOM to encapsulate styles.\n     *\n     * For the DOM this means using modern [Shadow\n     * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    ShadowDom = 3\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/platform_core_providers.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PlatformRef } from './application_ref';\nimport { StaticProvider } from './di';\n/**\n * This platform has to be included in any other platform\n *\n * @publicApi\n */\nexport declare const platformCore: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;\n"
  },
  {
    "path": "node_modules/@angular/core/src/profile/profile.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { WtfScopeFn } from './wtf_impl';\nexport { WtfScopeFn } from './wtf_impl';\n/**\n * True if WTF is enabled.\n */\nexport declare const wtfEnabled: boolean;\n/**\n * Create trace scope.\n *\n * Scopes must be strictly nested and are analogous to stack frames, but\n * do not have to follow the stack frames. Instead it is recommended that they follow logical\n * nesting. You may want to use\n * [Event\n * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n * as they are defined in WTF.\n *\n * Used to mark scope entry. The return value is used to leave the scope.\n *\n *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n *\n *     someMethod() {\n *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n *        // DO SOME WORK HERE\n *        return wtfLeave(s, 123); // Return value 123\n *     }\n *\n * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n * negatively impact the performance of your application. For this reason we recommend that\n * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n * exception, will produce incorrect trace, but presence of exception signifies logic error which\n * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n * an exception is expected during normal execution while profiling.\n *\n * @publicApi\n */\nexport declare const wtfCreateScope: (signature: string, flags?: any) => WtfScopeFn;\n/**\n * Used to mark end of Scope.\n *\n * - `scope` to end.\n * - `returnValue` (optional) to be passed to the WTF.\n *\n * Returns the `returnValue for easy chaining.\n * @publicApi\n */\nexport declare const wtfLeave: <T>(scope: any, returnValue?: T) => T;\n/**\n * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n * enabled.\n *\n *     someMethod() {\n *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n *        var future = new Future.delay(5).then((_) {\n *          wtfEndTimeRange(s);\n *        });\n *     }\n * @publicApi\n */\nexport declare const wtfStartTimeRange: (rangeType: string, action: string) => any;\n/**\n * Ends a async time range operation.\n * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n * enabled.\n * @publicApi\n */\nexport declare const wtfEndTimeRange: (range: any) => void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/profile/wtf_impl.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A scope function for the Web Tracing Framework (WTF).\n *\n * @publicApi\n */\nexport interface WtfScopeFn {\n    (arg0?: any, arg1?: any): any;\n}\nexport interface Range {\n}\nexport interface Scope {\n    (...args: any[] /** TODO #9100 */): any;\n}\nexport declare function detectWTF(): boolean;\nexport declare function createScope(signature: string, flags?: any): any;\nexport declare function leave<T>(scope: Scope): void;\nexport declare function leave<T>(scope: Scope, returnValue?: T): T;\nexport declare function startTimeRange(rangeType: string, action: string): Range;\nexport declare function endTimeRange(range: Range): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/r3_symbols.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { InjectableDef, InjectorDef, defineInjectable, defineInjector } from './di/defs';\nexport { inject } from './di/injector_compatibility';\nexport { NgModuleDef, NgModuleDefWithMeta } from './metadata/ng_module';\nexport { defineNgModule } from './render3/definition';\nexport { setClassMetadata } from './render3/metadata';\nexport { NgModuleFactory } from './render3/ng_module_ref';\n/**\n * The existence of this constant (in this particular file) informs the Angular compiler that the\n * current program is actually @angular/core, which needs to be compiled specially.\n */\nexport declare const ITS_JUST_ANGULAR = true;\n"
  },
  {
    "path": "node_modules/@angular/core/src/reflection/platform_reflection_capabilities.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\nimport { GetterFn, MethodFn, SetterFn } from './types';\nexport interface PlatformReflectionCapabilities {\n    isReflectionEnabled(): boolean;\n    factory(type: Type<any>): Function;\n    hasLifecycleHook(type: any, lcProperty: string): boolean;\n    guards(type: any): {\n        [key: string]: any;\n    };\n    /**\n     * Return a list of annotations/types for constructor parameters\n     */\n    parameters(type: Type<any>): any[][];\n    /**\n     * Return a list of annotations declared on the class\n     */\n    annotations(type: Type<any>): any[];\n    /**\n     * Return a object literal which describes the annotations on Class fields/properties.\n     */\n    propMetadata(typeOrFunc: Type<any>): {\n        [key: string]: any[];\n    };\n    getter(name: string): GetterFn;\n    setter(name: string): SetterFn;\n    method(name: string): MethodFn;\n    importUri(type: Type<any>): string;\n    resourceUri(type: Type<any>): string;\n    resolveIdentifier(name: string, moduleUrl: string, members: string[], runtime: any): any;\n    resolveEnum(enumIdentifier: any, name: string): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/reflection/reflection_capabilities.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\nimport { PlatformReflectionCapabilities } from './platform_reflection_capabilities';\nimport { GetterFn, MethodFn, SetterFn } from './types';\n/**\n * Attention: These regex has to hold even if the code is minified!\n */\nexport declare const DELEGATE_CTOR: RegExp;\nexport declare const INHERITED_CLASS: RegExp;\nexport declare const INHERITED_CLASS_WITH_CTOR: RegExp;\nexport declare class ReflectionCapabilities implements PlatformReflectionCapabilities {\n    private _reflect;\n    constructor(reflect?: any);\n    isReflectionEnabled(): boolean;\n    factory<T>(t: Type<T>): (args: any[]) => T;\n    private _ownParameters;\n    parameters(type: Type<any>): any[][];\n    private _ownAnnotations;\n    annotations(typeOrFunc: Type<any>): any[];\n    private _ownPropMetadata;\n    propMetadata(typeOrFunc: any): {\n        [key: string]: any[];\n    };\n    hasLifecycleHook(type: any, lcProperty: string): boolean;\n    guards(type: any): {\n        [key: string]: any;\n    };\n    getter(name: string): GetterFn;\n    setter(name: string): SetterFn;\n    method(name: string): MethodFn;\n    importUri(type: any): string;\n    resourceUri(type: any): string;\n    resolveIdentifier(name: string, moduleUrl: string, members: string[], runtime: any): any;\n    resolveEnum(enumIdentifier: any, name: string): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/reflection/reflection.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Reflector } from './reflector';\nexport { Reflector } from './reflector';\n/**\n * The {@link Reflector} used internally in Angular to access metadata\n * about symbols.\n */\nexport declare const reflector: Reflector;\n"
  },
  {
    "path": "node_modules/@angular/core/src/reflection/reflector.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\nimport { PlatformReflectionCapabilities } from './platform_reflection_capabilities';\nimport { GetterFn, MethodFn, SetterFn } from './types';\nexport { PlatformReflectionCapabilities };\nexport { GetterFn, MethodFn, SetterFn };\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nexport declare class Reflector {\n    reflectionCapabilities: PlatformReflectionCapabilities;\n    constructor(reflectionCapabilities: PlatformReflectionCapabilities);\n    updateCapabilities(caps: PlatformReflectionCapabilities): void;\n    factory(type: Type<any>): Function;\n    parameters(typeOrFunc: Type<any>): any[][];\n    annotations(typeOrFunc: Type<any>): any[];\n    propMetadata(typeOrFunc: Type<any>): {\n        [key: string]: any[];\n    };\n    hasLifecycleHook(type: any, lcProperty: string): boolean;\n    getter(name: string): GetterFn;\n    setter(name: string): SetterFn;\n    method(name: string): MethodFn;\n    importUri(type: any): string;\n    resourceUri(type: any): string;\n    resolveIdentifier(name: string, moduleUrl: string, members: string[], runtime: any): any;\n    resolveEnum(identifier: any, name: string): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/reflection/types.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare type SetterFn = (obj: any, value: any) => void;\nexport declare type GetterFn = (obj: any) => any;\nexport declare type MethodFn = (obj: any, args: any[]) => any;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { RenderComponentType, Renderer, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, RootRenderer } from './render/api';\n"
  },
  {
    "path": "node_modules/@angular/core/src/render/api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\nimport { Injector } from '../di/injector';\nimport { ViewEncapsulation } from '../metadata/view';\nimport { injectRenderer2 as render3InjectRenderer2 } from '../render3/view_engine_compatibility';\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n * @publicApi\n */\nexport declare class RenderComponentType {\n    id: string;\n    templateUrl: string;\n    slotCount: number;\n    encapsulation: ViewEncapsulation;\n    styles: Array<string | any[]>;\n    animations: any;\n    constructor(id: string, templateUrl: string, slotCount: number, encapsulation: ViewEncapsulation, styles: Array<string | any[]>, animations: any);\n}\n/**\n * @deprecated Debug info is handled internally in the view engine now.\n */\nexport declare abstract class RenderDebugInfo {\n    abstract readonly injector: Injector;\n    abstract readonly component: any;\n    abstract readonly providerTokens: any[];\n    abstract readonly references: {\n        [key: string]: any;\n    };\n    abstract readonly context: any;\n    abstract readonly source: string;\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n */\nexport interface DirectRenderer {\n    remove(node: any): void;\n    appendChild(node: any, parent: any): void;\n    insertBefore(node: any, refNode: any): void;\n    nextSibling(node: any): any;\n    parentElement(node: any): any;\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n * @publicApi\n */\nexport declare abstract class Renderer {\n    abstract selectRootElement(selectorOrNode: string | any, debugInfo?: RenderDebugInfo): any;\n    abstract createElement(parentElement: any, name: string, debugInfo?: RenderDebugInfo): any;\n    abstract createViewRoot(hostElement: any): any;\n    abstract createTemplateAnchor(parentElement: any, debugInfo?: RenderDebugInfo): any;\n    abstract createText(parentElement: any, value: string, debugInfo?: RenderDebugInfo): any;\n    abstract projectNodes(parentElement: any, nodes: any[]): void;\n    abstract attachViewAfter(node: any, viewRootNodes: any[]): void;\n    abstract detachView(viewRootNodes: any[]): void;\n    abstract destroyView(hostElement: any, viewAllNodes: any[]): void;\n    abstract listen(renderElement: any, name: string, callback: Function): Function;\n    abstract listenGlobal(target: string, name: string, callback: Function): Function;\n    abstract setElementProperty(renderElement: any, propertyName: string, propertyValue: any): void;\n    abstract setElementAttribute(renderElement: any, attributeName: string, attributeValue?: string): void;\n    /**\n     * Used only in debug mode to serialize property changes to dom nodes as attributes.\n     */\n    abstract setBindingDebugInfo(renderElement: any, propertyName: string, propertyValue: string): void;\n    abstract setElementClass(renderElement: any, className: string, isAdd: boolean): void;\n    abstract setElementStyle(renderElement: any, styleName: string, styleValue?: string): void;\n    abstract invokeElementMethod(renderElement: any, methodName: string, args?: any[]): void;\n    abstract setText(renderNode: any, text: string): void;\n    abstract animate(element: any, startingStyles: any, keyframes: any[], duration: number, delay: number, easing: string, previousPlayers?: any[]): any;\n}\nexport declare const Renderer2Interceptor: InjectionToken<Renderer2[]>;\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {@link Renderer#setElementProperty setElementProperty} or\n * {@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * @publicApi\n */\nexport declare abstract class RootRenderer {\n    abstract renderComponent(componentType: RenderComponentType): Renderer;\n}\n/**\n * Used by `RendererFactory2` to associate custom rendering data and styles\n * with a rendering implementation.\n *  @publicApi\n */\nexport interface RendererType2 {\n    /**\n     * A unique identifying string for the new renderer, used when creating\n     * unique styles for encapsulation.\n     */\n    id: string;\n    /**\n     * The view encapsulation type, which determines how styles are applied to\n     * DOM elements. One of\n     * - `Emulated` (default): Emulate native scoping of styles.\n     * - `Native`: Use the native encapsulation mechanism of the renderer.\n     * - `ShadowDom`: Use modern [Shadow\n     * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * create a ShadowRoot for component's host element.\n     * - `None`: Do not provide any template or style encapsulation.\n     */\n    encapsulation: ViewEncapsulation;\n    /**\n     * Defines CSS styles to be stored on a renderer instance.\n     */\n    styles: (string | any[])[];\n    /**\n     * Defines arbitrary developer-defined data to be stored on a renderer instance.\n     * This is useful for renderers that delegate to other renderers.\n     */\n    data: {\n        [kind: string]: any;\n    };\n}\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * @publicApi\n */\nexport declare abstract class RendererFactory2 {\n    /**\n     * Creates and initializes a custom renderer for a host DOM element.\n     * @param hostElement The element to render.\n     * @param type The base class to implement.\n     * @returns The new custom renderer instance.\n     */\n    abstract createRenderer(hostElement: any, type: RendererType2 | null): Renderer2;\n    /**\n     * A callback invoked when rendering has begun.\n     */\n    abstract begin?(): void;\n    /**\n     * A callback invoked when rendering has completed.\n     */\n    abstract end?(): void;\n    /**\n     * Use with animations test-only mode. Notifies the test when rendering has completed.\n     * @returns The asynchronous result of the developer-defined function.\n     */\n    abstract whenRenderingDone?(): Promise<any>;\n}\n/**\n * Flags for renderer-specific style modifiers.\n * @publicApi\n */\nexport declare enum RendererStyleFlags2 {\n    /**\n     * Marks a style as important.\n     */\n    Important = 1,\n    /**\n     * Marks a style as using dash case naming (this-is-dash-case).\n     */\n    DashCase = 2\n}\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * @publicApi\n */\nexport declare abstract class Renderer2 {\n    /**\n     * Use to store arbitrary developer-defined data on a renderer instance,\n     * as an object containing key-value pairs.\n     * This is useful for renderers that delegate to other renderers.\n     */\n    abstract readonly data: {\n        [key: string]: any;\n    };\n    /**\n     * Implement this callback to destroy the renderer or the host element.\n     */\n    abstract destroy(): void;\n    /**\n     * Implement this callback to create an instance of the host element.\n     * @param name An identifying name for the new element, unique within the namespace.\n     * @param namespace The namespace for the new element.\n     * @returns The new element.\n     */\n    abstract createElement(name: string, namespace?: string | null): any;\n    /**\n     * Implement this callback to add a comment to the DOM of the host element.\n     * @param value The comment text.\n     * @returns The modified element.\n     */\n    abstract createComment(value: string): any;\n    /**\n     * Implement this callback to add text to the DOM of the host element.\n     * @param value The text string.\n     * @returns The modified element.\n     */\n    abstract createText(value: string): any;\n    /**\n     * If null or undefined, the view engine won't call it.\n     * This is used as a performance optimization for production mode.\n     */\n    destroyNode: ((node: any) => void) | null;\n    /**\n     * Appends a child to a given parent node in the host element DOM.\n     * @param parent The parent node.\n     * @param newChild The new child node.\n     */\n    abstract appendChild(parent: any, newChild: any): void;\n    /**\n     * Implement this callback to insert a child node at a given position in a parent node\n     * in the host element DOM.\n     * @param parent The parent node.\n     * @param newChild The new child nodes.\n     * @param refChild The existing child node that should precede the new node.\n     */\n    abstract insertBefore(parent: any, newChild: any, refChild: any): void;\n    /**\n     * Implement this callback to remove a child node from the host element's DOM.\n     * @param parent The parent node.\n     * @param oldChild The child node to remove.\n     */\n    abstract removeChild(parent: any, oldChild: any): void;\n    /**\n     * Implement this callback to prepare an element to be bootstrapped\n     * as a root element, and return the element instance.\n     * @param selectorOrNode The DOM element.\n     * @param preserveContent Whether the contents of the root element\n     * should be preserved, or cleared upon bootstrap (default behavior).\n     * Use with `ViewEncapsulation.ShadowDom` to allow simple native\n     * content projection via `<slot>` elements.\n     * @returns The root element.\n     */\n    abstract selectRootElement(selectorOrNode: string | any, preserveContent?: boolean): any;\n    /**\n     * Implement this callback to get the parent of a given node\n     * in the host element's DOM.\n     * @param node The child node to query.\n     * @returns The parent node, or null if there is no parent.\n     * For WebWorkers, always returns true.\n     * This is because the check is synchronous,\n     * and the caller can't rely on checking for null.\n     */\n    abstract parentNode(node: any): any;\n    /**\n     * Implement this callback to get the next sibling node of a given node\n     * in the host element's DOM.\n     * @returns The sibling node, or null if there is no sibling.\n     * For WebWorkers, always returns a value.\n     * This is because the check is synchronous,\n     * and the caller can't rely on checking for null.\n     */\n    abstract nextSibling(node: any): any;\n    /**\n     * Implement this callback to set an attribute value for an element in the DOM.\n     * @param el The element.\n     * @param name The attribute name.\n     * @param value The new value.\n     * @param namespace The namespace.\n     */\n    abstract setAttribute(el: any, name: string, value: string, namespace?: string | null): void;\n    /**\n     * Implement this callback to remove an attribute from an element in the DOM.\n     * @param el The element.\n     * @param name The attribute name.\n     * @param namespace The namespace.\n     */\n    abstract removeAttribute(el: any, name: string, namespace?: string | null): void;\n    /**\n     * Implement this callback to add a class to an element in the DOM.\n     * @param el The element.\n     * @param name The class name.\n     */\n    abstract addClass(el: any, name: string): void;\n    /**\n     * Implement this callback to remove a class from an element in the DOM.\n     * @param el The element.\n     * @param name The class name.\n     */\n    abstract removeClass(el: any, name: string): void;\n    /**\n     * Implement this callback to set a CSS style for an element in the DOM.\n     * @param el The element.\n     * @param style The name of the style.\n     * @param value The new value.\n     * @param flags Flags for style variations. No flags are set by default.\n     */\n    abstract setStyle(el: any, style: string, value: any, flags?: RendererStyleFlags2): void;\n    /**\n     * Implement this callback to remove the value from a CSS style for an element in the DOM.\n     * @param el The element.\n     * @param style The name of the style.\n     * @param flags Flags for style variations to remove, if set. ???\n     */\n    abstract removeStyle(el: any, style: string, flags?: RendererStyleFlags2): void;\n    /**\n     * Implement this callback to set the value of a property of an element in the DOM.\n     * @param el The element.\n     * @param name The property name.\n     * @param value The new value.\n     */\n    abstract setProperty(el: any, name: string, value: any): void;\n    /**\n     * Implement this callback to set the value of a node in the host element.\n     * @param node The node.\n     * @param value The new value.\n     */\n    abstract setValue(node: any, value: string): void;\n    /**\n     * Implement this callback to start an event listener.\n     * @param target The context in which to listen for events. Can be\n     * the entire window or document, the body of the document, or a specific\n     * DOM element.\n     * @param eventName The event to listen for.\n     * @param callback A handler function to invoke when the event occurs.\n     * @returns An \"unlisten\" function for disposing of this handler.\n     */\n    abstract listen(target: 'window' | 'document' | 'body' | any, eventName: string, callback: (event: any) => boolean | void): () => void;\n}\nexport declare const SWITCH_RENDERER2_FACTORY__POST_R3__: typeof render3InjectRenderer2;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/assert.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare function assertNumber(actual: any, msg: string): void;\nexport declare function assertEqual<T>(actual: T, expected: T, msg: string): void;\nexport declare function assertNotEqual<T>(actual: T, expected: T, msg: string): void;\nexport declare function assertSame<T>(actual: T, expected: T, msg: string): void;\nexport declare function assertLessThan<T>(actual: T, expected: T, msg: string): void;\nexport declare function assertGreaterThan<T>(actual: T, expected: T, msg: string): void;\nexport declare function assertNotDefined<T>(actual: T, msg: string): void;\nexport declare function assertDefined<T>(actual: T, msg: string): void;\nexport declare function assertComponentType(actual: any, msg?: string): void;\nexport declare function assertNgModuleType(actual: any, msg?: string): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/component_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef as ViewEngine_ChangeDetectorRef } from '../change_detection/change_detector_ref';\nimport { InjectionToken } from '../di/injection_token';\nimport { Injector } from '../di/injector';\nimport { ComponentFactory as viewEngine_ComponentFactory, ComponentRef as viewEngine_ComponentRef } from '../linker/component_factory';\nimport { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { ElementRef as viewEngine_ElementRef } from '../linker/element_ref';\nimport { NgModuleRef as viewEngine_NgModuleRef } from '../linker/ng_module_factory';\nimport { RendererFactory2 } from '../render/api';\nimport { Type } from '../type';\nimport { ComponentDef } from './interfaces/definition';\nimport { TContainerNode, TElementContainerNode, TElementNode } from './interfaces/node';\nimport { LViewData, RootContext } from './interfaces/view';\nimport { ViewRef } from './view_ref';\nexport declare class ComponentFactoryResolver extends viewEngine_ComponentFactoryResolver {\n    resolveComponentFactory<T>(component: Type<T>): viewEngine_ComponentFactory<T>;\n}\n/**\n * Default {@link RootContext} for all components rendered with {@link renderComponent}.\n */\nexport declare const ROOT_CONTEXT: InjectionToken<RootContext>;\n/**\n * A change detection scheduler token for {@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.\n */\nexport declare const SCHEDULER: InjectionToken<(fn: () => void) => void>;\n/**\n * A function used to wrap the `RendererFactory2`.\n * Used in tests to change the `RendererFactory2` into a `DebugRendererFactory2`.\n */\nexport declare const WRAP_RENDERER_FACTORY2: InjectionToken<(rf: RendererFactory2) => RendererFactory2>;\n/**\n * Render3 implementation of {@link viewEngine_ComponentFactory}.\n */\nexport declare class ComponentFactory<T> extends viewEngine_ComponentFactory<T> {\n    private componentDef;\n    selector: string;\n    componentType: Type<any>;\n    ngContentSelectors: string[];\n    readonly inputs: {\n        propName: string;\n        templateName: string;\n    }[];\n    readonly outputs: {\n        propName: string;\n        templateName: string;\n    }[];\n    constructor(componentDef: ComponentDef<any>);\n    create(injector: Injector, projectableNodes?: any[][] | undefined, rootSelectorOrNode?: any, ngModule?: viewEngine_NgModuleRef<any> | undefined): viewEngine_ComponentRef<T>;\n}\n/**\n * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the\n * ComponentFactoryResolver\n * already exists, retrieves the existing ComponentFactoryResolver.\n *\n * @returns The ComponentFactoryResolver instance to use\n */\nexport declare function injectComponentFactoryResolver(): viewEngine_ComponentFactoryResolver;\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nexport declare class ComponentRef<T> extends viewEngine_ComponentRef<T> {\n    location: viewEngine_ElementRef;\n    private _rootView;\n    private _tNode;\n    destroyCbs: (() => void)[] | null;\n    instance: T;\n    hostView: ViewRef<T>;\n    changeDetectorRef: ViewEngine_ChangeDetectorRef;\n    componentType: Type<T>;\n    constructor(componentType: Type<T>, instance: T, location: viewEngine_ElementRef, _rootView: LViewData, _tNode: TElementNode | TContainerNode | TElementContainerNode);\n    readonly injector: Injector;\n    destroy(): void;\n    onDestroy(callback: () => void): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/component.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../core';\nimport { Injector } from '../di/injector';\nimport { Sanitizer } from '../sanitization/security';\nimport { ComponentDef, ComponentType } from './interfaces/definition';\nimport { PlayerHandler } from './interfaces/player';\nimport { RElement, Renderer3, RendererFactory3 } from './interfaces/renderer';\nimport { LViewData, RootContext } from './interfaces/view';\n/** Options that control how the component should be bootstrapped. */\nexport interface CreateComponentOptions {\n    /** Which renderer factory to use. */\n    rendererFactory?: RendererFactory3;\n    /** A custom sanitizer instance */\n    sanitizer?: Sanitizer;\n    /** A custom animation player handler */\n    playerHandler?: PlayerHandler;\n    /**\n     * Host element on which the component will be bootstrapped. If not specified,\n     * the component definition's `tag` is used to query the existing DOM for the\n     * element to bootstrap.\n     */\n    host?: RElement | string;\n    /** Module injector for the component. If unspecified, the injector will be NULL_INJECTOR. */\n    injector?: Injector;\n    /**\n     * List of features to be applied to the created component. Features are simply\n     * functions that decorate a component with a certain behavior.\n     *\n     * Typically, the features in this list are features that cannot be added to the\n     * other features list in the component definition because they rely on other factors.\n     *\n     * Example: `RootLifecycleHooks` is a function that adds lifecycle hook capabilities\n     * to root components in a tree-shakable way. It cannot be added to the component\n     * features list because there's no way of knowing when the component will be used as\n     * a root component.\n     */\n    hostFeatures?: HostFeature[];\n    /**\n     * A function which is used to schedule change detection work in the future.\n     *\n     * When marking components as dirty, it is necessary to schedule the work of\n     * change detection in the future. This is done to coalesce multiple\n     * {@link markDirty} calls into a single changed detection processing.\n     *\n     * The default value of the scheduler is the `requestAnimationFrame` function.\n     *\n     * It is also useful to override this function for testing purposes.\n     */\n    scheduler?: (work: () => void) => void;\n}\n/** See CreateComponentOptions.hostFeatures */\ndeclare type HostFeature = (<T>(component: T, componentDef: ComponentDef<T>) => void);\nexport declare const NULL_INJECTOR: Injector;\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {@link ViewContainer#createComponent}.\n *\n * @param componentType Component to bootstrap\n * @param options Optional parameters which control bootstrapping\n */\nexport declare function renderComponent<T>(componentType: ComponentType<T> | Type<T>, opts?: CreateComponentOptions): T;\n/**\n * Creates the root component view and the root component node.\n *\n * @param rNode Render host element.\n * @param def ComponentDef\n * @param rootView The parent view where the host node is stored\n * @param renderer The current renderer\n * @param sanitizer The sanitizer, if provided\n *\n * @returns Component view created\n */\nexport declare function createRootComponentView(rNode: RElement | null, def: ComponentDef<any>, rootView: LViewData, renderer: Renderer3, sanitizer?: Sanitizer | null): LViewData;\n/**\n * Creates a root component and sets it up with features and host bindings. Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n */\nexport declare function createRootComponent<T>(componentView: LViewData, componentDef: ComponentDef<T>, rootView: LViewData, rootContext: RootContext, hostFeatures: HostFeature[] | null): any;\nexport declare function createRootContext(scheduler?: (workFn: () => void) => void, playerHandler?: PlayerHandler | null): RootContext;\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n */\nexport declare function LifecycleHooksFeature(component: any, def: ComponentDef<any>): void;\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param component Component to wait upon\n * @returns Promise which resolves when the component is rendered.\n */\nexport declare function whenRendered(component: any): Promise<null>;\nexport {};\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/context_discovery.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { LContext } from './interfaces/context';\nimport { LViewData } from './interfaces/view';\n/** Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LViewData` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param target Component, Directive or DOM Node.\n */\nexport declare function getContext(target: any): LContext | null;\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param componentInstance\n * @returns The component's view\n */\nexport declare function getComponentViewByInstance(componentInstance: {}): LViewData;\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n */\nexport declare function attachPatchData(target: any, data: LViewData | LContext): void;\nexport declare function isComponentInstance(instance: any): boolean;\nexport declare function isDirectiveInstance(instance: any): boolean;\n/**\n * Returns a list of directives extracted from the given view based on the\n * provided list of directive index values.\n *\n * @param nodeIndex The node index\n * @param lViewData The target view data\n * @param includeComponents Whether or not to include components in returned directives\n */\nexport declare function getDirectivesAtNodeIndex(nodeIndex: number, lViewData: LViewData, includeComponents: boolean): any[] | null;\nexport declare function getComponentAtNodeIndex(nodeIndex: number, lViewData: LViewData): {} | null;\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n */\nexport declare function discoverLocalRefs(lViewData: LViewData, nodeIndex: number): {\n    [key: string]: any;\n} | null;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/debug.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Renderer2, RendererType2 } from '../render/api';\nimport { DebugRendererFactory2 } from '../view/services';\n/**\n * Adapts the DebugRendererFactory2 to create a DebugRenderer2 specific for IVY.\n *\n * The created DebugRenderer know how to create a Debug Context specific to IVY.\n */\nexport declare class Render3DebugRendererFactory2 extends DebugRendererFactory2 {\n    createRenderer(element: any, renderData: RendererType2 | null): Renderer2;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/definition.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { ChangeDetectionStrategy } from '../change_detection/constants';\nimport { NgModuleDef } from '../metadata/ng_module';\nimport { ViewEncapsulation } from '../metadata/view';\nimport { Type } from '../type';\nimport { BaseDef, ComponentDef, ComponentDefFeature, ComponentQuery, ComponentTemplate, ComponentType, DirectiveDef, DirectiveDefFeature, DirectiveType, DirectiveTypesOrFactory, PipeDef, PipeType, PipeTypesOrFactory } from './interfaces/definition';\nimport { CssSelectorList, SelectorFlags } from './interfaces/projection';\nexport declare const EMPTY: {};\nexport declare const EMPTY_ARRAY: any[];\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n */\nexport declare function defineComponent<T>(componentDefinition: {\n    /**\n     * Directive type, needed to configure the injector.\n     */\n    type: Type<T>;\n    /** The selectors that will be used to match nodes to this component. */\n    selectors: CssSelectorList;\n    /**\n     * Factory method used to create an instance of directive.\n     */\n    factory: (t: Type<T> | null) => T;\n    /**\n     * The number of nodes, local refs, and pipes in this component template.\n     *\n     * Used to calculate the length of this component's LViewData array, so we\n     * can pre-fill the array and set the binding start index.\n     */\n    consts: number;\n    /**\n     * The number of bindings in this component template (including pure fn bindings).\n     *\n     * Used to calculate the length of this component's LViewData array, so we\n     * can pre-fill the array and set the host binding start index.\n     */\n    vars: number;\n    /**\n     * The number of host bindings (including pure fn bindings) in this component.\n     *\n     * Used to calculate the length of the LViewData array for the *parent* component\n     * of this component.\n     */\n    hostVars?: number;\n    /**\n     * Static attributes to set on host element.\n     *\n     * Even indices: attribute name\n     * Odd indices: attribute value\n     */\n    attributes?: string[];\n    /**\n     * A map of input names.\n     *\n     * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n     *\n     * Given:\n     * ```\n     * class MyComponent {\n     *   @Input()\n     *   publicInput1: string;\n     *\n     *   @Input('publicInput2')\n     *   declaredInput2: string;\n     * }\n     * ```\n     *\n     * is described as:\n     * ```\n     * {\n     *   publicInput1: 'publicInput1',\n     *   declaredInput2: ['declaredInput2', 'publicInput2'],\n     * }\n     * ```\n     *\n     * Which the minifier may translate to:\n     * ```\n     * {\n     *   minifiedPublicInput1: 'publicInput1',\n     *   minifiedDeclaredInput2: [ 'publicInput2', 'declaredInput2'],\n     * }\n     * ```\n     *\n     * This allows the render to re-construct the minified, public, and declared names\n     * of properties.\n     *\n     * NOTE:\n     *  - Because declared and public name are usually same we only generate the array\n     *    `['declared', 'public']` format when they differ.\n     *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n     *    inconsistent behavior in that it uses declared names rather than minified or public. For\n     *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n     *    API will be simplified to be consistent with `output`.\n     */\n    inputs?: {\n        [P in keyof T]?: string | [string, string];\n    };\n    /**\n     * A map of output names.\n     *\n     * The format is in: `{[actualPropertyName: string]:string}`.\n     *\n     * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n     *\n     * This allows the render to re-construct the minified and non-minified names\n     * of properties.\n     */\n    outputs?: {\n        [P in keyof T]?: string;\n    };\n    /**\n     * Function executed by the parent template to allow child directive to apply host bindings.\n     */\n    hostBindings?: (directiveIndex: number, elementIndex: number) => void;\n    /**\n     * Function to create instances of content queries associated with a given directive.\n     */\n    contentQueries?: ((dirIndex: number) => void);\n    /** Refreshes content queries associated with directives in a given view */\n    contentQueriesRefresh?: ((directiveIndex: number, queryIndex: number) => void);\n    /**\n     * Defines the name that can be used in the template to assign this directive to a variable.\n     *\n     * See: {@link Directive.exportAs}\n     */\n    exportAs?: string;\n    /**\n     * Template function use for rendering DOM.\n     *\n     * This function has following structure.\n     *\n     * ```\n     * function Template<T>(ctx:T, creationMode: boolean) {\n     *   if (creationMode) {\n     *     // Contains creation mode instructions.\n     *   }\n     *   // Contains binding update instructions\n     * }\n     * ```\n     *\n     * Common instructions are:\n     * Creation mode instructions:\n     *  - `elementStart`, `elementEnd`\n     *  - `text`\n     *  - `container`\n     *  - `listener`\n     *\n     * Binding update instructions:\n     * - `bind`\n     * - `elementAttribute`\n     * - `elementProperty`\n     * - `elementClass`\n     * - `elementStyle`\n     *\n     */\n    template: ComponentTemplate<T>;\n    /**\n     * Additional set of instructions specific to view query processing. This could be seen as a\n     * set of instruction to be inserted into the template function.\n     *\n     * Query-related instructions need to be pulled out to a specific function as a timing of\n     * execution is different as compared to all other instructions (after change detection hooks but\n     * before view hooks).\n     */\n    viewQuery?: ComponentQuery<T> | null;\n    /**\n     * A list of optional features to apply.\n     *\n     * See: {@link NgOnChangesFeature}, {@link ProvidersFeature}\n     */\n    features?: ComponentDefFeature[];\n    /**\n     * Defines template and style encapsulation options available for Component's {@link Component}.\n     */\n    encapsulation?: ViewEncapsulation;\n    /**\n     * Defines arbitrary developer-defined data to be stored on a renderer instance.\n     * This is useful for renderers that delegate to other renderers.\n     *\n     * see: animation\n     */\n    data?: {\n        [kind: string]: any;\n    };\n    /**\n     * A set of styles that the component needs to be present for component to render correctly.\n     */\n    styles?: string[];\n    /**\n     * The strategy that the default change detector uses to detect changes.\n     * When set, takes effect the next time change detection is triggered.\n     */\n    changeDetection?: ChangeDetectionStrategy;\n    /**\n     * Registry of directives and components that may be found in this component's view.\n     *\n     * The property is either an array of `DirectiveDef`s or a function which returns the array of\n     * `DirectiveDef`s. The function is necessary to be able to support forward declarations.\n     */\n    directives?: DirectiveTypesOrFactory | null;\n    /**\n     * Registry of pipes that may be found in this component's view.\n     *\n     * The property is either an array of `PipeDefs`s or a function which returns the array of\n     * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n     */\n    pipes?: PipeTypesOrFactory | null;\n}): never;\nexport declare function extractDirectiveDef(type: DirectiveType<any> & ComponentType<any>): DirectiveDef<any> | ComponentDef<any>;\nexport declare function extractPipeDef(type: PipeType<any>): PipeDef<any>;\nexport declare function defineNgModule<T>(def: {\n    type: T;\n} & Partial<NgModuleDef<T>>): never;\n/**\n * Create a base definition\n *\n * # Example\n * ```\n * class ShouldBeInherited {\n *   static ngBaseDef = defineBase({\n *      ...\n *   })\n * }\n * @param baseDefinition The base definition parameters\n */\nexport declare function defineBase<T>(baseDefinition: {\n    /**\n     * A map of input names.\n     *\n     * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n     *\n     * Given:\n     * ```\n     * class MyComponent {\n     *   @Input()\n     *   publicInput1: string;\n     *\n     *   @Input('publicInput2')\n     *   declaredInput2: string;\n     * }\n     * ```\n     *\n     * is described as:\n     * ```\n     * {\n     *   publicInput1: 'publicInput1',\n     *   declaredInput2: ['declaredInput2', 'publicInput2'],\n     * }\n     * ```\n     *\n     * Which the minifier may translate to:\n     * ```\n     * {\n     *   minifiedPublicInput1: 'publicInput1',\n     *   minifiedDeclaredInput2: [ 'declaredInput2', 'publicInput2'],\n     * }\n     * ```\n     *\n     * This allows the render to re-construct the minified, public, and declared names\n     * of properties.\n     *\n     * NOTE:\n     *  - Because declared and public name are usually same we only generate the array\n     *    `['declared', 'public']` format when they differ.\n     *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n     *    inconsistent behavior in that it uses declared names rather than minified or public. For\n     *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n     *    API will be simplified to be consistent with `outputs`.\n     */\n    inputs?: {\n        [P in keyof T]?: string | [string, string];\n    };\n    /**\n     * A map of output names.\n     *\n     * The format is in: `{[actualPropertyName: string]:string}`.\n     *\n     * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n     *\n     * This allows the render to re-construct the minified and non-minified names\n     * of properties.\n     */\n    outputs?: {\n        [P in keyof T]?: string;\n    };\n}): BaseDef<T>;\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = defineDirective({\n *     ...\n *   });\n * }\n * ```\n */\nexport declare const defineDirective: <T>(directiveDefinition: {\n    /**\n     * Directive type, needed to configure the injector.\n     */\n    type: Type<T>;\n    /** The selectors that will be used to match nodes to this directive. */\n    selectors: (string | SelectorFlags)[][];\n    /**\n     * Factory method used to create an instance of directive.\n     */\n    factory: (t: Type<T> | null) => T;\n    /**\n     * Static attributes to set on host element.\n     *\n     * Even indices: attribute name\n     * Odd indices: attribute value\n     */\n    attributes?: string[] | undefined;\n    /**\n     * A map of input names.\n     *\n     * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n     *\n     * Given:\n     * ```\n     * class MyComponent {\n     *   @Input()\n     *   publicInput1: string;\n     *\n     *   @Input('publicInput2')\n     *   declaredInput2: string;\n     * }\n     * ```\n     *\n     * is described as:\n     * ```\n     * {\n     *   publicInput1: 'publicInput1',\n     *   declaredInput2: ['declaredInput2', 'publicInput2'],\n     * }\n     * ```\n     *\n     * Which the minifier may translate to:\n     * ```\n     * {\n     *   minifiedPublicInput1: 'publicInput1',\n     *   minifiedDeclaredInput2: [ 'publicInput2', 'declaredInput2'],\n     * }\n     * ```\n     *\n     * This allows the render to re-construct the minified, public, and declared names\n     * of properties.\n     *\n     * NOTE:\n     *  - Because declared and public name are usually same we only generate the array\n     *    `['declared', 'public']` format when they differ.\n     *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n     *    inconsistent behavior in that it uses declared names rather than minified or public. For\n     *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n     *    API will be simplified to be consistent with `output`.\n     */\n    inputs?: { [P in keyof T]?: string | [string, string] | undefined; } | undefined;\n    /**\n     * A map of output names.\n     *\n     * The format is in: `{[actualPropertyName: string]:string}`.\n     *\n     * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n     *\n     * This allows the render to re-construct the minified and non-minified names\n     * of properties.\n     */\n    outputs?: { [P in keyof T]?: string | undefined; } | undefined;\n    /**\n     * A list of optional features to apply.\n     *\n     * See: {@link NgOnChangesFeature}, {@link ProvidersFeature}, {@link InheritDefinitionFeature}\n     */\n    features?: DirectiveDefFeature[] | undefined;\n    /**\n     * The number of host bindings (including pure fn bindings) in this directive.\n     *\n     * Used to calculate the length of the LViewData array for the *parent* component\n     * of this directive.\n     */\n    hostVars?: number | undefined;\n    /**\n     * Function executed by the parent template to allow child directive to apply host bindings.\n     */\n    hostBindings?: ((directiveIndex: number, elementIndex: number) => void) | undefined;\n    /**\n     * Function to create instances of content queries associated with a given directive.\n     */\n    contentQueries?: ((directiveIndex: number) => void) | undefined;\n    /** Refreshes content queries associated with directives in a given view */\n    contentQueriesRefresh?: ((directiveIndex: number, queryIndex: number) => void) | undefined;\n    /**\n     * Defines the name that can be used in the template to assign this directive to a variable.\n     *\n     * See: {@link Directive.exportAs}\n     */\n    exportAs?: string | undefined;\n}) => never;\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n */\nexport declare function definePipe<T>(pipeDef: {\n    /** Name of the pipe. Used for matching pipes in template to pipe defs. */\n    name: string;\n    /** Pipe class reference. Needed to extract pipe lifecycle hooks. */\n    type: Type<T>;\n    /** A factory for creating a pipe instance. */\n    factory: (t: Type<T> | null) => T;\n    /** Whether the pipe is pure. */\n    pure?: boolean;\n}): never;\n/**\n * The following getter methods retrieve the definition form the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n */\nexport declare function getComponentDef<T>(type: any): ComponentDef<T> | null;\nexport declare function getDirectiveDef<T>(type: any): DirectiveDef<T> | null;\nexport declare function getPipeDef<T>(type: any): PipeDef<T> | null;\nexport declare function getNgModuleDef<T>(type: any): NgModuleDef<T> | null;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/di_setup.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Provider } from '../di/provider';\nimport { DirectiveDef } from '.';\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @param def the directive definition\n * @param providers: Array of `providers`.\n * @param viewProviders: Array of `viewProviders`.\n */\nexport declare function providersResolver<T>(def: DirectiveDef<T>, providers: Provider[], viewProviders: Provider[]): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/di.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\nimport { Injector } from '../di/injector';\nimport { InjectFlags } from '../di/injector_compatibility';\nimport { Type } from '../type';\nimport { RelativeInjectorLocation } from './interfaces/injector';\nimport { TContainerNode, TElementContainerNode, TElementNode, TNode } from './interfaces/node';\nimport { LViewData, TData, TView } from './interfaces/view';\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param injectorIndex The index of the node injector where this token should be registered\n * @param tView The TView for the injector's bloom filters\n * @param type The directive token to register\n */\nexport declare function bloomAdd(injectorIndex: number, tView: TView, type: Type<any> | InjectionToken<any>): void;\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param tNode for which an injector should be retrieved / created.\n * @param hostView View where the node is stored\n * @returns Node injector\n */\nexport declare function getOrCreateNodeInjectorForNode(tNode: TElementNode | TContainerNode | TElementContainerNode, hostView: LViewData): number;\nexport declare function getInjectorIndex(tNode: TNode, hostView: LViewData): number;\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`\n */\nexport declare function getParentInjectorLocation(tNode: TNode, view: LViewData): RelativeInjectorLocation;\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param di The node injector in which a directive will be added\n * @param token The type or the injection token to be made public\n */\nexport declare function diPublicInInjector(injectorIndex: number, view: LViewData, token: InjectionToken<any> | Type<any>): void;\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * @Component(...)\n * class MyComponent {\n *   constructor(@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ngComponentDef = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * @publicApi\n */\nexport declare function injectAttributeImpl(tNode: TNode, attrNameToInject: string): string | undefined;\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * @param nodeInjector Node injector where the search should start\n * @param token The token to look for\n * @param flags Injection flags\n * @returns the value from the injector or `null` when not found\n */\nexport declare function getOrCreateInjectable<T>(tNode: TElementNode | TContainerNode | TElementContainerNode, lViewData: LViewData, token: Type<T> | InjectionToken<T>, flags?: InjectFlags, notFoundValue?: any): T | null;\n/**\n* Retrieve or instantiate the injectable from the `lData` at particular `index`.\n*\n* This function checks to see if the value has already been instantiated and if so returns the\n* cached `injectable`. Otherwise if it detects that the value is still a factory it\n* instantiates the `injectable` and caches the value.\n*/\nexport declare function getNodeInjectable(tData: TData, lData: LViewData, index: number, tNode: TElementNode): any;\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param token the injection token\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n */\nexport declare function bloomHashBitOrFactory(token: Type<any> | InjectionToken<any>): number | Function | undefined;\nexport declare function bloomHasToken(bloomHash: number, injectorIndex: number, injectorView: LViewData | TData): boolean;\nexport declare function injectInjector(): NodeInjector;\nexport declare class NodeInjector implements Injector {\n    private _tNode;\n    private _hostView;\n    private _injectorIndex;\n    constructor(_tNode: TElementNode | TContainerNode | TElementContainerNode, _hostView: LViewData);\n    get(token: any): any;\n}\nexport declare function getFactoryOf<T>(type: Type<any>): ((type: Type<T> | null) => T) | null;\nexport declare function getInheritedFactory<T>(type: Type<any>): (type: Type<T>) => T;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/discovery_utils.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '../di/injector';\nimport { LContext } from './interfaces/context';\nimport { LViewData, RootContext } from './interfaces/view';\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * @param element Host DOM element from which the component should be retrieved for.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @publicApi\n */\nexport declare function getComponent<T = {}>(element: Element): T | null;\n/**\n * Returns the component instance associated with view which owns the DOM element (`null`\n * otherwise).\n *\n * @param element DOM element which is owned by an existing component's view.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getViewComponent(<child-comp>) instanceof MyApp).toBeTruthy();\n * expect(getViewComponent(<my-app>)).toEqual(null);\n * ```\n *\n * @publicApi\n */\nexport declare function getViewComponent<T = {}>(element: Element | {}): T | null;\n/**\n * Returns the `RootContext` instance that is associated with\n * the application where the target is situated.\n *\n */\nexport declare function getRootContext(target: LViewData | {}): RootContext;\n/**\n * Retrieve all root components.\n *\n * Root components are those which have been bootstrapped by Angular.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nexport declare function getRootComponents(target: {}): any[];\n/**\n * Retrieves an `Injector` associated with the element, component or directive.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nexport declare function getInjector(target: {}): Injector;\n/**\n * Retrieves directives associated with a given DOM host element.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nexport declare function getDirectives(target: {}): Array<{}>;\n/**\n * Returns LContext associated with a target passed as an argument.\n * Throws if a given target doesn't have associated LContext.\n *\n */\nexport declare function loadContext(target: {}): LContext;\n/**\n * Retrieve the root view from any component by walking the parent `LViewData` until\n * reaching the root `LViewData`.\n *\n * @param componentOrView any component or view\n *\n */\nexport declare function getRootView(componentOrView: LViewData | {}): LViewData;\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nexport declare function getLocalRefs(target: {}): {\n    [key: string]: any;\n};\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * @param directive Component or Directive for which the host element should be retrieved.\n *\n * @publicApi\n */\nexport declare function getHostElement<T>(directive: T): Element;\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param component The component to return the content text for.\n */\nexport declare function getRenderedText(component: any): string;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TNode } from './interfaces/node';\n/** Called when directives inject each other (creating a circular dependency) */\nexport declare function throwCyclicDependencyError(token: any): never;\n/** Called when there are multiple component selectors that match a given node */\nexport declare function throwMultipleComponentError(tNode: TNode): never;\n/** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */\nexport declare function throwErrorIfNoChangesMode(creationMode: boolean, checkNoChangesMode: boolean, oldValue: any, currValue: any): never | void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/features/inherit_definition_feature.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentDef, DirectiveDef } from '../interfaces/definition';\n/**\n * Merges the definition from a super class to a sub class.\n * @param definition The definition that is a SubClass of another directive of component\n */\nexport declare function InheritDefinitionFeature(definition: DirectiveDef<any> | ComponentDef<any>): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/features/ng_onchanges_feature.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DirectiveDef } from '../interfaces/definition';\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ngComponentDef = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n */\nexport declare function NgOnChangesFeature<T>(definition: DirectiveDef<T>): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/features/providers_feature.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Provider } from '../../di/provider';\nimport { DirectiveDef } from '../interfaces/definition';\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ngComponentDef = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    consts: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        text(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        textBinding(0, bind(ctx.greeter.greet()));\n *      }\n *    },\n *    features: [ProvidersFeature([GreeterDE])]\n *  });\n * }\n *\n * @param definition\n */\nexport declare function ProvidersFeature<T>(providers: Provider[], viewProviders?: Provider[]): (definition: DirectiveDef<T>) => void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/fields.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare const NG_COMPONENT_DEF: string;\nexport declare const NG_DIRECTIVE_DEF: string;\nexport declare const NG_INJECTABLE_DEF: string;\nexport declare const NG_INJECTOR_DEF: string;\nexport declare const NG_PIPE_DEF: string;\nexport declare const NG_MODULE_DEF: string;\nexport declare const NG_BASE_DEF: string;\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\nexport declare const NG_ELEMENT_ID: string;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/global_utils_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @fileoverview\n * This file is the index file collecting all of the symbols published on the global.ng namespace.\n *\n * The reason why this file/module is separate global_utils.ts file is that we use this file\n * to generate a d.ts file containing all the published symbols that is then compared to the golden\n * file in the public_api_guard test.\n */\nexport { getComponent, getDirectives, getHostElement, getInjector, getRootComponents, getViewComponent } from './discovery_utils';\nexport { markDirty } from './instructions';\nexport { getPlayers } from './players';\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/global_utils.d.ts",
    "content": "/**\n * This file introduces series of globally accessible debug tools\n * to allow for the Angular debugging story to function.\n *\n * To see this in action run the following command:\n *\n *   bazel run --define=compile=aot\n *   //packages/core/test/bundling/todo:devserver\n *\n *  Then load `localhost:5432` and start using the console tools.\n */\n/**\n * This value reflects the property on the window where the dev\n * tools are patched (window.ng).\n * */\nexport declare const GLOBAL_PUBLISH_EXPANDO_KEY = \"ng\";\nexport declare function publishDefaultGlobalUtils(): void;\nexport declare type GlobalDevModeContainer = {\n    [GLOBAL_PUBLISH_EXPANDO_KEY]: {\n        [fnName: string]: Function;\n    };\n};\n/**\n * Publishes the given function to `window.ngDevMode` so that it can be\n * used from the browser console when an application is not in production.\n */\nexport declare function publishGlobalUtil(name: string, fn: Function): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/hooks.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HookData, LViewData, TView } from './interfaces/view';\n/**\n * If this is the first template pass, any ngOnInit or ngDoCheck hooks will be queued into\n * TView.initHooks during directiveCreate.\n *\n * The directive index and hook type are encoded into one number (1st bit: type, remaining bits:\n * directive index), then saved in the even indices of the initHooks array. The odd indices\n * hold the hook functions themselves.\n *\n * @param index The index of the directive in LViewData\n * @param hooks The static hooks map on the directive def\n * @param tView The current TView\n */\nexport declare function queueInitHooks(index: number, onInit: (() => void) | null, doCheck: (() => void) | null, tView: TView): void;\n/**\n * Loops through the directives on a node and queues all their hooks except ngOnInit\n * and ngDoCheck, which are queued separately in directiveCreate.\n */\nexport declare function queueLifecycleHooks(flags: number, tView: TView): void;\n/**\n * Calls onInit and doCheck calls if they haven't already been called.\n *\n * @param currentView The current view\n */\nexport declare function executeInitHooks(currentView: LViewData, tView: TView, creationMode: boolean): void;\n/**\n * Iterates over afterViewInit and afterViewChecked functions and calls them.\n *\n * @param currentView The current view\n */\nexport declare function executeHooks(data: LViewData, allHooks: HookData | null, checkHooks: HookData | null, creationMode: boolean): void;\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * creation mode.\n *\n * @param currentView The current view\n * @param arr The array in which the hooks are found\n */\nexport declare function callHooks(currentView: any[], arr: HookData): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/i18n.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NO_CHANGE } from './tokens';\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A translated\n * message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param message The message to crop\n * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n */\nexport declare function getTranslationForTemplate(message: string, subTemplateIndex?: number): string;\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param message The translation message.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n */\nexport declare function i18nStart(index: number, message: string, subTemplateIndex?: number): void;\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @publicAPI\n */\nexport declare function i18nPostprocess(message: string, replacements: {\n    [key: string]: (string | string[]);\n}): string;\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n */\nexport declare function i18nEnd(): void;\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param message The translation message.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n */\nexport declare function i18n(index: number, message: string, subTemplateIndex?: number): void;\n/**\n * Marks a list of attributes as translatable.\n *\n * @param index A unique index in the static block\n * @param values\n */\nexport declare function i18nAttributes(index: number, values: string[]): void;\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @param expression The binding's new value or NO_CHANGE\n */\nexport declare function i18nExp<T>(expression: T | NO_CHANGE): void;\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n */\nexport declare function i18nApply(index: number): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LifecycleHooksFeature, renderComponent, whenRendered } from './component';\nimport { defineBase, defineComponent, defineDirective, defineNgModule, definePipe } from './definition';\nimport { getHostElement, getRenderedText } from './discovery_utils';\nimport { InheritDefinitionFeature } from './features/inherit_definition_feature';\nimport { NgOnChangesFeature } from './features/ng_onchanges_feature';\nimport { ProvidersFeature } from './features/providers_feature';\nimport { BaseDef, ComponentDef, ComponentDefWithMeta, ComponentTemplate, ComponentType, DirectiveDef, DirectiveDefFlags, DirectiveDefWithMeta, DirectiveType, PipeDef, PipeDefWithMeta } from './interfaces/definition';\nexport { ComponentFactory, ComponentFactoryResolver, ComponentRef, WRAP_RENDERER_FACTORY2, injectComponentFactoryResolver } from './component_ref';\nexport { getFactoryOf, getInheritedFactory } from './di';\nexport { RenderFlags } from './interfaces/definition';\nexport { CssSelectorList } from './interfaces/projection';\nexport { bind, interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV, container, containerRefreshStart, containerRefreshEnd, nextContext, element, elementAttribute, elementClassProp, elementEnd, elementProperty, elementStart, elementContainerStart, elementContainerEnd, elementStyling, elementStylingMap, elementStyleProp, elementStylingApply, listener, store, load, namespaceHTML, namespaceMathML, namespaceSVG, projection, projectionDef, text, textBinding, template, reference, embeddedViewStart, embeddedViewEnd, detectChanges, markDirty, tick, directiveInject, injectAttribute, } from './instructions';\nexport { getCurrentView, restoreView, enableBindings, disableBindings, } from './state';\nexport { i18n, i18nAttributes, i18nExp, i18nStart, i18nEnd, i18nApply, i18nPostprocess } from './i18n';\nexport { NgModuleFactory, NgModuleRef, NgModuleType } from './ng_module_ref';\nexport { AttributeMarker } from './interfaces/node';\nexport { setClassMetadata, } from './metadata';\nexport { pipe, pipeBind1, pipeBind2, pipeBind3, pipeBind4, pipeBindV, } from './pipe';\nexport { QueryList, query, queryRefresh, } from './query';\nexport { registerContentQuery, loadQueryList, } from './instructions';\nexport { pureFunction0, pureFunction1, pureFunction2, pureFunction3, pureFunction4, pureFunction5, pureFunction6, pureFunction7, pureFunction8, pureFunctionV, } from './pure_function';\nexport { templateRefExtractor } from './view_engine_compatibility_prebound';\nexport { BaseDef, ComponentDef, ComponentDefWithMeta, ComponentTemplate, ComponentType, DirectiveDef, DirectiveDefFlags, DirectiveDefWithMeta, DirectiveType, NgOnChangesFeature, InheritDefinitionFeature, ProvidersFeature, PipeDef, PipeDefWithMeta, LifecycleHooksFeature, defineComponent, defineDirective, defineNgModule, defineBase, definePipe, getHostElement, getRenderedText, renderComponent, whenRendered, };\nexport { NO_CHANGE } from './tokens';\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/instructions.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\nimport { Injector } from '../di/injector';\nimport { InjectFlags } from '../di/injector_compatibility';\nimport { QueryList } from '../linker';\nimport { Sanitizer } from '../sanitization/security';\nimport { StyleSanitizeFn } from '../sanitization/style_sanitizer';\nimport { Type } from '../type';\nimport { LContainer } from './interfaces/container';\nimport { ComponentDef, ComponentQuery, ComponentTemplate, DirectiveDefListOrFactory, InitialStylingFlags, PipeDefListOrFactory, RenderFlags } from './interfaces/definition';\nimport { LocalRefExtractor, TAttributes, TContainerNode, TElementContainerNode, TElementNode, TNode, TNodeType, TProjectionNode, TViewNode } from './interfaces/node';\nimport { PlayerFactory } from './interfaces/player';\nimport { CssSelectorList } from './interfaces/projection';\nimport { LQueries } from './interfaces/query';\nimport { RComment, RElement, RText, Renderer3, RendererFactory3 } from './interfaces/renderer';\nimport { SanitizerFn } from './interfaces/sanitization';\nimport { LViewData, LViewFlags, RootContext, RootContextFlags, TView } from './interfaces/view';\nimport { NO_CHANGE } from './tokens';\n/**\n * Refreshes the view, executing the following steps in that order:\n * triggers init hooks, refreshes dynamic embedded views, triggers content hooks, sets host\n * bindings, refreshes child components.\n * Note: view hooks are triggered later when leaving the view.\n */\nexport declare function refreshDescendantViews(viewData: LViewData, rf: RenderFlags | null): void;\n/** Sets the host bindings for the current view. */\nexport declare function setHostBindings(tView: TView, viewData: LViewData): void;\nexport declare function createLViewData<T>(parentViewData: LViewData | null, renderer: Renderer3, tView: TView, context: T | null, flags: LViewFlags, sanitizer?: Sanitizer | null, injector?: Injector | null): LViewData;\n/**\n * Create and stores the TNode, and hooks it up to the tree.\n *\n * @param index The index at which the TNode should be saved (null if view, since they are not\n * saved).\n * @param type The type of TNode to create\n * @param native The native element for this node, if applicable\n * @param name The tag name of the associated native element, if applicable\n * @param attrs Any attrs for the native element, if applicable\n */\nexport declare function createNodeAtIndex(index: number, type: TNodeType.Element, native: RElement | RText | null, name: string | null, attrs: TAttributes | null): TElementNode;\nexport declare function createNodeAtIndex(index: number, type: TNodeType.Container, native: RComment, name: string | null, attrs: TAttributes | null): TContainerNode;\nexport declare function createNodeAtIndex(index: number, type: TNodeType.Projection, native: null, name: null, attrs: TAttributes | null): TProjectionNode;\nexport declare function createNodeAtIndex(index: number, type: TNodeType.ElementContainer, native: RComment, name: null, attrs: TAttributes | null): TElementContainerNode;\nexport declare function createNodeAtIndex(index: number, type: TNodeType.IcuContainer, native: RComment, name: null, attrs: TAttributes | null): TElementContainerNode;\nexport declare function createViewNode(index: number, view: LViewData): TViewNode;\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n * template passes.\n */\nexport declare function allocExpando(view: LViewData): void;\n/**\n *\n * @param hostNode Existing node to render into.\n * @param templateFn Template function with the instructions.\n * @param consts The number of nodes, local refs, and pipes in this template\n * @param context to pass into the template.\n * @param providedRendererFactory renderer factory to use\n * @param host The host element node to use\n * @param directives Directive defs that should be used for matching\n * @param pipes Pipe defs that should be used for matching\n */\nexport declare function renderTemplate<T>(hostNode: RElement, templateFn: ComponentTemplate<T>, consts: number, vars: number, context: T, providedRendererFactory: RendererFactory3, hostView: LViewData | null, directives?: DirectiveDefListOrFactory | null, pipes?: PipeDefListOrFactory | null, sanitizer?: Sanitizer | null): LViewData;\n/**\n * Used for creating the LViewNode of a dynamic embedded view,\n * either through ViewContainerRef.createEmbeddedView() or TemplateRef.createEmbeddedView().\n * Such lViewNode will then be renderer with renderEmbeddedTemplate() (see below).\n */\nexport declare function createEmbeddedViewAndNode<T>(tView: TView, context: T, declarationView: LViewData, renderer: Renderer3, queries: LQueries | null, injectorIndex: number): LViewData;\n/**\n * Used for rendering embedded views (e.g. dynamically created views)\n *\n * Dynamically created views must store/retrieve their TViews differently from component views\n * because their template functions are nested in the template functions of their hosts, creating\n * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor inside\n * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\n * can't store TViews in the template function itself (as we do for comps). Instead, we store the\n * TView for dynamically created views on their host TNode, which only has one instance.\n */\nexport declare function renderEmbeddedTemplate<T>(viewToRender: LViewData, tView: TView, context: T, rf: RenderFlags): void;\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @param level The relative level of the view from which to grab context compared to contextVewData\n * @returns context\n */\nexport declare function nextContext<T = any>(level?: number): T;\nexport declare function namespaceSVG(): void;\nexport declare function namespaceMathML(): void;\nexport declare function namespaceHTML(): void;\n/**\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\n *\n * @param index Index of the element in the data array\n * @param name Name of the DOM Node\n * @param attrs Statically bound set of attributes to be written into the DOM element on creation.\n * @param localRefs A set of local reference bindings on the element.\n */\nexport declare function element(index: number, name: string, attrs?: TAttributes | null, localRefs?: string[] | null): void;\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param index Index of the element in the LViewData array\n * @param attrs Set of attributes to be used when matching directives.\n * @param localRefs A set of local reference bindings on the element.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n */\nexport declare function elementContainerStart(index: number, attrs?: TAttributes | null, localRefs?: string[] | null): void;\n/** Mark the end of the <ng-container>. */\nexport declare function elementContainerEnd(): void;\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param index Index of the element in the LViewData array\n * @param name Name of the DOM Node\n * @param attrs Statically bound set of attributes to be written into the DOM element on creation.\n * @param localRefs A set of local reference bindings on the element.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n */\nexport declare function elementStart(index: number, name: string, attrs?: TAttributes | null, localRefs?: string[] | null): void;\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param name the tag name\n * @param overriddenRenderer Optional A renderer to override the default one\n * @returns the element created\n */\nexport declare function elementCreate(name: string, overriddenRenderer?: Renderer3): RElement;\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param templateFn The template from which to get static data\n * @param consts The number of nodes, local refs, and pipes in this view\n * @param vars The number of bindings and pure function bindings in this view\n * @param directives Directive defs that should be saved on TView\n * @param pipes Pipe defs that should be saved on TView\n * @returns TView\n */\nexport declare function getOrCreateTView(templateFn: ComponentTemplate<any>, consts: number, vars: number, directives: DirectiveDefListOrFactory | null, pipes: PipeDefListOrFactory | null, viewQuery: ComponentQuery<any> | null): TView;\n/**\n * Creates a TView instance\n *\n * @param viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n * @param templateFn Template function\n * @param consts The number of nodes, local refs, and pipes in this template\n * @param directives Registry of directives for this view\n * @param pipes Registry of pipes for this view\n */\nexport declare function createTView(viewIndex: number, templateFn: ComponentTemplate<any> | null, consts: number, vars: number, directives: DirectiveDefListOrFactory | null, pipes: PipeDefListOrFactory | null, viewQuery: ComponentQuery<any> | null): TView;\nexport declare function createError(text: string, token: any): Error;\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param elementOrSelector Render element or CSS selector to locate the element.\n */\nexport declare function locateHostElement(factory: RendererFactory3, elementOrSelector: RElement | string): RElement | null;\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener.\n */\nexport declare function listener(eventName: string, listenerFn: (e?: any) => any, useCapture?: boolean): void;\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n */\nexport declare function storeCleanupWithContext(view: LViewData | null, context: any, cleanupFn: Function): void;\n/**\n * Saves the cleanup function itself in LView.cleanupInstances.\n *\n * This is necessary for functions that are wrapped with their contexts, like in renderer2\n * listeners.\n *\n * On the first template pass, the index of the cleanup function is saved in TView.\n */\nexport declare function storeCleanupFn(view: LViewData, cleanupFn: Function): void;\n/** Mark the end of the element. */\nexport declare function elementEnd(): void;\n/**\n * Updates the value of removes an attribute on an Element.\n *\n * @param number index The index of the element in the data array\n * @param name name The name of the attribute.\n * @param value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param sanitizer An optional function used to sanitize the value.\n */\nexport declare function elementAttribute(index: number, name: string, value: any, sanitizer?: SanitizerFn | null): void;\n/**\n * Update a property on an Element.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new @Inputs don't have to be re-compiled.\n *\n * @param index The index of the element to update in the data array\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n */\nexport declare function elementProperty<T>(index: number, propName: string, value: T | NO_CHANGE, sanitizer?: SanitizerFn | null): void;\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param type The type of the node\n * @param adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param tagName The tag name of the node\n * @param attrs The attributes defined on this node\n * @param tViews Any TViews attached to this node\n * @returns the TNode object\n */\nexport declare function createTNode(viewData: LViewData, type: TNodeType, adjustedIndex: number, tagName: string | null, attrs: TAttributes | null, tViews: TView[] | null): TNode;\n/**\n * Add or remove a class in a `classList` on a DOM element.\n *\n * This instruction is meant to handle the [class.foo]=\"exp\" case\n *\n * @param index The index of the element to update in the data array\n * @param classIndex Index of class to toggle. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value A value indicating if a given class should be added or removed.\n * @param directiveIndex the index for the directive that is attempting to change styling.\n */\nexport declare function elementClassProp(index: number, classIndex: number, value: boolean | PlayerFactory, directiveIndex?: number): void;\n/**\n * Assign any inline style values to the element during creation mode.\n *\n * This instruction is meant to be called during creation mode to apply all styling\n * (e.g. `style=\"...\"`) values to the element. This is also where the provided index\n * value is allocated for the styling details for its corresponding element (the element\n * index is the previous index value from this one).\n *\n * (Note this function calls `elementStylingApply` immediately when called.)\n *\n *\n * @param index Index value which will be allocated to store styling data for the element.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @param classDeclarations A key/value array of CSS classes that will be registered on the element.\n *   Each individual style will be used on the element as long as it is not overridden\n *   by any classes placed on the element by multiple (`[class]`) or singular (`[class.named]`)\n *   bindings. If a class binding changes its value to a falsy value then the matching initial\n *   class value that are passed in here will be applied to the element (if matched).\n * @param styleDeclarations A key/value array of CSS styles that will be registered on the element.\n *   Each individual style will be used on the element as long as it is not overridden\n *   by any styles placed on the element by multiple (`[style]`) or singular (`[style.prop]`)\n *   bindings. If a style binding changes its value to null then the initial styling\n *   values that are passed in here will be applied to the element (if matched).\n * @param styleSanitizer An optional sanitizer function that will be used (if provided)\n *   to sanitize the any CSS property values that are applied to the element (during rendering).\n * @param directiveIndex the index for the directive that is attempting to change styling.\n */\nexport declare function elementStyling(classDeclarations?: (string | boolean | InitialStylingFlags)[] | null, styleDeclarations?: (string | boolean | InitialStylingFlags)[] | null, styleSanitizer?: StyleSanitizeFn | null, directiveIndex?: number): void;\n/**\n * Apply all styling values to the element which have been queued by any styling instructions.\n *\n * This instruction is meant to be run once one or more `elementStyle` and/or `elementStyleProp`\n * have been issued against the element. This function will also determine if any styles have\n * changed and will then skip the operation if there is nothing new to render.\n *\n * Once called then all queued styles will be flushed.\n *\n * @param index Index of the element's styling storage that will be rendered.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @param directiveIndex the index for the directive that is attempting to change styling.\n */\nexport declare function elementStylingApply(index: number, directiveIndex?: number): void;\n/**\n * Queue a given style to be rendered on an Element.\n *\n * If the style value is `null` then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `elementStyle` or any styles that are present\n * from when the element was created (with `elementStyling`).\n *\n * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n *\n * @param index Index of the element's styling storage to change in the data array.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @param styleIndex Index of the style property on this element. (Monotonically increasing.)\n * @param value New value to write (null to remove).\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *        Note that when a suffix is provided then the underlying sanitizer will\n *        be ignored.\n * @param directiveIndex the index for the directive that is attempting to change styling.\n */\nexport declare function elementStyleProp(index: number, styleIndex: number, value: string | number | String | PlayerFactory | null, suffix?: string, directiveIndex?: number): void;\n/**\n * Queue a key/value map of styles to be rendered on an Element.\n *\n * This instruction is meant to handle the `[style]=\"exp\"` usage. When styles are applied to\n * the Element they will then be placed with respect to any styles set with `elementStyleProp`.\n * If any styles are set to `null` then they will be removed from the element (unless the same\n * style properties have been assigned to the element during creation using `elementStyling`).\n *\n * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n *\n * @param index Index of the element's styling storage to change in the data array.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @param classes A key/value style map of CSS classes that will be added to the given element.\n *        Any missing classes (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's list of CSS classes.\n * @param styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n * @param directiveIndex the index for the directive that is attempting to change styling.\n */\nexport declare function elementStylingMap<T>(index: number, classes: {\n    [key: string]: any;\n} | string | NO_CHANGE | null, styles?: {\n    [styleName: string]: any;\n} | NO_CHANGE | null, directiveIndex?: number): void;\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Value to write. This value will be stringified.\n */\nexport declare function text(index: number, value?: any): void;\n/**\n * Create text node with binding\n * Bindings should be handled externally with the proper interpolation(1-8) method\n *\n * @param index Index of the node in the data array.\n * @param value Stringified value to write.\n */\nexport declare function textBinding<T>(index: number, value: T | NO_CHANGE): void;\n/**\n * Instantiate a root component.\n */\nexport declare function instantiateRootComponent<T>(tView: TView, viewData: LViewData, def: ComponentDef<T>): T;\n/**\n* Generates a new block in TView.expandoInstructions for this node.\n*\n* Each expando block starts with the element index (turned negative so we can distinguish\n* it from the hostVar count) and the directive count. See more in VIEW_DATA.md.\n*/\nexport declare function generateExpandoInstructionBlock(tView: TView, tNode: TNode, directiveCount: number): void;\n/**\n* On the first template pass, we need to reserve space for host binding values\n* after directives are matched (so all directives are saved, then bindings).\n* Because we are updating the blueprint, we only need to do this once.\n*/\nexport declare function prefillHostVars(tView: TView, viewData: LViewData, totalHostVars: number): void;\n/** Stores index of component's host element so it will be queued for view refresh during CD. */\nexport declare function queueComponentIndexForCheck(previousOrParentTNode: TNode): void;\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param index the initial index\n */\nexport declare function initNodeFlags(tNode: TNode, index: number, numberOfDirectives: number): void;\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param hostNative The host element for the LContainer\n * @param hostTNode The host TNode for the LContainer\n * @param currentView The parent view of the LContainer\n * @param native The native comment element\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @returns LContainer\n */\nexport declare function createLContainer(hostNative: RElement | RComment, hostTNode: TElementNode | TContainerNode | TElementContainerNode, currentView: LViewData, native: RComment, isForViewContainerRef?: boolean): LContainer;\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param consts The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrs The attrs attached to the container, if applicable\n * @param localRefs A set of local reference bindings on the element.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n */\nexport declare function template(index: number, templateFn: ComponentTemplate<any> | null, consts: number, vars: number, tagName?: string | null, attrs?: TAttributes | null, localRefs?: string[] | null, localRefExtractor?: LocalRefExtractor): void;\n/**\n * Creates an LContainer for inline views, e.g.\n *\n * % if (showing) {\n *   <div></div>\n * % }\n *\n * @param index The index of the container in the data array\n */\nexport declare function container(index: number): void;\n/**\n * Sets a container up to receive views.\n *\n * @param index The index of the container in the data array\n */\nexport declare function containerRefreshStart(index: number): void;\n/**\n * Marks the end of the LContainer.\n *\n * Marking the end of LContainer is the time when to child views get inserted or removed.\n */\nexport declare function containerRefreshEnd(): void;\n/**\n * Marks the start of an embedded view.\n *\n * @param viewBlockId The ID of this view\n * @return boolean Whether or not this view is in creation mode\n */\nexport declare function embeddedViewStart(viewBlockId: number, consts: number, vars: number): RenderFlags;\n/** Marks the end of an embedded view. */\nexport declare function embeddedViewEnd(): void;\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @param adjustedElementIndex  Element index in LViewData[] (adjusted for HEADER_OFFSET)\n */\nexport declare function componentRefresh<T>(adjustedElementIndex: number, parentFirstTemplatePass: boolean, rf: RenderFlags | null): void;\n/** Returns a boolean for whether the view is attached */\nexport declare function viewAttached(view: LViewData): boolean;\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param selectors A collection of parsed CSS selectors\n * @param rawSelectors A collection of CSS selectors in the raw, un-parsed form\n */\nexport declare function projectionDef(selectors?: CssSelectorList[], textSelectors?: string[]): void;\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param nodeIndex\n * @param selectorIndex:\n *        - 0 when the selector is `*` (or unspecified as this is the default value),\n *        - 1 based index of the selector from the {@link projectionDef}\n */\nexport declare function projection(nodeIndex: number, selectorIndex?: number, attrs?: string[]): void;\n/**\n * Adds LViewData or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @param currentView The view where LViewData or LContainer should be added\n * @param adjustedHostIndex Index of the view's host node in LViewData[], adjusted for header\n * @param state The LViewData or LContainer to add to the view tree\n * @returns The state passed in\n */\nexport declare function addToViewTree<T extends LViewData | LContainer>(currentView: LViewData, adjustedHostIndex: number, state: T): T;\n/** Marks current view and all ancestors dirty */\nexport declare function markViewDirty(view: LViewData): void;\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n */\nexport declare function scheduleTick<T>(rootContext: RootContext, flags: RootContextFlags): void;\n/**\n * Used to perform change detection on the whole application.\n *\n * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`\n * executes lifecycle hooks and conditionally checks components based on their\n * `ChangeDetectionStrategy` and dirtiness.\n *\n * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally\n * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a\n * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can\n * be changed when calling `renderComponent` and providing the `scheduler` option.\n */\nexport declare function tick<T>(component: T): void;\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component. There should\n * be very little reason to call this function directly since a preferred way to do change\n * detection is to {@link markDirty} the component and wait for the scheduler to call this method\n * at some future point in time. This is because a single user action often results in many\n * components being invalidated and calling change detection on each component synchronously\n * would be inefficient. It is better to wait until all components are marked as dirty and\n * then perform single change detection across all of the components\n *\n * @param component The component which the change detection should be performed on.\n */\nexport declare function detectChanges<T>(component: T): void;\n/**\n * Synchronously perform change detection on a root view and its components.\n *\n * @param lViewData The view which the change detection should be performed on.\n */\nexport declare function detectChangesInRootView(lViewData: LViewData): void;\n/**\n * Checks the change detector and its children, and throws if any changes are detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n */\nexport declare function checkNoChanges<T>(component: T): void;\n/**\n * Checks the change detector on a root view and its components, and throws if any changes are\n * detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n *\n * @param lViewData The view which the change detection should be checked on.\n */\nexport declare function checkNoChangesInRootView(lViewData: LViewData): void;\n/**\n * Mark the component as dirty (needing change detection).\n *\n * Marking a component dirty will schedule a change detection on this\n * component at some point in the future. Marking an already dirty\n * component as dirty is a noop. Only one outstanding change detection\n * can be scheduled per component tree. (Two components bootstrapped with\n * separate `renderComponent` will have separate schedulers)\n *\n * When the root component is bootstrapped with `renderComponent`, a scheduler\n * can be provided.\n *\n * @param component Component to mark as dirty.\n *\n * @publicApi\n */\nexport declare function markDirty<T>(component: T): void;\n/**\n * Creates a single value binding.\n *\n * @param value Value to diff\n */\nexport declare function bind<T>(value: T): T | NO_CHANGE;\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport declare function interpolationV(values: any[]): string | NO_CHANGE;\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param prefix static value used for concatenation only.\n * @param v0 value checked for change.\n * @param suffix static value used for concatenation only.\n */\nexport declare function interpolation1(prefix: string, v0: any, suffix: string): string | NO_CHANGE;\n/** Creates an interpolation binding with 2 expressions. */\nexport declare function interpolation2(prefix: string, v0: any, i0: string, v1: any, suffix: string): string | NO_CHANGE;\n/** Creates an interpolation binding with 3 expressions. */\nexport declare function interpolation3(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, suffix: string): string | NO_CHANGE;\n/** Create an interpolation binding with 4 expressions. */\nexport declare function interpolation4(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, suffix: string): string | NO_CHANGE;\n/** Creates an interpolation binding with 5 expressions. */\nexport declare function interpolation5(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, suffix: string): string | NO_CHANGE;\n/** Creates an interpolation binding with 6 expressions. */\nexport declare function interpolation6(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string): string | NO_CHANGE;\n/** Creates an interpolation binding with 7 expressions. */\nexport declare function interpolation7(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string): string | NO_CHANGE;\n/** Creates an interpolation binding with 8 expressions. */\nexport declare function interpolation8(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any, suffix: string): string | NO_CHANGE;\n/** Store a value in the `data` at a given `index`. */\nexport declare function store<T>(index: number, value: T): void;\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @param index The index of the local ref in contextViewData.\n */\nexport declare function reference<T>(index: number): T;\nexport declare function loadQueryList<T>(queryListIdx: number): QueryList<T>;\n/** Retrieves a value from current `viewData`. */\nexport declare function load<T>(index: number): T;\n/** Gets the current binding value. */\nexport declare function getBinding(bindingIndex: number): any;\n/** Updates binding if changed, then returns whether it was updated. */\nexport declare function bindingUpdated(bindingIndex: number, value: any): boolean;\n/** Updates binding and returns the value. */\nexport declare function updateBinding(bindingIndex: number, value: any): any;\n/** Updates 2 bindings if changed, then returns whether either was updated. */\nexport declare function bindingUpdated2(bindingIndex: number, exp1: any, exp2: any): boolean;\n/** Updates 3 bindings if changed, then returns whether any was updated. */\nexport declare function bindingUpdated3(bindingIndex: number, exp1: any, exp2: any, exp3: any): boolean;\n/** Updates 4 bindings if changed, then returns whether any was updated. */\nexport declare function bindingUpdated4(bindingIndex: number, exp1: any, exp2: any, exp3: any, exp4: any): boolean;\n/**\n * Returns the value associated to the given token from the injectors.\n *\n * `directiveInject` is intended to be used for directive, component and pipe factories.\n *  All other injection use `inject` which does not walk the node injector tree.\n *\n * Usage example (in factory function):\n *\n * class SomeDirective {\n *   constructor(directive: DirectiveA) {}\n *\n *   static ngDirectiveDef = defineDirective({\n *     type: SomeDirective,\n *     factory: () => new SomeDirective(directiveInject(DirectiveA))\n *   });\n * }\n *\n * @param token the type or token to inject\n * @param flags Injection flags\n * @returns the value from the injector or `null` when not found\n */\nexport declare function directiveInject<T>(token: Type<T> | InjectionToken<T>): T;\nexport declare function directiveInject<T>(token: Type<T> | InjectionToken<T>, flags: InjectFlags): T;\n/**\n * Facade for the attribute injection from DI.\n */\nexport declare function injectAttribute(attrNameToInject: string): string | undefined;\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n */\nexport declare function registerContentQuery<Q>(queryList: QueryList<Q>, currentDirectiveIndex: number): void;\nexport declare const CLEAN_PROMISE: Promise<null>;\nexport declare function delegateToClassInput(tNode: TNode): number;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/container.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LQueries } from './query';\nimport { RComment, RElement } from './renderer';\nimport { StylingContext } from './styling';\nimport { HOST, LViewData, NEXT, PARENT, QUERIES } from './view';\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n */\nexport declare const ACTIVE_INDEX = 0;\nexport declare const VIEWS = 1;\nexport declare const NATIVE = 6;\nexport declare const RENDER_PARENT = 7;\n/**\n * The state associated with a container.\n *\n * This is an array so that its structure is closer to LViewData. This helps\n * when traversing the view tree (which is a mix of containers and component\n * views), so we can jump to viewOrContainer[NEXT] in the same way regardless\n * of type.\n */\nexport interface LContainer extends Array<any> {\n    /**\n     * The next active index in the views array to read or write to. This helps us\n     * keep track of where we are in the views array.\n     * In the case the LContainer is created for a ViewContainerRef,\n     * it is set to null to identify this scenario, as indices are \"absolute\" in that case,\n     * i.e. provided directly by the user of the ViewContainerRef API.\n     */\n    [ACTIVE_INDEX]: number;\n    /**\n     * A list of the container's currently active child views. Views will be inserted\n     * here as they are added and spliced from here when they are removed. We need\n     * to keep a record of current views so we know which views are already in the DOM\n     * (and don't need to be re-added) and so we can remove views from the DOM when they\n     * are no longer required.\n     */\n    [VIEWS]: LViewData[];\n    /**\n     * Access to the parent view is necessary so we can propagate back\n     * up from inside a container to parent[NEXT].\n     */\n    [PARENT]: LViewData | null;\n    /**\n     * This allows us to jump from a container to a sibling container or component\n     * view with the same parent, so we can remove listeners efficiently.\n     */\n    [NEXT]: LViewData | LContainer | null;\n    /**\n     * Queries active for this container - all the views inserted to / removed from\n     * this container are reported to queries referenced here.\n     */\n    [QUERIES]: LQueries | null;\n    /**\n     * The host element of this LContainer.\n     *\n     * The host could be an LViewData if this container is on a component node.\n     * In that case, the component LViewData is its HOST.\n     *\n     * It could also be a styling context if this is a node with a style/class\n     * binding.\n     */\n    [HOST]: RElement | RComment | StylingContext | LViewData;\n    /** The comment element that serves as an anchor for this LContainer. */\n    [NATIVE]: RComment;\n    /**\n     * Parent Element which will contain the location where all of the views will be\n     * inserted into to.\n     *\n     * If `renderParent` is `null` it is headless. This means that it is contained\n     * in another view which in turn is contained in another container and\n     * therefore it does not yet have its own parent.\n     *\n     * If `renderParent` is not `null` then it may be:\n     * - same as `tContainerNode.parent` in which case it is just a normal container.\n     * - different from `tContainerNode.parent` in which case it has been re-projected.\n     *   In other words `tContainerNode.parent` is logical parent where as\n     *   `tContainerNode.projectedParent` is render parent.\n     *\n     * When views are inserted into `LContainer` then `renderParent` is:\n     * - `null`, we are in a view, keep going up a hierarchy until actual\n     *   `renderParent` is found.\n     * - not `null`, then use the `projectedParent.native` as the `RElement` to insert\n     * views into.\n     */\n    [RENDER_PARENT]: RElement | null;\n}\nexport declare const unusedValueExportToPlacateAjd = 1;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/context.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { RElement } from './renderer';\nimport { LViewData } from './view';\n/**\n * This property will be monkey-patched on elements, components and directives\n */\nexport declare const MONKEY_PATCH_KEY_NAME = \"__ngContext__\";\n/**\n * The internal view context which is specific to a given DOM element, directive or\n * component instance. Each value in here (besides the LViewData and element node details)\n * can be present, null or undefined. If undefined then it implies the value has not been\n * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\n *\n * Each value will get filled when the respective value is examined within the getContext\n * function. The component, element and each directive instance will share the same instance\n * of the context.\n */\nexport interface LContext {\n    /**\n     * The component's parent view data.\n     */\n    lViewData: LViewData;\n    /**\n     * The index instance of the node.\n     */\n    nodeIndex: number;\n    /**\n     * The instance of the DOM node that is attached to the lNode.\n     */\n    native: RElement;\n    /**\n     * The instance of the Component node.\n     */\n    component: {} | null | undefined;\n    /**\n     * The list of active directives that exist on this element.\n     */\n    directives: any[] | null | undefined;\n    /**\n     * The map of local references (local reference name => element or directive instance) that exist\n     * on this element.\n     */\n    localRefs: {\n        [key: string]: any;\n    } | null | undefined;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/definition.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewEncapsulation } from '../../core';\nimport { Type } from '../../type';\nimport { CssSelectorList } from './projection';\n/**\n * Definition of what a template rendering function should look like for a component.\n */\nexport declare type ComponentTemplate<T> = {\n    (rf: RenderFlags, ctx: T): void;\n    ngPrivateData?: never;\n};\n/**\n * Definition of what a query function should look like.\n */\nexport declare type ComponentQuery<T> = ComponentTemplate<T>;\n/**\n * Flags passed into template functions to determine which blocks (i.e. creation, update)\n * should be executed.\n *\n * Typically, a template runs both the creation block and the update block on initialization and\n * subsequent runs only execute the update block. However, dynamically created views require that\n * the creation block be executed separately from the update block (for backwards compat).\n */\nexport declare const enum RenderFlags {\n    Create = 1,\n    Update = 2\n}\n/**\n * A subclass of `Type` which has a static `ngComponentDef`:`ComponentDef` field making it\n * consumable for rendering.\n */\nexport interface ComponentType<T> extends Type<T> {\n    ngComponentDef: never;\n}\n/**\n * A subclass of `Type` which has a static `ngDirectiveDef`:`DirectiveDef` field making it\n * consumable for rendering.\n */\nexport interface DirectiveType<T> extends Type<T> {\n    ngDirectiveDef: never;\n}\nexport declare const enum DirectiveDefFlags {\n    ContentQuery = 2\n}\n/**\n * A subclass of `Type` which has a static `ngPipeDef`:`PipeDef` field making it\n * consumable for rendering.\n */\nexport interface PipeType<T> extends Type<T> {\n    ngPipeDef: never;\n}\nexport declare type DirectiveDefWithMeta<T, Selector extends string, ExportAs extends string, InputMap extends {\n    [key: string]: string;\n}, OutputMap extends {\n    [key: string]: string;\n}, QueryFields extends string[]> = DirectiveDef<T>;\n/**\n * Runtime information for classes that are inherited by components or directives\n * that aren't defined as components or directives.\n *\n * This is an internal data structure used by the render to determine what inputs\n * and outputs should be inherited.\n *\n * See: {@link defineBase}\n */\nexport interface BaseDef<T> {\n    /**\n     * A dictionary mapping the inputs' minified property names to their public API names, which\n     * are their aliases if any, or their original unminified property names\n     * (as in `@Input('alias') propertyName: any;`).\n     */\n    readonly inputs: {\n        [P in keyof T]: string;\n    };\n    /**\n     * @deprecated This is only here because `NgOnChanges` incorrectly uses declared name instead of\n     * public or minified name.\n     */\n    readonly declaredInputs: {\n        [P in keyof T]: P;\n    };\n    /**\n     * A dictionary mapping the outputs' minified property names to their public API names, which\n     * are their aliases if any, or their original unminified property names\n     * (as in `@Output('alias') propertyName: any;`).\n     */\n    readonly outputs: {\n        [P in keyof T]: P;\n    };\n}\n/**\n * Runtime link information for Directives.\n *\n * This is internal data structure used by the render to link\n * directives into templates.\n *\n * NOTE: Always use `defineDirective` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n *\n * @param Selector type metadata specifying the selector of the directive or component\n *\n * See: {@link defineDirective}\n */\nexport interface DirectiveDef<T> extends BaseDef<T> {\n    /** Token representing the directive. Used by DI. */\n    type: Type<T>;\n    /** Function that resolves providers and publishes them into the DI system. */\n    providersResolver: ((def: DirectiveDef<T>) => void) | null;\n    /** The selectors that will be used to match nodes to this directive. */\n    readonly selectors: CssSelectorList;\n    /**\n     * Name under which the directive is exported (for use with local references in template)\n     */\n    readonly exportAs: string | null;\n    /**\n     * Factory function used to create a new directive instance.\n     */\n    factory: (t: Type<T> | null) => T;\n    /**\n     * Function to create instances of content queries associated with a given directive.\n     */\n    contentQueries: ((directiveIndex: number) => void) | null;\n    /** Refreshes content queries associated with directives in a given view */\n    contentQueriesRefresh: ((directiveIndex: number, queryIndex: number) => void) | null;\n    /**\n     * The number of host bindings (including pure fn bindings) in this directive/component.\n     *\n     * Used to calculate the length of the LViewData array for the *parent* component\n     * of this directive/component.\n     */\n    readonly hostVars: number;\n    /** Refreshes host bindings on the associated directive. */\n    hostBindings: HostBindingsFunction | null;\n    /**\n     * Static attributes to set on host element.\n     *\n     * Even indices: attribute name\n     * Odd indices: attribute value\n     */\n    readonly attributes: string[] | null;\n    onInit: (() => void) | null;\n    doCheck: (() => void) | null;\n    afterContentInit: (() => void) | null;\n    afterContentChecked: (() => void) | null;\n    afterViewInit: (() => void) | null;\n    afterViewChecked: (() => void) | null;\n    onDestroy: (() => void) | null;\n    /**\n     * The features applied to this directive\n     */\n    readonly features: DirectiveDefFeature[] | null;\n}\nexport declare type ComponentDefWithMeta<T, Selector extends String, ExportAs extends string, InputMap extends {\n    [key: string]: string;\n}, OutputMap extends {\n    [key: string]: string;\n}, QueryFields extends string[]> = ComponentDef<T>;\n/**\n * Runtime link information for Components.\n *\n * This is internal data structure used by the render to link\n * components into templates.\n *\n * NOTE: Always use `defineComponent` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n *\n * See: {@link defineComponent}\n */\nexport interface ComponentDef<T> extends DirectiveDef<T> {\n    /**\n     * Runtime unique component ID.\n     */\n    readonly id: string;\n    /**\n     * The View template of the component.\n     */\n    readonly template: ComponentTemplate<T>;\n    /**\n     * A set of styles that the component needs to be present for component to render correctly.\n     */\n    readonly styles: string[];\n    /**\n     * The number of nodes, local refs, and pipes in this component template.\n     *\n     * Used to calculate the length of the component's LViewData array, so we\n     * can pre-fill the array and set the binding start index.\n     */\n    readonly consts: number;\n    /**\n     * The number of bindings in this component template (including pure fn bindings).\n     *\n     * Used to calculate the length of the component's LViewData array, so we\n     * can pre-fill the array and set the host binding start index.\n     */\n    readonly vars: number;\n    /**\n     * Query-related instructions for a component.\n     */\n    viewQuery: ComponentQuery<T> | null;\n    /**\n     * The view encapsulation type, which determines how styles are applied to\n     * DOM elements. One of\n     * - `Emulated` (default): Emulate native scoping of styles.\n     * - `Native`: Use the native encapsulation mechanism of the renderer.\n     * - `ShadowDom`: Use modern [ShadowDOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n     *   create a ShadowRoot for component's host element.\n     * - `None`: Do not provide any template or style encapsulation.\n     */\n    readonly encapsulation: ViewEncapsulation;\n    /**\n     * Defines arbitrary developer-defined data to be stored on a renderer instance.\n     * This is useful for renderers that delegate to other renderers.\n     */\n    readonly data: {\n        [kind: string]: any;\n    };\n    /** Whether or not this component's ChangeDetectionStrategy is OnPush */\n    readonly onPush: boolean;\n    /**\n  \n     * Registry of directives and components that may be found in this view.\n     *\n     * The property is either an array of `DirectiveDef`s or a function which returns the array of\n     * `DirectiveDef`s. The function is necessary to be able to support forward declarations.\n     */\n    directiveDefs: DirectiveDefListOrFactory | null;\n    /**\n     * Registry of pipes that may be found in this view.\n     *\n     * The property is either an array of `PipeDefs`s or a function which returns the array of\n     * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n     */\n    pipeDefs: PipeDefListOrFactory | null;\n    /**\n     * Used to store the result of `noSideEffects` function so that it is not removed by closure\n     * compiler. The property should never be read.\n     */\n    readonly _?: never;\n}\n/**\n * Runtime link information for Pipes.\n *\n * This is internal data structure used by the renderer to link\n * pipes into templates.\n *\n * NOTE: Always use `definePipe` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n *\n * See: {@link definePipe}\n */\nexport interface PipeDef<T> {\n    /**\n     * Pipe name.\n     *\n     * Used to resolve pipe in templates.\n     */\n    readonly name: string;\n    /**\n     * Factory function used to create a new pipe instance.\n     */\n    factory: (t: Type<T> | null) => T;\n    /**\n     * Whether or not the pipe is pure.\n     *\n     * Pure pipes result only depends on the pipe input and not on internal\n     * state of the pipe.\n     */\n    readonly pure: boolean;\n    onDestroy: (() => void) | null;\n}\nexport declare type PipeDefWithMeta<T, Name extends string> = PipeDef<T>;\nexport interface DirectiveDefFeature {\n    <T>(directiveDef: DirectiveDef<T>): void;\n    ngInherit?: true;\n}\nexport interface ComponentDefFeature {\n    <T>(componentDef: ComponentDef<T>): void;\n    ngInherit?: true;\n}\n/**\n * Type used for directiveDefs on component definition.\n *\n * The function is necessary to be able to support forward declarations.\n */\nexport declare type DirectiveDefListOrFactory = (() => DirectiveDefList) | DirectiveDefList;\nexport declare type DirectiveDefList = (DirectiveDef<any> | ComponentDef<any>)[];\nexport declare type DirectiveTypesOrFactory = (() => DirectiveTypeList) | DirectiveTypeList;\nexport declare type DirectiveTypeList = (DirectiveDef<any> | ComponentDef<any> | Type<any>)[];\nexport declare type HostBindingsFunction = (directiveIndex: number, elementIndex: number) => void;\n/**\n * Type used for PipeDefs on component definition.\n *\n * The function is necessary to be able to support forward declarations.\n */\nexport declare type PipeDefListOrFactory = (() => PipeDefList) | PipeDefList;\nexport declare type PipeDefList = PipeDef<any>[];\nexport declare type PipeTypesOrFactory = (() => DirectiveTypeList) | DirectiveTypeList;\nexport declare type PipeTypeList = (PipeDef<any> | Type<any>)[];\nexport declare const unusedValueExportToPlacateAjd = 1;\nexport declare const enum InitialStylingFlags {\n    VALUES_MODE = 1\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/i18n.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `I18nMutateOpCode` defines OpCodes for `I18nMutateOpCodes` array.\n *\n * OpCodes contain three parts:\n *  1) Parent node index offset.\n *  2) Reference node index offset.\n *  3) The OpCode to execute.\n *\n * See: `I18nCreateOpCodes` for example of usage.\n */\nimport { SanitizerFn } from './sanitization';\nexport declare const enum I18nMutateOpCode {\n    SHIFT_REF = 3,\n    SHIFT_PARENT = 17,\n    MASK_OPCODE = 7,\n    MASK_REF = 136,\n    Select = 0,\n    AppendChild = 1,\n    InsertBefore = 2,\n    Remove = 3,\n    Attr = 4,\n    ElementEnd = 5,\n    RemoveNestedIcu = 6\n}\n/**\n * Marks that the next string is for element.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nexport declare const ELEMENT_MARKER: ELEMENT_MARKER;\nexport interface ELEMENT_MARKER {\n    marker: 'element';\n}\n/**\n * Marks that the next string is for comment.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nexport declare const COMMENT_MARKER: COMMENT_MARKER;\nexport interface COMMENT_MARKER {\n    marker: 'comment';\n}\n/**\n * Array storing OpCode for dynamically creating `i18n` blocks.\n *\n * Example:\n * ```\n * <I18nCreateOpCode>[\n *   // For adding text nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   const node = lViewData[index++] = document.createTextNode('abc');\n *   //   lViewData[1].insertBefore(node, lViewData[2]);\n *   'abc', 1 << SHIFT_PARENT | 2 << SHIFT_REF | InsertBefore,\n *\n *   // Equivalent to:\n *   //   const node = lViewData[index++] = document.createTextNode('xyz');\n *   //   lViewData[1].appendChild(node);\n *   'xyz', 1 << SHIFT_PARENT | AppendChild,\n *\n *   // For adding element nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   const node = lViewData[index++] = document.createElement('div');\n *   //   lViewData[1].insertBefore(node, lViewData[2]);\n *   ELEMENT_MARKER, 'div', 1 << SHIFT_PARENT | 2 << SHIFT_REF | InsertBefore,\n *\n *   // Equivalent to:\n *   //   const node = lViewData[index++] = document.createElement('div');\n *   //   lViewData[1].appendChild(node);\n *   ELEMENT_MARKER, 'div', 1 << SHIFT_PARENT | AppendChild,\n *\n *   // For adding comment nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   const node = lViewData[index++] = document.createComment('');\n *   //   lViewData[1].insertBefore(node, lViewData[2]);\n *   COMMENT_MARKER, '', 1 << SHIFT_PARENT | 2 << SHIFT_REF | InsertBefore,\n *\n *   // Equivalent to:\n *   //   const node = lViewData[index++] = document.createComment('');\n *   //   lViewData[1].appendChild(node);\n *   COMMENT_MARKER, '', 1 << SHIFT_PARENT | AppendChild,\n *\n *   // For moving existing nodes to a different location\n *   // --------------------------------------------------\n *   // Equivalent to:\n *   //   const node = lViewData[1];\n *   //   lViewData[2].insertBefore(node, lViewData[3]);\n *   1 << SHIFT_REF | Select, 2 << SHIFT_PARENT | 3 << SHIFT_REF | InsertBefore,\n *\n *   // Equivalent to:\n *   //   const node = lViewData[1];\n *   //   lViewData[2].appendChild(node);\n *   1 << SHIFT_REF | Select, 2 << SHIFT_PARENT | AppendChild,\n *\n *   // For removing existing nodes\n *   // --------------------------------------------------\n *   //   const node = lViewData[1];\n *   //   removeChild(tView.data(1), node, lViewData);\n *   1 << SHIFT_REF | Remove,\n *\n *   // For writing attributes\n *   // --------------------------------------------------\n *   //   const node = lViewData[1];\n *   //   node.setAttribute('attr', 'value');\n *   1 << SHIFT_REF | Select, 'attr', 'value'\n *            // NOTE: Select followed by two string (vs select followed by OpCode)\n * ];\n * ```\n * NOTE:\n *   - `index` is initial location where the extra nodes should be stored in the EXPANDO section of\n * `LVIewData`.\n *\n * See: `applyI18nCreateOpCodes`;\n */\nexport interface I18nMutateOpCodes extends Array<number | string | ELEMENT_MARKER | COMMENT_MARKER | null> {\n}\nexport declare const enum I18nUpdateOpCode {\n    SHIFT_REF = 2,\n    SHIFT_ICU = 17,\n    MASK_OPCODE = 3,\n    MASK_REF = 68,\n    Text = 0,\n    Attr = 1,\n    IcuSwitch = 2,\n    IcuUpdate = 3\n}\n/**\n * Stores DOM operations which need to be applied to update DOM render tree due to changes in\n * expressions.\n *\n * The basic idea is that `i18nExp` OpCodes capture expression changes and update a change\n * mask bit. (Bit 1 for expression 1, bit 2 for expression 2 etc..., bit 32 for expression 32 and\n * higher.) The OpCodes then compare its own change mask against the expression change mask to\n * determine if the OpCodes should execute.\n *\n * These OpCodes can be used by both the i18n block as well as ICU sub-block.\n *\n * ## Example\n *\n * Assume\n * ```\n *   if (rf & RenderFlags.Update) {\n *    i18nExp(bind(ctx.exp1)); // If changed set mask bit 1\n *    i18nExp(bind(ctx.exp2)); // If changed set mask bit 2\n *    i18nExp(bind(ctx.exp3)); // If changed set mask bit 3\n *    i18nExp(bind(ctx.exp4)); // If changed set mask bit 4\n *    i18nApply(0);            // Apply all changes by executing the OpCodes.\n *  }\n * ```\n * We can assume that each call to `i18nExp` sets an internal `changeMask` bit depending on the\n * index of `i18nExp`.\n *\n * OpCodes\n * ```\n * <I18nUpdateOpCodes>[\n *   // The following OpCodes represent: `<div i18n-title=\"pre{{exp1}}in{{exp2}}post\">`\n *   // If `changeMask & 0b11`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip `7` values and start processing next OpCodes.\n *   0b11, 7,\n *   // Concatenate `newValue = 'pre'+lViewData[bindIndex-4]+'in'+lViewData[bindIndex-3]+'post';`.\n *   'pre', -4, 'in', -3, 'post',\n *   // Update attribute: `elementAttribute(1, 'title', sanitizerFn(newValue));`\n *   1 << SHIFT_REF | Attr, 'title', sanitizerFn,\n *\n *   // The following OpCodes represent: `<div i18n>Hello {{exp3}}!\">`\n *   // If `changeMask & 0b100`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip `4` values and start processing next OpCodes.\n *   0b100, 4,\n *   // Concatenate `newValue = 'Hello ' + lViewData[bindIndex -2] + '!';`.\n *   'Hello ', -2, '!',\n *   // Update text: `lViewData[1].textContent = newValue;`\n *   1 << SHIFT_REF | Text,\n *\n *   // The following OpCodes represent: `<div i18n>{exp4, plural, ... }\">`\n *   // If `changeMask & 0b1000`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip `4` values and start processing next OpCodes.\n *   0b1000, 4,\n *   // Concatenate `newValue = lViewData[bindIndex -1];`.\n *   -1,\n *   // Switch ICU: `icuSwitchCase(lViewData[1], 0, newValue);`\n *   0 << SHIFT_ICU | 1 << SHIFT_REF | IcuSwitch,\n *\n *   // Note `changeMask & -1` is always true, so the IcuUpdate will always execute.\n *   -1, 1,\n *   // Update ICU: `icuUpdateCase(lViewData[1], 0);`\n *   0 << SHIFT_ICU | 1 << SHIFT_REF | IcuUpdate,\n *\n * ];\n * ```\n *\n */\nexport interface I18nUpdateOpCodes extends Array<string | number | SanitizerFn | null> {\n}\n/**\n * Store information for the i18n translation block.\n */\nexport interface TI18n {\n    /**\n     * Number of slots to allocate in expando.\n     *\n     * This is the max number of DOM elements which will be created by this i18n + ICU blocks. When\n     * the DOM elements are being created they are stored in the EXPANDO, so that update OpCodes can\n     * write into them.\n     */\n    vars: number;\n    /**\n     * Index in EXPANDO where the i18n stores its DOM nodes.\n     *\n     * When the bindings are processed by the `i18nEnd` instruction it is necessary to know where the\n     * newly created DOM nodes will be inserted.\n     */\n    expandoStartIndex: number;\n    /**\n     * A set of OpCodes which will create the Text Nodes and ICU anchors for the translation blocks.\n     *\n     * NOTE: The ICU anchors are filled in with ICU Update OpCode.\n     */\n    create: I18nMutateOpCodes;\n    /**\n     * A set of OpCodes which will be executed on each change detection to determine if any changes to\n     * DOM are required.\n     */\n    update: I18nUpdateOpCodes;\n    /**\n     * A list of ICUs in a translation block (or `null` if block has no ICUs).\n     *\n     * Example:\n     * Given: `<div i18n>You have {count, plural, ...} and {state, switch, ...}</div>`\n     * There would be 2 ICUs in this array.\n     *   1. `{count, plural, ...}`\n     *   2. `{state, switch, ...}`\n     */\n    icus: TIcu[] | null;\n}\n/**\n * Defines the ICU type of `select` or `plural`\n */\nexport declare const enum IcuType {\n    select = 0,\n    plural = 1\n}\nexport interface TIcu {\n    /**\n     * Defines the ICU type of `select` or `plural`\n     */\n    type: IcuType;\n    /**\n     * Number of slots to allocate in expando for each case.\n     *\n     * This is the max number of DOM elements which will be created by this i18n + ICU blocks. When\n     * the DOM elements are being created they are stored in the EXPANDO, so that update OpCodes can\n     * write into them.\n     */\n    vars: number[];\n    /**\n     * An optional array of child/sub ICUs.\n     *\n     * In case of nested ICUs such as:\n     * ```\n     * {�0�, plural,\n     *   =0 {zero}\n     *   other {�0� {�1�, select,\n     *                     cat {cats}\n     *                     dog {dogs}\n     *                     other {animals}\n     *                   }!\n     *   }\n     * }\n     * ```\n     * When the parent ICU is changing it must clean up child ICUs as well. For this reason it needs\n     * to know which child ICUs to run clean up for as well.\n     *\n     * In the above example this would be:\n     * ```\n     * [\n     *   [],   // `=0` has no sub ICUs\n     *   [1],  // `other` has one subICU at `1`st index.\n     * ]\n     * ```\n     *\n     * The reason why it is Array of Arrays is because first array represents the case, and second\n     * represents the child ICUs to clean up. There may be more than one child ICUs per case.\n     */\n    childIcus: number[][];\n    /**\n     * Index in EXPANDO where the i18n stores its DOM nodes.\n     *\n     * When the bindings are processed by the `i18nEnd` instruction it is necessary to know where the\n     * newly created DOM nodes will be inserted.\n     */\n    expandoStartIndex: number;\n    /**\n     * A list of case values which the current ICU will try to match.\n     *\n     * The last value is `other`\n     */\n    cases: any[];\n    /**\n     * A set of OpCodes to apply in order to build up the DOM render tree for the ICU\n     */\n    create: I18nMutateOpCodes[];\n    /**\n     * A set of OpCodes to apply in order to destroy the DOM render tree for the ICU.\n     */\n    remove: I18nMutateOpCodes[];\n    /**\n     * A set of OpCodes to apply in order to update the DOM render tree for the ICU bindings.\n     */\n    update: I18nUpdateOpCodes[];\n}\nexport declare const unusedValueExportToPlacateAjd = 1;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/injector.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../../di/injection_token';\nimport { InjectFlags } from '../../di/injector_compatibility';\nimport { Type } from '../../type';\nimport { TElementNode } from './node';\nimport { LViewData, TData } from './view';\nexport declare const TNODE = 8;\nexport declare const PARENT_INJECTOR = 8;\nexport declare const INJECTOR_SIZE = 9;\n/**\n * Represents a relative location of parent injector.\n *\n * The interfaces encodes number of parents `LViewData`s to traverse and index in the `LViewData`\n * pointing to the parent injector.\n */\nexport interface RelativeInjectorLocation {\n    __brand__: 'RelativeInjectorLocationFlags';\n}\nexport declare const enum RelativeInjectorLocationFlags {\n    InjectorIndexMask = 32767,\n    AcrossHostBoundary = 32768,\n    ViewOffsetShift = 16,\n    NO_PARENT = -1\n}\nexport declare const NO_PARENT_INJECTOR: RelativeInjectorLocation;\n/**\n * Each injector is saved in 9 contiguous slots in `LViewData` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LViewData`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LViewData` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n/**\n* Factory for creating instances of injectors in the NodeInjector.\n*\n* This factory is complicated by the fact that it can resolve `multi` factories as well.\n*\n* NOTE: Some of the fields are optional which means that this class has two hidden classes.\n* - One without `multi` support (most common)\n* - One with `multi` values, (rare).\n*\n* Since VMs can cache up to 4 inline hidden classes this is OK.\n*\n* - Single factory: Only `resolving` and `factory` is defined.\n* - `providers` factory: `componentProviders` is a number and `index = -1`.\n* - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n*/\nexport declare class NodeInjectorFactory {\n    /**\n     * Factory to invoke in order to create a new instance.\n     */\n    factory: (this: NodeInjectorFactory, _: null, \n    /**\n     * array where injectables tokens are stored. This is used in\n     * case of an error reporting to produce friendlier errors.\n     */\n    tData: TData, \n    /**\n     * array where existing instances of injectables are stored. This is used in case\n     * of multi shadow is needed. See `multi` field documentation.\n     */\n    lData: LViewData, \n    /**\n     * The TNode of the same element injector.\n     */\n    tNode: TElementNode) => any;\n    /**\n     * The inject implementation to be activated when using the factory.\n     */\n    injectImpl: null | (<T>(token: Type<T> | InjectionToken<T>, flags: InjectFlags) => T);\n    /**\n     * Marker set to true during factory invocation to see if we get into recursive loop.\n     * Recursive loop causes an error to be displayed.\n     */\n    resolving: boolean;\n    /**\n     * Marks that the token can see other Tokens declared in `viewProviders` on the same node.\n     */\n    canSeeViewProviders: boolean;\n    /**\n     * An array of factories to use in case of `multi` provider.\n     */\n    multi?: Array<() => any>;\n    /**\n     * Number of `multi`-providers which belong to the component.\n     *\n     * This is needed because when multiple components and directives declare the `multi` provider\n     * they have to be concatenated in the correct order.\n     *\n     * Example:\n     *\n     * If we have a component and directive active an a single element as declared here\n     * ```\n     * component:\n     *   provides: [ {provide: String, useValue: 'component', multi: true} ],\n     *   viewProvides: [ {provide: String, useValue: 'componentView', multi: true} ],\n     *\n     * directive:\n     *   provides: [ {provide: String, useValue: 'directive', multi: true} ],\n     * ```\n     *\n     * Then the expected results are:\n     *\n     * ```\n     * providers: ['component', 'directive']\n     * viewProviders: ['component', 'componentView', 'directive']\n     * ```\n     *\n     * The way to think about it is that the `viewProviders` have been inserted after the component\n     * but before the directives, which is why we need to know how many `multi`s have been declared by\n     * the component.\n     */\n    componentProviders?: number;\n    /**\n     * Current index of the Factory in the `data`. Needed for `viewProviders` and `providers` merging.\n     * See `providerFactory`.\n     */\n    index?: number;\n    /**\n     * Because the same `multi` provider can be declared in `provides` and `viewProvides` it is\n     * possible for `viewProvides` to shadow the `provides`. For this reason we store the\n     * `provideFactory` of the `providers` so that `providers` can be extended with `viewProviders`.\n     *\n     * Example:\n     *\n     * Given:\n     * ```\n     * provides: [ {provide: String, useValue: 'all', multi: true} ],\n     * viewProvides: [ {provide: String, useValue: 'viewOnly', multi: true} ],\n     * ```\n     *\n     * We have to return `['all']` in case of content injection, but `['all', 'viewOnly']` in case\n     * of view injection. We further have to make sure that the shared instances (in our case\n     * `all`) are the exact same instance in both the content as well as the view injection. (We\n     * have to make sure that we don't double instantiate.) For this reason the `viewProvides`\n     * `Factory` has a pointer to the shadowed `provides` factory so that it can instantiate the\n     * `providers` (`['all']`) and then extend it with `viewProviders` (`['all'] + ['viewOnly'] =\n     * ['all', 'viewOnly']`).\n     */\n    providerFactory?: NodeInjectorFactory | null;\n    constructor(\n    /**\n     * Factory to invoke in order to create a new instance.\n     */\n    factory: (this: NodeInjectorFactory, _: null, \n    /**\n     * array where injectables tokens are stored. This is used in\n     * case of an error reporting to produce friendlier errors.\n     */\n    tData: TData, \n    /**\n     * array where existing instances of injectables are stored. This is used in case\n     * of multi shadow is needed. See `multi` field documentation.\n     */\n    lData: LViewData, \n    /**\n     * The TNode of the same element injector.\n     */\n    tNode: TElementNode) => any, \n    /**\n     * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n     */\n    isViewProvider: boolean, injectImplementation: null | (<T>(token: Type<T> | InjectionToken<T>, flags: InjectFlags) => T));\n}\nexport declare function isFactory(obj: any): obj is NodeInjectorFactory;\nexport declare const unusedValueExportToPlacateAjd = 1;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/node.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StylingContext } from './styling';\nimport { LViewData, TView } from './view';\n/**\n * TNodeType corresponds to the TNode.type property. It contains information\n * on how to map a particular set of bits in TNode.flags to the node type.\n */\nexport declare const enum TNodeType {\n    Container = 0,\n    Projection = 1,\n    View = 2,\n    Element = 3,\n    ViewOrElement = 2,\n    ElementContainer = 4,\n    IcuContainer = 5\n}\n/**\n * Corresponds to the TNode.flags property.\n */\nexport declare const enum TNodeFlags {\n    /** The number of directives on this node is encoded on the least significant bits */\n    DirectiveCountMask = 4095,\n    /** This bit is set if the node is a component */\n    isComponent = 4096,\n    /** This bit is set if the node has been projected */\n    isProjected = 8192,\n    /** This bit is set if the node has any content queries */\n    hasContentQuery = 16384,\n    /** This bit is set if the node has any directives that contain [class properties */\n    hasClassInput = 32768,\n    /** The index of the first directive on this node is encoded on the most significant bits  */\n    DirectiveStartingIndexShift = 16\n}\n/**\n * Corresponds to the TNode.providerIndexes property.\n */\nexport declare const enum TNodeProviderIndexes {\n    /** The index of the first provider on this node is encoded on the least significant bits */\n    ProvidersStartIndexMask = 65535,\n    /** The count of view providers from the component on this node is encoded on the 16 most\n       significant bits */\n    CptViewProvidersCountShift = 16,\n    CptViewProvidersCountShifter = 65536\n}\n/**\n * A set of marker values to be used in the attributes arrays. Those markers indicate that some\n * items are not regular attributes and the processing should be adapted accordingly.\n */\nexport declare const enum AttributeMarker {\n    /**\n     * Marker indicates that the following 3 values in the attributes array are:\n     * namespaceUri, attributeName, attributeValue\n     * in that order.\n     */\n    NamespaceURI = 0,\n    /**\n     * This marker indicates that the following attribute names were extracted from bindings (ex.:\n     * [foo]=\"exp\") and / or event handlers (ex. (bar)=\"doSth()\").\n     * Taking the above bindings and outputs as an example an attributes array could look as follows:\n     * ['class', 'fade in', AttributeMarker.SelectOnly, 'foo', 'bar']\n     */\n    SelectOnly = 1\n}\n/**\n * A combination of:\n * - attribute names and values\n * - special markers acting as flags to alter attributes processing.\n */\nexport declare type TAttributes = (string | AttributeMarker)[];\n/**\n * Binding data (flyweight) for a particular node that is shared between all templates\n * of a specific type.\n *\n * If a property is:\n *    - PropertyAliases: that property's data was generated and this is it\n *    - Null: that property's data was already generated and nothing was found.\n *    - Undefined: that property's data has not yet been generated\n *\n * see: https://en.wikipedia.org/wiki/Flyweight_pattern for more on the Flyweight pattern\n */\nexport interface TNode {\n    /** The type of the TNode. See TNodeType. */\n    type: TNodeType;\n    /**\n     * Index of the TNode in TView.data and corresponding native element in LViewData.\n     *\n     * This is necessary to get from any TNode to its corresponding native element when\n     * traversing the node tree.\n     *\n     * If index is -1, this is a dynamically created container node or embedded view node.\n     */\n    index: number;\n    /**\n     * The index of the closest injector in this node's LViewData.\n     *\n     * If the index === -1, there is no injector on this node or any ancestor node in this view.\n     *\n     * If the index !== -1, it is the index of this node's injector OR the index of a parent injector\n     * in the same view. We pass the parent injector index down the node tree of a view so it's\n     * possible to find the parent injector without walking a potentially deep node tree. Injector\n     * indices are not set across view boundaries because there could be multiple component hosts.\n     *\n     * If tNode.injectorIndex === tNode.parent.injectorIndex, then the index belongs to a parent\n     * injector.\n     */\n    injectorIndex: number;\n    /**\n     * This number stores two values using its bits:\n     *\n     * - the number of directives on that node (first 12 bits)\n     * - the starting index of the node's directives in the directives array (last 20 bits).\n     *\n     * These two values are necessary so DI can effectively search the directives associated\n     * with a node without searching the whole directives array.\n     */\n    flags: TNodeFlags;\n    /**\n     * This number stores two values using its bits:\n     *\n     * - the index of the first provider on that node (first 16 bits)\n     * - the count of view providers from the component on this node (last 16 bits)\n     */\n    providerIndexes: TNodeProviderIndexes;\n    /** The tag name associated with this node. */\n    tagName: string | null;\n    /**\n     * Attributes associated with an element. We need to store attributes to support various use-cases\n     * (attribute injection, content projection with selectors, directives matching).\n     * Attributes are stored statically because reading them from the DOM would be way too slow for\n     * content projection and queries.\n     *\n     * Since attrs will always be calculated first, they will never need to be marked undefined by\n     * other instructions.\n     *\n     * For regular attributes a name of an attribute and its value alternate in the array.\n     * e.g. ['role', 'checkbox']\n     * This array can contain flags that will indicate \"special attributes\" (attributes with\n     * namespaces, attributes extracted from bindings and outputs).\n     */\n    attrs: TAttributes | null;\n    /**\n     * A set of local names under which a given element is exported in a template and\n     * visible to queries. An entry in this array can be created for different reasons:\n     * - an element itself is referenced, ex.: `<div #foo>`\n     * - a component is referenced, ex.: `<my-cmpt #foo>`\n     * - a directive is referenced, ex.: `<my-cmpt #foo=\"directiveExportAs\">`.\n     *\n     * A given element might have different local names and those names can be associated\n     * with a directive. We store local names at even indexes while odd indexes are reserved\n     * for directive index in a view (or `-1` if there is no associated directive).\n     *\n     * Some examples:\n     * - `<div #foo>` => `[\"foo\", -1]`\n     * - `<my-cmpt #foo>` => `[\"foo\", myCmptIdx]`\n     * - `<my-cmpt #foo #bar=\"directiveExportAs\">` => `[\"foo\", myCmptIdx, \"bar\", directiveIdx]`\n     * - `<div #foo #bar=\"directiveExportAs\">` => `[\"foo\", -1, \"bar\", directiveIdx]`\n     */\n    localNames: (string | number)[] | null;\n    /** Information about input properties that need to be set once from attribute data. */\n    initialInputs: InitialInputData | null | undefined;\n    /**\n     * Input data for all directives on this node.\n     *\n     * - `undefined` means that the prop has not been initialized yet,\n     * - `null` means that the prop has been initialized but no inputs have been found.\n     */\n    inputs: PropertyAliases | null | undefined;\n    /**\n     * Output data for all directives on this node.\n     *\n     * - `undefined` means that the prop has not been initialized yet,\n     * - `null` means that the prop has been initialized but no outputs have been found.\n     */\n    outputs: PropertyAliases | null | undefined;\n    /**\n     * The TView or TViews attached to this node.\n     *\n     * If this TNode corresponds to an LContainer with inline views, the container will\n     * need to store separate static data for each of its view blocks (TView[]). Otherwise,\n     * nodes in inline views with the same index as nodes in their parent views will overwrite\n     * each other, as they are in the same template.\n     *\n     * Each index in this array corresponds to the static data for a certain\n     * view. So if you had V(0) and V(1) in a container, you might have:\n     *\n     * [\n     *   [{tagName: 'div', attrs: ...}, null],     // V(0) TView\n     *   [{tagName: 'button', attrs ...}, null]    // V(1) TView\n     *\n     * If this TNode corresponds to an LContainer with a template (e.g. structural\n     * directive), the template's TView will be stored here.\n     *\n     * If this TNode corresponds to an element, tViews will be null .\n     */\n    tViews: TView | TView[] | null;\n    /**\n     * The next sibling node. Necessary so we can propagate through the root nodes of a view\n     * to insert them or remove them from the DOM.\n     */\n    next: TNode | null;\n    /**\n     * First child of the current node.\n     *\n     * For component nodes, the child will always be a ContentChild (in same view).\n     * For embedded view nodes, the child will be in their child view.\n     */\n    child: TNode | null;\n    /**\n     * Parent node (in the same view only).\n     *\n     * We need a reference to a node's parent so we can append the node to its parent's native\n     * element at the appropriate time.\n     *\n     * If the parent would be in a different view (e.g. component host), this property will be null.\n     * It's important that we don't try to cross component boundaries when retrieving the parent\n     * because the parent will change (e.g. index, attrs) depending on where the component was\n     * used (and thus shouldn't be stored on TNode). In these cases, we retrieve the parent through\n     * LView.node instead (which will be instance-specific).\n     *\n     * If this is an inline view node (V), the parent will be its container.\n     */\n    parent: TElementNode | TContainerNode | null;\n    /**\n     * If this node is part of an i18n block, it indicates whether this node is part of the DOM.\n     * If this node is not part of an i18n block, this field is null.\n     */\n    detached: boolean | null;\n    stylingTemplate: StylingContext | null;\n    /**\n     * List of projected TNodes for a given component host element OR index into the said nodes.\n     *\n     * For easier discussion assume this example:\n     * `<parent>`'s view definition:\n     * ```\n     * <child id=\"c1\">content1</child>\n     * <child id=\"c2\"><span>content2</span></child>\n     * ```\n     * `<child>`'s view definition:\n     * ```\n     * <ng-content id=\"cont1\"></ng-content>\n     * ```\n     *\n     * If `Array.isArray(projection)` then `TNode` is a host element:\n     * - `projection` stores the content nodes which are to be projected.\n     *    - The nodes represent categories defined by the selector: For example:\n     *      `<ng-content/><ng-content select=\"abc\"/>` would represent the heads for `<ng-content/>`\n     *      and `<ng-content select=\"abc\"/>` respectively.\n     *    - The nodes we store in `projection` are heads only, we used `.next` to get their\n     *      siblings.\n     *    - The nodes `.next` is sorted/rewritten as part of the projection setup.\n     *    - `projection` size is equal to the number of projections `<ng-content>`. The size of\n     *      `c1` will be `1` because `<child>` has only one `<ng-content>`.\n     * - we store `projection` with the host (`c1`, `c2`) rather than the `<ng-content>` (`cont1`)\n     *   because the same component (`<child>`) can be used in multiple locations (`c1`, `c2`) and as\n     *   a result have different set of nodes to project.\n     * - without `projection` it would be difficult to efficiently traverse nodes to be projected.\n     *\n     * If `typeof projection == 'number'` then `TNode` is a `<ng-content>` element:\n     * - `projection` is an index of the host's `projection`Nodes.\n     *   - This would return the first head node to project:\n     *     `getHost(currentTNode).projection[currentTNode.projection]`.\n     * - When projecting nodes the parent node retrieved may be a `<ng-content>` node, in which case\n     *   the process is recursive in nature (not implementation).\n     */\n    projection: (TNode | null)[] | number | null;\n}\n/** Static data for an element  */\nexport interface TElementNode extends TNode {\n    /** Index in the data[] array */\n    index: number;\n    child: TElementNode | TTextNode | TElementContainerNode | TContainerNode | TProjectionNode | null;\n    /**\n     * Element nodes will have parents unless they are the first node of a component or\n     * embedded view (which means their parent is in a different view and must be\n     * retrieved using viewData[HOST_NODE]).\n     */\n    parent: TElementNode | TElementContainerNode | null;\n    tViews: null;\n    /**\n     * If this is a component TNode with projection, this will be an array of projected\n     * TNodes (see TNode.projection for more info). If it's a regular element node or a\n     * component without projection, it will be null.\n     */\n    projection: (TNode | null)[] | null;\n}\n/** Static data for a text node */\nexport interface TTextNode extends TNode {\n    /** Index in the data[] array */\n    index: number;\n    child: null;\n    /**\n     * Text nodes will have parents unless they are the first node of a component or\n     * embedded view (which means their parent is in a different view and must be\n     * retrieved using LView.node).\n     */\n    parent: TElementNode | TElementContainerNode | null;\n    tViews: null;\n    projection: null;\n}\n/** Static data for an LContainer */\nexport interface TContainerNode extends TNode {\n    /**\n     * Index in the data[] array.\n     *\n     * If it's -1, this is a dynamically created container node that isn't stored in\n     * data[] (e.g. when you inject ViewContainerRef) .\n     */\n    index: number;\n    child: null;\n    /**\n     * Container nodes will have parents unless:\n     *\n     * - They are the first node of a component or embedded view\n     * - They are dynamically created\n     */\n    parent: TElementNode | TElementContainerNode | null;\n    tViews: TView | TView[] | null;\n    projection: null;\n}\n/** Static data for an <ng-container> */\nexport interface TElementContainerNode extends TNode {\n    /** Index in the LViewData[] array. */\n    index: number;\n    child: TElementNode | TTextNode | TContainerNode | TElementContainerNode | TProjectionNode | null;\n    parent: TElementNode | TElementContainerNode | null;\n    tViews: null;\n    projection: null;\n}\n/** Static data for an ICU expression */\nexport interface TIcuContainerNode extends TNode {\n    /** Index in the LViewData[] array. */\n    index: number;\n    child: TElementNode | TTextNode | null;\n    parent: TElementNode | TElementContainerNode | null;\n    tViews: null;\n    projection: null;\n    /**\n     * Indicates the current active case for an ICU expression.\n     * It is null when there is no active case.\n     */\n    activeCaseIndex: number | null;\n}\n/** Static data for a view  */\nexport interface TViewNode extends TNode {\n    /** If -1, it's a dynamically created view. Otherwise, it is the view block ID. */\n    index: number;\n    child: TElementNode | TTextNode | TElementContainerNode | TContainerNode | TProjectionNode | null;\n    parent: TContainerNode | null;\n    tViews: null;\n    projection: null;\n}\n/** Static data for an LProjectionNode  */\nexport interface TProjectionNode extends TNode {\n    /** Index in the data[] array */\n    child: null;\n    /**\n     * Projection nodes will have parents unless they are the first node of a component\n     * or embedded view (which means their parent is in a different view and must be\n     * retrieved using LView.node).\n     */\n    parent: TElementNode | TElementContainerNode | null;\n    tViews: null;\n    /** Index of the projection node. (See TNode.projection for more info.) */\n    projection: number;\n}\n/**\n * This mapping is necessary so we can set input properties and output listeners\n * properly at runtime when property names are minified or aliased.\n *\n * Key: unminified / public input or output name\n * Value: array containing minified / internal name and related directive index\n *\n * The value must be an array to support inputs and outputs with the same name\n * on the same node.\n */\nexport declare type PropertyAliases = {\n    [key: string]: PropertyAliasValue;\n};\n/**\n * Store the runtime input or output names for all the directives.\n *\n * - Even indices: directive index\n * - Odd indices: minified / internal name\n *\n * e.g. [0, 'change-minified']\n */\nexport declare type PropertyAliasValue = (number | string)[];\n/**\n * This array contains information about input properties that\n * need to be set once from attribute data. It's ordered by\n * directive index (relative to element) so it's simple to\n * look up a specific directive's initial input data.\n *\n * Within each sub-array:\n *\n * Even indices: minified/internal input name\n * Odd indices: initial value\n *\n * If a directive on a node does not have any input properties\n * that should be set from attributes, its index is set to null\n * to avoid a sparse array.\n *\n * e.g. [null, ['role-min', 'button']]\n */\nexport declare type InitialInputData = (InitialInputs | null)[];\n/**\n * Used by InitialInputData to store input properties\n * that should be set once from attributes.\n *\n * Even indices: minified/internal input name\n * Odd indices: initial value\n *\n * e.g. ['role-min', 'button']\n */\nexport declare type InitialInputs = string[];\nexport declare const unusedValueExportToPlacateAjd = 1;\n/**\n * Type representing a set of TNodes that can have local refs (`#foo`) placed on them.\n */\nexport declare type TNodeWithLocalRefs = TContainerNode | TElementNode | TElementContainerNode;\n/**\n * Type for a function that extracts a value for a local refs.\n * Example:\n * - `<div #nativeDivEl>` - `nativeDivEl` should point to the native `<div>` element;\n * - `<ng-template #tplRef>` - `tplRef` should point to the `TemplateRef` instance;\n */\nexport declare type LocalRefExtractor = (tNode: TNodeWithLocalRefs, currentView: LViewData) => any;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/player.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A shared interface which contains an animation player\n */\nexport interface Player {\n    parent?: Player | null;\n    state: PlayState;\n    play(): void;\n    pause(): void;\n    finish(): void;\n    destroy(): void;\n    addEventListener(state: PlayState | string, cb: (data?: any) => any): void;\n}\nexport declare const enum BindingType {\n    Unset = 0,\n    Class = 1,\n    Style = 2\n}\nexport interface BindingStore {\n    setValue(prop: string, value: any): void;\n}\n/**\n * Defines the shape which produces the Player.\n *\n * Used to produce a player that will be placed on an element that contains\n * styling bindings that make use of the player. This function is designed\n * to be used with `PlayerFactory`.\n */\nexport interface PlayerFactoryBuildFn {\n    (element: HTMLElement, type: BindingType, values: {\n        [key: string]: any;\n    }, isFirstRender: boolean, currentPlayer: Player | null): Player | null;\n}\n/**\n * Used as a reference to build a player from a styling template binding\n * (`[style]` and `[class]`).\n *\n * The `fn` function will be called once any styling-related changes are\n * evaluated on an element and is expected to return a player that will\n * be then run on the element.\n *\n * `[style]`, `[style.prop]`, `[class]` and `[class.name]` template bindings\n * all accept a `PlayerFactory` as input and this player factories.\n */\nexport interface PlayerFactory {\n    '__brand__': 'Brand for PlayerFactory that nothing will match';\n}\nexport interface PlayerBuilder extends BindingStore {\n    buildPlayer(currentPlayer: Player | null, isFirstRender: boolean): Player | undefined | null;\n}\n/**\n * The state of a given player\n *\n * Do not change the increasing nature of the numbers since the player\n * code may compare state by checking if a number is higher or lower than\n * a certain numeric value.\n */\nexport declare const enum PlayState {\n    Pending = 0,\n    Running = 1,\n    Paused = 2,\n    Finished = 100,\n    Destroyed = 200\n}\n/**\n * The context that stores all the active players and queued player factories present on an element.\n */\nexport interface PlayerContext extends Array<null | number | Player | PlayerBuilder> {\n    [PlayerIndex.NonBuilderPlayersStart]: number;\n    [PlayerIndex.ClassMapPlayerBuilderPosition]: PlayerBuilder | null;\n    [PlayerIndex.ClassMapPlayerPosition]: Player | null;\n    [PlayerIndex.StyleMapPlayerBuilderPosition]: PlayerBuilder | null;\n    [PlayerIndex.StyleMapPlayerPosition]: Player | null;\n}\n/**\n * Designed to be used as an injection service to capture all animation players.\n *\n * When present all animation players will be passed into the flush method below.\n * This feature is designed to service application-wide animation testing, live\n * debugging as well as custom animation choreographing tools.\n */\nexport interface PlayerHandler {\n    /**\n     * Designed to kick off the player at the end of change detection\n     */\n    flushPlayers(): void;\n    /**\n     * @param player The player that has been scheduled to run within the application.\n     * @param context The context as to where the player was bound to\n     */\n    queuePlayer(player: Player, context: ComponentInstance | DirectiveInstance | HTMLElement): void;\n}\nexport declare const enum PlayerIndex {\n    NonBuilderPlayersStart = 0,\n    ClassMapPlayerBuilderPosition = 1,\n    ClassMapPlayerPosition = 2,\n    StyleMapPlayerBuilderPosition = 3,\n    StyleMapPlayerPosition = 4,\n    PlayerBuildersStartPosition = 1,\n    SinglePlayerBuildersStartPosition = 5,\n    PlayerAndPlayerBuildersTupleSize = 2,\n    PlayerOffsetPosition = 1\n}\nexport declare type ComponentInstance = {};\nexport declare type DirectiveInstance = {};\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/projection.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Expresses a single CSS Selector.\n *\n * Beginning of array\n * - First index: element name\n * - Subsequent odd indices: attr keys\n * - Subsequent even indices: attr values\n *\n * After SelectorFlags.CLASS flag\n * - Class name values\n *\n * SelectorFlags.NOT flag\n * - Changes the mode to NOT\n * - Can be combined with other flags to set the element / attr / class mode\n *\n * e.g. SelectorFlags.NOT | SelectorFlags.ELEMENT\n *\n * Example:\n * Original: `div.foo.bar[attr1=val1][attr2]`\n * Parsed: ['div', 'attr1', 'val1', 'attr2', '', SelectorFlags.CLASS, 'foo', 'bar']\n *\n * Original: 'div[attr1]:not(.foo[attr2])\n * Parsed: [\n *  'div', 'attr1', '',\n *  SelectorFlags.NOT | SelectorFlags.ATTRIBUTE 'attr2', '', SelectorFlags.CLASS, 'foo'\n * ]\n *\n * See more examples in node_selector_matcher_spec.ts\n */\nexport declare type CssSelector = (string | SelectorFlags)[];\n/**\n * A list of CssSelectors.\n *\n * A directive or component can have multiple selectors. This type is used for\n * directive defs so any of the selectors in the list will match that directive.\n *\n * Original: 'form, [ngForm]'\n * Parsed: [['form'], ['', 'ngForm', '']]\n */\nexport declare type CssSelectorList = CssSelector[];\n/** Flags used to build up CssSelectors */\nexport declare const enum SelectorFlags {\n    /** Indicates this is the beginning of a new negative selector */\n    NOT = 1,\n    /** Mode for matching attributes */\n    ATTRIBUTE = 2,\n    /** Mode for matching tag names */\n    ELEMENT = 4,\n    /** Mode for matching class names */\n    CLASS = 8\n}\nexport declare const NG_PROJECT_AS_ATTR_NAME = \"ngProjectAs\";\nexport declare const unusedValueExportToPlacateAjd = 1;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/query.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { QueryList } from '../../linker';\nimport { Type } from '../../type';\nimport { TContainerNode, TElementContainerNode, TElementNode } from './node';\n/** Used for tracking queries (e.g. ViewChild, ContentChild). */\nexport interface LQueries {\n    /**\n     * The parent LQueries instance.\n     *\n     * When there is a content query, a new LQueries instance is created to avoid mutating any\n     * existing LQueries. After we are done searching content children, the parent property allows\n     * us to traverse back up to the original LQueries instance to continue to search for matches\n     * in the main view.\n     */\n    parent: LQueries | null;\n    /**\n     * Ask queries to prepare copy of itself. This assures that tracking new queries on content nodes\n     * doesn't mutate list of queries tracked on a parent node. We will clone LQueries before\n     * constructing content queries.\n     */\n    clone(): LQueries;\n    /**\n     * Notify `LQueries` that a new `TNode` has been created and needs to be added to query results\n     * if matching query predicate.\n     */\n    addNode(tNode: TElementNode | TContainerNode | TElementContainerNode): LQueries | null;\n    /**\n     * Notify `LQueries` that a new LContainer was added to ivy data structures. As a result we need\n     * to prepare room for views that might be inserted into this container.\n     */\n    container(): LQueries | null;\n    /**\n     * Notify `LQueries` that a new `LView` has been created. As a result we need to prepare room\n     * and collect nodes that match query predicate.\n     */\n    createView(): LQueries | null;\n    /**\n     * Notify `LQueries` that a new `LView` has been added to `LContainer`. As a result all\n     * the matching nodes from this view should be added to container's queries.\n     */\n    insertView(newViewIndex: number): void;\n    /**\n     * Notify `LQueries` that an `LView` has been removed from `LContainer`. As a result all\n     * the matching nodes from this view should be removed from container's queries.\n     */\n    removeView(): void;\n    /**\n     * Add additional `QueryList` to track.\n     *\n     * @param queryList `QueryList` to update with changes.\n     * @param predicate Either `Type` or selector array of [key, value] predicates.\n     * @param descend If true the query will recursively apply to the children.\n     * @param read Indicates which token should be read from DI for this query.\n     */\n    track<T>(queryList: QueryList<T>, predicate: Type<any> | string[], descend?: boolean, read?: Type<T>): void;\n}\nexport declare const unusedValueExportToPlacateAjd = 1;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/renderer.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The goal here is to make sure that the browser DOM API is the Renderer.\n * We do this by defining a subset of DOM API to be the renderer and than\n * use that time for rendering.\n *\n * At runtime we can than use the DOM api directly, in server or web-worker\n * it will be easy to implement such API.\n */\nimport { RendererStyleFlags2, RendererType2 } from '../../render/api';\nexport declare enum RendererStyleFlags3 {\n    Important = 1,\n    DashCase = 2\n}\nexport declare type Renderer3 = ObjectOrientedRenderer3 | ProceduralRenderer3;\n/**\n * Object Oriented style of API needed to create elements and text nodes.\n *\n * This is the native browser API style, e.g. operations are methods on individual objects\n * like HTMLElement. With this style, no additional code is needed as a facade\n * (reducing payload size).\n * */\nexport interface ObjectOrientedRenderer3 {\n    createComment(data: string): RComment;\n    createElement(tagName: string): RElement;\n    createElementNS(namespace: string, tagName: string): RElement;\n    createTextNode(data: string): RText;\n    querySelector(selectors: string): RElement | null;\n}\n/** Returns whether the `renderer` is a `ProceduralRenderer3` */\nexport declare function isProceduralRenderer(renderer: ProceduralRenderer3 | ObjectOrientedRenderer3): renderer is ProceduralRenderer3;\n/**\n * Procedural style of API needed to create elements and text nodes.\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the\n * facade that enables element manipulation. This also facilitates backwards compatibility\n * with Renderer2.\n */\nexport interface ProceduralRenderer3 {\n    destroy(): void;\n    createComment(value: string): RComment;\n    createElement(name: string, namespace?: string | null): RElement;\n    createText(value: string): RText;\n    /**\n     * This property is allowed to be null / undefined,\n     * in which case the view engine won't call it.\n     * This is used as a performance optimization for production mode.\n     */\n    destroyNode?: ((node: RNode) => void) | null;\n    appendChild(parent: RElement, newChild: RNode): void;\n    insertBefore(parent: RNode, newChild: RNode, refChild: RNode | null): void;\n    removeChild(parent: RElement, oldChild: RNode): void;\n    selectRootElement(selectorOrNode: string | any): RElement;\n    parentNode(node: RNode): RElement | null;\n    nextSibling(node: RNode): RNode | null;\n    setAttribute(el: RElement, name: string, value: string, namespace?: string | null): void;\n    removeAttribute(el: RElement, name: string, namespace?: string | null): void;\n    addClass(el: RElement, name: string): void;\n    removeClass(el: RElement, name: string): void;\n    setStyle(el: RElement, style: string, value: any, flags?: RendererStyleFlags2 | RendererStyleFlags3): void;\n    removeStyle(el: RElement, style: string, flags?: RendererStyleFlags2 | RendererStyleFlags3): void;\n    setProperty(el: RElement, name: string, value: any): void;\n    setValue(node: RText, value: string): void;\n    listen(target: RNode, eventName: string, callback: (event: any) => boolean | void): () => void;\n}\nexport interface RendererFactory3 {\n    createRenderer(hostElement: RElement | null, rendererType: RendererType2 | null): Renderer3;\n    begin?(): void;\n    end?(): void;\n}\nexport declare const domRendererFactory3: RendererFactory3;\n/** Subset of API needed for appending elements and text nodes. */\nexport interface RNode {\n    parentNode: RNode | null;\n    nextSibling: RNode | null;\n    removeChild(oldChild: RNode): void;\n    /**\n     * Insert a child node.\n     *\n     * Used exclusively for adding View root nodes into ViewAnchor location.\n     */\n    insertBefore(newChild: RNode, refChild: RNode | null, isViewRoot: boolean): void;\n    /**\n     * Append a child node.\n     *\n     * Used exclusively for building up DOM which are static (ie not View roots)\n     */\n    appendChild(newChild: RNode): RNode;\n}\n/**\n * Subset of API needed for writing attributes, properties, and setting up\n * listeners on Element.\n */\nexport interface RElement extends RNode {\n    style: RCssStyleDeclaration;\n    classList: RDomTokenList;\n    className: string;\n    setAttribute(name: string, value: string): void;\n    removeAttribute(name: string): void;\n    setAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void;\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\n    removeEventListener(type: string, listener?: EventListener, options?: boolean): void;\n    setProperty?(name: string, value: any): void;\n}\nexport interface RCssStyleDeclaration {\n    removeProperty(propertyName: string): string;\n    setProperty(propertyName: string, value: string | null, priority?: string): void;\n}\nexport interface RDomTokenList {\n    add(token: string): void;\n    remove(token: string): void;\n}\nexport interface RText extends RNode {\n    textContent: string | null;\n}\nexport interface RComment extends RNode {\n}\nexport declare const unusedValueExportToPlacateAjd = 1;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/sanitization.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Function used to sanitize the value before writing it into the renderer.\n */\nexport declare type SanitizerFn = (value: any) => string;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/styling.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StyleSanitizeFn } from '../../sanitization/style_sanitizer';\nimport { RElement } from '../interfaces/renderer';\nimport { PlayerContext } from './player';\n/**\n * The styling context acts as a styling manifest (shaped as an array) for determining which\n * styling properties have been assigned via the provided `updateStylingMap`, `updateStyleProp`\n * and `updateClassProp` functions. There are also two initialization functions\n * `allocStylingContext` and `createStylingContextTemplate` which are used to initialize\n * and/or clone the context.\n *\n * The context is an array where the first two cells are used for static data (initial styling)\n * and dirty flags / index offsets). The remaining set of cells is used for multi (map) and single\n * (prop) style values.\n *\n * each value from here onwards is mapped as so:\n * [i] = mutation/type flag for the style/class value\n * [i + 1] = prop string (or null incase it has been removed)\n * [i + 2] = value string (or null incase it has been removed)\n *\n * There are three types of styling types stored in this context:\n *   initial: any styles that are passed in once the context is created\n *            (these are stored in the first cell of the array and the first\n *             value of this array is always `null` even if no initial styling exists.\n *             the `null` value is there so that any new styles have a parent to point\n *             to. This way we can always assume that there is a parent.)\n *\n *   single: any styles that are updated using `updateStyleProp` or `updateClassProp` (fixed set)\n *\n *   multi: any styles that are updated using `updateStylingMap` (dynamic set)\n *\n * Note that context is only used to collect style information. Only when `renderStyling`\n * is called is when the styling payload will be rendered (or built as a key/value map).\n *\n * When the context is created, depending on what initial styling values are passed in, the\n * context itself will be pre-filled with slots based on the initial style properties. Say\n * for example we have a series of initial styles that look like so:\n *\n *   style=\"width:100px; height:200px;\"\n *   class=\"foo\"\n *\n * Then the initial state of the context (once initialized) will look like so:\n *\n * ```\n * context = [\n *   element,\n *   playerContext | null,\n *   styleSanitizer | null,\n *   [null, '100px', '200px', true],  // property names are not needed since they have already been\n * written to DOM.\n *\n *   configMasterVal,\n *   1, // this instructs how many `style` values there are so that class index values can be\n * offsetted\n *   { classOne: true, classTwo: false } | 'classOne classTwo' | null // last class value provided\n * into updateStylingMap\n *   { styleOne: '100px', styleTwo: 0 } | null // last style value provided into updateStylingMap\n *\n *   // 8\n *   'width',\n *   pointers(1, 15);  // Point to static `width`: `100px` and multi `width`.\n *   null,\n *\n *   // 11\n *   'height',\n *   pointers(2, 18); // Point to static `height`: `200px` and multi `height`.\n *   null,\n *\n *   // 14\n *   'foo',\n *   pointers(1, 21);  // Point to static `foo`: `true` and multi `foo`.\n *   null,\n *\n *   // 17\n *   'width',\n *   pointers(1, 6);  // Point to static `width`: `100px` and single `width`.\n *   null,\n *\n *   // 21\n *   'height',\n *   pointers(2, 9);  // Point to static `height`: `200px` and single `height`.\n *   null,\n *\n *   // 24\n *   'foo',\n *   pointers(3, 12);  // Point to static `foo`: `true` and single `foo`.\n *   null,\n * ]\n *\n * function pointers(staticIndex: number, dynamicIndex: number) {\n *   // combine the two indices into a single word.\n *   return (staticIndex << StylingFlags.BitCountSize) |\n *     (dynamicIndex << (StylingIndex.BitCountSize + StylingFlags.BitCountSize));\n * }\n * ```\n *\n * The values are duplicated so that space is set aside for both multi ([style] and [class])\n * and single ([style.prop] or [class.named]) values. The respective config values\n * (configValA, configValB, etc...) are a combination of the StylingFlags with two index\n * values: the `initialIndex` (which points to the index location of the style value in\n * the initial styles array in slot 0) and the `dynamicIndex` (which points to the\n * matching single/multi index position in the context array for the same prop).\n *\n * This means that every time `updateStyleProp` or `updateClassProp` are called then they\n * must be called using an index value (not a property string) which references the index\n * value of the initial style prop/class when the context was created. This also means that\n * `updateStyleProp` or `updateClassProp` cannot be called with a new property (only\n * `updateStylingMap` can include new CSS properties that will be added to the context).\n */\nexport interface StylingContext extends Array<InitialStyles | {\n    [key: string]: any;\n} | number | string | boolean | RElement | StyleSanitizeFn | PlayerContext | null> {\n    /**\n     * Location of animation context (which contains the active players) for this element styling\n     * context.\n     */\n    [StylingIndex.PlayerContext]: PlayerContext | null;\n    /**\n     * The style sanitizer that is used within this context\n     */\n    [StylingIndex.StyleSanitizerPosition]: StyleSanitizeFn | null;\n    /**\n     * Location of initial data shared by all instances of this style.\n     */\n    [StylingIndex.InitialStylesPosition]: InitialStyles;\n    /**\n     * A numeric value representing the configuration status (whether the context is dirty or not)\n     * mixed together (using bit shifting) with a index value which tells the starting index value\n     * of where the multi style entries begin.\n     */\n    [StylingIndex.MasterFlagPosition]: number;\n    /**\n     * A numeric value representing the class index offset value. Whenever a single class is\n     * applied (using `elementClassProp`) it should have an styling index value that doesn't\n     * need to take into account any style values that exist in the context.\n     */\n    [StylingIndex.ClassOffsetPosition]: number;\n    /**\n     * Location of element that is used as a target for this context.\n     */\n    [StylingIndex.ElementPosition]: RElement | null;\n    /**\n     * The last class value that was interpreted by elementStylingMap. This is cached\n     * So that the algorithm can exit early incase the value has not changed.\n     */\n    [StylingIndex.PreviousOrCachedMultiClassValue]: {\n        [key: string]: any;\n    } | string | null;\n    /**\n     * The last style value that was interpreted by elementStylingMap. This is cached\n     * So that the algorithm can exit early incase the value has not changed.\n     */\n    [StylingIndex.PreviousMultiStyleValue]: {\n        [key: string]: any;\n    } | null;\n}\n/**\n * The initial styles is populated whether or not there are any initial styles passed into\n * the context during allocation. The 0th value must be null so that index values of `0` within\n * the context flags can always point to a null value safely when nothing is set.\n *\n * All other entries in this array are of `string` value and correspond to the values that\n * were extracted from the `style=\"\"` attribute in the HTML code for the provided template.\n */\nexport interface InitialStyles extends Array<string | null | boolean> {\n    [0]: null;\n}\n/**\n * Used to set the context to be dirty or not both on the master flag (position 1)\n * or for each single/multi property that exists in the context.\n */\nexport declare const enum StylingFlags {\n    None = 0,\n    Dirty = 1,\n    Class = 2,\n    Sanitize = 4,\n    PlayerBuildersDirty = 8,\n    OnlyProcessSingleClasses = 16,\n    BitCountSize = 5,\n    BitMask = 31\n}\n/** Used as numeric pointer values to determine what cells to update in the `StylingContext` */\nexport declare const enum StylingIndex {\n    PlayerContext = 0,\n    StyleSanitizerPosition = 1,\n    InitialStylesPosition = 2,\n    MasterFlagPosition = 3,\n    ClassOffsetPosition = 4,\n    ElementPosition = 5,\n    PreviousOrCachedMultiClassValue = 6,\n    PreviousMultiStyleValue = 7,\n    SingleStylesStartPosition = 8,\n    FlagsOffset = 0,\n    PropertyOffset = 1,\n    ValueOffset = 2,\n    PlayerBuilderIndexOffset = 3,\n    Size = 4,\n    BitCountSize = 14,\n    BitMask = 16383\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/interfaces/view.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../../di/injection_token';\nimport { Injector } from '../../di/injector';\nimport { QueryList } from '../../linker';\nimport { Sanitizer } from '../../sanitization/security';\nimport { Type } from '../../type';\nimport { LContainer } from './container';\nimport { ComponentDef, ComponentQuery, ComponentTemplate, DirectiveDef, DirectiveDefList, HostBindingsFunction, PipeDef, PipeDefList } from './definition';\nimport { I18nUpdateOpCodes, TI18n } from './i18n';\nimport { TElementNode, TNode, TViewNode } from './node';\nimport { PlayerHandler } from './player';\nimport { LQueries } from './query';\nimport { RElement, Renderer3 } from './renderer';\nimport { StylingContext } from './styling';\n/** Size of LViewData's header. Necessary to adjust for it when setting slots.  */\nexport declare const HEADER_OFFSET = 17;\nexport declare const TVIEW = 0;\nexport declare const FLAGS = 1;\nexport declare const PARENT = 2;\nexport declare const NEXT = 3;\nexport declare const QUERIES = 4;\nexport declare const HOST = 5;\nexport declare const HOST_NODE = 6;\nexport declare const BINDING_INDEX = 7;\nexport declare const CLEANUP = 8;\nexport declare const CONTEXT = 9;\nexport declare const INJECTOR = 10;\nexport declare const RENDERER = 11;\nexport declare const SANITIZER = 12;\nexport declare const TAIL = 13;\nexport declare const CONTAINER_INDEX = 14;\nexport declare const CONTENT_QUERIES = 15;\nexport declare const DECLARATION_VIEW = 16;\nexport interface OpaqueViewState {\n    '__brand__': 'Brand for OpaqueViewState that nothing will match';\n}\n/**\n * `LViewData` stores all of the information needed to process the instructions as\n * they are invoked from the template. Each embedded view and component view has its\n * own `LViewData`. When processing a particular view, we set the `viewData` to that\n * `LViewData`. When that view is done processing, the `viewData` is set back to\n * whatever the original `viewData` was before (the parent `LViewData`).\n *\n * Keeping separate state for each view facilities view insertion / deletion, so we\n * don't have to edit the data array based on which views are present.\n */\nexport interface LViewData extends Array<any> {\n    /**\n     * The static data for this view. We need a reference to this so we can easily walk up the\n     * node tree in DI and get the TView.data array associated with a node (where the\n     * directive defs are stored).\n     */\n    readonly [TVIEW]: TView;\n    /** Flags for this view. See LViewFlags for more info. */\n    [FLAGS]: LViewFlags;\n    /**\n     * The parent view is needed when we exit the view and must restore the previous\n     * `LViewData`. Without this, the render method would have to keep a stack of\n     * views as it is recursively rendering templates.\n     *\n     * This is the \"insertion\" view for embedded views. This allows us to properly\n     * destroy embedded views.\n     */\n    [PARENT]: LViewData | null;\n    /**\n     *\n     * The next sibling LViewData or LContainer.\n     *\n     * Allows us to propagate between sibling view states that aren't in the same\n     * container. Embedded views already have a node.next, but it is only set for\n     * views in the same container. We need a way to link component views and views\n     * across containers as well.\n     */\n    [NEXT]: LViewData | LContainer | null;\n    /** Queries active for this view - nodes from a view are reported to those queries. */\n    [QUERIES]: LQueries | null;\n    /**\n     * The host node for this LViewData instance, if this is a component view.\n     *\n     * If this is an embedded view, HOST will be null.\n     */\n    [HOST]: RElement | StylingContext | null;\n    /**\n     * Pointer to the `TViewNode` or `TElementNode` which represents the root of the view.\n     *\n     * If `TViewNode`, this is an embedded view of a container. We need this to be able to\n     * efficiently find the `LViewNode` when inserting the view into an anchor.\n     *\n     * If `TElementNode`, this is the LView of a component.\n     *\n     * If null, this is the root view of an application (root component is in this view).\n     */\n    [HOST_NODE]: TViewNode | TElementNode | null;\n    /**\n     * The binding index we should access next.\n     *\n     * This is stored so that bindings can continue where they left off\n     * if a view is left midway through processing bindings (e.g. if there is\n     * a setter that creates an embedded view, like in ngIf).\n     */\n    [BINDING_INDEX]: number;\n    /**\n     * When a view is destroyed, listeners need to be released and outputs need to be\n     * unsubscribed. This context array stores both listener functions wrapped with\n     * their context and output subscription instances for a particular view.\n     *\n     * These change per LView instance, so they cannot be stored on TView. Instead,\n     * TView.cleanup saves an index to the necessary context in this array.\n     */\n    [CLEANUP]: any[] | null;\n    /**\n     * - For dynamic views, this is the context with which to render the template (e.g.\n     *   `NgForContext`), or `{}` if not defined explicitly.\n     * - For root view of the root component the context contains change detection data.\n     * - For non-root components, the context is the component instance,\n     * - For inline views, the context is null.\n     */\n    [CONTEXT]: {} | RootContext | null;\n    /** An optional Module Injector to be used as fall back after Element Injectors are consulted. */\n    readonly [INJECTOR]: Injector | null;\n    /** Renderer to be used for this view. */\n    [RENDERER]: Renderer3;\n    /** An optional custom sanitizer. */\n    [SANITIZER]: Sanitizer | null;\n    /**\n     * The last LViewData or LContainer beneath this LViewData in the hierarchy.\n     *\n     * The tail allows us to quickly add a new state to the end of the view list\n     * without having to propagate starting from the first child.\n     */\n    [TAIL]: LViewData | LContainer | null;\n    /**\n     * The index of the parent container's host node. Applicable only to embedded views that\n     * have been inserted dynamically. Will be -1 for component views and inline views.\n     *\n     * This is necessary to jump from dynamically created embedded views to their parent\n     * containers because their parent cannot be stored on the TViewNode (views may be inserted\n     * in multiple containers, so the parent cannot be shared between view instances).\n     */\n    [CONTAINER_INDEX]: number;\n    /**\n     * Stores QueryLists associated with content queries of a directive. This data structure is\n     * filled-in as part of a directive creation process and is later used to retrieve a QueryList to\n     * be refreshed.\n     */\n    [CONTENT_QUERIES]: QueryList<any>[] | null;\n    /**\n     * View where this view's template was declared.\n     *\n     * Only applicable for dynamically created views. Will be null for inline/component views.\n     *\n     * The template for a dynamically created view may be declared in a different view than\n     * it is inserted. We already track the \"insertion view\" (view where the template was\n     * inserted) in LViewData[PARENT], but we also need access to the \"declaration view\"\n     * (view where the template was declared). Otherwise, we wouldn't be able to call the\n     * view's template function with the proper contexts. Context should be inherited from\n     * the declaration view tree, not the insertion view tree.\n     *\n     * Example (AppComponent template):\n     *\n     * <ng-template #foo></ng-template>       <-- declared here -->\n     * <some-comp [tpl]=\"foo\"></some-comp>    <-- inserted inside this component -->\n     *\n     * The <ng-template> above is declared in the AppComponent template, but it will be passed into\n     * SomeComp and inserted there. In this case, the declaration view would be the AppComponent,\n     * but the insertion view would be SomeComp. When we are removing views, we would want to\n     * traverse through the insertion view to clean up listeners. When we are calling the\n     * template function during change detection, we need the declaration view to get inherited\n     * context.\n     */\n    [DECLARATION_VIEW]: LViewData | null;\n}\n/** Flags associated with an LView (saved in LViewData[FLAGS]) */\nexport declare const enum LViewFlags {\n    /**\n     * Whether or not the view is in creationMode.\n     *\n     * This must be stored in the view rather than using `data` as a marker so that\n     * we can properly support embedded views. Otherwise, when exiting a child view\n     * back into the parent view, `data` will be defined and `creationMode` will be\n     * improperly reported as false.\n     */\n    CreationMode = 1,\n    /** Whether this view has default change detection strategy (checks always) or onPush */\n    CheckAlways = 2,\n    /** Whether or not this view is currently dirty (needing check) */\n    Dirty = 4,\n    /** Whether or not this view is currently attached to change detection tree. */\n    Attached = 8,\n    /**\n     *  Whether or not the init hooks have run.\n     *\n     * If on, the init hooks haven't yet been run and should be executed by the first component that\n     * runs OR the first cR() instruction that runs (so inits are run for the top level view before\n     * any embedded views).\n     */\n    RunInit = 16,\n    /** Whether or not this view is destroyed. */\n    Destroyed = 32,\n    /** Whether or not this view is the root view */\n    IsRoot = 64\n}\n/**\n * The static data for an LView (shared between all templates of a\n * given type).\n *\n * Stored on the template function as ngPrivateData.\n */\nexport interface TView {\n    /**\n     * ID for inline views to determine whether a view is the same as the previous view\n     * in a certain position. If it's not, we know the new view needs to be inserted\n     * and the one that exists needs to be removed (e.g. if/else statements)\n     *\n     * If this is -1, then this is a component view or a dynamically created view.\n     */\n    readonly id: number;\n    /**\n     * This is a blueprint used to generate LViewData instances for this TView. Copying this\n     * blueprint is faster than creating a new LViewData from scratch.\n     */\n    blueprint: LViewData;\n    /**\n     * The template function used to refresh the view of dynamically created views\n     * and components. Will be null for inline views.\n     */\n    template: ComponentTemplate<{}> | null;\n    /**\n     * A function containing query-related instructions.\n     */\n    viewQuery: ComponentQuery<{}> | null;\n    /**\n     * Pointer to the `TNode` that represents the root of the view.\n     *\n     * If this is a `TNode` for an `LViewNode`, this is an embedded view of a container.\n     * We need this pointer to be able to efficiently find this node when inserting the view\n     * into an anchor.\n     *\n     * If this is a `TElementNode`, this is the view of a root component. It has exactly one\n     * root TNode.\n     *\n     * If this is null, this is the view of a component that is not at root. We do not store\n     * the host TNodes for child component views because they can potentially have several\n     * different host TNodes, depending on where the component is being used. These host\n     * TNodes cannot be shared (due to different indices, etc).\n     */\n    node: TViewNode | TElementNode | null;\n    /** Whether or not this template has been processed. */\n    firstTemplatePass: boolean;\n    /** Static data equivalent of LView.data[]. Contains TNodes, PipeDefInternal or TI18n. */\n    data: TData;\n    /**\n     * The binding start index is the index at which the data array\n     * starts to store bindings only. Saving this value ensures that we\n     * will begin reading bindings at the correct point in the array when\n     * we are in update mode.\n     */\n    bindingStartIndex: number;\n    /**\n     * The index where the \"expando\" section of `LViewData` begins. The expando\n     * section contains injectors, directive instances, and host binding values.\n     * Unlike the \"consts\" and \"vars\" sections of `LViewData`, the length of this\n     * section cannot be calculated at compile-time because directives are matched\n     * at runtime to preserve locality.\n     *\n     * We store this start index so we know where to start checking host bindings\n     * in `setHostBindings`.\n     */\n    expandoStartIndex: number;\n    /**\n     * Index of the host node of the first LView or LContainer beneath this LView in\n     * the hierarchy.\n     *\n     * Necessary to store this so views can traverse through their nested views\n     * to remove listeners and call onDestroy callbacks.\n     *\n     * For embedded views, we store the index of an LContainer's host rather than the first\n     * LView to avoid managing splicing when views are added/removed.\n     */\n    childIndex: number;\n    /**\n     * A reference to the first child node located in the view.\n     */\n    firstChild: TNode | null;\n    /**\n     * Set of instructions used to process host bindings efficiently.\n     *\n     * See VIEW_DATA.md for more information.\n     */\n    expandoInstructions: (number | HostBindingsFunction)[] | null;\n    /**\n     * Full registry of directives and components that may be found in this view.\n     *\n     * It's necessary to keep a copy of the full def list on the TView so it's possible\n     * to render template functions without a host component.\n     */\n    directiveRegistry: DirectiveDefList | null;\n    /**\n     * Full registry of pipes that may be found in this view.\n     *\n     * The property is either an array of `PipeDefs`s or a function which returns the array of\n     * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n     *\n     * It's necessary to keep a copy of the full def list on the TView so it's possible\n     * to render template functions without a host component.\n     */\n    pipeRegistry: PipeDefList | null;\n    /**\n     * Array of ngOnInit and ngDoCheck hooks that should be executed for this view in\n     * creation mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     */\n    initHooks: HookData | null;\n    /**\n     * Array of ngDoCheck hooks that should be executed for this view in update mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     */\n    checkHooks: HookData | null;\n    /**\n     * Array of ngAfterContentInit and ngAfterContentChecked hooks that should be executed\n     * for this view in creation mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     */\n    contentHooks: HookData | null;\n    /**\n     * Array of ngAfterContentChecked hooks that should be executed for this view in update\n     * mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     */\n    contentCheckHooks: HookData | null;\n    /**\n     * Array of ngAfterViewInit and ngAfterViewChecked hooks that should be executed for\n     * this view in creation mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     */\n    viewHooks: HookData | null;\n    /**\n     * Array of ngAfterViewChecked hooks that should be executed for this view in\n     * update mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     */\n    viewCheckHooks: HookData | null;\n    /**\n     * Array of ngOnDestroy hooks that should be executed when this view is destroyed.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     */\n    destroyHooks: HookData | null;\n    /**\n     * Array of pipe ngOnDestroy hooks that should be executed when this view is destroyed.\n     *\n     * Even indices: Index of pipe in data\n     * Odd indices: Hook function\n     *\n     * These must be stored separately from directive destroy hooks because their contexts\n     * are stored in data.\n     */\n    pipeDestroyHooks: HookData | null;\n    /**\n     * When a view is destroyed, listeners need to be released and outputs need to be\n     * unsubscribed. This cleanup array stores both listener data (in chunks of 4)\n     * and output data (in chunks of 2) for a particular view. Combining the arrays\n     * saves on memory (70 bytes per array) and on a few bytes of code size (for two\n     * separate for loops).\n     *\n     * If it's a native DOM listener being stored:\n     * 1st index is: event name to remove\n     * 2nd index is: index of native element in LView.data[]\n     * 3rd index is: index of wrapped listener function in LView.cleanupInstances[]\n     * 4th index is: useCapture boolean\n     *\n     * If it's a renderer2 style listener or ViewRef destroy hook being stored:\n     * 1st index is: index of the cleanup function in LView.cleanupInstances[]\n     * 2nd index is: null\n     *\n     * If it's an output subscription or query list destroy hook:\n     * 1st index is: output unsubscribe function / query list destroy function\n     * 2nd index is: index of function context in LView.cleanupInstances[]\n     */\n    cleanup: any[] | null;\n    /**\n     * A list of element indices for child components that will need to be\n     * refreshed when the current view has finished its check. These indices have\n     * already been adjusted for the HEADER_OFFSET.\n     *\n     */\n    components: number[] | null;\n    /**\n     * A list of indices for child directives that have content queries.\n     *\n     * Even indices: Directive indices\n     * Odd indices: Starting index of content queries (stored in CONTENT_QUERIES) for this directive\n     */\n    contentQueries: number[] | null;\n}\nexport declare const enum RootContextFlags {\n    Empty = 0,\n    DetectChanges = 1,\n    FlushPlayers = 2\n}\n/**\n * RootContext contains information which is shared for all components which\n * were bootstrapped with {@link renderComponent}.\n */\nexport interface RootContext {\n    /**\n     * A function used for scheduling change detection in the future. Usually\n     * this is `requestAnimationFrame`.\n     */\n    scheduler: (workFn: () => void) => void;\n    /**\n     * A promise which is resolved when all components are considered clean (not dirty).\n     *\n     * This promise is overwritten every time a first call to {@link markDirty} is invoked.\n     */\n    clean: Promise<null>;\n    /**\n     * RootComponents - The components that were instantiated by the call to\n     * {@link renderComponent}.\n     */\n    components: {}[];\n    /**\n     * The player flushing handler to kick off all animations\n     */\n    playerHandler: PlayerHandler | null;\n    /**\n     * What render-related operations to run once a scheduler has been set\n     */\n    flags: RootContextFlags;\n}\n/**\n * Array of hooks that should be executed for a view and their directive indices.\n *\n * Even indices: Directive index\n * Odd indices: Hook function\n */\nexport declare type HookData = (number | (() => void))[];\n/**\n * Static data that corresponds to the instance-specific data array on an LView.\n *\n * Each node's static data is stored in tData at the same index that it's stored\n * in the data array.  Any nodes that do not have static data store a null value in\n * tData to avoid a sparse array.\n *\n * Each pipe's definition is stored here at the same index as its pipe instance in\n * the data array.\n *\n * Injector bloom filters are also stored here.\n */\nexport declare type TData = (TNode | PipeDef<any> | DirectiveDef<any> | ComponentDef<any> | number | Type<any> | InjectionToken<any> | TI18n | I18nUpdateOpCodes | null)[];\nexport declare const unusedValueExportToPlacateAjd = 1;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/jit/compiler_facade_interface.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A set of interfaces which are shared between `@angular/core` and `@angular/compiler` to allow\n * for late binding of `@angular/compiler` for JIT purposes.\n *\n * This file has two copies. Please ensure that they are in sync:\n *  - packages/compiler/src/compiler_facade_interface.ts             (master)\n *  - packages/core/src/render3/jit/compiler_facade_interface.ts     (copy)\n *\n * Please ensure that the two files are in sync using this command:\n * ```\n * cp packages/compiler/src/compiler_facade_interface.ts \\\n *    packages/core/src/render3/jit/compiler_facade_interface.ts\n * ```\n */\nexport interface ExportedCompilerFacade {\n    ɵcompilerFacade: CompilerFacade;\n}\nexport interface CompilerFacade {\n    compilePipe(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3PipeMetadataFacade): any;\n    compileInjectable(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3InjectableMetadataFacade): any;\n    compileInjector(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3InjectorMetadataFacade): any;\n    compileNgModule(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3NgModuleMetadataFacade): any;\n    compileDirective(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3DirectiveMetadataFacade): any;\n    compileComponent(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3ComponentMetadataFacade): any;\n    R3ResolvedDependencyType: typeof R3ResolvedDependencyType;\n}\nexport interface CoreEnvironment {\n    [name: string]: Function;\n}\nexport declare type StringMap = {\n    [key: string]: string;\n};\nexport declare type StringMapWithRename = {\n    [key: string]: string | [string, string];\n};\nexport declare type Provider = any;\nexport declare enum R3ResolvedDependencyType {\n    Token = 0,\n    Attribute = 1\n}\nexport interface R3DependencyMetadataFacade {\n    token: any;\n    resolved: R3ResolvedDependencyType;\n    host: boolean;\n    optional: boolean;\n    self: boolean;\n    skipSelf: boolean;\n}\nexport interface R3PipeMetadataFacade {\n    name: string;\n    type: any;\n    pipeName: string;\n    deps: R3DependencyMetadataFacade[] | null;\n    pure: boolean;\n}\nexport interface R3InjectableMetadataFacade {\n    name: string;\n    type: any;\n    ctorDeps: R3DependencyMetadataFacade[] | null;\n    providedIn: any;\n    useClass?: any;\n    useFactory?: any;\n    useExisting?: any;\n    useValue?: any;\n    userDeps?: R3DependencyMetadataFacade[];\n}\nexport interface R3NgModuleMetadataFacade {\n    type: any;\n    bootstrap: Function[];\n    declarations: Function[];\n    imports: Function[];\n    exports: Function[];\n    emitInline: boolean;\n}\nexport interface R3InjectorMetadataFacade {\n    name: string;\n    type: any;\n    deps: R3DependencyMetadataFacade[] | null;\n    providers: any;\n    imports: any;\n}\nexport interface R3DirectiveMetadataFacade {\n    name: string;\n    type: any;\n    typeArgumentCount: number;\n    typeSourceSpan: null;\n    deps: R3DependencyMetadataFacade[] | null;\n    selector: string | null;\n    queries: R3QueryMetadataFacade[];\n    host: {\n        [key: string]: string;\n    };\n    propMetadata: {\n        [key: string]: any[];\n    };\n    lifecycle: {\n        usesOnChanges: boolean;\n    };\n    inputs: string[];\n    outputs: string[];\n    usesInheritance: boolean;\n    exportAs: string | null;\n    providers: Provider[] | null;\n}\nexport interface R3ComponentMetadataFacade extends R3DirectiveMetadataFacade {\n    template: string;\n    preserveWhitespaces: boolean;\n    animations: any[] | undefined;\n    viewQueries: R3QueryMetadataFacade[];\n    pipes: Map<string, any>;\n    directives: Map<string, any>;\n    styles: string[];\n    encapsulation: ViewEncapsulation;\n    viewProviders: Provider[] | null;\n}\nexport declare type ViewEncapsulation = number;\nexport interface R3QueryMetadataFacade {\n    propertyName: string;\n    first: boolean;\n    predicate: any | string[];\n    descendants: boolean;\n    read: any | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/jit/compiler_facade.d.ts",
    "content": "import { CompilerFacade } from './compiler_facade_interface';\nexport * from './compiler_facade_interface';\nexport declare function getCompilerFacade(): CompilerFacade;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/jit/directive.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Query } from '../../metadata/di';\nimport { Component, Directive } from '../../metadata/directives';\nimport { Type } from '../../type';\nimport { R3QueryMetadataFacade } from './compiler_facade_interface';\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * ngComponentDef onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ngComponentDef`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n */\nexport declare function compileComponent(type: Type<any>, metadata: Component): void;\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * ngDirectiveDef onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n */\nexport declare function compileDirective(type: Type<any>, directive: Directive): void;\nexport declare function extendsDirectlyFromObject(type: Type<any>): boolean;\nexport declare function convertToR3QueryMetadata(propertyName: string, ann: Query): R3QueryMetadataFacade;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/jit/environment.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nexport declare const angularCoreEnv: {\n    [name: string]: Function;\n};\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/jit/injectable.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '../../di/injectable';\nimport { Type } from '../../type';\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * `ngInjectableDef` onto the injectable type.\n */\nexport declare function compileInjectable(type: Type<any>, srcMeta?: Injectable): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/jit/module.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule, NgModuleTransitiveScopes } from '../../metadata/ng_module';\nimport { Type } from '../../type';\nimport { ComponentDef } from '../interfaces/definition';\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `@NgModule` decorator.\n */\nexport declare function compileNgModule(moduleType: Type<any>, ngModule: NgModule): void;\n/**\n * Compiles and adds the `ngModuleDef` and `ngInjectorDef` properties to the module class.\n */\nexport declare function compileNgModuleDefs(moduleType: Type<any>, ngModule: NgModule): void;\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n */\nexport declare function patchComponentDefWithScope<C>(componentDef: ComponentDef<C>, transitiveScopes: NgModuleTransitiveScopes): void;\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. It can be called\n * on modules with components that have not fully compiled yet, but the result should not be used\n * until they have.\n */\nexport declare function transitiveScopesFor<T>(moduleType: Type<T>): NgModuleTransitiveScopes;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/jit/pipe.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Pipe } from '../../metadata/directives';\nimport { Type } from '../../type';\nexport declare function compilePipe(type: Type<any>, meta: Pipe): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/jit/util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ReflectionCapabilities } from '../../reflection/reflection_capabilities';\nimport { Type } from '../../type';\nimport { R3DependencyMetadataFacade } from './compiler_facade';\nexport declare function getReflect(): ReflectionCapabilities;\nexport declare function reflectDependencies(type: Type<any>): R3DependencyMetadataFacade[];\nexport declare function convertDependencies(deps: any[]): R3DependencyMetadataFacade[];\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/metadata.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be marked as pure, resulting in the metadata assignments being\n * tree-shaken away during production builds.\n */\nexport declare function setClassMetadata(type: Type<any>, decorators: any[] | null, ctorParameters: any[] | null, propDecorators: {\n    [field: string]: any;\n} | null): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/ng_dev_mode.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\ndeclare global {\n    const ngDevMode: null | NgDevModePerfCounters;\n    interface NgDevModePerfCounters {\n        firstTemplatePass: number;\n        tNode: number;\n        tView: number;\n        rendererCreateTextNode: number;\n        rendererSetText: number;\n        rendererCreateElement: number;\n        rendererAddEventListener: number;\n        rendererSetAttribute: number;\n        rendererRemoveAttribute: number;\n        rendererSetProperty: number;\n        rendererSetClassName: number;\n        rendererAddClass: number;\n        rendererRemoveClass: number;\n        rendererSetStyle: number;\n        rendererRemoveStyle: number;\n        rendererDestroy: number;\n        rendererDestroyNode: number;\n        rendererMoveNode: number;\n        rendererRemoveNode: number;\n        rendererCreateComment: number;\n    }\n}\nexport declare function ngDevModeResetPerfCounters(): NgDevModePerfCounters;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/ng_module_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '../di/injector';\nimport { StaticProvider } from '../di/provider';\nimport { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { InternalNgModuleRef, NgModuleFactory as viewEngine_NgModuleFactory, NgModuleRef as viewEngine_NgModuleRef } from '../linker/ng_module_factory';\nimport { NgModuleDef } from '../metadata/ng_module';\nimport { Type } from '../type';\nexport interface NgModuleType {\n    ngModuleDef: NgModuleDef<any>;\n}\nexport declare const COMPONENT_FACTORY_RESOLVER: StaticProvider;\nexport declare class NgModuleRef<T> extends viewEngine_NgModuleRef<T> implements InternalNgModuleRef<T> {\n    _bootstrapComponents: Type<any>[];\n    injector: Injector;\n    componentFactoryResolver: viewEngine_ComponentFactoryResolver;\n    instance: T;\n    destroyCbs: (() => void)[] | null;\n    constructor(ngModuleType: Type<T>, parentInjector: Injector | null);\n    destroy(): void;\n    onDestroy(callback: () => void): void;\n}\nexport declare class NgModuleFactory<T> extends viewEngine_NgModuleFactory<T> {\n    moduleType: Type<T>;\n    constructor(moduleType: Type<T>);\n    create(parentInjector: Injector | null): viewEngine_NgModuleRef<T>;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/node_assert.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TNode, TNodeType } from './interfaces/node';\nexport declare function assertNodeType(tNode: TNode, type: TNodeType): void;\nexport declare function assertNodeOfPossibleTypes(tNode: TNode, ...types: TNodeType[]): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/node_manipulation.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LContainer } from './interfaces/container';\nimport { TContainerNode, TElementContainerNode, TElementNode, TNode, TViewNode } from './interfaces/node';\nimport { RComment, RElement, RNode, RText, Renderer3 } from './interfaces/renderer';\nimport { LViewData } from './interfaces/view';\n/** Retrieves the parent element of a given node. */\nexport declare function getParentNative(tNode: TNode, currentView: LViewData): RElement | RComment | null;\n/**\n * Gets the host element given a view. Will return null if the current view is an embedded view,\n * which does not have a host element.\n */\nexport declare function getHostNative(currentView: LViewData): RElement | null;\nexport declare function getLContainer(tNode: TViewNode, embeddedView: LViewData): LContainer | null;\n/**\n * Retrieves render parent for a given view.\n * Might be null if a view is not yet attached to any container.\n */\nexport declare function getContainerRenderParent(tViewNode: TViewNode, view: LViewData): RElement | null;\n/**\n * Given a current view, finds the nearest component's host (LElement).\n *\n * @param lViewData LViewData for which we want a host element node\n * @returns The host node\n */\nexport declare function findComponentView(lViewData: LViewData): LViewData;\nexport declare function createTextNode(value: any, renderer: Renderer3): RText;\n/**\n * Adds or removes all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to remove all elements in the\n * views beneath it.\n *\n * @param viewToWalk The view from which elements should be added or removed\n * @param insertMode Whether or not elements should be added (if false, removing)\n * @param beforeNode The node before which elements should be added, if insert mode\n */\nexport declare function addRemoveViewFromContainer(viewToWalk: LViewData, insertMode: true, beforeNode: RNode | null): void;\nexport declare function addRemoveViewFromContainer(viewToWalk: LViewData, insertMode: false): void;\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n *  @param rootView The view to destroy\n */\nexport declare function destroyViewTree(rootView: LViewData): void;\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param lView The view to insert\n * @param lContainer The container into which the view should be inserted\n * @param parentView The new parent of the inserted view\n * @param index The index at which to insert the view\n * @param containerIndex The index of the container node, if dynamic\n */\nexport declare function insertView(lView: LViewData, lContainer: LContainer, parentView: LViewData, index: number, containerIndex: number): void;\n/**\n * Detaches a view from a container.\n *\n * This method splices the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param lContainer The container from which to detach a view\n * @param removeIndex The index of the view to detach\n * @param detached Whether or not this view is already detached.\n */\nexport declare function detachView(lContainer: LContainer, removeIndex: number, detached: boolean): void;\n/**\n * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.\n *\n * @param lContainer The container from which to remove a view\n * @param tContainer The TContainer node associated with the LContainer\n * @param removeIndex The index of the view to remove\n */\nexport declare function removeView(lContainer: LContainer, containerHost: TElementNode | TContainerNode | TElementContainerNode, removeIndex: number): void;\n/** Gets the child of the given LViewData */\nexport declare function getLViewChild(viewData: LViewData): LViewData | LContainer | null;\n/**\n * A standalone function which destroys an LView,\n * conducting cleanup (e.g. removing listeners, calling onDestroys).\n *\n * @param view The view to be destroyed.\n */\nexport declare function destroyLView(view: LViewData): void;\n/**\n * Determines which LViewOrLContainer to jump to when traversing back up the\n * tree in destroyViewTree.\n *\n * Normally, the view's parent LView should be checked, but in the case of\n * embedded views, the container (which is the view node's parent, but not the\n * LView's parent) needs to be checked for a possible next property.\n *\n * @param state The LViewOrLContainer for which we need a parent state\n * @param rootView The rootView, so we don't propagate too far up the view tree\n * @returns The correct parent LViewOrLContainer\n */\nexport declare function getParentState(state: LViewData | LContainer, rootView: LViewData): LViewData | LContainer | null;\nexport declare function getRenderParent(tNode: TNode, currentView: LViewData): RElement | null;\n/**\n * Returns whether a native element can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is mare for projection but has not been inserted\n *   into destination.\n *\n\n *\n * @param tNode The tNode of the node that we want to insert.\n * @param currentView Current LView being processed.\n * @return boolean Whether the node should be inserted now (or delayed until later).\n */\nexport declare function canInsertNativeNode(tNode: TNode, currentView: LViewData): boolean;\n/**\n * Inserts a native node before another native node for a given parent using {@link Renderer3}.\n * This is a utility function that can be used when native nodes were determined - it abstracts an\n * actual renderer being used.\n */\nexport declare function nativeInsertBefore(renderer: Renderer3, parent: RElement, child: RNode, beforeNode: RNode | null): void;\n/**\n * Returns a native parent of a given native node.\n */\nexport declare function nativeParentNode(renderer: Renderer3, node: RNode): RElement | null;\n/**\n * Returns a native sibling of a given native node.\n */\nexport declare function nativeNextSibling(renderer: Renderer3, node: RNode): RNode | null;\n/**\n * Appends the `child` element to the `parent`.\n *\n * The element insertion might be delayed {@link canInsertNativeNode}.\n *\n * @param childEl The child that should be appended\n * @param childTNode The TNode of the child element\n * @param currentView The current LView\n * @returns Whether or not the child was appended\n */\nexport declare function appendChild(childEl: RNode | null | undefined, childTNode: TNode, currentView: LViewData): boolean;\nexport declare function getBeforeNodeForView(index: number, views: LViewData[], containerNative: RComment): RComment;\n/**\n * Removes the `child` element from the DOM if not in view and not projected.\n *\n * @param childTNode The TNode of the child to remove\n * @param childEl The child that should be removed\n * @param currentView The current LView\n * @returns Whether or not the child was removed\n */\nexport declare function removeChild(childTNode: TNode, childEl: RNode | null, currentView: LViewData): boolean;\n/**\n * Appends a projected node to the DOM, or in the case of a projected container,\n * appends the nodes from all of the container's active views to the DOM.\n *\n * @param projectedTNode The TNode to be projected\n * @param tProjectionNode The projection (ng-content) TNode\n * @param currentView Current LView\n * @param projectionView Projection view (view above current)\n */\nexport declare function appendProjectedNode(projectedTNode: TNode, tProjectionNode: TNode, currentView: LViewData, projectionView: LViewData): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/node_selector_matcher.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { TNode } from './interfaces/node';\nimport { CssSelector, CssSelectorList } from './interfaces/projection';\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param node static data to match\n * @param selector\n * @returns true if node matches the selector.\n */\nexport declare function isNodeMatchingSelector(tNode: TNode, selector: CssSelector): boolean;\nexport declare function isNodeMatchingSelectorList(tNode: TNode, selector: CssSelectorList): boolean;\nexport declare function getProjectAsAttrValue(tNode: TNode): string | null;\n/**\n * Checks a given node against matching selectors and returns\n * selector index (or 0 if none matched).\n *\n * This function takes into account the ngProjectAs attribute: if present its value will be compared\n * to the raw (un-parsed) CSS selector instead of using standard selector matching logic.\n */\nexport declare function matchingSelectorIndex(tNode: TNode, selectors: CssSelectorList[], textSelectors: string[]): number;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/pipe.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Create a pipe.\n *\n * @param index Pipe index where the pipe will be stored.\n * @param pipeName The name of the pipe\n * @returns T the instance of the pipe.\n */\nexport declare function pipe(index: number, pipeName: string): any;\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n */\nexport declare function pipeBind1(index: number, slotOffset: number, v1: any): any;\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n */\nexport declare function pipeBind2(index: number, slotOffset: number, v1: any, v2: any): any;\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 4rd argument to {@link PipeTransform#transform}.\n */\nexport declare function pipeBind3(index: number, slotOffset: number, v1: any, v2: any, v3: any): any;\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 3rd argument to {@link PipeTransform#transform}.\n * @param v4 4th argument to {@link PipeTransform#transform}.\n */\nexport declare function pipeBind4(index: number, slotOffset: number, v1: any, v2: any, v3: any, v4: any): any;\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n */\nexport declare function pipeBindV(index: number, slotOffset: number, values: any[]): any;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/players.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { ComponentInstance, DirectiveInstance, Player } from './interfaces/player';\n/**\n * Adds a player to an element, directive or component instance that will later be\n * animated once change detection has passed.\n *\n * When a player is added to a reference it will stay active until `player.destroy()`\n * is called. Once called then the player will be removed from the active players\n * present on the associated ref instance.\n *\n * To get a list of all the active players on an element see [getPlayers].\n *\n * @param ref The element, directive or component that the player will be placed on.\n * @param player The player that will be triggered to play once change detection has run.\n */\nexport declare function addPlayer(ref: ComponentInstance | DirectiveInstance | HTMLElement, player: Player): void;\n/**\n * Returns a list of all the active players present on the provided ref instance (which can\n * be an instance of a directive, component or element).\n *\n * This function will only return players that have been added to the ref instance using\n * `addPlayer` or any players that are active through any template styling bindings\n * (`[style]`, `[style.prop]`, `[class]` and `[class.name]`).\n *\n * @publicApi\n */\nexport declare function getPlayers(ref: ComponentInstance | DirectiveInstance | HTMLElement): Player[];\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/pure_function.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |------consts------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns a value\n * @param thisArg Optional calling context of pureFn\n * @returns value\n */\nexport declare function pureFunction0<T>(slotOffset: number, pureFn: () => T, thisArg?: any): T;\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport declare function pureFunction1(slotOffset: number, pureFn: (v: any) => any, exp: any, thisArg?: any): any;\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport declare function pureFunction2(slotOffset: number, pureFn: (v1: any, v2: any) => any, exp1: any, exp2: any, thisArg?: any): any;\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport declare function pureFunction3(slotOffset: number, pureFn: (v1: any, v2: any, v3: any) => any, exp1: any, exp2: any, exp3: any, thisArg?: any): any;\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport declare function pureFunction4(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, thisArg?: any): any;\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport declare function pureFunction5(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, thisArg?: any): any;\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport declare function pureFunction6(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, thisArg?: any): any;\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport declare function pureFunction7(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, exp7: any, thisArg?: any): any;\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param exp8\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport declare function pureFunction8(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, exp7: any, exp8: any, thisArg?: any): any;\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport declare function pureFunctionV(slotOffset: number, pureFn: (...v: any[]) => any, exps: any[], thisArg?: any): any;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/query.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { QueryList as viewEngine_QueryList } from '../linker/query_list';\nimport { Type } from '../type';\nimport { TContainerNode, TElementContainerNode, TElementNode } from './interfaces/node';\nimport { LQueries } from './interfaces/query';\n/**\n * A predicate which determines if a given element/directive should be included in the query\n * results.\n */\nexport interface QueryPredicate<T> {\n    /**\n     * If looking for directives then it contains the directive type.\n     */\n    type: Type<T> | null;\n    /**\n     * If selector then contains local names to query for.\n     */\n    selector: string[] | null;\n    /**\n     * Indicates which token should be read from DI for this query.\n     */\n    read: Type<T> | null;\n}\n/**\n * An object representing a query, which is a combination of:\n * - query predicate to determines if a given element/directive should be included in the query\n * - values collected based on a predicate\n * - `QueryList` to which collected values should be reported\n */\nexport interface LQuery<T> {\n    /**\n     * Next query. Used when queries are stored as a linked list in `LQueries`.\n     */\n    next: LQuery<any> | null;\n    /**\n     * Destination to which the value should be added.\n     */\n    list: QueryList<T>;\n    /**\n     * A predicate which determines if a given element/directive should be included in the query\n     * results.\n     */\n    predicate: QueryPredicate<T>;\n    /**\n     * Values which have been located.\n     *\n     * This is what builds up the `QueryList._valuesTree`.\n     */\n    values: any[];\n    /**\n     * A pointer to an array that stores collected values from views. This is necessary so we know a\n     * container into which to insert nodes collected from views.\n     */\n    containerValues: any[] | null;\n}\nexport declare class LQueries_ implements LQueries {\n    parent: LQueries_ | null;\n    private shallow;\n    private deep;\n    constructor(parent: LQueries_ | null, shallow: LQuery<any> | null, deep: LQuery<any> | null);\n    track<T>(queryList: viewEngine_QueryList<T>, predicate: Type<T> | string[], descend?: boolean, read?: Type<T>): void;\n    clone(): LQueries;\n    container(): LQueries | null;\n    createView(): LQueries | null;\n    insertView(index: number): void;\n    addNode(tNode: TElementNode | TContainerNode | TElementContainerNode): LQueries | null;\n    removeView(): void;\n}\nexport declare type QueryList<T> = viewEngine_QueryList<T>;\nexport declare const QueryList: typeof viewEngine_QueryList;\n/**\n * Creates and returns a QueryList.\n *\n * @param memoryIndex The index in memory where the QueryList should be saved. If null,\n * this is is a content query and the QueryList will be saved later through directiveCreate.\n * @param predicate The type for which the query will search\n * @param descend Whether or not to descend into children\n * @param read What to save in the query\n * @returns QueryList<T>\n */\nexport declare function query<T>(memoryIndex: number | null, predicate: Type<any> | string[], descend?: boolean, read?: any): QueryList<T>;\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n * Returns true if a query got dirty during change detection, false otherwise.\n */\nexport declare function queryRefresh(queryList: QueryList<any>): boolean;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/state.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Sanitizer } from '../sanitization/security';\nimport { TElementNode, TNode, TViewNode } from './interfaces/node';\nimport { LQueries } from './interfaces/query';\nimport { Renderer3, RendererFactory3 } from './interfaces/renderer';\nimport { LViewData, OpaqueViewState, TView } from './interfaces/view';\nexport declare function getRenderer(): Renderer3;\nexport declare function setRenderer(r: Renderer3): void;\nexport declare function getRendererFactory(): RendererFactory3;\nexport declare function setRendererFactory(factory: RendererFactory3): void;\nexport declare function getCurrentSanitizer(): Sanitizer | null;\nexport declare function getElementDepthCount(): number;\nexport declare function increaseElementDepthCount(): void;\nexport declare function decreaseElementDepthCount(): void;\nexport declare function getBindingsEnabled(): boolean;\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n */\nexport declare function enableBindings(): void;\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n */\nexport declare function disableBindings(): void;\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n */\nexport declare function getCurrentView(): OpaqueViewState;\nexport declare function _getViewData(): LViewData;\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n */\nexport declare function restoreView(viewToRestore: OpaqueViewState): void;\nexport declare function getPreviousOrParentTNode(): TNode;\nexport declare function setPreviousOrParentTNode(tNode: TNode): void;\nexport declare function setTNodeAndViewData(tNode: TNode, view: LViewData): void;\nexport declare function getIsParent(): boolean;\nexport declare function setIsParent(value: boolean): void;\nexport declare function getTView(): TView;\nexport declare function getCurrentQueries(): LQueries | null;\nexport declare function setCurrentQueries(queries: LQueries | null): void;\n/**\n * Query instructions can ask for \"current queries\" in 2 different cases:\n * - when creating view queries (at the root of a component view, before any node is created - in\n * this case currentQueries points to view queries)\n * - when creating content queries (i.e. this previousOrParentTNode points to a node on which we\n * create content queries).\n */\nexport declare function getOrCreateCurrentQueries(QueryType: {\n    new (parent: null, shallow: null, deep: null): LQueries;\n}): LQueries;\nexport declare function getCreationMode(): boolean;\n/**\n * Internal function that returns the current LViewData instance.\n *\n * The getCurrentView() instruction should be used for anything public.\n */\nexport declare function getViewData(): LViewData;\nexport declare function getContextViewData(): LViewData;\nexport declare function getCleanup(view: LViewData): any[];\nexport declare function getTViewCleanup(view: LViewData): any[];\nexport declare function getCheckNoChangesMode(): boolean;\nexport declare function setCheckNoChangesMode(mode: boolean): void;\nexport declare function getFirstTemplatePass(): boolean;\nexport declare function setFirstTemplatePass(value: boolean): void;\nexport declare function getBindingRoot(): number;\nexport declare function setBindingRoot(value: number): void;\n/**\n * Swap the current state with a new state.\n *\n * For performance reasons we store the state in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the state for later, and when the view is\n * exited the state has to be restored\n *\n * @param newView New state to become active\n * @param host Element to which the View is a child of\n * @returns the previous state;\n */\nexport declare function enterView(newView: LViewData, hostTNode: TElementNode | TViewNode | null): LViewData;\nexport declare function nextContextImpl<T = any>(level?: number): T;\n/**\n * Resets the application state.\n */\nexport declare function resetComponentState(): void;\n/**\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n * the direction of traversal (up or down the view tree) a bit clearer.\n *\n * @param newView New state to become active\n * @param creationOnly An optional boolean to indicate that the view was processed in creation mode\n * only, i.e. the first update will be done later. Only possible for dynamically created views.\n */\nexport declare function leaveView(newView: LViewData, creationOnly?: boolean): void;\nexport declare function assertPreviousIsParent(): void;\nexport declare function assertHasParent(): void;\nexport declare function assertDataInRange(index: number, arr?: any[]): void;\nexport declare function assertDataNext(index: number, arr?: any[]): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/styling/class_and_style_bindings.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StyleSanitizeFn } from '../../sanitization/style_sanitizer';\nimport { InitialStylingFlags } from '../interfaces/definition';\nimport { BindingStore, BindingType, Player, PlayerBuilder, PlayerFactory } from '../interfaces/player';\nimport { Renderer3 } from '../interfaces/renderer';\nimport { StylingContext } from '../interfaces/styling';\nimport { LViewData, RootContext } from '../interfaces/view';\nimport { NO_CHANGE } from '../tokens';\nimport { BoundPlayerFactory } from './player_factory';\n/**\n * Creates a styling context template where styling information is stored.\n * Any styles that are later referenced using `updateStyleProp` must be\n * passed in within this function. Initial values for those styles are to\n * be declared after all initial style properties are declared (this change in\n * mode between declarations and initial styles is made possible using a special\n * enum value found in `definition.ts`).\n *\n * @param initialStyleDeclarations a list of style declarations and initial style values\n *    that are used later within the styling context.\n *\n *    -> ['width', 'height', SPECIAL_ENUM_VAL, 'width', '100px']\n *       This implies that `width` and `height` will be later styled and that the `width`\n *       property has an initial value of `100px`.\n *\n * @param initialClassDeclarations a list of class declarations and initial class values\n *    that are used later within the styling context.\n *\n *    -> ['foo', 'bar', SPECIAL_ENUM_VAL, 'foo', true]\n *       This implies that `foo` and `bar` will be later styled and that the `foo`\n *       class will be applied to the element as an initial class since it's true\n */\nexport declare function createStylingContextTemplate(initialClassDeclarations?: (string | boolean | InitialStylingFlags)[] | null, initialStyleDeclarations?: (string | boolean | InitialStylingFlags)[] | null, styleSanitizer?: StyleSanitizeFn | null, onlyProcessSingleClasses?: boolean): StylingContext;\n/**\n * Sets and resolves all `multi` styling on an `StylingContext` so that they can be\n * applied to the element once `renderStyleAndClassBindings` is called.\n *\n * All missing styles/class (any values that are not provided in the new `styles`\n * or `classes` params) will resolve to `null` within their respective positions\n * in the context.\n *\n * @param context The styling context that will be updated with the\n *    newly provided style values.\n * @param classesInput The key/value map of CSS class names that will be used for the update.\n * @param stylesInput The key/value map of CSS styles that will be used for the update.\n */\nexport declare function updateStylingMap(context: StylingContext, classesInput: {\n    [key: string]: any;\n} | string | BoundPlayerFactory<null | string | {\n    [key: string]: any;\n}> | NO_CHANGE | null, stylesInput?: {\n    [key: string]: any;\n} | BoundPlayerFactory<null | {\n    [key: string]: any;\n}> | NO_CHANGE | null): void;\n/**\n * Sets and resolves a single styling property/value on the provided `StylingContext` so\n * that they can be applied to the element once `renderStyleAndClassBindings` is called.\n *\n * Note that prop-level styling values are considered higher priority than any styling that\n * has been applied using `updateStylingMap`, therefore, when styling values are rendered\n * then any styles/classes that have been applied using this function will be considered first\n * (then multi values second and then initial values as a backup).\n *\n * @param context The styling context that will be updated with the\n *    newly provided style value.\n * @param index The index of the property which is being updated.\n * @param value The CSS style value that will be assigned\n */\nexport declare function updateStyleProp(context: StylingContext, index: number, input: string | boolean | null | BoundPlayerFactory<string | boolean | null>): void;\n/**\n * This method will toggle the referenced CSS class (by the provided index)\n * within the given context.\n *\n * @param context The styling context that will be updated with the\n *    newly provided class value.\n * @param index The index of the CSS class which is being updated.\n * @param addOrRemove Whether or not to add or remove the CSS class\n */\nexport declare function updateClassProp(context: StylingContext, index: number, addOrRemove: boolean | BoundPlayerFactory<boolean>): void;\n/**\n * Renders all queued styling using a renderer onto the given element.\n *\n * This function works by rendering any styles (that have been applied\n * using `updateStylingMap`) and any classes (that have been applied using\n * `updateStyleProp`) onto the provided element using the provided renderer.\n * Just before the styles/classes are rendered a final key/value style map\n * will be assembled (if `styleStore` or `classStore` are provided).\n *\n * @param lElement the element that the styles will be rendered on\n * @param context The styling context that will be used to determine\n *      what styles will be rendered\n * @param renderer the renderer that will be used to apply the styling\n * @param classesStore if provided, the updated class values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param stylesStore if provided, the updated style values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @returns number the total amount of players that got queued for animation (if any)\n */\nexport declare function renderStyleAndClassBindings(context: StylingContext, renderer: Renderer3, rootOrView: RootContext | LViewData, isFirstRender: boolean, classesStore?: BindingStore | null, stylesStore?: BindingStore | null): number;\nexport declare function isContextDirty(context: StylingContext): boolean;\nexport declare function limitToSingleClasses(context: StylingContext): number;\nexport declare function setContextDirty(context: StylingContext, isDirtyYes: boolean): void;\nexport declare function setContextPlayersDirty(context: StylingContext, isDirtyYes: boolean): void;\nexport declare class ClassAndStylePlayerBuilder<T> implements PlayerBuilder {\n    private _element;\n    private _type;\n    private _values;\n    private _dirty;\n    private _factory;\n    constructor(factory: PlayerFactory, _element: HTMLElement, _type: BindingType);\n    setValue(prop: string, value: any): void;\n    buildPlayer(currentPlayer: Player | null, isFirstRender: boolean): Player | undefined | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/styling/core_player_handler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Player, PlayerHandler } from '../interfaces/player';\nexport declare class CorePlayerHandler implements PlayerHandler {\n    private _players;\n    flushPlayers(): void;\n    queuePlayer(player: Player): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/styling/player_factory.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PlayerFactory, PlayerFactoryBuildFn } from '../interfaces/player';\n/**\n * Combines the binding value and a factory for an animation player.\n *\n * Used to bind a player to an element template binding (currently only\n * `[style]`, `[style.prop]`, `[class]` and `[class.name]` bindings\n * supported). The provided `factoryFn` function will be run once all\n * the associated bindings have been evaluated on the element and is\n * designed to return a player which will then be placed on the element.\n *\n * @param factoryFn The function that is used to create a player\n *   once all the rendering-related (styling values) have been\n *   processed for the element binding.\n * @param value The raw value that will be exposed to the binding\n *   so that the binding can update its internal values when\n *   any changes are evaluated.\n */\nexport declare function bindPlayerFactory<T>(factoryFn: PlayerFactoryBuildFn, value: T): PlayerFactory;\nexport declare class BoundPlayerFactory<T> {\n    fn: PlayerFactoryBuildFn;\n    value: T;\n    '__brand__': 'Brand for PlayerFactory that nothing will match';\n    constructor(fn: PlayerFactoryBuildFn, value: T);\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/styling/util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport '../ng_dev_mode';\nimport { StyleSanitizeFn } from '../../sanitization/style_sanitizer';\nimport { LContext } from '../interfaces/context';\nimport { Player, PlayerContext } from '../interfaces/player';\nimport { RElement } from '../interfaces/renderer';\nimport { InitialStyles, StylingContext } from '../interfaces/styling';\nimport { LViewData, RootContext } from '../interfaces/view';\nexport declare function createEmptyStylingContext(element?: RElement | null, sanitizer?: StyleSanitizeFn | null, initialStylingValues?: InitialStyles): StylingContext;\n/**\n * Used clone a copy of a pre-computed template of a styling context.\n *\n * A pre-computed template is designed to be computed once for a given element\n * (instructions.ts has logic for caching this).\n */\nexport declare function allocStylingContext(element: RElement | null, templateStyleContext: StylingContext): StylingContext;\n/**\n * Retrieve the `StylingContext` at a given index.\n *\n * This method lazily creates the `StylingContext`. This is because in most cases\n * we have styling without any bindings. Creating `StylingContext` eagerly would mean that\n * every style declaration such as `<div style=\"color: red\">` would result `StyleContext`\n * which would create unnecessary memory pressure.\n *\n * @param index Index of the style allocation. See: `elementStyling`.\n * @param viewData The view to search for the styling context\n */\nexport declare function getStylingContext(index: number, viewData: LViewData): StylingContext;\nexport declare function addPlayerInternal(playerContext: PlayerContext, rootContext: RootContext, element: HTMLElement, player: Player | null, playerContextIndex: number, ref?: any): boolean;\nexport declare function getPlayersInternal(playerContext: PlayerContext): Player[];\nexport declare function getOrCreatePlayerContext(target: {}, context?: LContext | null): PlayerContext | null;\nexport declare function getPlayerContext(stylingContext: StylingContext): PlayerContext | null;\nexport declare function allocPlayerContext(data: StylingContext): PlayerContext;\nexport declare function throwInvalidRefError(): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/tokens.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport interface NO_CHANGE {\n    brand: 'NO_CHANGE';\n}\n/** A special value which designates that a value has not changed. */\nexport declare const NO_CHANGE: NO_CHANGE;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LContainer } from './interfaces/container';\nimport { LContext } from './interfaces/context';\nimport { ComponentDef, DirectiveDef } from './interfaces/definition';\nimport { RelativeInjectorLocation } from './interfaces/injector';\nimport { TContainerNode, TElementNode, TNode } from './interfaces/node';\nimport { RComment, RElement, RText } from './interfaces/renderer';\nimport { StylingContext } from './interfaces/styling';\nimport { LViewData, RootContext, TData } from './interfaces/view';\n/**\n * Returns whether the values are different from a change detection stand point.\n *\n * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n */\nexport declare function isDifferent(a: any, b: any, checkNoChangesMode: boolean): boolean;\nexport declare function stringify(value: any): string;\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n */\nexport declare function flatten(list: any[]): any[];\n/** Retrieves a value from any `LViewData` or `TData`. */\nexport declare function loadInternal<T>(index: number, arr: LViewData | TData): T;\nexport declare function assertDataInRangeInternal(index: number, arr: any[]): void;\n/**\n * Takes the value of a slot in `LViewData` and returns the element node.\n *\n * Normally, element nodes are stored flat, but if the node has styles/classes on it,\n * it might be wrapped in a styling context. Or if that node has a directive that injects\n * ViewContainerRef, it may be wrapped in an LContainer. Or if that node is a component,\n * it will be wrapped in LViewData. It could even have all three, so we keep looping\n * until we find something that isn't an array.\n *\n * @param value The initial value in `LViewData`\n */\nexport declare function readElementValue(value: RElement | StylingContext | LContainer | LViewData): RElement;\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n */\nexport declare function getNativeByIndex(index: number, arr: LViewData): RElement;\nexport declare function getNativeByTNode(tNode: TNode, hostView: LViewData): RElement | RText | RComment;\nexport declare function getTNode(index: number, view: LViewData): TNode;\nexport declare function getComponentViewByIndex(nodeIndex: number, hostView: LViewData): LViewData;\nexport declare function isContentQueryHost(tNode: TNode): boolean;\nexport declare function isComponent(tNode: TNode): boolean;\nexport declare function isComponentDef<T>(def: DirectiveDef<T>): def is ComponentDef<T>;\nexport declare function isLContainer(value: RElement | RComment | LContainer | StylingContext): boolean;\nexport declare function isRootView(target: LViewData): boolean;\n/**\n * Retrieve the root view from any component by walking the parent `LViewData` until\n * reaching the root `LViewData`.\n *\n * @param component any component\n */\nexport declare function getRootView(target: LViewData | {}): LViewData;\nexport declare function getRootContext(viewOrComponent: LViewData | {}): RootContext;\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\nexport declare function readPatchedData(target: any): LViewData | LContext | null;\nexport declare function readPatchedLViewData(target: any): LViewData | null;\nexport declare function hasParentInjector(parentLocation: RelativeInjectorLocation): boolean;\nexport declare function getParentInjectorIndex(parentLocation: RelativeInjectorLocation): number;\nexport declare function getParentInjectorViewOffset(parentLocation: RelativeInjectorLocation): number;\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LViewData instance from which to start walking up the view tree\n * @returns The LViewData instance that contains the parent injector\n */\nexport declare function getParentInjectorView(location: RelativeInjectorLocation, startView: LViewData): LViewData;\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the TNode of the parent injector is found.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LViewData instance from which to start walking up the view tree\n * @param startTNode The TNode instance of the starting element\n * @returns The TNode of the parent injector\n */\nexport declare function getParentInjectorTNode(location: RelativeInjectorLocation, startView: LViewData, startTNode: TNode): TElementNode | TContainerNode | null;\nexport declare const defaultScheduler: any;\n/**\n * Equivalent to ES6 spread, add each item to an array.\n *\n * @param items The items to add\n * @param arr The array to which you want to add the items\n */\nexport declare function addAllToArray(items: any[], arr: any[]): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/view_engine_compatibility_prebound.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplateRef as ViewEngine_TemplateRef } from '../linker/template_ref';\nimport { TNode } from './interfaces/node';\nimport { LViewData } from './interfaces/view';\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n */\nexport declare function templateRefExtractor(tNode: TNode, currentView: LViewData): ViewEngine_TemplateRef<{}> | null;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/view_engine_compatibility.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef as ViewEngine_ChangeDetectorRef } from '../change_detection/change_detector_ref';\nimport { Injector } from '../di/injector';\nimport { ElementRef as ViewEngine_ElementRef } from '../linker/element_ref';\nimport { TemplateRef as ViewEngine_TemplateRef } from '../linker/template_ref';\nimport { ViewContainerRef as ViewEngine_ViewContainerRef } from '../linker/view_container_ref';\nimport { Renderer2 } from '../render/api';\nimport { TContainerNode, TElementContainerNode, TElementNode, TNode } from './interfaces/node';\nimport { LViewData } from './interfaces/view';\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @returns The ElementRef instance to use\n */\nexport declare function injectElementRef(ElementRefToken: typeof ViewEngine_ElementRef): ViewEngine_ElementRef;\n/**\n * Creates an ElementRef given a node.\n *\n * @param ElementRefToken The ElementRef type\n * @param tNode The node for which you'd like an ElementRef\n * @param view The view to which the node belongs\n * @returns The ElementRef instance to use\n */\nexport declare function createElementRef(ElementRefToken: typeof ViewEngine_ElementRef, tNode: TNode, view: LViewData): ViewEngine_ElementRef;\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\nexport declare function injectTemplateRef<T>(TemplateRefToken: typeof ViewEngine_TemplateRef, ElementRefToken: typeof ViewEngine_ElementRef): ViewEngine_TemplateRef<T> | null;\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param TemplateRefToken The TemplateRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a TemplateRef\n * @param hostView The view to which the node belongs\n * @returns The TemplateRef instance to use\n */\nexport declare function createTemplateRef<T>(TemplateRefToken: typeof ViewEngine_TemplateRef, ElementRefToken: typeof ViewEngine_ElementRef, hostTNode: TNode, hostView: LViewData): ViewEngine_TemplateRef<T> | null;\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @returns The ViewContainerRef instance to use\n */\nexport declare function injectViewContainerRef(ViewContainerRefToken: typeof ViewEngine_ViewContainerRef, ElementRefToken: typeof ViewEngine_ElementRef): ViewEngine_ViewContainerRef;\nexport declare class NodeInjector implements Injector {\n    private _tNode;\n    private _hostView;\n    constructor(_tNode: TElementNode | TContainerNode | TElementContainerNode, _hostView: LViewData);\n    get(token: any, notFoundValue?: any): any;\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param ViewContainerRefToken The ViewContainerRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a ViewContainerRef\n * @param hostView The view to which the node belongs\n * @returns The ViewContainerRef instance to use\n */\nexport declare function createContainerRef(ViewContainerRefToken: typeof ViewEngine_ViewContainerRef, ElementRefToken: typeof ViewEngine_ElementRef, hostTNode: TElementNode | TContainerNode | TElementContainerNode, hostView: LViewData): ViewEngine_ViewContainerRef;\n/** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\nexport declare function injectChangeDetectorRef(): ViewEngine_ChangeDetectorRef;\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param hostTNode The node that is requesting a ChangeDetectorRef\n * @param hostView The view to which the node belongs\n * @param context The context for this change detector ref\n * @returns The ChangeDetectorRef to use\n */\nexport declare function createViewRef(hostTNode: TNode, hostView: LViewData, context: any): ViewEngine_ChangeDetectorRef;\n/** Returns a Renderer2 (or throws when application was bootstrapped with Renderer3) */\nexport declare function injectRenderer2(): Renderer2;\n"
  },
  {
    "path": "node_modules/@angular/core/src/render3/view_ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef } from '../application_ref';\nimport { ChangeDetectorRef as viewEngine_ChangeDetectorRef } from '../change_detection/change_detector_ref';\nimport { ViewContainerRef as viewEngine_ViewContainerRef } from '../linker/view_container_ref';\nimport { EmbeddedViewRef as viewEngine_EmbeddedViewRef, InternalViewRef as viewEngine_InternalViewRef } from '../linker/view_ref';\nimport { LViewData } from './interfaces/view';\nexport interface viewEngine_ChangeDetectorRef_interface extends viewEngine_ChangeDetectorRef {\n}\nexport declare class ViewRef<T> implements viewEngine_EmbeddedViewRef<T>, viewEngine_InternalViewRef, viewEngine_ChangeDetectorRef_interface {\n    private _context;\n    private _componentIndex;\n    private _appRef;\n    private _viewContainerRef;\n    readonly rootNodes: any[];\n    constructor(_view: LViewData, _context: T | null, _componentIndex: number);\n    readonly context: T;\n    readonly destroyed: boolean;\n    destroy(): void;\n    onDestroy(callback: Function): void;\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     */\n    markForCheck(): void;\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     */\n    detach(): void;\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     */\n    reattach(): void;\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {@link ChangeDetectorRef#detach detach} for more information.\n     */\n    detectChanges(): void;\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     */\n    checkNoChanges(): void;\n    attachToViewContainerRef(vcRef: viewEngine_ViewContainerRef): void;\n    detachFromAppRef(): void;\n    attachToAppRef(appRef: ApplicationRef): void;\n    private _lookUpContext;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/sanitization/bypass.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\ndeclare const BRAND = \"__SANITIZER_TRUSTED_BRAND__\";\nexport declare const enum BypassType {\n    Url = \"Url\",\n    Html = \"Html\",\n    ResourceUrl = \"ResourceUrl\",\n    Script = \"Script\",\n    Style = \"Style\"\n}\n/**\n * A branded trusted string used with sanitization.\n *\n * See: {@link TrustedHtmlString}, {@link TrustedResourceUrlString}, {@link TrustedScriptString},\n * {@link TrustedStyleString}, {@link TrustedUrlString}\n */\nexport interface TrustedString extends String {\n    [BRAND]: BypassType;\n}\n/**\n * A branded trusted string used with sanitization of `html` strings.\n *\n * See: {@link bypassSanitizationTrustHtml} and {@link htmlSanitizer}.\n */\nexport interface TrustedHtmlString extends TrustedString {\n    [BRAND]: BypassType.Html;\n}\n/**\n * A branded trusted string used with sanitization of `style` strings.\n *\n * See: {@link bypassSanitizationTrustStyle} and {@link styleSanitizer}.\n */\nexport interface TrustedStyleString extends TrustedString {\n    [BRAND]: BypassType.Style;\n}\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {@link bypassSanitizationTrustScript} and {@link scriptSanitizer}.\n */\nexport interface TrustedScriptString extends TrustedString {\n    [BRAND]: BypassType.Script;\n}\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {@link bypassSanitizationTrustUrl} and {@link urlSanitizer}.\n */\nexport interface TrustedUrlString extends TrustedString {\n    [BRAND]: BypassType.Url;\n}\n/**\n * A branded trusted string used with sanitization of `resourceUrl` strings.\n *\n * See: {@link bypassSanitizationTrustResourceUrl} and {@link resourceUrlSanitizer}.\n */\nexport interface TrustedResourceUrlString extends TrustedString {\n    [BRAND]: BypassType.ResourceUrl;\n}\nexport declare function allowSanitizationBypass(value: any, type: BypassType): boolean;\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n *\n * @param trustedHtml `html` string which needs to be implicitly trusted.\n * @returns a `html` `String` which has been branded to be implicitly trusted.\n */\nexport declare function bypassSanitizationTrustHtml(trustedHtml: string): TrustedHtmlString;\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\n *\n * @param trustedStyle `style` string which needs to be implicitly trusted.\n * @returns a `style` `String` which has been branded to be implicitly trusted.\n */\nexport declare function bypassSanitizationTrustStyle(trustedStyle: string): TrustedStyleString;\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n *\n * @param trustedScript `script` string which needs to be implicitly trusted.\n * @returns a `script` `String` which has been branded to be implicitly trusted.\n */\nexport declare function bypassSanitizationTrustScript(trustedScript: string): TrustedScriptString;\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\n *\n * @param trustedUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` `String` which has been branded to be implicitly trusted.\n */\nexport declare function bypassSanitizationTrustUrl(trustedUrl: string): TrustedUrlString;\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` `String` which has been branded to be implicitly trusted.\n */\nexport declare function bypassSanitizationTrustResourceUrl(trustedResourceUrl: string): TrustedResourceUrlString;\nexport {};\n"
  },
  {
    "path": "node_modules/@angular/core/src/sanitization/html_sanitizer.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare const VALID_ELEMENTS: {\n    [k: string]: boolean;\n};\nexport declare const URI_ATTRS: {\n    [k: string]: boolean;\n};\nexport declare const SRCSET_ATTRS: {\n    [k: string]: boolean;\n};\nexport declare const VALID_ATTRS: {\n    [k: string]: boolean;\n};\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nexport declare function _sanitizeHtml(defaultDoc: any, unsafeHtmlInput: string): string;\nexport declare function getTemplateContent(el: Node): Node | null;\n"
  },
  {
    "path": "node_modules/@angular/core/src/sanitization/inert_body.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nexport declare class InertBodyHelper {\n    private defaultDoc;\n    private inertBodyElement;\n    private inertDocument;\n    constructor(defaultDoc: Document);\n    /**\n     * Get an inert DOM element containing DOM created from the dirty HTML string provided.\n     * The implementation of this is determined in the constructor, when the class is instantiated.\n     */\n    getInertBodyElement: (html: string) => HTMLElement | null;\n    /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     */\n    private getInertBodyElement_XHR;\n    /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     */\n    private getInertBodyElement_DOMParser;\n    /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     */\n    private getInertBodyElement_InertDocument;\n    /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     */\n    private stripCustomNsAttrs;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/sanitization/sanitization.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StyleSanitizeFn } from './style_sanitizer';\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted `html`, typically from the user.\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n */\nexport declare function sanitizeHtml(unsafeHtml: any): string;\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `style` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted `style`, typically from the user.\n * @returns `style` string which is safe to bind to the `style` properties, because all of the\n * dangerous javascript and urls have been removed.\n */\nexport declare function sanitizeStyle(unsafeStyle: any): string;\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n */\nexport declare function sanitizeUrl(unsafeUrl: any): string;\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n */\nexport declare function sanitizeResourceUrl(unsafeResourceUrl: any): string;\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {@link bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted `script`, typically from the user.\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts`s have been allowed to pass.\n */\nexport declare function sanitizeScript(unsafeScript: any): string;\n/**\n * The default style sanitizer will handle sanitization for style properties by\n * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n */\nexport declare const defaultStyleSanitizer: StyleSanitizeFn;\n"
  },
  {
    "path": "node_modules/@angular/core/src/sanitization/security.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\nexport declare enum SecurityContext {\n    NONE = 0,\n    HTML = 1,\n    STYLE = 2,\n    SCRIPT = 3,\n    URL = 4,\n    RESOURCE_URL = 5\n}\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\nexport declare abstract class Sanitizer {\n    abstract sanitize(context: SecurityContext, value: {} | string | null): string | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/sanitization/style_sanitizer.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n */\nexport declare function _sanitizeStyle(value: string): string;\n/**\n * Used to intercept and sanitize style values before they are written to the renderer.\n *\n * This function is designed to be called in two modes. When a value is not provided\n * then the function will return a boolean whether a property will be sanitized later.\n * If a value is provided then the sanitized version of that will be returned.\n */\nexport interface StyleSanitizeFn {\n    /** This mode is designed to instruct whether the property will be used for sanitization\n     * at a later point */\n    (prop: string): boolean;\n    /** This mode is designed to sanitize the provided value */\n    (prop: string, value: string): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/sanitization/url_sanitizer.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare function _sanitizeUrl(url: string): string;\nexport declare function sanitizeSrcset(srcset: string): string;\n"
  },
  {
    "path": "node_modules/@angular/core/src/testability/testability.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgZone } from '../zone/ng_zone';\n/**\n * Testability API.\n * `declare` keyword causes tsickle to generate externs, so these methods are\n * not renamed by Closure Compiler.\n * @publicApi\n */\nexport declare interface PublicTestability {\n    isStable(): boolean;\n    whenStable(callback: Function, timeout?: number, updateCallback?: Function): void;\n    findProviders(using: any, provider: string, exactMatch: boolean): any[];\n}\nexport interface PendingMacrotask {\n    source: string;\n    creationLocation: Error;\n    runCount?: number;\n    data: TaskData;\n}\nexport interface TaskData {\n    target?: XMLHttpRequest;\n    delay?: number;\n    isPeriodic?: boolean;\n}\nexport declare type DoneCallback = (didWork: boolean, tasks?: PendingMacrotask[]) => void;\nexport declare type UpdateCallback = (tasks: PendingMacrotask[]) => boolean;\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * @publicApi\n */\nexport declare class Testability implements PublicTestability {\n    private _ngZone;\n    private _pendingCount;\n    private _isZoneStable;\n    private _callbacks;\n    private taskTrackingZone;\n    constructor(_ngZone: NgZone);\n    private _watchAngularEvents;\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     */\n    increasePendingRequestCount(): number;\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     */\n    decreasePendingRequestCount(): number;\n    /**\n     * Whether an associated application is stable\n     */\n    isStable(): boolean;\n    private _runCallbacksIfReady;\n    private getPendingTasks;\n    private addCallback;\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     */\n    whenStable(doneCb: Function, timeout?: number, updateCb?: Function): void;\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     */\n    getPendingRequestCount(): number;\n    /**\n     * Find providers by name\n     * @param using The root element to search from\n     * @param provider The name of binding variable\n     * @param exactMatch Whether using exactMatch\n     */\n    findProviders(using: any, provider: string, exactMatch: boolean): any[];\n}\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @publicApi\n */\nexport declare class TestabilityRegistry {\n    constructor();\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param token token of application, root element\n     * @param testability Testability hook\n     */\n    registerApplication(token: any, testability: Testability): void;\n    /**\n     * Unregisters an application.\n     * @param token token of application, root element\n     */\n    unregisterApplication(token: any): void;\n    /**\n     * Unregisters all applications\n     */\n    unregisterAllApplications(): void;\n    /**\n     * Get a testability hook associated with the application\n     * @param elem root element\n     */\n    getTestability(elem: any): Testability | null;\n    /**\n     * Get all registered testabilities\n     */\n    getAllTestabilities(): Testability[];\n    /**\n     * Get all registered applications(root elements)\n     */\n    getAllRootElements(): any[];\n    /**\n     * Find testability of a node in the Tree\n     * @param elem node\n     * @param findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     */\n    findTestabilityInTree(elem: Node, findInAncestors?: boolean): Testability | null;\n}\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * @publicApi\n */\nexport interface GetTestability {\n    addToWindow(registry: TestabilityRegistry): void;\n    findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean): Testability | null;\n}\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @publicApi\n */\nexport declare function setTestabilityGetter(getter: GetTestability): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/type.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nexport declare const Type: FunctionConstructor;\nexport declare function isType(v: any): v is Type<any>;\nexport interface Type<T> extends Function {\n    new (...args: any[]): T;\n}\nexport declare type Mutable<T extends {\n    [x: string]: any;\n}, K extends string> = {\n    [P in K]: T[P];\n};\n"
  },
  {
    "path": "node_modules/@angular/core/src/util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\ndeclare const _global: {\n    [name: string]: any;\n};\n/**\n * Attention: whenever providing a new value, be sure to add an\n * entry into the corresponding `....externs.js` file,\n * so that closure won't use that global for its purposes.\n */\nexport { _global as global };\nexport declare function getSymbolIterator(): string | symbol;\nexport declare function scheduleMicroTask(fn: Function): void;\nexport declare function looseIdentical(a: any, b: any): boolean;\nexport declare function stringify(token: any): string;\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nexport declare function noSideEffects(fn: () => void): string;\n"
  },
  {
    "path": "node_modules/@angular/core/src/util/decorators.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '../type';\n/**\n * An interface implemented by all Angular type decorators, which allows them to be used as ES7\n * decorators as well as\n * Angular DSL syntax.\n *\n * ES7 syntax:\n *\n * ```\n * @ng.Component({...})\n * class MyClass {...}\n * ```\n *\n * @publicApi\n */\nexport interface TypeDecorator {\n    /**\n     * Invoke as ES7 decorator.\n     */\n    <T extends Type<any>>(type: T): T;\n    (target: Object, propertyKey?: string | symbol, parameterIndex?: number): void;\n}\nexport declare const ANNOTATIONS = \"__annotations__\";\nexport declare const PARAMETERS = \"__parameters__\";\nexport declare const PROP_METADATA = \"__prop__metadata__\";\n/**\n * @suppress {globalThis}\n */\nexport declare function makeDecorator<T>(name: string, props?: (...args: any[]) => any, parentClass?: any, additionalProcessing?: (type: Type<T>) => void, typeFn?: (type: Type<T>, ...args: any[]) => void): {\n    new (...args: any[]): any;\n    (...args: any[]): any;\n    (...args: any[]): (cls: any) => any;\n};\nexport declare function makeParamDecorator(name: string, props?: (...args: any[]) => any, parentClass?: any): any;\nexport declare function makePropDecorator(name: string, props?: (...args: any[]) => any, parentClass?: any, additionalProcessing?: (target: any, name: string, ...args: any[]) => void): any;\n"
  },
  {
    "path": "node_modules/@angular/core/src/util/lang.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\n/**\n * Determine if the argument is shaped like a Promise\n */\nexport declare function isPromise(obj: any): obj is Promise<any>;\n/**\n * Determine if the argument is an Observable\n */\nexport declare function isObservable(obj: any | Observable<any>): obj is Observable<any>;\n"
  },
  {
    "path": "node_modules/@angular/core/src/util/noop.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare function noop(...args: any[]): any;\n"
  },
  {
    "path": "node_modules/@angular/core/src/util/property.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare function getClosureSafeProperty<T>(objWithPropertyToExtract: T): string;\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nexport declare function fillProperties(target: {\n    [key: string]: string;\n}, source: {\n    [key: string]: string;\n}): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/version.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description Represents the version of Angular\n *\n * @publicApi\n */\nexport declare class Version {\n    full: string;\n    readonly major: string;\n    readonly minor: string;\n    readonly patch: string;\n    constructor(full: string);\n}\n/**\n * @publicApi\n */\nexport declare const VERSION: Version;\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/element.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { RendererType2 } from '../render/api';\nimport { SecurityContext } from '../sanitization/security';\nimport { BindingFlags, ElementData, ElementHandleEventFn, NodeDef, NodeFlags, QueryValueType, ViewData, ViewDefinitionFactory } from './types';\nexport declare function anchorDef(flags: NodeFlags, matchedQueriesDsl: null | [string | number, QueryValueType][], ngContentIndex: null | number, childCount: number, handleEvent?: null | ElementHandleEventFn, templateFactory?: ViewDefinitionFactory): NodeDef;\nexport declare function elementDef(checkIndex: number, flags: NodeFlags, matchedQueriesDsl: null | [string | number, QueryValueType][], ngContentIndex: null | number, childCount: number, namespaceAndName: string | null, fixedAttrs?: null | [string, string][], bindings?: null | [BindingFlags, string, string | SecurityContext | null][], outputs?: null | ([string, string])[], handleEvent?: null | ElementHandleEventFn, componentView?: null | ViewDefinitionFactory, componentRendererType?: RendererType2 | null): NodeDef;\nexport declare function createElement(view: ViewData, renderHost: any, def: NodeDef): ElementData;\nexport declare function listenToElementOutputs(view: ViewData, compView: ViewData, def: NodeDef, el: any): void;\nexport declare function checkAndUpdateElementInline(view: ViewData, def: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any, v9: any): boolean;\nexport declare function checkAndUpdateElementDynamic(view: ViewData, def: NodeDef, values: any[]): boolean;\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/entrypoint.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentFactory } from '../linker/component_factory';\nimport { NgModuleFactory } from '../linker/ng_module_factory';\nimport { Type } from '../type';\nimport { NgModuleDefinitionFactory, ProviderOverride } from './types';\nexport declare function overrideProvider(override: ProviderOverride): void;\nexport declare function overrideComponentView(comp: Type<any>, componentFactory: ComponentFactory<any>): void;\nexport declare function clearOverrides(): void;\nexport declare function createNgModuleFactory(ngModuleType: Type<any>, bootstrapComponents: Type<any>[], defFactory: NgModuleDefinitionFactory): NgModuleFactory<any>;\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DebugContext } from './types';\nexport declare function expressionChangedAfterItHasBeenCheckedError(context: DebugContext, oldValue: any, currValue: any, isFirstCheck: boolean): Error;\nexport declare function viewWrappedDebugError(err: any, context: DebugContext): Error;\nexport declare function viewDebugError(msg: string, context: DebugContext): Error;\nexport declare function isViewDebugError(err: Error): boolean;\nexport declare function viewDestroyedError(action: string): Error;\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { anchorDef, elementDef } from './element';\nexport { clearOverrides, createNgModuleFactory, overrideComponentView, overrideProvider } from './entrypoint';\nexport { ngContentDef } from './ng_content';\nexport { moduleDef, moduleProvideDef } from './ng_module';\nexport { directiveDef, pipeDef, providerDef } from './provider';\nexport { pureArrayDef, pureObjectDef, purePipeDef } from './pure_expression';\nexport { queryDef } from './query';\nexport { ViewRef_, createComponentFactory, getComponentViewDefinitionFactory, nodeValue } from './refs';\nexport { initServicesIfNeeded } from './services';\nexport { textDef } from './text';\nexport { EMPTY_ARRAY, EMPTY_MAP, createRendererType2, elementEventFullName, inlineInterpolate, interpolate, rootRenderNodes, tokenKey, unwrapValue } from './util';\nexport { viewDef } from './view';\nexport { attachEmbeddedView, detachEmbeddedView, moveEmbeddedView } from './view_attach';\nexport * from './types';\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/ng_content.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NodeDef, ViewData } from './types';\nexport declare function ngContentDef(ngContentIndex: null | number, index: number): NodeDef;\nexport declare function appendNgContent(view: ViewData, renderHost: any, def: NodeDef): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/ng_module.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DepDef, DepFlags, NgModuleData, NgModuleDefinition, NgModuleProviderDef, NodeFlags } from './types';\nexport declare function moduleProvideDef(flags: NodeFlags, token: any, value: any, deps: ([DepFlags, any] | any)[]): NgModuleProviderDef;\nexport declare function moduleDef(providers: NgModuleProviderDef[]): NgModuleDefinition;\nexport declare function initNgModule(data: NgModuleData): void;\nexport declare function resolveNgModuleDep(data: NgModuleData, depDef: DepDef, notFoundValue?: any): any;\nexport declare function callNgModuleLifecycle(ngModule: NgModuleData, lifecycles: NodeFlags): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/provider.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { BindingDef, DepDef, DepFlags, NodeDef, NodeFlags, OutputDef, QueryValueType, ViewData } from './types';\nexport declare function directiveDef(checkIndex: number, flags: NodeFlags, matchedQueries: null | [string | number, QueryValueType][], childCount: number, ctor: any, deps: ([DepFlags, any] | any)[], props?: null | {\n    [name: string]: [number, string];\n}, outputs?: null | {\n    [name: string]: string;\n}): NodeDef;\nexport declare function pipeDef(flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef;\nexport declare function providerDef(flags: NodeFlags, matchedQueries: null | [string | number, QueryValueType][], token: any, value: any, deps: ([DepFlags, any] | any)[]): NodeDef;\nexport declare function _def(checkIndex: number, flags: NodeFlags, matchedQueriesDsl: [string | number, QueryValueType][] | null, childCount: number, token: any, value: any, deps: ([DepFlags, any] | any)[], bindings?: BindingDef[], outputs?: OutputDef[]): NodeDef;\nexport declare function createProviderInstance(view: ViewData, def: NodeDef): any;\nexport declare function createPipeInstance(view: ViewData, def: NodeDef): any;\nexport declare function createDirectiveInstance(view: ViewData, def: NodeDef): any;\nexport declare function checkAndUpdateDirectiveInline(view: ViewData, def: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any, v9: any): boolean;\nexport declare function checkAndUpdateDirectiveDynamic(view: ViewData, def: NodeDef, values: any[]): boolean;\nexport declare const NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR: {};\nexport declare function resolveDep(view: ViewData, elDef: NodeDef, allowPrivateServices: boolean, depDef: DepDef, notFoundValue?: any): any;\nexport declare function callLifecycleHooksChildrenFirst(view: ViewData, lifecycles: NodeFlags): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/pure_expression.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NodeDef, PureExpressionData, ViewData } from './types';\nexport declare function purePipeDef(checkIndex: number, argCount: number): NodeDef;\nexport declare function pureArrayDef(checkIndex: number, argCount: number): NodeDef;\nexport declare function pureObjectDef(checkIndex: number, propToIndex: {\n    [p: string]: number;\n}): NodeDef;\nexport declare function createPureExpression(view: ViewData, def: NodeDef): PureExpressionData;\nexport declare function checkAndUpdatePureExpressionInline(view: ViewData, def: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any, v9: any): boolean;\nexport declare function checkAndUpdatePureExpressionDynamic(view: ViewData, def: NodeDef, values: any[]): boolean;\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/query.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { QueryList } from '../linker/query_list';\nimport { NodeDef, NodeFlags, QueryBindingType, QueryValueType, ViewData } from './types';\nexport declare function queryDef(flags: NodeFlags, id: number, bindings: {\n    [propName: string]: QueryBindingType;\n}): NodeDef;\nexport declare function createQuery(): QueryList<any>;\nexport declare function dirtyParentQueries(view: ViewData): void;\nexport declare function checkAndUpdateQuery(view: ViewData, nodeDef: NodeDef): void;\nexport declare function getQueryValue(view: ViewData, nodeDef: NodeDef, queryValueType: QueryValueType): any;\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/refs.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef } from '../application_ref';\nimport { ChangeDetectorRef } from '../change_detection/change_detection';\nimport { Injector } from '../di/injector';\nimport { ComponentFactory } from '../linker/component_factory';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { ViewContainerRef } from '../linker/view_container_ref';\nimport { EmbeddedViewRef, InternalViewRef } from '../linker/view_ref';\nimport { Renderer as RendererV1 } from '../render/api';\nimport { Type } from '../type';\nimport { ElementData, NgModuleDefinition, NodeDef, TemplateData, ViewContainerData, ViewData, ViewDefinitionFactory } from './types';\nexport declare function createComponentFactory(selector: string, componentType: Type<any>, viewDefFactory: ViewDefinitionFactory, inputs: {\n    [propName: string]: string;\n} | null, outputs: {\n    [propName: string]: string;\n}, ngContentSelectors: string[]): ComponentFactory<any>;\nexport declare function getComponentViewDefinitionFactory(componentFactory: ComponentFactory<any>): ViewDefinitionFactory;\nexport declare function createViewContainerData(view: ViewData, elDef: NodeDef, elData: ElementData): ViewContainerData;\nexport declare function createChangeDetectorRef(view: ViewData): ChangeDetectorRef;\nexport declare class ViewRef_ implements EmbeddedViewRef<any>, InternalViewRef {\n    private _viewContainerRef;\n    private _appRef;\n    constructor(_view: ViewData);\n    readonly rootNodes: any[];\n    readonly context: any;\n    readonly destroyed: boolean;\n    markForCheck(): void;\n    detach(): void;\n    detectChanges(): void;\n    checkNoChanges(): void;\n    reattach(): void;\n    onDestroy(callback: Function): void;\n    destroy(): void;\n    detachFromAppRef(): void;\n    attachToAppRef(appRef: ApplicationRef): void;\n    attachToViewContainerRef(vcRef: ViewContainerRef): void;\n}\nexport declare function createTemplateData(view: ViewData, def: NodeDef): TemplateData;\nexport declare function createInjector(view: ViewData, elDef: NodeDef): Injector;\nexport declare function nodeValue(view: ViewData, index: number): any;\nexport declare function createRendererV1(view: ViewData): RendererV1;\nexport declare function createNgModuleRef(moduleType: Type<any>, parent: Injector, bootstrapComponents: Type<any>[], def: NgModuleDefinition): NgModuleRef<any>;\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/services.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2 } from '../render/api';\nimport { DebugContext } from './types';\nexport declare function initServicesIfNeeded(): void;\nexport declare function getCurrentDebugContext(): DebugContext | null;\nexport declare class DebugRendererFactory2 implements RendererFactory2 {\n    private delegate;\n    constructor(delegate: RendererFactory2);\n    createRenderer(element: any, renderData: RendererType2 | null): Renderer2;\n    begin(): void;\n    end(): void;\n    whenRenderingDone(): Promise<any>;\n}\nexport declare class DebugRenderer2 implements Renderer2 {\n    private delegate;\n    readonly data: {\n        [key: string]: any;\n    };\n    private createDebugContext;\n    /**\n     * Factory function used to create a `DebugContext` when a node is created.\n     *\n     * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n     *\n     * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n     * or a Render context.\n     */\n    debugContextFactory: (nativeElement?: any) => DebugContext | null;\n    constructor(delegate: Renderer2);\n    destroyNode(node: any): void;\n    destroy(): void;\n    createElement(name: string, namespace?: string): any;\n    createComment(value: string): any;\n    createText(value: string): any;\n    appendChild(parent: any, newChild: any): void;\n    insertBefore(parent: any, newChild: any, refChild: any): void;\n    removeChild(parent: any, oldChild: any): void;\n    selectRootElement(selectorOrNode: string | any, preserveContent?: boolean): any;\n    setAttribute(el: any, name: string, value: string, namespace?: string): void;\n    removeAttribute(el: any, name: string, namespace?: string): void;\n    addClass(el: any, name: string): void;\n    removeClass(el: any, name: string): void;\n    setStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void;\n    removeStyle(el: any, style: string, flags: RendererStyleFlags2): void;\n    setProperty(el: any, name: string, value: any): void;\n    listen(target: 'document' | 'windows' | 'body' | any, eventName: string, callback: (event: any) => boolean): () => void;\n    parentNode(node: any): any;\n    nextSibling(node: any): any;\n    setValue(node: any, value: string): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/text.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NodeDef, TextData, ViewData } from './types';\nexport declare function textDef(checkIndex: number, ngContentIndex: number | null, staticText: string[]): NodeDef;\nexport declare function createText(view: ViewData, renderHost: any, def: NodeDef): TextData;\nexport declare function checkAndUpdateTextInline(view: ViewData, def: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any, v9: any): boolean;\nexport declare function checkAndUpdateTextDynamic(view: ViewData, def: NodeDef, values: any[]): boolean;\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/types.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '../di';\nimport { ErrorHandler } from '../error_handler';\nimport { ComponentFactory } from '../linker/component_factory';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { QueryList } from '../linker/query_list';\nimport { TemplateRef } from '../linker/template_ref';\nimport { ViewContainerRef } from '../linker/view_container_ref';\nimport { Renderer2, RendererFactory2, RendererType2 } from '../render/api';\nimport { Sanitizer, SecurityContext } from '../sanitization/security';\nimport { Type } from '../type';\n/**\n * Factory for ViewDefinitions/NgModuleDefinitions.\n * We use a function so we can reexeute it in case an error happens and use the given logger\n * function to log the error from the definition of the node, which is shown in all browser\n * logs.\n */\nexport interface DefinitionFactory<D extends Definition<any>> {\n    (logger: NodeLogger): D;\n}\n/**\n * Function to call console.error at the right source location. This is an indirection\n * via another function as browser will log the location that actually called\n * `console.error`.\n */\nexport interface NodeLogger {\n    (): () => void;\n}\nexport interface Definition<DF extends DefinitionFactory<any>> {\n    factory: DF | null;\n}\nexport interface NgModuleDefinition extends Definition<NgModuleDefinitionFactory> {\n    providers: NgModuleProviderDef[];\n    providersByKey: {\n        [tokenKey: string]: NgModuleProviderDef;\n    };\n    modules: any[];\n    isRoot: boolean;\n}\nexport interface NgModuleDefinitionFactory extends DefinitionFactory<NgModuleDefinition> {\n}\nexport interface ViewDefinition extends Definition<ViewDefinitionFactory> {\n    flags: ViewFlags;\n    updateDirectives: ViewUpdateFn;\n    updateRenderer: ViewUpdateFn;\n    handleEvent: ViewHandleEventFn;\n    /**\n     * Order: Depth first.\n     * Especially providers are before elements / anchors.\n     */\n    nodes: NodeDef[];\n    /** aggregated NodeFlags for all nodes **/\n    nodeFlags: NodeFlags;\n    rootNodeFlags: NodeFlags;\n    lastRenderRootNode: NodeDef | null;\n    bindingCount: number;\n    outputCount: number;\n    /**\n     * Binary or of all query ids that are matched by one of the nodes.\n     * This includes query ids from templates as well.\n     * Used as a bloom filter.\n     */\n    nodeMatchedQueries: number;\n}\nexport interface ViewDefinitionFactory extends DefinitionFactory<ViewDefinition> {\n}\nexport interface ViewUpdateFn {\n    (check: NodeCheckFn, view: ViewData): void;\n}\nexport interface NodeCheckFn {\n    (view: ViewData, nodeIndex: number, argStyle: ArgumentType.Dynamic, values: any[]): any;\n    (view: ViewData, nodeIndex: number, argStyle: ArgumentType.Inline, v0?: any, v1?: any, v2?: any, v3?: any, v4?: any, v5?: any, v6?: any, v7?: any, v8?: any, v9?: any): any;\n}\nexport declare const enum ArgumentType {\n    Inline = 0,\n    Dynamic = 1\n}\nexport interface ViewHandleEventFn {\n    (view: ViewData, nodeIndex: number, eventName: string, event: any): boolean;\n}\n/**\n * Bitmask for ViewDefinition.flags.\n */\nexport declare const enum ViewFlags {\n    None = 0,\n    OnPush = 2\n}\n/**\n * A node definition in the view.\n *\n * Note: We use one type for all nodes so that loops that loop over all nodes\n * of a ViewDefinition stay monomorphic!\n */\nexport interface NodeDef {\n    flags: NodeFlags;\n    nodeIndex: number;\n    checkIndex: number;\n    parent: NodeDef | null;\n    renderParent: NodeDef | null;\n    /** this is checked against NgContentDef.index to find matched nodes */\n    ngContentIndex: number | null;\n    /** number of transitive children */\n    childCount: number;\n    /** aggregated NodeFlags for all transitive children (does not include self) **/\n    childFlags: NodeFlags;\n    /** aggregated NodeFlags for all direct children (does not include self) **/\n    directChildFlags: NodeFlags;\n    bindingIndex: number;\n    bindings: BindingDef[];\n    bindingFlags: BindingFlags;\n    outputIndex: number;\n    outputs: OutputDef[];\n    /**\n     * references that the user placed on the element\n     */\n    references: {\n        [refId: string]: QueryValueType;\n    };\n    /**\n     * ids and value types of all queries that are matched by this node.\n     */\n    matchedQueries: {\n        [queryId: number]: QueryValueType;\n    };\n    /** Binary or of all matched query ids of this node. */\n    matchedQueryIds: number;\n    /**\n     * Binary or of all query ids that are matched by one of the children.\n     * This includes query ids from templates as well.\n     * Used as a bloom filter.\n     */\n    childMatchedQueries: number;\n    element: ElementDef | null;\n    provider: ProviderDef | null;\n    text: TextDef | null;\n    query: QueryDef | null;\n    ngContent: NgContentDef | null;\n}\n/**\n * Bitmask for NodeDef.flags.\n * Naming convention:\n * - `Type...`: flags that are mutually exclusive\n * - `Cat...`: union of multiple `Type...` (short for category).\n */\nexport declare const enum NodeFlags {\n    None = 0,\n    TypeElement = 1,\n    TypeText = 2,\n    ProjectedTemplate = 4,\n    CatRenderNode = 3,\n    TypeNgContent = 8,\n    TypePipe = 16,\n    TypePureArray = 32,\n    TypePureObject = 64,\n    TypePurePipe = 128,\n    CatPureExpression = 224,\n    TypeValueProvider = 256,\n    TypeClassProvider = 512,\n    TypeFactoryProvider = 1024,\n    TypeUseExistingProvider = 2048,\n    LazyProvider = 4096,\n    PrivateProvider = 8192,\n    TypeDirective = 16384,\n    Component = 32768,\n    CatProviderNoDirective = 3840,\n    CatProvider = 20224,\n    OnInit = 65536,\n    OnDestroy = 131072,\n    DoCheck = 262144,\n    OnChanges = 524288,\n    AfterContentInit = 1048576,\n    AfterContentChecked = 2097152,\n    AfterViewInit = 4194304,\n    AfterViewChecked = 8388608,\n    EmbeddedViews = 16777216,\n    ComponentView = 33554432,\n    TypeContentQuery = 67108864,\n    TypeViewQuery = 134217728,\n    StaticQuery = 268435456,\n    DynamicQuery = 536870912,\n    TypeNgModule = 1073741824,\n    CatQuery = 201326592,\n    Types = 201347067\n}\nexport interface BindingDef {\n    flags: BindingFlags;\n    ns: string | null;\n    name: string | null;\n    nonMinifiedName: string | null;\n    securityContext: SecurityContext | null;\n    suffix: string | null;\n}\nexport declare const enum BindingFlags {\n    TypeElementAttribute = 1,\n    TypeElementClass = 2,\n    TypeElementStyle = 4,\n    TypeProperty = 8,\n    SyntheticProperty = 16,\n    SyntheticHostProperty = 32,\n    CatSyntheticProperty = 48,\n    Types = 15\n}\nexport interface OutputDef {\n    type: OutputType;\n    target: 'window' | 'document' | 'body' | 'component' | null;\n    eventName: string;\n    propName: string | null;\n}\nexport declare const enum OutputType {\n    ElementOutput = 0,\n    DirectiveOutput = 1\n}\nexport declare const enum QueryValueType {\n    ElementRef = 0,\n    RenderElement = 1,\n    TemplateRef = 2,\n    ViewContainerRef = 3,\n    Provider = 4\n}\nexport interface ElementDef {\n    name: string | null;\n    ns: string | null;\n    /** ns, name, value */\n    attrs: [string, string, string][] | null;\n    template: ViewDefinition | null;\n    componentProvider: NodeDef | null;\n    componentRendererType: RendererType2 | null;\n    componentView: ViewDefinitionFactory | null;\n    /**\n     * visible public providers for DI in the view,\n     * as see from this element. This does not include private providers.\n     */\n    publicProviders: {\n        [tokenKey: string]: NodeDef;\n    } | null;\n    /**\n     * same as visiblePublicProviders, but also includes private providers\n     * that are located on this element.\n     */\n    allProviders: {\n        [tokenKey: string]: NodeDef;\n    } | null;\n    handleEvent: ElementHandleEventFn | null;\n}\nexport interface ElementHandleEventFn {\n    (view: ViewData, eventName: string, event: any): boolean;\n}\nexport interface ProviderDef {\n    token: any;\n    value: any;\n    deps: DepDef[];\n}\nexport interface NgModuleProviderDef {\n    flags: NodeFlags;\n    index: number;\n    token: any;\n    value: any;\n    deps: DepDef[];\n}\nexport interface DepDef {\n    flags: DepFlags;\n    token: any;\n    tokenKey: string;\n}\n/**\n * Bitmask for DI flags\n */\nexport declare const enum DepFlags {\n    None = 0,\n    SkipSelf = 1,\n    Optional = 2,\n    Self = 4,\n    Value = 8\n}\nexport interface TextDef {\n    prefix: string;\n}\nexport interface QueryDef {\n    id: number;\n    filterId: number;\n    bindings: QueryBindingDef[];\n}\nexport interface QueryBindingDef {\n    propName: string;\n    bindingType: QueryBindingType;\n}\nexport declare const enum QueryBindingType {\n    First = 0,\n    All = 1\n}\nexport interface NgContentDef {\n    /**\n     * this index is checked against NodeDef.ngContentIndex to find the nodes\n     * that are matched by this ng-content.\n     * Note that a NodeDef with an ng-content can be reprojected, i.e.\n     * have a ngContentIndex on its own.\n     */\n    index: number;\n}\nexport interface NgModuleData extends Injector, NgModuleRef<any> {\n    _def: NgModuleDefinition;\n    _parent: Injector;\n    _providers: any[];\n}\n/**\n * View instance data.\n * Attention: Adding fields to this is performance sensitive!\n */\nexport interface ViewData {\n    def: ViewDefinition;\n    root: RootData;\n    renderer: Renderer2;\n    parentNodeDef: NodeDef | null;\n    parent: ViewData | null;\n    viewContainerParent: ViewData | null;\n    component: any;\n    context: any;\n    nodes: {\n        [key: number]: NodeData;\n    };\n    state: ViewState;\n    oldValues: any[];\n    disposables: DisposableFn[] | null;\n    initIndex: number;\n}\n/**\n * Bitmask of states\n */\nexport declare const enum ViewState {\n    BeforeFirstCheck = 1,\n    FirstCheck = 2,\n    Attached = 4,\n    ChecksEnabled = 8,\n    IsProjectedView = 16,\n    CheckProjectedView = 32,\n    CheckProjectedViews = 64,\n    Destroyed = 128,\n    InitState_Mask = 1792,\n    InitState_BeforeInit = 0,\n    InitState_CallingOnInit = 256,\n    InitState_CallingAfterContentInit = 512,\n    InitState_CallingAfterViewInit = 768,\n    InitState_AfterInit = 1024,\n    CatDetectChanges = 12,\n    CatInit = 13\n}\nexport declare function shiftInitState(view: ViewData, priorInitState: ViewState, newInitState: ViewState): boolean;\nexport declare function shouldCallLifecycleInitHook(view: ViewData, initState: ViewState, index: number): boolean;\nexport interface DisposableFn {\n    (): void;\n}\n/**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nexport declare class NodeData {\n    private __brand;\n}\n/**\n * Data for an instantiated NodeType.Text.\n *\n * Attention: Adding fields to this is performance sensitive!\n */\nexport interface TextData {\n    renderText: any;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nexport declare function asTextData(view: ViewData, index: number): TextData;\n/**\n * Data for an instantiated NodeType.Element.\n *\n * Attention: Adding fields to this is performance sensitive!\n */\nexport interface ElementData {\n    renderElement: any;\n    componentView: ViewData;\n    viewContainer: ViewContainerData | null;\n    template: TemplateData;\n}\nexport interface ViewContainerData extends ViewContainerRef {\n    _embeddedViews: ViewData[];\n}\nexport interface TemplateData extends TemplateRef<any> {\n    _projectedViews: ViewData[];\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nexport declare function asElementData(view: ViewData, index: number): ElementData;\n/**\n * Data for an instantiated NodeType.Provider.\n *\n * Attention: Adding fields to this is performance sensitive!\n */\nexport interface ProviderData {\n    instance: any;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nexport declare function asProviderData(view: ViewData, index: number): ProviderData;\n/**\n * Data for an instantiated NodeType.PureExpression.\n *\n * Attention: Adding fields to this is performance sensitive!\n */\nexport interface PureExpressionData {\n    value: any;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nexport declare function asPureExpressionData(view: ViewData, index: number): PureExpressionData;\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nexport declare function asQueryList(view: ViewData, index: number): QueryList<any>;\nexport interface RootData {\n    injector: Injector;\n    ngModule: NgModuleRef<any>;\n    projectableNodes: any[][];\n    selectorOrNode: any;\n    renderer: Renderer2;\n    rendererFactory: RendererFactory2;\n    errorHandler: ErrorHandler;\n    sanitizer: Sanitizer;\n}\nexport declare abstract class DebugContext {\n    abstract readonly view: ViewData;\n    abstract readonly nodeIndex: number | null;\n    abstract readonly injector: Injector;\n    abstract readonly component: any;\n    abstract readonly providerTokens: any[];\n    abstract readonly references: {\n        [key: string]: any;\n    };\n    abstract readonly context: any;\n    abstract readonly componentRenderElement: any;\n    abstract readonly renderNode: any;\n    abstract logError(console: Console, ...values: any[]): void;\n}\nexport declare const enum CheckType {\n    CheckAndUpdate = 0,\n    CheckNoChanges = 1\n}\nexport interface ProviderOverride {\n    token: any;\n    flags: NodeFlags;\n    value: any;\n    deps: ([DepFlags, any] | any)[];\n    deprecatedBehavior: boolean;\n}\nexport interface Services {\n    setCurrentNode(view: ViewData, nodeIndex: number): void;\n    createRootView(injector: Injector, projectableNodes: any[][], rootSelectorOrNode: string | any, def: ViewDefinition, ngModule: NgModuleRef<any>, context?: any): ViewData;\n    createEmbeddedView(parent: ViewData, anchorDef: NodeDef, viewDef: ViewDefinition, context?: any): ViewData;\n    createComponentView(parentView: ViewData, nodeDef: NodeDef, viewDef: ViewDefinition, hostElement: any): ViewData;\n    createNgModuleRef(moduleType: Type<any>, parent: Injector, bootstrapComponents: Type<any>[], def: NgModuleDefinition): NgModuleRef<any>;\n    overrideProvider(override: ProviderOverride): void;\n    overrideComponentView(compType: Type<any>, compFactory: ComponentFactory<any>): void;\n    clearOverrides(): void;\n    checkAndUpdateView(view: ViewData): void;\n    checkNoChangesView(view: ViewData): void;\n    destroyView(view: ViewData): void;\n    resolveDep(view: ViewData, elDef: NodeDef | null, allowPrivateServices: boolean, depDef: DepDef, notFoundValue?: any): any;\n    createDebugContext(view: ViewData, nodeIndex: number): DebugContext;\n    handleEvent: ViewHandleEventFn;\n    updateDirectives: (view: ViewData, checkType: CheckType) => void;\n    updateRenderer: (view: ViewData, checkType: CheckType) => void;\n    dirtyParentQueries: (view: ViewData) => void;\n}\n/**\n * This object is used to prevent cycles in the source files and to have a place where\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n */\nexport declare const Services: Services;\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewEncapsulation } from '../metadata/view';\nimport { RendererType2 } from '../render/api';\nimport { BindingDef, BindingFlags, Definition, DefinitionFactory, DepDef, DepFlags, ElementData, NodeDef, QueryValueType, ViewData } from './types';\nexport declare const NOOP: any;\nexport declare function tokenKey(token: any): string;\nexport declare function unwrapValue(view: ViewData, nodeIdx: number, bindingIdx: number, value: any): any;\nexport declare function createRendererType2(values: {\n    styles: (string | any[])[];\n    encapsulation: ViewEncapsulation;\n    data: {\n        [kind: string]: any[];\n    };\n}): RendererType2;\nexport declare function resolveRendererType2(type?: RendererType2 | null): RendererType2 | null;\nexport declare function checkBinding(view: ViewData, def: NodeDef, bindingIdx: number, value: any): boolean;\nexport declare function checkAndUpdateBinding(view: ViewData, def: NodeDef, bindingIdx: number, value: any): boolean;\nexport declare function checkBindingNoChanges(view: ViewData, def: NodeDef, bindingIdx: number, value: any): void;\nexport declare function markParentViewsForCheck(view: ViewData): void;\nexport declare function markParentViewsForCheckProjectedViews(view: ViewData, endView: ViewData): void;\nexport declare function dispatchEvent(view: ViewData, nodeIndex: number, eventName: string, event: any): boolean | undefined;\nexport declare function declaredViewContainer(view: ViewData): ElementData | null;\n/**\n * for component views, this is the host element.\n * for embedded views, this is the index of the parent node\n * that contains the view container.\n */\nexport declare function viewParentEl(view: ViewData): NodeDef | null;\nexport declare function renderNode(view: ViewData, def: NodeDef): any;\nexport declare function elementEventFullName(target: string | null, name: string): string;\nexport declare function isComponentView(view: ViewData): boolean;\nexport declare function isEmbeddedView(view: ViewData): boolean;\nexport declare function filterQueryId(queryId: number): number;\nexport declare function splitMatchedQueriesDsl(matchedQueriesDsl: [string | number, QueryValueType][] | null): {\n    matchedQueries: {\n        [queryId: string]: QueryValueType;\n    };\n    references: {\n        [refId: string]: QueryValueType;\n    };\n    matchedQueryIds: number;\n};\nexport declare function splitDepsDsl(deps: ([DepFlags, any] | any)[], sourceName?: string): DepDef[];\nexport declare function getParentRenderElement(view: ViewData, renderHost: any, def: NodeDef): any;\nexport declare function resolveDefinition<D extends Definition<any>>(factory: DefinitionFactory<D>): D;\nexport declare function rootRenderNodes(view: ViewData): any[];\nexport declare const enum RenderNodeAction {\n    Collect = 0,\n    AppendChild = 1,\n    InsertBefore = 2,\n    RemoveChild = 3\n}\nexport declare function visitRootRenderNodes(view: ViewData, action: RenderNodeAction, parentNode: any, nextSibling: any, target?: any[]): void;\nexport declare function visitSiblingRenderNodes(view: ViewData, action: RenderNodeAction, startIndex: number, endIndex: number, parentNode: any, nextSibling: any, target?: any[]): void;\nexport declare function visitProjectedRenderNodes(view: ViewData, ngContentIndex: number, action: RenderNodeAction, parentNode: any, nextSibling: any, target?: any[]): void;\nexport declare function splitNamespace(name: string): string[];\nexport declare function calcBindingFlags(bindings: BindingDef[]): BindingFlags;\nexport declare function interpolate(valueCount: number, constAndInterp: string[]): string;\nexport declare function inlineInterpolate(valueCount: number, c0: string, a1: any, c1: string, a2?: any, c2?: string, a3?: any, c3?: string, a4?: any, c4?: string, a5?: any, c5?: string, a6?: any, c6?: string, a7?: any, c7?: string, a8?: any, c8?: string, a9?: any, c9?: string): string;\nexport declare const EMPTY_ARRAY: any[];\nexport declare const EMPTY_MAP: {\n    [key: string]: any;\n};\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/view_attach.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementData, ViewData } from './types';\nexport declare function attachEmbeddedView(parentView: ViewData, elementData: ElementData, viewIndex: number | undefined | null, view: ViewData): void;\nexport declare function detachEmbeddedView(elementData: ElementData, viewIndex?: number): ViewData | null;\nexport declare function detachProjectedView(view: ViewData): void;\nexport declare function moveEmbeddedView(elementData: ElementData, oldViewIndex: number, newViewIndex: number): ViewData;\nexport declare function renderDetachView(view: ViewData): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/view/view.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ArgumentType, NodeDef, RootData, ViewData, ViewDefinition, ViewFlags, ViewUpdateFn } from './types';\nexport declare function viewDef(flags: ViewFlags, nodes: NodeDef[], updateDirectives?: null | ViewUpdateFn, updateRenderer?: null | ViewUpdateFn): ViewDefinition;\nexport declare function createEmbeddedView(parent: ViewData, anchorDef: NodeDef, viewDef: ViewDefinition, context?: any): ViewData;\nexport declare function createRootView(root: RootData, def: ViewDefinition, context?: any): ViewData;\nexport declare function createComponentView(parentView: ViewData, nodeDef: NodeDef, viewDef: ViewDefinition, hostElement: any): ViewData;\nexport declare function checkNoChangesView(view: ViewData): void;\nexport declare function checkAndUpdateView(view: ViewData): void;\nexport declare function checkAndUpdateNode(view: ViewData, nodeDef: NodeDef, argStyle: ArgumentType, v0?: any, v1?: any, v2?: any, v3?: any, v4?: any, v5?: any, v6?: any, v7?: any, v8?: any, v9?: any): boolean;\nexport declare function checkNoChangesNode(view: ViewData, nodeDef: NodeDef, argStyle: ArgumentType, v0?: any, v1?: any, v2?: any, v3?: any, v4?: any, v5?: any, v6?: any, v7?: any, v8?: any, v9?: any): any;\nexport declare function destroyView(view: ViewData): void;\n"
  },
  {
    "path": "node_modules/@angular/core/src/zone.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { NgZone, NoopNgZone as ɵNoopNgZone } from './zone/ng_zone';\n"
  },
  {
    "path": "node_modules/@angular/core/src/zone/ng_zone.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '@angular/core';\n * import {NgIf} from '@angular/common';\n *\n * @Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport declare class NgZone {\n    readonly hasPendingMicrotasks: boolean;\n    readonly hasPendingMacrotasks: boolean;\n    /**\n     * Whether there are no outstanding microtasks or macrotasks.\n     */\n    readonly isStable: boolean;\n    /**\n     * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n     */\n    readonly onUnstable: EventEmitter<any>;\n    /**\n     * Notifies when there is no more microtasks enqueued in the current VM Turn.\n     * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n     * For this reason this event can fire multiple times per VM Turn.\n     */\n    readonly onMicrotaskEmpty: EventEmitter<any>;\n    /**\n     * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n     * implies we are about to relinquish VM turn.\n     * This event gets called just once.\n     */\n    readonly onStable: EventEmitter<any>;\n    /**\n     * Notifies that an error has been delivered.\n     */\n    readonly onError: EventEmitter<any>;\n    constructor({ enableLongStackTrace }: {\n        enableLongStackTrace?: boolean | undefined;\n    });\n    static isInAngularZone(): boolean;\n    static assertInAngularZone(): void;\n    static assertNotInAngularZone(): void;\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    run<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T;\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    runTask<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[], name?: string): T;\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     */\n    runGuarded<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T;\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n     */\n    runOutsideAngular<T>(fn: (...args: any[]) => T): T;\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nexport declare class NoopNgZone implements NgZone {\n    readonly hasPendingMicrotasks: boolean;\n    readonly hasPendingMacrotasks: boolean;\n    readonly isStable: boolean;\n    readonly onUnstable: EventEmitter<any>;\n    readonly onMicrotaskEmpty: EventEmitter<any>;\n    readonly onStable: EventEmitter<any>;\n    readonly onError: EventEmitter<any>;\n    run(fn: () => any): any;\n    runGuarded(fn: () => any): any;\n    runOutsideAngular(fn: () => any): any;\n    runTask<T>(fn: () => any): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/testing.d.ts",
    "content": "\n  export * from './testing/testing';\n  "
  },
  {
    "path": "node_modules/@angular/core/testing/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/core/testing/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/async_fallback.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n *\n */\nexport declare function asyncFallback(fn: Function): (done: any) => any;\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/async_test_completer.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n */\nexport declare class AsyncTestCompleter {\n    private _resolve;\n    private _reject;\n    private _promise;\n    done(value?: any): void;\n    fail(error?: any, stackTrace?: string): void;\n    readonly promise: Promise<any>;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/async.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n * @publicApi\n */\nexport declare function async(fn: Function): (done: any) => any;\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/before_each.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare const __core_private_testing_placeholder__ = \"\";\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/component_fixture.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, ComponentRef, DebugElement, ElementRef, NgZone } from '@angular/core';\n/**\n * Fixture for debugging and testing a component.\n *\n * @publicApi\n */\nexport declare class ComponentFixture<T> {\n    componentRef: ComponentRef<T>;\n    ngZone: NgZone | null;\n    private _autoDetect;\n    /**\n     * The DebugElement associated with the root element of this component.\n     */\n    debugElement: DebugElement;\n    /**\n     * The instance of the root component class.\n     */\n    componentInstance: T;\n    /**\n     * The native element at the root of the component.\n     */\n    nativeElement: any;\n    /**\n     * The ElementRef for the element at the root of the component.\n     */\n    elementRef: ElementRef;\n    /**\n     * The ChangeDetectorRef for the component\n     */\n    changeDetectorRef: ChangeDetectorRef;\n    private _renderer;\n    private _isStable;\n    private _isDestroyed;\n    private _resolve;\n    private _promise;\n    private _onUnstableSubscription;\n    private _onStableSubscription;\n    private _onMicrotaskEmptySubscription;\n    private _onErrorSubscription;\n    constructor(componentRef: ComponentRef<T>, ngZone: NgZone | null, _autoDetect: boolean);\n    private _tick;\n    /**\n     * Trigger a change detection cycle for the component.\n     */\n    detectChanges(checkNoChanges?: boolean): void;\n    /**\n     * Do a change detection run to make sure there were no changes.\n     */\n    checkNoChanges(): void;\n    /**\n     * Set whether the fixture should autodetect changes.\n     *\n     * Also runs detectChanges once so that any existing change is detected.\n     */\n    autoDetectChanges(autoDetect?: boolean): void;\n    /**\n     * Return whether the fixture is currently stable or has async tasks that have not been completed\n     * yet.\n     */\n    isStable(): boolean;\n    /**\n     * Get a promise that resolves when the fixture is stable.\n     *\n     * This can be used to resume testing after events have triggered asynchronous activity or\n     * asynchronous change detection.\n     */\n    whenStable(): Promise<any>;\n    private _getRenderer;\n    /**\n      * Get a promise that resolves when the ui state is stable following animations.\n      */\n    whenRenderingDone(): Promise<any>;\n    /**\n     * Trigger component destruction.\n     */\n    destroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/fake_async_fallback.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @publicApi\n */\nexport declare function resetFakeAsyncZoneFallback(): void;\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns The function wrapped to be executed in the fakeAsync zone\n *\n * @publicApi\n */\nexport declare function fakeAsyncFallback(fn: Function): (...args: any[]) => any;\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @publicApi\n */\nexport declare function tickFallback(millis?: number): void;\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * @param maxTurns\n * @returns The simulated time elapsed, in millis.\n *\n * @publicApi\n */\nexport declare function flushFallback(maxTurns?: number): number;\n/**\n * Discard all remaining periodic tasks.\n *\n * @publicApi\n */\nexport declare function discardPeriodicTasksFallback(): void;\n/**\n * Flush any pending microtasks.\n *\n * @publicApi\n */\nexport declare function flushMicrotasksFallback(): void;\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/fake_async.d.ts",
    "content": "/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @publicApi\n */\nexport declare function resetFakeAsyncZone(): void;\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns The function wrapped to be executed in the fakeAsync zone\n *\n * @publicApi\n */\nexport declare function fakeAsync(fn: Function): (...args: any[]) => any;\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @publicApi\n */\nexport declare function tick(millis?: number): void;\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * @param maxTurns\n * @returns The simulated time elapsed, in millis.\n *\n * @publicApi\n */\nexport declare function flush(maxTurns?: number): number;\n/**\n * Discard all remaining periodic tasks.\n *\n * @publicApi\n */\nexport declare function discardPeriodicTasks(): void;\n/**\n * Flush any pending microtasks.\n *\n * @publicApi\n */\nexport declare function flushMicrotasks(): void;\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/lang_utils.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare function getTypeOf(instance: any /** TODO #9100 */): any;\nexport declare function instantiateType(type: Function, params?: any[]): any;\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/logger.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class Log {\n    logItems: any[];\n    constructor();\n    add(value: any /** TODO #9100 */): void;\n    fn(value: any /** TODO #9100 */): (a1?: any, a2?: any, a3?: any, a4?: any, a5?: any) => void;\n    clear(): void;\n    result(): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/metadata_override.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type used for modifications to metadata\n *\n * @publicApi\n */\nexport declare type MetadataOverride<T> = {\n    add?: Partial<T>;\n    remove?: Partial<T>;\n    set?: Partial<T>;\n};\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/metadata_overrider.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MetadataOverride } from './metadata_override';\nexport declare class MetadataOverrider {\n    private _references;\n    /**\n     * Creates a new instance for the given metadata class\n     * based on an old instance and overrides.\n     */\n    overrideMetadata<C extends T, T>(metadataClass: {\n        new (options: T): C;\n    }, oldMetadata: C, override: MetadataOverride<T>): C;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/ng_zone_mock.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, NgZone } from '@angular/core';\n/**\n * A mock implementation of {@link NgZone}.\n */\nexport declare class MockNgZone extends NgZone {\n    onStable: EventEmitter<any>;\n    constructor();\n    run(fn: Function): any;\n    runOutsideAngular(fn: Function): any;\n    simulateZoneExit(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/private_export_testing.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { TestingCompiler as ɵTestingCompiler, TestingCompilerFactory as ɵTestingCompilerFactory } from './test_compiler';\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/r3_test_bed.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, Directive, Injector, NgModule, Pipe, PlatformRef, Type } from '@angular/core';\nimport { ComponentFixture } from './component_fixture';\nimport { MetadataOverride } from './metadata_override';\nimport { TestBed } from './test_bed';\nimport { TestBedStatic, TestModuleMetadata } from './test_bed_common';\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n */\nexport declare class TestBedRender3 implements Injector, TestBed {\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @publicApi\n     */\n    static initTestEnvironment(ngModule: Type<any> | Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): TestBed;\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @publicApi\n     */\n    static resetTestEnvironment(): void;\n    static configureCompiler(config: {\n        providers?: any[];\n        useJit?: boolean;\n    }): TestBedStatic;\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     */\n    static configureTestingModule(moduleDef: TestModuleMetadata): TestBedStatic;\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     */\n    static compileComponents(): Promise<any>;\n    static overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): TestBedStatic;\n    static overrideComponent(component: Type<any>, override: MetadataOverride<Component>): TestBedStatic;\n    static overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): TestBedStatic;\n    static overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): TestBedStatic;\n    static overrideTemplate(component: Type<any>, template: string): TestBedStatic;\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    static overrideTemplateUsingTestingModule(component: Type<any>, template: string): TestBedStatic;\n    overrideTemplateUsingTestingModule(component: Type<any>, template: string): void;\n    static overrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): TestBedStatic;\n    static overrideProvider(token: any, provider: {\n        useValue: any;\n    }): TestBedStatic;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     *\n     * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n     */\n    static deprecatedOverrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): void;\n    static deprecatedOverrideProvider(token: any, provider: {\n        useValue: any;\n    }): void;\n    static get(token: any, notFoundValue?: any): any;\n    static createComponent<T>(component: Type<T>): ComponentFixture<T>;\n    static resetTestingModule(): TestBedStatic;\n    platform: PlatformRef;\n    ngModule: Type<any> | Type<any>[];\n    private _moduleOverrides;\n    private _componentOverrides;\n    private _directiveOverrides;\n    private _pipeOverrides;\n    private _providerOverrides;\n    private _rootProviderOverrides;\n    private _providers;\n    private _declarations;\n    private _imports;\n    private _schemas;\n    private _activeFixtures;\n    private _moduleRef;\n    private _instantiated;\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @publicApi\n     */\n    initTestEnvironment(ngModule: Type<any> | Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): void;\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @publicApi\n     */\n    resetTestEnvironment(): void;\n    resetTestingModule(): void;\n    configureCompiler(config: {\n        providers?: any[];\n        useJit?: boolean;\n    }): void;\n    configureTestingModule(moduleDef: TestModuleMetadata): void;\n    compileComponents(): Promise<any>;\n    get(token: any, notFoundValue?: any): any;\n    execute(tokens: any[], fn: Function, context?: any): any;\n    overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void;\n    overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void;\n    overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void;\n    overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     */\n    overrideProvider(token: any, provider: {\n        useFactory?: Function;\n        useValue?: any;\n        deps?: any[];\n    }): void;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     *\n     * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n     */\n    deprecatedOverrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): void;\n    deprecatedOverrideProvider(token: any, provider: {\n        useValue: any;\n    }): void;\n    createComponent<T>(type: Type<T>): ComponentFixture<T>;\n    private _initIfNeeded;\n    private _getResolvers;\n    private _assertNotInstantiated;\n    private _createTestModule;\n}\nexport declare function _getTestBedRender3(): TestBedRender3;\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/resolvers.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, Directive, NgModule, Pipe, Type } from '@angular/core';\nimport { MetadataOverride } from './metadata_override';\n/**\n * Base interface to resolve `@Component`, `@Directive`, `@Pipe` and `@NgModule`.\n */\nexport interface Resolver<T> {\n    resolve(type: Type<any>): T | null;\n}\n/**\n * Allows to override ivy metadata for tests (via the `TestBed`).\n */\ndeclare abstract class OverrideResolver<T> implements Resolver<T> {\n    private overrides;\n    private resolved;\n    abstract readonly type: any;\n    setOverrides(overrides: Array<[Type<any>, MetadataOverride<T>]>): void;\n    getAnnotation(type: Type<any>): T | null;\n    resolve(type: Type<any>): T | null;\n}\nexport declare class DirectiveResolver extends OverrideResolver<Directive> {\n    readonly type: import(\"@angular/core/src/metadata/directives\").DirectiveDecorator;\n}\nexport declare class ComponentResolver extends OverrideResolver<Component> {\n    readonly type: import(\"@angular/core/src/metadata/directives\").ComponentDecorator;\n}\nexport declare class PipeResolver extends OverrideResolver<Pipe> {\n    readonly type: import(\"@angular/core/src/metadata/directives\").PipeDecorator;\n}\nexport declare class NgModuleResolver extends OverrideResolver<NgModule> {\n    readonly type: import(\"@angular/core/src/metadata/ng_module\").NgModuleDecorator;\n}\nexport {};\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/test_bed_common.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, Directive, InjectionToken, NgModule, Pipe, PlatformRef, SchemaMetadata, Type } from '@angular/core';\nimport { ComponentFixture } from './component_fixture';\nimport { MetadataOverride } from './metadata_override';\nimport { TestBed } from './test_bed';\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @publicApi\n */\nexport declare class TestComponentRenderer {\n    insertRootElement(rootElementId: string): void;\n}\n/**\n * @publicApi\n */\nexport declare const ComponentFixtureAutoDetect: InjectionToken<boolean[]>;\n/**\n * @publicApi\n */\nexport declare const ComponentFixtureNoNgZone: InjectionToken<boolean[]>;\n/**\n * @publicApi\n */\nexport declare type TestModuleMetadata = {\n    providers?: any[];\n    declarations?: any[];\n    imports?: any[];\n    schemas?: Array<SchemaMetadata | any[]>;\n    aotSummaries?: () => any[];\n};\n/**\n * Static methods implemented by the `TestBedViewEngine` and `TestBedRender3`\n *\n * @publicApi\n */\nexport interface TestBedStatic {\n    new (...args: any[]): TestBed;\n    initTestEnvironment(ngModule: Type<any> | Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): TestBed;\n    /**\n     * Reset the providers for the test injector.\n     */\n    resetTestEnvironment(): void;\n    resetTestingModule(): TestBedStatic;\n    /**\n     * Allows overriding default compiler providers and settings\n     * which are defined in test_injector.js\n     */\n    configureCompiler(config: {\n        providers?: any[];\n        useJit?: boolean;\n    }): TestBedStatic;\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     */\n    configureTestingModule(moduleDef: TestModuleMetadata): TestBedStatic;\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     */\n    compileComponents(): Promise<any>;\n    overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): TestBedStatic;\n    overrideComponent(component: Type<any>, override: MetadataOverride<Component>): TestBedStatic;\n    overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): TestBedStatic;\n    overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): TestBedStatic;\n    overrideTemplate(component: Type<any>, template: string): TestBedStatic;\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    overrideTemplateUsingTestingModule(component: Type<any>, template: string): TestBedStatic;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    overrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): TestBedStatic;\n    overrideProvider(token: any, provider: {\n        useValue: any;\n    }): TestBedStatic;\n    overrideProvider(token: any, provider: {\n        useFactory?: Function;\n        useValue?: any;\n        deps?: any[];\n    }): TestBedStatic;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     *\n     * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n     */\n    deprecatedOverrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): void;\n    deprecatedOverrideProvider(token: any, provider: {\n        useValue: any;\n    }): void;\n    deprecatedOverrideProvider(token: any, provider: {\n        useFactory?: Function;\n        useValue?: any;\n        deps?: any[];\n    }): TestBedStatic;\n    get(token: any, notFoundValue?: any): any;\n    createComponent<T>(component: Type<T>): ComponentFixture<T>;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/test_bed.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, Directive, Injector, NgModule, Pipe, PlatformRef, Type } from '@angular/core';\nimport { ComponentFixture } from './component_fixture';\nimport { MetadataOverride } from './metadata_override';\nimport { TestBedStatic, TestModuleMetadata } from './test_bed_common';\nexport interface TestBed {\n    platform: PlatformRef;\n    ngModule: Type<any> | Type<any>[];\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @publicApi\n     */\n    initTestEnvironment(ngModule: Type<any> | Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): void;\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @publicApi\n     */\n    resetTestEnvironment(): void;\n    resetTestingModule(): void;\n    configureCompiler(config: {\n        providers?: any[];\n        useJit?: boolean;\n    }): void;\n    configureTestingModule(moduleDef: TestModuleMetadata): void;\n    compileComponents(): Promise<any>;\n    get(token: any, notFoundValue?: any): any;\n    execute(tokens: any[], fn: Function, context?: any): any;\n    overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void;\n    overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void;\n    overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void;\n    overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     */\n    overrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): void;\n    overrideProvider(token: any, provider: {\n        useValue: any;\n    }): void;\n    overrideProvider(token: any, provider: {\n        useFactory?: Function;\n        useValue?: any;\n        deps?: any[];\n    }): void;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     *\n     * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n     */\n    deprecatedOverrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): void;\n    deprecatedOverrideProvider(token: any, provider: {\n        useValue: any;\n    }): void;\n    deprecatedOverrideProvider(token: any, provider: {\n        useFactory?: Function;\n        useValue?: any;\n        deps?: any[];\n    }): void;\n    overrideTemplateUsingTestingModule(component: Type<any>, template: string): void;\n    createComponent<T>(component: Type<T>): ComponentFixture<T>;\n}\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n */\nexport declare class TestBedViewEngine implements Injector, TestBed {\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @publicApi\n     */\n    static initTestEnvironment(ngModule: Type<any> | Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): TestBedViewEngine;\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @publicApi\n     */\n    static resetTestEnvironment(): void;\n    static resetTestingModule(): TestBedStatic;\n    /**\n     * Allows overriding default compiler providers and settings\n     * which are defined in test_injector.js\n     */\n    static configureCompiler(config: {\n        providers?: any[];\n        useJit?: boolean;\n    }): TestBedStatic;\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     */\n    static configureTestingModule(moduleDef: TestModuleMetadata): TestBedStatic;\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     */\n    static compileComponents(): Promise<any>;\n    static overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): TestBedStatic;\n    static overrideComponent(component: Type<any>, override: MetadataOverride<Component>): TestBedStatic;\n    static overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): TestBedStatic;\n    static overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): TestBedStatic;\n    static overrideTemplate(component: Type<any>, template: string): TestBedStatic;\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    static overrideTemplateUsingTestingModule(component: Type<any>, template: string): TestBedStatic;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    static overrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): TestBedStatic;\n    static overrideProvider(token: any, provider: {\n        useValue: any;\n    }): TestBedStatic;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     *\n     * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n     */\n    static deprecatedOverrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): void;\n    static deprecatedOverrideProvider(token: any, provider: {\n        useValue: any;\n    }): void;\n    static get(token: any, notFoundValue?: any): any;\n    static createComponent<T>(component: Type<T>): ComponentFixture<T>;\n    private _instantiated;\n    private _compiler;\n    private _moduleRef;\n    private _moduleFactory;\n    private _compilerOptions;\n    private _moduleOverrides;\n    private _componentOverrides;\n    private _directiveOverrides;\n    private _pipeOverrides;\n    private _providers;\n    private _declarations;\n    private _imports;\n    private _schemas;\n    private _activeFixtures;\n    private _testEnvAotSummaries;\n    private _aotSummaries;\n    private _templateOverrides;\n    private _isRoot;\n    private _rootProviderOverrides;\n    platform: PlatformRef;\n    ngModule: Type<any> | Type<any>[];\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @publicApi\n     */\n    initTestEnvironment(ngModule: Type<any> | Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): void;\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @publicApi\n     */\n    resetTestEnvironment(): void;\n    resetTestingModule(): void;\n    configureCompiler(config: {\n        providers?: any[];\n        useJit?: boolean;\n    }): void;\n    configureTestingModule(moduleDef: TestModuleMetadata): void;\n    compileComponents(): Promise<any>;\n    private _initIfNeeded;\n    private _createCompilerAndModule;\n    private _assertNotInstantiated;\n    get(token: any, notFoundValue?: any): any;\n    execute(tokens: any[], fn: Function, context?: any): any;\n    overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void;\n    overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void;\n    overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void;\n    overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     */\n    overrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): void;\n    overrideProvider(token: any, provider: {\n        useValue: any;\n    }): void;\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     *\n     * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n     */\n    deprecatedOverrideProvider(token: any, provider: {\n        useFactory: Function;\n        deps: any[];\n    }): void;\n    deprecatedOverrideProvider(token: any, provider: {\n        useValue: any;\n    }): void;\n    private overrideProviderImpl;\n    overrideTemplateUsingTestingModule(component: Type<any>, template: string): void;\n    createComponent<T>(component: Type<T>): ComponentFixture<T>;\n}\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n *\n * @publicApi\n */\nexport declare const TestBed: TestBedStatic;\n/**\n * Returns a singleton of the applicable `TestBed`.\n *\n * It will be either an instance of `TestBedViewEngine` or `TestBedRender3`.\n *\n * @publicApi\n */\nexport declare const getTestBed: () => TestBed;\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n * @publicApi\n */\nexport declare function inject(tokens: any[], fn: Function): () => any;\n/**\n * @publicApi\n */\nexport declare class InjectSetupWrapper {\n    private _moduleDef;\n    constructor(_moduleDef: () => TestModuleMetadata);\n    private _addModule;\n    inject(tokens: any[], fn: Function): () => any;\n}\n/**\n * @publicApi\n */\nexport declare function withModule(moduleDef: TestModuleMetadata): InjectSetupWrapper;\nexport declare function withModule(moduleDef: TestModuleMetadata, fn: Function): () => any;\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/test_compiler.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Compiler, CompilerOptions, Component, ComponentFactory, Directive, Injector, NgModule, Pipe, Type } from '@angular/core';\nimport { MetadataOverride } from './metadata_override';\n/**\n * Special interface to the compiler only used by testing\n *\n * @publicApi\n */\nexport declare class TestingCompiler extends Compiler {\n    readonly injector: Injector;\n    overrideModule(module: Type<any>, overrides: MetadataOverride<NgModule>): void;\n    overrideDirective(directive: Type<any>, overrides: MetadataOverride<Directive>): void;\n    overrideComponent(component: Type<any>, overrides: MetadataOverride<Component>): void;\n    overridePipe(directive: Type<any>, overrides: MetadataOverride<Pipe>): void;\n    /**\n     * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n     * so that it can use the code generated by AOT.\n     */\n    loadAotSummaries(summaries: () => any[]): void;\n    /**\n     * Gets the component factory for the given component.\n     * This assumes that the component has been compiled before calling this call using\n     * `compileModuleAndAllComponents*`.\n     */\n    getComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n    /**\n     * Returns the component type that is stored in the given error.\n     * This can be used for errors created by compileModule...\n     */\n    getComponentFromError(error: Error): Type<any> | null;\n}\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n */\nexport declare abstract class TestingCompilerFactory {\n    abstract createTestingCompiler(options?: CompilerOptions[]): TestingCompiler;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/testing_internal.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/// <reference types=\"jasmine\" />\nexport { AsyncTestCompleter } from './async_test_completer';\nexport { inject } from './test_bed';\nexport * from './logger';\nexport * from './ng_zone_mock';\nexport declare const proxy: ClassDecorator;\nexport declare const afterEach: Function;\nexport declare const expect: <T>(actual: T) => jasmine.Matchers<T>;\nexport declare function describe(...args: any[]): void;\nexport declare function ddescribe(...args: any[]): void;\nexport declare function xdescribe(...args: any[]): void;\nexport declare function beforeEach(fn: Function): void;\n/**\n * Allows overriding default providers defined in test_injector.js.\n *\n * The given function must return a list of DI providers.\n *\n * Example:\n *\n *   beforeEachProviders(() => [\n *     {provide: Compiler, useClass: MockCompiler},\n *     {provide: SomeToken, useValue: myValue},\n *   ]);\n */\nexport declare function beforeEachProviders(fn: Function): void;\nexport declare function it(expectation: string, assertion: (done: DoneFn) => any, timeout?: number): void;\nexport declare function fit(expectation: string, assertion: (done: DoneFn) => any, timeout?: number): void;\nexport declare function xit(expectation: string, assertion: (done: DoneFn) => any, timeout?: number): void;\nexport declare class SpyObject {\n    constructor(type?: any);\n    spy(name: string): any;\n    prop(name: string, value: any): void;\n    static stub(object?: any, config?: any, overrides?: any): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/core/testing/src/testing.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the core/testing package.\n */\nexport * from './async';\nexport * from './component_fixture';\nexport * from './fake_async';\nexport { TestBed, getTestBed, inject, InjectSetupWrapper, withModule } from './test_bed';\nexport * from './test_bed_common';\nexport * from './before_each';\nexport * from './metadata_override';\nexport { MetadataOverrider as ɵMetadataOverrider } from './metadata_overrider';\nexport * from './private_export_testing';\n"
  },
  {
    "path": "node_modules/@angular/core/testing/testing.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { TestBedRender3 as ɵangular_packages_core_testing_testing_b, _getTestBedRender3 as ɵangular_packages_core_testing_testing_c } from './src/r3_test_bed';\nexport { TestBedViewEngine as ɵangular_packages_core_testing_testing_a } from './src/test_bed';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations.d.ts",
    "content": "\n  export * from './animations/animations';\n  "
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/animations.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { BaseAnimationRenderer as ɵangular_packages_platform_browser_animations_animations_g } from './src/animation_renderer';\nexport { BROWSER_ANIMATIONS_PROVIDERS as ɵangular_packages_platform_browser_animations_animations_e, BROWSER_NOOP_ANIMATIONS_PROVIDERS as ɵangular_packages_platform_browser_animations_animations_f, InjectableAnimationEngine as ɵangular_packages_platform_browser_animations_animations_a, instantiateDefaultStyleNormalizer as ɵangular_packages_platform_browser_animations_animations_c, instantiateRendererFactory as ɵangular_packages_platform_browser_animations_animations_d, instantiateSupportedAnimationDriver as ɵangular_packages_platform_browser_animations_animations_b } from './src/providers';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/animations';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/src/animation_builder.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationBuilder, AnimationFactory, AnimationMetadata, AnimationOptions, AnimationPlayer } from '@angular/animations';\nimport { RendererFactory2 } from '@angular/core';\nimport { AnimationRenderer } from './animation_renderer';\nexport declare class BrowserAnimationBuilder extends AnimationBuilder {\n    private _nextAnimationId;\n    private _renderer;\n    constructor(rootRenderer: RendererFactory2, doc: any);\n    build(animation: AnimationMetadata | AnimationMetadata[]): AnimationFactory;\n}\nexport declare class BrowserAnimationFactory extends AnimationFactory {\n    private _id;\n    private _renderer;\n    constructor(_id: string, _renderer: AnimationRenderer);\n    create(element: any, options?: AnimationOptions): AnimationPlayer;\n}\nexport declare class RendererAnimationPlayer implements AnimationPlayer {\n    id: string;\n    element: any;\n    private _renderer;\n    parentPlayer: AnimationPlayer | null;\n    private _started;\n    constructor(id: string, element: any, options: AnimationOptions, _renderer: AnimationRenderer);\n    private _listen;\n    private _command;\n    onDone(fn: () => void): void;\n    onStart(fn: () => void): void;\n    onDestroy(fn: () => void): void;\n    init(): void;\n    hasStarted(): boolean;\n    play(): void;\n    pause(): void;\n    restart(): void;\n    finish(): void;\n    destroy(): void;\n    reset(): void;\n    setPosition(p: number): void;\n    getPosition(): number;\n    totalTime: number;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/src/animation_renderer.d.ts",
    "content": "import { ɵAnimationEngine as AnimationEngine } from '@angular/animations/browser';\nimport { NgZone, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2 } from '@angular/core';\nexport declare class AnimationRendererFactory implements RendererFactory2 {\n    private delegate;\n    private engine;\n    private _zone;\n    private _currentId;\n    private _microtaskId;\n    private _animationCallbacksBuffer;\n    private _rendererCache;\n    private _cdRecurDepth;\n    private promise;\n    constructor(delegate: RendererFactory2, engine: AnimationEngine, _zone: NgZone);\n    createRenderer(hostElement: any, type: RendererType2): Renderer2;\n    begin(): void;\n    private _scheduleCountTask;\n    end(): void;\n    whenRenderingDone(): Promise<any>;\n}\nexport declare class BaseAnimationRenderer implements Renderer2 {\n    protected namespaceId: string;\n    delegate: Renderer2;\n    engine: AnimationEngine;\n    constructor(namespaceId: string, delegate: Renderer2, engine: AnimationEngine);\n    readonly data: {\n        [key: string]: any;\n    };\n    destroyNode: ((n: any) => void) | null;\n    destroy(): void;\n    createElement(name: string, namespace?: string | null | undefined): any;\n    createComment(value: string): any;\n    createText(value: string): any;\n    appendChild(parent: any, newChild: any): void;\n    insertBefore(parent: any, newChild: any, refChild: any): void;\n    removeChild(parent: any, oldChild: any): void;\n    selectRootElement(selectorOrNode: any, preserveContent?: boolean): any;\n    parentNode(node: any): any;\n    nextSibling(node: any): any;\n    setAttribute(el: any, name: string, value: string, namespace?: string | null | undefined): void;\n    removeAttribute(el: any, name: string, namespace?: string | null | undefined): void;\n    addClass(el: any, name: string): void;\n    removeClass(el: any, name: string): void;\n    setStyle(el: any, style: string, value: any, flags?: RendererStyleFlags2 | undefined): void;\n    removeStyle(el: any, style: string, flags?: RendererStyleFlags2 | undefined): void;\n    setProperty(el: any, name: string, value: any): void;\n    setValue(node: any, value: string): void;\n    listen(target: any, eventName: string, callback: (event: any) => boolean | void): () => void;\n    protected disableAnimations(element: any, value: boolean): void;\n}\nexport declare class AnimationRenderer extends BaseAnimationRenderer implements Renderer2 {\n    factory: AnimationRendererFactory;\n    constructor(factory: AnimationRendererFactory, namespaceId: string, delegate: Renderer2, engine: AnimationEngine);\n    setProperty(el: any, name: string, value: any): void;\n    listen(target: 'window' | 'document' | 'body' | any, eventName: string, callback: (event: any) => any): () => void;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/src/animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all animation APIs of the animation browser package.\n */\nexport { BrowserAnimationsModule, NoopAnimationsModule } from './module';\nexport { ANIMATION_MODULE_TYPE } from './providers';\nexport * from './private_export';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/src/module.d.ts",
    "content": "/**\n * Exports `BrowserModule` with additional [dependency-injection providers](guide/glossary#provider)\n * for use with animations. See [Animations](guide/animations).\n * @publicApi\n */\nexport declare class BrowserAnimationsModule {\n}\n/**\n * A null player that must be imported to allow disabling of animations.\n * @publicApi\n */\nexport declare class NoopAnimationsModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/src/private_export.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { BrowserAnimationBuilder as ɵBrowserAnimationBuilder, BrowserAnimationFactory as ɵBrowserAnimationFactory } from './animation_builder';\nexport { AnimationRenderer as ɵAnimationRenderer, AnimationRendererFactory as ɵAnimationRendererFactory } from './animation_renderer';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/animations/src/providers.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationDriver, ɵAnimationEngine as AnimationEngine, ɵAnimationStyleNormalizer as AnimationStyleNormalizer, ɵCssKeyframesDriver as CssKeyframesDriver, ɵWebAnimationsDriver as WebAnimationsDriver, ɵWebAnimationsStyleNormalizer as WebAnimationsStyleNormalizer } from '@angular/animations/browser';\nimport { InjectionToken, NgZone, Provider } from '@angular/core';\nimport { ɵDomRendererFactory2 as DomRendererFactory2 } from '@angular/platform-browser';\nimport { AnimationRendererFactory } from './animation_renderer';\nexport declare class InjectableAnimationEngine extends AnimationEngine {\n    constructor(doc: any, driver: AnimationDriver, normalizer: AnimationStyleNormalizer);\n}\nexport declare function instantiateSupportedAnimationDriver(): WebAnimationsDriver | CssKeyframesDriver;\nexport declare function instantiateDefaultStyleNormalizer(): WebAnimationsStyleNormalizer;\nexport declare function instantiateRendererFactory(renderer: DomRendererFactory2, engine: AnimationEngine, zone: NgZone): AnimationRendererFactory;\n/**\n * @publicApi\n */\nexport declare const ANIMATION_MODULE_TYPE: InjectionToken<\"NoopAnimations\" | \"BrowserAnimations\">;\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserModule.\n */\nexport declare const BROWSER_ANIMATIONS_PROVIDERS: Provider[];\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserTestingModule.\n */\nexport declare const BROWSER_NOOP_ANIMATIONS_PROVIDERS: Provider[];\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/platform-browser.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { BROWSER_MODULE_PROVIDERS as ɵangular_packages_platform_browser_platform_browser_c, _document as ɵangular_packages_platform_browser_platform_browser_b, errorHandler as ɵangular_packages_platform_browser_platform_browser_a } from './src/browser';\nexport { GenericBrowserDomAdapter as ɵangular_packages_platform_browser_platform_browser_k } from './src/browser/generic_browser_adapter';\nexport { createMeta as ɵangular_packages_platform_browser_platform_browser_d } from './src/browser/meta';\nexport { SERVER_TRANSITION_PROVIDERS as ɵangular_packages_platform_browser_platform_browser_i, appInitializerFactory as ɵangular_packages_platform_browser_platform_browser_h } from './src/browser/server-transition';\nexport { createTitle as ɵangular_packages_platform_browser_platform_browser_e } from './src/browser/title';\nexport { initTransferState as ɵangular_packages_platform_browser_platform_browser_f } from './src/browser/transfer_state';\nexport { _createNgProbe as ɵangular_packages_platform_browser_platform_browser_j } from './src/dom/debug/ng_probe';\nexport { EventManagerPlugin as ɵangular_packages_platform_browser_platform_browser_g } from './src/dom/events/event_manager';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/platform-browser';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ErrorHandler, ModuleWithProviders, PlatformRef, StaticProvider } from '@angular/core';\nexport declare const INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[];\n/**\n * @security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n * @publicApi\n */\nexport declare const BROWSER_SANITIZATION_PROVIDERS: StaticProvider[];\n/**\n * @publicApi\n */\nexport declare const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef;\nexport declare function initDomAdapter(): void;\nexport declare function errorHandler(): ErrorHandler;\nexport declare function _document(): any;\nexport declare const BROWSER_MODULE_PROVIDERS: StaticProvider[];\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by defaults in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\nexport declare class BrowserModule {\n    constructor(parentModule: BrowserModule | null);\n    /**\n     * Configures a browser-based app to transition from a server-rendered app, if\n     * one is present on the page.\n     *\n     * @param params An object containing an identifier for the app to transition.\n     * The ID must match between the client and server versions of the app.\n     * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n     */\n    static withServerTransition(params: {\n        appId: string;\n    }): ModuleWithProviders<BrowserModule>;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/browser_adapter.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { GenericBrowserDomAdapter } from './generic_browser_adapter';\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport declare class BrowserDomAdapter extends GenericBrowserDomAdapter {\n    parse(templateHtml: string): void;\n    static makeCurrent(): void;\n    hasProperty(element: Node, name: string): boolean;\n    setProperty(el: Node, name: string, value: any): void;\n    getProperty(el: Node, name: string): any;\n    invoke(el: Node, methodName: string, args: any[]): any;\n    logError(error: string): void;\n    log(error: string): void;\n    logGroup(error: string): void;\n    logGroupEnd(): void;\n    readonly attrToPropMap: any;\n    contains(nodeA: any, nodeB: any): boolean;\n    querySelector(el: HTMLElement, selector: string): any;\n    querySelectorAll(el: any, selector: string): any[];\n    on(el: Node, evt: any, listener: any): void;\n    onAndCancel(el: Node, evt: any, listener: any): Function;\n    dispatchEvent(el: Node, evt: any): void;\n    createMouseEvent(eventType: string): MouseEvent;\n    createEvent(eventType: any): Event;\n    preventDefault(evt: Event): void;\n    isPrevented(evt: Event): boolean;\n    getInnerHTML(el: HTMLElement): string;\n    getTemplateContent(el: Node): Node | null;\n    getOuterHTML(el: HTMLElement): string;\n    nodeName(node: Node): string;\n    nodeValue(node: Node): string | null;\n    type(node: HTMLInputElement): string;\n    content(node: Node): Node;\n    firstChild(el: Node): Node | null;\n    nextSibling(el: Node): Node | null;\n    parentElement(el: Node): Node | null;\n    childNodes(el: any): Node[];\n    childNodesAsList(el: Node): any[];\n    clearNodes(el: Node): void;\n    appendChild(el: Node, node: Node): void;\n    removeChild(el: Node, node: Node): void;\n    replaceChild(el: Node, newChild: Node, oldChild: Node): void;\n    remove(node: Node): Node;\n    insertBefore(parent: Node, ref: Node, node: Node): void;\n    insertAllBefore(parent: Node, ref: Node, nodes: Node[]): void;\n    insertAfter(parent: Node, ref: Node, node: any): void;\n    setInnerHTML(el: Element, value: string): void;\n    getText(el: Node): string | null;\n    setText(el: Node, value: string): void;\n    getValue(el: any): string;\n    setValue(el: any, value: string): void;\n    getChecked(el: any): boolean;\n    setChecked(el: any, value: boolean): void;\n    createComment(text: string): Comment;\n    createTemplate(html: any): HTMLElement;\n    createElement(tagName: string, doc?: Document): HTMLElement;\n    createElementNS(ns: string, tagName: string, doc?: Document): Element;\n    createTextNode(text: string, doc?: Document): Text;\n    createScriptTag(attrName: string, attrValue: string, doc?: Document): HTMLScriptElement;\n    createStyleElement(css: string, doc?: Document): HTMLStyleElement;\n    createShadowRoot(el: HTMLElement): DocumentFragment;\n    getShadowRoot(el: HTMLElement): DocumentFragment;\n    getHost(el: HTMLElement): HTMLElement;\n    clone(node: Node): Node;\n    getElementsByClassName(element: any, name: string): HTMLElement[];\n    getElementsByTagName(element: any, name: string): HTMLElement[];\n    classList(element: any): any[];\n    addClass(element: any, className: string): void;\n    removeClass(element: any, className: string): void;\n    hasClass(element: any, className: string): boolean;\n    setStyle(element: any, styleName: string, styleValue: string): void;\n    removeStyle(element: any, stylename: string): void;\n    getStyle(element: any, stylename: string): string;\n    hasStyle(element: any, styleName: string, styleValue?: string | null): boolean;\n    tagName(element: any): string;\n    attributeMap(element: any): Map<string, string>;\n    hasAttribute(element: Element, attribute: string): boolean;\n    hasAttributeNS(element: Element, ns: string, attribute: string): boolean;\n    getAttribute(element: Element, attribute: string): string | null;\n    getAttributeNS(element: Element, ns: string, name: string): string | null;\n    setAttribute(element: Element, name: string, value: string): void;\n    setAttributeNS(element: Element, ns: string, name: string, value: string): void;\n    removeAttribute(element: Element, attribute: string): void;\n    removeAttributeNS(element: Element, ns: string, name: string): void;\n    templateAwareRoot(el: Node): any;\n    createHtmlDocument(): HTMLDocument;\n    getDefaultDocument(): Document;\n    getBoundingClientRect(el: Element): any;\n    getTitle(doc: Document): string;\n    setTitle(doc: Document, newTitle: string): void;\n    elementMatches(n: any, selector: string): boolean;\n    isTemplateElement(el: Node): boolean;\n    isTextNode(node: Node): boolean;\n    isCommentNode(node: Node): boolean;\n    isElementNode(node: Node): boolean;\n    hasShadowRoot(node: any): boolean;\n    isShadowRoot(node: any): boolean;\n    importIntoDoc(node: Node): any;\n    adoptNode(node: Node): any;\n    getHref(el: Element): string;\n    getEventKey(event: any): string;\n    getGlobalEventTarget(doc: Document, target: string): EventTarget | null;\n    getHistory(): History;\n    getLocation(): Location;\n    getBaseHref(doc: Document): string | null;\n    resetBaseElement(): void;\n    getUserAgent(): string;\n    setData(element: Element, name: string, value: string): void;\n    getData(element: Element, name: string): string | null;\n    getComputedStyle(element: any): any;\n    supportsWebAnimation(): boolean;\n    performanceNow(): number;\n    supportsCookies(): boolean;\n    getCookie(name: string): string | null;\n    setCookie(name: string, value: string): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/generic_browser_adapter.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DomAdapter } from '../dom/dom_adapter';\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport declare abstract class GenericBrowserDomAdapter extends DomAdapter {\n    private _animationPrefix;\n    private _transitionEnd;\n    constructor();\n    getDistributedNodes(el: HTMLElement): Node[];\n    resolveAndSetHref(el: HTMLAnchorElement, baseUrl: string, href: string): void;\n    supportsDOMEvents(): boolean;\n    supportsNativeShadowDOM(): boolean;\n    getAnimationPrefix(): string;\n    getTransitionEnd(): string;\n    supportsAnimation(): boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/location/browser_platform_location.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LocationChangeListener, PlatformLocation } from '@angular/common';\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n */\nexport declare class BrowserPlatformLocation extends PlatformLocation {\n    private _doc;\n    readonly location: Location;\n    private _history;\n    constructor(_doc: any);\n    getBaseHrefFromDOM(): string;\n    onPopState(fn: LocationChangeListener): void;\n    onHashChange(fn: LocationChangeListener): void;\n    pathname: string;\n    readonly search: string;\n    readonly hash: string;\n    pushState(state: any, title: string, url: string): void;\n    replaceState(state: any, title: string, url: string): void;\n    forward(): void;\n    back(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/location/history.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare function supportsState(): boolean;\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/meta.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a meta element.\n *\n * @publicApi\n */\nexport declare type MetaDefinition = {\n    charset?: string;\n    content?: string;\n    httpEquiv?: string;\n    id?: string;\n    itemprop?: string;\n    name?: string;\n    property?: string;\n    scheme?: string;\n    url?: string;\n} & {\n    [prop: string]: string;\n};\n/**\n * Factory to create Meta service.\n */\nexport declare function createMeta(): Meta;\n/**\n * A service that can be used to get and add meta tags.\n *\n * @publicApi\n */\nexport declare class Meta {\n    private _doc;\n    private _dom;\n    constructor(_doc: any);\n    addTag(tag: MetaDefinition, forceCreation?: boolean): HTMLMetaElement | null;\n    addTags(tags: MetaDefinition[], forceCreation?: boolean): HTMLMetaElement[];\n    getTag(attrSelector: string): HTMLMetaElement | null;\n    getTags(attrSelector: string): HTMLMetaElement[];\n    updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement | null;\n    removeTag(attrSelector: string): void;\n    removeTagElement(meta: HTMLMetaElement): void;\n    private _getOrCreateElement;\n    private _setMetaElementAttributes;\n    private _parseSelector;\n    private _containsAttributes;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/server-transition.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Injector, StaticProvider } from '@angular/core';\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nexport declare const TRANSITION_ID: InjectionToken<{}>;\nexport declare function appInitializerFactory(transitionId: string, document: any, injector: Injector): () => void;\nexport declare const SERVER_TRANSITION_PROVIDERS: StaticProvider[];\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/testability.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { GetTestability, Testability, TestabilityRegistry } from '@angular/core';\nexport declare class BrowserGetTestability implements GetTestability {\n    static init(): void;\n    addToWindow(registry: TestabilityRegistry): void;\n    findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean): Testability | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/title.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Factory to create Title service.\n */\nexport declare function createTitle(): Title;\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\nexport declare class Title {\n    private _doc;\n    constructor(_doc: any);\n    /**\n     * Get the title of the current HTML document.\n     */\n    getTitle(): string;\n    /**\n     * Set the title of the current HTML document.\n     * @param newTitle\n     */\n    setTitle(newTitle: string): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/tools/browser.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\ndeclare const win: any;\nexport { win as window };\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/tools/common_tools.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef, ComponentRef } from '@angular/core';\nexport declare class ChangeDetectionPerfRecord {\n    msPerTick: number;\n    numTicks: number;\n    constructor(msPerTick: number, numTicks: number);\n}\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nexport declare class AngularProfiler {\n    appRef: ApplicationRef;\n    constructor(ref: ComponentRef<any>);\n    /**\n     * Exercises change detection in a loop and then prints the average amount of\n     * time in milliseconds how long a single round of change detection takes for\n     * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n     * of 500 milliseconds.\n     *\n     * Optionally, a user may pass a `config` parameter containing a map of\n     * options. Supported options are:\n     *\n     * `record` (boolean) - causes the profiler to record a CPU profile while\n     * it exercises the change detector. Example:\n     *\n     * ```\n     * ng.profiler.timeChangeDetection({record: true})\n     * ```\n     */\n    timeChangeDetection(config: any): ChangeDetectionPerfRecord;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/tools/tools.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentRef } from '@angular/core';\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * @publicApi\n */\nexport declare function enableDebugTools<T>(ref: ComponentRef<T>): ComponentRef<T>;\n/**\n * Disables Angular tools.\n *\n * @publicApi\n */\nexport declare function disableDebugTools(): void;\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/browser/transfer_state.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare function escapeHtml(text: string): string;\nexport declare function unescapeHtml(text: string): string;\n/**\n * A type-safe key to use with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n */\nexport declare type StateKey<T> = string & {\n    __not_a_string: never;\n};\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n */\nexport declare function makeStateKey<T = void>(key: string): StateKey<T>;\n/**\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * `TransferState` will be available as an injectable token. To use it import\n * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialzied in a\n * non-lossy manner.\n *\n * @publicApi\n */\nexport declare class TransferState {\n    private store;\n    private onSerializeCallbacks;\n    /**\n     * Get the value corresponding to a key. Return `defaultValue` if key is not found.\n     */\n    get<T>(key: StateKey<T>, defaultValue: T): T;\n    /**\n     * Set the value corresponding to a key.\n     */\n    set<T>(key: StateKey<T>, value: T): void;\n    /**\n     * Remove a key from the store.\n     */\n    remove<T>(key: StateKey<T>): void;\n    /**\n     * Test whether a key exists in the store.\n     */\n    hasKey<T>(key: StateKey<T>): boolean;\n    /**\n     * Register a callback to provide the value for a key when `toJson` is called.\n     */\n    onSerialize<T>(key: StateKey<T>, callback: () => T): void;\n    /**\n     * Serialize the current state of the store to JSON.\n     */\n    toJson(): string;\n}\nexport declare function initTransferState(doc: Document, appId: string): TransferState;\n/**\n * NgModule to install on the client side while using the `TransferState` to transfer state from\n * server to client.\n *\n * @publicApi\n */\nexport declare class BrowserTransferStateModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/debug/by.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DebugElement, Predicate, Type } from '@angular/core';\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nexport declare class By {\n    /**\n     * Match all elements.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n     */\n    static all(): Predicate<DebugElement>;\n    /**\n     * Match elements by the given CSS selector.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n     */\n    static css(selector: string): Predicate<DebugElement>;\n    /**\n     * Match elements that have the given directive present.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n     */\n    static directive(type: Type<any>): Predicate<DebugElement>;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/debug/ng_probe.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as core from '@angular/core';\n/**\n * Returns a {@link DebugElement} for the given native DOM element, or\n * null if the given native element does not have an Angular view associated\n * with it.\n */\nexport declare function inspectNativeElement(element: any): core.DebugNode | null;\nexport declare function _createNgProbe(coreTokens: core.NgProbeToken[]): any;\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n */\nexport declare const ELEMENT_PROBE_PROVIDERS: core.Provider[];\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/dom_adapter.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '@angular/core';\nexport declare function getDOM(): DomAdapter;\nexport declare function setDOM(adapter: DomAdapter): void;\nexport declare function setRootDomAdapter(adapter: DomAdapter): void;\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport declare abstract class DomAdapter {\n    resourceLoaderType: Type<any>;\n    abstract hasProperty(element: any, name: string): boolean;\n    abstract setProperty(el: Element, name: string, value: any): any;\n    abstract getProperty(el: Element, name: string): any;\n    abstract invoke(el: Element, methodName: string, args: any[]): any;\n    abstract logError(error: any): any;\n    abstract log(error: any): any;\n    abstract logGroup(error: any): any;\n    abstract logGroupEnd(): any;\n    /**\n     * Maps attribute names to their corresponding property names for cases\n     * where attribute name doesn't match property name.\n     */\n    attrToPropMap: {\n        [key: string]: string;\n    };\n    abstract contains(nodeA: any, nodeB: any): boolean;\n    abstract parse(templateHtml: string): any;\n    abstract querySelector(el: any, selector: string): any;\n    abstract querySelectorAll(el: any, selector: string): any[];\n    abstract on(el: any, evt: any, listener: any): any;\n    abstract onAndCancel(el: any, evt: any, listener: any): Function;\n    abstract dispatchEvent(el: any, evt: any): any;\n    abstract createMouseEvent(eventType: any): any;\n    abstract createEvent(eventType: string): any;\n    abstract preventDefault(evt: any): any;\n    abstract isPrevented(evt: any): boolean;\n    abstract getInnerHTML(el: any): string;\n    /** Returns content if el is a <template> element, null otherwise. */\n    abstract getTemplateContent(el: any): any;\n    abstract getOuterHTML(el: any): string;\n    abstract nodeName(node: any): string;\n    abstract nodeValue(node: any): string | null;\n    abstract type(node: any): string;\n    abstract content(node: any): any;\n    abstract firstChild(el: any): Node | null;\n    abstract nextSibling(el: any): Node | null;\n    abstract parentElement(el: any): Node | null;\n    abstract childNodes(el: any): Node[];\n    abstract childNodesAsList(el: any): Node[];\n    abstract clearNodes(el: any): any;\n    abstract appendChild(el: any, node: any): any;\n    abstract removeChild(el: any, node: any): any;\n    abstract replaceChild(el: any, newNode: any, oldNode: any): any;\n    abstract remove(el: any): Node;\n    abstract insertBefore(parent: any, ref: any, node: any): any;\n    abstract insertAllBefore(parent: any, ref: any, nodes: any): any;\n    abstract insertAfter(parent: any, el: any, node: any): any;\n    abstract setInnerHTML(el: any, value: any): any;\n    abstract getText(el: any): string | null;\n    abstract setText(el: any, value: string): any;\n    abstract getValue(el: any): string;\n    abstract setValue(el: any, value: string): any;\n    abstract getChecked(el: any): boolean;\n    abstract setChecked(el: any, value: boolean): any;\n    abstract createComment(text: string): any;\n    abstract createTemplate(html: any): HTMLElement;\n    abstract createElement(tagName: any, doc?: any): HTMLElement;\n    abstract createElementNS(ns: string, tagName: string, doc?: any): Element;\n    abstract createTextNode(text: string, doc?: any): Text;\n    abstract createScriptTag(attrName: string, attrValue: string, doc?: any): HTMLElement;\n    abstract createStyleElement(css: string, doc?: any): HTMLStyleElement;\n    abstract createShadowRoot(el: any): any;\n    abstract getShadowRoot(el: any): any;\n    abstract getHost(el: any): any;\n    abstract getDistributedNodes(el: any): Node[];\n    abstract clone(node: Node): Node;\n    abstract getElementsByClassName(element: any, name: string): HTMLElement[];\n    abstract getElementsByTagName(element: any, name: string): HTMLElement[];\n    abstract classList(element: any): any[];\n    abstract addClass(element: any, className: string): any;\n    abstract removeClass(element: any, className: string): any;\n    abstract hasClass(element: any, className: string): boolean;\n    abstract setStyle(element: any, styleName: string, styleValue: string): any;\n    abstract removeStyle(element: any, styleName: string): any;\n    abstract getStyle(element: any, styleName: string): string;\n    abstract hasStyle(element: any, styleName: string, styleValue?: string): boolean;\n    abstract tagName(element: any): string;\n    abstract attributeMap(element: any): Map<string, string>;\n    abstract hasAttribute(element: any, attribute: string): boolean;\n    abstract hasAttributeNS(element: any, ns: string, attribute: string): boolean;\n    abstract getAttribute(element: any, attribute: string): string | null;\n    abstract getAttributeNS(element: any, ns: string, attribute: string): string | null;\n    abstract setAttribute(element: any, name: string, value: string): any;\n    abstract setAttributeNS(element: any, ns: string, name: string, value: string): any;\n    abstract removeAttribute(element: any, attribute: string): any;\n    abstract removeAttributeNS(element: any, ns: string, attribute: string): any;\n    abstract templateAwareRoot(el: any): any;\n    abstract createHtmlDocument(): HTMLDocument;\n    abstract getDefaultDocument(): Document;\n    abstract getBoundingClientRect(el: any): any;\n    abstract getTitle(doc: Document): string;\n    abstract setTitle(doc: Document, newTitle: string): any;\n    abstract elementMatches(n: any, selector: string): boolean;\n    abstract isTemplateElement(el: any): boolean;\n    abstract isTextNode(node: any): boolean;\n    abstract isCommentNode(node: any): boolean;\n    abstract isElementNode(node: any): boolean;\n    abstract hasShadowRoot(node: any): boolean;\n    abstract isShadowRoot(node: any): boolean;\n    abstract importIntoDoc(node: Node): Node;\n    abstract adoptNode(node: Node): Node;\n    abstract getHref(element: any): string;\n    abstract getEventKey(event: any): string;\n    abstract resolveAndSetHref(element: any, baseUrl: string, href: string): any;\n    abstract supportsDOMEvents(): boolean;\n    abstract supportsNativeShadowDOM(): boolean;\n    abstract getGlobalEventTarget(doc: Document, target: string): any;\n    abstract getHistory(): History;\n    abstract getLocation(): Location;\n    abstract getBaseHref(doc: Document): string | null;\n    abstract resetBaseElement(): void;\n    abstract getUserAgent(): string;\n    abstract setData(element: any, name: string, value: string): any;\n    abstract getComputedStyle(element: any): any;\n    abstract getData(element: any, name: string): string | null;\n    abstract supportsWebAnimation(): boolean;\n    abstract performanceNow(): number;\n    abstract getAnimationPrefix(): string;\n    abstract getTransitionEnd(): string;\n    abstract supportsAnimation(): boolean;\n    abstract supportsCookies(): boolean;\n    abstract getCookie(name: string): string | null;\n    abstract setCookie(name: string, value: string): any;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/dom_renderer.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Renderer2, RendererFactory2, RendererType2 } from '@angular/core';\nimport { EventManager } from './events/event_manager';\nimport { DomSharedStylesHost } from './shared_styles_host';\nexport declare const NAMESPACE_URIS: {\n    [ns: string]: string;\n};\nexport declare const COMPONENT_VARIABLE = \"%COMP%\";\nexport declare const HOST_ATTR: string;\nexport declare const CONTENT_ATTR: string;\nexport declare function shimContentAttribute(componentShortId: string): string;\nexport declare function shimHostAttribute(componentShortId: string): string;\nexport declare function flattenStyles(compId: string, styles: Array<any | any[]>, target: string[]): string[];\nexport declare class DomRendererFactory2 implements RendererFactory2 {\n    private eventManager;\n    private sharedStylesHost;\n    private rendererByCompId;\n    private defaultRenderer;\n    constructor(eventManager: EventManager, sharedStylesHost: DomSharedStylesHost);\n    createRenderer(element: any, type: RendererType2 | null): Renderer2;\n    begin(): void;\n    end(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/dom_tokens.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n *\n * @deprecated import from `@angular/common` instead.\n * @publicApi\n */\nexport declare const DOCUMENT: InjectionToken<Document>;\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/events/dom_events.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgZone } from '@angular/core';\nimport { EventManagerPlugin } from './event_manager';\nexport declare class DomEventsPlugin extends EventManagerPlugin {\n    private ngZone;\n    constructor(doc: any, ngZone: NgZone, platformId: {} | null);\n    private patchEvent;\n    supports(eventName: string): boolean;\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    removeEventListener(target: any, eventName: string, callback: Function): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/events/event_manager.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, NgZone } from '@angular/core';\n/**\n * The injection token for the event-manager plug-in service.\n *\n * @publicApi\n */\nexport declare const EVENT_MANAGER_PLUGINS: InjectionToken<EventManagerPlugin[]>;\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\nexport declare class EventManager {\n    private _zone;\n    private _plugins;\n    private _eventNameToPlugin;\n    /**\n     * Initializes an instance of the event-manager service.\n     */\n    constructor(plugins: EventManagerPlugin[], _zone: NgZone);\n    /**\n     * Registers a handler for a specific element and event.\n     *\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns  A callback function that can be used to remove the handler.\n     */\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    /**\n     * Registers a global handler for an event in a target view.\n     *\n     * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n     * @param eventName The name of the event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns A callback function that can be used to remove the handler.\n     */\n    addGlobalEventListener(target: string, eventName: string, handler: Function): Function;\n    /**\n     * Retrieves the compilation zone in which event listeners are registered.\n     */\n    getZone(): NgZone;\n}\nexport declare abstract class EventManagerPlugin {\n    private _doc;\n    constructor(_doc: any);\n    manager: EventManager;\n    abstract supports(eventName: string): boolean;\n    abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    addGlobalEventListener(element: string, eventName: string, handler: Function): Function;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/events/hammer_gestures.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, ɵConsole as Console } from '@angular/core';\nimport { EventManagerPlugin } from './event_manager';\n/**\n * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * @publicApi\n */\nexport declare const HAMMER_GESTURE_CONFIG: InjectionToken<HammerGestureConfig>;\n/**\n * Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\n *\n * @publicApi\n */\nexport declare type HammerLoader = () => Promise<void>;\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nexport declare const HAMMER_LOADER: InjectionToken<HammerLoader>;\nexport interface HammerInstance {\n    on(eventName: string, callback?: Function): void;\n    off(eventName: string, callback?: Function): void;\n    destroy?(): void;\n}\n/**\n * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\nexport declare class HammerGestureConfig {\n    /**\n     * A set of supported event names for gestures to be used in Angular.\n     * Angular supports all built-in recognizers, as listed in\n     * [HammerJS documentation](http://hammerjs.github.io/).\n     */\n    events: string[];\n    /**\n    * Maps gesture event names to a set of configuration options\n    * that specify overrides to the default values for specific properties.\n    *\n    * The key is a supported event name to be configured,\n    * and the options object contains a set of properties, with override values\n    * to be applied to the named recognizer event.\n    * For example, to disable recognition of the rotate event, specify\n    *  `{\"rotate\": {\"enable\": false}}`.\n    *\n    * Properties that are not present take the HammerJS default values.\n    * For information about which properties are supported for which events,\n    * and their allowed and default values, see\n    * [HammerJS documentation](http://hammerjs.github.io/).\n    *\n    */\n    overrides: {\n        [key: string]: Object;\n    };\n    /**\n     * Properties whose default values can be overridden for a given event.\n     * Different sets of properties apply to different events.\n     * For information about which properties are supported for which events,\n     * and their allowed and default values, see\n     * [HammerJS documentation](http://hammerjs.github.io/).\n     */\n    options?: {\n        cssProps?: any;\n        domEvents?: boolean;\n        enable?: boolean | ((manager: any) => boolean);\n        preset?: any[];\n        touchAction?: string;\n        recognizers?: any[];\n        inputClass?: any;\n        inputTarget?: EventTarget;\n    };\n    /**\n     * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n     * and attaches it to a given HTML element.\n     * @param element The element that will recognize gestures.\n     * @returns A HammerJS event-manager object.\n     */\n    buildHammer(element: HTMLElement): HammerInstance;\n}\nexport declare class HammerGesturesPlugin extends EventManagerPlugin {\n    private _config;\n    private console;\n    private loader?;\n    constructor(doc: any, _config: HammerGestureConfig, console: Console, loader?: HammerLoader | null | undefined);\n    supports(eventName: string): boolean;\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    isCustomEvent(eventName: string): boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/events/key_events.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgZone } from '@angular/core';\nimport { EventManagerPlugin } from './event_manager';\n/**\n * @publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\nexport declare class KeyEventsPlugin extends EventManagerPlugin {\n    /**\n     * Initializes an instance of the browser plug-in.\n     * @param doc The document in which key events will be detected.\n     */\n    constructor(doc: any);\n    /**\n      * Reports whether a named key event is supported.\n      * @param eventName The event name to query.\n      * @return True if the named key event is supported.\n     */\n    supports(eventName: string): boolean;\n    /**\n     * Registers a handler for a specific element and key event.\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the key event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns The key event that was registered.\n    */\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    static parseEventName(eventName: string): {\n        [key: string]: string;\n    } | null;\n    static getEventFullKey(event: KeyboardEvent): string;\n    /**\n     * Configures a handler callback for a key event.\n     * @param fullKey The event name that combines all simultaneous keystrokes.\n     * @param handler The function that responds to the key event.\n     * @param zone The zone in which the event occurred.\n     * @returns A callback function.\n     */\n    static eventCallback(fullKey: any, handler: Function, zone: NgZone): Function;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/shared_styles_host.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OnDestroy } from '@angular/core';\nexport declare class SharedStylesHost {\n    addStyles(styles: string[]): void;\n    onStylesAdded(additions: Set<string>): void;\n    getAllStyles(): string[];\n}\nexport declare class DomSharedStylesHost extends SharedStylesHost implements OnDestroy {\n    private _doc;\n    private _hostNodes;\n    private _styleNodes;\n    constructor(_doc: any);\n    private _addStylesToHost;\n    addHost(hostNode: Node): void;\n    removeHost(hostNode: Node): void;\n    onStylesAdded(additions: Set<string>): void;\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/dom/util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare function camelCaseToDashCase(input: string): string;\nexport declare function dashCaseToCamelCase(input: string): string;\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nexport declare function exportNgVar(name: string, value: any): void;\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/platform-browser.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { BrowserModule, platformBrowser } from './browser';\nexport { Meta, MetaDefinition } from './browser/meta';\nexport { Title } from './browser/title';\nexport { disableDebugTools, enableDebugTools } from './browser/tools/tools';\nexport { BrowserTransferStateModule, StateKey, TransferState, makeStateKey } from './browser/transfer_state';\nexport { By } from './dom/debug/by';\nexport { DOCUMENT } from './dom/dom_tokens';\nexport { EVENT_MANAGER_PLUGINS, EventManager } from './dom/events/event_manager';\nexport { HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerLoader } from './dom/events/hammer_gestures';\nexport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle, SafeUrl, SafeValue } from './security/dom_sanitization_service';\nexport * from './private_export';\nexport { VERSION } from './version';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/private_export.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { BROWSER_SANITIZATION_PROVIDERS as ɵBROWSER_SANITIZATION_PROVIDERS, INTERNAL_BROWSER_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS, initDomAdapter as ɵinitDomAdapter } from './browser';\nexport { BrowserDomAdapter as ɵBrowserDomAdapter } from './browser/browser_adapter';\nexport { BrowserPlatformLocation as ɵBrowserPlatformLocation } from './browser/location/browser_platform_location';\nexport { TRANSITION_ID as ɵTRANSITION_ID } from './browser/server-transition';\nexport { BrowserGetTestability as ɵBrowserGetTestability } from './browser/testability';\nexport { escapeHtml as ɵescapeHtml } from './browser/transfer_state';\nexport { ELEMENT_PROBE_PROVIDERS as ɵELEMENT_PROBE_PROVIDERS } from './dom/debug/ng_probe';\nexport { DomAdapter as ɵDomAdapter, getDOM as ɵgetDOM, setRootDomAdapter as ɵsetRootDomAdapter } from './dom/dom_adapter';\nexport { DomRendererFactory2 as ɵDomRendererFactory2, NAMESPACE_URIS as ɵNAMESPACE_URIS, flattenStyles as ɵflattenStyles, shimContentAttribute as ɵshimContentAttribute, shimHostAttribute as ɵshimHostAttribute } from './dom/dom_renderer';\nexport { DomEventsPlugin as ɵDomEventsPlugin } from './dom/events/dom_events';\nexport { HammerGesturesPlugin as ɵHammerGesturesPlugin } from './dom/events/hammer_gestures';\nexport { KeyEventsPlugin as ɵKeyEventsPlugin } from './dom/events/key_events';\nexport { DomSharedStylesHost as ɵDomSharedStylesHost, SharedStylesHost as ɵSharedStylesHost } from './dom/shared_styles_host';\nexport { DomSanitizerImpl as ɵDomSanitizerImpl } from './security/dom_sanitization_service';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/security/dom_sanitization_service.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Sanitizer, SecurityContext } from '@angular/core';\nexport { SecurityContext };\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {\n}\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {\n}\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {\n}\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {\n}\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {\n}\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {\n}\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n *\n * @publicApi\n */\nexport declare abstract class DomSanitizer implements Sanitizer {\n    /**\n     * Sanitizes a value for use in the given SecurityContext.\n     *\n     * If value is trusted for the context, this method will unwrap the contained safe value and use\n     * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n     * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n     * is responsible to make sure that the value can definitely be safely used in the given context.\n     */\n    abstract sanitize(context: SecurityContext, value: SafeValue | string | null): string | null;\n    /**\n     * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n     * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n     * leave safe HTML intact, so in most situations this method should not be used.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n    /**\n     * Bypass security and trust the given value to be safe style value (CSS).\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n    /**\n     * Bypass security and trust the given value to be safe JavaScript.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustScript(value: string): SafeScript;\n    /**\n     * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n     * in hyperlinks or `<img src>`.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n    /**\n     * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n     * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\nexport declare class DomSanitizerImpl extends DomSanitizer {\n    private _doc;\n    constructor(_doc: any);\n    sanitize(ctx: SecurityContext, value: SafeValue | string | null): string | null;\n    private checkNotSafeValue;\n    bypassSecurityTrustHtml(value: string): SafeHtml;\n    bypassSecurityTrustStyle(value: string): SafeStyle;\n    bypassSecurityTrustScript(value: string): SafeScript;\n    bypassSecurityTrustUrl(value: string): SafeUrl;\n    bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/src/version.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\nimport { Version } from '@angular/core';\n/**\n * @publicApi\n */\nexport declare const VERSION: Version;\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/testing.d.ts",
    "content": "\n  export * from './testing/testing';\n  "
  },
  {
    "path": "node_modules/@angular/platform-browser/testing/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/testing/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/testing/src/browser_util.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgZone } from '@angular/core';\nexport declare let browserDetection: BrowserDetection;\nexport declare class BrowserDetection {\n    private _overrideUa;\n    private readonly _ua;\n    static setup(): void;\n    constructor(ua: string | null);\n    readonly isFirefox: boolean;\n    readonly isAndroid: boolean;\n    readonly isEdge: boolean;\n    readonly isIE: boolean;\n    readonly isWebkit: boolean;\n    readonly isIOS7: boolean;\n    readonly isSlow: boolean;\n    readonly supportsNativeIntlApi: boolean;\n    readonly isChromeDesktop: boolean;\n    readonly isOldChrome: boolean;\n    readonly supportsCustomElements: boolean;\n    readonly supportsDeprecatedCustomCustomElementsV0: boolean;\n    readonly supportsShadowDom: boolean;\n    readonly supportsDeprecatedShadowDomV0: boolean;\n}\nexport declare function dispatchEvent(element: any, eventType: any): void;\nexport declare function el(html: string): HTMLElement;\nexport declare function normalizeCSS(css: string): string;\nexport declare function stringifyElement(el: any /** TODO #9100 */): string;\nexport declare function createNgZone(): NgZone;\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/testing/src/browser.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PlatformRef, StaticProvider } from '@angular/core';\n/**\n * Platform for testing\n *\n * @publicApi\n */\nexport declare const platformBrowserTesting: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;\n/**\n * NgModule for testing.\n *\n * @publicApi\n */\nexport declare class BrowserTestingModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/testing/src/matchers.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '@angular/core';\n/**\n * Jasmine matchers that check Angular specific conditions.\n */\nexport interface NgMatchers<T = any> extends jasmine.Matchers<T> {\n    /**\n     * Expect the value to be a `Promise`.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example testing/ts/matchers.ts region='toBePromise'}\n     */\n    toBePromise(): boolean;\n    /**\n     * Expect the value to be an instance of a class.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example testing/ts/matchers.ts region='toBeAnInstanceOf'}\n     */\n    toBeAnInstanceOf(expected: any): boolean;\n    /**\n     * Expect the element to have exactly the given text.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example testing/ts/matchers.ts region='toHaveText'}\n     */\n    toHaveText(expected: string): boolean;\n    /**\n     * Expect the element to have the given CSS class.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example testing/ts/matchers.ts region='toHaveCssClass'}\n     */\n    toHaveCssClass(expected: string): boolean;\n    /**\n     * Expect the element to have the given CSS styles.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example testing/ts/matchers.ts region='toHaveCssStyle'}\n     */\n    toHaveCssStyle(expected: {\n        [k: string]: string;\n    } | string): boolean;\n    /**\n     * Expect a class to implement the interface of the given class.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example testing/ts/matchers.ts region='toImplement'}\n     */\n    toImplement(expected: any): boolean;\n    /**\n     * Expect an exception to contain the given error text.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example testing/ts/matchers.ts region='toContainError'}\n     */\n    toContainError(expected: any): boolean;\n    /**\n     * Expect a component of the given type to show.\n     */\n    toContainComponent(expectedComponentType: Type<any>, expectationFailOutput?: any): boolean;\n    /**\n     * Invert the matchers.\n     */\n    not: NgMatchers<T>;\n}\n/**\n * Jasmine matching function with Angular matchers mixed in.\n *\n * ## Example\n *\n * {@example testing/ts/matchers.ts region='toHaveText'}\n */\nexport declare const expect: <T = any>(actual: T) => NgMatchers<T>;\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/testing/src/testing.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser/testing package.\n */\nexport * from './browser';\n"
  },
  {
    "path": "node_modules/@angular/platform-browser/testing/testing.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { createNgZone as ɵangular_packages_platform_browser_testing_testing_a } from './src/browser_util';\n"
  },
  {
    "path": "node_modules/@angular/router/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/router/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/index';\n"
  },
  {
    "path": "node_modules/@angular/router/router.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\nexport { ROUTER_FORROOT_GUARD as ɵangular_packages_router_router_a, RouterInitializer as ɵangular_packages_router_router_h, createRouterScroller as ɵangular_packages_router_router_c, getAppInitializer as ɵangular_packages_router_router_i, getBootstrapListener as ɵangular_packages_router_router_j, provideForRootGuard as ɵangular_packages_router_router_e, provideLocationStrategy as ɵangular_packages_router_router_d, provideRouterInitializer as ɵangular_packages_router_router_k, rootRoute as ɵangular_packages_router_router_g, routerNgProbeToken as ɵangular_packages_router_router_b, setupRouter as ɵangular_packages_router_router_f } from './src/router_module';\nexport { RouterScroller as ɵangular_packages_router_router_n } from './src/router_scroller';\nexport { Tree as ɵangular_packages_router_router_l, TreeNode as ɵangular_packages_router_router_m } from './src/utils/tree';\n"
  },
  {
    "path": "node_modules/@angular/router/src/apply_redirects.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Routes } from './config';\nimport { RouterConfigLoader } from './router_config_loader';\nimport { UrlSerializer, UrlTree } from './url_tree';\n/**\n * Returns the `UrlTree` with the redirection applied.\n *\n * Lazy modules are loaded along the way.\n */\nexport declare function applyRedirects(moduleInjector: Injector, configLoader: RouterConfigLoader, urlSerializer: UrlSerializer, urlTree: UrlTree, config: Routes): Observable<UrlTree>;\n"
  },
  {
    "path": "node_modules/@angular/router/src/components/empty_outlet.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This component is used internally within the router to be a placeholder when an empty\n * router-outlet is needed. For example, with a config such as:\n *\n * `{path: 'parent', outlet: 'nav', children: [...]}`\n *\n * In order to render, there needs to be a component on this config, which will default\n * to this `EmptyOutletComponent`.\n */\nexport declare class EmptyOutletComponent {\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/config.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModuleFactory, NgModuleRef, Type } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UrlSegment, UrlSegmentGroup } from './url_tree';\n/**\n * @description\n *\n * Represents router configuration.\n *\n * `Routes` is an array of route configurations. Each one has the following properties:\n *\n * - `path` is a string that uses the route matcher DSL.\n * - `pathMatch` is a string that specifies the matching strategy.\n * - `matcher` defines a custom strategy for path matching and supersedes `path` and `pathMatch`.\n * - `component` is a component type.\n * - `redirectTo` is the url fragment which will replace the current matched segment.\n * - `outlet` is the name of the outlet the component should be placed into.\n * - `canActivate` is an array of DI tokens used to look up CanActivate handlers. See\n *   `CanActivate` for more info.\n * - `canActivateChild` is an array of DI tokens used to look up CanActivateChild handlers. See\n *   `CanActivateChild` for more info.\n * - `canDeactivate` is an array of DI tokens used to look up CanDeactivate handlers. See\n *   `CanDeactivate` for more info.\n * - `canLoad` is an array of DI tokens used to look up CanLoad handlers. See\n *   `CanLoad` for more info.\n * - `data` is additional data provided to the component via `ActivatedRoute`.\n * - `resolve` is a map of DI tokens used to look up data resolvers. See `Resolve` for more\n *   info.\n * - `runGuardsAndResolvers` defines when guards and resolvers will be run. By default they run only\n *    when the matrix parameters of the route change. Options include:\n *    - `paramsChange` (default) - Run guards and resolvers when path or matrix params change. This\n *      mode ignores query param changes.\n *    - `paramsOrQueryParamsChange` - Guards and resolvers will run when any parameters change. This\n *      includes path, matrix, and query params.\n *    - `pathParamsChange` Run guards and resolvers path or any path params change. This mode is\n *      useful if you want to ignore changes to all optional parameters such as query *and* matrix\n *      params.\n *    - `always` - Run guards and resolvers on every navigation.\n * - `children` is an array of child route definitions.\n * - `loadChildren` is a reference to lazy loaded child routes. See `LoadChildren` for more\n *   info.\n *\n * @usageNotes\n * ### Simple Configuration\n *\n * ```\n * [{\n *   path: 'team/:id',\n  *  component: Team,\n *   children: [{\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * When navigating to `/team/11/user/bob`, the router will create the team component with the user\n * component in it.\n *\n * ### Multiple Outlets\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team\n * }, {\n *   path: 'chat/:user',\n *   component: Chat\n *   outlet: 'aux'\n * }]\n * ```\n *\n * When navigating to `/team/11(aux:chat/jim)`, the router will create the team component next to\n * the chat component. The chat component will be placed into the aux outlet.\n *\n * ### Wild Cards\n *\n * ```\n * [{\n *   path: '**',\n *   component: Sink\n * }]\n * ```\n *\n * Regardless of where you navigate to, the router will instantiate the sink component.\n *\n * ### Redirects\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: 'legacy/user/:name',\n *     redirectTo: 'user/:name'\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * When navigating to '/team/11/legacy/user/jim', the router will change the url to\n * '/team/11/user/jim', and then will instantiate the team component with the user component\n * in it.\n *\n * If the `redirectTo` value starts with a '/', then it is an absolute redirect. E.g., if in the\n * example above we change the `redirectTo` to `/user/:name`, the result url will be '/user/jim'.\n *\n * ### Empty Path\n *\n * Empty-path route configurations can be used to instantiate components that do not 'consume'\n * any url segments. Let's look at the following configuration:\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: AllUsers\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * When navigating to `/team/11`, the router will instantiate the AllUsers component.\n *\n * Empty-path routes can have children.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: WrapperCmp,\n *     children: [{\n *       path: 'user/:name',\n *       component: User\n *     }]\n *   }]\n * }]\n * ```\n *\n * When navigating to `/team/11/user/jim`, the router will instantiate the wrapper component with\n * the user component in it.\n *\n * An empty path route inherits its parent's params and data. This is because it cannot have its\n * own params, and, as a result, it often uses its parent's params and data as its own.\n *\n * ### Matching Strategy\n *\n * By default the router will look at what is left in the url, and check if it starts with\n * the specified path (e.g., `/team/11/user` starts with `team/:id`).\n *\n * We can change the matching strategy to make sure that the path covers the whole unconsumed url,\n * which is akin to `unconsumedUrl === path` or `$` regular expressions.\n *\n * This is particularly important when redirecting empty-path routes.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'prefix', //default\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * Since an empty path is a prefix of any url, even when navigating to '/main', the router will\n * still apply the redirect.\n *\n * If `pathMatch: full` is provided, the router will apply the redirect if and only if navigating to\n * '/'.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'full',\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * ### Componentless Routes\n *\n * It is useful at times to have the ability to share parameters between sibling components.\n *\n * Say we have two components--ChildCmp and AuxCmp--that we want to put next to each other and both\n * of them require some id parameter.\n *\n * One way to do that would be to have a bogus parent component, so both the siblings can get the id\n * parameter from it. This is not ideal. Instead, you can use a componentless route.\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: 'a', component: MainChild },\n *      { path: 'b', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * So when navigating to `parent/10/(a//aux:b)`, the route will instantiate the main child and aux\n * child components next to each other. In this example, the application component\n * has to have the primary and aux outlets defined.\n *\n * The router will also merge the `params`, `data`, and `resolve` of the componentless parent into\n * the `params`, `data`, and `resolve` of the children. This is done because there is no component\n * that can inject the activated route of the componentless parent.\n *\n * This is especially useful when child components are defined as follows:\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: '', component: MainChild },\n *      { path: '', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * With this configuration in place, navigating to '/parent/10' will create the main child and aux\n * components.\n *\n * ### Lazy Loading\n *\n * Lazy loading speeds up our application load time by splitting it into multiple bundles, and\n * loading them on demand. The router is designed to make lazy loading simple and easy. Instead of\n * providing the children property, you can provide the `loadChildren` property, as follows:\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   loadChildren: 'team'\n * }]\n * ```\n *\n * The router will use registered NgModuleFactoryLoader to fetch an NgModule associated with 'team'.\n * Then it will extract the set of routes defined in that NgModule, and will transparently add\n * those routes to the main configuration.\n *\n * @publicApi\n */\nexport declare type Routes = Route[];\n/**\n * @description Represents the results of the URL matching.\n *\n * * `consumed` is an array of the consumed URL segments.\n * * `posParams` is a map of positional parameters.\n *\n * @publicApi\n */\nexport declare type UrlMatchResult = {\n    consumed: UrlSegment[];\n    posParams?: {\n        [name: string]: UrlSegment;\n    };\n};\n/**\n * @description\n *\n * A function matching URLs\n *\n * A custom URL matcher can be provided when a combination of `path` and `pathMatch` isn't\n * expressive enough.\n *\n * For instance, the following matcher matches html files.\n *\n * ```\n * export function htmlFiles(url: UrlSegment[]) {\n *   return url.length === 1 && url[0].path.endsWith('.html') ? ({consumed: url}) : null;\n * }\n *\n * export const routes = [{ matcher: htmlFiles, component: AnyComponent }];\n * ```\n *\n * @publicApi\n */\nexport declare type UrlMatcher = (segments: UrlSegment[], group: UrlSegmentGroup, route: Route) => UrlMatchResult;\n/**\n * @description\n *\n * Represents the static data associated with a particular route.\n *\n * See `Routes` for more details.\n *\n * @publicApi\n */\nexport declare type Data = {\n    [name: string]: any;\n};\n/**\n * @description\n *\n * Represents the resolved data associated with a particular route.\n *\n * See `Routes` for more details.\n *\n * @publicApi\n */\nexport declare type ResolveData = {\n    [name: string]: any;\n};\n/**\n * @description\n *\n * The type of `loadChildren`.\n *\n * See `Routes` for more details.\n *\n * @publicApi\n */\nexport declare type LoadChildrenCallback = () => Type<any> | NgModuleFactory<any> | Promise<Type<any>> | Observable<Type<any>>;\n/**\n * @description\n *\n * The type of `loadChildren`.\n *\n * See `Routes` for more details.\n *\n * @publicApi\n */\nexport declare type LoadChildren = string | LoadChildrenCallback;\n/**\n * @description\n *\n * The type of `queryParamsHandling`.\n *\n * See `RouterLink` for more details.\n *\n */\nexport declare type QueryParamsHandling = 'merge' | 'preserve' | '';\n/**\n * @description\n *\n * The type of `runGuardsAndResolvers`.\n *\n * See `Routes` for more details.\n * @publicApi\n */\nexport declare type RunGuardsAndResolvers = 'pathParamsChange' | 'paramsChange' | 'paramsOrQueryParamsChange' | 'always';\n/**\n * See `Routes` for more details.\n *\n * @publicApi\n */\nexport interface Route {\n    path?: string;\n    pathMatch?: string;\n    matcher?: UrlMatcher;\n    component?: Type<any>;\n    redirectTo?: string;\n    outlet?: string;\n    canActivate?: any[];\n    canActivateChild?: any[];\n    canDeactivate?: any[];\n    canLoad?: any[];\n    data?: Data;\n    resolve?: ResolveData;\n    children?: Routes;\n    loadChildren?: LoadChildren;\n    runGuardsAndResolvers?: RunGuardsAndResolvers;\n}\nexport declare class LoadedRouterConfig {\n    routes: Route[];\n    module: NgModuleRef<any>;\n    constructor(routes: Route[], module: NgModuleRef<any>);\n}\nexport declare function validateConfig(config: Routes, parentPath?: string): void;\n/**\n * Makes a copy of the config and adds any default required properties.\n */\nexport declare function standardizeConfig(r: Route): Route;\n"
  },
  {
    "path": "node_modules/@angular/router/src/create_router_state.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { RouteReuseStrategy } from './route_reuse_strategy';\nimport { RouterState, RouterStateSnapshot } from './router_state';\nexport declare function createRouterState(routeReuseStrategy: RouteReuseStrategy, curr: RouterStateSnapshot, prevState: RouterState): RouterState;\n"
  },
  {
    "path": "node_modules/@angular/router/src/create_url_tree.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActivatedRoute } from './router_state';\nimport { Params } from './shared';\nimport { UrlTree } from './url_tree';\nexport declare function createUrlTree(route: ActivatedRoute, urlTree: UrlTree, commands: any[], queryParams: Params, fragment: string): UrlTree;\n"
  },
  {
    "path": "node_modules/@angular/router/src/directives/router_link_active.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, OnChanges, OnDestroy, QueryList, Renderer2, SimpleChanges } from '@angular/core';\nimport { Router } from '../router';\nimport { RouterLink, RouterLinkWithHref } from './router_link';\n/**\n *\n * @description\n *\n * Lets you add a CSS class to an element when the link's route becomes active.\n *\n * This directive lets you add a CSS class to an element when the link's route\n * becomes active.\n *\n * Consider the following example:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n *\n * When the url is either '/user' or '/user/bob', the active-link class will\n * be added to the `a` tag. If the url changes, the class will be removed.\n *\n * You can set more than one class, as follows:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n *\n * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\n * only when the url matches the link exactly.\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n *\n * You can assign the RouterLinkActive instance to a template variable and directly check\n * the `isActive` status.\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n *\n * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n *\n * ```\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim</a>\n *   <a routerLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n *\n * This will set the active-link class on the div tag if the url is either '/user/jim' or\n * '/user/bob'.\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nexport declare class RouterLinkActive implements OnChanges, OnDestroy, AfterContentInit {\n    private router;\n    private element;\n    private renderer;\n    private cdr;\n    links: QueryList<RouterLink>;\n    linksWithHrefs: QueryList<RouterLinkWithHref>;\n    private classes;\n    private subscription;\n    readonly isActive: boolean;\n    routerLinkActiveOptions: {\n        exact: boolean;\n    };\n    constructor(router: Router, element: ElementRef, renderer: Renderer2, cdr: ChangeDetectorRef);\n    ngAfterContentInit(): void;\n    routerLinkActive: string[] | string;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    private update;\n    private isLinkActive;\n    private hasActiveLinks;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/directives/router_link.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LocationStrategy } from '@angular/common';\nimport { ElementRef, OnChanges, OnDestroy, Renderer2 } from '@angular/core';\nimport { QueryParamsHandling } from '../config';\nimport { Router } from '../router';\nimport { ActivatedRoute } from '../router_state';\nimport { UrlTree } from '../url_tree';\n/**\n * @description\n *\n * Lets you link to specific routes in your app.\n *\n * Consider the following route configuration:\n * `[{ path: 'user/:name', component: UserCmp }]`.\n * When linking to this `user/:name` route, you use the `RouterLink` directive.\n *\n * If the link is static, you can use the directive as follows:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n *\n * If you use dynamic values to generate the link, you can pass an array of path\n * segments, followed by the params for each segment.\n *\n * For instance `['/team', teamId, 'user', userName, {details: true}]`\n * means that we want to generate a link to `/team/11/user/bob;details=true`.\n *\n * Multiple static segments can be merged into one\n * (e.g., `['/team/11/user', userName, {details: true}]`).\n *\n * The first segment name can be prepended with `/`, `./`, or `../`:\n * * If the first segment begins with `/`, the router will look up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router will\n *   instead look in the children of the current activated route.\n * * And if the first segment begins with `../`, the router will go up one level.\n *\n * You can set query params and fragment as follows:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.\n *\n * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the\n * directive to preserve the current query params and fragment:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment>\n *   link to user component\n * </a>\n * ```\n *\n * You can tell the directive to how to handle queryParams, available options are:\n *  - `'merge'`: merge the queryParams into the current queryParams\n *  - `'preserve'`: preserve the current queryParams\n *  - default/`''`: use the queryParams only\n *\n * Same options for {@link NavigationExtras#queryParamsHandling\n * NavigationExtras#queryParamsHandling}.\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n *\n * The router link directive always treats the provided input as a delta to the current url.\n *\n * For instance, if the current url is `/user/(box//aux:team)`.\n *\n * Then the following link `<a [routerLink]=\"['/user/jim']\">Jim</a>` will generate the link\n * `/user/(jim//aux:team)`.\n *\n * See {@link Router#createUrlTree createUrlTree} for more information.\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nexport declare class RouterLink {\n    private router;\n    private route;\n    queryParams: {\n        [k: string]: any;\n    };\n    fragment: string;\n    queryParamsHandling: QueryParamsHandling;\n    preserveFragment: boolean;\n    skipLocationChange: boolean;\n    replaceUrl: boolean;\n    private commands;\n    private preserve;\n    constructor(router: Router, route: ActivatedRoute, tabIndex: string, renderer: Renderer2, el: ElementRef);\n    routerLink: any[] | string;\n    /**\n     * @deprecated 4.0.0 use `queryParamsHandling` instead.\n     */\n    preserveQueryParams: boolean;\n    onClick(): boolean;\n    readonly urlTree: UrlTree;\n}\n/**\n * @description\n *\n * Lets you link to specific routes in your app.\n *\n * See `RouterLink` for more information.\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nexport declare class RouterLinkWithHref implements OnChanges, OnDestroy {\n    private router;\n    private route;\n    private locationStrategy;\n    target: string;\n    queryParams: {\n        [k: string]: any;\n    };\n    fragment: string;\n    queryParamsHandling: QueryParamsHandling;\n    preserveFragment: boolean;\n    skipLocationChange: boolean;\n    replaceUrl: boolean;\n    private commands;\n    private subscription;\n    private preserve;\n    href: string;\n    constructor(router: Router, route: ActivatedRoute, locationStrategy: LocationStrategy);\n    routerLink: any[] | string;\n    preserveQueryParams: boolean;\n    ngOnChanges(changes: {}): any;\n    ngOnDestroy(): any;\n    onClick(button: number, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean): boolean;\n    private updateTargetUrlAndHref;\n    readonly urlTree: UrlTree;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/directives/router_outlet.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, EventEmitter, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\nimport { Data } from '../config';\nimport { ChildrenOutletContexts } from '../router_outlet_context';\nimport { ActivatedRoute } from '../router_state';\n/**\n * @description\n *\n * Acts as a placeholder that Angular dynamically fills based on the current router state.\n *\n * ```\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n *\n * A router outlet will emit an activate event any time a new component is being instantiated,\n * and a deactivate event when it is being destroyed.\n *\n * ```\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'></router-outlet>\n * ```\n * @ngModule RouterModule\n *\n * @publicApi\n */\nexport declare class RouterOutlet implements OnDestroy, OnInit {\n    private parentContexts;\n    private location;\n    private resolver;\n    private changeDetector;\n    private activated;\n    private _activatedRoute;\n    private name;\n    activateEvents: EventEmitter<any>;\n    deactivateEvents: EventEmitter<any>;\n    constructor(parentContexts: ChildrenOutletContexts, location: ViewContainerRef, resolver: ComponentFactoryResolver, name: string, changeDetector: ChangeDetectorRef);\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    readonly isActivated: boolean;\n    readonly component: Object;\n    readonly activatedRoute: ActivatedRoute;\n    readonly activatedRouteData: Data;\n    /**\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\n     */\n    detach(): ComponentRef<any>;\n    /**\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n     */\n    attach(ref: ComponentRef<any>, activatedRoute: ActivatedRoute): void;\n    deactivate(): void;\n    activateWith(activatedRoute: ActivatedRoute, resolver: ComponentFactoryResolver | null): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/events.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Route } from './config';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from './router_state';\n/**\n * @description\n *\n * Identifies the trigger of the navigation.\n *\n * * 'imperative'--triggered by `router.navigateByUrl` or `router.navigate`.\n * * 'popstate'--triggered by a popstate event\n * * 'hashchange'--triggered by a hashchange event\n *\n * @publicApi\n */\nexport declare type NavigationTrigger = 'imperative' | 'popstate' | 'hashchange';\n/**\n * @description\n *\n * Base for events the Router goes through, as opposed to events tied to a specific\n * Route. `RouterEvent`s will only be fired one time for any given navigation.\n *\n * Example:\n *\n * ```\n * class MyService {\n *   constructor(public router: Router, logger: Logger) {\n *     router.events.pipe(\n *       filter(e => e instanceof RouterEvent)\n *     ).subscribe(e => {\n *       logger.log(e.id, e.url);\n *     });\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport declare class RouterEvent {\n    /** @docsNotRequired */\n    id: number;\n    /** @docsNotRequired */\n    url: string;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string);\n}\n/**\n * @description\n *\n * Represents an event triggered when a navigation starts.\n *\n * @publicApi\n */\nexport declare class NavigationStart extends RouterEvent {\n    /**\n     * Identifies the trigger of the navigation.\n     *\n     * * 'imperative'--triggered by `router.navigateByUrl` or `router.navigate`.\n     * * 'popstate'--triggered by a popstate event\n     * * 'hashchange'--triggered by a hashchange event\n     */\n    navigationTrigger?: 'imperative' | 'popstate' | 'hashchange';\n    /**\n     * This contains the navigation id that pushed the history record that the router navigates\n     * back to. This is not null only when the navigation is triggered by a popstate event.\n     *\n     * The router assigns a navigationId to every router transition/navigation. Even when the user\n     * clicks on the back button in the browser, a new navigation id will be created. So from\n     * the perspective of the router, the router never \"goes back\". By using the `restoredState`\n     * and its navigationId, you can implement behavior that differentiates between creating new\n     * states\n     * and popstate events. In the latter case you can restore some remembered state (e.g., scroll\n     * position).\n     */\n    restoredState?: {\n        navigationId: number;\n    } | null;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string, \n    /** @docsNotRequired */\n    navigationTrigger?: 'imperative' | 'popstate' | 'hashchange', \n    /** @docsNotRequired */\n    restoredState?: {\n        navigationId: number;\n    } | null);\n    /** @docsNotRequired */\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents an event triggered when a navigation ends successfully.\n *\n * @publicApi\n */\nexport declare class NavigationEnd extends RouterEvent {\n    /** @docsNotRequired */\n    urlAfterRedirects: string;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string, \n    /** @docsNotRequired */\n    urlAfterRedirects: string);\n    /** @docsNotRequired */\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents an event triggered when a navigation is canceled.\n *\n * @publicApi\n */\nexport declare class NavigationCancel extends RouterEvent {\n    /** @docsNotRequired */\n    reason: string;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string, \n    /** @docsNotRequired */\n    reason: string);\n    /** @docsNotRequired */\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents an event triggered when a navigation fails due to an unexpected error.\n *\n * @publicApi\n */\nexport declare class NavigationError extends RouterEvent {\n    /** @docsNotRequired */\n    error: any;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string, \n    /** @docsNotRequired */\n    error: any);\n    /** @docsNotRequired */\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents an event triggered when routes are recognized.\n *\n * @publicApi\n */\nexport declare class RoutesRecognized extends RouterEvent {\n    /** @docsNotRequired */\n    urlAfterRedirects: string;\n    /** @docsNotRequired */\n    state: RouterStateSnapshot;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string, \n    /** @docsNotRequired */\n    urlAfterRedirects: string, \n    /** @docsNotRequired */\n    state: RouterStateSnapshot);\n    /** @docsNotRequired */\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the start of the Guard phase of routing.\n *\n * @publicApi\n */\nexport declare class GuardsCheckStart extends RouterEvent {\n    /** @docsNotRequired */\n    urlAfterRedirects: string;\n    /** @docsNotRequired */\n    state: RouterStateSnapshot;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string, \n    /** @docsNotRequired */\n    urlAfterRedirects: string, \n    /** @docsNotRequired */\n    state: RouterStateSnapshot);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the end of the Guard phase of routing.\n *\n * @publicApi\n */\nexport declare class GuardsCheckEnd extends RouterEvent {\n    /** @docsNotRequired */\n    urlAfterRedirects: string;\n    /** @docsNotRequired */\n    state: RouterStateSnapshot;\n    /** @docsNotRequired */\n    shouldActivate: boolean;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string, \n    /** @docsNotRequired */\n    urlAfterRedirects: string, \n    /** @docsNotRequired */\n    state: RouterStateSnapshot, \n    /** @docsNotRequired */\n    shouldActivate: boolean);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the start of the Resolve phase of routing. The timing of this\n * event may change, thus it's experimental. In the current iteration it will run\n * in the \"resolve\" phase whether there's things to resolve or not. In the future this\n * behavior may change to only run when there are things to be resolved.\n *\n * @publicApi\n */\nexport declare class ResolveStart extends RouterEvent {\n    /** @docsNotRequired */\n    urlAfterRedirects: string;\n    /** @docsNotRequired */\n    state: RouterStateSnapshot;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string, \n    /** @docsNotRequired */\n    urlAfterRedirects: string, \n    /** @docsNotRequired */\n    state: RouterStateSnapshot);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the end of the Resolve phase of routing. See note on\n * `ResolveStart` for use of this experimental API.\n *\n * @publicApi\n */\nexport declare class ResolveEnd extends RouterEvent {\n    /** @docsNotRequired */\n    urlAfterRedirects: string;\n    /** @docsNotRequired */\n    state: RouterStateSnapshot;\n    constructor(\n    /** @docsNotRequired */\n    id: number, \n    /** @docsNotRequired */\n    url: string, \n    /** @docsNotRequired */\n    urlAfterRedirects: string, \n    /** @docsNotRequired */\n    state: RouterStateSnapshot);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents an event triggered before lazy loading a route config.\n *\n * @publicApi\n */\nexport declare class RouteConfigLoadStart {\n    /** @docsNotRequired */\n    route: Route;\n    constructor(\n    /** @docsNotRequired */\n    route: Route);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents an event triggered when a route has been lazy loaded.\n *\n * @publicApi\n */\nexport declare class RouteConfigLoadEnd {\n    /** @docsNotRequired */\n    route: Route;\n    constructor(\n    /** @docsNotRequired */\n    route: Route);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ChildActivationEnd` for use of this experimental API.\n *\n * @publicApi\n */\nexport declare class ChildActivationStart {\n    /** @docsNotRequired */\n    snapshot: ActivatedRouteSnapshot;\n    constructor(\n    /** @docsNotRequired */\n    snapshot: ActivatedRouteSnapshot);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ChildActivationStart` for use of this experimental API.\n *\n * @publicApi\n */\nexport declare class ChildActivationEnd {\n    /** @docsNotRequired */\n    snapshot: ActivatedRouteSnapshot;\n    constructor(\n    /** @docsNotRequired */\n    snapshot: ActivatedRouteSnapshot);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ActivationEnd` for use of this experimental API.\n *\n * @publicApi\n */\nexport declare class ActivationStart {\n    /** @docsNotRequired */\n    snapshot: ActivatedRouteSnapshot;\n    constructor(\n    /** @docsNotRequired */\n    snapshot: ActivatedRouteSnapshot);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ActivationStart` for use of this experimental API.\n *\n * @publicApi\n */\nexport declare class ActivationEnd {\n    /** @docsNotRequired */\n    snapshot: ActivatedRouteSnapshot;\n    constructor(\n    /** @docsNotRequired */\n    snapshot: ActivatedRouteSnapshot);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents a scrolling event.\n *\n * @publicApi\n */\nexport declare class Scroll {\n    /** @docsNotRequired */\n    readonly routerEvent: NavigationEnd;\n    /** @docsNotRequired */\n    readonly position: [number, number] | null;\n    /** @docsNotRequired */\n    readonly anchor: string | null;\n    constructor(\n    /** @docsNotRequired */\n    routerEvent: NavigationEnd, \n    /** @docsNotRequired */\n    position: [number, number] | null, \n    /** @docsNotRequired */\n    anchor: string | null);\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents a router event, allowing you to track the lifecycle of the router.\n *\n * The sequence of router events is:\n *\n * - `NavigationStart`,\n * - `RouteConfigLoadStart`,\n * - `RouteConfigLoadEnd`,\n * - `RoutesRecognized`,\n * - `GuardsCheckStart`,\n * - `ChildActivationStart`,\n * - `ActivationStart`,\n * - `GuardsCheckEnd`,\n * - `ResolveStart`,\n * - `ResolveEnd`,\n * - `ActivationEnd`\n * - `ChildActivationEnd`\n * - `NavigationEnd`,\n * - `NavigationCancel`,\n * - `NavigationError`\n * - `Scroll`\n *\n * @publicApi\n */\nexport declare type Event = RouterEvent | RouteConfigLoadStart | RouteConfigLoadEnd | ChildActivationStart | ChildActivationEnd | ActivationStart | ActivationEnd | Scroll;\n"
  },
  {
    "path": "node_modules/@angular/router/src/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { Data, LoadChildren, LoadChildrenCallback, ResolveData, Route, Routes, RunGuardsAndResolvers, UrlMatchResult, UrlMatcher } from './config';\nexport { RouterLink, RouterLinkWithHref } from './directives/router_link';\nexport { RouterLinkActive } from './directives/router_link_active';\nexport { RouterOutlet } from './directives/router_outlet';\nexport { ActivationEnd, ActivationStart, ChildActivationEnd, ChildActivationStart, Event, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouterEvent, RoutesRecognized, Scroll } from './events';\nexport { CanActivate, CanActivateChild, CanDeactivate, CanLoad, Resolve } from './interfaces';\nexport { DetachedRouteHandle, RouteReuseStrategy } from './route_reuse_strategy';\nexport { NavigationExtras, Router } from './router';\nexport { ROUTES } from './router_config_loader';\nexport { ExtraOptions, ROUTER_CONFIGURATION, ROUTER_INITIALIZER, RouterModule, provideRoutes } from './router_module';\nexport { ChildrenOutletContexts, OutletContext } from './router_outlet_context';\nexport { NoPreloading, PreloadAllModules, PreloadingStrategy, RouterPreloader } from './router_preloader';\nexport { ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot } from './router_state';\nexport { PRIMARY_OUTLET, ParamMap, Params, convertToParamMap } from './shared';\nexport { UrlHandlingStrategy } from './url_handling_strategy';\nexport { DefaultUrlSerializer, UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree } from './url_tree';\nexport { VERSION } from './version';\nexport * from './private_export';\n"
  },
  {
    "path": "node_modules/@angular/router/src/interfaces.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { Route } from './config';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from './router_state';\nimport { UrlSegment, UrlTree } from './url_tree';\n/**\n * @description\n *\n * Interface that a class can implement to be a guard deciding if a route can be activated.\n * If all guards return `true`, navigation will continue. If any guard returns `false`,\n * navigation will be cancelled. If any guard returns a `UrlTree`, current navigation will\n * be cancelled and a new navigation will be kicked off to the `UrlTree` returned from the\n * guard.\n *\n * ```\n * class UserToken {}\n * class Permissions {\n *   canActivate(user: UserToken, id: string): boolean {\n *     return true;\n *   }\n * }\n *\n * @Injectable()\n * class CanActivateTeam implements CanActivate {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canActivate(\n *     route: ActivatedRouteSnapshot,\n *     state: RouterStateSnapshot\n *   ): Observable<boolean|UrlTree>|Promise<boolean|UrlTree>|boolean|UrlTree {\n *     return this.permissions.canActivate(this.currentUser, route.params.id);\n *   }\n * }\n *\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         canActivate: [CanActivateTeam]\n *       }\n *     ])\n *   ],\n *   providers: [CanActivateTeam, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n *\n * You can alternatively provide a function with the `canActivate` signature:\n *\n * ```\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         canActivate: ['canActivateTeam']\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'canActivateTeam',\n *       useValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => true\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n *\n * @publicApi\n */\nexport interface CanActivate {\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree;\n}\nexport declare type CanActivateFn = (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree;\n/**\n * @description\n *\n * Interface that a class can implement to be a guard deciding if a child route can be activated.\n * If all guards return `true`, navigation will continue. If any guard returns `false`,\n * navigation will be cancelled. If any guard returns a `UrlTree`, current navigation will\n * be cancelled and a new navigation will be kicked off to the `UrlTree` returned from the\n * guard.\n *\n * ```\n * class UserToken {}\n * class Permissions {\n *   canActivate(user: UserToken, id: string): boolean {\n *     return true;\n *   }\n * }\n *\n * @Injectable()\n * class CanActivateTeam implements CanActivateChild {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canActivateChild(\n *     route: ActivatedRouteSnapshot,\n *     state: RouterStateSnapshot\n *   ): Observable<boolean|UrlTree>|Promise<boolean|UrlTree>|boolean|UrlTree {\n *     return this.permissions.canActivate(this.currentUser, route.params.id);\n *   }\n * }\n *\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'root',\n *         canActivateChild: [CanActivateTeam],\n *         children: [\n *           {\n *              path: 'team/:id',\n *              component: Team\n *           }\n *         ]\n *       }\n *     ])\n *   ],\n *   providers: [CanActivateTeam, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n *\n * You can alternatively provide a function with the `canActivateChild` signature:\n *\n * ```\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'root',\n *         canActivateChild: ['canActivateTeam'],\n *         children: [\n *           {\n *             path: 'team/:id',\n *             component: Team\n *           }\n *         ]\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'canActivateTeam',\n *       useValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => true\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n *\n * @publicApi\n */\nexport interface CanActivateChild {\n    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree;\n}\nexport declare type CanActivateChildFn = (childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot) => Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree;\n/**\n * @description\n *\n * Interface that a class can implement to be a guard deciding if a route can be deactivated.\n * If all guards return `true`, navigation will continue. If any guard returns `false`,\n * navigation will be cancelled. If any guard returns a `UrlTree`, current navigation will\n * be cancelled and a new navigation will be kicked off to the `UrlTree` returned from the\n * guard.\n *\n * ```\n * class UserToken {}\n * class Permissions {\n *   canDeactivate(user: UserToken, id: string): boolean {\n *     return true;\n *   }\n * }\n *\n * @Injectable()\n * class CanDeactivateTeam implements CanDeactivate<TeamComponent> {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canDeactivate(\n *     component: TeamComponent,\n *     currentRoute: ActivatedRouteSnapshot,\n *     currentState: RouterStateSnapshot,\n *     nextState: RouterStateSnapshot\n *   ): Observable<boolean|UrlTree>|Promise<boolean|UrlTree>|boolean|UrlTree {\n *     return this.permissions.canDeactivate(this.currentUser, route.params.id);\n *   }\n * }\n *\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         canDeactivate: [CanDeactivateTeam]\n *       }\n *     ])\n *   ],\n *   providers: [CanDeactivateTeam, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n *\n * You can alternatively provide a function with the `canDeactivate` signature:\n *\n * ```\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         canDeactivate: ['canDeactivateTeam']\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'canDeactivateTeam',\n *       useValue: (component: TeamComponent, currentRoute: ActivatedRouteSnapshot, currentState:\n * RouterStateSnapshot, nextState: RouterStateSnapshot) => true\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n *\n * @publicApi\n */\nexport interface CanDeactivate<T> {\n    canDeactivate(component: T, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot, nextState?: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree;\n}\nexport declare type CanDeactivateFn<T> = (component: T, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot, nextState?: RouterStateSnapshot) => Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree;\n/**\n * @description\n *\n * Interface that class can implement to be a data provider.\n *\n * ```\n * class Backend {\n *   fetchTeam(id: string) {\n *     return 'someTeam';\n *   }\n * }\n *\n * @Injectable()\n * class TeamResolver implements Resolve<Team> {\n *   constructor(private backend: Backend) {}\n *\n *   resolve(\n *     route: ActivatedRouteSnapshot,\n *     state: RouterStateSnapshot\n *   ): Observable<any>|Promise<any>|any {\n *     return this.backend.fetchTeam(route.params.id);\n *   }\n * }\n *\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         resolve: {\n *           team: TeamResolver\n *         }\n *       }\n *     ])\n *   ],\n *   providers: [TeamResolver]\n * })\n * class AppModule {}\n * ```\n *\n * You can alternatively provide a function with the `resolve` signature:\n *\n * ```\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         resolve: {\n *           team: 'teamResolver'\n *         }\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'teamResolver',\n *       useValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => 'team'\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n *\n * @publicApi\n */\nexport interface Resolve<T> {\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<T> | Promise<T> | T;\n}\n/**\n * @description\n *\n * Interface that a class can implement to be a guard deciding if a children can be loaded.\n *\n * ```\n * class UserToken {}\n * class Permissions {\n *   canLoadChildren(user: UserToken, id: string, segments: UrlSegment[]): boolean {\n *     return true;\n *   }\n * }\n *\n * @Injectable()\n * class CanLoadTeamSection implements CanLoad {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canLoad(route: Route, segments: UrlSegment[]): Observable<boolean>|Promise<boolean>|boolean {\n *     return this.permissions.canLoadChildren(this.currentUser, route, segments);\n *   }\n * }\n *\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         loadChildren: 'team.js',\n *         canLoad: [CanLoadTeamSection]\n *       }\n *     ])\n *   ],\n *   providers: [CanLoadTeamSection, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n *\n * You can alternatively provide a function with the `canLoad` signature:\n *\n * ```\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         loadChildren: 'team.js',\n *         canLoad: ['canLoadTeamSection']\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'canLoadTeamSection',\n *       useValue: (route: Route, segments: UrlSegment[]) => true\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n *\n * @publicApi\n */\nexport interface CanLoad {\n    canLoad(route: Route, segments: UrlSegment[]): Observable<boolean> | Promise<boolean> | boolean;\n}\nexport declare type CanLoadFn = (route: Route, segments: UrlSegment[]) => Observable<boolean> | Promise<boolean> | boolean;\n"
  },
  {
    "path": "node_modules/@angular/router/src/operators/activate_routes.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MonoTypeOperatorFunction } from 'rxjs';\nimport { Event } from '../events';\nimport { RouteReuseStrategy } from '../route_reuse_strategy';\nimport { NavigationTransition } from '../router';\nimport { ChildrenOutletContexts } from '../router_outlet_context';\nimport { RouterState } from '../router_state';\nexport declare const activateRoutes: (rootContexts: ChildrenOutletContexts, routeReuseStrategy: RouteReuseStrategy, forwardEvent: (evt: Event) => void) => MonoTypeOperatorFunction<NavigationTransition>;\nexport declare class ActivateRoutes {\n    private routeReuseStrategy;\n    private futureState;\n    private currState;\n    private forwardEvent;\n    constructor(routeReuseStrategy: RouteReuseStrategy, futureState: RouterState, currState: RouterState, forwardEvent: (evt: Event) => void);\n    activate(parentContexts: ChildrenOutletContexts): void;\n    private deactivateChildRoutes;\n    private deactivateRoutes;\n    private deactivateRouteAndItsChildren;\n    private detachAndStoreRouteSubtree;\n    private deactivateRouteAndOutlet;\n    private activateChildRoutes;\n    private activateRoutes;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/operators/apply_redirects.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '@angular/core';\nimport { MonoTypeOperatorFunction } from 'rxjs';\nimport { Routes } from '../config';\nimport { NavigationTransition } from '../router';\nimport { RouterConfigLoader } from '../router_config_loader';\nimport { UrlSerializer } from '../url_tree';\nexport declare function applyRedirects(moduleInjector: Injector, configLoader: RouterConfigLoader, urlSerializer: UrlSerializer, config: Routes): MonoTypeOperatorFunction<NavigationTransition>;\n"
  },
  {
    "path": "node_modules/@angular/router/src/operators/check_guards.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '@angular/core';\nimport { MonoTypeOperatorFunction } from 'rxjs';\nimport { Event } from '../events';\nimport { NavigationTransition } from '../router';\nexport declare function checkGuards(moduleInjector: Injector, forwardEvent?: (evt: Event) => void): MonoTypeOperatorFunction<NavigationTransition>;\n"
  },
  {
    "path": "node_modules/@angular/router/src/operators/prioritized_guard_value.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable, OperatorFunction } from 'rxjs';\nimport { UrlTree } from '../url_tree';\nexport declare function prioritizedGuardValue(): OperatorFunction<Observable<boolean | UrlTree>[], boolean | UrlTree>;\n"
  },
  {
    "path": "node_modules/@angular/router/src/operators/recognize.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '@angular/core';\nimport { MonoTypeOperatorFunction } from 'rxjs';\nimport { Route } from '../config';\nimport { NavigationTransition } from '../router';\nimport { UrlTree } from '../url_tree';\nexport declare function recognize(rootComponentType: Type<any> | null, config: Route[], serializer: (url: UrlTree) => string, paramsInheritanceStrategy: 'emptyOnly' | 'always', relativeLinkResolution: 'legacy' | 'corrected'): MonoTypeOperatorFunction<NavigationTransition>;\n"
  },
  {
    "path": "node_modules/@angular/router/src/operators/resolve_data.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '@angular/core';\nimport { MonoTypeOperatorFunction } from 'rxjs';\nimport { NavigationTransition } from '../router';\nexport declare function resolveData(paramsInheritanceStrategy: 'emptyOnly' | 'always', moduleInjector: Injector): MonoTypeOperatorFunction<NavigationTransition>;\n"
  },
  {
    "path": "node_modules/@angular/router/src/operators/switch_tap.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MonoTypeOperatorFunction, ObservableInput } from 'rxjs';\n/**\n * Perform a side effect through a switchMap for every emission on the source Observable,\n * but return an Observable that is identical to the source. It's essentially the same as\n * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,\n * it will wait before continuing with the original value.\n */\nexport declare function switchTap<T>(next: (x: T) => void | ObservableInput<any>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/@angular/router/src/private_export.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { EmptyOutletComponent as ɵEmptyOutletComponent } from './components/empty_outlet';\nexport { ROUTER_PROVIDERS as ɵROUTER_PROVIDERS } from './router_module';\nexport { flatten as ɵflatten } from './utils/collection';\n"
  },
  {
    "path": "node_modules/@angular/router/src/recognize.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Routes } from './config';\nimport { ParamsInheritanceStrategy, RouterStateSnapshot } from './router_state';\nimport { UrlTree } from './url_tree';\nexport declare function recognize(rootComponentType: Type<any> | null, config: Routes, urlTree: UrlTree, url: string, paramsInheritanceStrategy?: ParamsInheritanceStrategy, relativeLinkResolution?: 'legacy' | 'corrected'): Observable<RouterStateSnapshot>;\n"
  },
  {
    "path": "node_modules/@angular/router/src/route_reuse_strategy.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActivatedRouteSnapshot } from './router_state';\n/**\n * @description\n *\n * Represents the detached route tree.\n *\n * This is an opaque value the router will give to a custom route reuse strategy\n * to store and retrieve later on.\n *\n * @publicApi\n */\nexport declare type DetachedRouteHandle = {};\n/**\n * @description\n *\n * Provides a way to customize when activated routes get reused.\n *\n * @publicApi\n */\nexport declare abstract class RouteReuseStrategy {\n    /** Determines if this route (and its subtree) should be detached to be reused later */\n    abstract shouldDetach(route: ActivatedRouteSnapshot): boolean;\n    /**\n     * Stores the detached route.\n     *\n     * Storing a `null` value should erase the previously stored value.\n     */\n    abstract store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle | null): void;\n    /** Determines if this route (and its subtree) should be reattached */\n    abstract shouldAttach(route: ActivatedRouteSnapshot): boolean;\n    /** Retrieves the previously stored route */\n    abstract retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null;\n    /** Determines if a route should be reused */\n    abstract shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean;\n}\n/**\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n */\nexport declare class DefaultRouteReuseStrategy implements RouteReuseStrategy {\n    shouldDetach(route: ActivatedRouteSnapshot): boolean;\n    store(route: ActivatedRouteSnapshot, detachedTree: DetachedRouteHandle): void;\n    shouldAttach(route: ActivatedRouteSnapshot): boolean;\n    retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null;\n    shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/router_config_loader.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Compiler, InjectionToken, Injector, NgModuleFactoryLoader } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { LoadedRouterConfig, Route } from './config';\n/**\n * @docsNotRequired\n * @publicApi\n */\nexport declare const ROUTES: InjectionToken<Route[][]>;\nexport declare class RouterConfigLoader {\n    private loader;\n    private compiler;\n    private onLoadStartListener?;\n    private onLoadEndListener?;\n    constructor(loader: NgModuleFactoryLoader, compiler: Compiler, onLoadStartListener?: ((r: Route) => void) | undefined, onLoadEndListener?: ((r: Route) => void) | undefined);\n    load(parentInjector: Injector, route: Route): Observable<LoadedRouterConfig>;\n    private loadModuleFactory;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/router_module.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HashLocationStrategy, Location, PathLocationStrategy, PlatformLocation, ViewportScroller } from '@angular/common';\nimport { ApplicationRef, Compiler, ComponentRef, InjectionToken, Injector, ModuleWithProviders, NgModuleFactoryLoader, NgProbeToken, Provider } from '@angular/core';\nimport { Route, Routes } from './config';\nimport { RouteReuseStrategy } from './route_reuse_strategy';\nimport { ErrorHandler, Router } from './router';\nimport { ChildrenOutletContexts } from './router_outlet_context';\nimport { RouterScroller } from './router_scroller';\nimport { ActivatedRoute } from './router_state';\nimport { UrlHandlingStrategy } from './url_handling_strategy';\nimport { UrlSerializer, UrlTree } from './url_tree';\n/**\n * @description\n *\n * Is used in DI to configure the router.\n *\n * @publicApi\n */\nexport declare const ROUTER_CONFIGURATION: InjectionToken<ExtraOptions>;\n/**\n * @docsNotRequired\n */\nexport declare const ROUTER_FORROOT_GUARD: InjectionToken<void>;\nexport declare const ROUTER_PROVIDERS: Provider[];\nexport declare function routerNgProbeToken(): NgProbeToken;\n/**\n * @usageNotes\n *\n * RouterModule can be imported multiple times: once per lazily-loaded bundle.\n * Since the router deals with a global shared resource--location, we cannot have\n * more than one router service active.\n *\n * That is why there are two ways to create the module: `RouterModule.forRoot` and\n * `RouterModule.forChild`.\n *\n * * `forRoot` creates a module that contains all the directives, the given routes, and the router\n *   service itself.\n * * `forChild` creates a module that contains all the directives and the given routes, but does not\n *   include the router service.\n *\n * When registered at the root, the module should be used as follows\n *\n * ```\n * @NgModule({\n *   imports: [RouterModule.forRoot(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * For submodules and lazy loaded submodules the module should be used as follows:\n *\n * ```\n * @NgModule({\n *   imports: [RouterModule.forChild(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * @description\n *\n * Adds router directives and providers.\n *\n * Managing state transitions is one of the hardest parts of building applications. This is\n * especially true on the web, where you also need to ensure that the state is reflected in the URL.\n * In addition, we often want to split applications into multiple bundles and load them on demand.\n * Doing this transparently is not trivial.\n *\n * The Angular router solves these problems. Using the router, you can declaratively specify\n * application states, manage state transitions while taking care of the URL, and load bundles on\n * demand.\n *\n * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an\n * overview of how the router should be used.\n *\n * @publicApi\n */\nexport declare class RouterModule {\n    constructor(guard: any, router: Router);\n    /**\n     * Creates a module with all the router providers and directives. It also optionally sets up an\n     * application listener to perform an initial navigation.\n     *\n     * Options (see `ExtraOptions`):\n     * * `enableTracing` makes the router log all its internal events to the console.\n     * * `useHash` enables the location strategy that uses the URL fragment instead of the history\n     * API.\n     * * `initialNavigation` disables the initial navigation.\n     * * `errorHandler` provides a custom error handler.\n     * * `preloadingStrategy` configures a preloading strategy (see `PreloadAllModules`).\n     * * `onSameUrlNavigation` configures how the router handles navigation to the current URL. See\n     * `ExtraOptions` for more details.\n     * * `paramsInheritanceStrategy` defines how the router merges params, data and resolved data\n     * from parent to child routes.\n     */\n    static forRoot(routes: Routes, config?: ExtraOptions): ModuleWithProviders<RouterModule>;\n    /**\n     * Creates a module with all the router directives and a provider registering routes.\n     */\n    static forChild(routes: Routes): ModuleWithProviders<RouterModule>;\n}\nexport declare function createRouterScroller(router: Router, viewportScroller: ViewportScroller, config: ExtraOptions): RouterScroller;\nexport declare function provideLocationStrategy(platformLocationStrategy: PlatformLocation, baseHref: string, options?: ExtraOptions): HashLocationStrategy | PathLocationStrategy;\nexport declare function provideForRootGuard(router: Router): any;\n/**\n * @description\n *\n * Registers routes.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @NgModule({\n *   imports: [RouterModule.forChild(ROUTES)],\n *   providers: [provideRoutes(EXTRA_ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * @publicApi\n */\nexport declare function provideRoutes(routes: Routes): any;\n/**\n * @description\n *\n * Represents an option to configure when the initial navigation is performed.\n *\n * * 'enabled' - the initial navigation starts before the root component is created.\n * The bootstrap is blocked until the initial navigation is complete.\n * * 'disabled' - the initial navigation is not performed. The location listener is set up before\n * the root component gets created.\n * * 'legacy_enabled'- the initial navigation starts after the root component has been created.\n * The bootstrap is not blocked until the initial navigation is complete. @deprecated\n * * 'legacy_disabled'- the initial navigation is not performed. The location listener is set up\n * after @deprecated\n * the root component gets created.\n * * `true` - same as 'legacy_enabled'. @deprecated since v4\n * * `false` - same as 'legacy_disabled'. @deprecated since v4\n *\n * The 'enabled' option should be used for applications unless there is a reason to have\n * more control over when the router starts its initial navigation due to some complex\n * initialization logic. In this case, 'disabled' should be used.\n *\n * The 'legacy_enabled' and 'legacy_disabled' should not be used for new applications.\n *\n * @publicApi\n */\nexport declare type InitialNavigation = true | false | 'enabled' | 'disabled' | 'legacy_enabled' | 'legacy_disabled';\n/**\n * @description\n *\n * Represents options to configure the router.\n *\n * @publicApi\n */\nexport interface ExtraOptions {\n    /**\n     * Makes the router log all its internal events to the console.\n     */\n    enableTracing?: boolean;\n    /**\n     * Enables the location strategy that uses the URL fragment instead of the history API.\n     */\n    useHash?: boolean;\n    /**\n     * Disables the initial navigation.\n     */\n    initialNavigation?: InitialNavigation;\n    /**\n     * A custom error handler.\n     */\n    errorHandler?: ErrorHandler;\n    /**\n     * Configures a preloading strategy. See `PreloadAllModules`.\n     */\n    preloadingStrategy?: any;\n    /**\n     * Define what the router should do if it receives a navigation request to the current URL.\n     * By default, the router will ignore this navigation. However, this prevents features such\n     * as a \"refresh\" button. Use this option to configure the behavior when navigating to the\n     * current URL. Default is 'ignore'.\n     */\n    onSameUrlNavigation?: 'reload' | 'ignore';\n    /**\n     * Configures if the scroll position needs to be restored when navigating back.\n     *\n     * * 'disabled'--does nothing (default).\n     * * 'top'--set the scroll position to 0,0..\n     * * 'enabled'--set the scroll position to the stored position. This option will be the default in\n     * the future.\n     *\n     * When enabled, the router stores and restores scroll positions during navigation.\n     * When navigating forward, the scroll position will be set to [0, 0], or to the anchor\n     * if one is provided.\n     *\n     * You can implement custom scroll restoration behavior as follows.\n     * ```typescript\n     * class AppModule {\n     *  constructor(router: Router, viewportScroller: ViewportScroller, store: Store<AppState>) {\n     *    router.events.pipe(filter(e => e instanceof Scroll), switchMap(e => {\n     *      return store.pipe(first(), timeout(200), map(() => e));\n     *    }).subscribe(e => {\n     *      if (e.position) {\n     *        viewportScroller.scrollToPosition(e.position);\n     *      } else if (e.anchor) {\n     *        viewportScroller.scrollToAnchor(e.anchor);\n     *      } else {\n     *        viewportScroller.scrollToPosition([0, 0]);\n     *      }\n     *    });\n     *  }\n     * }\n     * ```\n     *\n     * You can also implement component-specific scrolling like this:\n     *\n     * ```typescript\n     * class ListComponent {\n     *   list: any[];\n     *   constructor(router: Router, viewportScroller: ViewportScroller, fetcher: ListFetcher) {\n     *     const scrollEvents = router.events.filter(e => e instanceof Scroll);\n     *     listFetcher.fetch().pipe(withLatestFrom(scrollEvents)).subscribe(([list, e]) => {\n     *       this.list = list;\n     *       if (e.position) {\n     *         viewportScroller.scrollToPosition(e.position);\n     *       } else {\n     *         viewportScroller.scrollToPosition([0, 0]);\n     *       }\n     *     });\n     *   }\n     * }\n     */\n    scrollPositionRestoration?: 'disabled' | 'enabled' | 'top';\n    /**\n     * Configures if the router should scroll to the element when the url has a fragment.\n     *\n     * * 'disabled'--does nothing (default).\n     * * 'enabled'--scrolls to the element. This option will be the default in the future.\n     *\n     * Anchor scrolling does not happen on 'popstate'. Instead, we restore the position\n     * that we stored or scroll to the top.\n     */\n    anchorScrolling?: 'disabled' | 'enabled';\n    /**\n     * Configures the scroll offset the router will use when scrolling to an element.\n     *\n     * When given a tuple with two numbers, the router will always use the numbers.\n     * When given a function, the router will invoke the function every time it restores scroll\n     * position.\n     */\n    scrollOffset?: [number, number] | (() => [number, number]);\n    /**\n     * Defines how the router merges params, data and resolved data from parent to child\n     * routes. Available options are:\n     *\n     * - `'emptyOnly'`, the default, only inherits parent params for path-less or component-less\n     *   routes.\n     * - `'always'`, enables unconditional inheritance of parent params.\n     */\n    paramsInheritanceStrategy?: 'emptyOnly' | 'always';\n    /**\n     * A custom malformed uri error handler function. This handler is invoked when encodedURI contains\n     * invalid character sequences. The default implementation is to redirect to the root url dropping\n     * any path or param info. This function passes three parameters:\n     *\n     * - `'URIError'` - Error thrown when parsing a bad URL\n     * - `'UrlSerializer'` - UrlSerializer that’s configured with the router.\n     * - `'url'` -  The malformed URL that caused the URIError\n     * */\n    malformedUriErrorHandler?: (error: URIError, urlSerializer: UrlSerializer, url: string) => UrlTree;\n    /**\n     * Defines when the router updates the browser URL. The default behavior is to update after\n     * successful navigation. However, some applications may prefer a mode where the URL gets\n     * updated at the beginning of navigation. The most common use case would be updating the\n     * URL early so if navigation fails, you can show an error message with the URL that failed.\n     * Available options are:\n     *\n     * - `'deferred'`, the default, updates the browser URL after navigation has finished.\n     * - `'eager'`, updates browser URL at the beginning of navigation.\n     */\n    urlUpdateStrategy?: 'deferred' | 'eager';\n    /**\n     * Enables a bug fix that corrects relative link resolution in components with empty paths.\n     * Example:\n     *\n     * ```\n     * const routes = [\n     *   {\n     *     path: '',\n     *     component: ContainerComponent,\n     *     children: [\n     *       { path: 'a', component: AComponent },\n     *       { path: 'b', component: BComponent },\n     *     ]\n     *   }\n     * ];\n     * ```\n     *\n     * From the `ContainerComponent`, this will not work:\n     *\n     * `<a [routerLink]=\"['./a']\">Link to A</a>`\n     *\n     * However, this will work:\n     *\n     * `<a [routerLink]=\"['../a']\">Link to A</a>`\n     *\n     * In other words, you're required to use `../` rather than `./`. The current default in v6\n     * is `legacy`, and this option will be removed in v7 to default to the corrected behavior.\n     */\n    relativeLinkResolution?: 'legacy' | 'corrected';\n}\nexport declare function setupRouter(ref: ApplicationRef, urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts, location: Location, injector: Injector, loader: NgModuleFactoryLoader, compiler: Compiler, config: Route[][], opts?: ExtraOptions, urlHandlingStrategy?: UrlHandlingStrategy, routeReuseStrategy?: RouteReuseStrategy): Router;\nexport declare function rootRoute(router: Router): ActivatedRoute;\n/**\n * To initialize the router properly we need to do in two steps:\n *\n * We need to start the navigation in a APP_INITIALIZER to block the bootstrap if\n * a resolver or a guards executes asynchronously. Second, we need to actually run\n * activation in a BOOTSTRAP_LISTENER. We utilize the afterPreactivation\n * hook provided by the router to do that.\n *\n * The router navigation starts, reaches the point when preactivation is done, and then\n * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.\n */\nexport declare class RouterInitializer {\n    private injector;\n    private initNavigation;\n    private resultOfPreactivationDone;\n    constructor(injector: Injector);\n    appInitializer(): Promise<any>;\n    bootstrapListener(bootstrappedComponentRef: ComponentRef<any>): void;\n    private isLegacyEnabled;\n    private isLegacyDisabled;\n}\nexport declare function getAppInitializer(r: RouterInitializer): any;\nexport declare function getBootstrapListener(r: RouterInitializer): any;\n/**\n * A token for the router initializer that will be called after the app is bootstrapped.\n *\n * @publicApi\n */\nexport declare const ROUTER_INITIALIZER: InjectionToken<(compRef: ComponentRef<any>) => void>;\nexport declare function provideRouterInitializer(): (typeof RouterInitializer | {\n    provide: InjectionToken<(() => void)[]>;\n    multi: boolean;\n    useFactory: typeof getAppInitializer;\n    deps: (typeof RouterInitializer)[];\n    useExisting?: undefined;\n} | {\n    provide: InjectionToken<(compRef: ComponentRef<any>) => void>;\n    useFactory: typeof getBootstrapListener;\n    deps: (typeof RouterInitializer)[];\n    multi?: undefined;\n    useExisting?: undefined;\n} | {\n    provide: InjectionToken<((compRef: ComponentRef<any>) => void)[]>;\n    multi: boolean;\n    useExisting: InjectionToken<(compRef: ComponentRef<any>) => void>;\n    useFactory?: undefined;\n    deps?: undefined;\n})[];\n"
  },
  {
    "path": "node_modules/@angular/router/src/router_outlet_context.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentFactoryResolver, ComponentRef } from '@angular/core';\nimport { RouterOutlet } from './directives/router_outlet';\nimport { ActivatedRoute } from './router_state';\n/**\n * Store contextual information about a `RouterOutlet`\n *\n * @publicApi\n */\nexport declare class OutletContext {\n    outlet: RouterOutlet | null;\n    route: ActivatedRoute | null;\n    resolver: ComponentFactoryResolver | null;\n    children: ChildrenOutletContexts;\n    attachRef: ComponentRef<any> | null;\n}\n/**\n * Store contextual information about the children (= nested) `RouterOutlet`\n *\n * @publicApi\n */\nexport declare class ChildrenOutletContexts {\n    private contexts;\n    /** Called when a `RouterOutlet` directive is instantiated */\n    onChildOutletCreated(childName: string, outlet: RouterOutlet): void;\n    /**\n     * Called when a `RouterOutlet` directive is destroyed.\n     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n     * re-created later.\n     */\n    onChildOutletDestroyed(childName: string): void;\n    /**\n     * Called when the corresponding route is deactivated during navigation.\n     * Because the component get destroyed, all children outlet are destroyed.\n     */\n    onOutletDeactivated(): Map<string, OutletContext>;\n    onOutletReAttached(contexts: Map<string, OutletContext>): void;\n    getOrCreateContext(childName: string): OutletContext;\n    getContext(childName: string): OutletContext | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/router_preloader.d.ts",
    "content": "/**\n*@license\n*Copyright Google Inc. All Rights Reserved.\n*\n*Use of this source code is governed by an MIT-style license that can be\n*found in the LICENSE file at https://angular.io/license\n*/\nimport { Compiler, Injector, NgModuleFactoryLoader, OnDestroy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Route } from './config';\nimport { Router } from './router';\n/**\n * @description\n *\n * Provides a preloading strategy.\n *\n * @publicApi\n */\nexport declare abstract class PreloadingStrategy {\n    abstract preload(route: Route, fn: () => Observable<any>): Observable<any>;\n}\n/**\n * @description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * @publicApi\n */\nexport declare class PreloadAllModules implements PreloadingStrategy {\n    preload(route: Route, fn: () => Observable<any>): Observable<any>;\n}\n/**\n * @description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * @publicApi\n */\nexport declare class NoPreloading implements PreloadingStrategy {\n    preload(route: Route, fn: () => Observable<any>): Observable<any>;\n}\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n * @publicApi\n */\nexport declare class RouterPreloader implements OnDestroy {\n    private router;\n    private injector;\n    private preloadingStrategy;\n    private loader;\n    private subscription;\n    constructor(router: Router, moduleLoader: NgModuleFactoryLoader, compiler: Compiler, injector: Injector, preloadingStrategy: PreloadingStrategy);\n    setUpPreloading(): void;\n    preload(): Observable<any>;\n    ngOnDestroy(): void;\n    private processRoutes;\n    private preloadConfig;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/router_scroller.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewportScroller } from '@angular/common';\nimport { OnDestroy } from '@angular/core';\nimport { Router } from './router';\nexport declare class RouterScroller implements OnDestroy {\n    private router;\n    /** @docsNotRequired */ readonly viewportScroller: ViewportScroller;\n    private options;\n    private routerEventsSubscription;\n    private scrollEventsSubscription;\n    private lastId;\n    private lastSource;\n    private restoredId;\n    private store;\n    constructor(router: Router, \n    /** @docsNotRequired */ viewportScroller: ViewportScroller, options?: {\n        scrollPositionRestoration?: 'disabled' | 'enabled' | 'top';\n        anchorScrolling?: 'disabled' | 'enabled';\n    });\n    init(): void;\n    private createScrollEvents;\n    private consumeScrollEvents;\n    private scheduleScrollEvent;\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/router_state.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Data, Route } from './config';\nimport { ParamMap, Params } from './shared';\nimport { UrlSegment, UrlTree } from './url_tree';\nimport { Tree } from './utils/tree';\n/**\n * @description\n *\n * Represents the state of the router.\n *\n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments, the extracted parameters, and the resolved data.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * See `ActivatedRoute` for more information.\n *\n * @publicApi\n */\nexport declare class RouterState extends Tree<ActivatedRoute> {\n    /** The current snapshot of the router state */\n    snapshot: RouterStateSnapshot;\n    toString(): string;\n}\nexport declare function createEmptyState(urlTree: UrlTree, rootComponent: Type<any> | null): RouterState;\nexport declare function createEmptyStateSnapshot(urlTree: UrlTree, rootComponent: Type<any> | null): RouterStateSnapshot;\n/**\n * @description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet.  An `ActivatedRoute` can also be used to traverse the router state tree.\n *\n * ```\n * @Component({...})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n *     // route.data includes both `data` and `resolve`\n *     const user = route.data.map(d => d.user);\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport declare class ActivatedRoute {\n    /** An observable of the URL segments matched by this route */\n    url: Observable<UrlSegment[]>;\n    /** An observable of the matrix parameters scoped to this route */\n    params: Observable<Params>;\n    /** An observable of the query parameters shared by all the routes */\n    queryParams: Observable<Params>;\n    /** An observable of the URL fragment shared by all the routes */\n    fragment: Observable<string>;\n    /** An observable of the static and resolved data of this route. */\n    data: Observable<Data>;\n    /** The outlet name of the route. It's a constant */\n    outlet: string;\n    /** The component of the route. It's a constant */\n    component: Type<any> | string | null;\n    /** The current snapshot of this route */\n    snapshot: ActivatedRouteSnapshot;\n    /** The configuration used to match this route */\n    readonly routeConfig: Route | null;\n    /** The root of the router state */\n    readonly root: ActivatedRoute;\n    /** The parent of this route in the router state tree */\n    readonly parent: ActivatedRoute | null;\n    /** The first child of this route in the router state tree */\n    readonly firstChild: ActivatedRoute | null;\n    /** The children of this route in the router state tree */\n    readonly children: ActivatedRoute[];\n    /** The path from the root of the router state tree to this route */\n    readonly pathFromRoot: ActivatedRoute[];\n    readonly paramMap: Observable<ParamMap>;\n    readonly queryParamMap: Observable<ParamMap>;\n    toString(): string;\n}\nexport declare type ParamsInheritanceStrategy = 'emptyOnly' | 'always';\n/**\n * @description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * ```\n * @Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport declare class ActivatedRouteSnapshot {\n    /** The URL segments matched by this route */\n    url: UrlSegment[];\n    /** The matrix parameters scoped to this route */\n    params: Params;\n    /** The query parameters shared by all the routes */\n    queryParams: Params;\n    /** The URL fragment shared by all the routes */\n    fragment: string;\n    /** The static and resolved data of this route */\n    data: Data;\n    /** The outlet name of the route */\n    outlet: string;\n    /** The component of the route */\n    component: Type<any> | string | null;\n    /** The configuration used to match this route **/\n    readonly routeConfig: Route | null;\n    /** The root of the router state */\n    readonly root: ActivatedRouteSnapshot;\n    /** The parent of this route in the router state tree */\n    readonly parent: ActivatedRouteSnapshot | null;\n    /** The first child of this route in the router state tree */\n    readonly firstChild: ActivatedRouteSnapshot | null;\n    /** The children of this route in the router state tree */\n    readonly children: ActivatedRouteSnapshot[];\n    /** The path from the root of the router state tree to this route */\n    readonly pathFromRoot: ActivatedRouteSnapshot[];\n    readonly paramMap: ParamMap;\n    readonly queryParamMap: ParamMap;\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport declare class RouterStateSnapshot extends Tree<ActivatedRouteSnapshot> {\n    /** The url from which this snapshot was created */\n    url: string;\n    toString(): string;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n */\nexport declare function advanceActivatedRoute(route: ActivatedRoute): void;\nexport declare function equalParamsAndUrlSegments(a: ActivatedRouteSnapshot, b: ActivatedRouteSnapshot): boolean;\n"
  },
  {
    "path": "node_modules/@angular/router/src/router.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Location } from '@angular/common';\nimport { Compiler, Injector, NgModuleFactoryLoader, Type } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { QueryParamsHandling, Routes } from './config';\nimport { Event, NavigationTrigger } from './events';\nimport { RouteReuseStrategy } from './route_reuse_strategy';\nimport { ChildrenOutletContexts } from './router_outlet_context';\nimport { ActivatedRoute, RouterState, RouterStateSnapshot } from './router_state';\nimport { Params } from './shared';\nimport { UrlHandlingStrategy } from './url_handling_strategy';\nimport { UrlSerializer, UrlTree } from './url_tree';\nimport { Checks } from './utils/preactivation';\n/**\n * @description\n *\n * Represents the extra options used during navigation.\n *\n * @publicApi\n */\nexport interface NavigationExtras {\n    /**\n     * Enables relative navigation from the current ActivatedRoute.\n     *\n     * Configuration:\n     *\n     * ```\n     * [{\n    *   path: 'parent',\n    *   component: ParentComponent,\n    *   children: [{\n    *     path: 'list',\n    *     component: ListComponent\n    *   },{\n    *     path: 'child',\n    *     component: ChildComponent\n    *   }]\n    * }]\n     * ```\n     *\n     * Navigate to list route from child route:\n     *\n     * ```\n     *  @Component({...})\n     *  class ChildComponent {\n    *    constructor(private router: Router, private route: ActivatedRoute) {}\n    *\n    *    go() {\n    *      this.router.navigate(['../list'], { relativeTo: this.route });\n    *    }\n    *  }\n     * ```\n     */\n    relativeTo?: ActivatedRoute | null;\n    /**\n     * Sets query parameters to the URL.\n     *\n     * ```\n     * // Navigate to /results?page=1\n     * this.router.navigate(['/results'], { queryParams: { page: 1 } });\n     * ```\n     */\n    queryParams?: Params | null;\n    /**\n     * Sets the hash fragment for the URL.\n     *\n     * ```\n     * // Navigate to /results#top\n     * this.router.navigate(['/results'], { fragment: 'top' });\n     * ```\n     */\n    fragment?: string;\n    /**\n     * Preserves the query parameters for the next navigation.\n     *\n     * deprecated, use `queryParamsHandling` instead\n     *\n     * ```\n     * // Preserve query params from /results?page=1 to /view?page=1\n     * this.router.navigate(['/view'], { preserveQueryParams: true });\n     * ```\n     *\n     * @deprecated since v4\n     */\n    preserveQueryParams?: boolean;\n    /**\n     *  config strategy to handle the query parameters for the next navigation.\n     *\n     * ```\n     * // from /results?page=1 to /view?page=1&page=2\n     * this.router.navigate(['/view'], { queryParams: { page: 2 },  queryParamsHandling: \"merge\" });\n     * ```\n     */\n    queryParamsHandling?: QueryParamsHandling | null;\n    /**\n     * Preserves the fragment for the next navigation\n     *\n     * ```\n     * // Preserve fragment from /results#top to /view#top\n     * this.router.navigate(['/view'], { preserveFragment: true });\n     * ```\n     */\n    preserveFragment?: boolean;\n    /**\n     * Navigates without pushing a new state into history.\n     *\n     * ```\n     * // Navigate silently to /view\n     * this.router.navigate(['/view'], { skipLocationChange: true });\n     * ```\n     */\n    skipLocationChange?: boolean;\n    /**\n     * Navigates while replacing the current state in history.\n     *\n     * ```\n     * // Navigate to /view\n     * this.router.navigate(['/view'], { replaceUrl: true });\n     * ```\n     */\n    replaceUrl?: boolean;\n}\n/**\n * @description\n *\n * Error handler that is invoked when a navigation errors.\n *\n * If the handler returns a value, the navigation promise will be resolved with this value.\n * If the handler throws an exception, the navigation promise will be rejected with\n * the exception.\n *\n * @publicApi\n */\nexport declare type ErrorHandler = (error: any) => any;\nexport declare type NavigationTransition = {\n    id: number;\n    currentUrlTree: UrlTree;\n    currentRawUrl: UrlTree;\n    extractedUrl: UrlTree;\n    urlAfterRedirects: UrlTree;\n    rawUrl: UrlTree;\n    extras: NavigationExtras;\n    resolve: any;\n    reject: any;\n    promise: Promise<boolean>;\n    source: NavigationTrigger;\n    state: {\n        navigationId: number;\n    } | null;\n    currentSnapshot: RouterStateSnapshot;\n    targetSnapshot: RouterStateSnapshot | null;\n    currentRouterState: RouterState;\n    targetRouterState: RouterState | null;\n    guards: Checks;\n    guardsResult: boolean | UrlTree | null;\n};\n/**\n * @description\n *\n * Provides the navigation and url manipulation capabilities.\n *\n * See `Routes` for more details and examples.\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nexport declare class Router {\n    private rootComponentType;\n    private urlSerializer;\n    private rootContexts;\n    private location;\n    config: Routes;\n    private currentUrlTree;\n    private rawUrlTree;\n    private readonly transitions;\n    private navigations;\n    private locationSubscription;\n    private navigationId;\n    private configLoader;\n    private ngModule;\n    private console;\n    private isNgZoneEnabled;\n    readonly events: Observable<Event>;\n    readonly routerState: RouterState;\n    /**\n     * Error handler that is invoked when a navigation errors.\n     *\n     * See `ErrorHandler` for more information.\n     */\n    errorHandler: ErrorHandler;\n    /**\n     * Malformed uri error handler is invoked when `Router.parseUrl(url)` throws an\n     * error due to containing an invalid character. The most common case would be a `%` sign\n     * that's not encoded and is not part of a percent encoded sequence.\n     */\n    malformedUriErrorHandler: (error: URIError, urlSerializer: UrlSerializer, url: string) => UrlTree;\n    /**\n     * Indicates if at least one navigation happened.\n     */\n    navigated: boolean;\n    private lastSuccessfulId;\n    /**\n     * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n     */\n    urlHandlingStrategy: UrlHandlingStrategy;\n    routeReuseStrategy: RouteReuseStrategy;\n    /**\n     * Define what the router should do if it receives a navigation request to the current URL.\n     * By default, the router will ignore this navigation. However, this prevents features such\n     * as a \"refresh\" button. Use this option to configure the behavior when navigating to the\n     * current URL. Default is 'ignore'.\n     */\n    onSameUrlNavigation: 'reload' | 'ignore';\n    /**\n     * Defines how the router merges params, data and resolved data from parent to child\n     * routes. Available options are:\n     *\n     * - `'emptyOnly'`, the default, only inherits parent params for path-less or component-less\n     *   routes.\n     * - `'always'`, enables unconditional inheritance of parent params.\n     */\n    paramsInheritanceStrategy: 'emptyOnly' | 'always';\n    /**\n     * Defines when the router updates the browser URL. The default behavior is to update after\n     * successful navigation. However, some applications may prefer a mode where the URL gets\n     * updated at the beginning of navigation. The most common use case would be updating the\n     * URL early so if navigation fails, you can show an error message with the URL that failed.\n     * Available options are:\n     *\n     * - `'deferred'`, the default, updates the browser URL after navigation has finished.\n     * - `'eager'`, updates browser URL at the beginning of navigation.\n     */\n    urlUpdateStrategy: 'deferred' | 'eager';\n    /**\n     * See {@link RouterModule} for more information.\n     */\n    relativeLinkResolution: 'legacy' | 'corrected';\n    /**\n     * Creates the router service.\n     */\n    constructor(rootComponentType: Type<any> | null, urlSerializer: UrlSerializer, rootContexts: ChildrenOutletContexts, location: Location, injector: Injector, loader: NgModuleFactoryLoader, compiler: Compiler, config: Routes);\n    private setupNavigations;\n    private getTransition;\n    private setTransition;\n    /**\n     * Sets up the location change listener and performs the initial navigation.\n     */\n    initialNavigation(): void;\n    /**\n     * Sets up the location change listener.\n     */\n    setUpLocationChangeListener(): void;\n    /** The current url */\n    readonly url: string;\n    /**\n     * Resets the configuration used for navigation and generating links.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.resetConfig([\n     *  { path: 'team/:id', component: TeamCmp, children: [\n     *    { path: 'simple', component: SimpleCmp },\n     *    { path: 'user/:name', component: UserCmp }\n     *  ]}\n     * ]);\n     * ```\n     */\n    resetConfig(config: Routes): void;\n    /** @docsNotRequired */\n    ngOnDestroy(): void;\n    /** Disposes of the router */\n    dispose(): void;\n    /**\n     * Applies an array of commands to the current url tree and creates a new url tree.\n     *\n     * When given an activate route, applies the given commands starting from the route.\n     * When not given a route, applies the given command starting from the root.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * // create /team/33/user/11\n     * router.createUrlTree(['/team', 33, 'user', 11]);\n     *\n     * // create /team/33;expand=true/user/11\n     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n     *\n     * // you can collapse static segments like this (this works only with the first passed-in value):\n     * router.createUrlTree(['/team/33/user', userId]);\n     *\n     * // If the first segment can contain slashes, and you do not want the router to split it, you\n     * // can do the following:\n     *\n     * router.createUrlTree([{segmentPath: '/one/two'}]);\n     *\n     * // create /team/33/(user/11//right:chat)\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n     *\n     * // remove the right secondary node\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n     *\n     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n     *\n     * // navigate to /team/33/user/11/details\n     * router.createUrlTree(['details'], {relativeTo: route});\n     *\n     * // navigate to /team/33/user/22\n     * router.createUrlTree(['../22'], {relativeTo: route});\n     *\n     * // navigate to /team/44/user/22\n     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n     * ```\n     */\n    createUrlTree(commands: any[], navigationExtras?: NavigationExtras): UrlTree;\n    /**\n     * Navigate based on the provided url. This navigation is always absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.navigateByUrl(\"/team/33/user/11\");\n     *\n     * // Navigate without updating the URL\n     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n     * ```\n     *\n     * Since `navigateByUrl()` takes an absolute URL as the first parameter,\n     * it will not apply any delta to the current URL and ignores any properties\n     * in the second parameter (the `NavigationExtras`) that would change the\n     * provided URL.\n     */\n    navigateByUrl(url: string | UrlTree, extras?: NavigationExtras): Promise<boolean>;\n    /**\n     * Navigate based on the provided array of commands and a starting point.\n     * If no starting route is provided, the navigation is absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n     *\n     * // Navigate without updating the URL\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n     * ```\n     *\n     * The first parameter of `navigate()` is a delta to be applied to the current URL\n     * or the one provided in the `relativeTo` property of the second parameter (the\n     * `NavigationExtras`).\n     */\n    navigate(commands: any[], extras?: NavigationExtras): Promise<boolean>;\n    /** Serializes a `UrlTree` into a string */\n    serializeUrl(url: UrlTree): string;\n    /** Parses a string into a `UrlTree` */\n    parseUrl(url: string): UrlTree;\n    /** Returns whether the url is activated */\n    isActive(url: string | UrlTree, exact: boolean): boolean;\n    private removeEmptyProps;\n    private processNavigations;\n    private scheduleNavigation;\n    private setBrowserUrl;\n    private resetStateAndUrl;\n    private resetUrlToCurrentUrlTree;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/shared.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Route, UrlMatchResult } from './config';\nimport { UrlSegment, UrlSegmentGroup } from './url_tree';\n/**\n * @description\n *\n * Name of the primary outlet.\n *\n * @publicApi\n */\nexport declare const PRIMARY_OUTLET = \"primary\";\n/**\n * A collection of parameters.\n *\n * @publicApi\n */\nexport declare type Params = {\n    [key: string]: any;\n};\n/**\n * Matrix and Query parameters.\n *\n * `ParamMap` makes it easier to work with parameters as they could have either a single value or\n * multiple value. Because this should be known by the user, calling `get` or `getAll` returns the\n * correct type (either `string` or `string[]`).\n *\n * The API is inspired by the URLSearchParams interface.\n * see https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n *\n * @publicApi\n */\nexport interface ParamMap {\n    has(name: string): boolean;\n    /**\n     * Return a single value for the given parameter name:\n     * - the value when the parameter has a single value,\n     * - the first value if the parameter has multiple values,\n     * - `null` when there is no such parameter.\n     */\n    get(name: string): string | null;\n    /**\n     * Return an array of values for the given parameter name.\n     *\n     * If there is no such parameter, an empty array is returned.\n     */\n    getAll(name: string): string[];\n    /** Name of the parameters */\n    readonly keys: string[];\n}\n/**\n * Convert a `Params` instance to a `ParamMap`.\n *\n * @publicApi\n */\nexport declare function convertToParamMap(params: Params): ParamMap;\nexport declare function navigationCancelingError(message: string): Error;\nexport declare function isNavigationCancelingError(error: Error): any;\nexport declare function defaultUrlMatcher(segments: UrlSegment[], segmentGroup: UrlSegmentGroup, route: Route): UrlMatchResult | null;\n"
  },
  {
    "path": "node_modules/@angular/router/src/url_handling_strategy.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { UrlTree } from './url_tree';\n/**\n * @description\n *\n * Provides a way to migrate AngularJS applications to Angular.\n *\n * @publicApi\n */\nexport declare abstract class UrlHandlingStrategy {\n    /**\n     * Tells the router if this URL should be processed.\n     *\n     * When it returns true, the router will execute the regular navigation.\n     * When it returns false, the router will set the router state to an empty state.\n     * As a result, all the active components will be destroyed.\n     *\n     */\n    abstract shouldProcessUrl(url: UrlTree): boolean;\n    /**\n     * Extracts the part of the URL that should be handled by the router.\n     * The rest of the URL will remain untouched.\n     */\n    abstract extract(url: UrlTree): UrlTree;\n    /**\n     * Merges the URL fragment with the rest of the URL.\n     */\n    abstract merge(newUrlPart: UrlTree, rawUrl: UrlTree): UrlTree;\n}\n/**\n * @publicApi\n */\nexport declare class DefaultUrlHandlingStrategy implements UrlHandlingStrategy {\n    shouldProcessUrl(url: UrlTree): boolean;\n    extract(url: UrlTree): UrlTree;\n    merge(newUrlPart: UrlTree, wholeUrl: UrlTree): UrlTree;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/src/url_tree.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ParamMap, Params } from './shared';\nexport declare function createEmptyUrlTree(): UrlTree;\nexport declare function containsTree(container: UrlTree, containee: UrlTree, exact: boolean): boolean;\n/**\n * @description\n *\n * Represents the parsed URL.\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport declare class UrlTree {\n    /** The root segment group of the URL tree */\n    root: UrlSegmentGroup;\n    /** The query params of the URL */\n    queryParams: Params;\n    /** The fragment of the URL */\n    fragment: string | null;\n    readonly queryParamMap: ParamMap;\n    /** @docsNotRequired */\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents the parsed URL segment group.\n *\n * See `UrlTree` for more information.\n *\n * @publicApi\n */\nexport declare class UrlSegmentGroup {\n    /** The URL segments of this group. See `UrlSegment` for more information */\n    segments: UrlSegment[];\n    /** The list of children of this group */\n    children: {\n        [key: string]: UrlSegmentGroup;\n    };\n    /** The parent node in the url tree */\n    parent: UrlSegmentGroup | null;\n    constructor(\n    /** The URL segments of this group. See `UrlSegment` for more information */\n    segments: UrlSegment[], \n    /** The list of children of this group */\n    children: {\n        [key: string]: UrlSegmentGroup;\n    });\n    /** Whether the segment has child segments */\n    hasChildren(): boolean;\n    /** Number of child segments */\n    readonly numberOfChildren: number;\n    /** @docsNotRequired */\n    toString(): string;\n}\n/**\n * @description\n *\n * Represents a single URL segment.\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport declare class UrlSegment {\n    /** The path part of a URL segment */\n    path: string;\n    /** The matrix parameters associated with a segment */\n    parameters: {\n        [name: string]: string;\n    };\n    constructor(\n    /** The path part of a URL segment */\n    path: string, \n    /** The matrix parameters associated with a segment */\n    parameters: {\n        [name: string]: string;\n    });\n    readonly parameterMap: ParamMap;\n    /** @docsNotRequired */\n    toString(): string;\n}\nexport declare function equalSegments(as: UrlSegment[], bs: UrlSegment[]): boolean;\nexport declare function equalPath(as: UrlSegment[], bs: UrlSegment[]): boolean;\nexport declare function mapChildrenIntoArray<T>(segment: UrlSegmentGroup, fn: (v: UrlSegmentGroup, k: string) => T[]): T[];\n/**\n * @description\n *\n * Serializes and deserializes a URL string into a URL tree.\n *\n * The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See `DefaultUrlSerializer` for an example of a URL serializer.\n *\n * @publicApi\n */\nexport declare abstract class UrlSerializer {\n    /** Parse a url into a `UrlTree` */\n    abstract parse(url: string): UrlTree;\n    /** Converts a `UrlTree` into a url */\n    abstract serialize(tree: UrlTree): string;\n}\n/**\n * @description\n *\n * A default implementation of the `UrlSerializer`.\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * @publicApi\n */\nexport declare class DefaultUrlSerializer implements UrlSerializer {\n    /** Parses a url into a `UrlTree` */\n    parse(url: string): UrlTree;\n    /** Converts a `UrlTree` into a url */\n    serialize(tree: UrlTree): string;\n}\nexport declare function serializePaths(segment: UrlSegmentGroup): string;\n/**\n * This function should be used to encode both keys and values in a query string key/value. In\n * the following URL, you need to call encodeUriQuery on \"k\" and \"v\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport declare function encodeUriQuery(s: string): string;\n/**\n * This function should be used to encode a URL fragment. In the following URL, you need to call\n * encodeUriFragment on \"f\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport declare function encodeUriFragment(s: string): string;\n/**\n * This function should be run on any URI segment as well as the key and value in a key/value\n * pair for matrix params. In the following URL, you need to call encodeUriSegment on \"html\",\n * \"mk\", and \"mv\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport declare function encodeUriSegment(s: string): string;\nexport declare function decode(s: string): string;\nexport declare function decodeQuery(s: string): string;\nexport declare function serializePath(path: UrlSegment): string;\n"
  },
  {
    "path": "node_modules/@angular/router/src/utils/collection.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModuleFactory } from '@angular/core';\nimport { Observable } from 'rxjs';\nexport declare function shallowEqualArrays(a: any[], b: any[]): boolean;\nexport declare function shallowEqual(a: {\n    [x: string]: any;\n}, b: {\n    [x: string]: any;\n}): boolean;\n/**\n * Flattens single-level nested arrays.\n */\nexport declare function flatten<T>(arr: T[][]): T[];\n/**\n * Return the last element of an array.\n */\nexport declare function last<T>(a: T[]): T | null;\n/**\n * Verifys all booleans in an array are `true`.\n */\nexport declare function and(bools: boolean[]): boolean;\nexport declare function forEach<K, V>(map: {\n    [key: string]: V;\n}, callback: (v: V, k: string) => void): void;\nexport declare function waitForMap<A, B>(obj: {\n    [k: string]: A;\n}, fn: (k: string, a: A) => Observable<B>): Observable<{\n    [k: string]: B;\n}>;\nexport declare function wrapIntoObservable<T>(value: T | NgModuleFactory<T> | Promise<T> | Observable<T>): Observable<T | NgModuleFactory<T>>;\n"
  },
  {
    "path": "node_modules/@angular/router/src/utils/preactivation.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector } from '@angular/core';\nimport { ChildrenOutletContexts } from '../router_outlet_context';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '../router_state';\nexport declare class CanActivate {\n    path: ActivatedRouteSnapshot[];\n    readonly route: ActivatedRouteSnapshot;\n    constructor(path: ActivatedRouteSnapshot[]);\n}\nexport declare class CanDeactivate {\n    component: Object | null;\n    route: ActivatedRouteSnapshot;\n    constructor(component: Object | null, route: ActivatedRouteSnapshot);\n}\nexport declare type Checks = {\n    canDeactivateChecks: CanDeactivate[];\n    canActivateChecks: CanActivate[];\n};\nexport declare function getAllRouteGuards(future: RouterStateSnapshot, curr: RouterStateSnapshot, parentContexts: ChildrenOutletContexts): Checks;\nexport declare function getCanActivateChild(p: ActivatedRouteSnapshot): {\n    node: ActivatedRouteSnapshot;\n    guards: any[];\n} | null;\nexport declare function getToken(token: any, snapshot: ActivatedRouteSnapshot, moduleInjector: Injector): any;\n"
  },
  {
    "path": "node_modules/@angular/router/src/utils/tree.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class Tree<T> {\n    constructor(root: TreeNode<T>);\n    readonly root: T;\n}\nexport declare class TreeNode<T> {\n    value: T;\n    children: TreeNode<T>[];\n    constructor(value: T, children: TreeNode<T>[]);\n    toString(): string;\n}\nexport declare function nodeChildrenAsMap<T extends {\n    outlet: string;\n}>(node: TreeNode<T> | null): {\n    [outlet: string]: TreeNode<T>;\n};\n"
  },
  {
    "path": "node_modules/@angular/router/src/utils/type_guards.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CanActivate, CanActivateChild, CanDeactivate, CanLoad } from '../interfaces';\nimport { UrlTree } from '../url_tree';\n/**\n * Simple function check, but generic so type inference will flow. Example:\n *\n * function product(a: number, b: number) {\n *   return a * b;\n * }\n *\n * if (isFunction<product>(fn)) {\n *   return fn(1, 2);\n * } else {\n *   throw \"Must provide the `product` function\";\n * }\n */\nexport declare function isFunction<T>(v: any): v is T;\nexport declare function isBoolean(v: any): v is boolean;\nexport declare function isUrlTree(v: any): v is UrlTree;\nexport declare function isCanLoad(guard: any): guard is CanLoad;\nexport declare function isCanActivate(guard: any): guard is CanActivate;\nexport declare function isCanActivateChild(guard: any): guard is CanActivateChild;\nexport declare function isCanDeactivate<T>(guard: any): guard is CanDeactivate<T>;\n"
  },
  {
    "path": "node_modules/@angular/router/src/version.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\nimport { Version } from '@angular/core';\n/**\n * @publicApi\n */\nexport declare const VERSION: Version;\n"
  },
  {
    "path": "node_modules/@angular/router/testing.d.ts",
    "content": "\n  export * from './testing/testing';\n  "
  },
  {
    "path": "node_modules/@angular/router/testing/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/router/testing/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n"
  },
  {
    "path": "node_modules/@angular/router/testing/src/router_testing_module.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Location } from '@angular/common';\nimport { Compiler, Injector, ModuleWithProviders, NgModuleFactory, NgModuleFactoryLoader } from '@angular/core';\nimport { ChildrenOutletContexts, ExtraOptions, Route, Router, Routes, UrlHandlingStrategy, UrlSerializer } from '@angular/router';\n/**\n * @description\n *\n * Allows to simulate the loading of ng modules in tests.\n *\n * ```\n * const loader = TestBed.get(NgModuleFactoryLoader);\n *\n * @Component({template: 'lazy-loaded'})\n * class LazyLoadedComponent {}\n * @NgModule({\n *   declarations: [LazyLoadedComponent],\n *   imports: [RouterModule.forChild([{path: 'loaded', component: LazyLoadedComponent}])]\n * })\n *\n * class LoadedModule {}\n *\n * // sets up stubbedModules\n * loader.stubbedModules = {lazyModule: LoadedModule};\n *\n * router.resetConfig([\n *   {path: 'lazy', loadChildren: 'lazyModule'},\n * ]);\n *\n * router.navigateByUrl('/lazy/loaded');\n * ```\n *\n * @publicApi\n */\nexport declare class SpyNgModuleFactoryLoader implements NgModuleFactoryLoader {\n    private compiler;\n    /**\n     * @docsNotRequired\n     */\n    private _stubbedModules;\n    /**\n     * @docsNotRequired\n     */\n    /**\n    * @docsNotRequired\n    */\n    stubbedModules: {\n        [path: string]: any;\n    };\n    constructor(compiler: Compiler);\n    load(path: string): Promise<NgModuleFactory<any>>;\n}\n/**\n * Router setup factory function used for testing.\n *\n * @publicApi\n */\nexport declare function setupTestingRouter(urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts, location: Location, loader: NgModuleFactoryLoader, compiler: Compiler, injector: Injector, routes: Route[][], opts?: ExtraOptions, urlHandlingStrategy?: UrlHandlingStrategy): Router;\n/**\n * Router setup factory function used for testing.\n *\n * @deprecated As of v5.2. The 2nd-to-last argument should be `ExtraOptions`, not\n * `UrlHandlingStrategy`\n * @publicApi\n */\nexport declare function setupTestingRouter(urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts, location: Location, loader: NgModuleFactoryLoader, compiler: Compiler, injector: Injector, routes: Route[][], urlHandlingStrategy?: UrlHandlingStrategy): Router;\n/**\n * @description\n *\n * Sets up the router to be used for testing.\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of `Location`, `LocationStrategy`, and {@link\n * NgModuleFactoryLoader}.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * beforeEach(() => {\n *   TestBed.configureTestModule({\n *     imports: [\n *       RouterTestingModule.withRoutes(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n * @publicApi\n */\nexport declare class RouterTestingModule {\n    static withRoutes(routes: Routes, config?: ExtraOptions): ModuleWithProviders<RouterTestingModule>;\n}\n"
  },
  {
    "path": "node_modules/@angular/router/testing/src/testing.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the router/testing package.\n */\nexport * from './router_testing_module';\n"
  },
  {
    "path": "node_modules/@angular/router/testing/testing.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\n"
  },
  {
    "path": "node_modules/@angular/router/upgrade.d.ts",
    "content": "\n  export * from './upgrade/upgrade';\n  "
  },
  {
    "path": "node_modules/@angular/router/upgrade/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n"
  },
  {
    "path": "node_modules/@angular/router/upgrade/public_api.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/upgrade';\n"
  },
  {
    "path": "node_modules/@angular/router/upgrade/src/upgrade.d.ts",
    "content": "/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentRef, InjectionToken } from '@angular/core';\nimport { UpgradeModule } from '@angular/upgrade/static';\n/**\n * @description\n *\n * Creates an initializer that in addition to setting up the Angular\n * router sets up the ngRoute integration.\n *\n * ```\n * @NgModule({\n *  imports: [\n *   RouterModule.forRoot(SOME_ROUTES),\n *   UpgradeModule\n * ],\n * providers: [\n *   RouterUpgradeInitializer\n * ]\n * })\n * export class AppModule {\n *   ngDoBootstrap() {}\n * }\n * ```\n *\n * @publicApi\n */\nexport declare const RouterUpgradeInitializer: {\n    provide: InjectionToken<((compRef: ComponentRef<any>) => void)[]>;\n    multi: boolean;\n    useFactory: (ngUpgrade: UpgradeModule) => () => void;\n    deps: (typeof UpgradeModule)[];\n};\n/**\n * @description\n *\n * Sets up a location synchronization.\n *\n * History.pushState does not fire onPopState, so the Angular location\n * doesn't detect it. The workaround is to attach a location change listener\n *\n * @publicApi\n */\nexport declare function setUpLocationSync(ngUpgrade: UpgradeModule): void;\n"
  },
  {
    "path": "node_modules/@angular/router/upgrade/upgrade.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\n"
  },
  {
    "path": "node_modules/@angular/material/autocomplete.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './autocomplete/index';\n"
  },
  {
    "path": "node_modules/@angular/material/autocomplete/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/autocomplete/typings/autocomplete-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatAutocompleteModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/autocomplete/typings/autocomplete-origin.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef } from '@angular/core';\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nexport declare class MatAutocompleteOrigin {\n    /** Reference to the element on which the directive is applied. */\n    elementRef: ElementRef<HTMLElement>;\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef: ElementRef<HTMLElement>);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/autocomplete/typings/autocomplete-trigger.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ChangeDetectorRef, ElementRef, InjectionToken, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { MatOption, MatOptionSelectionChange } from '@angular/material/core';\nimport { MatFormField } from '@angular/material/form-field';\nimport { Observable } from 'rxjs';\nimport { MatAutocomplete } from './autocomplete';\nimport { MatAutocompleteOrigin } from './autocomplete-origin';\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n/** The height of each autocomplete option. */\nexport declare const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/** The total height of the autocomplete panel. */\nexport declare const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport declare const MAT_AUTOCOMPLETE_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY;\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport declare const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any;\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport declare function getMatAutocompleteMissingPanelError(): Error;\nexport declare class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n    private _element;\n    private _overlay;\n    private _viewContainerRef;\n    private _zone;\n    private _changeDetectorRef;\n    private _dir;\n    private _formField;\n    private _document;\n    private _viewportRuler?;\n    private _overlayRef;\n    private _portal;\n    private _componentDestroyed;\n    private _autocompleteDisabled;\n    private _scrollStrategy;\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private _previousValue;\n    /** Strategy that is used to position the panel. */\n    private _positionStrategy;\n    /** Whether or not the label state is being overridden. */\n    private _manuallyFloatingLabel;\n    /** The subscription for closing actions (some are bound to document). */\n    private _closingActionsSubscription;\n    /** Subscription to viewport size changes. */\n    private _viewportSubscription;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private _canOpenOnNextFocus;\n    /** Stream of keyboard events that can close the panel. */\n    private readonly _closeKeyEventStream;\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private _windowBlurHandler;\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void;\n    /** `View -> model callback called when autocomplete has been touched` */\n    _onTouched: () => void;\n    /** The autocomplete panel to be attached to this trigger. */\n    autocomplete: MatAutocomplete;\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    connectedTo: MatAutocompleteOrigin;\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    autocompleteAttribute: string;\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    autocompleteDisabled: boolean;\n    constructor(_element: ElementRef<HTMLInputElement>, _overlay: Overlay, _viewContainerRef: ViewContainerRef, _zone: NgZone, _changeDetectorRef: ChangeDetectorRef, scrollStrategy: any, _dir: Directionality, _formField: MatFormField, _document: any, _viewportRuler?: ViewportRuler | undefined);\n    ngOnDestroy(): void;\n    /** Whether or not the autocomplete panel is open. */\n    readonly panelOpen: boolean;\n    private _overlayAttached;\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void;\n    /** Closes the autocomplete suggestion panel. */\n    closePanel(): void;\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition(): void;\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    readonly panelClosingActions: Observable<MatOptionSelectionChange | null>;\n    /** Stream of autocomplete option selections. */\n    readonly optionSelections: Observable<MatOptionSelectionChange>;\n    /** The currently active option, coerced to MatOption type. */\n    readonly activeOption: MatOption | null;\n    /** Stream of clicks outside of the autocomplete panel. */\n    private _getOutsideClickStream;\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => {}): void;\n    registerOnTouched(fn: () => {}): void;\n    setDisabledState(isDisabled: boolean): void;\n    _handleKeydown(event: KeyboardEvent): void;\n    _handleInput(event: KeyboardEvent): void;\n    _handleFocus(): void;\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    private _floatLabel;\n    /** If the label has been manually elevated, return it to its normal state. */\n    private _resetLabel;\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private _scrollToOption;\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private _subscribeToClosingActions;\n    /** Destroys the autocomplete suggestion panel. */\n    private _destroyPanel;\n    private _setTriggerValue;\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private _setValueAndClose;\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    private _clearPreviousSelectedOption;\n    private _attachOverlay;\n    private _getOverlayConfig;\n    private _getOverlayPosition;\n    private _getConnectedElement;\n    private _getPanelWidth;\n    /** Returns the width of the input element, so the panel width can match it. */\n    private _getHostWidth;\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private _resetActiveItem;\n    /** Determines whether the panel can be opened. */\n    private _canOpen;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/autocomplete/typings/autocomplete.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, QueryList, TemplateRef } from '@angular/core';\nimport { CanDisableRipple, CanDisableRippleCtor, MatOptgroup, MatOption } from '@angular/material/core';\n/** Event object that is emitted when an autocomplete option is selected. */\nexport declare class MatAutocompleteSelectedEvent {\n    /** Reference to the autocomplete panel that emitted the event. */\n    source: MatAutocomplete;\n    /** Option that was selected. */\n    option: MatOption;\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source: MatAutocomplete, \n    /** Option that was selected. */\n    option: MatOption);\n}\n/** @docs-private */\nexport declare class MatAutocompleteBase {\n}\nexport declare const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase;\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n}\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport declare const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS: InjectionToken<MatAutocompleteDefaultOptions>;\n/** @docs-private */\nexport declare function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions;\nexport declare class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit, CanDisableRipple {\n    private _changeDetectorRef;\n    private _elementRef;\n    /** Manages active item in option list based on key events. */\n    _keyManager: ActiveDescendantKeyManager<MatOption>;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean;\n    /** Whether the autocomplete panel is open. */\n    readonly isOpen: boolean;\n    _isOpen: boolean;\n    /** @docs-private */\n    template: TemplateRef<any>;\n    /** Element for the panel containing the autocomplete options. */\n    panel: ElementRef;\n    /** @docs-private */\n    options: QueryList<MatOption>;\n    /** @docs-private */\n    optionGroups: QueryList<MatOptgroup>;\n    /** Function that maps an option's control value to its display value in the trigger. */\n    displayWith: ((value: any) => string) | null;\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    autoActiveFirstOption: boolean;\n    private _autoActiveFirstOption;\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    panelWidth: string | number;\n    /** Event that is emitted whenever an option from the list is selected. */\n    readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent>;\n    /** Event that is emitted when the autocomplete panel is opened. */\n    readonly opened: EventEmitter<void>;\n    /** Event that is emitted when the autocomplete panel is closed. */\n    readonly closed: EventEmitter<void>;\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    classList: string;\n    _classList: {\n        [key: string]: boolean;\n    };\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _elementRef: ElementRef<HTMLElement>, defaults: MatAutocompleteDefaultOptions);\n    ngAfterContentInit(): void;\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop: number): void;\n    /** Returns the panel's scrollTop. */\n    _getScrollTop(): number;\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility(): void;\n    /** Emits the `select` event. */\n    _emitSelectEvent(option: MatOption): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/autocomplete/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { MatAutocompleteOrigin as ɵa29 } from './autocomplete-origin';\n"
  },
  {
    "path": "node_modules/@angular/material/autocomplete/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './autocomplete';\nexport * from './autocomplete-module';\nexport * from './autocomplete-trigger';\n"
  },
  {
    "path": "node_modules/@angular/material/badge.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './badge/index';\n"
  },
  {
    "path": "node_modules/@angular/material/badge/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/badge/typings/badge-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatBadgeModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/badge/typings/badge.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AriaDescriber } from '@angular/cdk/a11y';\nimport { ElementRef, NgZone, OnDestroy, Renderer2 } from '@angular/core';\nimport { ThemePalette, CanDisableCtor, CanDisable } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatBadgeBase {\n}\nexport declare const _MatBadgeMixinBase: CanDisableCtor & typeof MatBadgeBase;\nexport declare type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport declare type MatBadgeSize = 'small' | 'medium' | 'large';\n/** Directive to display a text badge. */\nexport declare class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n    private _document;\n    private _ngZone;\n    private _elementRef;\n    private _ariaDescriber;\n    /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n    private _renderer?;\n    /** Whether the badge has any content. */\n    _hasContent: boolean;\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    color: ThemePalette;\n    private _color;\n    /** Whether the badge should overlap its contents or not */\n    overlap: boolean;\n    private _overlap;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    position: MatBadgePosition;\n    /** The content for the badge */\n    content: string;\n    private _content;\n    /** Message used to describe the decorated element via aria-describedby */\n    description: string;\n    private _description;\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    size: MatBadgeSize;\n    /** Whether the badge is hidden. */\n    hidden: boolean;\n    private _hidden;\n    /** Unique id for the badge */\n    _id: number;\n    private _badgeElement;\n    constructor(_document: any, _ngZone: NgZone, _elementRef: ElementRef<HTMLElement>, _ariaDescriber: AriaDescriber, \n    /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n    _renderer?: Renderer2 | undefined);\n    /** Whether the badge is above the host or not */\n    isAbove(): boolean;\n    /** Whether the badge is after the host or not */\n    isAfter(): boolean;\n    ngOnDestroy(): void;\n    /** Injects a span element into the DOM with the content. */\n    private _updateTextContent;\n    /** Creates the badge element */\n    private _createBadgeElement;\n    /** Sets the aria-label property on the element */\n    private _updateHostAriaDescription;\n    /** Adds css theme class given the color to the component host */\n    private _setColor;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/badge/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/badge/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './badge-module';\nexport * from './badge';\n"
  },
  {
    "path": "node_modules/@angular/material/bottom-sheet.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './bottom-sheet/index';\n"
  },
  {
    "path": "node_modules/@angular/material/bottom-sheet/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/bottom-sheet/typings/bottom-sheet-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/** Animations used by the Material bottom sheet. */\nexport declare const matBottomSheetAnimations: {\n    readonly bottomSheetState: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/bottom-sheet/typings/bottom-sheet-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewContainerRef, InjectionToken } from '@angular/core';\nimport { Direction } from '@angular/cdk/bidi';\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport declare const MAT_BOTTOM_SHEET_DATA: InjectionToken<any>;\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport declare class MatBottomSheetConfig<D = any> {\n    /** The view container to place the overlay for the bottom sheet into. */\n    viewContainerRef?: ViewContainerRef;\n    /** Extra CSS classes to be added to the bottom sheet container. */\n    panelClass?: string | string[];\n    /** Text layout direction for the bottom sheet. */\n    direction?: Direction;\n    /** Data being injected into the child component. */\n    data?: D | null;\n    /** Whether the bottom sheet has a backdrop. */\n    hasBackdrop?: boolean;\n    /** Custom class for the backdrop. */\n    backdropClass?: string;\n    /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n    disableClose?: boolean;\n    /** Aria label to assign to the bottom sheet element. */\n    ariaLabel?: string | null;\n    /**\n     * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    closeOnNavigation?: boolean;\n    /** Whether the bottom sheet should focus the first focusable element on open. */\n    autoFocus?: boolean;\n    /**\n     * Whether the bottom sheet should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n    restoreFocus?: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/bottom-sheet/typings/bottom-sheet-container.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentRef, EmbeddedViewRef, OnDestroy, ElementRef, ChangeDetectorRef, EventEmitter } from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { BasePortalOutlet, ComponentPortal, TemplatePortal, CdkPortalOutlet } from '@angular/cdk/portal';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { MatBottomSheetConfig } from './bottom-sheet-config';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\nexport declare class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n    private _elementRef;\n    private _changeDetectorRef;\n    private _focusTrapFactory;\n    /** The bottom sheet configuration. */\n    bottomSheetConfig: MatBottomSheetConfig;\n    private _breakpointSubscription;\n    /** The portal outlet inside of this container into which the content will be loaded. */\n    _portalOutlet: CdkPortalOutlet;\n    /** The state of the bottom sheet animations. */\n    _animationState: 'void' | 'visible' | 'hidden';\n    /** Emits whenever the state of the animation changes. */\n    _animationStateChanged: EventEmitter<AnimationEvent>;\n    /** The class that traps and manages focus within the bottom sheet. */\n    private _focusTrap;\n    /** Element that was focused before the bottom sheet was opened. */\n    private _elementFocusedBeforeOpened;\n    /** Server-side rendering-compatible reference to the global document object. */\n    private _document;\n    /** Whether the component has been destroyed. */\n    private _destroyed;\n    constructor(_elementRef: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, _focusTrapFactory: FocusTrapFactory, breakpointObserver: BreakpointObserver, document: any, \n    /** The bottom sheet configuration. */\n    bottomSheetConfig: MatBottomSheetConfig);\n    /** Attach a component portal as content to this bottom sheet container. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    /** Attach a template portal as content to this bottom sheet container. */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    /** Begin animation of bottom sheet entrance into view. */\n    enter(): void;\n    /** Begin animation of the bottom sheet exiting from view. */\n    exit(): void;\n    ngOnDestroy(): void;\n    _onAnimationDone(event: AnimationEvent): void;\n    _onAnimationStart(event: AnimationEvent): void;\n    private _toggleClass;\n    private _validatePortalAttached;\n    private _setPanelClass;\n    /** Moves the focus inside the focus trap. */\n    private _trapFocus;\n    /** Restores focus to the element that was focused before the bottom sheet was opened. */\n    private _restoreFocus;\n    /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n    private _savePreviouslyFocusedElement;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/bottom-sheet/typings/bottom-sheet-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatBottomSheetModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/bottom-sheet/typings/bottom-sheet-ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Location } from '@angular/common';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { Observable } from 'rxjs';\nimport { MatBottomSheetContainer } from './bottom-sheet-container';\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport declare class MatBottomSheetRef<T = any, R = any> {\n    private _overlayRef;\n    /** Instance of the component making up the content of the bottom sheet. */\n    instance: T;\n    /**\n     * Instance of the component into which the bottom sheet content is projected.\n     * @docs-private\n     */\n    containerInstance: MatBottomSheetContainer;\n    /** Subject for notifying the user that the bottom sheet has been dismissed. */\n    private readonly _afterDismissed;\n    /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n    private readonly _afterOpened;\n    /** Result to be passed down to the `afterDismissed` stream. */\n    private _result;\n    constructor(containerInstance: MatBottomSheetContainer, _overlayRef: OverlayRef, _location?: Location);\n    /**\n     * Dismisses the bottom sheet.\n     * @param result Data to be passed back to the bottom sheet opener.\n     */\n    dismiss(result?: R): void;\n    /** Gets an observable that is notified when the bottom sheet is finished closing. */\n    afterDismissed(): Observable<R | undefined>;\n    /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n    afterOpened(): Observable<void>;\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick(): Observable<MouseEvent>;\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents(): Observable<KeyboardEvent>;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/bottom-sheet/typings/bottom-sheet.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Overlay } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { Injector, TemplateRef, InjectionToken, OnDestroy } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { MatBottomSheetConfig } from './bottom-sheet-config';\nimport { MatBottomSheetRef } from './bottom-sheet-ref';\n/** Injection token that can be used to specify default bottom sheet options. */\nexport declare const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS: InjectionToken<MatBottomSheetConfig<any>>;\n/**\n * Service to trigger Material Design bottom sheets.\n */\nexport declare class MatBottomSheet implements OnDestroy {\n    private _overlay;\n    private _injector;\n    private _parentBottomSheet;\n    private _location?;\n    private _defaultOptions?;\n    private _bottomSheetRefAtThisLevel;\n    /** Reference to the currently opened bottom sheet. */\n    _openedBottomSheetRef: MatBottomSheetRef<any> | null;\n    constructor(_overlay: Overlay, _injector: Injector, _parentBottomSheet: MatBottomSheet, _location?: Location | undefined, _defaultOptions?: MatBottomSheetConfig<any> | undefined);\n    open<T, D = any, R = any>(component: ComponentType<T>, config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n    open<T, D = any, R = any>(template: TemplateRef<T>, config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n    /**\n     * Dismisses the currently-visible bottom sheet.\n     */\n    dismiss(): void;\n    ngOnDestroy(): void;\n    /**\n     * Attaches the bottom sheet container component to the overlay.\n     */\n    private _attachContainer;\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified bottom sheet config.\n     */\n    private _createOverlay;\n    /**\n     * Creates an injector to be used inside of a bottom sheet component.\n     * @param config Config that was used to create the bottom sheet.\n     * @param bottomSheetRef Reference to the bottom sheet.\n     */\n    private _createInjector;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/bottom-sheet/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/bottom-sheet/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './bottom-sheet-module';\nexport * from './bottom-sheet';\nexport * from './bottom-sheet-config';\nexport * from './bottom-sheet-container';\nexport * from './bottom-sheet-animations';\nexport * from './bottom-sheet-ref';\n"
  },
  {
    "path": "node_modules/@angular/material/button-toggle.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './button-toggle/index';\n"
  },
  {
    "path": "node_modules/@angular/material/button-toggle/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/button-toggle/typings/button-toggle-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatButtonToggleModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/button-toggle/typings/button-toggle.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList, InjectionToken } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanDisableRipple, CanDisableRippleCtor } from '@angular/material/core';\n/** Acceptable types for a button toggle. */\nexport declare type ToggleType = 'checkbox' | 'radio';\n/** Possible appearance styles for the button toggle. */\nexport declare type MatButtonToggleAppearance = 'legacy' | 'standard';\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n    appearance?: MatButtonToggleAppearance;\n}\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport declare const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS: InjectionToken<MatButtonToggleDefaultOptions>;\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport declare const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any;\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport declare class MatButtonToggleGroupMultiple {\n}\n/** Change event object emitted by MatButtonToggle. */\nexport declare class MatButtonToggleChange {\n    /** The MatButtonToggle that emits the event. */\n    source: MatButtonToggle;\n    /** The value assigned to the MatButtonToggle. */\n    value: any;\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source: MatButtonToggle, \n    /** The value assigned to the MatButtonToggle. */\n    value: any);\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nexport declare class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n    private _changeDetector;\n    private _vertical;\n    private _multiple;\n    private _disabled;\n    private _selectionModel;\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private _rawValue;\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    _controlValueAccessorChangeFn: (value: any) => void;\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    _onTouched: () => any;\n    /** Child button toggle buttons. */\n    _buttonToggles: QueryList<MatButtonToggle>;\n    /** The appearance for all the buttons in the group. */\n    appearance: MatButtonToggleAppearance;\n    /** `name` attribute for the underlying `input` element. */\n    name: string;\n    private _name;\n    /** Whether the toggle group is vertical. */\n    vertical: boolean;\n    /** Value of the toggle group. */\n    value: any;\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    readonly valueChange: EventEmitter<any>;\n    /** Selected button toggles in the group. */\n    readonly selected: MatButtonToggle | MatButtonToggle[];\n    /** Whether multiple button toggles can be selected. */\n    multiple: boolean;\n    /** Whether multiple button toggle group is disabled. */\n    disabled: boolean;\n    /** Event emitted when the group's value changes. */\n    readonly change: EventEmitter<MatButtonToggleChange>;\n    constructor(_changeDetector: ChangeDetectorRef, defaultOptions?: MatButtonToggleDefaultOptions);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent(): void;\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput?: boolean): void;\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle: MatButtonToggle): boolean;\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle: MatButtonToggle): boolean;\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private _setSelectionByValue;\n    /** Clears the selected toggles. */\n    private _clearSelection;\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private _selectValue;\n}\n/** @docs-private */\nexport declare class MatButtonToggleBase {\n}\nexport declare const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase;\n/** Single button inside of a toggle group. */\nexport declare class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit, CanDisableRipple, OnDestroy {\n    private _changeDetectorRef;\n    private _elementRef;\n    private _focusMonitor;\n    private _isSingleSelector;\n    private _checked;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    ariaLabel: string;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    ariaLabelledby: string | null;\n    /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n    _type: ToggleType;\n    _buttonElement: ElementRef<HTMLButtonElement>;\n    /** The parent button toggle group (exclusive selection). Optional. */\n    buttonToggleGroup: MatButtonToggleGroup;\n    /** Unique ID for the underlying `button` element. */\n    readonly buttonId: string;\n    /** The unique ID for this button toggle. */\n    id: string;\n    /** HTML's 'name' attribute used to group radios for unique selection. */\n    name: string;\n    /** MatButtonToggleGroup reads this to assign its own value. */\n    value: any;\n    /** Tabindex for the toggle. */\n    tabIndex: number | null;\n    /** The appearance style of the button. */\n    appearance: MatButtonToggleAppearance;\n    private _appearance;\n    /** Whether the button is checked. */\n    checked: boolean;\n    /** Whether the button is disabled. */\n    disabled: boolean;\n    private _disabled;\n    /** Event emitted when the group value changes. */\n    readonly change: EventEmitter<MatButtonToggleChange>;\n    constructor(toggleGroup: MatButtonToggleGroup, _changeDetectorRef: ChangeDetectorRef, _elementRef: ElementRef<HTMLElement>, _focusMonitor: FocusMonitor, defaultTabIndex: string, defaultOptions?: MatButtonToggleDefaultOptions);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /** Focuses the button. */\n    focus(): void;\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick(): void;\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/button-toggle/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/button-toggle/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './button-toggle';\nexport * from './button-toggle-module';\n"
  },
  {
    "path": "node_modules/@angular/material/button.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './button/index';\n"
  },
  {
    "path": "node_modules/@angular/material/button/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/button/typings/button-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatButtonModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/button/typings/button.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Platform } from '@angular/cdk/platform';\nimport { ElementRef, OnDestroy } from '@angular/core';\nimport { CanColor, CanDisable, CanDisableRipple, CanColorCtor, CanDisableCtor, CanDisableRippleCtor, MatRipple } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatButtonBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase;\n/**\n * Material design button.\n */\nexport declare class MatButton extends _MatButtonMixinBase implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n    /**\n     * @deprecated Platform checks for SSR are no longer needed\n     * @breaking-change 8.0.0\n     */\n    private _platform;\n    private _focusMonitor;\n    _animationMode?: string | undefined;\n    /** Whether the button is round. */\n    readonly isRoundButton: boolean;\n    /** Whether the button is icon button. */\n    readonly isIconButton: boolean;\n    /** Reference to the MatRipple instance of the button. */\n    ripple: MatRipple;\n    constructor(elementRef: ElementRef, \n    /**\n     * @deprecated Platform checks for SSR are no longer needed\n     * @breaking-change 8.0.0\n     */\n    _platform: Platform, _focusMonitor: FocusMonitor, _animationMode?: string | undefined);\n    ngOnDestroy(): void;\n    /** Focuses the button. */\n    focus(): void;\n    _getHostElement(): any;\n    _isRippleDisabled(): boolean;\n    /** Gets whether the button has one of the given attributes. */\n    _hasHostAttributes(...attributes: string[]): boolean;\n}\n/**\n * Raised Material design button.\n */\nexport declare class MatAnchor extends MatButton {\n    /** Tabindex of the button. */\n    tabIndex: number;\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef, animationMode?: string);\n    _haltDisabledEvents(event: Event): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/button/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/button/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './button-module';\nexport * from './button';\n"
  },
  {
    "path": "node_modules/@angular/material/card.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './card/index';\n"
  },
  {
    "path": "node_modules/@angular/material/card/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/card/typings/card-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatCardModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/card/typings/card.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nexport declare class MatCardContent {\n}\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nexport declare class MatCardTitle {\n}\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nexport declare class MatCardSubtitle {\n}\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nexport declare class MatCardActions {\n    /** Position of the actions inside the card. */\n    align: 'start' | 'end';\n}\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nexport declare class MatCardFooter {\n}\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nexport declare class MatCardImage {\n}\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nexport declare class MatCardSmImage {\n}\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nexport declare class MatCardMdImage {\n}\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nexport declare class MatCardLgImage {\n}\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nexport declare class MatCardXlImage {\n}\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nexport declare class MatCardAvatar {\n}\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\nexport declare class MatCard {\n}\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\nexport declare class MatCardHeader {\n}\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\nexport declare class MatCardTitleGroup {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/card/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/card/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './card';\nexport * from './card-module';\n"
  },
  {
    "path": "node_modules/@angular/material/checkbox.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './checkbox/index';\n"
  },
  {
    "path": "node_modules/@angular/material/checkbox/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/checkbox/typings/checkbox-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport declare type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport declare const MAT_CHECKBOX_CLICK_ACTION: InjectionToken<MatCheckboxClickAction>;\n"
  },
  {
    "path": "node_modules/@angular/material/checkbox/typings/checkbox-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatCheckboxModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/checkbox/typings/checkbox-required-validator.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Provider } from '@angular/core';\nimport { CheckboxRequiredValidator } from '@angular/forms';\nexport declare const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider;\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nexport declare class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/checkbox/typings/checkbox.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, AfterViewChecked } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, HasTabIndex, HasTabIndexCtor, MatRipple } from '@angular/material/core';\nimport { MatCheckboxClickAction } from './checkbox-config';\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport declare const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any;\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport declare enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init = 0,\n    /** The state representing the component when it's becoming checked. */\n    Checked = 1,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked = 2,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate = 3\n}\n/** Change event object emitted by MatCheckbox. */\nexport declare class MatCheckboxChange {\n    /** The source MatCheckbox of the event. */\n    source: MatCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n/** @docs-private */\nexport declare class MatCheckboxBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatCheckboxMixinBase: HasTabIndexCtor & CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatCheckboxBase;\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nexport declare class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor, AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n    private _changeDetectorRef;\n    private _focusMonitor;\n    private _ngZone;\n    private _clickAction;\n    _animationMode?: string | undefined;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    ariaLabel: string;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    ariaLabelledby: string | null;\n    private _uniqueId;\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    id: string;\n    /** Returns the unique id for the visual hidden input. */\n    readonly inputId: string;\n    /** Whether the checkbox is required. */\n    required: boolean;\n    private _required;\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    labelPosition: 'before' | 'after';\n    /** Name value will be applied to the input element if present */\n    name: string | null;\n    /** Event emitted when the checkbox's `checked` value changes. */\n    readonly change: EventEmitter<MatCheckboxChange>;\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    readonly indeterminateChange: EventEmitter<boolean>;\n    /** The value attribute of the native input element */\n    value: string;\n    /** The native `<input type=\"checkbox\">` element */\n    _inputElement: ElementRef<HTMLInputElement>;\n    /** Reference to the ripple instance of the checkbox. */\n    ripple: MatRipple;\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any;\n    private _currentAnimationClass;\n    private _currentCheckState;\n    private _controlValueAccessorChangeFn;\n    constructor(elementRef: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, _focusMonitor: FocusMonitor, _ngZone: NgZone, tabIndex: string, _clickAction: MatCheckboxClickAction, _animationMode?: string | undefined);\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    /**\n     * Whether the checkbox is checked.\n     */\n    checked: boolean;\n    private _checked;\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    disabled: any;\n    private _disabled;\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    indeterminate: boolean;\n    private _indeterminate;\n    _isRippleDisabled(): any;\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange(): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    _getAriaChecked(): 'true' | 'false' | 'mixed';\n    private _transitionCheckState;\n    private _emitChangeEvent;\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void;\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event): void;\n    /** Focuses the checkbox. */\n    focus(): void;\n    _onInteractionEvent(event: Event): void;\n    private _getAnimationClassForCheckStateTransition;\n    /**\n     * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n     * for the application.\n     */\n    private _calculateRippleRadius;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/checkbox/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/checkbox/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './checkbox';\nexport * from './checkbox-config';\nexport * from './checkbox-module';\nexport * from './checkbox-required-validator';\n"
  },
  {
    "path": "node_modules/@angular/material/chips.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './chips/index';\n"
  },
  {
    "path": "node_modules/@angular/material/chips/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/chips/typings/chip-default-options.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n    /** The list of key codes that will trigger a chipEnd event. */\n    separatorKeyCodes: number[] | Set<number>;\n}\n/** Injection token to be used to override the default options for the chips module. */\nexport declare const MAT_CHIPS_DEFAULT_OPTIONS: InjectionToken<MatChipsDefaultOptions>;\n"
  },
  {
    "path": "node_modules/@angular/material/chips/typings/chip-input.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, EventEmitter, OnChanges } from '@angular/core';\nimport { MatChipsDefaultOptions } from './chip-default-options';\nimport { MatChipList } from './chip-list';\nimport { MatChipTextControl } from './chip-text-control';\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n    /** The native `<input>` element that the event is being fired for. */\n    input: HTMLInputElement;\n    /** The value of the input. */\n    value: string;\n}\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nexport declare class MatChipInput implements MatChipTextControl, OnChanges {\n    protected _elementRef: ElementRef<HTMLInputElement>;\n    private _defaultOptions;\n    /** Whether the control is focused. */\n    focused: boolean;\n    _chipList: MatChipList;\n    /** Register input for chip list */\n    chipList: MatChipList;\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    addOnBlur: boolean;\n    _addOnBlur: boolean;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    separatorKeyCodes: number[] | Set<number>;\n    /** Emitted when a chip is to be added. */\n    chipEnd: EventEmitter<MatChipInputEvent>;\n    /** The input's placeholder text. */\n    placeholder: string;\n    /** Unique id for the input. */\n    id: string;\n    /** Whether the input is disabled. */\n    disabled: boolean;\n    private _disabled;\n    /** Whether the input is empty. */\n    readonly empty: boolean;\n    /** The native input element to which this directive is attached. */\n    protected _inputElement: HTMLInputElement;\n    constructor(_elementRef: ElementRef<HTMLInputElement>, _defaultOptions: MatChipsDefaultOptions);\n    ngOnChanges(): void;\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event?: KeyboardEvent): void;\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur(): void;\n    _focus(): void;\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event?: KeyboardEvent): void;\n    _onInput(): void;\n    /** Focuses the input. */\n    focus(): void;\n    /** Checks whether a keycode is one of the configured separators. */\n    private _isSeparatorKey;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/chips/typings/chip-list.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { AfterContentInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { CanUpdateErrorState, CanUpdateErrorStateCtor, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Observable } from 'rxjs';\nimport { MatChip, MatChipEvent, MatChipSelectionChange } from './chip';\nimport { MatChipTextControl } from './chip-text-control';\n/** @docs-private */\nexport declare class MatChipListBase {\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    _parentForm: NgForm;\n    _parentFormGroup: FormGroupDirective;\n    /** @docs-private */\n    ngControl: NgControl;\n    constructor(_defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, \n    /** @docs-private */\n    ngControl: NgControl);\n}\nexport declare const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase;\n/** Change event object that is emitted when the chip list value has changed. */\nexport declare class MatChipListChange {\n    /** Chip list that emitted the event. */\n    source: MatChipList;\n    /** Value of the chip list when the event was emitted. */\n    value: any;\n    constructor(\n    /** Chip list that emitted the event. */\n    source: MatChipList, \n    /** Value of the chip list when the event was emitted. */\n    value: any);\n}\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\nexport declare class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>, ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n    protected _elementRef: ElementRef<HTMLElement>;\n    private _changeDetectorRef;\n    private _dir;\n    /** @docs-private */\n    ngControl: NgControl;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly controlType: string;\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     */\n    private _lastDestroyedChipIndex;\n    /** Subject that emits when the component has been destroyed. */\n    private _destroyed;\n    /** Subscription to focus changes in the chips. */\n    private _chipFocusSubscription;\n    /** Subscription to blur changes in the chips. */\n    private _chipBlurSubscription;\n    /** Subscription to selection changes in chips. */\n    private _chipSelectionSubscription;\n    /** Subscription to remove changes in chips. */\n    private _chipRemoveSubscription;\n    /** The chip input to add more chips */\n    protected _chipInput: MatChipTextControl;\n    /** Uid of the chip list */\n    _uid: string;\n    /** The aria-describedby attribute on the chip list for improved a11y. */\n    _ariaDescribedby: string;\n    /** Tab index for the chip list. */\n    _tabIndex: number;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n    _userTabIndex: number | null;\n    /** The FocusKeyManager which handles focus. */\n    _keyManager: FocusKeyManager<MatChip>;\n    /** Function when touched */\n    _onTouched: () => void;\n    /** Function when changed */\n    _onChange: (value: any) => void;\n    _selectionModel: SelectionModel<MatChip>;\n    /** The array of selected chips inside chip list. */\n    readonly selected: MatChip[] | MatChip;\n    /** The ARIA role applied to the chip list. */\n    readonly role: string | null;\n    /** An object used to control when error messages are shown. */\n    errorStateMatcher: ErrorStateMatcher;\n    /** Whether the user should be allowed to select multiple chips. */\n    multiple: boolean;\n    private _multiple;\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    compareWith: (o1: any, o2: any) => boolean;\n    private _compareWith;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    value: any;\n    protected _value: any;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly id: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    required: boolean;\n    protected _required: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    placeholder: string;\n    protected _placeholder: string;\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    readonly focused: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly empty: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly shouldLabelFloat: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    disabled: boolean;\n    protected _disabled: boolean;\n    /** Orientation of the chip list. */\n    ariaOrientation: 'horizontal' | 'vertical';\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n    selectable: boolean;\n    protected _selectable: boolean;\n    tabIndex: number;\n    /** Combined stream of all of the child chips' selection change events. */\n    readonly chipSelectionChanges: Observable<MatChipSelectionChange>;\n    /** Combined stream of all of the child chips' focus change events. */\n    readonly chipFocusChanges: Observable<MatChipEvent>;\n    /** Combined stream of all of the child chips' blur change events. */\n    readonly chipBlurChanges: Observable<MatChipEvent>;\n    /** Combined stream of all of the child chips' remove change events. */\n    readonly chipRemoveChanges: Observable<MatChipEvent>;\n    /** Event emitted when the selected chip list value has been changed by the user. */\n    readonly change: EventEmitter<MatChipListChange>;\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    readonly valueChange: EventEmitter<any>;\n    /** The chip components contained within this chip list. */\n    chips: QueryList<MatChip>;\n    constructor(_elementRef: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, _dir: Directionality, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _defaultErrorStateMatcher: ErrorStateMatcher, \n    /** @docs-private */\n    ngControl: NgControl);\n    ngAfterContentInit(): void;\n    ngOnInit(): void;\n    ngDoCheck(): void;\n    ngOnDestroy(): void;\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement: MatChipTextControl): void;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids: string[]): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: () => void): void;\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event: MouseEvent): void;\n    /**\n     * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(): void;\n    /** Attempt to focus an input if we have one. */\n    _focusInput(): void;\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event: KeyboardEvent): void;\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    protected _updateTabIndex(): void;\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    protected _updateFocusForDestroyedChips(): void;\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    private _isValidIndex;\n    private _isInputEmpty;\n    _setSelectionByValue(value: any, isUserInput?: boolean): void;\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    private _selectValue;\n    private _initializeSelection;\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    private _clearSelection;\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private _sortValues;\n    /** Emits change event to set the model value. */\n    private _propagateChanges;\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur(): void;\n    /** Mark the field as touched */\n    _markAsTouched(): void;\n    private _resetChips;\n    private _dropSubscriptions;\n    /** Listens to user-generated selection events on each chip. */\n    private _listenToChipsSelection;\n    /** Listens to user-generated selection events on each chip. */\n    private _listenToChipsFocus;\n    private _listenToChipsRemoved;\n    /** Checks whether an event comes from inside a chip element. */\n    private _originatesFromChip;\n    /** Checks whether any of the chips is focused. */\n    private _hasFocusedChip;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/chips/typings/chip-text-control.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Interface for a text control that is used to drive interaction with a mat-chip-list. */\nexport interface MatChipTextControl {\n    /** Unique identifier for the text control. */\n    id: string;\n    /** The text control's placeholder text. */\n    placeholder: string;\n    /** Whether the text control has browser focus. */\n    focused: boolean;\n    /** Whether the text control is empty. */\n    empty: boolean;\n    /** Focuses the text control. */\n    focus(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/chips/typings/chip.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusableOption } from '@angular/cdk/a11y';\nimport { Platform } from '@angular/cdk/platform';\nimport { ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, RippleConfig, RippleGlobalOptions, RippleTarget } from '@angular/material/core';\nimport { Subject } from 'rxjs';\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n    /** The chip the event was fired on. */\n    chip: MatChip;\n}\n/** Event object emitted by MatChip when selected or deselected. */\nexport declare class MatChipSelectionChange {\n    /** Reference to the chip that emitted the event. */\n    source: MatChip;\n    /** Whether the chip that emitted the event is selected. */\n    selected: boolean;\n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput: boolean;\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source: MatChip, \n    /** Whether the chip that emitted the event is selected. */\n    selected: boolean, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput?: boolean);\n}\n/** @docs-private */\nexport declare class MatChipBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase;\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nexport declare class MatChipAvatar {\n}\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nexport declare class MatChipTrailingIcon {\n}\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nexport declare class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor, CanDisable, CanDisableRipple, RippleTarget {\n    _elementRef: ElementRef;\n    private _ngZone;\n    /** Reference to the RippleRenderer for the chip. */\n    private _chipRipple;\n    /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n    private _ripplesGloballyDisabled;\n    /**\n     * Ripple configuration for ripples that are launched on pointer down.\n     * @docs-private\n     */\n    rippleConfig: RippleConfig;\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    readonly rippleDisabled: boolean;\n    /** Whether the chip has focus. */\n    _hasFocus: boolean;\n    /** Whether the chip list is selectable */\n    chipListSelectable: boolean;\n    /** The chip avatar */\n    avatar: MatChipAvatar;\n    /** The chip's trailing icon. */\n    trailingIcon: MatChipTrailingIcon;\n    /** The chip's remove toggler. */\n    removeIcon: MatChipRemove;\n    /** Whether the chip is selected. */\n    selected: boolean;\n    protected _selected: boolean;\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    value: any;\n    protected _value: any;\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to it's selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if it's parent chip list is\n     * not selectable.\n     */\n    selectable: boolean;\n    protected _selectable: boolean;\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    removable: boolean;\n    protected _removable: boolean;\n    /** Emits when the chip is focused. */\n    readonly _onFocus: Subject<MatChipEvent>;\n    /** Emits when the chip is blured. */\n    readonly _onBlur: Subject<MatChipEvent>;\n    /** Emitted when the chip is selected or deselected. */\n    readonly selectionChange: EventEmitter<MatChipSelectionChange>;\n    /** Emitted when the chip is destroyed. */\n    readonly destroyed: EventEmitter<MatChipEvent>;\n    /** Emitted when a chip is to be removed. */\n    readonly removed: EventEmitter<MatChipEvent>;\n    /** The ARIA selected applied to the chip. */\n    readonly ariaSelected: string | null;\n    constructor(_elementRef: ElementRef, _ngZone: NgZone, platform: Platform, globalOptions: RippleGlobalOptions);\n    _addHostClassName(): void;\n    ngOnDestroy(): void;\n    /** Selects the chip. */\n    select(): void;\n    /** Deselects the chip. */\n    deselect(): void;\n    /** Select this chip and emit selected event */\n    selectViaInteraction(): void;\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput?: boolean): boolean;\n    /** Allows for programmatic focusing of the chip. */\n    focus(): void;\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove(): void;\n    /** Handles click events on the chip. */\n    _handleClick(event: Event): void;\n    /** Handle custom key presses. */\n    _handleKeydown(event: KeyboardEvent): void;\n    _blur(): void;\n    private _dispatchSelectionChange;\n}\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nexport declare class MatChipRemove {\n    protected _parentChip: MatChip;\n    constructor(_parentChip: MatChip);\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event: Event): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/chips/typings/chips-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatChipsModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/chips/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/chips/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './chips-module';\nexport * from './chip-list';\nexport * from './chip';\nexport * from './chip-input';\nexport * from './chip-default-options';\n"
  },
  {
    "path": "node_modules/@angular/material/core.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './core/index';\n"
  },
  {
    "path": "node_modules/@angular/material/core/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/animation/animation.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nexport declare class AnimationCurves {\n    static STANDARD_CURVE: string;\n    static DECELERATION_CURVE: string;\n    static ACCELERATION_CURVE: string;\n    static SHARP_CURVE: string;\n}\n/** @docs-private */\nexport declare class AnimationDurations {\n    static COMPLEX: string;\n    static ENTERING: string;\n    static EXITING: string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/common-behaviors/color.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Constructor } from './constructor';\nimport { ElementRef } from '@angular/core';\n/** @docs-private */\nexport interface CanColor {\n    /** Theme color palette for the component. */\n    color: ThemePalette;\n}\n/** @docs-private */\nexport declare type CanColorCtor = Constructor<CanColor>;\n/** @docs-private */\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n/** Possible color palette values. */\nexport declare type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/** Mixin to augment a directive with a `color` property. */\nexport declare function mixinColor<T extends Constructor<HasElementRef>>(base: T, defaultColor?: ThemePalette): CanColorCtor & T;\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/common-behaviors/common-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { HammerLoader } from '@angular/platform-browser';\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport declare const MATERIAL_SANITY_CHECKS: InjectionToken<boolean>;\n/** @docs-private */\nexport declare function MATERIAL_SANITY_CHECKS_FACTORY(): boolean;\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\nexport declare class MatCommonModule {\n    private _sanityChecksEnabled;\n    private _hammerLoader?;\n    /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n    private _hasDoneGlobalChecks;\n    /** Whether we've already checked for HammerJs availability. */\n    private _hasCheckedHammer;\n    /** Reference to the global `document` object. */\n    private _document;\n    /** Reference to the global 'window' object. */\n    private _window;\n    constructor(_sanityChecksEnabled: boolean, _hammerLoader?: HammerLoader | undefined);\n    /** Whether any sanity checks are enabled */\n    private _areChecksEnabled;\n    /** Whether the code is running in tests. */\n    private _isTestEnv;\n    private _checkDoctypeIsDefined;\n    private _checkThemeIsPresent;\n    /** Checks whether HammerJS is available. */\n    _checkHammerIsAvailable(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/common-behaviors/constructor.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nexport declare type Constructor<T> = new (...args: any[]) => T;\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/common-behaviors/disable-ripple.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Constructor } from './constructor';\n/** @docs-private */\nexport interface CanDisableRipple {\n    /** Whether ripples are disabled. */\n    disableRipple: boolean;\n}\n/** @docs-private */\nexport declare type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport declare function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T;\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/common-behaviors/disabled.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Constructor } from './constructor';\n/** @docs-private */\nexport interface CanDisable {\n    /** Whether the component is disabled. */\n    disabled: boolean;\n}\n/** @docs-private */\nexport declare type CanDisableCtor = Constructor<CanDisable>;\n/** Mixin to augment a directive with a `disabled` property. */\nexport declare function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T;\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/common-behaviors/error-state.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { ErrorStateMatcher } from '../error/error-options';\nimport { Constructor } from './constructor';\n/** @docs-private */\nexport interface CanUpdateErrorState {\n    updateErrorState(): void;\n    readonly stateChanges: Subject<void>;\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n}\n/** @docs-private */\nexport declare type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport declare function mixinErrorState<T extends Constructor<HasErrorState>>(base: T): CanUpdateErrorStateCtor & T;\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/common-behaviors/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { MatCommonModule, MATERIAL_SANITY_CHECKS } from './common-module';\nexport { CanDisable, CanDisableCtor, mixinDisabled } from './disabled';\nexport { CanColor, CanColorCtor, mixinColor, ThemePalette } from './color';\nexport { CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple } from './disable-ripple';\nexport { HasTabIndex, HasTabIndexCtor, mixinTabIndex } from './tabindex';\nexport { CanUpdateErrorState, CanUpdateErrorStateCtor, mixinErrorState } from './error-state';\nexport { HasInitialized, HasInitializedCtor, mixinInitialized } from './initialized';\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/common-behaviors/initialized.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { Constructor } from './constructor';\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n    /** Stream that emits once during the directive/component's ngOnInit. */\n    initialized: Observable<void>;\n    /**\n     * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n     * the directive has been initialized.\n     * @docs-private\n     */\n    _markInitialized: () => void;\n}\n/** @docs-private */\nexport declare type HasInitializedCtor = Constructor<HasInitialized>;\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport declare function mixinInitialized<T extends Constructor<{}>>(base: T): HasInitializedCtor & T;\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/common-behaviors/tabindex.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n/** @docs-private */\nexport interface HasTabIndex {\n    /** Tabindex of the component. */\n    tabIndex: number;\n}\n/** @docs-private */\nexport declare type HasTabIndexCtor = Constructor<HasTabIndex>;\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport declare function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex?: number): HasTabIndexCtor & T;\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/datetime/date-adapter.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport declare const MAT_DATE_LOCALE: InjectionToken<string>;\n/** @docs-private */\nexport declare function MAT_DATE_LOCALE_FACTORY(): string;\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport declare const MAT_DATE_LOCALE_PROVIDER: {\n    provide: InjectionToken<string>;\n    useExisting: InjectionToken<string>;\n};\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport declare abstract class DateAdapter<D> {\n    /** The locale to use for all dates. */\n    protected locale: any;\n    /** A stream that emits when the locale changes. */\n    readonly localeChanges: Observable<void>;\n    protected _localeChanges: Subject<void>;\n    /**\n     * Gets the year component of the given date.\n     * @param date The date to extract the year from.\n     * @returns The year component.\n     */\n    abstract getYear(date: D): number;\n    /**\n     * Gets the month component of the given date.\n     * @param date The date to extract the month from.\n     * @returns The month component (0-indexed, 0 = January).\n     */\n    abstract getMonth(date: D): number;\n    /**\n     * Gets the date of the month component of the given date.\n     * @param date The date to extract the date of the month from.\n     * @returns The month component (1-indexed, 1 = first of month).\n     */\n    abstract getDate(date: D): number;\n    /**\n     * Gets the day of the week component of the given date.\n     * @param date The date to extract the day of the week from.\n     * @returns The month component (0-indexed, 0 = Sunday).\n     */\n    abstract getDayOfWeek(date: D): number;\n    /**\n     * Gets a list of names for the months.\n     * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n     * @returns An ordered list of all month names, starting with January.\n     */\n    abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n    /**\n     * Gets a list of names for the dates of the month.\n     * @returns An ordered list of all date of the month names, starting with '1'.\n     */\n    abstract getDateNames(): string[];\n    /**\n     * Gets a list of names for the days of the week.\n     * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n     * @returns An ordered list of all weekday names, starting with Sunday.\n     */\n    abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n    /**\n     * Gets the name for the year of the given date.\n     * @param date The date to get the year name for.\n     * @returns The name of the given year (e.g. '2017').\n     */\n    abstract getYearName(date: D): string;\n    /**\n     * Gets the first day of the week.\n     * @returns The first day of the week (0-indexed, 0 = Sunday).\n     */\n    abstract getFirstDayOfWeek(): number;\n    /**\n     * Gets the number of days in the month of the given date.\n     * @param date The date whose month should be checked.\n     * @returns The number of days in the month of the given date.\n     */\n    abstract getNumDaysInMonth(date: D): number;\n    /**\n     * Clones the given date.\n     * @param date The date to clone\n     * @returns A new date equal to the given date.\n     */\n    abstract clone(date: D): D;\n    /**\n     * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n     * month and date.\n     * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n     * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n     * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n     * @returns The new date, or null if invalid.\n     */\n    abstract createDate(year: number, month: number, date: number): D;\n    /**\n     * Gets today's date.\n     * @returns Today's date.\n     */\n    abstract today(): D;\n    /**\n     * Parses a date from a user-provided value.\n     * @param value The value to parse.\n     * @param parseFormat The expected format of the value being parsed\n     *     (type is implementation-dependent).\n     * @returns The parsed date.\n     */\n    abstract parse(value: any, parseFormat: any): D | null;\n    /**\n     * Formats a date as a string according to the given format.\n     * @param date The value to format.\n     * @param displayFormat The format to use to display the date as a string.\n     * @returns The formatted date string.\n     */\n    abstract format(date: D, displayFormat: any): string;\n    /**\n     * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n     * calendar for each year and then finding the closest date in the new month. For example when\n     * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n     * @param date The date to add years to.\n     * @param years The number of years to add (may be negative).\n     * @returns A new date equal to the given one with the specified number of years added.\n     */\n    abstract addCalendarYears(date: D, years: number): D;\n    /**\n     * Adds the given number of months to the date. Months are counted as if flipping a page on the\n     * calendar for each month and then finding the closest date in the new month. For example when\n     * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n     * @param date The date to add months to.\n     * @param months The number of months to add (may be negative).\n     * @returns A new date equal to the given one with the specified number of months added.\n     */\n    abstract addCalendarMonths(date: D, months: number): D;\n    /**\n     * Adds the given number of days to the date. Days are counted as if moving one cell on the\n     * calendar for each day.\n     * @param date The date to add days to.\n     * @param days The number of days to add (may be negative).\n     * @returns A new date equal to the given one with the specified number of days added.\n     */\n    abstract addCalendarDays(date: D, days: number): D;\n    /**\n     * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n     * This method is used to generate date strings that are compatible with native HTML attributes\n     * such as the `min` or `max` attribute of an `<input>`.\n     * @param date The date to get the ISO date string for.\n     * @returns The ISO date string date string.\n     */\n    abstract toIso8601(date: D): string;\n    /**\n     * Checks whether the given object is considered a date instance by this DateAdapter.\n     * @param obj The object to check\n     * @returns Whether the object is a date instance.\n     */\n    abstract isDateInstance(obj: any): boolean;\n    /**\n     * Checks whether the given date is valid.\n     * @param date The date to check.\n     * @returns Whether the date is valid.\n     */\n    abstract isValid(date: D): boolean;\n    /**\n     * Gets date instance that is not valid.\n     * @returns An invalid date.\n     */\n    abstract invalid(): D;\n    /**\n     * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n     * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n     * string). The default implementation does not allow any deserialization, it simply checks that\n     * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n     * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n     * support passing values from your backend directly to these properties by overriding this method\n     * to also deserialize the format used by your backend.\n     * @param value The value to be deserialized into a date object.\n     * @returns The deserialized date object, either a valid date, null if the value can be\n     *     deserialized into a null date (e.g. the empty string), or an invalid date.\n     */\n    deserialize(value: any): D | null;\n    /**\n     * Sets the locale used for all dates.\n     * @param locale The new locale.\n     */\n    setLocale(locale: any): void;\n    /**\n     * Compares two dates.\n     * @param first The first date to compare.\n     * @param second The second date to compare.\n     * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n     *     a number greater than 0 if the first date is later.\n     */\n    compareDate(first: D, second: D): number;\n    /**\n     * Checks if two dates are equal.\n     * @param first The first date to check.\n     * @param second The second date to check.\n     * @returns Whether the two dates are equal.\n     *     Null dates are considered equal to other null dates.\n     */\n    sameDate(first: D | null, second: D | null): boolean;\n    /**\n     * Clamp the given date between min and max dates.\n     * @param date The date to clamp.\n     * @param min The minimum value to allow. If null or omitted no min is enforced.\n     * @param max The maximum value to allow. If null or omitted no max is enforced.\n     * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n     *     otherwise `date`.\n     */\n    clampDate(date: D, min?: D | null, max?: D | null): D;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/datetime/date-formats.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nexport declare type MatDateFormats = {\n    parse: {\n        dateInput: any;\n    };\n    display: {\n        dateInput: any;\n        monthYearLabel: any;\n        dateA11yLabel: any;\n        monthYearA11yLabel: any;\n    };\n};\nexport declare const MAT_DATE_FORMATS: InjectionToken<MatDateFormats>;\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/datetime/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\nexport declare class NativeDateModule {\n}\nexport declare class MatNativeDateModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/datetime/native-date-adapter.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { DateAdapter } from './date-adapter';\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\nexport declare class NativeDateAdapter extends DateAdapter<Date> {\n    /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n    private readonly _clampDate;\n    /**\n     * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n     * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n     * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n     * will produce `'8/13/1800'`.\n     *\n     * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n     * getting the string representation of a Date object from it's utc representation. We're keeping\n     * it here for sometime, just for precaution, in case we decide to revert some of these changes\n     * though.\n     */\n    useUtcForDisplay: boolean;\n    constructor(matDateLocale: string, platform: Platform);\n    getYear(date: Date): number;\n    getMonth(date: Date): number;\n    getDate(date: Date): number;\n    getDayOfWeek(date: Date): number;\n    getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n    getDateNames(): string[];\n    getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n    getYearName(date: Date): string;\n    getFirstDayOfWeek(): number;\n    getNumDaysInMonth(date: Date): number;\n    clone(date: Date): Date;\n    createDate(year: number, month: number, date: number): Date;\n    today(): Date;\n    parse(value: any): Date | null;\n    format(date: Date, displayFormat: Object): string;\n    addCalendarYears(date: Date, years: number): Date;\n    addCalendarMonths(date: Date, months: number): Date;\n    addCalendarDays(date: Date, days: number): Date;\n    toIso8601(date: Date): string;\n    /**\n     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n     * invalid date for all other values.\n     */\n    deserialize(value: any): Date | null;\n    isDateInstance(obj: any): boolean;\n    isValid(date: Date): boolean;\n    invalid(): Date;\n    /** Creates a date but allows the month and date to overflow. */\n    private _createDateWithOverflow;\n    /**\n     * Pads a number to make it two digits.\n     * @param n The number to pad.\n     * @returns The padded number.\n     */\n    private _2digit;\n    /**\n     * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n     * other browsers do not. We remove them to make output consistent and because they interfere with\n     * date parsing.\n     * @param str The string to strip direction characters from.\n     * @returns The stripped string.\n     */\n    private _stripDirectionalityCharacters;\n    /**\n     * When converting Date object to string, javascript built-in functions may return wrong\n     * results because it applies its internal DST rules. The DST rules around the world change\n     * very frequently, and the current valid rule is not always valid in previous years though.\n     * We work around this problem building a new Date object which has its internal UTC\n     * representation with the local date and time.\n     * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n     *    timeZone set to 'utc' to work fine.\n     * @param date Date from which we want to get the string representation according to dtf\n     * @returns A Date object with its UTC representation based on the passed in date info\n     */\n    private _format;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/datetime/native-date-formats.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MatDateFormats } from './date-formats';\nexport declare const MAT_NATIVE_DATE_FORMATS: MatDateFormats;\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/error/error-options.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n/** Error state matcher that matches when a control is invalid and dirty. */\nexport declare class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;\n}\n/** Provider that defines how form controls behave with regards to displaying error messages. */\nexport declare class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/gestures/gesture-annotations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Stripped-down HammerJS annotations to be used within Material, which are necessary,\n * because HammerJS is an optional dependency. For the full annotations see:\n * https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/hammerjs/index.d.ts\n */\n/** @docs-private */\nexport interface HammerInput {\n    preventDefault: () => {};\n    deltaX: number;\n    deltaY: number;\n    center: {\n        x: number;\n        y: number;\n    };\n}\n/** @docs-private */\nexport interface HammerStatic {\n    new (element: HTMLElement | SVGElement, options?: any): HammerManager;\n    Pan: Recognizer;\n    Swipe: Recognizer;\n    Press: Recognizer;\n}\n/** @docs-private */\nexport interface Recognizer {\n    new (options?: any): Recognizer;\n    recognizeWith(otherRecognizer: Recognizer | string): Recognizer;\n}\n/** @docs-private */\nexport interface RecognizerStatic {\n    new (options?: any): Recognizer;\n}\n/** @docs-private */\nexport interface HammerInstance {\n    on(eventName: string, callback: Function): void;\n    off(eventName: string, callback: Function): void;\n}\n/** @docs-private */\nexport interface HammerManager {\n    add(recogniser: Recognizer | Recognizer[]): Recognizer;\n    set(options: any): HammerManager;\n    emit(event: string, data: any): void;\n    off(events: string, handler?: Function): void;\n    on(events: string, handler: Function): void;\n}\n/** @docs-private */\nexport interface HammerOptions {\n    cssProps?: {\n        [key: string]: string;\n    };\n    domEvents?: boolean;\n    enable?: boolean | ((manager: HammerManager) => boolean);\n    preset?: any[];\n    touchAction?: string;\n    recognizers?: any[];\n    inputClass?: HammerInput;\n    inputTarget?: EventTarget;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/gestures/gesture-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { HammerGestureConfig } from '@angular/platform-browser';\nimport { MatCommonModule } from '../common-behaviors/common-module';\nimport { HammerInstance, HammerOptions } from './gesture-annotations';\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport declare const MAT_HAMMER_OPTIONS: InjectionToken<HammerOptions>;\n/** Adjusts configuration of our gesture library, Hammer. */\nexport declare class GestureConfig extends HammerGestureConfig {\n    private _hammerOptions?;\n    /** List of new event names to add to the gesture support list */\n    events: string[];\n    constructor(_hammerOptions?: HammerOptions | undefined, commonModule?: MatCommonModule);\n    /**\n     * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n     *\n     * Our gesture names come from the Material Design gestures spec:\n     * https://material.io/design/#gestures-touch-mechanics\n     *\n     * More information on default recognizers can be found in Hammer docs:\n     * http://hammerjs.github.io/recognizer-pan/\n     * http://hammerjs.github.io/recognizer-press/\n     *\n     * @param element Element to which to assign the new HammerJS gestures.\n     * @returns Newly-created HammerJS instance.\n     */\n    buildHammer(element: HTMLElement): HammerInstance;\n    /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n    private _createRecognizer;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { MATERIAL_SANITY_CHECKS_FACTORY as ɵa1 } from './common-behaviors/common-module';\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/label/label-options.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/** InjectionToken that can be used to specify the global label options. */\nexport declare const MAT_LABEL_GLOBAL_OPTIONS: InjectionToken<LabelOptions>;\n/** Type for the available floatLabel values. */\nexport declare type FloatLabelType = 'always' | 'never' | 'auto';\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/line/line.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, QueryList } from '@angular/core';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\nexport declare class MatLine {\n}\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport declare function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>): void;\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport declare class MatLineSetter {\n    constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>);\n}\nexport declare class MatLineModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/option/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatOptionModule {\n}\nexport * from './option';\nexport * from './optgroup';\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/option/optgroup.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CanDisable, CanDisableCtor } from '../common-behaviors/disabled';\n/** @docs-private */\nexport declare class MatOptgroupBase {\n}\nexport declare const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase;\n/**\n * Component that is used to group instances of `mat-option`.\n */\nexport declare class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    label: string;\n    /** Unique id for the underlying label. */\n    _labelId: string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/option/option.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterViewChecked, ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, OnDestroy, QueryList } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MatOptgroup } from './optgroup';\n/** Event object emitted by MatOption when selected or deselected. */\nexport declare class MatOptionSelectionChange {\n    /** Reference to the option that emitted the event. */\n    source: MatOption;\n    /** Whether the change in the option's value was a result of a user action. */\n    isUserInput: boolean;\n    constructor(\n    /** Reference to the option that emitted the event. */\n    source: MatOption, \n    /** Whether the change in the option's value was a result of a user action. */\n    isUserInput?: boolean);\n}\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n    disableRipple?: boolean;\n    multiple?: boolean;\n}\n/**\n * Injection token used to provide the parent component to options.\n */\nexport declare const MAT_OPTION_PARENT_COMPONENT: InjectionToken<MatOptionParentComponent>;\n/**\n * Single option inside of a `<mat-select>` element.\n */\nexport declare class MatOption implements AfterViewChecked, OnDestroy {\n    private _element;\n    private _changeDetectorRef;\n    private _parent;\n    readonly group: MatOptgroup;\n    private _selected;\n    private _active;\n    private _disabled;\n    private _mostRecentViewValue;\n    /** Whether the wrapping component is in multiple selection mode. */\n    readonly multiple: boolean | undefined;\n    /** Whether or not the option is currently selected. */\n    readonly selected: boolean;\n    /** The form value of the option. */\n    value: any;\n    /** The unique ID of the option. */\n    id: string;\n    /** Whether the option is disabled. */\n    disabled: any;\n    /** Whether ripples for the option are disabled. */\n    readonly disableRipple: boolean | undefined;\n    /** Event emitted when the option is selected or deselected. */\n    readonly onSelectionChange: EventEmitter<MatOptionSelectionChange>;\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly _stateChanges: Subject<void>;\n    constructor(_element: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, _parent: MatOptionParentComponent, group: MatOptgroup);\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    readonly active: boolean;\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    readonly viewValue: string;\n    /** Selects the option. */\n    select(): void;\n    /** Deselects the option. */\n    deselect(): void;\n    /** Sets focus onto this option. */\n    focus(): void;\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void;\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void;\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string;\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event: KeyboardEvent): void;\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction(): void;\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    _getTabIndex(): string;\n    /** Gets the host DOM element. */\n    _getHostElement(): HTMLElement;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    /** Emits the selection change event. */\n    private _emitSelectionChangeEvent;\n}\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport declare function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>, optionGroups: QueryList<MatOptgroup>): number;\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport declare function _getOptionScrollPosition(optionIndex: number, optionHeight: number, currentScrollPosition: number, panelHeight: number): number;\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './animation/animation';\nexport * from './common-behaviors/index';\nexport * from './datetime/index';\nexport * from './error/error-options';\nexport * from './gestures/gesture-annotations';\nexport * from './gestures/gesture-config';\nexport * from './line/line';\nexport * from './option/index';\nexport * from './label/label-options';\nexport * from './ripple/index';\nexport * from './selection/index';\nexport * from './testing/month-constants';\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/ripple/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\nexport declare class MatRippleModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/ripple/ripple-ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { RippleConfig, RippleRenderer } from './ripple-renderer';\n/** Possible states for a ripple element. */\nexport declare enum RippleState {\n    FADING_IN = 0,\n    VISIBLE = 1,\n    FADING_OUT = 2,\n    HIDDEN = 3\n}\n/**\n * Reference to a previously launched ripple element.\n */\nexport declare class RippleRef {\n    private _renderer;\n    /** Reference to the ripple HTML element. */\n    element: HTMLElement;\n    /** Ripple configuration used for the ripple. */\n    config: RippleConfig;\n    /** Current state of the ripple. */\n    state: RippleState;\n    constructor(_renderer: RippleRenderer, \n    /** Reference to the ripple HTML element. */\n    element: HTMLElement, \n    /** Ripple configuration used for the ripple. */\n    config: RippleConfig);\n    /** Fades out the ripple element. */\n    fadeOut(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/ripple/ripple-renderer.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, NgZone } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { RippleRef } from './ripple-ref';\nexport declare type RippleConfig = {\n    color?: string;\n    centered?: boolean;\n    radius?: number;\n    persistent?: boolean;\n    animation?: RippleAnimationConfig;\n    terminateOnPointerUp?: boolean;\n};\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n    /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n    enterDuration?: number;\n    /** Duration in milliseconds for the exit animation (fade-out). */\n    exitDuration?: number;\n}\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n    /** Configuration for ripples that are launched on pointer down. */\n    rippleConfig: RippleConfig;\n    /** Whether ripples on pointer down should be disabled. */\n    rippleDisabled: boolean;\n}\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport declare const defaultRippleAnimationConfig: {\n    enterDuration: number;\n    exitDuration: number;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport declare class RippleRenderer {\n    private _target;\n    private _ngZone;\n    /** Element where the ripples are being added to. */\n    private _containerElement;\n    /** Element which triggers the ripple elements on mouse events. */\n    private _triggerElement;\n    /** Whether the pointer is currently down or not. */\n    private _isPointerDown;\n    /** Events to be registered on the trigger element. */\n    private _triggerEvents;\n    /** Set of currently active ripple references. */\n    private _activeRipples;\n    /** Latest non-persistent ripple that was triggered. */\n    private _mostRecentTransientRipple;\n    /** Time in milliseconds when the last touchstart event happened. */\n    private _lastTouchStartEvent;\n    /**\n     * Cached dimensions of the ripple container. Set when the first\n     * ripple is shown and cleared once no more ripples are visible.\n     */\n    private _containerRect;\n    constructor(_target: RippleTarget, _ngZone: NgZone, elementRef: ElementRef<HTMLElement>, platform: Platform);\n    /**\n     * Fades in a ripple at the given coordinates.\n     * @param x Coordinate within the element, along the X axis at which to start the ripple.\n     * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n     * @param config Extra ripple options.\n     */\n    fadeInRipple(x: number, y: number, config?: RippleConfig): RippleRef;\n    /** Fades out a ripple reference. */\n    fadeOutRipple(rippleRef: RippleRef): void;\n    /** Fades out all currently active ripples. */\n    fadeOutAll(): void;\n    /** Sets up the trigger event listeners */\n    setupTriggerEvents(element: HTMLElement): void;\n    /** Function being called whenever the trigger is being pressed using mouse. */\n    private onMousedown;\n    /** Function being called whenever the trigger is being pressed using touch. */\n    private onTouchStart;\n    /** Function being called whenever the trigger is being released. */\n    private onPointerUp;\n    /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n    private runTimeoutOutsideZone;\n    /** Removes previously registered event listeners from the trigger element. */\n    _removeTriggerEvents(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/ripple/ripple.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { ElementRef, InjectionToken, NgZone, OnDestroy, OnInit } from '@angular/core';\nimport { RippleRef } from './ripple-ref';\nimport { RippleAnimationConfig, RippleConfig, RippleTarget } from './ripple-renderer';\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n    /**\n     * Whether ripples should be disabled. Ripples can be still launched manually by using\n     * the `launch()` method. Therefore focus indicators will still show up.\n     */\n    disabled?: boolean;\n    /**\n     * Configuration for the animation duration of the ripples. There are two phases with different\n     * durations for the ripples. The animation durations will be overwritten if the\n     * `NoopAnimationsModule` is being used.\n     */\n    animation?: RippleAnimationConfig;\n    /**\n     * Whether ripples should start fading out immediately after the mouse our touch is released. By\n     * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n     */\n    terminateOnPointerUp?: boolean;\n}\n/** Injection token that can be used to specify the global ripple options. */\nexport declare const MAT_RIPPLE_GLOBAL_OPTIONS: InjectionToken<RippleGlobalOptions>;\nexport declare class MatRipple implements OnInit, OnDestroy, RippleTarget {\n    private _elementRef;\n    /** Custom color for all ripples. */\n    color: string;\n    /** Whether the ripples should be visible outside the component's bounds. */\n    unbounded: boolean;\n    /**\n     * Whether the ripple always originates from the center of the host element's bounds, rather\n     * than originating from the location of the click event.\n     */\n    centered: boolean;\n    /**\n     * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n     * will be the distance from the center of the ripple to the furthest corner of the host element's\n     * bounding rectangle.\n     */\n    radius: number;\n    /**\n     * Configuration for the ripple animation. Allows modifying the enter and exit animation\n     * duration of the ripples. The animation durations will be overwritten if the\n     * `NoopAnimationsModule` is being used.\n     */\n    animation: RippleAnimationConfig;\n    /**\n     * Whether click events will not trigger the ripple. Ripples can be still launched manually\n     * by using the `launch()` method.\n     */\n    disabled: boolean;\n    private _disabled;\n    /**\n     * The element that triggers the ripple when click events are received.\n     * Defaults to the directive's host element.\n     */\n    trigger: HTMLElement;\n    private _trigger;\n    /** Renderer for the ripple DOM manipulations. */\n    private _rippleRenderer;\n    /** Options that are set globally for all ripples. */\n    private _globalOptions;\n    /** Whether ripple directive is initialized and the input bindings are set. */\n    private _isInitialized;\n    constructor(_elementRef: ElementRef<HTMLElement>, ngZone: NgZone, platform: Platform, globalOptions: RippleGlobalOptions, animationMode?: string);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /** Fades out all currently showing ripple elements. */\n    fadeOutAll(): void;\n    /**\n     * Ripple configuration from the directive's input values.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    readonly rippleConfig: RippleConfig;\n    /**\n     * Whether ripples on pointer-down are disabled or not.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    readonly rippleDisabled: boolean;\n    /** Sets up the the trigger event listeners if ripples are enabled. */\n    private _setupTriggerEventsIfEnabled;\n    /**\n     * Launches a manual ripple using the specified ripple configuration.\n     * @param config Configuration for the manual ripple.\n     */\n    launch(config: RippleConfig): RippleRef;\n    /**\n     * Launches a manual ripple at the specified coordinates within the element.\n     * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n     * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n     * @param config Optional ripple configuration for the manual ripple.\n     */\n    launch(x: number, y: number, config?: RippleConfig): RippleRef;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/selection/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatPseudoCheckboxModule {\n}\nexport * from './pseudo-checkbox/pseudo-checkbox';\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/selection/pseudo-checkbox/pseudo-checkbox.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport declare type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\nexport declare class MatPseudoCheckbox {\n    _animationMode?: string | undefined;\n    /** Display state of the checkbox. */\n    state: MatPseudoCheckboxState;\n    /** Whether the checkbox is disabled. */\n    disabled: boolean;\n    constructor(_animationMode?: string | undefined);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/core/typings/testing/month-constants.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport declare const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8, OCT = 9, NOV = 10, DEC = 11;\n"
  },
  {
    "path": "node_modules/@angular/material/datepicker.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './datepicker/index';\n"
  },
  {
    "path": "node_modules/@angular/material/datepicker/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/datepicker/typings/calendar-body.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, EventEmitter, NgZone, OnChanges, SimpleChanges } from '@angular/core';\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport declare type MatCalendarCellCssClasses = string | string[] | Set<string> | {\n    [key: string]: any;\n};\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport declare class MatCalendarCell {\n    value: number;\n    displayValue: string;\n    ariaLabel: string;\n    enabled: boolean;\n    cssClasses?: string | Set<string> | {\n        [key: string]: any;\n    } | string[] | undefined;\n    constructor(value: number, displayValue: string, ariaLabel: string, enabled: boolean, cssClasses?: string | Set<string> | {\n        [key: string]: any;\n    } | string[] | undefined);\n}\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\nexport declare class MatCalendarBody implements OnChanges {\n    private _elementRef;\n    private _ngZone;\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    label: string;\n    /** The cells to display in the table. */\n    rows: MatCalendarCell[][];\n    /** The value in the table that corresponds to today. */\n    todayValue: number;\n    /** The value in the table that is currently selected. */\n    selectedValue: number;\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    labelMinRequiredCells: number;\n    /** The number of columns in the table. */\n    numCols: number;\n    /** The cell number of the active cell in the table. */\n    activeCell: number;\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    cellAspectRatio: number;\n    /** Emits when a new value is selected. */\n    readonly selectedValueChange: EventEmitter<number>;\n    /** The number of blank cells to put at the beginning for the first row. */\n    _firstRowOffset: number;\n    /** Padding for the individual date cells. */\n    _cellPadding: string;\n    /** Width of an individual cell. */\n    _cellWidth: string;\n    constructor(_elementRef: ElementRef<HTMLElement>, _ngZone: NgZone);\n    _cellClicked(cell: MatCalendarCell): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    _isActiveCell(rowIndex: number, colIndex: number): boolean;\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/datepicker/typings/calendar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentType, Portal } from '@angular/cdk/portal';\nimport { AfterContentInit, AfterViewChecked, ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { DateAdapter, MatDateFormats } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { MatDatepickerIntl } from './datepicker-intl';\nimport { MatMonthView } from './month-view';\nimport { MatMultiYearView } from './multi-year-view';\nimport { MatYearView } from './year-view';\nimport { MatCalendarCellCssClasses } from './calendar-body';\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport declare type MatCalendarView = 'month' | 'year' | 'multi-year';\n/** Default header for MatCalendar */\nexport declare class MatCalendarHeader<D> {\n    private _intl;\n    calendar: MatCalendar<D>;\n    private _dateAdapter;\n    private _dateFormats;\n    constructor(_intl: MatDatepickerIntl, calendar: MatCalendar<D>, _dateAdapter: DateAdapter<D>, _dateFormats: MatDateFormats, changeDetectorRef: ChangeDetectorRef);\n    /** The label for the current calendar view. */\n    readonly periodButtonText: string;\n    readonly periodButtonLabel: string;\n    /** The label for the the previous button. */\n    readonly prevButtonLabel: string;\n    /** The label for the the next button. */\n    readonly nextButtonLabel: string;\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked(): void;\n    /** Handles user clicks on the previous button. */\n    previousClicked(): void;\n    /** Handles user clicks on the next button. */\n    nextClicked(): void;\n    /** Whether the previous period button is enabled. */\n    previousEnabled(): boolean;\n    /** Whether the next period button is enabled. */\n    nextEnabled(): boolean;\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    private _isSameView;\n}\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\nexport declare class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n    private _dateAdapter;\n    private _dateFormats;\n    private _changeDetectorRef;\n    /** An input indicating the type of the header component, if set. */\n    headerComponent: ComponentType<any>;\n    /** A portal containing the header component type for this calendar. */\n    _calendarHeaderPortal: Portal<any>;\n    private _intlChanges;\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    private _moveFocusOnNextTick;\n    /** A date representing the period (month or year) to start the calendar in. */\n    startAt: D | null;\n    private _startAt;\n    /** Whether the calendar should be started in month or year view. */\n    startView: MatCalendarView;\n    /** The currently selected date. */\n    selected: D | null;\n    private _selected;\n    /** The minimum selectable date. */\n    minDate: D | null;\n    private _minDate;\n    /** The maximum selectable date. */\n    maxDate: D | null;\n    private _maxDate;\n    /** Function used to filter which dates are selectable. */\n    dateFilter: (date: D) => boolean;\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass: (date: D) => MatCalendarCellCssClasses;\n    /** Emits when the currently selected date changes. */\n    readonly selectedChange: EventEmitter<D>;\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    readonly yearSelected: EventEmitter<D>;\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    readonly monthSelected: EventEmitter<D>;\n    /** Emits when any date is selected. */\n    readonly _userSelection: EventEmitter<void>;\n    /** Reference to the current month view component. */\n    monthView: MatMonthView<D>;\n    /** Reference to the current year view component. */\n    yearView: MatYearView<D>;\n    /** Reference to the current multi-year view component. */\n    multiYearView: MatMultiYearView<D>;\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    activeDate: D;\n    private _clampedActiveDate;\n    /** Whether the calendar is in month view. */\n    currentView: MatCalendarView;\n    private _currentView;\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges: Subject<void>;\n    constructor(_intl: MatDatepickerIntl, _dateAdapter: DateAdapter<D>, _dateFormats: MatDateFormats, _changeDetectorRef: ChangeDetectorRef);\n    ngAfterContentInit(): void;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    focusActiveCell(): void;\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate(): void;\n    /** Handles date selection in the month view. */\n    _dateSelected(date: D): void;\n    /** Handles year selection in the multiyear view. */\n    _yearSelectedInMultiYearView(normalizedYear: D): void;\n    /** Handles month selection in the year view. */\n    _monthSelectedInYearView(normalizedMonth: D): void;\n    _userSelected(): void;\n    /** Handles year/month selection in the multi-year/year views. */\n    _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Returns the component instance that corresponds to the current calendar view. */\n    private _getCurrentViewComponent;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/datepicker/typings/datepicker-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport declare const matDatepickerAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInCalendar: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/datepicker/typings/datepicker-errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nexport declare function createMissingDateImplError(provider: string): Error;\n"
  },
  {
    "path": "node_modules/@angular/material/datepicker/typings/datepicker-input.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, EventEmitter, OnDestroy } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';\nimport { DateAdapter, MatDateFormats, ThemePalette } from '@angular/material/core';\nimport { MatFormField } from '@angular/material/form-field';\nimport { MatDatepicker } from './datepicker';\n/** @docs-private */\nexport declare const MAT_DATEPICKER_VALUE_ACCESSOR: any;\n/** @docs-private */\nexport declare const MAT_DATEPICKER_VALIDATORS: any;\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport declare class MatDatepickerInputEvent<D> {\n    /** Reference to the datepicker input component that emitted the event. */\n    target: MatDatepickerInput<D>;\n    /** Reference to the native input element associated with the datepicker input. */\n    targetElement: HTMLElement;\n    /** The new value for the target datepicker input. */\n    value: D | null;\n    constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    target: MatDatepickerInput<D>, \n    /** Reference to the native input element associated with the datepicker input. */\n    targetElement: HTMLElement);\n}\n/** Directive used to connect an input to a MatDatepicker. */\nexport declare class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n    private _elementRef;\n    _dateAdapter: DateAdapter<D>;\n    private _dateFormats;\n    private _formField;\n    /** The datepicker that this input is associated with. */\n    matDatepicker: MatDatepicker<D>;\n    _datepicker: MatDatepicker<D>;\n    /** Function that can be used to filter out dates within the datepicker. */\n    matDatepickerFilter: (date: D | null) => boolean;\n    _dateFilter: (date: D | null) => boolean;\n    /** The value of the input. */\n    value: D | null;\n    private _value;\n    /** The minimum valid date. */\n    min: D | null;\n    private _min;\n    /** The maximum valid date. */\n    max: D | null;\n    private _max;\n    /** Whether the datepicker-input is disabled. */\n    disabled: boolean;\n    private _disabled;\n    /** Emits when a `change` event is fired on this `<input>`. */\n    readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>>;\n    /** Emits when an `input` event is fired on this `<input>`. */\n    readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>>;\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    _valueChange: EventEmitter<D | null>;\n    /** Emits when the disabled state has changed */\n    _disabledChange: EventEmitter<boolean>;\n    _onTouched: () => void;\n    private _cvaOnChange;\n    private _validatorOnChange;\n    private _datepickerSubscription;\n    private _localeSubscription;\n    /** The form control validator for whether the input parses. */\n    private _parseValidator;\n    /** The form control validator for the min date. */\n    private _minValidator;\n    /** The form control validator for the max date. */\n    private _maxValidator;\n    /** The form control validator for the date filter. */\n    private _filterValidator;\n    /** The combined form control validator for this input. */\n    private _validator;\n    /** Whether the last value set on the input was valid. */\n    private _lastValueValid;\n    constructor(_elementRef: ElementRef<HTMLInputElement>, _dateAdapter: DateAdapter<D>, _dateFormats: MatDateFormats, _formField: MatFormField);\n    ngOnDestroy(): void;\n    /** @docs-private */\n    registerOnValidatorChange(fn: () => void): void;\n    /** @docs-private */\n    validate(c: AbstractControl): ValidationErrors | null;\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n     */\n    getPopupConnectionElementRef(): ElementRef;\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return The element to connect the popup to.\n     */\n    getConnectedOverlayOrigin(): ElementRef;\n    writeValue(value: D): void;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: () => void): void;\n    setDisabledState(isDisabled: boolean): void;\n    _onKeydown(event: KeyboardEvent): void;\n    _onInput(value: string): void;\n    _onChange(): void;\n    /** Returns the palette used by the input's form field, if any. */\n    _getThemePalette(): ThemePalette;\n    /** Handles blur events on the input. */\n    _onBlur(): void;\n    /** Formats a value and sets it on the input element. */\n    private _formatValue;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/datepicker/typings/datepicker-intl.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\n/** Datepicker data that requires internationalization. */\nexport declare class MatDatepickerIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void>;\n    /** A label for the calendar popup (used by screen readers). */\n    calendarLabel: string;\n    /** A label for the button used to open the calendar popup (used by screen readers). */\n    openCalendarLabel: string;\n    /** A label for the previous month button (used by screen readers). */\n    prevMonthLabel: string;\n    /** A label for the next month button (used by screen readers). */\n    nextMonthLabel: string;\n    /** A label for the previous year button (used by screen readers). */\n    prevYearLabel: string;\n    /** A label for the next year button (used by screen readers). */\n    nextYearLabel: string;\n    /** A label for the previous multi-year button (used by screen readers). */\n    prevMultiYearLabel: string;\n    /** A label for the next multi-year button (used by screen readers). */\n    nextMultiYearLabel: string;\n    /** A label for the 'switch to month view' button (used by screen readers). */\n    switchToMonthViewLabel: string;\n    /** A label for the 'switch to year view' button (used by screen readers). */\n    switchToMultiYearViewLabel: string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/datepicker/typings/datepicker-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatDatepickerModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/datepicker/typings/datepicker-toggle.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ChangeDetectorRef, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { MatButton } from '@angular/material/button';\nimport { MatDatepicker } from './datepicker';\nimport { MatDatepickerIntl } from './datepicker-intl';\n/** Can be used to override the icon of a `matDatepickerToggle`. */\nexport declare class MatDatepickerToggleIcon {\n}\nexport declare class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n    _intl: MatDatepickerIntl;\n    private _changeDetectorRef;\n    private _stateChanges;\n    /** Datepicker instance that the button will toggle. */\n    datepicker: MatDatepicker<D>;\n    /** Tabindex for the toggle. */\n    tabIndex: number | null;\n    /** Whether the toggle button is disabled. */\n    disabled: boolean;\n    private _disabled;\n    /** Whether ripples on the toggle should be disabled. */\n    disableRipple: boolean;\n    /** Custom icon set by the consumer. */\n    _customIcon: MatDatepickerToggleIcon;\n    /** Underlying button element. */\n    _button: MatButton;\n    constructor(_intl: MatDatepickerIntl, _changeDetectorRef: ChangeDetectorRef, defaultTabIndex: string);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    ngAfterContentInit(): void;\n    _open(event: Event): void;\n    private _watchStateChanges;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/datepicker/typings/datepicker.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayRef, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { AfterViewInit, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { CanColor, CanColorCtor, DateAdapter, ThemePalette } from '@angular/material/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Subject } from 'rxjs';\nimport { MatCalendar } from './calendar';\nimport { MatDatepickerInput } from './datepicker-input';\nimport { MatCalendarCellCssClasses } from './calendar-body';\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport declare const MAT_DATEPICKER_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY;\n};\n/** @docs-private */\nexport declare class MatDatepickerContentBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase;\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\nexport declare class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase implements AfterViewInit, CanColor {\n    /** Reference to the internal calendar component. */\n    _calendar: MatCalendar<D>;\n    /** Reference to the datepicker that created the overlay. */\n    datepicker: MatDatepicker<D>;\n    /** Whether the datepicker is above or below the input. */\n    _isAbove: boolean;\n    constructor(elementRef: ElementRef);\n    ngAfterViewInit(): void;\n}\n/** Component responsible for managing the datepicker popup/dialog. */\nexport declare class MatDatepicker<D> implements OnDestroy, CanColor {\n    private _dialog;\n    private _overlay;\n    private _ngZone;\n    private _viewContainerRef;\n    private _dateAdapter;\n    private _dir;\n    private _document;\n    private _scrollStrategy;\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    calendarHeaderComponent: ComponentType<any>;\n    /** The date to open the calendar to initially. */\n    startAt: D | null;\n    private _startAt;\n    /** The view that the calendar should start in. */\n    startView: 'month' | 'year' | 'multi-year';\n    /** Color palette to use on the datepicker's calendar. */\n    color: ThemePalette;\n    _color: ThemePalette;\n    /**\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n     * than a popup and elements have more padding to allow for bigger touch targets.\n     */\n    touchUi: boolean;\n    private _touchUi;\n    /** Whether the datepicker pop-up should be disabled. */\n    disabled: boolean;\n    private _disabled;\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    readonly yearSelected: EventEmitter<D>;\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    readonly monthSelected: EventEmitter<D>;\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n    panelClass: string | string[];\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass: (date: D) => MatCalendarCellCssClasses;\n    /** Emits when the datepicker has been opened. */\n    openedStream: EventEmitter<void>;\n    /** Emits when the datepicker has been closed. */\n    closedStream: EventEmitter<void>;\n    /** Whether the calendar is open. */\n    opened: boolean;\n    private _opened;\n    /** The id for the datepicker calendar. */\n    id: string;\n    /** The currently selected date. */\n    _selected: D | null;\n    private _validSelected;\n    /** The minimum selectable date. */\n    readonly _minDate: D | null;\n    /** The maximum selectable date. */\n    readonly _maxDate: D | null;\n    readonly _dateFilter: (date: D | null) => boolean;\n    /** A reference to the overlay when the calendar is opened as a popup. */\n    _popupRef: OverlayRef;\n    /** A reference to the dialog when the calendar is opened as a dialog. */\n    private _dialogRef;\n    /** A portal containing the calendar for this datepicker. */\n    private _calendarPortal;\n    /** Reference to the component instantiated in popup mode. */\n    private _popupComponentRef;\n    /** The element that was focused before the datepicker was opened. */\n    private _focusedElementBeforeOpen;\n    /** Subscription to value changes in the associated input element. */\n    private _inputSubscription;\n    /** The input element this datepicker is associated with. */\n    _datepickerInput: MatDatepickerInput<D>;\n    /** Emits when the datepicker is disabled. */\n    readonly _disabledChange: Subject<boolean>;\n    /** Emits new selected date when selected date changes. */\n    readonly _selectedChanged: Subject<D>;\n    constructor(_dialog: MatDialog, _overlay: Overlay, _ngZone: NgZone, _viewContainerRef: ViewContainerRef, scrollStrategy: any, _dateAdapter: DateAdapter<D>, _dir: Directionality, _document: any);\n    ngOnDestroy(): void;\n    /** Selects the given date */\n    select(date: D): void;\n    /** Emits the selected year in multiyear view */\n    _selectYear(normalizedYear: D): void;\n    /** Emits selected month in year view */\n    _selectMonth(normalizedMonth: D): void;\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    _registerInput(input: MatDatepickerInput<D>): void;\n    /** Open the calendar. */\n    open(): void;\n    /** Close the calendar. */\n    close(): void;\n    /** Open the calendar as a dialog. */\n    private _openAsDialog;\n    /** Open the calendar as a popup. */\n    private _openAsPopup;\n    /** Create the popup. */\n    private _createPopup;\n    /** Create the popup PositionStrategy. */\n    private _createPopupPositionStrategy;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Passes the current theme color along to the calendar overlay. */\n    private _setColor;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/datepicker/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { MatMultiYearView as ɵa34 } from './multi-year-view';\n"
  },
  {
    "path": "node_modules/@angular/material/datepicker/typings/month-view.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter } from '@angular/core';\nimport { DateAdapter, MatDateFormats } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses } from './calendar-body';\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\nexport declare class MatMonthView<D> implements AfterContentInit {\n    private _changeDetectorRef;\n    private _dateFormats;\n    _dateAdapter: DateAdapter<D>;\n    private _dir?;\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    activeDate: D;\n    private _activeDate;\n    /** The currently selected date. */\n    selected: D | null;\n    private _selected;\n    /** The minimum selectable date. */\n    minDate: D | null;\n    private _minDate;\n    /** The maximum selectable date. */\n    maxDate: D | null;\n    private _maxDate;\n    /** Function used to filter which dates are selectable. */\n    dateFilter: (date: D) => boolean;\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass: (date: D) => MatCalendarCellCssClasses;\n    /** Emits when a new date is selected. */\n    readonly selectedChange: EventEmitter<D | null>;\n    /** Emits when any date is selected. */\n    readonly _userSelection: EventEmitter<void>;\n    /** Emits when any date is activated. */\n    readonly activeDateChange: EventEmitter<D>;\n    /** The body of calendar table */\n    _matCalendarBody: MatCalendarBody;\n    /** The label for this month (e.g. \"January 2017\"). */\n    _monthLabel: string;\n    /** Grid of calendar cells representing the dates of the month. */\n    _weeks: MatCalendarCell[][];\n    /** The number of blank cells in the first row before the 1st of the month. */\n    _firstWeekOffset: number;\n    /**\n     * The date of the month that the currently selected Date falls on.\n     * Null if the currently selected Date is in another month.\n     */\n    _selectedDate: number | null;\n    /** The date of the month that today falls on. Null if today is in another month. */\n    _todayDate: number | null;\n    /** The names of the weekdays. */\n    _weekdays: {\n        long: string;\n        narrow: string;\n    }[];\n    constructor(_changeDetectorRef: ChangeDetectorRef, _dateFormats: MatDateFormats, _dateAdapter: DateAdapter<D>, _dir?: Directionality | undefined);\n    ngAfterContentInit(): void;\n    /** Handles when a new date is selected. */\n    _dateSelected(date: number): void;\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    _handleCalendarBodyKeydown(event: KeyboardEvent): void;\n    /** Initializes this month view. */\n    _init(): void;\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(): void;\n    /** Creates MatCalendarCells for the dates in this month. */\n    private _createWeekCells;\n    /** Date filter for the month */\n    private _shouldEnableDate;\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    private _getDateInCurrentMonth;\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    private _hasSameMonthAndYear;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Determines whether the user has the RTL layout direction. */\n    private _isRtl;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/datepicker/typings/multi-year-view.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter } from '@angular/core';\nimport { DateAdapter } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { MatCalendarBody, MatCalendarCell } from './calendar-body';\nexport declare const yearsPerPage = 24;\nexport declare const yearsPerRow = 4;\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\nexport declare class MatMultiYearView<D> implements AfterContentInit {\n    private _changeDetectorRef;\n    _dateAdapter: DateAdapter<D>;\n    private _dir?;\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    activeDate: D;\n    private _activeDate;\n    /** The currently selected date. */\n    selected: D | null;\n    private _selected;\n    /** The minimum selectable date. */\n    minDate: D | null;\n    private _minDate;\n    /** The maximum selectable date. */\n    maxDate: D | null;\n    private _maxDate;\n    /** A function used to filter which dates are selectable. */\n    dateFilter: (date: D) => boolean;\n    /** Emits when a new year is selected. */\n    readonly selectedChange: EventEmitter<D>;\n    /** Emits the selected year. This doesn't imply a change on the selected date */\n    readonly yearSelected: EventEmitter<D>;\n    /** Emits when any date is activated. */\n    readonly activeDateChange: EventEmitter<D>;\n    /** The body of calendar table */\n    _matCalendarBody: MatCalendarBody;\n    /** Grid of calendar cells representing the currently displayed years. */\n    _years: MatCalendarCell[][];\n    /** The year that today falls on. */\n    _todayYear: number;\n    /** The year of the selected date. Null if the selected date is null. */\n    _selectedYear: number | null;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _dateAdapter: DateAdapter<D>, _dir?: Directionality | undefined);\n    ngAfterContentInit(): void;\n    /** Initializes this multi-year view. */\n    _init(): void;\n    /** Handles when a new year is selected. */\n    _yearSelected(year: number): void;\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    _handleCalendarBodyKeydown(event: KeyboardEvent): void;\n    _getActiveCell(): number;\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(): void;\n    /** Creates an MatCalendarCell for the given year. */\n    private _createCellForYear;\n    /** Whether the given year is enabled. */\n    private _shouldEnableYear;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Determines whether the user has the RTL layout direction. */\n    private _isRtl;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/datepicker/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './datepicker-module';\nexport * from './calendar';\nexport * from './calendar-body';\nexport * from './datepicker';\nexport * from './datepicker-animations';\nexport * from './datepicker-input';\nexport * from './datepicker-intl';\nexport * from './datepicker-toggle';\nexport * from './month-view';\nexport * from './year-view';\n"
  },
  {
    "path": "node_modules/@angular/material/datepicker/typings/year-view.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter } from '@angular/core';\nimport { DateAdapter, MatDateFormats } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { MatCalendarBody, MatCalendarCell } from './calendar-body';\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\nexport declare class MatYearView<D> implements AfterContentInit {\n    private _changeDetectorRef;\n    private _dateFormats;\n    _dateAdapter: DateAdapter<D>;\n    private _dir?;\n    /** The date to display in this year view (everything other than the year is ignored). */\n    activeDate: D;\n    private _activeDate;\n    /** The currently selected date. */\n    selected: D | null;\n    private _selected;\n    /** The minimum selectable date. */\n    minDate: D | null;\n    private _minDate;\n    /** The maximum selectable date. */\n    maxDate: D | null;\n    private _maxDate;\n    /** A function used to filter which dates are selectable. */\n    dateFilter: (date: D) => boolean;\n    /** Emits when a new month is selected. */\n    readonly selectedChange: EventEmitter<D>;\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    readonly monthSelected: EventEmitter<D>;\n    /** Emits when any date is activated. */\n    readonly activeDateChange: EventEmitter<D>;\n    /** The body of calendar table */\n    _matCalendarBody: MatCalendarBody;\n    /** Grid of calendar cells representing the months of the year. */\n    _months: MatCalendarCell[][];\n    /** The label for this year (e.g. \"2017\"). */\n    _yearLabel: string;\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    _todayMonth: number | null;\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    _selectedMonth: number | null;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _dateFormats: MatDateFormats, _dateAdapter: DateAdapter<D>, _dir?: Directionality | undefined);\n    ngAfterContentInit(): void;\n    /** Handles when a new month is selected. */\n    _monthSelected(month: number): void;\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    _handleCalendarBodyKeydown(event: KeyboardEvent): void;\n    /** Initializes this year view. */\n    _init(): void;\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(): void;\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    private _getMonthInCurrentYear;\n    /** Creates an MatCalendarCell for the given month. */\n    private _createCellForMonth;\n    /** Whether the given month is enabled. */\n    private _shouldEnableMonth;\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    private _isYearAndMonthAfterMaxDate;\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    private _isYearAndMonthBeforeMinDate;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Determines whether the user has the RTL layout direction. */\n    private _isRtl;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/dialog.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './dialog/index';\n"
  },
  {
    "path": "node_modules/@angular/material/dialog/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/dialog/typings/dialog-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport declare const matDialogAnimations: {\n    readonly dialogContainer: AnimationTriggerMetadata;\n    readonly slideDialog: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/dialog/typings/dialog-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewContainerRef } from '@angular/core';\nimport { Direction } from '@angular/cdk/bidi';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\n/** Valid ARIA roles for a dialog element. */\nexport declare type DialogRole = 'dialog' | 'alertdialog';\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n    /** Override for the dialog's top position. */\n    top?: string;\n    /** Override for the dialog's bottom position. */\n    bottom?: string;\n    /** Override for the dialog's left position. */\n    left?: string;\n    /** Override for the dialog's right position. */\n    right?: string;\n}\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport declare class MatDialogConfig<D = any> {\n    /**\n     * Where the attached component should live in Angular's *logical* component tree.\n     * This affects what is available for injection and the change detection order for the\n     * component instantiated inside of the dialog. This does not affect where the dialog\n     * content will be rendered.\n     */\n    viewContainerRef?: ViewContainerRef;\n    /** ID for the dialog. If omitted, a unique one will be generated. */\n    id?: string;\n    /** The ARIA role of the dialog element. */\n    role?: DialogRole;\n    /** Custom class for the overlay pane. */\n    panelClass?: string | string[];\n    /** Whether the dialog has a backdrop. */\n    hasBackdrop?: boolean;\n    /** Custom class for the backdrop, */\n    backdropClass?: string;\n    /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n    disableClose?: boolean;\n    /** Width of the dialog. */\n    width?: string;\n    /** Height of the dialog. */\n    height?: string;\n    /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n    minWidth?: number | string;\n    /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n    minHeight?: number | string;\n    /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n    maxWidth?: number | string;\n    /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n    maxHeight?: number | string;\n    /** Position overrides. */\n    position?: DialogPosition;\n    /** Data being injected into the child component. */\n    data?: D | null;\n    /** Layout direction for the dialog's content. */\n    direction?: Direction;\n    /** ID of the element that describes the dialog. */\n    ariaDescribedBy?: string | null;\n    /** Aria label to assign to the dialog element */\n    ariaLabel?: string | null;\n    /** Whether the dialog should focus the first focusable element on open. */\n    autoFocus?: boolean;\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n    restoreFocus?: boolean;\n    /** Scroll strategy to be used for the dialog. */\n    scrollStrategy?: ScrollStrategy;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    closeOnNavigation?: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/dialog/typings/dialog-container.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentRef, ElementRef, EmbeddedViewRef, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { BasePortalOutlet, ComponentPortal, CdkPortalOutlet, TemplatePortal } from '@angular/cdk/portal';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { MatDialogConfig } from './dialog-config';\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport declare function throwMatDialogContentAlreadyAttachedError(): void;\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nexport declare class MatDialogContainer extends BasePortalOutlet {\n    private _elementRef;\n    private _focusTrapFactory;\n    private _changeDetectorRef;\n    private _document;\n    /** The dialog configuration. */\n    _config: MatDialogConfig;\n    /** The portal outlet inside of this container into which the dialog content will be loaded. */\n    _portalOutlet: CdkPortalOutlet;\n    /** The class that traps and manages focus within the dialog. */\n    private _focusTrap;\n    /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n    private _elementFocusedBeforeDialogWasOpened;\n    /** State of the dialog animation. */\n    _state: 'void' | 'enter' | 'exit';\n    /** Emits when an animation state changes. */\n    _animationStateChanged: EventEmitter<AnimationEvent>;\n    /** ID of the element that should be considered as the dialog's label. */\n    _ariaLabelledBy: string | null;\n    /** ID for the container DOM element. */\n    _id: string;\n    constructor(_elementRef: ElementRef, _focusTrapFactory: FocusTrapFactory, _changeDetectorRef: ChangeDetectorRef, _document: any, \n    /** The dialog configuration. */\n    _config: MatDialogConfig);\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    /** Moves the focus inside the focus trap. */\n    private _trapFocus;\n    /** Restores focus to the element that was focused before the dialog opened. */\n    private _restoreFocus;\n    /** Saves a reference to the element that was focused before the dialog was opened. */\n    private _savePreviouslyFocusedElement;\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone(event: AnimationEvent): void;\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart(event: AnimationEvent): void;\n    /** Starts the dialog exit animation. */\n    _startExitAnimation(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/dialog/typings/dialog-content-directives.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OnChanges, OnInit, SimpleChanges, ElementRef } from '@angular/core';\nimport { MatDialog } from './dialog';\nimport { MatDialogRef } from './dialog-ref';\n/**\n * Button that will close the current dialog.\n */\nexport declare class MatDialogClose implements OnInit, OnChanges {\n    dialogRef: MatDialogRef<any>;\n    private _elementRef;\n    private _dialog;\n    /** Screenreader label for the button. */\n    ariaLabel: string;\n    /** Dialog close input. */\n    dialogResult: any;\n    _matDialogClose: any;\n    constructor(dialogRef: MatDialogRef<any>, _elementRef: ElementRef<HTMLElement>, _dialog: MatDialog);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n}\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport declare class MatDialogTitle implements OnInit {\n    private _dialogRef;\n    private _elementRef;\n    private _dialog;\n    id: string;\n    constructor(_dialogRef: MatDialogRef<any>, _elementRef: ElementRef<HTMLElement>, _dialog: MatDialog);\n    ngOnInit(): void;\n}\n/**\n * Scrollable content container of a dialog.\n */\nexport declare class MatDialogContent {\n}\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport declare class MatDialogActions {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/dialog/typings/dialog-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatDialogModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/dialog/typings/dialog-ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { Location } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { DialogPosition } from './dialog-config';\nimport { MatDialogContainer } from './dialog-container';\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport declare class MatDialogRef<T, R = any> {\n    private _overlayRef;\n    _containerInstance: MatDialogContainer;\n    readonly id: string;\n    /** The instance of component opened into the dialog. */\n    componentInstance: T;\n    /** Whether the user is allowed to close the dialog. */\n    disableClose: boolean | undefined;\n    /** Subject for notifying the user that the dialog has finished opening. */\n    private readonly _afterOpened;\n    /** Subject for notifying the user that the dialog has finished closing. */\n    private readonly _afterClosed;\n    /** Subject for notifying the user that the dialog has started closing. */\n    private readonly _beforeClosed;\n    /** Result to be passed to afterClosed. */\n    private _result;\n    constructor(_overlayRef: OverlayRef, _containerInstance: MatDialogContainer, _location?: Location, id?: string);\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult?: R): void;\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened(): Observable<void>;\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed(): Observable<R | undefined>;\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed(): Observable<R | undefined>;\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick(): Observable<MouseEvent>;\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents(): Observable<KeyboardEvent>;\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position?: DialogPosition): this;\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width?: string, height?: string): this;\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @deprecated Use `afterOpened` instead.\n     * @breaking-change 8.0.0\n     */\n    afterOpen(): Observable<void>;\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @deprecated Use `beforeClosed` instead.\n     * @breaking-change 8.0.0\n     */\n    beforeClose(): Observable<R | undefined>;\n    /** Fetches the position strategy object from the overlay ref. */\n    private _getPositionStrategy;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/dialog/typings/dialog.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Overlay, OverlayContainer, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { Location } from '@angular/common';\nimport { InjectionToken, Injector, OnDestroy, TemplateRef } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { MatDialogConfig } from './dialog-config';\nimport { MatDialogRef } from './dialog-ref';\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport declare const MAT_DIALOG_DATA: InjectionToken<any>;\n/** Injection token that can be used to specify default dialog options. */\nexport declare const MAT_DIALOG_DEFAULT_OPTIONS: InjectionToken<MatDialogConfig<any>>;\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport declare const MAT_DIALOG_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY;\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nexport declare class MatDialog implements OnDestroy {\n    private _overlay;\n    private _injector;\n    private _location;\n    private _defaultOptions;\n    private _parentDialog;\n    private _overlayContainer;\n    private _openDialogsAtThisLevel;\n    private readonly _afterAllClosedAtThisLevel;\n    private readonly _afterOpenedAtThisLevel;\n    private _ariaHiddenElements;\n    private _scrollStrategy;\n    /** Keeps track of the currently-open dialogs. */\n    readonly openDialogs: MatDialogRef<any>[];\n    /** Stream that emits when a dialog has been opened. */\n    readonly afterOpened: Subject<MatDialogRef<any>>;\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @deprecated Use `afterOpened` instead.\n     * @breaking-change 8.0.0\n     */\n    readonly afterOpen: Subject<MatDialogRef<any>>;\n    readonly _afterAllClosed: Subject<void>;\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n    readonly afterAllClosed: Observable<void>;\n    constructor(_overlay: Overlay, _injector: Injector, _location: Location, _defaultOptions: MatDialogConfig, scrollStrategy: any, _parentDialog: MatDialog, _overlayContainer: OverlayContainer);\n    /**\n     * Opens a modal dialog containing the given component.\n     * @param componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param config Extra configuration options.\n     * @returns Reference to the newly-opened dialog.\n     */\n    open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>, config?: MatDialogConfig<D>): MatDialogRef<T, R>;\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll(): void;\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id: string): MatDialogRef<any> | undefined;\n    ngOnDestroy(): void;\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n    private _createOverlay;\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    private _getOverlayConfig;\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    private _attachDialogContainer;\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    private _attachDialogContent;\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param container Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    private _createInjector;\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n    private _removeOpenDialog;\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n    private _hideNonDialogContentFromAssistiveTechnology;\n    /** Closes all of the dialogs in an array. */\n    private _closeDialogs;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/dialog/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/dialog/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './dialog-module';\nexport * from './dialog';\nexport * from './dialog-container';\nexport * from './dialog-content-directives';\nexport * from './dialog-config';\nexport * from './dialog-ref';\nexport * from './dialog-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/divider.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './divider/index';\n"
  },
  {
    "path": "node_modules/@angular/material/divider/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/divider/typings/divider-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatDividerModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/divider/typings/divider.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatDivider {\n    /** Whether the divider is vertically aligned. */\n    vertical: boolean;\n    private _vertical;\n    /** Whether the divider is an inset divider. */\n    inset: boolean;\n    private _inset;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/divider/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/divider/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './divider';\nexport * from './divider-module';\n"
  },
  {
    "path": "node_modules/@angular/material/expansion.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './expansion/index';\n"
  },
  {
    "path": "node_modules/@angular/material/expansion/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/expansion/typings/accordion-base.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { CdkAccordion } from '@angular/cdk/accordion';\n/** MatAccordion's display modes. */\nexport declare type MatAccordionDisplayMode = 'default' | 'flat';\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n    /** Whether the expansion indicator should be hidden. */\n    hideToggle: boolean;\n    /** Display mode used for all expansion panels in the accordion. */\n    displayMode: MatAccordionDisplayMode;\n    /** Handles keyboard events coming in from the panel headers. */\n    _handleHeaderKeydown: (event: KeyboardEvent) => void;\n    /** Handles focus events on the panel headers. */\n    _handleHeaderFocus: (header: any) => void;\n}\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport declare const MAT_ACCORDION: InjectionToken<MatAccordionBase>;\n"
  },
  {
    "path": "node_modules/@angular/material/expansion/typings/accordion.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { QueryList, AfterContentInit } from '@angular/core';\nimport { CdkAccordion } from '@angular/cdk/accordion';\nimport { MatAccordionBase, MatAccordionDisplayMode } from './accordion-base';\nimport { MatExpansionPanelHeader } from './expansion-panel-header';\n/**\n * Directive for a Material Design Accordion.\n */\nexport declare class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n    private _keyManager;\n    _headers: QueryList<MatExpansionPanelHeader>;\n    /** Whether the expansion indicator should be hidden. */\n    hideToggle: boolean;\n    private _hideToggle;\n    /**\n     * Display mode used for all expansion panels in the accordion. Currently two display\n     * modes exist:\n     *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n     *     panel at a different elevation from the rest of the accordion.\n     *  flat - no spacing is placed around expanded panels, showing all panels at the same\n     *     elevation.\n     */\n    displayMode: MatAccordionDisplayMode;\n    ngAfterContentInit(): void;\n    /** Handles keyboard events coming in from the panel headers. */\n    _handleHeaderKeydown(event: KeyboardEvent): void;\n    _handleHeaderFocus(header: MatExpansionPanelHeader): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/expansion/typings/expansion-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/** Time and timing curve for expansion panel animations. */\nexport declare const EXPANSION_PANEL_ANIMATION_TIMING = \"225ms cubic-bezier(0.4,0.0,0.2,1)\";\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport declare const matExpansionAnimations: {\n    readonly indicatorRotate: AnimationTriggerMetadata;\n    readonly expansionHeaderHeight: AnimationTriggerMetadata;\n    readonly bodyExpansion: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/expansion/typings/expansion-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatExpansionModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/expansion/typings/expansion-panel-content.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplateRef } from '@angular/core';\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nexport declare class MatExpansionPanelContent {\n    _template: TemplateRef<any>;\n    constructor(_template: TemplateRef<any>);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/expansion/typings/expansion-panel-header.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor, FocusableOption, FocusOrigin } from '@angular/cdk/a11y';\nimport { ChangeDetectorRef, ElementRef, OnDestroy } from '@angular/core';\nimport { MatExpansionPanel } from './expansion-panel';\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\nexport declare class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n    panel: MatExpansionPanel;\n    private _element;\n    private _focusMonitor;\n    private _changeDetectorRef;\n    private _parentChangeSubscription;\n    constructor(panel: MatExpansionPanel, _element: ElementRef, _focusMonitor: FocusMonitor, _changeDetectorRef: ChangeDetectorRef);\n    /** Height of the header while the panel is expanded. */\n    expandedHeight: string;\n    /** Height of the header while the panel is collapsed. */\n    collapsedHeight: string;\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * @docs-private\n     */\n    readonly disabled: any;\n    /** Toggles the expanded state of the panel. */\n    _toggle(): void;\n    /** Gets whether the panel is expanded. */\n    _isExpanded(): boolean;\n    /** Gets the expanded state string of the panel. */\n    _getExpandedState(): string;\n    /** Gets the panel id. */\n    _getPanelId(): string;\n    /** Gets whether the expand indicator should be shown. */\n    _showToggle(): boolean;\n    /** Handle keydown event calling to toggle() if appropriate. */\n    _keydown(event: KeyboardEvent): void;\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n    focus(origin?: FocusOrigin): void;\n    ngOnDestroy(): void;\n}\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nexport declare class MatExpansionPanelDescription {\n}\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nexport declare class MatExpansionPanelTitle {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/expansion/typings/expansion-panel.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationEvent } from '@angular/animations';\nimport { CdkAccordionItem } from '@angular/cdk/accordion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter, ElementRef, OnChanges, OnDestroy, SimpleChanges, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MatExpansionPanelContent } from './expansion-panel-content';\nimport { MatAccordionBase } from './accordion-base';\n/** MatExpansionPanel's states. */\nexport declare type MatExpansionPanelState = 'expanded' | 'collapsed';\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nexport declare class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges, OnDestroy {\n    private _viewContainerRef;\n    _animationMode?: string | undefined;\n    private _document;\n    /** Whether the toggle indicator should be hidden. */\n    hideToggle: boolean;\n    private _hideToggle;\n    /** An event emitted after the body's expansion animation happens. */\n    afterExpand: EventEmitter<void>;\n    /** An event emitted after the body's collapse animation happens. */\n    afterCollapse: EventEmitter<void>;\n    /** Stream that emits for changes in `@Input` properties. */\n    readonly _inputChanges: Subject<SimpleChanges>;\n    /** Optionally defined accordion the expansion panel belongs to. */\n    accordion: MatAccordionBase;\n    /** Content that will be rendered lazily. */\n    _lazyContent: MatExpansionPanelContent;\n    /** Element containing the panel's user-provided content. */\n    _body: ElementRef<HTMLElement>;\n    /** Portal holding the user's content. */\n    _portal: TemplatePortal;\n    /** ID for the associated header element. Used for a11y labelling. */\n    _headerId: string;\n    /** Stream of body animation done events. */\n    _bodyAnimationDone: Subject<AnimationEvent>;\n    constructor(accordion: MatAccordionBase, _changeDetectorRef: ChangeDetectorRef, _uniqueSelectionDispatcher: UniqueSelectionDispatcher, _viewContainerRef: ViewContainerRef, _document?: any, _animationMode?: string | undefined);\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    _hasSpacing(): boolean;\n    /** Gets the expanded state string. */\n    _getExpandedState(): MatExpansionPanelState;\n    ngAfterContentInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n    _containsFocus(): boolean;\n}\nexport declare class MatExpansionPanelActionRow {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/expansion/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/expansion/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './expansion-module';\nexport * from './accordion';\nexport * from './accordion-base';\nexport * from './expansion-panel';\nexport * from './expansion-panel-header';\nexport * from './expansion-panel-content';\nexport * from './expansion-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/form-field.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './form-field/index';\n"
  },
  {
    "path": "node_modules/@angular/material/form-field/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/form-field/typings/error.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Single error message to be shown underneath the form field. */\nexport declare class MatError {\n    id: string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/form-field/typings/form-field-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport declare const matFormFieldAnimations: {\n    readonly transitionMessages: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/form-field/typings/form-field-control.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { NgControl } from '@angular/forms';\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport declare abstract class MatFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n    /** The element ID for this control. */\n    readonly id: string;\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n    /** Whether the `MatFormField` label should try to float. */\n    readonly shouldLabelFloat: boolean;\n    /** Whether the control is required. */\n    readonly required: boolean;\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n    /**\n     * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mat-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n    /**\n     * Whether the input is currently in an autofilled state. If property is not present on the\n     * control it is assumed to be false.\n     */\n    readonly autofilled?: boolean;\n    /** Sets the list of element IDs that currently describe this control. */\n    abstract setDescribedByIds(ids: string[]): void;\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/form-field/typings/form-field-errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nexport declare function getMatFormFieldPlaceholderConflictError(): Error;\n/** @docs-private */\nexport declare function getMatFormFieldDuplicatedHintError(align: string): Error;\n/** @docs-private */\nexport declare function getMatFormFieldMissingControlError(): Error;\n"
  },
  {
    "path": "node_modules/@angular/material/form-field/typings/form-field-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatFormFieldModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/form-field/typings/form-field.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { AfterContentChecked, AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, InjectionToken, NgZone, QueryList } from '@angular/core';\nimport { CanColor, CanColorCtor, FloatLabelType, LabelOptions } from '@angular/material/core';\nimport { MatError } from './error';\nimport { MatFormFieldControl } from './form-field-control';\nimport { MatHint } from './hint';\nimport { MatLabel } from './label';\nimport { MatPlaceholder } from './placeholder';\nimport { MatPrefix } from './prefix';\nimport { MatSuffix } from './suffix';\nimport { Platform } from '@angular/cdk/platform';\nimport { NgControl } from '@angular/forms';\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport declare class MatFormFieldBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport declare const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase;\n/** Possible appearance styles for the form field. */\nexport declare type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n    appearance?: MatFormFieldAppearance;\n}\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport declare const MAT_FORM_FIELD_DEFAULT_OPTIONS: InjectionToken<MatFormFieldDefaultOptions>;\n/** Container for form controls that applies Material Design styling and behavior. */\nexport declare class MatFormField extends _MatFormFieldMixinBase implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n    _elementRef: ElementRef;\n    private _changeDetectorRef;\n    private _dir;\n    private _defaults;\n    private _platform?;\n    private _ngZone?;\n    private _labelOptions;\n    private _outlineGapCalculationNeeded;\n    /** The form-field appearance style. */\n    appearance: MatFormFieldAppearance;\n    _appearance: MatFormFieldAppearance;\n    /** Whether the required marker should be hidden. */\n    hideRequiredMarker: boolean;\n    private _hideRequiredMarker;\n    /** Override for the logic that disables the label animation in certain cases. */\n    private _showAlwaysAnimate;\n    /** Whether the floating label should always float or not. */\n    readonly _shouldAlwaysFloat: boolean;\n    /** Whether the label can float or not. */\n    readonly _canLabelFloat: boolean;\n    /** State of the mat-hint and mat-error animations. */\n    _subscriptAnimationState: string;\n    /** Text for the form field hint. */\n    hintLabel: string;\n    private _hintLabel;\n    _hintLabelId: string;\n    _labelId: string;\n    /**\n     * Whether the label should always float, never float or float as the user types.\n     *\n     * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n     * way to make the floating label emulate the behavior of a standard input placeholder. However\n     * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n     * appearances the `never` option has been disabled in favor of just using the placeholder.\n     */\n    floatLabel: FloatLabelType;\n    private _floatLabel;\n    /** Whether the Angular animations are enabled. */\n    _animationsEnabled: boolean;\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    underlineRef: ElementRef;\n    _connectionContainerRef: ElementRef;\n    _inputContainerRef: ElementRef;\n    private _label;\n    _control: MatFormFieldControl<any>;\n    _placeholderChild: MatPlaceholder;\n    _labelChild: MatLabel;\n    _errorChildren: QueryList<MatError>;\n    _hintChildren: QueryList<MatHint>;\n    _prefixChildren: QueryList<MatPrefix>;\n    _suffixChildren: QueryList<MatSuffix>;\n    constructor(_elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef, labelOptions: LabelOptions, _dir: Directionality, _defaults: MatFormFieldDefaultOptions, _platform?: Platform | undefined, _ngZone?: NgZone | undefined, _animationMode?: string);\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin(): ElementRef;\n    ngAfterContentInit(): void;\n    ngAfterContentChecked(): void;\n    ngAfterViewInit(): void;\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: keyof NgControl): boolean;\n    _hasPlaceholder(): boolean;\n    _hasLabel(): boolean;\n    _shouldLabelFloat(): boolean;\n    _hideControlPlaceholder(): boolean;\n    _hasFloatingLabel(): boolean;\n    /** Determines whether to display hints or errors. */\n    _getDisplayedMessages(): 'error' | 'hint';\n    /** Animates the placeholder up and locks it in position. */\n    _animateAndLockLabel(): void;\n    /**\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n     * or child element with the `mat-placeholder` directive).\n     */\n    private _validatePlaceholders;\n    /** Does any extra processing that is required when handling the hints. */\n    private _processHints;\n    /**\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     */\n    private _validateHints;\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     */\n    private _syncDescribedByIds;\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild(): void;\n    /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     */\n    updateOutlineGap(): void;\n    /** Gets the start end of the rect considering the current directionality. */\n    private _getStartEnd;\n    /** Updates the outline gap the new time the zone stabilizes. */\n    private _updateOutlineGapOnStable;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/form-field/typings/hint.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Hint text to be shown underneath the form field control. */\nexport declare class MatHint {\n    /** Whether to align the hint label at the start or end of the line. */\n    align: 'start' | 'end';\n    /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n    id: string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/form-field/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/form-field/typings/label.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The floating label for a `mat-form-field`. */\nexport declare class MatLabel {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/form-field/typings/placeholder.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\nexport declare class MatPlaceholder {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/form-field/typings/prefix.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Prefix to be placed the the front of the form field. */\nexport declare class MatPrefix {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/form-field/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './form-field-module';\nexport * from './error';\nexport * from './form-field';\nexport * from './form-field-control';\nexport * from './form-field-errors';\nexport * from './hint';\nexport * from './placeholder';\nexport * from './prefix';\nexport * from './suffix';\nexport * from './label';\nexport * from './form-field-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/form-field/typings/suffix.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Suffix to be placed at the end of the form field. */\nexport declare class MatSuffix {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/grid-list.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './grid-list/index';\n"
  },
  {
    "path": "node_modules/@angular/material/grid-list/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/grid-list/typings/grid-list-base.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport declare const MAT_GRID_LIST: InjectionToken<MatGridListBase>;\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n    cols: number;\n    gutterSize: string;\n    rowHeight: number | string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/grid-list/typings/grid-list-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatGridListModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/grid-list/typings/grid-list.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentChecked, OnInit, QueryList, ElementRef } from '@angular/core';\nimport { MatGridTile } from './grid-tile';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { MatGridListBase } from './grid-list-base';\nexport declare class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n    private _element;\n    private _dir;\n    /** Number of columns being rendered. */\n    private _cols;\n    /** Used for determiningthe position of each tile in the grid. */\n    private _tileCoordinator;\n    /**\n     * Row height value passed in by user. This can be one of three types:\n     * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n     * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n     * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n     */\n    private _rowHeight;\n    /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n    private _gutter;\n    /** Sets position and size styles for a tile */\n    private _tileStyler;\n    /** Query list of tiles that are being rendered. */\n    _tiles: QueryList<MatGridTile>;\n    constructor(_element: ElementRef<HTMLElement>, _dir: Directionality);\n    /** Amount of columns in the grid list. */\n    cols: number;\n    /** Size of the grid list's gutter in pixels. */\n    gutterSize: string;\n    /** Set internal representation of row height from the user-provided value. */\n    rowHeight: string | number;\n    ngOnInit(): void;\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     */\n    ngAfterContentChecked(): void;\n    /** Throw a friendly error if cols property is missing */\n    private _checkCols;\n    /** Default to equal width:height if rowHeight property is missing */\n    private _checkRowHeight;\n    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n    private _setTileStyler;\n    /** Computes and applies the size and position for all children grid tiles. */\n    private _layoutTiles;\n    /** Sets style on the main grid-list element, given the style name and value. */\n    _setListStyle(style: [string, string | null] | null): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/grid-list/typings/grid-tile.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, QueryList, AfterContentInit } from '@angular/core';\nimport { MatLine } from '@angular/material/core';\nimport { MatGridListBase } from './grid-list-base';\nexport declare class MatGridTile {\n    private _element;\n    _gridList?: MatGridListBase | undefined;\n    _rowspan: number;\n    _colspan: number;\n    constructor(_element: ElementRef<HTMLElement>, _gridList?: MatGridListBase | undefined);\n    /** Amount of rows that the grid tile takes up. */\n    rowspan: number;\n    /** Amount of columns that the grid tile takes up. */\n    colspan: number;\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     */\n    _setStyle(property: string, value: any): void;\n}\nexport declare class MatGridTileText implements AfterContentInit {\n    private _element;\n    _lines: QueryList<MatLine>;\n    constructor(_element: ElementRef<HTMLElement>);\n    ngAfterContentInit(): void;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatGridAvatarCssMatStyler {\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatGridTileHeaderCssMatStyler {\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatGridTileFooterCssMatStyler {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/grid-list/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { MAT_GRID_LIST as ɵa11, MatGridListBase as ɵb11 } from './grid-list-base';\n"
  },
  {
    "path": "node_modules/@angular/material/grid-list/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './grid-list-module';\nexport * from './grid-list';\nexport * from './grid-tile';\n"
  },
  {
    "path": "node_modules/@angular/material/grid-list/typings/tile-coordinator.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MatGridTile } from './grid-tile';\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport declare class TileCoordinator {\n    /** Tracking array (see class description). */\n    tracker: number[];\n    /** Index at which the search for the next gap will start. */\n    columnIndex: number;\n    /** The current row index. */\n    rowIndex: number;\n    /** Gets the total number of rows occupied by tiles */\n    readonly rowCount: number;\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     */\n    readonly rowspan: number;\n    /** The computed (row, col) position of each tile (the output). */\n    positions: TilePosition[];\n    /**\n     * Updates the tile positions.\n     * @param numColumns Amount of columns in the grid.\n     */\n    update(numColumns: number, tiles: MatGridTile[]): void;\n    /** Calculates the row and col position of a tile. */\n    private _trackTile;\n    /** Finds the next available space large enough to fit the tile. */\n    private _findMatchingGap;\n    /** Move \"down\" to the next row. */\n    private _nextRow;\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     */\n    private _findGapEndIndex;\n    /** Update the tile tracker to account for the given tile in the given space. */\n    private _markTilePosition;\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport declare class TilePosition {\n    row: number;\n    col: number;\n    constructor(row: number, col: number);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/grid-list/typings/tile-styler.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MatGridList } from './grid-list';\nimport { MatGridTile } from './grid-tile';\nimport { TileCoordinator } from './tile-coordinator';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport declare abstract class TileStyler {\n    _gutterSize: string;\n    _rows: number;\n    _rowspan: number;\n    _cols: number;\n    _direction: string;\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param gutterSize Size of the grid's gutter.\n     * @param tracker Instance of the TileCoordinator.\n     * @param cols Amount of columns in the grid.\n     * @param direction Layout direction of the grid.\n     */\n    init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void;\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent: number, gutterFraction: number): string;\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize: string, offset: number): string;\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize: string, span: number): string;\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n    setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void;\n    /** Sets the horizontal placement of the tile in the list. */\n    setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number, gutterWidth: number): void;\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n    getGutterSpan(): string;\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n    getTileSpan(tileHeight: string): string;\n    /**\n     * Sets the vertical placement of the tile in the list.\n     * This method will be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number, gutterWidth: number): void;\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    getComputedHeight(): [string, string] | null;\n    /**\n     * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n     * @param list Grid list that the styler was attached to.\n     * @docs-private\n     */\n    abstract reset(list: MatGridList): void;\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport declare class FixedTileStyler extends TileStyler {\n    fixedRowHeight: string;\n    constructor(fixedRowHeight: string);\n    init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void;\n    setRowStyles(tile: MatGridTile, rowIndex: number): void;\n    getComputedHeight(): [string, string];\n    reset(list: MatGridList): void;\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport declare class RatioTileStyler extends TileStyler {\n    /** Ratio width:height given by user to determine row height. */\n    rowHeightRatio: number;\n    baseTileHeight: string;\n    constructor(value: string);\n    setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number, gutterWidth: number): void;\n    getComputedHeight(): [string, string];\n    reset(list: MatGridList): void;\n    private _parseRatio;\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport declare class FitTileStyler extends TileStyler {\n    setRowStyles(tile: MatGridTile, rowIndex: number): void;\n    reset(list: MatGridList): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/icon.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './icon/index';\n"
  },
  {
    "path": "node_modules/@angular/material/icon/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/icon/typings/icon-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatIconModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/icon/typings/icon-registry.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HttpClient } from '@angular/common/http';\nimport { Optional } from '@angular/core';\nimport { DomSanitizer, SafeResourceUrl, SafeHtml } from '@angular/platform-browser';\nimport { Observable } from 'rxjs';\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport declare function getMatIconNameNotFoundError(iconName: string): Error;\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport declare function getMatIconNoHttpProviderError(): Error;\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport declare function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error;\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport declare function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error;\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport declare class MatIconRegistry {\n    private _httpClient;\n    private _sanitizer;\n    private _document;\n    /**\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n     */\n    private _svgIconConfigs;\n    /**\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n     * Multiple icon sets can be registered under the same namespace.\n     */\n    private _iconSetConfigs;\n    /** Cache for icons loaded by direct URLs. */\n    private _cachedIconsByUrl;\n    /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n    private _inProgressUrlFetches;\n    /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n    private _fontCssClassesByAlias;\n    /**\n     * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n     * The default 'material-icons' value assumes that the material icon font has been loaded as\n     * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n     */\n    private _defaultFontSetClass;\n    constructor(_httpClient: HttpClient, _sanitizer: DomSanitizer, document: any);\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName: string, url: SafeResourceUrl): this;\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName: string, literal: SafeHtml): this;\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this;\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this;\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url: SafeResourceUrl): this;\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal: SafeHtml): this;\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this;\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this;\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias: string, className?: string): this;\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias: string): string;\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n    setDefaultFontSetClass(className: string): this;\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass(): string;\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement>;\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name: string, namespace?: string): Observable<SVGElement>;\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    private _getSvgFromConfig;\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    private _getSvgFromIconSetConfigs;\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    private _extractIconWithNameFromAnySet;\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    private _loadSvgIconFromConfig;\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    private _loadSvgIconSetFromConfig;\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     */\n    private _createSvgElementForSingleIcon;\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    private _extractSvgIconFromSet;\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    private _svgElementFromString;\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    private _toSvgElement;\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    private _setSvgAttributes;\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    private _fetchUrl;\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    private _addSvgIconConfig;\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    private _addSvgIconSetConfig;\n}\n/** @docs-private */\nexport declare function ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry: MatIconRegistry, httpClient: HttpClient, sanitizer: DomSanitizer, document?: any): MatIconRegistry;\n/** @docs-private */\nexport declare const ICON_REGISTRY_PROVIDER: {\n    provide: typeof MatIconRegistry;\n    deps: (Optional[] | typeof DomSanitizer)[];\n    useFactory: typeof ICON_REGISTRY_PROVIDER_FACTORY;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/icon/typings/icon.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, OnChanges, OnInit, SimpleChanges, InjectionToken, OnDestroy, AfterViewChecked } from '@angular/core';\nimport { CanColor, CanColorCtor } from '@angular/material/core';\nimport { MatIconRegistry } from './icon-registry';\n/** @docs-private */\nexport declare class MatIconBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatIconMixinBase: CanColorCtor & typeof MatIconBase;\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport declare const MAT_ICON_LOCATION: InjectionToken<MatIconLocation>;\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n    getPathname: () => string;\n}\n/** @docs-private */\nexport declare function MAT_ICON_LOCATION_FACTORY(): MatIconLocation;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nexport declare class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked, CanColor, OnDestroy {\n    private _iconRegistry;\n    /**\n     * @deprecated `location` parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    private _location?;\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    inline: boolean;\n    private _inline;\n    /** Name of the icon in the SVG icon set. */\n    svgIcon: string;\n    /** Font set that the icon is a part of. */\n    fontSet: string;\n    private _fontSet;\n    /** Name of an icon within a font set. */\n    fontIcon: string;\n    private _fontIcon;\n    private _previousFontSetClass;\n    private _previousFontIconClass;\n    /** Keeps track of the current page path. */\n    private _previousPath?;\n    /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n    private _elementsWithExternalReferences?;\n    constructor(elementRef: ElementRef<HTMLElement>, _iconRegistry: MatIconRegistry, ariaHidden: string, \n    /**\n     * @deprecated `location` parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    _location?: MatIconLocation | undefined);\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    private _splitIconName;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnInit(): void;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    private _usingFontIcon;\n    private _setSvgElement;\n    private _clearSvgElement;\n    private _updateFontIconClasses;\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    private _cleanupFontValue;\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    private _prependPathToReferences;\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    private _cacheChildrenWithExternalReferences;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/icon/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/icon/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './icon-module';\nexport * from './icon';\nexport * from './icon-registry';\n"
  },
  {
    "path": "node_modules/@angular/material/input.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './input/index';\n"
  },
  {
    "path": "node_modules/@angular/material/input/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/input/typings/autosize.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTextareaAutosize } from '@angular/cdk/text-field';\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\nexport declare class MatTextareaAutosize extends CdkTextareaAutosize {\n    matAutosizeMinRows: number;\n    matAutosizeMaxRows: number;\n    matAutosize: boolean;\n    matTextareaAutosize: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/input/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/input/typings/input-errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nexport declare function getMatInputUnsupportedTypeError(type: string): Error;\n"
  },
  {
    "path": "node_modules/@angular/material/input/typings/input-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatInputModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/input/typings/input-value-accessor.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport declare const MAT_INPUT_VALUE_ACCESSOR: InjectionToken<{\n    value: any;\n}>;\n"
  },
  {
    "path": "node_modules/@angular/material/input/typings/input.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { AutofillMonitor } from '@angular/cdk/text-field';\nimport { DoCheck, ElementRef, NgZone, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { CanUpdateErrorState, CanUpdateErrorStateCtor, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n/** @docs-private */\nexport declare class MatInputBase {\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    _parentForm: NgForm;\n    _parentFormGroup: FormGroupDirective;\n    /** @docs-private */\n    ngControl: NgControl;\n    constructor(_defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, \n    /** @docs-private */\n    ngControl: NgControl);\n}\nexport declare const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase;\n/** Directive that allows a native input to work inside a `MatFormField`. */\nexport declare class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges, OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>;\n    protected _platform: Platform;\n    /** @docs-private */\n    ngControl: NgControl;\n    private _autofillMonitor;\n    protected _uid: string;\n    protected _previousNativeValue: any;\n    private _inputValueAccessor;\n    /** The aria-describedby attribute on the input for improved a11y. */\n    _ariaDescribedby: string;\n    /** Whether the component is being rendered on the server. */\n    _isServer: boolean;\n    /** Whether the component is a native html select. */\n    _isNativeSelect: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void>;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    controlType: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    autofilled: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    disabled: boolean;\n    protected _disabled: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    id: string;\n    protected _id: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    placeholder: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    required: boolean;\n    protected _required: boolean;\n    /** Input type of the element. */\n    type: string;\n    protected _type: string;\n    /** An object used to control when error messages are shown. */\n    errorStateMatcher: ErrorStateMatcher;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    value: string;\n    /** Whether the element is readonly. */\n    readonly: boolean;\n    private _readonly;\n    protected _neverEmptyInputTypes: string[];\n    constructor(_elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>, _platform: Platform, \n    /** @docs-private */\n    ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _defaultErrorStateMatcher: ErrorStateMatcher, inputValueAccessor: any, _autofillMonitor: AutofillMonitor, ngZone: NgZone);\n    ngOnInit(): void;\n    ngOnChanges(): void;\n    ngOnDestroy(): void;\n    ngDoCheck(): void;\n    /** Focuses the input. */\n    focus(): void;\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean): void;\n    _onInput(): void;\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue(): void;\n    /** Make sure the input is a supported type. */\n    protected _validateType(): void;\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty(): boolean;\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput(): boolean;\n    /** Determines if the component host is a textarea. */\n    protected _isTextarea(): boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly empty: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly shouldLabelFloat: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids: string[]): void;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/input/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './autosize';\nexport * from './input';\nexport * from './input-errors';\nexport * from './input-module';\nexport * from './input-value-accessor';\n"
  },
  {
    "path": "node_modules/@angular/material/list.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './list/index';\n"
  },
  {
    "path": "node_modules/@angular/material/list/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/list/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/list/typings/list-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatListModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/list/typings/list.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ElementRef, QueryList } from '@angular/core';\nimport { CanDisableRipple, CanDisableRippleCtor, MatLine } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatListBase {\n}\nexport declare const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase;\n/** @docs-private */\nexport declare class MatListItemBase {\n}\nexport declare const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase;\nexport declare class MatNavList extends _MatListMixinBase implements CanDisableRipple {\n}\nexport declare class MatList extends _MatListMixinBase implements CanDisableRipple {\n    private _elementRef?;\n    /**\n     * @deprecated _elementRef parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    constructor(_elementRef?: ElementRef<HTMLElement> | undefined);\n    _getListType(): 'list' | 'action-list' | null;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatListAvatarCssMatStyler {\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatListIconCssMatStyler {\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatListSubheaderCssMatStyler {\n}\n/** An item within a Material Design list. */\nexport declare class MatListItem extends _MatListItemMixinBase implements AfterContentInit, CanDisableRipple {\n    private _element;\n    private _isInteractiveList;\n    private _list?;\n    _lines: QueryList<MatLine>;\n    _avatar: MatListAvatarCssMatStyler;\n    _icon: MatListIconCssMatStyler;\n    constructor(_element: ElementRef<HTMLElement>, navList?: MatNavList, list?: MatList);\n    ngAfterContentInit(): void;\n    /** Whether this list item should show a ripple effect when clicked. */\n    _isRippleDisabled(): boolean;\n    /** Retrieves the DOM element of the component host. */\n    _getHostElement(): HTMLElement;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/list/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './list-module';\nexport * from './list';\nexport * from './selection-list';\n"
  },
  {
    "path": "node_modules/@angular/material/list/typings/selection-list.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusableOption, FocusKeyManager } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';\nimport { CanDisableRipple, CanDisableRippleCtor, MatLine } from '@angular/material/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { MatListAvatarCssMatStyler, MatListIconCssMatStyler } from './list';\n/** @docs-private */\nexport declare class MatSelectionListBase {\n}\nexport declare const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase;\n/** @docs-private */\nexport declare class MatListOptionBase {\n}\nexport declare const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase;\n/** @docs-private */\nexport declare const MAT_SELECTION_LIST_VALUE_ACCESSOR: any;\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport declare class MatSelectionListChange {\n    /** Reference to the selection list that emitted the event. */\n    source: MatSelectionList;\n    /** Reference to the option that has been changed. */\n    option: MatListOption;\n    constructor(\n    /** Reference to the selection list that emitted the event. */\n    source: MatSelectionList, \n    /** Reference to the option that has been changed. */\n    option: MatListOption);\n}\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\nexport declare class MatListOption extends _MatListOptionMixinBase implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n    private _element;\n    private _changeDetector;\n    /** @docs-private */\n    selectionList: MatSelectionList;\n    private _selected;\n    private _disabled;\n    private _hasFocus;\n    _avatar: MatListAvatarCssMatStyler;\n    _icon: MatListIconCssMatStyler;\n    _lines: QueryList<MatLine>;\n    /** DOM element containing the item's text. */\n    _text: ElementRef;\n    /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n    checkboxPosition: 'before' | 'after';\n    /** Value of the option */\n    value: any;\n    /** Whether the option is disabled. */\n    disabled: any;\n    /** Whether the option is selected. */\n    selected: boolean;\n    constructor(_element: ElementRef<HTMLElement>, _changeDetector: ChangeDetectorRef, \n    /** @docs-private */\n    selectionList: MatSelectionList);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Toggles the selection state of the option. */\n    toggle(): void;\n    /** Allows for programmatic focusing of the option. */\n    focus(): void;\n    /**\n     * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n     * @docs-private\n     */\n    getLabel(): any;\n    /** Whether this list item should show a ripple effect when clicked. */\n    _isRippleDisabled(): any;\n    _handleClick(): void;\n    _handleFocus(): void;\n    _handleBlur(): void;\n    /** Retrieves the DOM element of the component host. */\n    _getHostElement(): HTMLElement;\n    /** Sets the selected state of the option. Returns whether the value has changed. */\n    _setSelected(selected: boolean): boolean;\n    /**\n     * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n     * used to trigger an update of the list option if the disabled state of the selection list\n     * changed.\n     */\n    _markForCheck(): void;\n}\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\nexport declare class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n    private _element;\n    /** The FocusKeyManager which handles focus. */\n    _keyManager: FocusKeyManager<MatListOption>;\n    /** The option components contained within this selection-list. */\n    options: QueryList<MatListOption>;\n    /** Emits a change event whenever the selected state of an option changes. */\n    readonly selectionChange: EventEmitter<MatSelectionListChange>;\n    /** Tabindex of the selection list. */\n    tabIndex: number;\n    /**\n     * Function used for comparing an option against the selected value when determining which\n     * options should appear as selected. The first argument is the value of an options. The second\n     * one is a value from the selected value. A boolean must be returned.\n     */\n    compareWith: (o1: any, o2: any) => boolean;\n    /** Whether the selection list is disabled. */\n    disabled: boolean;\n    private _disabled;\n    /** The currently selected options. */\n    selectedOptions: SelectionModel<MatListOption>;\n    /** View to model callback that should be called whenever the selected options change. */\n    private _onChange;\n    /** Used for storing the values that were assigned before the options were initialized. */\n    private _tempValues;\n    /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n    private _modelChanges;\n    /** View to model callback that should be called if the list or its options lost focus. */\n    _onTouched: () => void;\n    constructor(_element: ElementRef<HTMLElement>, tabIndex: string);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Focuses the last active list option. */\n    focus(): void;\n    /** Selects all of the options. */\n    selectAll(): void;\n    /** Deselects all of the options. */\n    deselectAll(): void;\n    /** Sets the focused option of the selection-list. */\n    _setFocusedOption(option: MatListOption): void;\n    /**\n     * Removes an option from the selection list and updates the active item.\n     * @returns Currently-active item.\n     */\n    _removeOptionFromList(option: MatListOption): MatListOption | null;\n    /** Passes relevant key presses to our key manager. */\n    _keydown(event: KeyboardEvent): void;\n    /** Reports a value change to the ControlValueAccessor */\n    _reportValueChange(): void;\n    /** Emits a change event if the selected state of an option changed. */\n    _emitChangeEvent(option: MatListOption): void;\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(values: string[]): void;\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled: boolean): void;\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn: (value: any) => void): void;\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn: () => void): void;\n    /** Sets the selected options based on the specified values. */\n    private _setOptionsFromValues;\n    /** Returns the values of the selected options. */\n    private _getSelectedOptionValues;\n    /** Toggles the state of the currently focused option if enabled. */\n    private _toggleFocusedOption;\n    /**\n     * Sets the selected state on all of the options\n     * and emits an event if anything changed.\n     */\n    private _setAllOptionsSelected;\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex;\n    /** Returns the index of the specified list option. */\n    private _getOptionIndex;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/material.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\nexport * from './expansion';\nexport * from './core';\nexport * from './grid-list';\nexport * from './tree';\nexport * from './bottom-sheet';\nexport * from './button';\nexport * from './button-toggle';\nexport * from './card';\nexport * from './checkbox';\nexport * from './toolbar';\nexport * from './dialog';\nexport * from './icon';\nexport * from './sort';\nexport * from './tabs';\nexport * from './slider';\nexport * from './slide-toggle';\nexport * from './divider';\nexport * from './form-field';\nexport * from './badge';\nexport * from './sidenav';\nexport * from './menu';\nexport * from './radio';\nexport * from './tooltip';\nexport * from './progress-spinner';\nexport * from './progress-bar';\nexport * from './select';\nexport * from './list';\nexport * from './snack-bar';\nexport * from './stepper';\nexport * from './chips';\nexport * from './autocomplete';\nexport * from './paginator';\nexport * from './input';\nexport * from './datepicker';\nexport * from './table';"
  },
  {
    "path": "node_modules/@angular/material/menu.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './menu/index';\n"
  },
  {
    "path": "node_modules/@angular/material/menu/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/menu/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵa23 } from './menu-directive';\nexport { MatMenuItemBase as ɵb23, _MatMenuItemMixinBase as ɵc23 } from './menu-item';\nexport { MAT_MENU_PANEL as ɵf23 } from './menu-panel';\nexport { MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵd23, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵe23 } from './menu-trigger';\n"
  },
  {
    "path": "node_modules/@angular/material/menu/typings/menu-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport declare const matMenuAnimations: {\n    readonly transformMenu: AnimationTriggerMetadata;\n    readonly fadeInItems: AnimationTriggerMetadata;\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport declare const fadeInItems: AnimationTriggerMetadata;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport declare const transformMenu: AnimationTriggerMetadata;\n"
  },
  {
    "path": "node_modules/@angular/material/menu/typings/menu-content.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplateRef, ComponentFactoryResolver, ApplicationRef, Injector, ViewContainerRef, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nexport declare class MatMenuContent implements OnDestroy {\n    private _template;\n    private _componentFactoryResolver;\n    private _appRef;\n    private _injector;\n    private _viewContainerRef;\n    private _document;\n    private _portal;\n    private _outlet;\n    /** Emits when the menu content has been attached. */\n    _attached: Subject<void>;\n    constructor(_template: TemplateRef<any>, _componentFactoryResolver: ComponentFactoryResolver, _appRef: ApplicationRef, _injector: Injector, _viewContainerRef: ViewContainerRef, _document: any);\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context?: any): void;\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach(): void;\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/menu/typings/menu-directive.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport { Direction } from '@angular/cdk/bidi';\nimport { AfterContentInit, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, TemplateRef, QueryList, OnInit } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { MatMenuContent } from './menu-content';\nimport { MatMenuItem } from './menu-item';\nimport { MatMenuPanel } from './menu-panel';\nimport { MenuPositionX, MenuPositionY } from './menu-positions';\nimport { AnimationEvent } from '@angular/animations';\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n    /** The x-axis position of the menu. */\n    xPosition: MenuPositionX;\n    /** The y-axis position of the menu. */\n    yPosition: MenuPositionY;\n    /** Whether the menu should overlap the menu trigger. */\n    overlapTrigger: boolean;\n    /** Class to be applied to the menu's backdrop. */\n    backdropClass: string;\n    /** Whether the menu has a backdrop. */\n    hasBackdrop?: boolean;\n}\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport declare const MAT_MENU_DEFAULT_OPTIONS: InjectionToken<MatMenuDefaultOptions>;\n/** @docs-private */\nexport declare function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions;\nexport declare class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n    private _elementRef;\n    private _ngZone;\n    private _defaultOptions;\n    private _keyManager;\n    private _xPosition;\n    private _yPosition;\n    private _previousElevation;\n    /** Menu items inside the current menu. */\n    private _items;\n    /** Emits whenever the amount of menu items changes. */\n    private _itemChanges;\n    /** Subscription to tab events on the menu panel */\n    private _tabSubscription;\n    /** Config object to be passed into the menu's ngClass */\n    _classList: {\n        [key: string]: boolean;\n    };\n    /** Current state of the panel animation. */\n    _panelAnimationState: 'void' | 'enter';\n    /** Emits whenever an animation on the menu completes. */\n    _animationDone: Subject<AnimationEvent>;\n    /** Whether the menu is animating. */\n    _isAnimating: boolean;\n    /** Parent menu of the current menu panel. */\n    parentMenu: MatMenuPanel | undefined;\n    /** Layout direction of the menu. */\n    direction: Direction;\n    /** Class to be added to the backdrop element. */\n    backdropClass: string;\n    /** Position of the menu in the X axis. */\n    xPosition: MenuPositionX;\n    /** Position of the menu in the Y axis. */\n    yPosition: MenuPositionY;\n    /** @docs-private */\n    templateRef: TemplateRef<any>;\n    /**\n     * List of the items inside of a menu.\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    items: QueryList<MatMenuItem>;\n    /**\n     * Menu content that will be rendered lazily.\n     * @docs-private\n     */\n    lazyContent: MatMenuContent;\n    /** Whether the menu should overlap its trigger. */\n    overlapTrigger: boolean;\n    private _overlapTrigger;\n    /** Whether the menu has a backdrop. */\n    hasBackdrop: boolean | undefined;\n    private _hasBackdrop;\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    panelClass: string;\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    classList: string;\n    /** Event emitted when the menu is closed. */\n    readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    /**\n     * Event emitted when the menu is closed.\n     * @deprecated Switch to `closed` instead\n     * @breaking-change 8.0.0\n     */\n    close: EventEmitter<void | \"click\" | \"keydown\" | \"tab\">;\n    constructor(_elementRef: ElementRef<HTMLElement>, _ngZone: NgZone, _defaultOptions: MatMenuDefaultOptions);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered(): Observable<MatMenuItem>;\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event: KeyboardEvent): void;\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin?: FocusOrigin): void;\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem(): void;\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth: number): void;\n    /**\n     * Registers a menu item with the menu.\n     * @docs-private\n     */\n    addItem(item: MatMenuItem): void;\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     */\n    removeItem(item: MatMenuItem): void;\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX?: MenuPositionX, posY?: MenuPositionY): void;\n    /** Starts the enter animation. */\n    _startAnimation(): void;\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation(): void;\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event: AnimationEvent): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/menu/typings/menu-errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport declare function throwMatMenuMissingError(): void;\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport declare function throwMatMenuInvalidPositionX(): void;\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport declare function throwMatMenuInvalidPositionY(): void;\n"
  },
  {
    "path": "node_modules/@angular/material/menu/typings/menu-item.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusableOption, FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { ElementRef, OnDestroy } from '@angular/core';\nimport { CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { MatMenuPanel } from './menu-panel';\n/** @docs-private */\nexport declare class MatMenuItemBase {\n}\nexport declare const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase;\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\nexport declare class MatMenuItem extends _MatMenuItemMixinBase implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n    private _elementRef;\n    private _focusMonitor?;\n    private _parentMenu?;\n    private _document;\n    /** Stream that emits when the menu item is hovered. */\n    readonly _hovered: Subject<MatMenuItem>;\n    /** Whether the menu item is highlighted. */\n    _highlighted: boolean;\n    /** Whether the menu item acts as a trigger for a sub-menu. */\n    _triggersSubmenu: boolean;\n    constructor(_elementRef: ElementRef<HTMLElement>, document?: any, _focusMonitor?: FocusMonitor | undefined, _parentMenu?: MatMenuPanel<MatMenuItem> | undefined);\n    /** Focuses the menu item. */\n    focus(origin?: FocusOrigin): void;\n    ngOnDestroy(): void;\n    /** Used to set the `tabindex`. */\n    _getTabIndex(): string;\n    /** Returns the host DOM element. */\n    _getHostElement(): HTMLElement;\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event: Event): void;\n    /** Emits to the hover stream. */\n    _handleMouseEnter(): void;\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/menu/typings/menu-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatMenuModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/menu/typings/menu-panel.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, TemplateRef, InjectionToken } from '@angular/core';\nimport { MenuPositionX, MenuPositionY } from './menu-positions';\nimport { Direction } from '@angular/cdk/bidi';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport { MatMenuContent } from './menu-content';\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport declare const MAT_MENU_PANEL: InjectionToken<MatMenuPanel<any>>;\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n    xPosition: MenuPositionX;\n    yPosition: MenuPositionY;\n    overlapTrigger: boolean;\n    templateRef: TemplateRef<any>;\n    close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    parentMenu?: MatMenuPanel | undefined;\n    direction?: Direction;\n    focusFirstItem: (origin?: FocusOrigin) => void;\n    resetActiveItem: () => void;\n    setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n    setElevation?(depth: number): void;\n    lazyContent?: MatMenuContent;\n    backdropClass?: string;\n    hasBackdrop?: boolean;\n    addItem?: (item: T) => void;\n    removeItem?: (item: T) => void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/menu/typings/menu-positions.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare type MenuPositionX = 'before' | 'after';\nexport declare type MenuPositionY = 'above' | 'below';\n"
  },
  {
    "path": "node_modules/@angular/material/menu/typings/menu-trigger.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { Overlay, ScrollStrategy } from '@angular/cdk/overlay';\nimport { AfterContentInit, ElementRef, EventEmitter, InjectionToken, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { MatMenu } from './menu-directive';\nimport { MatMenuItem } from './menu-item';\nimport { MatMenuPanel } from './menu-panel';\n/** Injection token that determines the scroll handling while the menu is open. */\nexport declare const MAT_MENU_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_MENU_SCROLL_STRATEGY_FACTORY;\n};\n/** Default top padding of the menu panel. */\nexport declare const MENU_PANEL_TOP_PADDING = 8;\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nexport declare class MatMenuTrigger implements AfterContentInit, OnDestroy {\n    private _overlay;\n    private _element;\n    private _viewContainerRef;\n    private _parentMenu;\n    private _menuItemInstance;\n    private _dir;\n    private _focusMonitor?;\n    private _portal;\n    private _overlayRef;\n    private _menuOpen;\n    private _closeSubscription;\n    private _hoverSubscription;\n    private _menuCloseSubscription;\n    private _scrollStrategy;\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n    private _handleTouchStart;\n    _openedBy: 'mouse' | 'touch' | null;\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    _deprecatedMatMenuTriggerFor: MatMenuPanel;\n    /** References the menu instance that the trigger is associated with. */\n    menu: MatMenuPanel;\n    private _menu;\n    /** Data to be passed along to any lazily-rendered content. */\n    menuData: any;\n    /** Event emitted when the associated menu is opened. */\n    readonly menuOpened: EventEmitter<void>;\n    /**\n     * Event emitted when the associated menu is opened.\n     * @deprecated Switch to `menuOpened` instead\n     * @breaking-change 8.0.0\n     */\n    readonly onMenuOpen: EventEmitter<void>;\n    /** Event emitted when the associated menu is closed. */\n    readonly menuClosed: EventEmitter<void>;\n    /**\n     * Event emitted when the associated menu is closed.\n     * @deprecated Switch to `menuClosed` instead\n     * @breaking-change 8.0.0\n     */\n    readonly onMenuClose: EventEmitter<void>;\n    constructor(_overlay: Overlay, _element: ElementRef<HTMLElement>, _viewContainerRef: ViewContainerRef, scrollStrategy: any, _parentMenu: MatMenu, _menuItemInstance: MatMenuItem, _dir: Directionality, _focusMonitor?: FocusMonitor | undefined);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Whether the menu is open. */\n    readonly menuOpen: boolean;\n    /** The text direction of the containing app. */\n    readonly dir: Direction;\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu(): boolean;\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu(): void;\n    /** Opens the menu. */\n    openMenu(): void;\n    /** Closes the menu. */\n    closeMenu(): void;\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin?: FocusOrigin): void;\n    /** Closes the menu and does the necessary cleanup. */\n    private _destroyMenu;\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    private _initMenu;\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    private _setMenuElevation;\n    /**\n     * This method resets the menu when it's closed, most importantly restoring\n     * focus to the menu trigger if the menu was opened via the keyboard.\n     */\n    private _resetMenu;\n    private _setIsMenuOpen;\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     */\n    private _checkMenu;\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    private _createOverlay;\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    private _getOverlayConfig;\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    private _subscribeToPositions;\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    private _setPosition;\n    /** Cleans up the active subscriptions. */\n    private _cleanUpSubscriptions;\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    private _menuClosingActions;\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event: MouseEvent): void;\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event: KeyboardEvent): void;\n    /** Handles click events on the trigger. */\n    _handleClick(event: MouseEvent): void;\n    /** Handles the cases where the user hovers over the trigger. */\n    private _handleHover;\n    /** Gets the portal that should be attached to the overlay. */\n    private _getPortal;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/menu/typings/menu.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { MatMenu, MatMenuDefaultOptions, MAT_MENU_DEFAULT_OPTIONS } from './menu-directive';\nexport { MatMenuItem } from './menu-item';\nexport { MatMenuTrigger } from './menu-trigger';\nexport { MatMenuPanel } from './menu-panel';\nexport { MenuPositionX, MenuPositionY } from './menu-positions';\n"
  },
  {
    "path": "node_modules/@angular/material/menu/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './menu-module';\nexport * from './menu';\nexport * from './menu-animations';\nexport * from './menu-content';\nexport { MAT_MENU_SCROLL_STRATEGY } from './menu-trigger';\n"
  },
  {
    "path": "node_modules/@angular/material/paginator.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './paginator/index';\n"
  },
  {
    "path": "node_modules/@angular/material/paginator/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/paginator/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/paginator/typings/paginator-intl.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional } from '@angular/core';\nimport { Subject } from 'rxjs';\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nexport declare class MatPaginatorIntl {\n    /**\n     * Stream to emit from when labels are changed. Use this to notify components when the labels have\n     * changed after initialization.\n     */\n    readonly changes: Subject<void>;\n    /** A label for the page size selector. */\n    itemsPerPageLabel: string;\n    /** A label for the button that increments the current page. */\n    nextPageLabel: string;\n    /** A label for the button that decrements the current page. */\n    previousPageLabel: string;\n    /** A label for the button that moves to the first page. */\n    firstPageLabel: string;\n    /** A label for the button that moves to the last page. */\n    lastPageLabel: string;\n    /** A label for the range of items within the current page and the length of the whole list. */\n    getRangeLabel: (page: number, pageSize: number, length: number) => string;\n}\n/** @docs-private */\nexport declare function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl): MatPaginatorIntl;\n/** @docs-private */\nexport declare const MAT_PAGINATOR_INTL_PROVIDER: {\n    provide: typeof MatPaginatorIntl;\n    deps: Optional[][];\n    useFactory: typeof MAT_PAGINATOR_INTL_PROVIDER_FACTORY;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/paginator/typings/paginator-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatPaginatorModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/paginator/typings/paginator.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\nimport { MatPaginatorIntl } from './paginator-intl';\nimport { HasInitialized, HasInitializedCtor, ThemePalette, CanDisableCtor, CanDisable } from '@angular/material/core';\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport declare class PageEvent {\n    /** The current page index. */\n    pageIndex: number;\n    /**\n     * Index of the page that was selected previously.\n     * @breaking-change 8.0.0 To be made into a required property.\n     */\n    previousPageIndex?: number;\n    /** The current page size */\n    pageSize: number;\n    /** The current total number of items being paged */\n    length: number;\n}\n/** @docs-private */\nexport declare class MatPaginatorBase {\n}\nexport declare const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase;\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nexport declare class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable, HasInitialized {\n    _intl: MatPaginatorIntl;\n    private _changeDetectorRef;\n    private _initialized;\n    private _intlChanges;\n    /** Theme color to be used for the underlying form controls. */\n    color: ThemePalette;\n    /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n    pageIndex: number;\n    _pageIndex: number;\n    /** The length of the total number of items that are being paginated. Defaulted to 0. */\n    length: number;\n    _length: number;\n    /** Number of items to display on a page. By default set to 50. */\n    pageSize: number;\n    private _pageSize;\n    /** The set of provided page size options to display to the user. */\n    pageSizeOptions: number[];\n    private _pageSizeOptions;\n    /** Whether to hide the page size selection UI from the user. */\n    hidePageSize: boolean;\n    private _hidePageSize;\n    /** Whether to show the first/last buttons UI to the user. */\n    showFirstLastButtons: boolean;\n    private _showFirstLastButtons;\n    /** Event emitted when the paginator changes the page size or page index. */\n    readonly page: EventEmitter<PageEvent>;\n    /** Displayed set of page size options. Will be sorted and include current page size. */\n    _displayedPageSizeOptions: number[];\n    constructor(_intl: MatPaginatorIntl, _changeDetectorRef: ChangeDetectorRef);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /** Advances to the next page if it exists. */\n    nextPage(): void;\n    /** Move back to the previous page if it exists. */\n    previousPage(): void;\n    /** Move to the first page if not already there. */\n    firstPage(): void;\n    /** Move to the last page if not already there. */\n    lastPage(): void;\n    /** Whether there is a previous page. */\n    hasPreviousPage(): boolean;\n    /** Whether there is a next page. */\n    hasNextPage(): boolean;\n    /** Calculate the number of pages */\n    getNumberOfPages(): number;\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     */\n    _changePageSize(pageSize: number): void;\n    /** Checks whether the buttons for going forwards should be disabled. */\n    _nextButtonsDisabled(): boolean;\n    /** Checks whether the buttons for going backwards should be disabled. */\n    _previousButtonsDisabled(): boolean;\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     */\n    private _updateDisplayedPageSizeOptions;\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    private _emitPageEvent;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/paginator/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './paginator-module';\nexport * from './paginator';\nexport * from './paginator-intl';\n"
  },
  {
    "path": "node_modules/@angular/material/progress-bar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './progress-bar/index';\n"
  },
  {
    "path": "node_modules/@angular/material/progress-bar/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/progress-bar/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/progress-bar/typings/progress-bar-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatProgressBarModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/progress-bar/typings/progress-bar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, EventEmitter, NgZone, AfterViewInit, OnDestroy, InjectionToken } from '@angular/core';\nimport { CanColor, CanColorCtor } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatProgressBarBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n    value: number;\n}\nexport declare const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase;\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport declare const MAT_PROGRESS_BAR_LOCATION: InjectionToken<MatProgressBarLocation>;\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n    getPathname: () => string;\n}\n/** @docs-private */\nexport declare function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation;\n/**\n * `<mat-progress-bar>` component.\n */\nexport declare class MatProgressBar extends _MatProgressBarMixinBase implements CanColor, AfterViewInit, OnDestroy {\n    _elementRef: ElementRef;\n    private _ngZone;\n    _animationMode?: string | undefined;\n    constructor(_elementRef: ElementRef, _ngZone: NgZone, _animationMode?: string | undefined, \n    /**\n     * @deprecated `location` parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    location?: MatProgressBarLocation);\n    /** Flag that indicates whether NoopAnimations mode is set to true. */\n    _isNoopAnimation: boolean;\n    /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n    value: number;\n    private _value;\n    /** Buffer value of the progress bar. Defaults to zero. */\n    bufferValue: number;\n    private _bufferValue;\n    _primaryValueBar: ElementRef;\n    /**\n     * Event emitted when animation of the primary progress bar completes. This event will not\n     * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n     * animations (indeterminate and query).\n     */\n    animationEnd: EventEmitter<ProgressAnimationEnd>;\n    /** Reference to animation end subscription to be unsubscribed on destroy. */\n    private _animationEndSubscription;\n    /**\n     * Mode of the progress bar.\n     *\n     * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n     * 'determinate'.\n     * Mirrored to mode attribute.\n     */\n    mode: 'determinate' | 'indeterminate' | 'buffer' | 'query';\n    /** ID of the progress bar. */\n    progressbarId: string;\n    /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n    _rectangleFillValue: string;\n    /** Gets the current transform value for the progress bar's primary indicator. */\n    _primaryTransform(): {\n        transform: string;\n    };\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     */\n    _bufferTransform(): {\n        transform: string;\n    } | undefined;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /** Emit an animationEnd event if in determinate or buffer mode. */\n    private emitAnimationEnd;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/progress-bar/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './progress-bar-module';\nexport * from './progress-bar';\n"
  },
  {
    "path": "node_modules/@angular/material/progress-spinner.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './progress-spinner/index';\n"
  },
  {
    "path": "node_modules/@angular/material/progress-spinner/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/progress-spinner/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/progress-spinner/typings/progress-spinner-module.d.ts",
    "content": "declare class MatProgressSpinnerModule {\n}\nexport { MatProgressSpinnerModule };\n"
  },
  {
    "path": "node_modules/@angular/material/progress-spinner/typings/progress-spinner.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { ElementRef, InjectionToken } from '@angular/core';\nimport { CanColor, CanColorCtor } from '@angular/material/core';\n/** Possible mode for a progress spinner. */\nexport declare type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n/** @docs-private */\nexport declare class MatProgressSpinnerBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase;\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n    /** Diameter of the spinner. */\n    diameter?: number;\n    /** Width of the spinner's stroke. */\n    strokeWidth?: number;\n    /**\n     * Whether the animations should be force to be enabled, ignoring if the current environment is\n     * using NoopAnimationsModule.\n     */\n    _forceAnimations?: boolean;\n}\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport declare const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS: InjectionToken<MatProgressSpinnerDefaultOptions>;\n/** @docs-private */\nexport declare function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions;\n/**\n * `<mat-progress-spinner>` component.\n */\nexport declare class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n    _elementRef: ElementRef;\n    private _document;\n    private animationMode?;\n    private defaults?;\n    private _value;\n    private _strokeWidth;\n    private _fallbackAnimation;\n    /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n    private static diameters;\n    /**\n     * Used for storing all of the generated keyframe animations.\n     * @dynamic\n     */\n    private static styleTag;\n    /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n    _noopAnimations: boolean;\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    diameter: number;\n    private _diameter;\n    /** Stroke width of the progress spinner. */\n    strokeWidth: number;\n    /** Mode of the progress circle */\n    mode: ProgressSpinnerMode;\n    /** Value of the progress circle. */\n    value: number;\n    constructor(_elementRef: ElementRef, platform: Platform, _document: any, animationMode?: string | undefined, defaults?: MatProgressSpinnerDefaultOptions | undefined);\n    /** The radius of the spinner, adjusted for stroke width. */\n    readonly _circleRadius: number;\n    /** The view box of the spinner's svg element. */\n    readonly _viewBox: string;\n    /** The stroke circumference of the svg circle. */\n    readonly _strokeCircumference: number;\n    /** The dash offset of the svg circle. */\n    readonly _strokeDashOffset: number | null;\n    /** Stroke width of the circle in percent. */\n    readonly _circleStrokeWidth: number;\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    private _attachStyleNode;\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    private _getAnimationText;\n}\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nexport declare class MatSpinner extends MatProgressSpinner {\n    constructor(elementRef: ElementRef, platform: Platform, document: any, animationMode?: string, defaults?: MatProgressSpinnerDefaultOptions);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/progress-spinner/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './progress-spinner-module';\nexport * from './progress-spinner';\n"
  },
  {
    "path": "node_modules/@angular/material/radio.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './radio/index';\n"
  },
  {
    "path": "node_modules/@angular/material/radio/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/radio/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/radio/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './radio-module';\nexport * from './radio';\n"
  },
  {
    "path": "node_modules/@angular/material/radio/typings/radio-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatRadioModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/radio/typings/radio.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, HasTabIndex, HasTabIndexCtor } from '@angular/material/core';\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport declare const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any;\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport declare class MatRadioChange {\n    /** The MatRadioButton that emits the change event. */\n    source: MatRadioButton;\n    /** The value of the MatRadioButton. */\n    value: any;\n    constructor(\n    /** The MatRadioButton that emits the change event. */\n    source: MatRadioButton, \n    /** The value of the MatRadioButton. */\n    value: any);\n}\n/** @docs-private */\nexport declare class MatRadioGroupBase {\n}\nexport declare const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase;\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nexport declare class MatRadioGroup extends _MatRadioGroupMixinBase implements AfterContentInit, ControlValueAccessor, CanDisable {\n    private _changeDetector;\n    /** Selected value for the radio group. */\n    private _value;\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name;\n    /** The currently selected radio button. Should match value. */\n    private _selected;\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized;\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition;\n    /** Whether the radio group is disabled. */\n    private _disabled;\n    /** Whether the radio group is required. */\n    private _required;\n    /** The method to be called in order to update ngModel */\n    _controlValueAccessorChangeFn: (value: any) => void;\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    onTouched: () => any;\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    readonly change: EventEmitter<MatRadioChange>;\n    /** Child radio buttons. */\n    _radios: QueryList<MatRadioButton>;\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    name: string;\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    labelPosition: 'before' | 'after';\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    value: any;\n    _checkSelectedRadioButton(): void;\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    selected: MatRadioButton | null;\n    /** Whether the radio group is disabled */\n    disabled: boolean;\n    /** Whether the radio group is required */\n    required: boolean;\n    constructor(_changeDetector: ChangeDetectorRef);\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit(): void;\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch(): void;\n    private _updateRadioButtonNames;\n    /** Updates the `selected` radio button from the internal _value state. */\n    private _updateSelectedRadioFromValue;\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent(): void;\n    _markRadiosForCheck(): void;\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any): void;\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void): void;\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean): void;\n}\n/** @docs-private */\nexport declare class MatRadioButtonBase {\n    _elementRef: ElementRef;\n    disabled: boolean;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatRadioButtonMixinBase: CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase;\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nexport declare class MatRadioButton extends _MatRadioButtonMixinBase implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n    private _changeDetector;\n    private _focusMonitor;\n    private _radioDispatcher;\n    _animationMode?: string | undefined;\n    private _uniqueId;\n    /** The unique ID for the radio button. */\n    id: string;\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    name: string;\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    ariaLabel: string;\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    ariaLabelledby: string;\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    ariaDescribedby: string;\n    /** Whether this radio button is checked. */\n    checked: boolean;\n    /** The value of this radio button. */\n    value: any;\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    labelPosition: 'before' | 'after';\n    private _labelPosition;\n    /** Whether the radio button is disabled. */\n    disabled: boolean;\n    /** Whether the radio button is required. */\n    required: boolean;\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    readonly change: EventEmitter<MatRadioChange>;\n    /** The parent radio group. May or may not be present. */\n    radioGroup: MatRadioGroup;\n    /** ID of the native input element inside `<mat-radio-button>` */\n    readonly inputId: string;\n    /** Whether this radio is checked. */\n    private _checked;\n    /** Whether this radio is disabled. */\n    private _disabled;\n    /** Whether this radio is required. */\n    private _required;\n    /** Value assigned to this radio. */\n    private _value;\n    /** Unregister function for _radioDispatcher */\n    private _removeUniqueSelectionListener;\n    /** The native `<input type=radio>` element */\n    _inputElement: ElementRef<HTMLInputElement>;\n    constructor(radioGroup: MatRadioGroup, elementRef: ElementRef, _changeDetector: ChangeDetectorRef, _focusMonitor: FocusMonitor, _radioDispatcher: UniqueSelectionDispatcher, _animationMode?: string | undefined);\n    /** Focuses the radio button. */\n    focus(): void;\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /** Dispatch change event with current value. */\n    private _emitChangeEvent;\n    _isRippleDisabled(): boolean;\n    _onInputClick(event: Event): void;\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     */\n    _onInputChange(event: Event): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-add/fonts/material-fonts.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Tree } from '@angular-devkit/schematics';\nimport { Schema } from '../schema';\n/** Adds the Material Design fonts to the index HTML file. */\nexport declare function addFontsToIndex(options: Schema): (host: Tree) => Tree;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-add/fonts/project-index-html.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { WorkspaceProject } from '@angular-devkit/core/src/workspace';\n/** Looks for the index HTML file in the given project and returns its path. */\nexport declare function getIndexHtmlPath(project: WorkspaceProject): string;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-add/gestures/hammerjs-import.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Rule } from '@angular-devkit/schematics';\nimport { Schema } from '../schema';\n/** Adds HammerJS to the main file of the specified Angular CLI project. */\nexport declare function addHammerJsToMain(options: Schema): Rule;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-add/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Rule } from '@angular-devkit/schematics';\nimport { Schema } from './schema';\n/**\n * Schematic factory entry-point for the `ng-add` schematic. The ng-add schematic will be\n * automatically executed if developers run `ng add @angular/material`.\n *\n * Since the Angular Material schematics depend on the schematic utility functions from the CDK,\n * we need to install the CDK before loading the schematic files that import from the CDK.\n */\nexport default function (options: Schema): Rule;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-add/package-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Tree } from '@angular-devkit/schematics';\n/** Adds a package to the package.json in the given host tree. */\nexport declare function addPackageToPackageJson(host: Tree, pkg: string, version: string): Tree;\n/** Gets the version of the specified package by looking at the package.json in the given tree. */\nexport declare function getPackageVersionFromPackageJson(tree: Tree, name: string): string | null;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-add/schema.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport interface Schema {\n    /** Name of the project. */\n    project: string;\n    /** Whether gesture support should be set up. */\n    gestures: boolean;\n    /** Whether Angular browser animations should be set up. */\n    animations: boolean;\n    /** Name of pre-built theme to install. */\n    theme: 'indigo-pink' | 'deeppurple-amber' | 'pink-bluegrey' | 'purple-green' | 'custom';\n}\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-add/setup-project.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Rule } from '@angular-devkit/schematics';\nimport { Schema } from './schema';\n/**\n * Scaffolds the basics of a Angular Material application, this includes:\n *  - Add Packages to package.json\n *  - Adds pre-built themes to styles.ext\n *  - Adds Browser Animation to app.module\n */\nexport default function (options: Schema): Rule;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-add/theming/custom-theme.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Create custom theme for the given application configuration. */\nexport declare function createCustomTheme(name?: string): string;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-add/theming/theming.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Tree } from '@angular-devkit/schematics';\nimport { Schema } from '../schema';\n/** Add pre-built styles to the main project style file. */\nexport declare function addThemeToAppStyles(options: Schema): (host: Tree) => Tree;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-add/version-names.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Name of the Material version that is shipped together with the schematics. */\nexport declare const materialVersion: string | null;\n/**\n * Range of Angular versions that can be used together with the Angular Material version\n * that provides these schematics.\n */\nexport declare const requiredAngularVersionRange = \">=7.0.0\";\n/** HammerJS version that should be installed if gestures will be set up. */\nexport declare const hammerjsVersion = \"^2.0.8\";\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-generate/address-form/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Rule } from '@angular-devkit/schematics';\nimport { Schema } from './schema';\n/**\n * Scaffolds a new table component.\n * Internally it bootstraps the base component schematic\n */\nexport default function (options: Schema): Rule;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-generate/address-form/schema.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Schema as ComponentSchema } from '@schematics/angular/component/schema';\nexport interface Schema extends ComponentSchema {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-generate/dashboard/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Rule } from '@angular-devkit/schematics';\nimport { Schema } from './schema';\n/**\n * Scaffolds a new dashboard component.\n * Internally it bootstraps the base component schematic\n */\nexport default function (options: Schema): Rule;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-generate/dashboard/schema.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Schema as ComponentSchema } from '@schematics/angular/component/schema';\nexport interface Schema extends ComponentSchema {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-generate/nav/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Rule } from '@angular-devkit/schematics';\nimport { Schema } from './schema';\n/**\n * Scaffolds a new navigation component.\n * Internally it bootstraps the base component schematic\n */\nexport default function (options: Schema): Rule;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-generate/nav/schema.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Schema as ComponentSchema } from '@schematics/angular/component/schema';\nexport interface Schema extends ComponentSchema {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-generate/table/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Rule } from '@angular-devkit/schematics';\nimport { Schema } from './schema';\n/**\n * Scaffolds a new table component.\n * Internally it bootstraps the base component schematic\n */\nexport default function (options: Schema): Rule;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-generate/table/schema.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Schema as ComponentSchema } from '@schematics/angular/component/schema';\nexport interface Schema extends ComponentSchema {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-generate/tree/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Rule } from '@angular-devkit/schematics';\nimport { Schema } from './schema';\n/**\n * Scaffolds a new tree component.\n * Internally it bootstraps the base component schematic\n */\nexport default function (options: Schema): Rule;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-generate/tree/schema.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Schema as ComponentSchema } from '@schematics/angular/component/schema';\nexport interface Schema extends ComponentSchema {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/data/attribute-selectors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AttributeSelectorUpgradeData, VersionChanges } from '@angular/cdk/schematics';\nexport declare const attributeSelectors: VersionChanges<AttributeSelectorUpgradeData>;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/data/class-names.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ClassNameUpgradeData, VersionChanges } from '@angular/cdk/schematics';\nexport declare const classNames: VersionChanges<ClassNameUpgradeData>;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/data/constructor-checks.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ConstructorChecksUpgradeData, VersionChanges } from '@angular/cdk/schematics';\n/**\n * List of class names for which the constructor signature has been changed. The new constructor\n * signature types don't need to be stored here because the signature will be determined\n * automatically through type checking.\n */\nexport declare const constructorChecks: VersionChanges<ConstructorChecksUpgradeData>;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/data/css-selectors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { VersionChanges } from '@angular/cdk/schematics';\nexport interface MaterialCssSelectorData {\n    /** The CSS selector to replace. */\n    replace: string;\n    /** The new CSS selector. */\n    replaceWith: string;\n    /** Whitelist where this replacement is made. If omitted it is made in all files. */\n    whitelist?: {\n        /** Replace this name in stylesheet files. */\n        stylesheet?: boolean;\n        /** Replace this name in HTML files. */\n        html?: boolean;\n        /** Replace this name in TypeScript strings. */\n        strings?: boolean;\n    };\n}\nexport declare const cssSelectors: VersionChanges<MaterialCssSelectorData>;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/data/element-selectors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementSelectorUpgradeData, VersionChanges } from '@angular/cdk/schematics';\nexport declare const elementSelectors: VersionChanges<ElementSelectorUpgradeData>;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/data/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './attribute-selectors';\nexport * from './class-names';\nexport * from './constructor-checks';\nexport * from './css-selectors';\nexport * from './element-selectors';\nexport * from './input-names';\nexport * from './method-call-checks';\nexport * from './output-names';\nexport * from './property-names';\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/data/input-names.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InputNameUpgradeData, VersionChanges } from '@angular/cdk/schematics';\nexport declare const inputNames: VersionChanges<InputNameUpgradeData>;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/data/method-call-checks.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MethodCallUpgradeData, VersionChanges } from '@angular/cdk/schematics';\nexport declare const methodCallChecks: VersionChanges<MethodCallUpgradeData>;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/data/output-names.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OutputNameUpgradeData, VersionChanges } from '@angular/cdk/schematics';\nexport declare const outputNames: VersionChanges<OutputNameUpgradeData>;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/data/property-names.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PropertyNameUpgradeData, VersionChanges } from '@angular/cdk/schematics';\nexport declare const propertyNames: VersionChanges<PropertyNameUpgradeData>;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Rule } from '@angular-devkit/schematics';\n/** Entry point for the migration schematics with target of Angular Material v6 */\nexport declare function updateToV6(): Rule;\n/** Entry point for the migration schematics with target of Angular Material v7 */\nexport declare function updateToV7(): Rule;\n/** Post-update schematic to be called when update is finished. */\nexport declare function postUpdate(): Rule;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/typescript/module-specifiers.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ts from 'typescript';\n/** Name of the Angular Material module specifier. */\nexport declare const materialModuleSpecifier = \"@angular/material\";\n/** Name of the Angular CDK module specifier. */\nexport declare const cdkModuleSpecifier = \"@angular/cdk\";\n/** Whether the specified node is part of an Angular Material or CDK import declaration. */\nexport declare function isMaterialImportDeclaration(node: ts.Node): boolean;\n/** Whether the specified node is part of an Angular Material or CDK import declaration. */\nexport declare function isMaterialExportDeclaration(node: ts.Node): boolean;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/upgrade-data.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { RuleUpgradeData } from '@angular/cdk/schematics';\n/** Upgrade data that will be used for the Angular Material ng-update schematic. */\nexport declare const materialUpgradeData: RuleUpgradeData;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/upgrade-rules/misc-checks/checkClassInheritanceMiscRule.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ProgramAwareRuleWalker, RuleFailure, Rules } from 'tslint';\nimport * as ts from 'typescript';\n/**\n * Rule that checks for classes that extend Angular Material classes which have changed\n * their API.\n */\nexport declare class Rule extends Rules.TypedRule {\n    applyWithProgram(sourceFile: ts.SourceFile, program: ts.Program): RuleFailure[];\n}\nexport declare class Walker extends ProgramAwareRuleWalker {\n    visitClassDeclaration(node: ts.ClassDeclaration): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/upgrade-rules/misc-checks/checkClassNamesMiscRule.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { RuleFailure, Rules, RuleWalker } from 'tslint';\nimport * as ts from 'typescript';\n/**\n * Rule that looks for class name identifiers that have been removed but cannot be\n * automatically migrated.\n */\nexport declare class Rule extends Rules.AbstractRule {\n    apply(sourceFile: ts.SourceFile): RuleFailure[];\n}\nexport declare class Walker extends RuleWalker {\n    visitIdentifier(identifier: ts.Identifier): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/upgrade-rules/misc-checks/checkImportsMiscRule.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ProgramAwareRuleWalker, RuleFailure, Rules } from 'tslint';\nimport * as ts from 'typescript';\n/**\n * Rule that detects import declarations that refer to outdated identifiers from Angular Material\n * or the CDK which cannot be updated automatically.\n */\nexport declare class Rule extends Rules.TypedRule {\n    applyWithProgram(sourceFile: ts.SourceFile, program: ts.Program): RuleFailure[];\n}\nexport declare class Walker extends ProgramAwareRuleWalker {\n    visitImportDeclaration(node: ts.ImportDeclaration): void;\n    /**\n     * Checks for named imports that refer to the deleted animation constants.\n     * https://github.com/angular/material2/commit/9f3bf274c4f15f0b0fbd8ab7dbf1a453076e66d9\n     */\n    private _checkAnimationConstants;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/upgrade-rules/misc-checks/checkPropertyNamesMiscRule.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ProgramAwareRuleWalker, RuleFailure, Rules } from 'tslint';\nimport * as ts from 'typescript';\n/**\n * Rule that walks through every property access expression and and reports to TSLint if\n * a given property name is no longer existing but cannot be automatically migrated.\n */\nexport declare class Rule extends Rules.TypedRule {\n    applyWithProgram(sourceFile: ts.SourceFile, program: ts.Program): RuleFailure[];\n}\nexport declare class Walker extends ProgramAwareRuleWalker {\n    visitPropertyAccessExpression(node: ts.PropertyAccessExpression): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/upgrade-rules/misc-checks/checkTemplateMiscRule.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentWalker, ExternalResource } from '@angular/cdk/schematics';\nimport { RuleFailure, Rules } from 'tslint';\nimport * as ts from 'typescript';\n/**\n * Rule that walks through every inline or external template and reports if there are outdated\n * usages of the Angular Material API that needs to be updated manually.\n */\nexport declare class Rule extends Rules.AbstractRule {\n    apply(sourceFile: ts.SourceFile): RuleFailure[];\n}\nexport declare class Walker extends ComponentWalker {\n    visitInlineTemplate(node: ts.StringLiteralLike): void;\n    visitExternalTemplate(node: ExternalResource): void;\n    private _createFailuresForContent;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/upgrade-rules/misc-ripples-v7/ripple-speed-factor.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Converts the specified speed factor into the exact static enter duration. */\nexport declare function convertSpeedFactorToDuration(factor: number): number;\n/**\n * Creates a runtime TypeScript expression that can be used in order to calculate the duration\n * from the speed factor expression that couldn't be statically analyzed.\n *\n * @param speedFactorValue Speed factor expression that couldn't be statically analyzed.\n */\nexport declare function createSpeedFactorConvertExpression(speedFactorValue: string): string;\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/upgrade-rules/misc-ripples-v7/rippleSpeedFactorAssignmentRule.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ProgramAwareRuleWalker, RuleFailure, Rules } from 'tslint';\nimport * as ts from 'typescript';\n/**\n * Rule that walks through every property assignment and switches the global `baseSpeedFactor`\n * ripple option to the new global animation config. Also updates every class member assignment\n * that refers to MatRipple#speedFactor.\n */\nexport declare class Rule extends Rules.TypedRule {\n    applyWithProgram(sourceFile: ts.SourceFile, program: ts.Program): RuleFailure[];\n}\nexport declare class Walker extends ProgramAwareRuleWalker {\n    /** Switches binary expressions (e.g. myRipple.speedFactor = 0.5) to the new animation config. */\n    visitBinaryExpression(expression: ts.BinaryExpression): void;\n    /**\n     * Switches a potential global option `baseSpeedFactor` to the new animation config. For this\n     * we assume that the `baseSpeedFactor` is not used in combination with individual speed factors.\n     */\n    visitPropertyAssignment(assignment: ts.PropertyAssignment): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/schematics/ng-update/upgrade-rules/misc-ripples-v7/rippleSpeedFactorTemplateRule.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentWalker, ExternalResource } from '@angular/cdk/schematics';\nimport { RuleFailure, Rules } from 'tslint';\nimport * as ts from 'typescript';\n/**\n * Rule that walks through every inline or external template and updates the deprecated\n * [matRippleSpeedFactor] to [matRippleAnimation].\n */\nexport declare class Rule extends Rules.AbstractRule {\n    apply(sourceFile: ts.SourceFile): RuleFailure[];\n}\nexport declare class Walker extends ComponentWalker {\n    visitInlineTemplate(node: ts.StringLiteralLike): void;\n    visitExternalTemplate(node: ExternalResource): void;\n    private _createReplacementsForContent;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/select.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './select/index';\n"
  },
  {
    "path": "node_modules/@angular/material/select/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/select/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/select/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './select-module';\nexport * from './select';\nexport * from './select-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/select/typings/select-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport declare const matSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport declare const transformPanel: AnimationTriggerMetadata;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport declare const fadeInContent: AnimationTriggerMetadata;\n"
  },
  {
    "path": "node_modules/@angular/material/select/typings/select-errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport declare function getMatSelectDynamicMultipleError(): Error;\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport declare function getMatSelectNonArrayValueError(): Error;\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport declare function getMatSelectNonFunctionValueError(): Error;\n"
  },
  {
    "path": "node_modules/@angular/material/select/typings/select-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatSelectModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/select/typings/select.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { CdkConnectedOverlay, Overlay, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { AfterContentInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, InjectionToken, NgZone, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, CanUpdateErrorState, CanUpdateErrorStateCtor, ErrorStateMatcher, HasTabIndex, HasTabIndexCtor, MatOptgroup, MatOption, MatOptionSelectionChange } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl } from '@angular/material/form-field';\nimport { Observable, Subject } from 'rxjs';\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel */\nexport declare const SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis */\nexport declare const SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport declare const SELECT_PANEL_INDENT_PADDING_X: number;\n/** The height of the select items in `em` units. */\nexport declare const SELECT_ITEM_HEIGHT_EM = 3;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport declare let SELECT_MULTIPLE_PANEL_PADDING_X: number;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport declare const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nexport declare const MAT_SELECT_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_SELECT_SCROLL_STRATEGY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY;\n};\n/** Change event object that is emitted when the select value has changed. */\nexport declare class MatSelectChange {\n    /** Reference to the select that emitted the change event. */\n    source: MatSelect;\n    /** Current value of the select that emitted the event. */\n    value: any;\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source: MatSelect, \n    /** Current value of the select that emitted the event. */\n    value: any);\n}\n/** @docs-private */\nexport declare class MatSelectBase {\n    _elementRef: ElementRef;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    _parentForm: NgForm;\n    _parentFormGroup: FormGroupDirective;\n    ngControl: NgControl;\n    constructor(_elementRef: ElementRef, _defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, ngControl: NgControl);\n}\nexport declare const _MatSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanDisableRippleCtor & CanUpdateErrorStateCtor & typeof MatSelectBase;\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nexport declare class MatSelectTrigger {\n}\nexport declare class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex, MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n    private _viewportRuler;\n    private _changeDetectorRef;\n    private _ngZone;\n    private _dir;\n    private _parentFormField;\n    ngControl: NgControl;\n    private _scrollStrategyFactory;\n    /** Whether or not the overlay panel is open. */\n    private _panelOpen;\n    /** Whether filling out the select is required in the form. */\n    private _required;\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private _scrollTop;\n    /** The placeholder displayed in the trigger of the select. */\n    private _placeholder;\n    /** Whether the component is in multiple selection mode. */\n    private _multiple;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith;\n    /** Unique id for this input. */\n    private _uid;\n    /** Emits whenever the component is destroyed. */\n    private readonly _destroy;\n    /** The last measured value for the trigger's client bounding rect. */\n    _triggerRect: ClientRect;\n    /** The aria-describedby attribute on the select for improved a11y. */\n    _ariaDescribedby: string;\n    /** The cached font-size of the trigger element. */\n    _triggerFontSize: number;\n    /** Deals with the selection logic. */\n    _selectionModel: SelectionModel<MatOption>;\n    /** Manages keyboard events for options in the panel. */\n    _keyManager: ActiveDescendantKeyManager<MatOption>;\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void;\n    /** `View -> model callback called when select has been touched` */\n    _onTouched: () => void;\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    _optionIds: string;\n    /** The value of the select panel's transform-origin property. */\n    _transformOrigin: string;\n    /** Emits when the panel element is finished transforming in. */\n    _panelDoneAnimatingStream: Subject<string>;\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    _scrollStrategy: ScrollStrategy;\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    _offsetY: number;\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    _positions: {\n        originX: string;\n        originY: string;\n        overlayX: string;\n        overlayY: string;\n    }[];\n    /** Whether the component is disabling centering of the active option over the trigger. */\n    private _disableOptionCentering;\n    /** Whether the select is focused. */\n    /**\n    * @deprecated Setter to be removed as this property is intended to be readonly.\n    * @breaking-change 8.0.0\n    */\n    focused: boolean;\n    private _focused;\n    /** A name for this control that can be used by `mat-form-field`. */\n    controlType: string;\n    /** Trigger that opens the select. */\n    trigger: ElementRef;\n    /** Panel containing the select options. */\n    panel: ElementRef;\n    /** Overlay pane containing the options. */\n    overlayDir: CdkConnectedOverlay;\n    /** All of the defined select options. */\n    options: QueryList<MatOption>;\n    /** All of the defined groups of options. */\n    optionGroups: QueryList<MatOptgroup>;\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    panelClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    /** User-supplied override of the trigger element. */\n    customTrigger: MatSelectTrigger;\n    /** Placeholder to be shown if no value has been selected. */\n    placeholder: string;\n    /** Whether the component is required. */\n    required: boolean;\n    /** Whether the user should be allowed to select multiple options. */\n    multiple: boolean;\n    /** Whether to center the active option over the trigger. */\n    disableOptionCentering: boolean;\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    compareWith: (o1: any, o2: any) => boolean;\n    /** Value of the select control. */\n    value: any;\n    private _value;\n    /** Aria label of the select. If not specified, the placeholder will be used as label. */\n    ariaLabel: string;\n    /** Input that can be used to specify the `aria-labelledby` attribute. */\n    ariaLabelledby: string;\n    /** Object used to control when error messages are shown. */\n    errorStateMatcher: ErrorStateMatcher;\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n    /** Unique id of the element. */\n    id: string;\n    private _id;\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<MatOptionSelectionChange>;\n    /** Event emitted when the select panel has been toggled. */\n    readonly openedChange: EventEmitter<boolean>;\n    /** Event emitted when the select has been opened. */\n    readonly _openedStream: Observable<void>;\n    /** Event emitted when the select has been closed. */\n    readonly _closedStream: Observable<void>;\n    /** Event emitted when the selected value has been changed by the user. */\n    readonly selectionChange: EventEmitter<MatSelectChange>;\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    readonly valueChange: EventEmitter<any>;\n    constructor(_viewportRuler: ViewportRuler, _changeDetectorRef: ChangeDetectorRef, _ngZone: NgZone, _defaultErrorStateMatcher: ErrorStateMatcher, elementRef: ElementRef, _dir: Directionality, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _parentFormField: MatFormField, ngControl: NgControl, tabIndex: string, scrollStrategyFactory: any);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngDoCheck(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void;\n    /** Opens the overlay panel. */\n    open(): void;\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void;\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void;\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void;\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void;\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /** Whether or not the overlay panel is open. */\n    readonly panelOpen: boolean;\n    /** The currently selected option. */\n    readonly selected: MatOption | MatOption[];\n    /** The value displayed in the trigger. */\n    readonly triggerValue: string;\n    /** Whether the element is in RTL mode. */\n    _isRtl(): boolean;\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event: KeyboardEvent): void;\n    /** Handles keyboard events while the select is closed. */\n    private _handleClosedKeydown;\n    /** Handles keyboard events when the selected is open. */\n    private _handleOpenKeydown;\n    _onFocus(): void;\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur(): void;\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached(): void;\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme(): string;\n    /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n    private _setPseudoCheckboxPaddingSize;\n    /** Whether the select has a value. */\n    readonly empty: boolean;\n    private _initializeSelection;\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private _setSelectionByValue;\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private _selectValue;\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private _initKeyManager;\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private _resetOptions;\n    /** Invoked when an option is clicked. */\n    private _onSelect;\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private _sortValues;\n    /** Emits change event to set the model value. */\n    private _propagateChanges;\n    /** Records option IDs to pass to the aria-owns property. */\n    private _setOptionIds;\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private _highlightCorrectOption;\n    /** Scrolls the active option into view. */\n    private _scrollActiveOptionIntoView;\n    /** Focuses the select element. */\n    focus(): void;\n    /** Gets the index of the provided option in the option list. */\n    private _getOptionIndex;\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private _calculateOverlayPosition;\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number;\n    /** Returns the aria-label of the select component. */\n    _getAriaLabel(): string | null;\n    /** Returns the aria-labelledby of the select component. */\n    _getAriaLabelledby(): string | null;\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant(): string | null;\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private _calculateOverlayOffsetX;\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private _calculateOverlayOffsetY;\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private _checkOverlayWithinViewport;\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private _adjustPanelUp;\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private _adjustPanelDown;\n    /** Sets the transform origin point based on the selected option. */\n    private _getOriginBasedOnOption;\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private _getItemCount;\n    /** Calculates the height of the select's options. */\n    private _getItemHeight;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids: string[]): void;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(): void;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly shouldLabelFloat: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/sidenav.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './sidenav/index';\n"
  },
  {
    "path": "node_modules/@angular/material/sidenav/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/sidenav/typings/drawer-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport declare const matDrawerAnimations: {\n    readonly transformDrawer: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/sidenav/typings/drawer.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationEvent } from '@angular/animations';\nimport { FocusMonitor, FocusOrigin, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { AfterContentChecked, AfterContentInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, QueryList } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport declare function throwMatDuplicatedDrawerError(position: string): void;\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport declare type MatDrawerToggleResult = 'open' | 'close';\n/** Configures whether drawers should use auto sizing by default. */\nexport declare const MAT_DRAWER_DEFAULT_AUTOSIZE: InjectionToken<boolean>;\n/** @docs-private */\nexport declare function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean;\nexport declare class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n    private _changeDetectorRef;\n    _container: MatDrawerContainer;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _container: MatDrawerContainer, elementRef: ElementRef<HTMLElement>, scrollDispatcher: ScrollDispatcher, ngZone: NgZone);\n    ngAfterContentInit(): void;\n}\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nexport declare class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n    private _elementRef;\n    private _focusTrapFactory;\n    private _focusMonitor;\n    private _platform;\n    private _ngZone;\n    private _doc;\n    private _focusTrap;\n    private _elementFocusedBeforeDrawerWasOpened;\n    /** Whether the drawer is initialized. Used for disabling the initial animation. */\n    private _enableAnimations;\n    /** The side that the drawer is attached to. */\n    position: 'start' | 'end';\n    private _position;\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n    mode: 'over' | 'push' | 'side';\n    private _mode;\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n    disableClose: boolean;\n    private _disableClose;\n    /** Whether the drawer should focus the first focusable element automatically when opened. */\n    autoFocus: boolean;\n    private _autoFocus;\n    /** How the sidenav was opened (keypress, mouse click etc.) */\n    private _openedVia;\n    /** Emits whenever the drawer has started animating. */\n    _animationStarted: Subject<AnimationEvent>;\n    /** Emits whenever the drawer is done animating. */\n    _animationEnd: Subject<AnimationEvent>;\n    /** Current state of the sidenav animation. */\n    _animationState: 'open-instant' | 'open' | 'void';\n    /** Event emitted when the drawer open state is changed. */\n    readonly openedChange: EventEmitter<boolean>;\n    /** Event emitted when the drawer has been opened. */\n    readonly _openedStream: Observable<void>;\n    /** Event emitted when the drawer has started opening. */\n    readonly openedStart: Observable<void>;\n    /** Event emitted when the drawer has been closed. */\n    readonly _closedStream: Observable<void>;\n    /** Event emitted when the drawer has started closing. */\n    readonly closedStart: Observable<void>;\n    /** Event emitted when the drawer's position changes. */\n    onPositionChanged: EventEmitter<void>;\n    /**\n     * An observable that emits when the drawer mode changes. This is used by the drawer container to\n     * to know when to when the mode changes so it can adapt the margins on the content.\n     */\n    readonly _modeChanged: Subject<{}>;\n    readonly _isFocusTrapEnabled: boolean;\n    constructor(_elementRef: ElementRef<HTMLElement>, _focusTrapFactory: FocusTrapFactory, _focusMonitor: FocusMonitor, _platform: Platform, _ngZone: NgZone, _doc: any);\n    /** Traps focus inside the drawer. */\n    private _trapFocus;\n    /**\n     * If focus is currently inside the drawer, restores it to where it was before the drawer\n     * opened.\n     */\n    private _restoreFocus;\n    ngAfterContentInit(): void;\n    ngAfterContentChecked(): void;\n    ngOnDestroy(): void;\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n    opened: boolean;\n    private _opened;\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult>;\n    /** Close the drawer. */\n    close(): Promise<MatDrawerToggleResult>;\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    toggle(isOpen?: boolean, openedVia?: FocusOrigin): Promise<MatDrawerToggleResult>;\n    readonly _width: number;\n}\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nexport declare class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n    private _dir;\n    private _element;\n    private _ngZone;\n    private _changeDetectorRef;\n    private _animationMode?;\n    _drawers: QueryList<MatDrawer>;\n    _content: MatDrawerContent;\n    _userContent: MatDrawerContent;\n    /** The drawer child with the `start` position. */\n    readonly start: MatDrawer | null;\n    /** The drawer child with the `end` position. */\n    readonly end: MatDrawer | null;\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n    autosize: boolean;\n    private _autosize;\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n    hasBackdrop: any;\n    _backdropOverride: boolean | null;\n    /** Event emitted when the drawer backdrop is clicked. */\n    readonly backdropClick: EventEmitter<void>;\n    /** The drawer at the start/end position, independent of direction. */\n    private _start;\n    private _end;\n    /**\n     * The drawer at the left/right. When direction changes, these will change as well.\n     * They're used as aliases for the above to set the left/right style properly.\n     * In LTR, _left == _start and _right == _end.\n     * In RTL, _left == _end and _right == _start.\n     */\n    private _left;\n    private _right;\n    /** Emits when the component is destroyed. */\n    private readonly _destroyed;\n    /** Emits on every ngDoCheck. Used for debouncing reflows. */\n    private readonly _doCheckSubject;\n    /**\n     * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n     * drawer is open. We use margin rather than transform even for push mode because transform breaks\n     * fixed position elements inside of the transformed element.\n     */\n    _contentMargins: {\n        left: number | null;\n        right: number | null;\n    };\n    readonly _contentMarginChanges: Subject<{\n        left: number | null;\n        right: number | null;\n    }>;\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n    readonly scrollable: CdkScrollable;\n    constructor(_dir: Directionality, _element: ElementRef<HTMLElement>, _ngZone: NgZone, _changeDetectorRef: ChangeDetectorRef, defaultAutosize?: boolean, _animationMode?: string | undefined);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Calls `open` of both start and end drawers */\n    open(): void;\n    /** Calls `close` of both start and end drawers */\n    close(): void;\n    ngDoCheck(): void;\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n    private _watchDrawerToggle;\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n    private _watchDrawerPosition;\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n    private _watchDrawerMode;\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n    private _setContainerClass;\n    /** Validate the state of the drawer children components. */\n    private _validateDrawers;\n    /** Whether the container is being pushed to the side by one of the drawers. */\n    private _isPushed;\n    _onBackdropClicked(): void;\n    _closeModalDrawer(): void;\n    _isShowingBackdrop(): boolean;\n    private _canHaveBackdrop;\n    private _isDrawerOpen;\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n    private _updateContentMargins;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/sidenav/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/sidenav/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './sidenav-module';\nexport * from './drawer';\nexport * from './sidenav';\nexport * from './drawer-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/sidenav/typings/sidenav-module.d.ts",
    "content": "export declare class MatSidenavModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/sidenav/typings/sidenav.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, QueryList, ElementRef, NgZone } from '@angular/core';\nimport { MatDrawer, MatDrawerContainer, MatDrawerContent } from './drawer';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nexport declare class MatSidenavContent extends MatDrawerContent {\n    constructor(changeDetectorRef: ChangeDetectorRef, container: MatSidenavContainer, elementRef: ElementRef<HTMLElement>, scrollDispatcher: ScrollDispatcher, ngZone: NgZone);\n}\nexport declare class MatSidenav extends MatDrawer {\n    /** Whether the sidenav is fixed in the viewport. */\n    fixedInViewport: boolean;\n    private _fixedInViewport;\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n    fixedTopGap: number;\n    private _fixedTopGap;\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n    fixedBottomGap: number;\n    private _fixedBottomGap;\n}\nexport declare class MatSidenavContainer extends MatDrawerContainer {\n    _drawers: QueryList<MatSidenav>;\n    _content: MatSidenavContent;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/slide-toggle.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './slide-toggle/index';\n"
  },
  {
    "path": "node_modules/@angular/material/slide-toggle/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/slide-toggle/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/slide-toggle/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './slide-toggle-module';\nexport * from './slide-toggle';\nexport * from './slide-toggle-config';\n"
  },
  {
    "path": "node_modules/@angular/material/slide-toggle/typings/slide-toggle-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n    /** Whether toggle action triggers value changes in slide toggle. */\n    disableToggleValue?: boolean;\n    /** Whether drag action triggers value changes in slide toggle. */\n    disableDragValue?: boolean;\n}\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport declare const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS: InjectionToken<MatSlideToggleDefaultOptions>;\n"
  },
  {
    "path": "node_modules/@angular/material/slide-toggle/typings/slide-toggle-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatSlideToggleModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/slide-toggle/typings/slide-toggle.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, NgZone } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, HammerInput, HasTabIndex, HasTabIndexCtor } from '@angular/material/core';\nimport { MatSlideToggleDefaultOptions } from './slide-toggle-config';\n/** @docs-private */\nexport declare const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any;\n/** Change event object emitted by a MatSlideToggle. */\nexport declare class MatSlideToggleChange {\n    /** The source MatSlideToggle of the event. */\n    source: MatSlideToggle;\n    /** The new `checked` value of the MatSlideToggle. */\n    checked: boolean;\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source: MatSlideToggle, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked: boolean);\n}\n/** @docs-private */\nexport declare class MatSlideToggleBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatSlideToggleMixinBase: HasTabIndexCtor & CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatSlideToggleBase;\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nexport declare class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit, ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n    private _focusMonitor;\n    private _changeDetectorRef;\n    private _ngZone;\n    defaults: MatSlideToggleDefaultOptions;\n    _animationMode?: string | undefined;\n    private _dir?;\n    private onChange;\n    private onTouched;\n    private _uniqueId;\n    private _required;\n    private _checked;\n    /** Whether the thumb is currently being dragged. */\n    private _dragging;\n    /** Previous checked state before drag started. */\n    private _previousChecked;\n    /** Width of the thumb bar of the slide-toggle. */\n    private _thumbBarWidth;\n    /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n    private _dragPercentage;\n    /** Reference to the thumb HTMLElement. */\n    _thumbEl: ElementRef;\n    /** Reference to the thumb bar HTMLElement. */\n    _thumbBarEl: ElementRef;\n    /** Name value will be applied to the input element if present. */\n    name: string | null;\n    /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n    id: string;\n    /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n    labelPosition: 'before' | 'after';\n    /** Used to set the aria-label attribute on the underlying input element. */\n    ariaLabel: string | null;\n    /** Used to set the aria-labelledby attribute on the underlying input element. */\n    ariaLabelledby: string | null;\n    /** Whether the slide-toggle is required. */\n    required: boolean;\n    /** Whether the slide-toggle element is checked or not. */\n    checked: boolean;\n    /** An event will be dispatched each time the slide-toggle changes its value. */\n    readonly change: EventEmitter<MatSlideToggleChange>;\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed. The event does not fire when the user drags to change\n     * the slide toggle value.\n     */\n    readonly toggleChange: EventEmitter<void>;\n    /**\n     * An event will be dispatched each time the slide-toggle is dragged.\n     * This event is always emitted when the user drags the slide toggle to make a change greater\n     * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n     * the user toggles the slide toggle to change its value.\n     */\n    readonly dragChange: EventEmitter<void>;\n    /** Returns the unique id for the visual hidden input. */\n    readonly inputId: string;\n    /** Reference to the underlying input element. */\n    _inputElement: ElementRef<HTMLInputElement>;\n    constructor(elementRef: ElementRef, \n    /**\n     * @deprecated The `_platform` parameter to be removed.\n     * @breaking-change 8.0.0\n     */\n    _platform: Platform, _focusMonitor: FocusMonitor, _changeDetectorRef: ChangeDetectorRef, tabIndex: string, _ngZone: NgZone, defaults: MatSlideToggleDefaultOptions, _animationMode?: string | undefined, _dir?: Directionality | undefined);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event: Event): void;\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event: Event): void;\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value: any): void;\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn: any): void;\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn: any): void;\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled: boolean): void;\n    /** Focuses the slide-toggle. */\n    focus(): void;\n    /** Toggles the checked state of the slide-toggle. */\n    toggle(): void;\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    private _emitChangeEvent;\n    /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n    private _getDragPercentage;\n    _onDragStart(): void;\n    _onDrag(event: HammerInput): void;\n    _onDragEnd(): void;\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/slider.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './slider/index';\n"
  },
  {
    "path": "node_modules/@angular/material/slider/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/slider/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/slider/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './slider-module';\nexport * from './slider';\n"
  },
  {
    "path": "node_modules/@angular/material/slider/typings/slider-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatSliderModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/slider/typings/slider.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, HammerInput, HasTabIndex, HasTabIndexCtor } from '@angular/material/core';\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport declare const MAT_SLIDER_VALUE_ACCESSOR: any;\n/** A simple change event emitted by the MatSlider component. */\nexport declare class MatSliderChange {\n    /** The MatSlider that changed. */\n    source: MatSlider;\n    /** The new value of the source slider. */\n    value: number | null;\n}\n/** @docs-private */\nexport declare class MatSliderBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatSliderMixinBase: HasTabIndexCtor & CanColorCtor & CanDisableCtor & typeof MatSliderBase;\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport declare class MatSlider extends _MatSliderMixinBase implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n    private _focusMonitor;\n    private _changeDetectorRef;\n    private _dir;\n    _animationMode?: string | undefined;\n    /** Whether the slider is inverted. */\n    invert: boolean;\n    private _invert;\n    /** The maximum value that the slider can have. */\n    max: number;\n    private _max;\n    /** The minimum value that the slider can have. */\n    min: number;\n    private _min;\n    /** The values at which the thumb will snap. */\n    step: number;\n    private _step;\n    /** Whether or not to show the thumb label. */\n    thumbLabel: boolean;\n    private _thumbLabel;\n    /**\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n     */\n    tickInterval: 'auto' | number;\n    private _tickInterval;\n    /** Value of the slider. */\n    value: number | null;\n    private _value;\n    /**\n     * Function that will be used to format the value before it is displayed\n     * in the thumb label. Can be used to format very large number in order\n     * for them to fit into the slider thumb.\n     */\n    displayWith: (value: number | null) => string | number;\n    /** Whether the slider is vertical. */\n    vertical: boolean;\n    private _vertical;\n    /** Event emitted when the slider value has changed. */\n    readonly change: EventEmitter<MatSliderChange>;\n    /** Event emitted when the slider thumb moves. */\n    readonly input: EventEmitter<MatSliderChange>;\n    /**\n     * Emits when the raw value of the slider changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    readonly valueChange: EventEmitter<number | null>;\n    /** The value to be used for display purposes. */\n    readonly displayValue: string | number;\n    /** set focus to the host element */\n    focus(): void;\n    /** blur the host element */\n    blur(): void;\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    onTouched: () => any;\n    /** The percentage of the slider that coincides with the value. */\n    readonly percent: number;\n    private _percent;\n    /**\n     * Whether or not the thumb is sliding.\n     * Used to determine if there should be a transition for the thumb and fill track.\n     */\n    _isSliding: boolean;\n    /**\n     * Whether or not the slider is active (clicked or sliding).\n     * Used to shrink and grow the thumb as according to the Material Design spec.\n     */\n    _isActive: boolean;\n    /**\n     * Whether the axis of the slider is inverted.\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n     */\n    readonly _invertAxis: boolean;\n    /** Whether the slider is at its minimum value. */\n    readonly _isMinValue: boolean;\n    /**\n     * The amount of space to leave between the slider thumb and the track fill & track background\n     * elements.\n     */\n    readonly _thumbGap: 7 | 10 | 0;\n    /** CSS styles for the track background element. */\n    readonly _trackBackgroundStyles: {\n        [key: string]: string;\n    };\n    /** CSS styles for the track fill element. */\n    readonly _trackFillStyles: {\n        [key: string]: string;\n    };\n    /** CSS styles for the ticks container element. */\n    readonly _ticksContainerStyles: {\n        [key: string]: string;\n    };\n    /** CSS styles for the ticks element. */\n    readonly _ticksStyles: {\n        [key: string]: string;\n    };\n    readonly _thumbContainerStyles: {\n        [key: string]: string;\n    };\n    /** The size of a tick interval as a percentage of the size of the track. */\n    private _tickIntervalPercent;\n    /** The dimensions of the slider. */\n    private _sliderDimensions;\n    private _controlValueAccessorChangeFn;\n    /** Decimal places to round to, based on the step amount. */\n    private _roundToDecimal;\n    /** Subscription to the Directionality change EventEmitter. */\n    private _dirChangeSubscription;\n    /** The value of the slider when the slide start event fires. */\n    private _valueOnSlideStart;\n    /** Reference to the inner slider wrapper element. */\n    private _sliderWrapper;\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     */\n    private _shouldInvertMouseCoords;\n    /** The language direction for this slider element. */\n    private _getDirection;\n    constructor(elementRef: ElementRef, _focusMonitor: FocusMonitor, _changeDetectorRef: ChangeDetectorRef, _dir: Directionality, tabIndex: string, _animationMode?: string | undefined);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    _onMouseenter(): void;\n    _onMousedown(event: MouseEvent): void;\n    _onSlide(event: HammerInput): void;\n    _onSlideStart(event: HammerInput | null): void;\n    _onSlideEnd(): void;\n    _onFocus(): void;\n    _onBlur(): void;\n    _onKeydown(event: KeyboardEvent): void;\n    _onKeyup(): void;\n    /** Increments the slider by the given number of steps (negative number decrements). */\n    private _increment;\n    /** Calculate the new value from the new physical location. The value will always be snapped. */\n    private _updateValueFromPosition;\n    /** Emits a change event if the current value is different from the last emitted value. */\n    private _emitChangeEvent;\n    /** Emits an input event when the current value is different from the last emitted value. */\n    private _emitInputEvent;\n    /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n    private _updateTickIntervalPercent;\n    /** Creates a slider change object from the specified value. */\n    private _createChangeEvent;\n    /** Calculates the percentage of the slider that a value is. */\n    private _calculatePercentage;\n    /** Calculates the value a percentage of the slider corresponds to. */\n    private _calculateValue;\n    /** Return a number between two numbers. */\n    private _clamp;\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     */\n    private _getSliderDimensions;\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     */\n    private _focusHostElement;\n    /** Blurs the native element. */\n    private _blurHostElement;\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any): void;\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void): void;\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled: boolean): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/snack-bar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './snack-bar/index';\n"
  },
  {
    "path": "node_modules/@angular/material/snack-bar/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/snack-bar/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/snack-bar/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './snack-bar-module';\nexport * from './snack-bar';\nexport * from './snack-bar-container';\nexport * from './snack-bar-config';\nexport * from './snack-bar-ref';\nexport * from './simple-snack-bar';\nexport * from './snack-bar-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/snack-bar/typings/simple-snack-bar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MatSnackBarRef } from './snack-bar-ref';\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nexport declare class SimpleSnackBar {\n    snackBarRef: MatSnackBarRef<SimpleSnackBar>;\n    /** Data that was injected into the snack bar. */\n    data: {\n        message: string;\n        action: string;\n    };\n    constructor(snackBarRef: MatSnackBarRef<SimpleSnackBar>, data: any);\n    /** Performs the action on the snack bar. */\n    action(): void;\n    /** If the action button should be shown. */\n    readonly hasAction: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/snack-bar/typings/snack-bar-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport declare const matSnackBarAnimations: {\n    readonly snackBarState: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/snack-bar/typings/snack-bar-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewContainerRef, InjectionToken } from '@angular/core';\nimport { AriaLivePoliteness } from '@angular/cdk/a11y';\nimport { Direction } from '@angular/cdk/bidi';\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport declare const MAT_SNACK_BAR_DATA: InjectionToken<any>;\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport declare type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport declare type MatSnackBarVerticalPosition = 'top' | 'bottom';\n/**\n * Configuration used when opening a snack-bar.\n */\nexport declare class MatSnackBarConfig<D = any> {\n    /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n    politeness?: AriaLivePoliteness;\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     */\n    announcementMessage?: string;\n    /** The view container to place the overlay for the snack bar into. */\n    viewContainerRef?: ViewContainerRef;\n    /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n    duration?: number;\n    /** Extra CSS classes to be added to the snack bar container. */\n    panelClass?: string | string[];\n    /** Text layout direction for the snack bar. */\n    direction?: Direction;\n    /** Data being injected into the child component. */\n    data?: D | null;\n    /** The horizontal position to place the snack bar. */\n    horizontalPosition?: MatSnackBarHorizontalPosition;\n    /** The vertical position to place the snack bar. */\n    verticalPosition?: MatSnackBarVerticalPosition;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/snack-bar/typings/snack-bar-container.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationEvent } from '@angular/animations';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { ChangeDetectorRef, ComponentRef, ElementRef, EmbeddedViewRef, NgZone, OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { MatSnackBarConfig } from './snack-bar-config';\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nexport declare class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n    private _ngZone;\n    private _elementRef;\n    private _changeDetectorRef;\n    /** The snack bar configuration. */\n    snackBarConfig: MatSnackBarConfig;\n    /** Whether the component has been destroyed. */\n    private _destroyed;\n    /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n    _portalOutlet: CdkPortalOutlet;\n    /** Subject for notifying that the snack bar has exited from view. */\n    readonly _onExit: Subject<any>;\n    /** Subject for notifying that the snack bar has finished entering the view. */\n    readonly _onEnter: Subject<any>;\n    /** The state of the snack bar animations. */\n    _animationState: string;\n    /** ARIA role for the snack bar container. */\n    _role: 'alert' | 'status' | null;\n    constructor(_ngZone: NgZone, _elementRef: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, \n    /** The snack bar configuration. */\n    snackBarConfig: MatSnackBarConfig);\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event: AnimationEvent): void;\n    /** Begin animation of snack bar entrance into view. */\n    enter(): void;\n    /** Begin animation of the snack bar exiting from view. */\n    exit(): Observable<void>;\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy(): void;\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    private _completeExit;\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    private _applySnackBarClasses;\n    /** Asserts that no content is already attached to the container. */\n    private _assertNotAttached;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/snack-bar/typings/snack-bar-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatSnackBarModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/snack-bar/typings/snack-bar-ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { Observable } from 'rxjs';\nimport { MatSnackBarContainer } from './snack-bar-container';\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n    /** Whether the snack bar was dismissed using the action button. */\n    dismissedByAction: boolean;\n}\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport declare class MatSnackBarRef<T> {\n    private _overlayRef;\n    /** The instance of the component making up the content of the snack bar. */\n    instance: T;\n    /**\n     * The instance of the component making up the content of the snack bar.\n     * @docs-private\n     */\n    containerInstance: MatSnackBarContainer;\n    /** Subject for notifying the user that the snack bar has been dismissed. */\n    private readonly _afterDismissed;\n    /** Subject for notifying the user that the snack bar has opened and appeared. */\n    private readonly _afterOpened;\n    /** Subject for notifying the user that the snack bar action was called. */\n    private readonly _onAction;\n    /**\n     * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n     * dismissed before the duration passes.\n     */\n    private _durationTimeoutId;\n    /** Whether the snack bar was dismissed using the action button. */\n    private _dismissedByAction;\n    constructor(containerInstance: MatSnackBarContainer, _overlayRef: OverlayRef);\n    /** Dismisses the snack bar. */\n    dismiss(): void;\n    /** Marks the snackbar action clicked. */\n    dismissWithAction(): void;\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction(): void;\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration: number): void;\n    /** Marks the snackbar as opened */\n    _open(): void;\n    /** Cleans up the DOM after closing. */\n    private _finishDismiss;\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed(): Observable<MatSnackBarDismiss>;\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened(): Observable<void>;\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction(): Observable<void>;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/snack-bar/typings/snack-bar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { EmbeddedViewRef, InjectionToken, Injector, TemplateRef, OnDestroy } from '@angular/core';\nimport { SimpleSnackBar } from './simple-snack-bar';\nimport { MatSnackBarConfig } from './snack-bar-config';\nimport { MatSnackBarRef } from './snack-bar-ref';\n/** Injection token that can be used to specify default snack bar. */\nexport declare const MAT_SNACK_BAR_DEFAULT_OPTIONS: InjectionToken<MatSnackBarConfig<any>>;\n/** @docs-private */\nexport declare function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig;\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport declare class MatSnackBar implements OnDestroy {\n    private _overlay;\n    private _live;\n    private _injector;\n    private _breakpointObserver;\n    private _parentSnackBar;\n    private _defaultConfig;\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n    private _snackBarRefAtThisLevel;\n    /** Reference to the currently opened snackbar at *any* level. */\n    _openedSnackBarRef: MatSnackBarRef<any> | null;\n    constructor(_overlay: Overlay, _live: LiveAnnouncer, _injector: Injector, _breakpointObserver: BreakpointObserver, _parentSnackBar: MatSnackBar, _defaultConfig: MatSnackBarConfig);\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T>;\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig): MatSnackBarRef<EmbeddedViewRef<any>>;\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message: string, action?: string, config?: MatSnackBarConfig): MatSnackBarRef<SimpleSnackBar>;\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss(): void;\n    ngOnDestroy(): void;\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    private _attachSnackBarContainer;\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    private _attach;\n    /** Animates the old snack bar out and the new one in. */\n    private _animateSnackBar;\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    private _createOverlay;\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    private _createInjector;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/sort.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './sort/index';\n"
  },
  {
    "path": "node_modules/@angular/material/sort/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/sort/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/sort/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './sort-module';\nexport * from './sort-direction';\nexport * from './sort-header';\nexport * from './sort-header-intl';\nexport * from './sort';\nexport * from './sort-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/sort/typings/sort-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport declare const matSortAnimations: {\n    readonly indicator: AnimationTriggerMetadata;\n    readonly leftPointer: AnimationTriggerMetadata;\n    readonly rightPointer: AnimationTriggerMetadata;\n    readonly arrowOpacity: AnimationTriggerMetadata;\n    readonly arrowPosition: AnimationTriggerMetadata;\n    readonly allowChildren: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/sort/typings/sort-direction.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare type SortDirection = 'asc' | 'desc' | '';\n"
  },
  {
    "path": "node_modules/@angular/material/sort/typings/sort-errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nexport declare function getSortDuplicateSortableIdError(id: string): Error;\n/** @docs-private */\nexport declare function getSortHeaderNotContainedWithinSortError(): Error;\n/** @docs-private */\nexport declare function getSortHeaderMissingIdError(): Error;\n/** @docs-private */\nexport declare function getSortInvalidDirectionError(direction: string): Error;\n"
  },
  {
    "path": "node_modules/@angular/material/sort/typings/sort-header-intl.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional } from '@angular/core';\nimport { Subject } from 'rxjs';\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nexport declare class MatSortHeaderIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void>;\n    /** ARIA label for the sorting button. */\n    sortButtonLabel: (id: string) => string;\n}\n/** @docs-private */\nexport declare function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl): MatSortHeaderIntl;\n/** @docs-private */\nexport declare const MAT_SORT_HEADER_INTL_PROVIDER: {\n    provide: typeof MatSortHeaderIntl;\n    deps: Optional[][];\n    useFactory: typeof MAT_SORT_HEADER_INTL_PROVIDER_FACTORY;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/sort/typings/sort-header.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';\nimport { CanDisable, CanDisableCtor } from '@angular/material/core';\nimport { MatSort, MatSortable } from './sort';\nimport { SortDirection } from './sort-direction';\nimport { MatSortHeaderIntl } from './sort-header-intl';\n/** @docs-private */\nexport declare class MatSortHeaderBase {\n}\nexport declare const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase;\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport declare type ArrowViewState = SortDirection | 'hint' | 'active';\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n    fromState?: ArrowViewState;\n    toState: ArrowViewState;\n}\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n    name: string;\n}\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nexport declare class MatSortHeader extends _MatSortHeaderMixinBase implements CanDisable, MatSortable, OnDestroy, OnInit {\n    _intl: MatSortHeaderIntl;\n    _sort: MatSort;\n    _columnDef: MatSortHeaderColumnDef;\n    private _rerenderSubscription;\n    /**\n     * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n     * provide an affordance that the header is sortable by showing on focus and hover.\n     */\n    _showIndicatorHint: boolean;\n    /**\n     * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n     * position through the animation. If animations are currently disabled, the fromState is removed\n     * so that there is no animation displayed.\n     */\n    _viewState: ArrowViewStateTransition;\n    /** The direction the arrow should be facing according to the current state. */\n    _arrowDirection: SortDirection;\n    /**\n     * Whether the view state animation should show the transition between the `from` and `to` states.\n     */\n    _disableViewStateAnimation: boolean;\n    /**\n     * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n     * the column's name.\n     */\n    id: string;\n    /** Sets the position of the arrow that displays when sorted. */\n    arrowPosition: 'before' | 'after';\n    /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n    start: 'asc' | 'desc';\n    /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n    disableClear: boolean;\n    private _disableClear;\n    constructor(_intl: MatSortHeaderIntl, changeDetectorRef: ChangeDetectorRef, _sort: MatSort, _columnDef: MatSortHeaderColumnDef);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     */\n    _setIndicatorHintVisible(visible: boolean): void;\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     */\n    _setAnimationTransitionState(viewState: ArrowViewStateTransition): void;\n    /** Triggers the sort on this sort header and removes the indicator hint. */\n    _handleClick(): void;\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n    _isSorted(): boolean;\n    /** Returns the animation state for the arrow direction (indicator and pointers). */\n    _getArrowDirectionState(): string;\n    /** Returns the arrow position state (opacity, translation). */\n    _getArrowViewState(): string;\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     */\n    _updateArrowDirection(): void;\n    _isDisabled(): boolean;\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     */\n    _getAriaSortAttribute(): \"ascending\" | \"descending\" | null;\n}\nexport {};\n"
  },
  {
    "path": "node_modules/@angular/material/sort/typings/sort-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatSortModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/sort/typings/sort.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { CanDisable, CanDisableCtor, HasInitialized, HasInitializedCtor } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { SortDirection } from './sort-direction';\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n    /** The id of the column being sorted. */\n    id: string;\n    /** Starting sort direction. */\n    start: 'asc' | 'desc';\n    /** Whether to disable clearing the sorting state. */\n    disableClear: boolean;\n}\n/** The current sort state. */\nexport interface Sort {\n    /** The id of the column being sorted. */\n    active: string;\n    /** The sort direction. */\n    direction: SortDirection;\n}\n/** @docs-private */\nexport declare class MatSortBase {\n}\nexport declare const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase;\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\nexport declare class MatSort extends _MatSortMixinBase implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n    /** Collection of all registered sortables that this directive manages. */\n    sortables: Map<string, MatSortable>;\n    /** Used to notify any child components listening to state changes. */\n    readonly _stateChanges: Subject<void>;\n    /** The id of the most recently sorted MatSortable. */\n    active: string;\n    /**\n     * The direction to set when an MatSortable is initially sorted.\n     * May be overriden by the MatSortable's sort start.\n     */\n    start: 'asc' | 'desc';\n    /** The sort direction of the currently active MatSortable. */\n    direction: SortDirection;\n    private _direction;\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     */\n    disableClear: boolean;\n    private _disableClear;\n    /** Event emitted when the user changes either the active sort or sort direction. */\n    readonly sortChange: EventEmitter<Sort>;\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     */\n    register(sortable: MatSortable): void;\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     */\n    deregister(sortable: MatSortable): void;\n    /** Sets the active sort id and determines the new sort direction. */\n    sort(sortable: MatSortable): void;\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n    getNextSortDirection(sortable: MatSortable): SortDirection;\n    ngOnInit(): void;\n    ngOnChanges(): void;\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/stepper.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './stepper/index';\n"
  },
  {
    "path": "node_modules/@angular/material/stepper/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/stepper/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/stepper/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './stepper-module';\nexport * from './step-label';\nexport * from './stepper';\nexport * from './stepper-button';\nexport * from './step-header';\nexport * from './stepper-intl';\nexport * from './stepper-animations';\nexport * from './stepper-icon';\n"
  },
  {
    "path": "node_modules/@angular/material/stepper/typings/step-header.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ChangeDetectorRef, ElementRef, OnDestroy, TemplateRef } from '@angular/core';\nimport { MatStepLabel } from './step-label';\nimport { MatStepperIntl } from './stepper-intl';\nimport { MatStepperIconContext } from './stepper-icon';\nimport { CdkStepHeader, StepState } from '@angular/cdk/stepper';\nexport declare class MatStepHeader extends CdkStepHeader implements OnDestroy {\n    _intl: MatStepperIntl;\n    private _focusMonitor;\n    private _intlSubscription;\n    /** State of the given step. */\n    state: StepState;\n    /** Label of the given step. */\n    label: MatStepLabel | string;\n    /** Error message to display when there's an error. */\n    errorMessage: string;\n    /** Overrides for the header icons, passed in via the stepper. */\n    iconOverrides: {\n        [key: string]: TemplateRef<MatStepperIconContext>;\n    };\n    /** Index of the given step. */\n    index: number;\n    /** Whether the given step is selected. */\n    selected: boolean;\n    /** Whether the given step label is active. */\n    active: boolean;\n    /** Whether the given step is optional. */\n    optional: boolean;\n    constructor(_intl: MatStepperIntl, _focusMonitor: FocusMonitor, _elementRef: ElementRef<HTMLElement>, changeDetectorRef: ChangeDetectorRef);\n    ngOnDestroy(): void;\n    /** Returns string label of given step if it is a text label. */\n    _stringLabel(): string | null;\n    /** Returns MatStepLabel if the label of given step is a template label. */\n    _templateLabel(): MatStepLabel | null;\n    /** Returns the host HTML element. */\n    _getHostElement(): HTMLElement;\n    /** Template context variables that are exposed to the `matStepperIcon` instances. */\n    _getIconContext(): MatStepperIconContext;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/stepper/typings/step-label.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkStepLabel } from '@angular/cdk/stepper';\nexport declare class MatStepLabel extends CdkStepLabel {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/stepper/typings/stepper-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport declare const matStepperAnimations: {\n    readonly horizontalStepTransition: AnimationTriggerMetadata;\n    readonly verticalStepTransition: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/stepper/typings/stepper-button.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkStepperNext, CdkStepperPrevious } from '@angular/cdk/stepper';\n/** Button that moves to the next step in a stepper workflow. */\nexport declare class MatStepperNext extends CdkStepperNext {\n}\n/** Button that moves to the previous step in a stepper workflow. */\nexport declare class MatStepperPrevious extends CdkStepperPrevious {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/stepper/typings/stepper-icon.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplateRef } from '@angular/core';\nimport { StepState } from '@angular/cdk/stepper';\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n    /** Index of the step. */\n    index: number;\n    /** Whether the step is currently active. */\n    active: boolean;\n    /** Whether the step is optional. */\n    optional: boolean;\n}\n/**\n * Template to be used to override the icons inside the step header.\n */\nexport declare class MatStepperIcon {\n    templateRef: TemplateRef<MatStepperIconContext>;\n    /** Name of the icon to be overridden. */\n    name: StepState;\n    constructor(templateRef: TemplateRef<MatStepperIconContext>);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/stepper/typings/stepper-intl.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional } from '@angular/core';\nimport { Subject } from 'rxjs';\n/** Stepper data that is required for internationalization. */\nexport declare class MatStepperIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void>;\n    /** Label that is rendered below optional steps. */\n    optionalLabel: string;\n}\n/** @docs-private */\nexport declare function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl): MatStepperIntl;\n/** @docs-private */\nexport declare const MAT_STEPPER_INTL_PROVIDER: {\n    provide: typeof MatStepperIntl;\n    deps: Optional[][];\n    useFactory: typeof MAT_STEPPER_INTL_PROVIDER_FACTORY;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/stepper/typings/stepper-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatStepperModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/stepper/typings/stepper.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { CdkStep, CdkStepper, StepperOptions } from '@angular/cdk/stepper';\nimport { AnimationEvent } from '@angular/animations';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, QueryList, TemplateRef } from '@angular/core';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { MatStepHeader } from './step-header';\nimport { MatStepLabel } from './step-label';\nimport { MatStepperIcon, MatStepperIconContext } from './stepper-icon';\nexport declare class MatStep extends CdkStep implements ErrorStateMatcher {\n    private _errorStateMatcher;\n    /** Content for step label given by `<ng-template matStepLabel>`. */\n    stepLabel: MatStepLabel;\n    /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n    constructor(stepper: MatStepper, _errorStateMatcher: ErrorStateMatcher, stepperOptions?: StepperOptions);\n    /** Custom error state matcher that additionally checks for validity of interacted form. */\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;\n}\nexport declare class MatStepper extends CdkStepper implements AfterContentInit {\n    /** The list of step headers of the steps in the stepper. */\n    _stepHeader: QueryList<MatStepHeader>;\n    /** Steps that the stepper holds. */\n    _steps: QueryList<MatStep>;\n    /** Custom icon overrides passed in by the consumer. */\n    _icons: QueryList<MatStepperIcon>;\n    /** Event emitted when the current step is done transitioning in. */\n    readonly animationDone: EventEmitter<void>;\n    /** Consumer-specified template-refs to be used to override the header icons. */\n    _iconOverrides: {\n        [key: string]: TemplateRef<MatStepperIconContext>;\n    };\n    /** Stream of animation `done` events when the body expands/collapses. */\n    _animationDone: Subject<AnimationEvent>;\n    ngAfterContentInit(): void;\n}\nexport declare class MatHorizontalStepper extends MatStepper {\n    /** Whether the label should display in bottom or end position. */\n    labelPosition: 'bottom' | 'end';\n}\nexport declare class MatVerticalStepper extends MatStepper {\n    constructor(dir: Directionality, changeDetectorRef: ChangeDetectorRef, elementRef?: ElementRef<HTMLElement>, _document?: any);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/table.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './table/index';\n"
  },
  {
    "path": "node_modules/@angular/material/table/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/table/typings/cell.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef } from '@angular/core';\nimport { CdkCell, CdkCellDef, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkHeaderCell, CdkHeaderCellDef } from '@angular/cdk/table';\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport declare class MatCellDef extends CdkCellDef {\n}\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport declare class MatHeaderCellDef extends CdkHeaderCellDef {\n}\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nexport declare class MatFooterCellDef extends CdkFooterCellDef {\n}\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nexport declare class MatColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    name: string;\n    /** Whether this column should be sticky positioned at the start of the row */\n    sticky: boolean;\n    /** Whether this column should be sticky positioned on the end of the row */\n    stickyEnd: boolean;\n}\n/** Header cell template container that adds the right classes and role. */\nexport declare class MatHeaderCell extends CdkHeaderCell {\n    constructor(columnDef: CdkColumnDef, elementRef: ElementRef<HTMLElement>);\n}\n/** Footer cell template container that adds the right classes and role. */\nexport declare class MatFooterCell extends CdkFooterCell {\n    constructor(columnDef: CdkColumnDef, elementRef: ElementRef);\n}\n/** Cell template container that adds the right classes and role. */\nexport declare class MatCell extends CdkCell {\n    constructor(columnDef: CdkColumnDef, elementRef: ElementRef<HTMLElement>);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/table/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/table/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './table-module';\nexport * from './cell';\nexport * from './table';\nexport * from './row';\nexport * from './table-data-source';\n"
  },
  {
    "path": "node_modules/@angular/material/table/typings/row.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef } from '@angular/cdk/table';\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport declare class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nexport declare class MatFooterRowDef extends CdkFooterRowDef {\n}\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nexport declare class MatRowDef<T> extends CdkRowDef<T> {\n}\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nexport declare class MatHeaderRow extends CdkHeaderRow {\n}\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nexport declare class MatFooterRow extends CdkFooterRow {\n}\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nexport declare class MatRow extends CdkRow {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/table/typings/table-data-source.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DataSource } from '@angular/cdk/table';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport declare class MatTableDataSource<T> extends DataSource<T> {\n    /** Stream that emits when a new data array is set on the data source. */\n    private readonly _data;\n    /** Stream emitting render data to the table (depends on ordered data changes). */\n    private readonly _renderData;\n    /** Stream that emits when a new filter string is set on the data source. */\n    private readonly _filter;\n    /**\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\n     * as filtering, sorting, pagination, or base data changes.\n     */\n    _renderChangesSubscription: Subscription;\n    /**\n     * The filtered set of data that has been matched by the filter string, or all the data if there\n     * is no filter. Useful for knowing the set of data the table represents.\n     * For example, a 'selectAll()' function would likely want to select the set of filtered data\n     * shown to the user rather than all the data.\n     */\n    filteredData: T[];\n    /** Array of data that should be rendered by the table, where each object represents one row. */\n    data: T[];\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n    filter: string;\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n    sort: MatSort | null;\n    private _sort;\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n    paginator: MatPaginator | null;\n    private _paginator;\n    /**\n     * Data accessor function that is used for accessing data properties for sorting through\n     * the default sortData function.\n     * This default function assumes that the sort header IDs (which defaults to the column name)\n     * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n     * May be set to a custom function for different behavior.\n     * @param data Data object that is being accessed.\n     * @param sortHeaderId The name of the column that represents the data.\n     */\n    sortingDataAccessor: ((data: T, sortHeaderId: string) => string | number);\n    /**\n     * Gets a sorted copy of the data array based on the state of the MatSort. Called\n     * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n     * By default, the function retrieves the active sort and its direction and compares data\n     * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n     * of data ordering.\n     * @param data The array of data that should be sorted.\n     * @param sort The connected MatSort that holds the current sort state.\n     */\n    sortData: ((data: T[], sort: MatSort) => T[]);\n    /**\n     * Checks if a data object matches the data source's filter string. By default, each data object\n     * is converted to a string of its properties and returns true if the filter has\n     * at least one occurrence in that string. By default, the filter string has its whitespace\n     * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n     * filter matching.\n     * @param data Data object used to check against the filter.\n     * @param filter Filter string that has been set on the data source.\n     * @returns Whether the filter matches against the data\n     */\n    filterPredicate: ((data: T, filter: string) => boolean);\n    constructor(initialData?: T[]);\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription(): void;\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     */\n    _filterData(data: T[]): T[];\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    _orderData(data: T[]): T[];\n    /**\n     * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    _pageData(data: T[]): T[];\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    _updatePaginator(filteredDataLength: number): void;\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    connect(): BehaviorSubject<T[]>;\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * @docs-private\n     */\n    disconnect(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/table/typings/table-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatTableModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/table/typings/table.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTable } from '@angular/cdk/table';\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nexport declare class MatTable<T> extends CdkTable<T> {\n    /** Overrides the sticky CSS class set by the `CdkTable`. */\n    protected stickyCssClass: string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tabs.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './tabs/index';\n"
  },
  {
    "path": "node_modules/@angular/material/tabs/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/tabs/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { _MAT_INK_BAR_POSITIONER_FACTORY as ɵa22 } from './ink-bar';\nexport { MatTabBase as ɵf22, _MatTabMixinBase as ɵg22 } from './tab';\nexport { MatTabHeaderBase as ɵb22, _MatTabHeaderMixinBase as ɵc22 } from './tab-header';\nexport { MatTabLabelWrapperBase as ɵd22, _MatTabLabelWrapperMixinBase as ɵe22 } from './tab-label-wrapper';\nexport { MatTabLinkBase as ɵj22, MatTabNavBase as ɵh22, _MatTabLinkMixinBase as ɵk22, _MatTabNavMixinBase as ɵi22 } from './tab-nav-bar/tab-nav-bar';\n"
  },
  {
    "path": "node_modules/@angular/material/tabs/typings/ink-bar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, InjectionToken, NgZone } from '@angular/core';\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\nexport interface _MatInkBarPositioner {\n    (element: HTMLElement): {\n        left: string;\n        width: string;\n    };\n}\n/** Injection token for the MatInkBar's Positioner. */\nexport declare const _MAT_INK_BAR_POSITIONER: InjectionToken<_MatInkBarPositioner>;\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport declare function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner;\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\nexport declare class MatInkBar {\n    private _elementRef;\n    private _ngZone;\n    private _inkBarPositioner;\n    constructor(_elementRef: ElementRef<HTMLElement>, _ngZone: NgZone, _inkBarPositioner: _MatInkBarPositioner);\n    /**\n     * Calculates the styles from the provided element in order to align the ink-bar to that element.\n     * Shows the ink bar if previously set as hidden.\n     * @param element\n     */\n    alignToElement(element: HTMLElement): void;\n    /** Shows the ink bar. */\n    show(): void;\n    /** Hides the ink bar. */\n    hide(): void;\n    /**\n     * Sets the proper styles to the ink bar element.\n     * @param element\n     */\n    private _setStyles;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tabs/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './tabs-module';\nexport * from './tab-group';\nexport { MatInkBar, _MatInkBarPositioner, _MAT_INK_BAR_POSITIONER } from './ink-bar';\nexport { MatTabBody, MatTabBodyOriginState, MatTabBodyPositionState, MatTabBodyPortal } from './tab-body';\nexport { MatTabHeader, ScrollDirection } from './tab-header';\nexport { MatTabLabelWrapper } from './tab-label-wrapper';\nexport { MatTab } from './tab';\nexport { MatTabLabel } from './tab-label';\nexport { MatTabNav, MatTabLink } from './tab-nav-bar/index';\nexport { MatTabContent } from './tab-content';\nexport * from './tabs-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/tabs/typings/tab-body.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit, ElementRef, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { TemplatePortal, CdkPortalOutlet, PortalHostDirective } from '@angular/cdk/portal';\nimport { Directionality, Direction } from '@angular/cdk/bidi';\nimport { Subject } from 'rxjs';\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport declare type MatTabBodyPositionState = 'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport declare type MatTabBodyOriginState = 'left' | 'right';\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\nexport declare class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n    private _host;\n    /** Subscription to events for when the tab body begins centering. */\n    private _centeringSub;\n    /** Subscription to events for when the tab body finishes leaving from center position. */\n    private _leavingSub;\n    constructor(componentFactoryResolver: ComponentFactoryResolver, viewContainerRef: ViewContainerRef, _host: MatTabBody);\n    /** Set initial visibility or set up subscription for changing visibility. */\n    ngOnInit(): void;\n    /** Clean up centering subscription. */\n    ngOnDestroy(): void;\n}\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\nexport declare class MatTabBody implements OnInit, OnDestroy {\n    private _elementRef;\n    private _dir;\n    /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n    private _positionIndex;\n    /** Subscription to the directionality change observable. */\n    private _dirChangeSubscription;\n    /** Tab body position state. Used by the animation trigger for the current state. */\n    _position: MatTabBodyPositionState;\n    /** Emits when an animation on the tab is complete. */\n    _translateTabComplete: Subject<AnimationEvent>;\n    /** Event emitted when the tab begins to animate towards the center as the active tab. */\n    readonly _onCentering: EventEmitter<number>;\n    /** Event emitted before the centering of the tab begins. */\n    readonly _beforeCentering: EventEmitter<boolean>;\n    /** Event emitted before the centering of the tab begins. */\n    readonly _afterLeavingCenter: EventEmitter<boolean>;\n    /** Event emitted when the tab completes its animation towards the center. */\n    readonly _onCentered: EventEmitter<void>;\n    /** The portal host inside of this container into which the tab body content will be loaded. */\n    _portalHost: PortalHostDirective;\n    /** The tab body content to display. */\n    _content: TemplatePortal;\n    /** Position that will be used when the tab is immediately becoming visible after creation. */\n    origin: number;\n    /** Duration for the tab's animation. */\n    animationDuration: string;\n    /** The shifted index position of the tab body, where zero represents the active center tab. */\n    position: number;\n    constructor(_elementRef: ElementRef<HTMLElement>, _dir: Directionality, \n    /**\n     * @breaking-change 8.0.0 changeDetectorRef to be made required.\n     */\n    changeDetectorRef?: ChangeDetectorRef);\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     */\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    _onTranslateTabStarted(event: AnimationEvent): void;\n    /** The text direction of the containing app. */\n    _getLayoutDirection(): Direction;\n    /** Whether the provided position state is considered center, regardless of origin. */\n    _isCenterPosition(position: MatTabBodyPositionState | string): boolean;\n    /** Computes the position state that will be used for the tab-body animation trigger. */\n    private _computePositionAnimationState;\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     */\n    private _computePositionFromOrigin;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tabs/typings/tab-content.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplateRef } from '@angular/core';\n/** Decorates the `ng-template` tags and reads out the template from it. */\nexport declare class MatTabContent {\n    template: TemplateRef<any>;\n    constructor(template: TemplateRef<any>);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tabs/typings/tab-group.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentChecked, AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList, InjectionToken } from '@angular/core';\nimport { CanColor, CanColorCtor, CanDisableRipple, CanDisableRippleCtor, ThemePalette } from '@angular/material/core';\nimport { MatTab } from './tab';\nimport { MatTabHeader } from './tab-header';\n/** A simple change event emitted on focus or selection changes. */\nexport declare class MatTabChangeEvent {\n    /** Index of the currently-selected tab. */\n    index: number;\n    /** Reference to the currently-selected tab. */\n    tab: MatTab;\n}\n/** Possible positions for the tab header. */\nexport declare type MatTabHeaderPosition = 'above' | 'below';\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    animationDuration?: string;\n}\n/** Injection token that can be used to provide the default options the tabs module. */\nexport declare const MAT_TABS_CONFIG: InjectionToken<{}>;\n/** @docs-private */\nexport declare class MatTabGroupBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase;\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\nexport declare class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit, AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n    private _changeDetectorRef;\n    _tabs: QueryList<MatTab>;\n    _tabBodyWrapper: ElementRef;\n    _tabHeader: MatTabHeader;\n    /** The tab index that should be selected after the content has been checked. */\n    private _indexToSelect;\n    /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n    private _tabBodyWrapperHeight;\n    /** Subscription to tabs being added/removed. */\n    private _tabsSubscription;\n    /** Subscription to changes in the tab labels. */\n    private _tabLabelSubscription;\n    /** Whether the tab group should grow to the size of the active tab. */\n    dynamicHeight: boolean;\n    private _dynamicHeight;\n    /** The index of the active tab. */\n    selectedIndex: number | null;\n    private _selectedIndex;\n    /** Position of the tab header. */\n    headerPosition: MatTabHeaderPosition;\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    animationDuration: string;\n    /** Background color of the tab group. */\n    backgroundColor: ThemePalette;\n    private _backgroundColor;\n    /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n    readonly selectedIndexChange: EventEmitter<number>;\n    /** Event emitted when focus has changed within a tab group. */\n    readonly focusChange: EventEmitter<MatTabChangeEvent>;\n    /** Event emitted when the body animation has completed */\n    readonly animationDone: EventEmitter<void>;\n    /** Event emitted when the tab selection has changed. */\n    readonly selectedTabChange: EventEmitter<MatTabChangeEvent>;\n    private _groupId;\n    constructor(elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef, defaultConfig?: MatTabsConfig);\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     */\n    ngAfterContentChecked(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Re-aligns the ink bar to the selected tab element. */\n    realignInkBar(): void;\n    _focusChanged(index: number): void;\n    private _createChangeEvent;\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n     * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     */\n    private _subscribeToTabLabels;\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\n    private _clampTabIndex;\n    /** Returns a unique id for each tab label element */\n    _getTabLabelId(i: number): string;\n    /** Returns a unique id for each tab content element */\n    _getTabContentId(i: number): string;\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     */\n    _setTabBodyWrapperHeight(tabHeight: number): void;\n    /** Removes the height of the tab body wrapper. */\n    _removeTabBodyWrapperHeight(): void;\n    /** Handle click events, setting new selected index if appropriate. */\n    _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number): void;\n    /** Retrieves the tabindex for the tab. */\n    _getTabIndex(tab: MatTab, idx: number): number | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tabs/typings/tab-header.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { AfterContentChecked, AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, QueryList } from '@angular/core';\nimport { CanDisableRipple, CanDisableRippleCtor } from '@angular/material/core';\nimport { MatInkBar } from './ink-bar';\nimport { MatTabLabelWrapper } from './tab-label-wrapper';\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport declare type ScrollDirection = 'after' | 'before';\n/** @docs-private */\nexport declare class MatTabHeaderBase {\n}\nexport declare const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase;\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\nexport declare class MatTabHeader extends _MatTabHeaderMixinBase implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n    private _elementRef;\n    private _changeDetectorRef;\n    private _viewportRuler;\n    private _dir;\n    private _ngZone?;\n    _labelWrappers: QueryList<MatTabLabelWrapper>;\n    _inkBar: MatInkBar;\n    _tabListContainer: ElementRef;\n    _tabList: ElementRef;\n    /** The distance in pixels that the tab labels should be translated to the left. */\n    private _scrollDistance;\n    /** Whether the header should scroll to the selected index after the view has been checked. */\n    private _selectedIndexChanged;\n    /** Emits when the component is destroyed. */\n    private readonly _destroyed;\n    /** Whether the controls for pagination should be displayed */\n    _showPaginationControls: boolean;\n    /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n    _disableScrollAfter: boolean;\n    /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n    _disableScrollBefore: boolean;\n    /**\n     * The number of tab labels that are displayed on the header. When this changes, the header\n     * should re-evaluate the scroll position.\n     */\n    private _tabLabelCount;\n    /** Whether the scroll distance has changed and should be applied after the view is checked. */\n    private _scrollDistanceChanged;\n    /** Used to manage focus between the tabs. */\n    private _keyManager;\n    private _selectedIndex;\n    /** The index of the active tab. */\n    selectedIndex: number;\n    /** Event emitted when the option is selected. */\n    readonly selectFocusedIndex: EventEmitter<{}>;\n    /** Event emitted when a label is focused. */\n    readonly indexFocused: EventEmitter<{}>;\n    constructor(_elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef, _viewportRuler: ViewportRuler, _dir: Directionality, _ngZone?: NgZone | undefined);\n    ngAfterContentChecked(): void;\n    _handleKeydown(event: KeyboardEvent): void;\n    /**\n     * Aligns the ink bar to the selected tab on load.\n     */\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     */\n    _onContentChanges(): void;\n    /**\n     * Updates the view whether pagination should be enabled or not.\n     *\n     * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     */\n    updatePagination(): void;\n    /** Tracks which element has focus; used for keyboard navigation */\n    /** When the focus index is set, we must manually send focus to the correct label */\n    focusIndex: number;\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     */\n    _isValidIndex(index: number): boolean;\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     */\n    _setTabFocus(tabIndex: number): void;\n    /** The layout direction of the containing app. */\n    _getLayoutDirection(): Direction;\n    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n    _updateTabScrollPosition(): void;\n    /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n    scrollDistance: number;\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _scrollHeader(scrollDir: ScrollDirection): void;\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _scrollToLabel(labelIndex: number): void;\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _checkPaginationEnabled(): void;\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _checkScrollingControls(): void;\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _getMaxScrollDistance(): number;\n    /** Tells the ink-bar to align itself to the current label wrapper */\n    _alignInkBarToSelectedTab(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tabs/typings/tab-label-wrapper.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef } from '@angular/core';\nimport { CanDisable, CanDisableCtor } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatTabLabelWrapperBase {\n}\nexport declare const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase;\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\nexport declare class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n    elementRef: ElementRef;\n    constructor(elementRef: ElementRef);\n    /** Sets focus on the wrapper element */\n    focus(): void;\n    getOffsetLeft(): number;\n    getOffsetWidth(): number;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tabs/typings/tab-label.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkPortal } from '@angular/cdk/portal';\n/** Used to flag tab labels for use with the portal directive */\nexport declare class MatTabLabel extends CdkPortal {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tabs/typings/tab-nav-bar/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './tab-nav-bar';\n"
  },
  {
    "path": "node_modules/@angular/material/tabs/typings/tab-nav-bar/tab-nav-bar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { AfterContentChecked, AfterContentInit, ChangeDetectorRef, ElementRef, NgZone, OnDestroy, QueryList } from '@angular/core';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, HasTabIndex, HasTabIndexCtor, RippleConfig, RippleGlobalOptions, RippleRenderer, RippleTarget, ThemePalette } from '@angular/material/core';\nimport { MatInkBar } from '../ink-bar';\nimport { FocusMonitor } from '@angular/cdk/a11y';\n/** @docs-private */\nexport declare class MatTabNavBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase;\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nexport declare class MatTabNav extends _MatTabNavMixinBase implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n    private _dir;\n    private _ngZone;\n    private _changeDetectorRef;\n    private _viewportRuler;\n    /** Subject that emits when the component has been destroyed. */\n    private readonly _onDestroy;\n    private _activeLinkChanged;\n    private _activeLinkElement;\n    _inkBar: MatInkBar;\n    /** Query list of all tab links of the tab navigation. */\n    _tabLinks: QueryList<MatTabLink>;\n    /** Background color of the tab nav. */\n    backgroundColor: ThemePalette;\n    private _backgroundColor;\n    constructor(elementRef: ElementRef, _dir: Directionality, _ngZone: NgZone, _changeDetectorRef: ChangeDetectorRef, _viewportRuler: ViewportRuler);\n    /**\n     * Notifies the component that the active link has been changed.\n     * @breaking-change 8.0.0 `element` parameter to be removed.\n     */\n    updateActiveLink(element: ElementRef): void;\n    ngAfterContentInit(): void;\n    /** Checks if the active link has been changed and, if so, will update the ink bar. */\n    ngAfterContentChecked(): void;\n    ngOnDestroy(): void;\n    /** Aligns the ink bar to the active link. */\n    _alignInkBar(): void;\n}\nexport declare class MatTabLinkBase {\n}\nexport declare const _MatTabLinkMixinBase: HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase;\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\nexport declare class MatTabLink extends _MatTabLinkMixinBase implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n    private _tabNavBar;\n    _elementRef: ElementRef;\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n     */\n    private _focusMonitor?;\n    /** Whether the tab link is active or not. */\n    protected _isActive: boolean;\n    /** Reference to the RippleRenderer for the tab-link. */\n    protected _tabLinkRipple: RippleRenderer;\n    /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n    private _ripplesGloballyDisabled;\n    /** Whether the link is active. */\n    active: boolean;\n    /**\n     * Ripple configuration for ripples that are launched on pointer down.\n     * @docs-private\n     */\n    rippleConfig: RippleConfig;\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    readonly rippleDisabled: boolean;\n    constructor(_tabNavBar: MatTabNav, _elementRef: ElementRef, ngZone: NgZone, platform: Platform, globalOptions: RippleGlobalOptions, tabIndex: string, \n    /**\n     * @deprecated\n     * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n     */\n    _focusMonitor?: FocusMonitor | undefined);\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tabs/typings/tab.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { CanDisable, CanDisableCtor } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { MatTabLabel } from './tab-label';\n/** @docs-private */\nexport declare class MatTabBase {\n}\nexport declare const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase;\nexport declare class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n    private _viewContainerRef;\n    /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n    templateLabel: MatTabLabel;\n    /**\n     * Template provided in the tab content that will be used if present, used to enable lazy-loading\n     */\n    _explicitContent: TemplateRef<any>;\n    /** Template inside the MatTab view that contains an `<ng-content>`. */\n    _implicitContent: TemplateRef<any>;\n    /** Plain text label for the tab, used when there is no template label. */\n    textLabel: string;\n    /** Aria label for the tab. */\n    ariaLabel: string;\n    /**\n     * Reference to the element that the tab is labelled by.\n     * Will be cleared if `aria-label` is set at the same time.\n     */\n    ariaLabelledby: string;\n    /** Portal that will be the hosted content of the tab */\n    private _contentPortal;\n    /** @docs-private */\n    readonly content: TemplatePortal | null;\n    /** Emits whenever the internal state of the tab changes. */\n    readonly _stateChanges: Subject<void>;\n    /**\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\n     * represents the right.\n     */\n    position: number | null;\n    /**\n     * The initial relatively index origin of the tab if it was created and selected after there\n     * was already a selected tab. Provides context of what position the tab should originate from.\n     */\n    origin: number | null;\n    /**\n     * Whether the tab is currently active.\n     */\n    isActive: boolean;\n    constructor(_viewContainerRef: ViewContainerRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tabs/typings/tabs-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport declare const matTabsAnimations: {\n    readonly translateTab: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/tabs/typings/tabs-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatTabsModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/toolbar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './toolbar/index';\n"
  },
  {
    "path": "node_modules/@angular/material/toolbar/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/toolbar/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/toolbar/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './toolbar-module';\nexport * from './toolbar';\n"
  },
  {
    "path": "node_modules/@angular/material/toolbar/typings/toolbar-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatToolbarModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/toolbar/typings/toolbar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { AfterViewInit, ElementRef, QueryList } from '@angular/core';\nimport { CanColor, CanColorCtor } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatToolbarBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase;\nexport declare class MatToolbarRow {\n}\nexport declare class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n    private _platform;\n    private _document;\n    /** Reference to all toolbar row elements that have been projected. */\n    _toolbarRows: QueryList<MatToolbarRow>;\n    constructor(elementRef: ElementRef, _platform: Platform, document?: any);\n    ngAfterViewInit(): void;\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     */\n    private _checkToolbarMixedModes;\n}\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport declare function throwToolbarMixedModesError(): void;\n"
  },
  {
    "path": "node_modules/@angular/material/tooltip.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './tooltip/index';\n"
  },
  {
    "path": "node_modules/@angular/material/tooltip/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/tooltip/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/tooltip/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './tooltip-module';\nexport * from './tooltip';\nexport * from './tooltip-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/tooltip/typings/tooltip-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport declare const matTooltipAnimations: {\n    readonly tooltipState: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/tooltip/typings/tooltip-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatTooltipModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tooltip/typings/tooltip.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationEvent } from '@angular/animations';\nimport { AriaDescriber, FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { HammerLoader } from '@angular/platform-browser';\nimport { OriginConnectionPosition, Overlay, OverlayConnectionPosition, OverlayRef, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { Platform } from '@angular/cdk/platform';\nimport { ChangeDetectorRef, ElementRef, InjectionToken, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { Observable } from 'rxjs';\nexport declare type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n/** Time in ms to throttle repositioning after scroll events. */\nexport declare const SCROLL_THROTTLE_MS = 20;\n/** CSS class that will be attached to the overlay panel. */\nexport declare const TOOLTIP_PANEL_CLASS = \"mat-tooltip-panel\";\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport declare function getMatTooltipInvalidPositionError(position: string): Error;\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport declare const MAT_TOOLTIP_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY;\n};\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n    showDelay: number;\n    hideDelay: number;\n    touchendHideDelay: number;\n}\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport declare const MAT_TOOLTIP_DEFAULT_OPTIONS: InjectionToken<MatTooltipDefaultOptions>;\n/** @docs-private */\nexport declare function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions;\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nexport declare class MatTooltip implements OnDestroy {\n    private _overlay;\n    private _elementRef;\n    private _scrollDispatcher;\n    private _viewContainerRef;\n    private _ngZone;\n    private _ariaDescriber;\n    private _focusMonitor;\n    private _dir;\n    private _defaultOptions;\n    _overlayRef: OverlayRef | null;\n    _tooltipInstance: TooltipComponent | null;\n    private _portal;\n    private _position;\n    private _disabled;\n    private _tooltipClass;\n    private _scrollStrategy;\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    position: TooltipPosition;\n    /** Disables the display of the tooltip. */\n    disabled: boolean;\n    /** The default delay in ms before showing the tooltip after show is called */\n    showDelay: number;\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    hideDelay: number;\n    private _message;\n    /** The message to be displayed in the tooltip */\n    message: string;\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    tooltipClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    private _manualListeners;\n    /** Emits when the component is destroyed. */\n    private readonly _destroyed;\n    constructor(_overlay: Overlay, _elementRef: ElementRef<HTMLElement>, _scrollDispatcher: ScrollDispatcher, _viewContainerRef: ViewContainerRef, _ngZone: NgZone, platform: Platform, _ariaDescriber: AriaDescriber, _focusMonitor: FocusMonitor, scrollStrategy: any, _dir: Directionality, _defaultOptions: MatTooltipDefaultOptions, hammerLoader?: HammerLoader);\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy(): void;\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay?: number): void;\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay?: number): void;\n    /** Shows/hides the tooltip */\n    toggle(): void;\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible(): boolean;\n    /** Handles the keydown events on the host element. */\n    _handleKeydown(e: KeyboardEvent): void;\n    /** Handles the touchend events on the host element. */\n    _handleTouchend(): void;\n    /** Create the overlay config and position strategy */\n    private _createOverlay;\n    /** Detaches the currently-attached tooltip. */\n    private _detach;\n    /** Updates the position of the current tooltip. */\n    private _updatePosition;\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin(): {\n        main: OriginConnectionPosition;\n        fallback: OriginConnectionPosition;\n    };\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition(): {\n        main: OverlayConnectionPosition;\n        fallback: OverlayConnectionPosition;\n    };\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    private _updateTooltipMessage;\n    /** Updates the tooltip class */\n    private _setTooltipClass;\n    /** Inverts an overlay position. */\n    private _invertPosition;\n}\nexport declare type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nexport declare class TooltipComponent {\n    private _changeDetectorRef;\n    private _breakpointObserver;\n    /** Message to display in the tooltip */\n    message: string;\n    /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n    tooltipClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    /** The timeout ID of any current timer set to show the tooltip */\n    _showTimeoutId: number | null;\n    /** The timeout ID of any current timer set to hide the tooltip */\n    _hideTimeoutId: number | null;\n    /** Property watched by the animation framework to show or hide the tooltip */\n    _visibility: TooltipVisibility;\n    /** Whether interactions on the page should close the tooltip */\n    private _closeOnInteraction;\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly _onHide;\n    /** Stream that emits whether the user has a handset-sized display.  */\n    _isHandset: Observable<BreakpointState>;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _breakpointObserver: BreakpointObserver);\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay: number): void;\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay: number): void;\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void>;\n    /** Whether the tooltip is being displayed. */\n    isVisible(): boolean;\n    _animationStart(): void;\n    _animationDone(event: AnimationEvent): void;\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction(): void;\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tree.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './tree/index';\n"
  },
  {
    "path": "node_modules/@angular/material/tree/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './typings/index';\n"
  },
  {
    "path": "node_modules/@angular/material/tree/typings/data-source/flat-data-source.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport { FlatTreeControl, TreeControl } from '@angular/cdk/tree';\nimport { BehaviorSubject, Observable } from 'rxjs';\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport declare class MatTreeFlattener<T, F> {\n    transformFunction: (node: T, level: number) => F;\n    getLevel: (node: F) => number;\n    isExpandable: (node: F) => boolean;\n    getChildren: (node: T) => Observable<T[]> | T[];\n    constructor(transformFunction: (node: T, level: number) => F, getLevel: (node: F) => number, isExpandable: (node: F) => boolean, getChildren: (node: T) => Observable<T[]> | T[]);\n    _flattenNode(node: T, level: number, resultNodes: F[], parentMap: boolean[]): F[];\n    _flattenChildren(children: T[], level: number, resultNodes: F[], parentMap: boolean[]): void;\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[];\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[];\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport declare class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n    private treeControl;\n    private treeFlattener;\n    _flattenedData: BehaviorSubject<F[]>;\n    _expandedData: BehaviorSubject<F[]>;\n    _data: BehaviorSubject<T[]>;\n    data: T[];\n    constructor(treeControl: FlatTreeControl<F>, treeFlattener: MatTreeFlattener<T, F>, initialData?: T[]);\n    connect(collectionViewer: CollectionViewer): Observable<F[]>;\n    disconnect(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tree/typings/data-source/nested-data-source.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, Observable } from 'rxjs';\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport declare class MatTreeNestedDataSource<T> extends DataSource<T> {\n    _data: BehaviorSubject<T[]>;\n    /**\n     * Data for the nested tree\n     */\n    data: T[];\n    connect(collectionViewer: CollectionViewer): Observable<T[]>;\n    disconnect(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tree/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/tree/typings/node.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef } from '@angular/cdk/tree';\nimport { AfterContentInit, ElementRef, IterableDiffers, OnDestroy, QueryList } from '@angular/core';\nimport { CanDisable, CanDisableCtor, HasTabIndex, HasTabIndexCtor } from '@angular/material/core';\nimport { MatTreeNodeOutlet } from './outlet';\nexport declare const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode;\nexport declare const _MatNestedTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode;\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nexport declare class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements CanDisable, HasTabIndex {\n    protected _elementRef: ElementRef<HTMLElement>;\n    protected _tree: CdkTree<T>;\n    role: 'treeitem' | 'group';\n    constructor(_elementRef: ElementRef<HTMLElement>, _tree: CdkTree<T>, tabIndex: string);\n}\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\nexport declare class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    data: T;\n}\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nexport declare class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n    protected _elementRef: ElementRef<HTMLElement>;\n    protected _tree: CdkTree<T>;\n    protected _differs: IterableDiffers;\n    node: T;\n    nodeOutlet: QueryList<MatTreeNodeOutlet>;\n    constructor(_elementRef: ElementRef<HTMLElement>, _tree: CdkTree<T>, _differs: IterableDiffers, tabIndex: string);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tree/typings/outlet.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTreeNodeOutlet } from '@angular/cdk/tree';\nimport { ViewContainerRef } from '@angular/core';\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nexport declare class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n    viewContainer: ViewContainerRef;\n    constructor(viewContainer: ViewContainerRef);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tree/typings/padding.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTreeNodePadding } from '@angular/cdk/tree';\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nexport declare class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    level: number;\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n    indent: number;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tree/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './node';\nexport * from './padding';\nexport * from './tree';\nexport * from './tree-module';\nexport * from './toggle';\nexport * from './outlet';\nexport * from './data-source/flat-data-source';\nexport * from './data-source/nested-data-source';\n"
  },
  {
    "path": "node_modules/@angular/material/tree/typings/toggle.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTreeNodeToggle } from '@angular/cdk/tree';\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\nexport declare class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n    recursive: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tree/typings/tree-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatTreeModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/tree/typings/tree.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTree } from '@angular/cdk/tree';\nimport { MatTreeNodeOutlet } from './outlet';\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nexport declare class MatTree<T> extends CdkTree<T> {\n    _nodeOutlet: MatTreeNodeOutlet;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/autocomplete/autocomplete-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatAutocompleteModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/autocomplete/autocomplete-origin.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef } from '@angular/core';\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nexport declare class MatAutocompleteOrigin {\n    /** Reference to the element on which the directive is applied. */\n    elementRef: ElementRef<HTMLElement>;\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef: ElementRef<HTMLElement>);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/autocomplete/autocomplete-trigger.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ChangeDetectorRef, ElementRef, InjectionToken, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { MatOption, MatOptionSelectionChange } from '@angular/material/core';\nimport { MatFormField } from '@angular/material/form-field';\nimport { Observable } from 'rxjs';\nimport { MatAutocomplete } from './autocomplete';\nimport { MatAutocompleteOrigin } from './autocomplete-origin';\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n/** The height of each autocomplete option. */\nexport declare const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/** The total height of the autocomplete panel. */\nexport declare const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport declare const MAT_AUTOCOMPLETE_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY;\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport declare const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any;\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport declare function getMatAutocompleteMissingPanelError(): Error;\nexport declare class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n    private _element;\n    private _overlay;\n    private _viewContainerRef;\n    private _zone;\n    private _changeDetectorRef;\n    private _dir;\n    private _formField;\n    private _document;\n    private _viewportRuler?;\n    private _overlayRef;\n    private _portal;\n    private _componentDestroyed;\n    private _autocompleteDisabled;\n    private _scrollStrategy;\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private _previousValue;\n    /** Strategy that is used to position the panel. */\n    private _positionStrategy;\n    /** Whether or not the label state is being overridden. */\n    private _manuallyFloatingLabel;\n    /** The subscription for closing actions (some are bound to document). */\n    private _closingActionsSubscription;\n    /** Subscription to viewport size changes. */\n    private _viewportSubscription;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private _canOpenOnNextFocus;\n    /** Stream of keyboard events that can close the panel. */\n    private readonly _closeKeyEventStream;\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private _windowBlurHandler;\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void;\n    /** `View -> model callback called when autocomplete has been touched` */\n    _onTouched: () => void;\n    /** The autocomplete panel to be attached to this trigger. */\n    autocomplete: MatAutocomplete;\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    connectedTo: MatAutocompleteOrigin;\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    autocompleteAttribute: string;\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    autocompleteDisabled: boolean;\n    constructor(_element: ElementRef<HTMLInputElement>, _overlay: Overlay, _viewContainerRef: ViewContainerRef, _zone: NgZone, _changeDetectorRef: ChangeDetectorRef, scrollStrategy: any, _dir: Directionality, _formField: MatFormField, _document: any, _viewportRuler?: ViewportRuler | undefined);\n    ngOnDestroy(): void;\n    /** Whether or not the autocomplete panel is open. */\n    readonly panelOpen: boolean;\n    private _overlayAttached;\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void;\n    /** Closes the autocomplete suggestion panel. */\n    closePanel(): void;\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition(): void;\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    readonly panelClosingActions: Observable<MatOptionSelectionChange | null>;\n    /** Stream of autocomplete option selections. */\n    readonly optionSelections: Observable<MatOptionSelectionChange>;\n    /** The currently active option, coerced to MatOption type. */\n    readonly activeOption: MatOption | null;\n    /** Stream of clicks outside of the autocomplete panel. */\n    private _getOutsideClickStream;\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => {}): void;\n    registerOnTouched(fn: () => {}): void;\n    setDisabledState(isDisabled: boolean): void;\n    _handleKeydown(event: KeyboardEvent): void;\n    _handleInput(event: KeyboardEvent): void;\n    _handleFocus(): void;\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    private _floatLabel;\n    /** If the label has been manually elevated, return it to its normal state. */\n    private _resetLabel;\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private _scrollToOption;\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private _subscribeToClosingActions;\n    /** Destroys the autocomplete suggestion panel. */\n    private _destroyPanel;\n    private _setTriggerValue;\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private _setValueAndClose;\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    private _clearPreviousSelectedOption;\n    private _attachOverlay;\n    private _getOverlayConfig;\n    private _getOverlayPosition;\n    private _getConnectedElement;\n    private _getPanelWidth;\n    /** Returns the width of the input element, so the panel width can match it. */\n    private _getHostWidth;\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private _resetActiveItem;\n    /** Determines whether the panel can be opened. */\n    private _canOpen;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/autocomplete/autocomplete.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, QueryList, TemplateRef } from '@angular/core';\nimport { CanDisableRipple, CanDisableRippleCtor, MatOptgroup, MatOption } from '@angular/material/core';\n/** Event object that is emitted when an autocomplete option is selected. */\nexport declare class MatAutocompleteSelectedEvent {\n    /** Reference to the autocomplete panel that emitted the event. */\n    source: MatAutocomplete;\n    /** Option that was selected. */\n    option: MatOption;\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source: MatAutocomplete, \n    /** Option that was selected. */\n    option: MatOption);\n}\n/** @docs-private */\nexport declare class MatAutocompleteBase {\n}\nexport declare const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase;\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n}\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport declare const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS: InjectionToken<MatAutocompleteDefaultOptions>;\n/** @docs-private */\nexport declare function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions;\nexport declare class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit, CanDisableRipple {\n    private _changeDetectorRef;\n    private _elementRef;\n    /** Manages active item in option list based on key events. */\n    _keyManager: ActiveDescendantKeyManager<MatOption>;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean;\n    /** Whether the autocomplete panel is open. */\n    readonly isOpen: boolean;\n    _isOpen: boolean;\n    /** @docs-private */\n    template: TemplateRef<any>;\n    /** Element for the panel containing the autocomplete options. */\n    panel: ElementRef;\n    /** @docs-private */\n    options: QueryList<MatOption>;\n    /** @docs-private */\n    optionGroups: QueryList<MatOptgroup>;\n    /** Function that maps an option's control value to its display value in the trigger. */\n    displayWith: ((value: any) => string) | null;\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    autoActiveFirstOption: boolean;\n    private _autoActiveFirstOption;\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    panelWidth: string | number;\n    /** Event that is emitted whenever an option from the list is selected. */\n    readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent>;\n    /** Event that is emitted when the autocomplete panel is opened. */\n    readonly opened: EventEmitter<void>;\n    /** Event that is emitted when the autocomplete panel is closed. */\n    readonly closed: EventEmitter<void>;\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    classList: string;\n    _classList: {\n        [key: string]: boolean;\n    };\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _elementRef: ElementRef<HTMLElement>, defaults: MatAutocompleteDefaultOptions);\n    ngAfterContentInit(): void;\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop: number): void;\n    /** Returns the panel's scrollTop. */\n    _getScrollTop(): number;\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility(): void;\n    /** Emits the `select` event. */\n    _emitSelectEvent(option: MatOption): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/autocomplete/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { MatAutocompleteOrigin as ɵa29 } from './autocomplete-origin';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/autocomplete/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './autocomplete';\nexport * from './autocomplete-module';\nexport * from './autocomplete-trigger';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/badge/badge-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatBadgeModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/badge/badge.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AriaDescriber } from '@angular/cdk/a11y';\nimport { ElementRef, NgZone, OnDestroy, Renderer2 } from '@angular/core';\nimport { ThemePalette, CanDisableCtor, CanDisable } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatBadgeBase {\n}\nexport declare const _MatBadgeMixinBase: CanDisableCtor & typeof MatBadgeBase;\nexport declare type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport declare type MatBadgeSize = 'small' | 'medium' | 'large';\n/** Directive to display a text badge. */\nexport declare class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n    private _document;\n    private _ngZone;\n    private _elementRef;\n    private _ariaDescriber;\n    /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n    private _renderer?;\n    /** Whether the badge has any content. */\n    _hasContent: boolean;\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    color: ThemePalette;\n    private _color;\n    /** Whether the badge should overlap its contents or not */\n    overlap: boolean;\n    private _overlap;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    position: MatBadgePosition;\n    /** The content for the badge */\n    content: string;\n    private _content;\n    /** Message used to describe the decorated element via aria-describedby */\n    description: string;\n    private _description;\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    size: MatBadgeSize;\n    /** Whether the badge is hidden. */\n    hidden: boolean;\n    private _hidden;\n    /** Unique id for the badge */\n    _id: number;\n    private _badgeElement;\n    constructor(_document: any, _ngZone: NgZone, _elementRef: ElementRef<HTMLElement>, _ariaDescriber: AriaDescriber, \n    /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n    _renderer?: Renderer2 | undefined);\n    /** Whether the badge is above the host or not */\n    isAbove(): boolean;\n    /** Whether the badge is after the host or not */\n    isAfter(): boolean;\n    ngOnDestroy(): void;\n    /** Injects a span element into the DOM with the content. */\n    private _updateTextContent;\n    /** Creates the badge element */\n    private _createBadgeElement;\n    /** Sets the aria-label property on the element */\n    private _updateHostAriaDescription;\n    /** Adds css theme class given the color to the component host */\n    private _setColor;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/badge/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/badge/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './badge-module';\nexport * from './badge';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/bottom-sheet/bottom-sheet-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/** Animations used by the Material bottom sheet. */\nexport declare const matBottomSheetAnimations: {\n    readonly bottomSheetState: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/bottom-sheet/bottom-sheet-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewContainerRef, InjectionToken } from '@angular/core';\nimport { Direction } from '@angular/cdk/bidi';\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport declare const MAT_BOTTOM_SHEET_DATA: InjectionToken<any>;\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport declare class MatBottomSheetConfig<D = any> {\n    /** The view container to place the overlay for the bottom sheet into. */\n    viewContainerRef?: ViewContainerRef;\n    /** Extra CSS classes to be added to the bottom sheet container. */\n    panelClass?: string | string[];\n    /** Text layout direction for the bottom sheet. */\n    direction?: Direction;\n    /** Data being injected into the child component. */\n    data?: D | null;\n    /** Whether the bottom sheet has a backdrop. */\n    hasBackdrop?: boolean;\n    /** Custom class for the backdrop. */\n    backdropClass?: string;\n    /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n    disableClose?: boolean;\n    /** Aria label to assign to the bottom sheet element. */\n    ariaLabel?: string | null;\n    /**\n     * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    closeOnNavigation?: boolean;\n    /** Whether the bottom sheet should focus the first focusable element on open. */\n    autoFocus?: boolean;\n    /**\n     * Whether the bottom sheet should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n    restoreFocus?: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/bottom-sheet/bottom-sheet-container.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentRef, EmbeddedViewRef, OnDestroy, ElementRef, ChangeDetectorRef, EventEmitter } from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { BasePortalOutlet, ComponentPortal, TemplatePortal, CdkPortalOutlet } from '@angular/cdk/portal';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { MatBottomSheetConfig } from './bottom-sheet-config';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\nexport declare class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n    private _elementRef;\n    private _changeDetectorRef;\n    private _focusTrapFactory;\n    /** The bottom sheet configuration. */\n    bottomSheetConfig: MatBottomSheetConfig;\n    private _breakpointSubscription;\n    /** The portal outlet inside of this container into which the content will be loaded. */\n    _portalOutlet: CdkPortalOutlet;\n    /** The state of the bottom sheet animations. */\n    _animationState: 'void' | 'visible' | 'hidden';\n    /** Emits whenever the state of the animation changes. */\n    _animationStateChanged: EventEmitter<AnimationEvent>;\n    /** The class that traps and manages focus within the bottom sheet. */\n    private _focusTrap;\n    /** Element that was focused before the bottom sheet was opened. */\n    private _elementFocusedBeforeOpened;\n    /** Server-side rendering-compatible reference to the global document object. */\n    private _document;\n    /** Whether the component has been destroyed. */\n    private _destroyed;\n    constructor(_elementRef: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, _focusTrapFactory: FocusTrapFactory, breakpointObserver: BreakpointObserver, document: any, \n    /** The bottom sheet configuration. */\n    bottomSheetConfig: MatBottomSheetConfig);\n    /** Attach a component portal as content to this bottom sheet container. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    /** Attach a template portal as content to this bottom sheet container. */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    /** Begin animation of bottom sheet entrance into view. */\n    enter(): void;\n    /** Begin animation of the bottom sheet exiting from view. */\n    exit(): void;\n    ngOnDestroy(): void;\n    _onAnimationDone(event: AnimationEvent): void;\n    _onAnimationStart(event: AnimationEvent): void;\n    private _toggleClass;\n    private _validatePortalAttached;\n    private _setPanelClass;\n    /** Moves the focus inside the focus trap. */\n    private _trapFocus;\n    /** Restores focus to the element that was focused before the bottom sheet was opened. */\n    private _restoreFocus;\n    /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n    private _savePreviouslyFocusedElement;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/bottom-sheet/bottom-sheet-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatBottomSheetModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/bottom-sheet/bottom-sheet-ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Location } from '@angular/common';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { Observable } from 'rxjs';\nimport { MatBottomSheetContainer } from './bottom-sheet-container';\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport declare class MatBottomSheetRef<T = any, R = any> {\n    private _overlayRef;\n    /** Instance of the component making up the content of the bottom sheet. */\n    instance: T;\n    /**\n     * Instance of the component into which the bottom sheet content is projected.\n     * @docs-private\n     */\n    containerInstance: MatBottomSheetContainer;\n    /** Subject for notifying the user that the bottom sheet has been dismissed. */\n    private readonly _afterDismissed;\n    /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n    private readonly _afterOpened;\n    /** Result to be passed down to the `afterDismissed` stream. */\n    private _result;\n    constructor(containerInstance: MatBottomSheetContainer, _overlayRef: OverlayRef, _location?: Location);\n    /**\n     * Dismisses the bottom sheet.\n     * @param result Data to be passed back to the bottom sheet opener.\n     */\n    dismiss(result?: R): void;\n    /** Gets an observable that is notified when the bottom sheet is finished closing. */\n    afterDismissed(): Observable<R | undefined>;\n    /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n    afterOpened(): Observable<void>;\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick(): Observable<MouseEvent>;\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents(): Observable<KeyboardEvent>;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/bottom-sheet/bottom-sheet.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Overlay } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { Injector, TemplateRef, InjectionToken, OnDestroy } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { MatBottomSheetConfig } from './bottom-sheet-config';\nimport { MatBottomSheetRef } from './bottom-sheet-ref';\n/** Injection token that can be used to specify default bottom sheet options. */\nexport declare const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS: InjectionToken<MatBottomSheetConfig<any>>;\n/**\n * Service to trigger Material Design bottom sheets.\n */\nexport declare class MatBottomSheet implements OnDestroy {\n    private _overlay;\n    private _injector;\n    private _parentBottomSheet;\n    private _location?;\n    private _defaultOptions?;\n    private _bottomSheetRefAtThisLevel;\n    /** Reference to the currently opened bottom sheet. */\n    _openedBottomSheetRef: MatBottomSheetRef<any> | null;\n    constructor(_overlay: Overlay, _injector: Injector, _parentBottomSheet: MatBottomSheet, _location?: Location | undefined, _defaultOptions?: MatBottomSheetConfig<any> | undefined);\n    open<T, D = any, R = any>(component: ComponentType<T>, config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n    open<T, D = any, R = any>(template: TemplateRef<T>, config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n    /**\n     * Dismisses the currently-visible bottom sheet.\n     */\n    dismiss(): void;\n    ngOnDestroy(): void;\n    /**\n     * Attaches the bottom sheet container component to the overlay.\n     */\n    private _attachContainer;\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified bottom sheet config.\n     */\n    private _createOverlay;\n    /**\n     * Creates an injector to be used inside of a bottom sheet component.\n     * @param config Config that was used to create the bottom sheet.\n     * @param bottomSheetRef Reference to the bottom sheet.\n     */\n    private _createInjector;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/bottom-sheet/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/bottom-sheet/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './bottom-sheet-module';\nexport * from './bottom-sheet';\nexport * from './bottom-sheet-config';\nexport * from './bottom-sheet-container';\nexport * from './bottom-sheet-animations';\nexport * from './bottom-sheet-ref';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/button-toggle/button-toggle-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatButtonToggleModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/button-toggle/button-toggle.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList, InjectionToken } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanDisableRipple, CanDisableRippleCtor } from '@angular/material/core';\n/** Acceptable types for a button toggle. */\nexport declare type ToggleType = 'checkbox' | 'radio';\n/** Possible appearance styles for the button toggle. */\nexport declare type MatButtonToggleAppearance = 'legacy' | 'standard';\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n    appearance?: MatButtonToggleAppearance;\n}\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport declare const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS: InjectionToken<MatButtonToggleDefaultOptions>;\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport declare const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any;\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport declare class MatButtonToggleGroupMultiple {\n}\n/** Change event object emitted by MatButtonToggle. */\nexport declare class MatButtonToggleChange {\n    /** The MatButtonToggle that emits the event. */\n    source: MatButtonToggle;\n    /** The value assigned to the MatButtonToggle. */\n    value: any;\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source: MatButtonToggle, \n    /** The value assigned to the MatButtonToggle. */\n    value: any);\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nexport declare class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n    private _changeDetector;\n    private _vertical;\n    private _multiple;\n    private _disabled;\n    private _selectionModel;\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private _rawValue;\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    _controlValueAccessorChangeFn: (value: any) => void;\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    _onTouched: () => any;\n    /** Child button toggle buttons. */\n    _buttonToggles: QueryList<MatButtonToggle>;\n    /** The appearance for all the buttons in the group. */\n    appearance: MatButtonToggleAppearance;\n    /** `name` attribute for the underlying `input` element. */\n    name: string;\n    private _name;\n    /** Whether the toggle group is vertical. */\n    vertical: boolean;\n    /** Value of the toggle group. */\n    value: any;\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    readonly valueChange: EventEmitter<any>;\n    /** Selected button toggles in the group. */\n    readonly selected: MatButtonToggle | MatButtonToggle[];\n    /** Whether multiple button toggles can be selected. */\n    multiple: boolean;\n    /** Whether multiple button toggle group is disabled. */\n    disabled: boolean;\n    /** Event emitted when the group's value changes. */\n    readonly change: EventEmitter<MatButtonToggleChange>;\n    constructor(_changeDetector: ChangeDetectorRef, defaultOptions?: MatButtonToggleDefaultOptions);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent(): void;\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput?: boolean): void;\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle: MatButtonToggle): boolean;\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle: MatButtonToggle): boolean;\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private _setSelectionByValue;\n    /** Clears the selected toggles. */\n    private _clearSelection;\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private _selectValue;\n}\n/** @docs-private */\nexport declare class MatButtonToggleBase {\n}\nexport declare const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase;\n/** Single button inside of a toggle group. */\nexport declare class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit, CanDisableRipple, OnDestroy {\n    private _changeDetectorRef;\n    private _elementRef;\n    private _focusMonitor;\n    private _isSingleSelector;\n    private _checked;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    ariaLabel: string;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    ariaLabelledby: string | null;\n    /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n    _type: ToggleType;\n    _buttonElement: ElementRef<HTMLButtonElement>;\n    /** The parent button toggle group (exclusive selection). Optional. */\n    buttonToggleGroup: MatButtonToggleGroup;\n    /** Unique ID for the underlying `button` element. */\n    readonly buttonId: string;\n    /** The unique ID for this button toggle. */\n    id: string;\n    /** HTML's 'name' attribute used to group radios for unique selection. */\n    name: string;\n    /** MatButtonToggleGroup reads this to assign its own value. */\n    value: any;\n    /** Tabindex for the toggle. */\n    tabIndex: number | null;\n    /** The appearance style of the button. */\n    appearance: MatButtonToggleAppearance;\n    private _appearance;\n    /** Whether the button is checked. */\n    checked: boolean;\n    /** Whether the button is disabled. */\n    disabled: boolean;\n    private _disabled;\n    /** Event emitted when the group value changes. */\n    readonly change: EventEmitter<MatButtonToggleChange>;\n    constructor(toggleGroup: MatButtonToggleGroup, _changeDetectorRef: ChangeDetectorRef, _elementRef: ElementRef<HTMLElement>, _focusMonitor: FocusMonitor, defaultTabIndex: string, defaultOptions?: MatButtonToggleDefaultOptions);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /** Focuses the button. */\n    focus(): void;\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick(): void;\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/button-toggle/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/button-toggle/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './button-toggle';\nexport * from './button-toggle-module';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/button/button-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatButtonModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/button/button.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Platform } from '@angular/cdk/platform';\nimport { ElementRef, OnDestroy } from '@angular/core';\nimport { CanColor, CanDisable, CanDisableRipple, CanColorCtor, CanDisableCtor, CanDisableRippleCtor, MatRipple } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatButtonBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase;\n/**\n * Material design button.\n */\nexport declare class MatButton extends _MatButtonMixinBase implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n    /**\n     * @deprecated Platform checks for SSR are no longer needed\n     * @breaking-change 8.0.0\n     */\n    private _platform;\n    private _focusMonitor;\n    _animationMode?: string | undefined;\n    /** Whether the button is round. */\n    readonly isRoundButton: boolean;\n    /** Whether the button is icon button. */\n    readonly isIconButton: boolean;\n    /** Reference to the MatRipple instance of the button. */\n    ripple: MatRipple;\n    constructor(elementRef: ElementRef, \n    /**\n     * @deprecated Platform checks for SSR are no longer needed\n     * @breaking-change 8.0.0\n     */\n    _platform: Platform, _focusMonitor: FocusMonitor, _animationMode?: string | undefined);\n    ngOnDestroy(): void;\n    /** Focuses the button. */\n    focus(): void;\n    _getHostElement(): any;\n    _isRippleDisabled(): boolean;\n    /** Gets whether the button has one of the given attributes. */\n    _hasHostAttributes(...attributes: string[]): boolean;\n}\n/**\n * Raised Material design button.\n */\nexport declare class MatAnchor extends MatButton {\n    /** Tabindex of the button. */\n    tabIndex: number;\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef, animationMode?: string);\n    _haltDisabledEvents(event: Event): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/button/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/button/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './button-module';\nexport * from './button';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/card/card-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatCardModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/card/card.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nexport declare class MatCardContent {\n}\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nexport declare class MatCardTitle {\n}\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nexport declare class MatCardSubtitle {\n}\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nexport declare class MatCardActions {\n    /** Position of the actions inside the card. */\n    align: 'start' | 'end';\n}\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nexport declare class MatCardFooter {\n}\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nexport declare class MatCardImage {\n}\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nexport declare class MatCardSmImage {\n}\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nexport declare class MatCardMdImage {\n}\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nexport declare class MatCardLgImage {\n}\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nexport declare class MatCardXlImage {\n}\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nexport declare class MatCardAvatar {\n}\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\nexport declare class MatCard {\n}\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\nexport declare class MatCardHeader {\n}\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\nexport declare class MatCardTitleGroup {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/card/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/card/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './card';\nexport * from './card-module';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/checkbox/checkbox-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport declare type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport declare const MAT_CHECKBOX_CLICK_ACTION: InjectionToken<MatCheckboxClickAction>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/checkbox/checkbox-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatCheckboxModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/checkbox/checkbox-required-validator.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Provider } from '@angular/core';\nimport { CheckboxRequiredValidator } from '@angular/forms';\nexport declare const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider;\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nexport declare class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/checkbox/checkbox.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, AfterViewChecked } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, HasTabIndex, HasTabIndexCtor, MatRipple } from '@angular/material/core';\nimport { MatCheckboxClickAction } from './checkbox-config';\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport declare const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any;\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport declare enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init = 0,\n    /** The state representing the component when it's becoming checked. */\n    Checked = 1,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked = 2,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate = 3\n}\n/** Change event object emitted by MatCheckbox. */\nexport declare class MatCheckboxChange {\n    /** The source MatCheckbox of the event. */\n    source: MatCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n/** @docs-private */\nexport declare class MatCheckboxBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatCheckboxMixinBase: HasTabIndexCtor & CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatCheckboxBase;\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nexport declare class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor, AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n    private _changeDetectorRef;\n    private _focusMonitor;\n    private _ngZone;\n    private _clickAction;\n    _animationMode?: string | undefined;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    ariaLabel: string;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    ariaLabelledby: string | null;\n    private _uniqueId;\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    id: string;\n    /** Returns the unique id for the visual hidden input. */\n    readonly inputId: string;\n    /** Whether the checkbox is required. */\n    required: boolean;\n    private _required;\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    labelPosition: 'before' | 'after';\n    /** Name value will be applied to the input element if present */\n    name: string | null;\n    /** Event emitted when the checkbox's `checked` value changes. */\n    readonly change: EventEmitter<MatCheckboxChange>;\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    readonly indeterminateChange: EventEmitter<boolean>;\n    /** The value attribute of the native input element */\n    value: string;\n    /** The native `<input type=\"checkbox\">` element */\n    _inputElement: ElementRef<HTMLInputElement>;\n    /** Reference to the ripple instance of the checkbox. */\n    ripple: MatRipple;\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any;\n    private _currentAnimationClass;\n    private _currentCheckState;\n    private _controlValueAccessorChangeFn;\n    constructor(elementRef: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, _focusMonitor: FocusMonitor, _ngZone: NgZone, tabIndex: string, _clickAction: MatCheckboxClickAction, _animationMode?: string | undefined);\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    /**\n     * Whether the checkbox is checked.\n     */\n    checked: boolean;\n    private _checked;\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    disabled: any;\n    private _disabled;\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    indeterminate: boolean;\n    private _indeterminate;\n    _isRippleDisabled(): any;\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange(): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    _getAriaChecked(): 'true' | 'false' | 'mixed';\n    private _transitionCheckState;\n    private _emitChangeEvent;\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void;\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event): void;\n    /** Focuses the checkbox. */\n    focus(): void;\n    _onInteractionEvent(event: Event): void;\n    private _getAnimationClassForCheckStateTransition;\n    /**\n     * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n     * for the application.\n     */\n    private _calculateRippleRadius;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/checkbox/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/checkbox/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './checkbox';\nexport * from './checkbox-config';\nexport * from './checkbox-module';\nexport * from './checkbox-required-validator';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/chips/chip-default-options.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n    /** The list of key codes that will trigger a chipEnd event. */\n    separatorKeyCodes: number[] | Set<number>;\n}\n/** Injection token to be used to override the default options for the chips module. */\nexport declare const MAT_CHIPS_DEFAULT_OPTIONS: InjectionToken<MatChipsDefaultOptions>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/chips/chip-input.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, EventEmitter, OnChanges } from '@angular/core';\nimport { MatChipsDefaultOptions } from './chip-default-options';\nimport { MatChipList } from './chip-list';\nimport { MatChipTextControl } from './chip-text-control';\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n    /** The native `<input>` element that the event is being fired for. */\n    input: HTMLInputElement;\n    /** The value of the input. */\n    value: string;\n}\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nexport declare class MatChipInput implements MatChipTextControl, OnChanges {\n    protected _elementRef: ElementRef<HTMLInputElement>;\n    private _defaultOptions;\n    /** Whether the control is focused. */\n    focused: boolean;\n    _chipList: MatChipList;\n    /** Register input for chip list */\n    chipList: MatChipList;\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    addOnBlur: boolean;\n    _addOnBlur: boolean;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    separatorKeyCodes: number[] | Set<number>;\n    /** Emitted when a chip is to be added. */\n    chipEnd: EventEmitter<MatChipInputEvent>;\n    /** The input's placeholder text. */\n    placeholder: string;\n    /** Unique id for the input. */\n    id: string;\n    /** Whether the input is disabled. */\n    disabled: boolean;\n    private _disabled;\n    /** Whether the input is empty. */\n    readonly empty: boolean;\n    /** The native input element to which this directive is attached. */\n    protected _inputElement: HTMLInputElement;\n    constructor(_elementRef: ElementRef<HTMLInputElement>, _defaultOptions: MatChipsDefaultOptions);\n    ngOnChanges(): void;\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event?: KeyboardEvent): void;\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur(): void;\n    _focus(): void;\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event?: KeyboardEvent): void;\n    _onInput(): void;\n    /** Focuses the input. */\n    focus(): void;\n    /** Checks whether a keycode is one of the configured separators. */\n    private _isSeparatorKey;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/chips/chip-list.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { AfterContentInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { CanUpdateErrorState, CanUpdateErrorStateCtor, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Observable } from 'rxjs';\nimport { MatChip, MatChipEvent, MatChipSelectionChange } from './chip';\nimport { MatChipTextControl } from './chip-text-control';\n/** @docs-private */\nexport declare class MatChipListBase {\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    _parentForm: NgForm;\n    _parentFormGroup: FormGroupDirective;\n    /** @docs-private */\n    ngControl: NgControl;\n    constructor(_defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, \n    /** @docs-private */\n    ngControl: NgControl);\n}\nexport declare const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase;\n/** Change event object that is emitted when the chip list value has changed. */\nexport declare class MatChipListChange {\n    /** Chip list that emitted the event. */\n    source: MatChipList;\n    /** Value of the chip list when the event was emitted. */\n    value: any;\n    constructor(\n    /** Chip list that emitted the event. */\n    source: MatChipList, \n    /** Value of the chip list when the event was emitted. */\n    value: any);\n}\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\nexport declare class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>, ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n    protected _elementRef: ElementRef<HTMLElement>;\n    private _changeDetectorRef;\n    private _dir;\n    /** @docs-private */\n    ngControl: NgControl;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly controlType: string;\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     */\n    private _lastDestroyedChipIndex;\n    /** Subject that emits when the component has been destroyed. */\n    private _destroyed;\n    /** Subscription to focus changes in the chips. */\n    private _chipFocusSubscription;\n    /** Subscription to blur changes in the chips. */\n    private _chipBlurSubscription;\n    /** Subscription to selection changes in chips. */\n    private _chipSelectionSubscription;\n    /** Subscription to remove changes in chips. */\n    private _chipRemoveSubscription;\n    /** The chip input to add more chips */\n    protected _chipInput: MatChipTextControl;\n    /** Uid of the chip list */\n    _uid: string;\n    /** The aria-describedby attribute on the chip list for improved a11y. */\n    _ariaDescribedby: string;\n    /** Tab index for the chip list. */\n    _tabIndex: number;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n    _userTabIndex: number | null;\n    /** The FocusKeyManager which handles focus. */\n    _keyManager: FocusKeyManager<MatChip>;\n    /** Function when touched */\n    _onTouched: () => void;\n    /** Function when changed */\n    _onChange: (value: any) => void;\n    _selectionModel: SelectionModel<MatChip>;\n    /** The array of selected chips inside chip list. */\n    readonly selected: MatChip[] | MatChip;\n    /** The ARIA role applied to the chip list. */\n    readonly role: string | null;\n    /** An object used to control when error messages are shown. */\n    errorStateMatcher: ErrorStateMatcher;\n    /** Whether the user should be allowed to select multiple chips. */\n    multiple: boolean;\n    private _multiple;\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    compareWith: (o1: any, o2: any) => boolean;\n    private _compareWith;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    value: any;\n    protected _value: any;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly id: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    required: boolean;\n    protected _required: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    placeholder: string;\n    protected _placeholder: string;\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    readonly focused: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly empty: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly shouldLabelFloat: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    disabled: boolean;\n    protected _disabled: boolean;\n    /** Orientation of the chip list. */\n    ariaOrientation: 'horizontal' | 'vertical';\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n    selectable: boolean;\n    protected _selectable: boolean;\n    tabIndex: number;\n    /** Combined stream of all of the child chips' selection change events. */\n    readonly chipSelectionChanges: Observable<MatChipSelectionChange>;\n    /** Combined stream of all of the child chips' focus change events. */\n    readonly chipFocusChanges: Observable<MatChipEvent>;\n    /** Combined stream of all of the child chips' blur change events. */\n    readonly chipBlurChanges: Observable<MatChipEvent>;\n    /** Combined stream of all of the child chips' remove change events. */\n    readonly chipRemoveChanges: Observable<MatChipEvent>;\n    /** Event emitted when the selected chip list value has been changed by the user. */\n    readonly change: EventEmitter<MatChipListChange>;\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    readonly valueChange: EventEmitter<any>;\n    /** The chip components contained within this chip list. */\n    chips: QueryList<MatChip>;\n    constructor(_elementRef: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, _dir: Directionality, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _defaultErrorStateMatcher: ErrorStateMatcher, \n    /** @docs-private */\n    ngControl: NgControl);\n    ngAfterContentInit(): void;\n    ngOnInit(): void;\n    ngDoCheck(): void;\n    ngOnDestroy(): void;\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement: MatChipTextControl): void;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids: string[]): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: () => void): void;\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event: MouseEvent): void;\n    /**\n     * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(): void;\n    /** Attempt to focus an input if we have one. */\n    _focusInput(): void;\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event: KeyboardEvent): void;\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    protected _updateTabIndex(): void;\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    protected _updateFocusForDestroyedChips(): void;\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    private _isValidIndex;\n    private _isInputEmpty;\n    _setSelectionByValue(value: any, isUserInput?: boolean): void;\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    private _selectValue;\n    private _initializeSelection;\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    private _clearSelection;\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private _sortValues;\n    /** Emits change event to set the model value. */\n    private _propagateChanges;\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur(): void;\n    /** Mark the field as touched */\n    _markAsTouched(): void;\n    private _resetChips;\n    private _dropSubscriptions;\n    /** Listens to user-generated selection events on each chip. */\n    private _listenToChipsSelection;\n    /** Listens to user-generated selection events on each chip. */\n    private _listenToChipsFocus;\n    private _listenToChipsRemoved;\n    /** Checks whether an event comes from inside a chip element. */\n    private _originatesFromChip;\n    /** Checks whether any of the chips is focused. */\n    private _hasFocusedChip;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/chips/chip-text-control.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Interface for a text control that is used to drive interaction with a mat-chip-list. */\nexport interface MatChipTextControl {\n    /** Unique identifier for the text control. */\n    id: string;\n    /** The text control's placeholder text. */\n    placeholder: string;\n    /** Whether the text control has browser focus. */\n    focused: boolean;\n    /** Whether the text control is empty. */\n    empty: boolean;\n    /** Focuses the text control. */\n    focus(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/chips/chip.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusableOption } from '@angular/cdk/a11y';\nimport { Platform } from '@angular/cdk/platform';\nimport { ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, RippleConfig, RippleGlobalOptions, RippleTarget } from '@angular/material/core';\nimport { Subject } from 'rxjs';\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n    /** The chip the event was fired on. */\n    chip: MatChip;\n}\n/** Event object emitted by MatChip when selected or deselected. */\nexport declare class MatChipSelectionChange {\n    /** Reference to the chip that emitted the event. */\n    source: MatChip;\n    /** Whether the chip that emitted the event is selected. */\n    selected: boolean;\n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput: boolean;\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source: MatChip, \n    /** Whether the chip that emitted the event is selected. */\n    selected: boolean, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput?: boolean);\n}\n/** @docs-private */\nexport declare class MatChipBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase;\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nexport declare class MatChipAvatar {\n}\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nexport declare class MatChipTrailingIcon {\n}\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nexport declare class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor, CanDisable, CanDisableRipple, RippleTarget {\n    _elementRef: ElementRef;\n    private _ngZone;\n    /** Reference to the RippleRenderer for the chip. */\n    private _chipRipple;\n    /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n    private _ripplesGloballyDisabled;\n    /**\n     * Ripple configuration for ripples that are launched on pointer down.\n     * @docs-private\n     */\n    rippleConfig: RippleConfig;\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    readonly rippleDisabled: boolean;\n    /** Whether the chip has focus. */\n    _hasFocus: boolean;\n    /** Whether the chip list is selectable */\n    chipListSelectable: boolean;\n    /** The chip avatar */\n    avatar: MatChipAvatar;\n    /** The chip's trailing icon. */\n    trailingIcon: MatChipTrailingIcon;\n    /** The chip's remove toggler. */\n    removeIcon: MatChipRemove;\n    /** Whether the chip is selected. */\n    selected: boolean;\n    protected _selected: boolean;\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    value: any;\n    protected _value: any;\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to it's selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if it's parent chip list is\n     * not selectable.\n     */\n    selectable: boolean;\n    protected _selectable: boolean;\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    removable: boolean;\n    protected _removable: boolean;\n    /** Emits when the chip is focused. */\n    readonly _onFocus: Subject<MatChipEvent>;\n    /** Emits when the chip is blured. */\n    readonly _onBlur: Subject<MatChipEvent>;\n    /** Emitted when the chip is selected or deselected. */\n    readonly selectionChange: EventEmitter<MatChipSelectionChange>;\n    /** Emitted when the chip is destroyed. */\n    readonly destroyed: EventEmitter<MatChipEvent>;\n    /** Emitted when a chip is to be removed. */\n    readonly removed: EventEmitter<MatChipEvent>;\n    /** The ARIA selected applied to the chip. */\n    readonly ariaSelected: string | null;\n    constructor(_elementRef: ElementRef, _ngZone: NgZone, platform: Platform, globalOptions: RippleGlobalOptions);\n    _addHostClassName(): void;\n    ngOnDestroy(): void;\n    /** Selects the chip. */\n    select(): void;\n    /** Deselects the chip. */\n    deselect(): void;\n    /** Select this chip and emit selected event */\n    selectViaInteraction(): void;\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput?: boolean): boolean;\n    /** Allows for programmatic focusing of the chip. */\n    focus(): void;\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove(): void;\n    /** Handles click events on the chip. */\n    _handleClick(event: Event): void;\n    /** Handle custom key presses. */\n    _handleKeydown(event: KeyboardEvent): void;\n    _blur(): void;\n    private _dispatchSelectionChange;\n}\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nexport declare class MatChipRemove {\n    protected _parentChip: MatChip;\n    constructor(_parentChip: MatChip);\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event: Event): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/chips/chips-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatChipsModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/chips/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/chips/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './chips-module';\nexport * from './chip-list';\nexport * from './chip';\nexport * from './chip-input';\nexport * from './chip-default-options';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/animation/animation.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nexport declare class AnimationCurves {\n    static STANDARD_CURVE: string;\n    static DECELERATION_CURVE: string;\n    static ACCELERATION_CURVE: string;\n    static SHARP_CURVE: string;\n}\n/** @docs-private */\nexport declare class AnimationDurations {\n    static COMPLEX: string;\n    static ENTERING: string;\n    static EXITING: string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/common-behaviors/color.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Constructor } from './constructor';\nimport { ElementRef } from '@angular/core';\n/** @docs-private */\nexport interface CanColor {\n    /** Theme color palette for the component. */\n    color: ThemePalette;\n}\n/** @docs-private */\nexport declare type CanColorCtor = Constructor<CanColor>;\n/** @docs-private */\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n/** Possible color palette values. */\nexport declare type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/** Mixin to augment a directive with a `color` property. */\nexport declare function mixinColor<T extends Constructor<HasElementRef>>(base: T, defaultColor?: ThemePalette): CanColorCtor & T;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/common-behaviors/common-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { HammerLoader } from '@angular/platform-browser';\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport declare const MATERIAL_SANITY_CHECKS: InjectionToken<boolean>;\n/** @docs-private */\nexport declare function MATERIAL_SANITY_CHECKS_FACTORY(): boolean;\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\nexport declare class MatCommonModule {\n    private _sanityChecksEnabled;\n    private _hammerLoader?;\n    /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n    private _hasDoneGlobalChecks;\n    /** Whether we've already checked for HammerJs availability. */\n    private _hasCheckedHammer;\n    /** Reference to the global `document` object. */\n    private _document;\n    /** Reference to the global 'window' object. */\n    private _window;\n    constructor(_sanityChecksEnabled: boolean, _hammerLoader?: HammerLoader | undefined);\n    /** Whether any sanity checks are enabled */\n    private _areChecksEnabled;\n    /** Whether the code is running in tests. */\n    private _isTestEnv;\n    private _checkDoctypeIsDefined;\n    private _checkThemeIsPresent;\n    /** Checks whether HammerJS is available. */\n    _checkHammerIsAvailable(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/common-behaviors/constructor.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nexport declare type Constructor<T> = new (...args: any[]) => T;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/common-behaviors/disable-ripple.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Constructor } from './constructor';\n/** @docs-private */\nexport interface CanDisableRipple {\n    /** Whether ripples are disabled. */\n    disableRipple: boolean;\n}\n/** @docs-private */\nexport declare type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport declare function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/common-behaviors/disabled.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Constructor } from './constructor';\n/** @docs-private */\nexport interface CanDisable {\n    /** Whether the component is disabled. */\n    disabled: boolean;\n}\n/** @docs-private */\nexport declare type CanDisableCtor = Constructor<CanDisable>;\n/** Mixin to augment a directive with a `disabled` property. */\nexport declare function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/common-behaviors/error-state.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { ErrorStateMatcher } from '../error/error-options';\nimport { Constructor } from './constructor';\n/** @docs-private */\nexport interface CanUpdateErrorState {\n    updateErrorState(): void;\n    readonly stateChanges: Subject<void>;\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n}\n/** @docs-private */\nexport declare type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport declare function mixinErrorState<T extends Constructor<HasErrorState>>(base: T): CanUpdateErrorStateCtor & T;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/common-behaviors/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { MatCommonModule, MATERIAL_SANITY_CHECKS } from './common-module';\nexport { CanDisable, CanDisableCtor, mixinDisabled } from './disabled';\nexport { CanColor, CanColorCtor, mixinColor, ThemePalette } from './color';\nexport { CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple } from './disable-ripple';\nexport { HasTabIndex, HasTabIndexCtor, mixinTabIndex } from './tabindex';\nexport { CanUpdateErrorState, CanUpdateErrorStateCtor, mixinErrorState } from './error-state';\nexport { HasInitialized, HasInitializedCtor, mixinInitialized } from './initialized';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/common-behaviors/initialized.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { Constructor } from './constructor';\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n    /** Stream that emits once during the directive/component's ngOnInit. */\n    initialized: Observable<void>;\n    /**\n     * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n     * the directive has been initialized.\n     * @docs-private\n     */\n    _markInitialized: () => void;\n}\n/** @docs-private */\nexport declare type HasInitializedCtor = Constructor<HasInitialized>;\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport declare function mixinInitialized<T extends Constructor<{}>>(base: T): HasInitializedCtor & T;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/common-behaviors/tabindex.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n/** @docs-private */\nexport interface HasTabIndex {\n    /** Tabindex of the component. */\n    tabIndex: number;\n}\n/** @docs-private */\nexport declare type HasTabIndexCtor = Constructor<HasTabIndex>;\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport declare function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex?: number): HasTabIndexCtor & T;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/datetime/date-adapter.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport declare const MAT_DATE_LOCALE: InjectionToken<string>;\n/** @docs-private */\nexport declare function MAT_DATE_LOCALE_FACTORY(): string;\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport declare const MAT_DATE_LOCALE_PROVIDER: {\n    provide: InjectionToken<string>;\n    useExisting: InjectionToken<string>;\n};\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport declare abstract class DateAdapter<D> {\n    /** The locale to use for all dates. */\n    protected locale: any;\n    /** A stream that emits when the locale changes. */\n    readonly localeChanges: Observable<void>;\n    protected _localeChanges: Subject<void>;\n    /**\n     * Gets the year component of the given date.\n     * @param date The date to extract the year from.\n     * @returns The year component.\n     */\n    abstract getYear(date: D): number;\n    /**\n     * Gets the month component of the given date.\n     * @param date The date to extract the month from.\n     * @returns The month component (0-indexed, 0 = January).\n     */\n    abstract getMonth(date: D): number;\n    /**\n     * Gets the date of the month component of the given date.\n     * @param date The date to extract the date of the month from.\n     * @returns The month component (1-indexed, 1 = first of month).\n     */\n    abstract getDate(date: D): number;\n    /**\n     * Gets the day of the week component of the given date.\n     * @param date The date to extract the day of the week from.\n     * @returns The month component (0-indexed, 0 = Sunday).\n     */\n    abstract getDayOfWeek(date: D): number;\n    /**\n     * Gets a list of names for the months.\n     * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n     * @returns An ordered list of all month names, starting with January.\n     */\n    abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n    /**\n     * Gets a list of names for the dates of the month.\n     * @returns An ordered list of all date of the month names, starting with '1'.\n     */\n    abstract getDateNames(): string[];\n    /**\n     * Gets a list of names for the days of the week.\n     * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n     * @returns An ordered list of all weekday names, starting with Sunday.\n     */\n    abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n    /**\n     * Gets the name for the year of the given date.\n     * @param date The date to get the year name for.\n     * @returns The name of the given year (e.g. '2017').\n     */\n    abstract getYearName(date: D): string;\n    /**\n     * Gets the first day of the week.\n     * @returns The first day of the week (0-indexed, 0 = Sunday).\n     */\n    abstract getFirstDayOfWeek(): number;\n    /**\n     * Gets the number of days in the month of the given date.\n     * @param date The date whose month should be checked.\n     * @returns The number of days in the month of the given date.\n     */\n    abstract getNumDaysInMonth(date: D): number;\n    /**\n     * Clones the given date.\n     * @param date The date to clone\n     * @returns A new date equal to the given date.\n     */\n    abstract clone(date: D): D;\n    /**\n     * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n     * month and date.\n     * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n     * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n     * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n     * @returns The new date, or null if invalid.\n     */\n    abstract createDate(year: number, month: number, date: number): D;\n    /**\n     * Gets today's date.\n     * @returns Today's date.\n     */\n    abstract today(): D;\n    /**\n     * Parses a date from a user-provided value.\n     * @param value The value to parse.\n     * @param parseFormat The expected format of the value being parsed\n     *     (type is implementation-dependent).\n     * @returns The parsed date.\n     */\n    abstract parse(value: any, parseFormat: any): D | null;\n    /**\n     * Formats a date as a string according to the given format.\n     * @param date The value to format.\n     * @param displayFormat The format to use to display the date as a string.\n     * @returns The formatted date string.\n     */\n    abstract format(date: D, displayFormat: any): string;\n    /**\n     * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n     * calendar for each year and then finding the closest date in the new month. For example when\n     * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n     * @param date The date to add years to.\n     * @param years The number of years to add (may be negative).\n     * @returns A new date equal to the given one with the specified number of years added.\n     */\n    abstract addCalendarYears(date: D, years: number): D;\n    /**\n     * Adds the given number of months to the date. Months are counted as if flipping a page on the\n     * calendar for each month and then finding the closest date in the new month. For example when\n     * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n     * @param date The date to add months to.\n     * @param months The number of months to add (may be negative).\n     * @returns A new date equal to the given one with the specified number of months added.\n     */\n    abstract addCalendarMonths(date: D, months: number): D;\n    /**\n     * Adds the given number of days to the date. Days are counted as if moving one cell on the\n     * calendar for each day.\n     * @param date The date to add days to.\n     * @param days The number of days to add (may be negative).\n     * @returns A new date equal to the given one with the specified number of days added.\n     */\n    abstract addCalendarDays(date: D, days: number): D;\n    /**\n     * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n     * This method is used to generate date strings that are compatible with native HTML attributes\n     * such as the `min` or `max` attribute of an `<input>`.\n     * @param date The date to get the ISO date string for.\n     * @returns The ISO date string date string.\n     */\n    abstract toIso8601(date: D): string;\n    /**\n     * Checks whether the given object is considered a date instance by this DateAdapter.\n     * @param obj The object to check\n     * @returns Whether the object is a date instance.\n     */\n    abstract isDateInstance(obj: any): boolean;\n    /**\n     * Checks whether the given date is valid.\n     * @param date The date to check.\n     * @returns Whether the date is valid.\n     */\n    abstract isValid(date: D): boolean;\n    /**\n     * Gets date instance that is not valid.\n     * @returns An invalid date.\n     */\n    abstract invalid(): D;\n    /**\n     * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n     * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n     * string). The default implementation does not allow any deserialization, it simply checks that\n     * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n     * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n     * support passing values from your backend directly to these properties by overriding this method\n     * to also deserialize the format used by your backend.\n     * @param value The value to be deserialized into a date object.\n     * @returns The deserialized date object, either a valid date, null if the value can be\n     *     deserialized into a null date (e.g. the empty string), or an invalid date.\n     */\n    deserialize(value: any): D | null;\n    /**\n     * Sets the locale used for all dates.\n     * @param locale The new locale.\n     */\n    setLocale(locale: any): void;\n    /**\n     * Compares two dates.\n     * @param first The first date to compare.\n     * @param second The second date to compare.\n     * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n     *     a number greater than 0 if the first date is later.\n     */\n    compareDate(first: D, second: D): number;\n    /**\n     * Checks if two dates are equal.\n     * @param first The first date to check.\n     * @param second The second date to check.\n     * @returns Whether the two dates are equal.\n     *     Null dates are considered equal to other null dates.\n     */\n    sameDate(first: D | null, second: D | null): boolean;\n    /**\n     * Clamp the given date between min and max dates.\n     * @param date The date to clamp.\n     * @param min The minimum value to allow. If null or omitted no min is enforced.\n     * @param max The maximum value to allow. If null or omitted no max is enforced.\n     * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n     *     otherwise `date`.\n     */\n    clampDate(date: D, min?: D | null, max?: D | null): D;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/datetime/date-formats.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nexport declare type MatDateFormats = {\n    parse: {\n        dateInput: any;\n    };\n    display: {\n        dateInput: any;\n        monthYearLabel: any;\n        dateA11yLabel: any;\n        monthYearA11yLabel: any;\n    };\n};\nexport declare const MAT_DATE_FORMATS: InjectionToken<MatDateFormats>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/datetime/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\nexport declare class NativeDateModule {\n}\nexport declare class MatNativeDateModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/datetime/native-date-adapter.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { DateAdapter } from './date-adapter';\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\nexport declare class NativeDateAdapter extends DateAdapter<Date> {\n    /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n    private readonly _clampDate;\n    /**\n     * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n     * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n     * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n     * will produce `'8/13/1800'`.\n     *\n     * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n     * getting the string representation of a Date object from it's utc representation. We're keeping\n     * it here for sometime, just for precaution, in case we decide to revert some of these changes\n     * though.\n     */\n    useUtcForDisplay: boolean;\n    constructor(matDateLocale: string, platform: Platform);\n    getYear(date: Date): number;\n    getMonth(date: Date): number;\n    getDate(date: Date): number;\n    getDayOfWeek(date: Date): number;\n    getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n    getDateNames(): string[];\n    getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n    getYearName(date: Date): string;\n    getFirstDayOfWeek(): number;\n    getNumDaysInMonth(date: Date): number;\n    clone(date: Date): Date;\n    createDate(year: number, month: number, date: number): Date;\n    today(): Date;\n    parse(value: any): Date | null;\n    format(date: Date, displayFormat: Object): string;\n    addCalendarYears(date: Date, years: number): Date;\n    addCalendarMonths(date: Date, months: number): Date;\n    addCalendarDays(date: Date, days: number): Date;\n    toIso8601(date: Date): string;\n    /**\n     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n     * invalid date for all other values.\n     */\n    deserialize(value: any): Date | null;\n    isDateInstance(obj: any): boolean;\n    isValid(date: Date): boolean;\n    invalid(): Date;\n    /** Creates a date but allows the month and date to overflow. */\n    private _createDateWithOverflow;\n    /**\n     * Pads a number to make it two digits.\n     * @param n The number to pad.\n     * @returns The padded number.\n     */\n    private _2digit;\n    /**\n     * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n     * other browsers do not. We remove them to make output consistent and because they interfere with\n     * date parsing.\n     * @param str The string to strip direction characters from.\n     * @returns The stripped string.\n     */\n    private _stripDirectionalityCharacters;\n    /**\n     * When converting Date object to string, javascript built-in functions may return wrong\n     * results because it applies its internal DST rules. The DST rules around the world change\n     * very frequently, and the current valid rule is not always valid in previous years though.\n     * We work around this problem building a new Date object which has its internal UTC\n     * representation with the local date and time.\n     * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n     *    timeZone set to 'utc' to work fine.\n     * @param date Date from which we want to get the string representation according to dtf\n     * @returns A Date object with its UTC representation based on the passed in date info\n     */\n    private _format;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/datetime/native-date-formats.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MatDateFormats } from './date-formats';\nexport declare const MAT_NATIVE_DATE_FORMATS: MatDateFormats;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/error/error-options.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n/** Error state matcher that matches when a control is invalid and dirty. */\nexport declare class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;\n}\n/** Provider that defines how form controls behave with regards to displaying error messages. */\nexport declare class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/gestures/gesture-annotations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Stripped-down HammerJS annotations to be used within Material, which are necessary,\n * because HammerJS is an optional dependency. For the full annotations see:\n * https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/hammerjs/index.d.ts\n */\n/** @docs-private */\nexport interface HammerInput {\n    preventDefault: () => {};\n    deltaX: number;\n    deltaY: number;\n    center: {\n        x: number;\n        y: number;\n    };\n}\n/** @docs-private */\nexport interface HammerStatic {\n    new (element: HTMLElement | SVGElement, options?: any): HammerManager;\n    Pan: Recognizer;\n    Swipe: Recognizer;\n    Press: Recognizer;\n}\n/** @docs-private */\nexport interface Recognizer {\n    new (options?: any): Recognizer;\n    recognizeWith(otherRecognizer: Recognizer | string): Recognizer;\n}\n/** @docs-private */\nexport interface RecognizerStatic {\n    new (options?: any): Recognizer;\n}\n/** @docs-private */\nexport interface HammerInstance {\n    on(eventName: string, callback: Function): void;\n    off(eventName: string, callback: Function): void;\n}\n/** @docs-private */\nexport interface HammerManager {\n    add(recogniser: Recognizer | Recognizer[]): Recognizer;\n    set(options: any): HammerManager;\n    emit(event: string, data: any): void;\n    off(events: string, handler?: Function): void;\n    on(events: string, handler: Function): void;\n}\n/** @docs-private */\nexport interface HammerOptions {\n    cssProps?: {\n        [key: string]: string;\n    };\n    domEvents?: boolean;\n    enable?: boolean | ((manager: HammerManager) => boolean);\n    preset?: any[];\n    touchAction?: string;\n    recognizers?: any[];\n    inputClass?: HammerInput;\n    inputTarget?: EventTarget;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/gestures/gesture-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { HammerGestureConfig } from '@angular/platform-browser';\nimport { MatCommonModule } from '../common-behaviors/common-module';\nimport { HammerInstance, HammerOptions } from './gesture-annotations';\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport declare const MAT_HAMMER_OPTIONS: InjectionToken<HammerOptions>;\n/** Adjusts configuration of our gesture library, Hammer. */\nexport declare class GestureConfig extends HammerGestureConfig {\n    private _hammerOptions?;\n    /** List of new event names to add to the gesture support list */\n    events: string[];\n    constructor(_hammerOptions?: HammerOptions | undefined, commonModule?: MatCommonModule);\n    /**\n     * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n     *\n     * Our gesture names come from the Material Design gestures spec:\n     * https://material.io/design/#gestures-touch-mechanics\n     *\n     * More information on default recognizers can be found in Hammer docs:\n     * http://hammerjs.github.io/recognizer-pan/\n     * http://hammerjs.github.io/recognizer-press/\n     *\n     * @param element Element to which to assign the new HammerJS gestures.\n     * @returns Newly-created HammerJS instance.\n     */\n    buildHammer(element: HTMLElement): HammerInstance;\n    /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n    private _createRecognizer;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { MATERIAL_SANITY_CHECKS_FACTORY as ɵa1 } from './common-behaviors/common-module';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/label/label-options.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/** InjectionToken that can be used to specify the global label options. */\nexport declare const MAT_LABEL_GLOBAL_OPTIONS: InjectionToken<LabelOptions>;\n/** Type for the available floatLabel values. */\nexport declare type FloatLabelType = 'always' | 'never' | 'auto';\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/line/line.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, QueryList } from '@angular/core';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\nexport declare class MatLine {\n}\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport declare function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>): void;\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport declare class MatLineSetter {\n    constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>);\n}\nexport declare class MatLineModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/option/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatOptionModule {\n}\nexport * from './option';\nexport * from './optgroup';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/option/optgroup.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CanDisable, CanDisableCtor } from '../common-behaviors/disabled';\n/** @docs-private */\nexport declare class MatOptgroupBase {\n}\nexport declare const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase;\n/**\n * Component that is used to group instances of `mat-option`.\n */\nexport declare class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    label: string;\n    /** Unique id for the underlying label. */\n    _labelId: string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/option/option.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterViewChecked, ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, OnDestroy, QueryList } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MatOptgroup } from './optgroup';\n/** Event object emitted by MatOption when selected or deselected. */\nexport declare class MatOptionSelectionChange {\n    /** Reference to the option that emitted the event. */\n    source: MatOption;\n    /** Whether the change in the option's value was a result of a user action. */\n    isUserInput: boolean;\n    constructor(\n    /** Reference to the option that emitted the event. */\n    source: MatOption, \n    /** Whether the change in the option's value was a result of a user action. */\n    isUserInput?: boolean);\n}\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n    disableRipple?: boolean;\n    multiple?: boolean;\n}\n/**\n * Injection token used to provide the parent component to options.\n */\nexport declare const MAT_OPTION_PARENT_COMPONENT: InjectionToken<MatOptionParentComponent>;\n/**\n * Single option inside of a `<mat-select>` element.\n */\nexport declare class MatOption implements AfterViewChecked, OnDestroy {\n    private _element;\n    private _changeDetectorRef;\n    private _parent;\n    readonly group: MatOptgroup;\n    private _selected;\n    private _active;\n    private _disabled;\n    private _mostRecentViewValue;\n    /** Whether the wrapping component is in multiple selection mode. */\n    readonly multiple: boolean | undefined;\n    /** Whether or not the option is currently selected. */\n    readonly selected: boolean;\n    /** The form value of the option. */\n    value: any;\n    /** The unique ID of the option. */\n    id: string;\n    /** Whether the option is disabled. */\n    disabled: any;\n    /** Whether ripples for the option are disabled. */\n    readonly disableRipple: boolean | undefined;\n    /** Event emitted when the option is selected or deselected. */\n    readonly onSelectionChange: EventEmitter<MatOptionSelectionChange>;\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly _stateChanges: Subject<void>;\n    constructor(_element: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, _parent: MatOptionParentComponent, group: MatOptgroup);\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    readonly active: boolean;\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    readonly viewValue: string;\n    /** Selects the option. */\n    select(): void;\n    /** Deselects the option. */\n    deselect(): void;\n    /** Sets focus onto this option. */\n    focus(): void;\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void;\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void;\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string;\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event: KeyboardEvent): void;\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction(): void;\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    _getTabIndex(): string;\n    /** Gets the host DOM element. */\n    _getHostElement(): HTMLElement;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    /** Emits the selection change event. */\n    private _emitSelectionChangeEvent;\n}\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport declare function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>, optionGroups: QueryList<MatOptgroup>): number;\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport declare function _getOptionScrollPosition(optionIndex: number, optionHeight: number, currentScrollPosition: number, panelHeight: number): number;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './animation/animation';\nexport * from './common-behaviors/index';\nexport * from './datetime/index';\nexport * from './error/error-options';\nexport * from './gestures/gesture-annotations';\nexport * from './gestures/gesture-config';\nexport * from './line/line';\nexport * from './option/index';\nexport * from './label/label-options';\nexport * from './ripple/index';\nexport * from './selection/index';\nexport * from './testing/month-constants';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/ripple/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\nexport declare class MatRippleModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/ripple/ripple-ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { RippleConfig, RippleRenderer } from './ripple-renderer';\n/** Possible states for a ripple element. */\nexport declare enum RippleState {\n    FADING_IN = 0,\n    VISIBLE = 1,\n    FADING_OUT = 2,\n    HIDDEN = 3\n}\n/**\n * Reference to a previously launched ripple element.\n */\nexport declare class RippleRef {\n    private _renderer;\n    /** Reference to the ripple HTML element. */\n    element: HTMLElement;\n    /** Ripple configuration used for the ripple. */\n    config: RippleConfig;\n    /** Current state of the ripple. */\n    state: RippleState;\n    constructor(_renderer: RippleRenderer, \n    /** Reference to the ripple HTML element. */\n    element: HTMLElement, \n    /** Ripple configuration used for the ripple. */\n    config: RippleConfig);\n    /** Fades out the ripple element. */\n    fadeOut(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/ripple/ripple-renderer.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, NgZone } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { RippleRef } from './ripple-ref';\nexport declare type RippleConfig = {\n    color?: string;\n    centered?: boolean;\n    radius?: number;\n    persistent?: boolean;\n    animation?: RippleAnimationConfig;\n    terminateOnPointerUp?: boolean;\n};\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n    /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n    enterDuration?: number;\n    /** Duration in milliseconds for the exit animation (fade-out). */\n    exitDuration?: number;\n}\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n    /** Configuration for ripples that are launched on pointer down. */\n    rippleConfig: RippleConfig;\n    /** Whether ripples on pointer down should be disabled. */\n    rippleDisabled: boolean;\n}\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport declare const defaultRippleAnimationConfig: {\n    enterDuration: number;\n    exitDuration: number;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport declare class RippleRenderer {\n    private _target;\n    private _ngZone;\n    /** Element where the ripples are being added to. */\n    private _containerElement;\n    /** Element which triggers the ripple elements on mouse events. */\n    private _triggerElement;\n    /** Whether the pointer is currently down or not. */\n    private _isPointerDown;\n    /** Events to be registered on the trigger element. */\n    private _triggerEvents;\n    /** Set of currently active ripple references. */\n    private _activeRipples;\n    /** Latest non-persistent ripple that was triggered. */\n    private _mostRecentTransientRipple;\n    /** Time in milliseconds when the last touchstart event happened. */\n    private _lastTouchStartEvent;\n    /**\n     * Cached dimensions of the ripple container. Set when the first\n     * ripple is shown and cleared once no more ripples are visible.\n     */\n    private _containerRect;\n    constructor(_target: RippleTarget, _ngZone: NgZone, elementRef: ElementRef<HTMLElement>, platform: Platform);\n    /**\n     * Fades in a ripple at the given coordinates.\n     * @param x Coordinate within the element, along the X axis at which to start the ripple.\n     * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n     * @param config Extra ripple options.\n     */\n    fadeInRipple(x: number, y: number, config?: RippleConfig): RippleRef;\n    /** Fades out a ripple reference. */\n    fadeOutRipple(rippleRef: RippleRef): void;\n    /** Fades out all currently active ripples. */\n    fadeOutAll(): void;\n    /** Sets up the trigger event listeners */\n    setupTriggerEvents(element: HTMLElement): void;\n    /** Function being called whenever the trigger is being pressed using mouse. */\n    private onMousedown;\n    /** Function being called whenever the trigger is being pressed using touch. */\n    private onTouchStart;\n    /** Function being called whenever the trigger is being released. */\n    private onPointerUp;\n    /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n    private runTimeoutOutsideZone;\n    /** Removes previously registered event listeners from the trigger element. */\n    _removeTriggerEvents(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/ripple/ripple.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { ElementRef, InjectionToken, NgZone, OnDestroy, OnInit } from '@angular/core';\nimport { RippleRef } from './ripple-ref';\nimport { RippleAnimationConfig, RippleConfig, RippleTarget } from './ripple-renderer';\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n    /**\n     * Whether ripples should be disabled. Ripples can be still launched manually by using\n     * the `launch()` method. Therefore focus indicators will still show up.\n     */\n    disabled?: boolean;\n    /**\n     * Configuration for the animation duration of the ripples. There are two phases with different\n     * durations for the ripples. The animation durations will be overwritten if the\n     * `NoopAnimationsModule` is being used.\n     */\n    animation?: RippleAnimationConfig;\n    /**\n     * Whether ripples should start fading out immediately after the mouse our touch is released. By\n     * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n     */\n    terminateOnPointerUp?: boolean;\n}\n/** Injection token that can be used to specify the global ripple options. */\nexport declare const MAT_RIPPLE_GLOBAL_OPTIONS: InjectionToken<RippleGlobalOptions>;\nexport declare class MatRipple implements OnInit, OnDestroy, RippleTarget {\n    private _elementRef;\n    /** Custom color for all ripples. */\n    color: string;\n    /** Whether the ripples should be visible outside the component's bounds. */\n    unbounded: boolean;\n    /**\n     * Whether the ripple always originates from the center of the host element's bounds, rather\n     * than originating from the location of the click event.\n     */\n    centered: boolean;\n    /**\n     * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n     * will be the distance from the center of the ripple to the furthest corner of the host element's\n     * bounding rectangle.\n     */\n    radius: number;\n    /**\n     * Configuration for the ripple animation. Allows modifying the enter and exit animation\n     * duration of the ripples. The animation durations will be overwritten if the\n     * `NoopAnimationsModule` is being used.\n     */\n    animation: RippleAnimationConfig;\n    /**\n     * Whether click events will not trigger the ripple. Ripples can be still launched manually\n     * by using the `launch()` method.\n     */\n    disabled: boolean;\n    private _disabled;\n    /**\n     * The element that triggers the ripple when click events are received.\n     * Defaults to the directive's host element.\n     */\n    trigger: HTMLElement;\n    private _trigger;\n    /** Renderer for the ripple DOM manipulations. */\n    private _rippleRenderer;\n    /** Options that are set globally for all ripples. */\n    private _globalOptions;\n    /** Whether ripple directive is initialized and the input bindings are set. */\n    private _isInitialized;\n    constructor(_elementRef: ElementRef<HTMLElement>, ngZone: NgZone, platform: Platform, globalOptions: RippleGlobalOptions, animationMode?: string);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /** Fades out all currently showing ripple elements. */\n    fadeOutAll(): void;\n    /**\n     * Ripple configuration from the directive's input values.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    readonly rippleConfig: RippleConfig;\n    /**\n     * Whether ripples on pointer-down are disabled or not.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    readonly rippleDisabled: boolean;\n    /** Sets up the the trigger event listeners if ripples are enabled. */\n    private _setupTriggerEventsIfEnabled;\n    /**\n     * Launches a manual ripple using the specified ripple configuration.\n     * @param config Configuration for the manual ripple.\n     */\n    launch(config: RippleConfig): RippleRef;\n    /**\n     * Launches a manual ripple at the specified coordinates within the element.\n     * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n     * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n     * @param config Optional ripple configuration for the manual ripple.\n     */\n    launch(x: number, y: number, config?: RippleConfig): RippleRef;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/selection/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatPseudoCheckboxModule {\n}\nexport * from './pseudo-checkbox/pseudo-checkbox';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/selection/pseudo-checkbox/pseudo-checkbox.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport declare type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\nexport declare class MatPseudoCheckbox {\n    _animationMode?: string | undefined;\n    /** Display state of the checkbox. */\n    state: MatPseudoCheckboxState;\n    /** Whether the checkbox is disabled. */\n    disabled: boolean;\n    constructor(_animationMode?: string | undefined);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/core/testing/month-constants.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport declare const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8, OCT = 9, NOV = 10, DEC = 11;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/datepicker/calendar-body.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, EventEmitter, NgZone, OnChanges, SimpleChanges } from '@angular/core';\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport declare type MatCalendarCellCssClasses = string | string[] | Set<string> | {\n    [key: string]: any;\n};\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport declare class MatCalendarCell {\n    value: number;\n    displayValue: string;\n    ariaLabel: string;\n    enabled: boolean;\n    cssClasses?: string | Set<string> | {\n        [key: string]: any;\n    } | string[] | undefined;\n    constructor(value: number, displayValue: string, ariaLabel: string, enabled: boolean, cssClasses?: string | Set<string> | {\n        [key: string]: any;\n    } | string[] | undefined);\n}\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\nexport declare class MatCalendarBody implements OnChanges {\n    private _elementRef;\n    private _ngZone;\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    label: string;\n    /** The cells to display in the table. */\n    rows: MatCalendarCell[][];\n    /** The value in the table that corresponds to today. */\n    todayValue: number;\n    /** The value in the table that is currently selected. */\n    selectedValue: number;\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    labelMinRequiredCells: number;\n    /** The number of columns in the table. */\n    numCols: number;\n    /** The cell number of the active cell in the table. */\n    activeCell: number;\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    cellAspectRatio: number;\n    /** Emits when a new value is selected. */\n    readonly selectedValueChange: EventEmitter<number>;\n    /** The number of blank cells to put at the beginning for the first row. */\n    _firstRowOffset: number;\n    /** Padding for the individual date cells. */\n    _cellPadding: string;\n    /** Width of an individual cell. */\n    _cellWidth: string;\n    constructor(_elementRef: ElementRef<HTMLElement>, _ngZone: NgZone);\n    _cellClicked(cell: MatCalendarCell): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    _isActiveCell(rowIndex: number, colIndex: number): boolean;\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/datepicker/calendar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentType, Portal } from '@angular/cdk/portal';\nimport { AfterContentInit, AfterViewChecked, ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { DateAdapter, MatDateFormats } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { MatDatepickerIntl } from './datepicker-intl';\nimport { MatMonthView } from './month-view';\nimport { MatMultiYearView } from './multi-year-view';\nimport { MatYearView } from './year-view';\nimport { MatCalendarCellCssClasses } from './calendar-body';\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport declare type MatCalendarView = 'month' | 'year' | 'multi-year';\n/** Default header for MatCalendar */\nexport declare class MatCalendarHeader<D> {\n    private _intl;\n    calendar: MatCalendar<D>;\n    private _dateAdapter;\n    private _dateFormats;\n    constructor(_intl: MatDatepickerIntl, calendar: MatCalendar<D>, _dateAdapter: DateAdapter<D>, _dateFormats: MatDateFormats, changeDetectorRef: ChangeDetectorRef);\n    /** The label for the current calendar view. */\n    readonly periodButtonText: string;\n    readonly periodButtonLabel: string;\n    /** The label for the the previous button. */\n    readonly prevButtonLabel: string;\n    /** The label for the the next button. */\n    readonly nextButtonLabel: string;\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked(): void;\n    /** Handles user clicks on the previous button. */\n    previousClicked(): void;\n    /** Handles user clicks on the next button. */\n    nextClicked(): void;\n    /** Whether the previous period button is enabled. */\n    previousEnabled(): boolean;\n    /** Whether the next period button is enabled. */\n    nextEnabled(): boolean;\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    private _isSameView;\n}\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\nexport declare class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n    private _dateAdapter;\n    private _dateFormats;\n    private _changeDetectorRef;\n    /** An input indicating the type of the header component, if set. */\n    headerComponent: ComponentType<any>;\n    /** A portal containing the header component type for this calendar. */\n    _calendarHeaderPortal: Portal<any>;\n    private _intlChanges;\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    private _moveFocusOnNextTick;\n    /** A date representing the period (month or year) to start the calendar in. */\n    startAt: D | null;\n    private _startAt;\n    /** Whether the calendar should be started in month or year view. */\n    startView: MatCalendarView;\n    /** The currently selected date. */\n    selected: D | null;\n    private _selected;\n    /** The minimum selectable date. */\n    minDate: D | null;\n    private _minDate;\n    /** The maximum selectable date. */\n    maxDate: D | null;\n    private _maxDate;\n    /** Function used to filter which dates are selectable. */\n    dateFilter: (date: D) => boolean;\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass: (date: D) => MatCalendarCellCssClasses;\n    /** Emits when the currently selected date changes. */\n    readonly selectedChange: EventEmitter<D>;\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    readonly yearSelected: EventEmitter<D>;\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    readonly monthSelected: EventEmitter<D>;\n    /** Emits when any date is selected. */\n    readonly _userSelection: EventEmitter<void>;\n    /** Reference to the current month view component. */\n    monthView: MatMonthView<D>;\n    /** Reference to the current year view component. */\n    yearView: MatYearView<D>;\n    /** Reference to the current multi-year view component. */\n    multiYearView: MatMultiYearView<D>;\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    activeDate: D;\n    private _clampedActiveDate;\n    /** Whether the calendar is in month view. */\n    currentView: MatCalendarView;\n    private _currentView;\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges: Subject<void>;\n    constructor(_intl: MatDatepickerIntl, _dateAdapter: DateAdapter<D>, _dateFormats: MatDateFormats, _changeDetectorRef: ChangeDetectorRef);\n    ngAfterContentInit(): void;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    focusActiveCell(): void;\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate(): void;\n    /** Handles date selection in the month view. */\n    _dateSelected(date: D): void;\n    /** Handles year selection in the multiyear view. */\n    _yearSelectedInMultiYearView(normalizedYear: D): void;\n    /** Handles month selection in the year view. */\n    _monthSelectedInYearView(normalizedMonth: D): void;\n    _userSelected(): void;\n    /** Handles year/month selection in the multi-year/year views. */\n    _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Returns the component instance that corresponds to the current calendar view. */\n    private _getCurrentViewComponent;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/datepicker/datepicker-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport declare const matDatepickerAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInCalendar: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/datepicker/datepicker-errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nexport declare function createMissingDateImplError(provider: string): Error;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/datepicker/datepicker-input.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, EventEmitter, OnDestroy } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';\nimport { DateAdapter, MatDateFormats, ThemePalette } from '@angular/material/core';\nimport { MatFormField } from '@angular/material/form-field';\nimport { MatDatepicker } from './datepicker';\n/** @docs-private */\nexport declare const MAT_DATEPICKER_VALUE_ACCESSOR: any;\n/** @docs-private */\nexport declare const MAT_DATEPICKER_VALIDATORS: any;\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport declare class MatDatepickerInputEvent<D> {\n    /** Reference to the datepicker input component that emitted the event. */\n    target: MatDatepickerInput<D>;\n    /** Reference to the native input element associated with the datepicker input. */\n    targetElement: HTMLElement;\n    /** The new value for the target datepicker input. */\n    value: D | null;\n    constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    target: MatDatepickerInput<D>, \n    /** Reference to the native input element associated with the datepicker input. */\n    targetElement: HTMLElement);\n}\n/** Directive used to connect an input to a MatDatepicker. */\nexport declare class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n    private _elementRef;\n    _dateAdapter: DateAdapter<D>;\n    private _dateFormats;\n    private _formField;\n    /** The datepicker that this input is associated with. */\n    matDatepicker: MatDatepicker<D>;\n    _datepicker: MatDatepicker<D>;\n    /** Function that can be used to filter out dates within the datepicker. */\n    matDatepickerFilter: (date: D | null) => boolean;\n    _dateFilter: (date: D | null) => boolean;\n    /** The value of the input. */\n    value: D | null;\n    private _value;\n    /** The minimum valid date. */\n    min: D | null;\n    private _min;\n    /** The maximum valid date. */\n    max: D | null;\n    private _max;\n    /** Whether the datepicker-input is disabled. */\n    disabled: boolean;\n    private _disabled;\n    /** Emits when a `change` event is fired on this `<input>`. */\n    readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>>;\n    /** Emits when an `input` event is fired on this `<input>`. */\n    readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>>;\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    _valueChange: EventEmitter<D | null>;\n    /** Emits when the disabled state has changed */\n    _disabledChange: EventEmitter<boolean>;\n    _onTouched: () => void;\n    private _cvaOnChange;\n    private _validatorOnChange;\n    private _datepickerSubscription;\n    private _localeSubscription;\n    /** The form control validator for whether the input parses. */\n    private _parseValidator;\n    /** The form control validator for the min date. */\n    private _minValidator;\n    /** The form control validator for the max date. */\n    private _maxValidator;\n    /** The form control validator for the date filter. */\n    private _filterValidator;\n    /** The combined form control validator for this input. */\n    private _validator;\n    /** Whether the last value set on the input was valid. */\n    private _lastValueValid;\n    constructor(_elementRef: ElementRef<HTMLInputElement>, _dateAdapter: DateAdapter<D>, _dateFormats: MatDateFormats, _formField: MatFormField);\n    ngOnDestroy(): void;\n    /** @docs-private */\n    registerOnValidatorChange(fn: () => void): void;\n    /** @docs-private */\n    validate(c: AbstractControl): ValidationErrors | null;\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n     */\n    getPopupConnectionElementRef(): ElementRef;\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return The element to connect the popup to.\n     */\n    getConnectedOverlayOrigin(): ElementRef;\n    writeValue(value: D): void;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: () => void): void;\n    setDisabledState(isDisabled: boolean): void;\n    _onKeydown(event: KeyboardEvent): void;\n    _onInput(value: string): void;\n    _onChange(): void;\n    /** Returns the palette used by the input's form field, if any. */\n    _getThemePalette(): ThemePalette;\n    /** Handles blur events on the input. */\n    _onBlur(): void;\n    /** Formats a value and sets it on the input element. */\n    private _formatValue;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/datepicker/datepicker-intl.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\n/** Datepicker data that requires internationalization. */\nexport declare class MatDatepickerIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void>;\n    /** A label for the calendar popup (used by screen readers). */\n    calendarLabel: string;\n    /** A label for the button used to open the calendar popup (used by screen readers). */\n    openCalendarLabel: string;\n    /** A label for the previous month button (used by screen readers). */\n    prevMonthLabel: string;\n    /** A label for the next month button (used by screen readers). */\n    nextMonthLabel: string;\n    /** A label for the previous year button (used by screen readers). */\n    prevYearLabel: string;\n    /** A label for the next year button (used by screen readers). */\n    nextYearLabel: string;\n    /** A label for the previous multi-year button (used by screen readers). */\n    prevMultiYearLabel: string;\n    /** A label for the next multi-year button (used by screen readers). */\n    nextMultiYearLabel: string;\n    /** A label for the 'switch to month view' button (used by screen readers). */\n    switchToMonthViewLabel: string;\n    /** A label for the 'switch to year view' button (used by screen readers). */\n    switchToMultiYearViewLabel: string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/datepicker/datepicker-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatDatepickerModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/datepicker/datepicker-toggle.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ChangeDetectorRef, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { MatButton } from '@angular/material/button';\nimport { MatDatepicker } from './datepicker';\nimport { MatDatepickerIntl } from './datepicker-intl';\n/** Can be used to override the icon of a `matDatepickerToggle`. */\nexport declare class MatDatepickerToggleIcon {\n}\nexport declare class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n    _intl: MatDatepickerIntl;\n    private _changeDetectorRef;\n    private _stateChanges;\n    /** Datepicker instance that the button will toggle. */\n    datepicker: MatDatepicker<D>;\n    /** Tabindex for the toggle. */\n    tabIndex: number | null;\n    /** Whether the toggle button is disabled. */\n    disabled: boolean;\n    private _disabled;\n    /** Whether ripples on the toggle should be disabled. */\n    disableRipple: boolean;\n    /** Custom icon set by the consumer. */\n    _customIcon: MatDatepickerToggleIcon;\n    /** Underlying button element. */\n    _button: MatButton;\n    constructor(_intl: MatDatepickerIntl, _changeDetectorRef: ChangeDetectorRef, defaultTabIndex: string);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    ngAfterContentInit(): void;\n    _open(event: Event): void;\n    private _watchStateChanges;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/datepicker/datepicker.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayRef, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { AfterViewInit, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { CanColor, CanColorCtor, DateAdapter, ThemePalette } from '@angular/material/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Subject } from 'rxjs';\nimport { MatCalendar } from './calendar';\nimport { MatDatepickerInput } from './datepicker-input';\nimport { MatCalendarCellCssClasses } from './calendar-body';\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport declare const MAT_DATEPICKER_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY;\n};\n/** @docs-private */\nexport declare class MatDatepickerContentBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase;\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\nexport declare class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase implements AfterViewInit, CanColor {\n    /** Reference to the internal calendar component. */\n    _calendar: MatCalendar<D>;\n    /** Reference to the datepicker that created the overlay. */\n    datepicker: MatDatepicker<D>;\n    /** Whether the datepicker is above or below the input. */\n    _isAbove: boolean;\n    constructor(elementRef: ElementRef);\n    ngAfterViewInit(): void;\n}\n/** Component responsible for managing the datepicker popup/dialog. */\nexport declare class MatDatepicker<D> implements OnDestroy, CanColor {\n    private _dialog;\n    private _overlay;\n    private _ngZone;\n    private _viewContainerRef;\n    private _dateAdapter;\n    private _dir;\n    private _document;\n    private _scrollStrategy;\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    calendarHeaderComponent: ComponentType<any>;\n    /** The date to open the calendar to initially. */\n    startAt: D | null;\n    private _startAt;\n    /** The view that the calendar should start in. */\n    startView: 'month' | 'year' | 'multi-year';\n    /** Color palette to use on the datepicker's calendar. */\n    color: ThemePalette;\n    _color: ThemePalette;\n    /**\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n     * than a popup and elements have more padding to allow for bigger touch targets.\n     */\n    touchUi: boolean;\n    private _touchUi;\n    /** Whether the datepicker pop-up should be disabled. */\n    disabled: boolean;\n    private _disabled;\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    readonly yearSelected: EventEmitter<D>;\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    readonly monthSelected: EventEmitter<D>;\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n    panelClass: string | string[];\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass: (date: D) => MatCalendarCellCssClasses;\n    /** Emits when the datepicker has been opened. */\n    openedStream: EventEmitter<void>;\n    /** Emits when the datepicker has been closed. */\n    closedStream: EventEmitter<void>;\n    /** Whether the calendar is open. */\n    opened: boolean;\n    private _opened;\n    /** The id for the datepicker calendar. */\n    id: string;\n    /** The currently selected date. */\n    _selected: D | null;\n    private _validSelected;\n    /** The minimum selectable date. */\n    readonly _minDate: D | null;\n    /** The maximum selectable date. */\n    readonly _maxDate: D | null;\n    readonly _dateFilter: (date: D | null) => boolean;\n    /** A reference to the overlay when the calendar is opened as a popup. */\n    _popupRef: OverlayRef;\n    /** A reference to the dialog when the calendar is opened as a dialog. */\n    private _dialogRef;\n    /** A portal containing the calendar for this datepicker. */\n    private _calendarPortal;\n    /** Reference to the component instantiated in popup mode. */\n    private _popupComponentRef;\n    /** The element that was focused before the datepicker was opened. */\n    private _focusedElementBeforeOpen;\n    /** Subscription to value changes in the associated input element. */\n    private _inputSubscription;\n    /** The input element this datepicker is associated with. */\n    _datepickerInput: MatDatepickerInput<D>;\n    /** Emits when the datepicker is disabled. */\n    readonly _disabledChange: Subject<boolean>;\n    /** Emits new selected date when selected date changes. */\n    readonly _selectedChanged: Subject<D>;\n    constructor(_dialog: MatDialog, _overlay: Overlay, _ngZone: NgZone, _viewContainerRef: ViewContainerRef, scrollStrategy: any, _dateAdapter: DateAdapter<D>, _dir: Directionality, _document: any);\n    ngOnDestroy(): void;\n    /** Selects the given date */\n    select(date: D): void;\n    /** Emits the selected year in multiyear view */\n    _selectYear(normalizedYear: D): void;\n    /** Emits selected month in year view */\n    _selectMonth(normalizedMonth: D): void;\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    _registerInput(input: MatDatepickerInput<D>): void;\n    /** Open the calendar. */\n    open(): void;\n    /** Close the calendar. */\n    close(): void;\n    /** Open the calendar as a dialog. */\n    private _openAsDialog;\n    /** Open the calendar as a popup. */\n    private _openAsPopup;\n    /** Create the popup. */\n    private _createPopup;\n    /** Create the popup PositionStrategy. */\n    private _createPopupPositionStrategy;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Passes the current theme color along to the calendar overlay. */\n    private _setColor;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/datepicker/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { MatMultiYearView as ɵa34 } from './multi-year-view';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/datepicker/month-view.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter } from '@angular/core';\nimport { DateAdapter, MatDateFormats } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses } from './calendar-body';\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\nexport declare class MatMonthView<D> implements AfterContentInit {\n    private _changeDetectorRef;\n    private _dateFormats;\n    _dateAdapter: DateAdapter<D>;\n    private _dir?;\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    activeDate: D;\n    private _activeDate;\n    /** The currently selected date. */\n    selected: D | null;\n    private _selected;\n    /** The minimum selectable date. */\n    minDate: D | null;\n    private _minDate;\n    /** The maximum selectable date. */\n    maxDate: D | null;\n    private _maxDate;\n    /** Function used to filter which dates are selectable. */\n    dateFilter: (date: D) => boolean;\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass: (date: D) => MatCalendarCellCssClasses;\n    /** Emits when a new date is selected. */\n    readonly selectedChange: EventEmitter<D | null>;\n    /** Emits when any date is selected. */\n    readonly _userSelection: EventEmitter<void>;\n    /** Emits when any date is activated. */\n    readonly activeDateChange: EventEmitter<D>;\n    /** The body of calendar table */\n    _matCalendarBody: MatCalendarBody;\n    /** The label for this month (e.g. \"January 2017\"). */\n    _monthLabel: string;\n    /** Grid of calendar cells representing the dates of the month. */\n    _weeks: MatCalendarCell[][];\n    /** The number of blank cells in the first row before the 1st of the month. */\n    _firstWeekOffset: number;\n    /**\n     * The date of the month that the currently selected Date falls on.\n     * Null if the currently selected Date is in another month.\n     */\n    _selectedDate: number | null;\n    /** The date of the month that today falls on. Null if today is in another month. */\n    _todayDate: number | null;\n    /** The names of the weekdays. */\n    _weekdays: {\n        long: string;\n        narrow: string;\n    }[];\n    constructor(_changeDetectorRef: ChangeDetectorRef, _dateFormats: MatDateFormats, _dateAdapter: DateAdapter<D>, _dir?: Directionality | undefined);\n    ngAfterContentInit(): void;\n    /** Handles when a new date is selected. */\n    _dateSelected(date: number): void;\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    _handleCalendarBodyKeydown(event: KeyboardEvent): void;\n    /** Initializes this month view. */\n    _init(): void;\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(): void;\n    /** Creates MatCalendarCells for the dates in this month. */\n    private _createWeekCells;\n    /** Date filter for the month */\n    private _shouldEnableDate;\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    private _getDateInCurrentMonth;\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    private _hasSameMonthAndYear;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Determines whether the user has the RTL layout direction. */\n    private _isRtl;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/datepicker/multi-year-view.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter } from '@angular/core';\nimport { DateAdapter } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { MatCalendarBody, MatCalendarCell } from './calendar-body';\nexport declare const yearsPerPage = 24;\nexport declare const yearsPerRow = 4;\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\nexport declare class MatMultiYearView<D> implements AfterContentInit {\n    private _changeDetectorRef;\n    _dateAdapter: DateAdapter<D>;\n    private _dir?;\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    activeDate: D;\n    private _activeDate;\n    /** The currently selected date. */\n    selected: D | null;\n    private _selected;\n    /** The minimum selectable date. */\n    minDate: D | null;\n    private _minDate;\n    /** The maximum selectable date. */\n    maxDate: D | null;\n    private _maxDate;\n    /** A function used to filter which dates are selectable. */\n    dateFilter: (date: D) => boolean;\n    /** Emits when a new year is selected. */\n    readonly selectedChange: EventEmitter<D>;\n    /** Emits the selected year. This doesn't imply a change on the selected date */\n    readonly yearSelected: EventEmitter<D>;\n    /** Emits when any date is activated. */\n    readonly activeDateChange: EventEmitter<D>;\n    /** The body of calendar table */\n    _matCalendarBody: MatCalendarBody;\n    /** Grid of calendar cells representing the currently displayed years. */\n    _years: MatCalendarCell[][];\n    /** The year that today falls on. */\n    _todayYear: number;\n    /** The year of the selected date. Null if the selected date is null. */\n    _selectedYear: number | null;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _dateAdapter: DateAdapter<D>, _dir?: Directionality | undefined);\n    ngAfterContentInit(): void;\n    /** Initializes this multi-year view. */\n    _init(): void;\n    /** Handles when a new year is selected. */\n    _yearSelected(year: number): void;\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    _handleCalendarBodyKeydown(event: KeyboardEvent): void;\n    _getActiveCell(): number;\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(): void;\n    /** Creates an MatCalendarCell for the given year. */\n    private _createCellForYear;\n    /** Whether the given year is enabled. */\n    private _shouldEnableYear;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Determines whether the user has the RTL layout direction. */\n    private _isRtl;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/datepicker/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './datepicker-module';\nexport * from './calendar';\nexport * from './calendar-body';\nexport * from './datepicker';\nexport * from './datepicker-animations';\nexport * from './datepicker-input';\nexport * from './datepicker-intl';\nexport * from './datepicker-toggle';\nexport * from './month-view';\nexport * from './year-view';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/datepicker/year-view.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter } from '@angular/core';\nimport { DateAdapter, MatDateFormats } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { MatCalendarBody, MatCalendarCell } from './calendar-body';\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\nexport declare class MatYearView<D> implements AfterContentInit {\n    private _changeDetectorRef;\n    private _dateFormats;\n    _dateAdapter: DateAdapter<D>;\n    private _dir?;\n    /** The date to display in this year view (everything other than the year is ignored). */\n    activeDate: D;\n    private _activeDate;\n    /** The currently selected date. */\n    selected: D | null;\n    private _selected;\n    /** The minimum selectable date. */\n    minDate: D | null;\n    private _minDate;\n    /** The maximum selectable date. */\n    maxDate: D | null;\n    private _maxDate;\n    /** A function used to filter which dates are selectable. */\n    dateFilter: (date: D) => boolean;\n    /** Emits when a new month is selected. */\n    readonly selectedChange: EventEmitter<D>;\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    readonly monthSelected: EventEmitter<D>;\n    /** Emits when any date is activated. */\n    readonly activeDateChange: EventEmitter<D>;\n    /** The body of calendar table */\n    _matCalendarBody: MatCalendarBody;\n    /** Grid of calendar cells representing the months of the year. */\n    _months: MatCalendarCell[][];\n    /** The label for this year (e.g. \"2017\"). */\n    _yearLabel: string;\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    _todayMonth: number | null;\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    _selectedMonth: number | null;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _dateFormats: MatDateFormats, _dateAdapter: DateAdapter<D>, _dir?: Directionality | undefined);\n    ngAfterContentInit(): void;\n    /** Handles when a new month is selected. */\n    _monthSelected(month: number): void;\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    _handleCalendarBodyKeydown(event: KeyboardEvent): void;\n    /** Initializes this year view. */\n    _init(): void;\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(): void;\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    private _getMonthInCurrentYear;\n    /** Creates an MatCalendarCell for the given month. */\n    private _createCellForMonth;\n    /** Whether the given month is enabled. */\n    private _shouldEnableMonth;\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    private _isYearAndMonthAfterMaxDate;\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    private _isYearAndMonthBeforeMinDate;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Determines whether the user has the RTL layout direction. */\n    private _isRtl;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/dialog/dialog-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport declare const matDialogAnimations: {\n    readonly dialogContainer: AnimationTriggerMetadata;\n    readonly slideDialog: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/dialog/dialog-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewContainerRef } from '@angular/core';\nimport { Direction } from '@angular/cdk/bidi';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\n/** Valid ARIA roles for a dialog element. */\nexport declare type DialogRole = 'dialog' | 'alertdialog';\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n    /** Override for the dialog's top position. */\n    top?: string;\n    /** Override for the dialog's bottom position. */\n    bottom?: string;\n    /** Override for the dialog's left position. */\n    left?: string;\n    /** Override for the dialog's right position. */\n    right?: string;\n}\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport declare class MatDialogConfig<D = any> {\n    /**\n     * Where the attached component should live in Angular's *logical* component tree.\n     * This affects what is available for injection and the change detection order for the\n     * component instantiated inside of the dialog. This does not affect where the dialog\n     * content will be rendered.\n     */\n    viewContainerRef?: ViewContainerRef;\n    /** ID for the dialog. If omitted, a unique one will be generated. */\n    id?: string;\n    /** The ARIA role of the dialog element. */\n    role?: DialogRole;\n    /** Custom class for the overlay pane. */\n    panelClass?: string | string[];\n    /** Whether the dialog has a backdrop. */\n    hasBackdrop?: boolean;\n    /** Custom class for the backdrop, */\n    backdropClass?: string;\n    /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n    disableClose?: boolean;\n    /** Width of the dialog. */\n    width?: string;\n    /** Height of the dialog. */\n    height?: string;\n    /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n    minWidth?: number | string;\n    /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n    minHeight?: number | string;\n    /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n    maxWidth?: number | string;\n    /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n    maxHeight?: number | string;\n    /** Position overrides. */\n    position?: DialogPosition;\n    /** Data being injected into the child component. */\n    data?: D | null;\n    /** Layout direction for the dialog's content. */\n    direction?: Direction;\n    /** ID of the element that describes the dialog. */\n    ariaDescribedBy?: string | null;\n    /** Aria label to assign to the dialog element */\n    ariaLabel?: string | null;\n    /** Whether the dialog should focus the first focusable element on open. */\n    autoFocus?: boolean;\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n    restoreFocus?: boolean;\n    /** Scroll strategy to be used for the dialog. */\n    scrollStrategy?: ScrollStrategy;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    closeOnNavigation?: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/dialog/dialog-container.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentRef, ElementRef, EmbeddedViewRef, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { BasePortalOutlet, ComponentPortal, CdkPortalOutlet, TemplatePortal } from '@angular/cdk/portal';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { MatDialogConfig } from './dialog-config';\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport declare function throwMatDialogContentAlreadyAttachedError(): void;\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nexport declare class MatDialogContainer extends BasePortalOutlet {\n    private _elementRef;\n    private _focusTrapFactory;\n    private _changeDetectorRef;\n    private _document;\n    /** The dialog configuration. */\n    _config: MatDialogConfig;\n    /** The portal outlet inside of this container into which the dialog content will be loaded. */\n    _portalOutlet: CdkPortalOutlet;\n    /** The class that traps and manages focus within the dialog. */\n    private _focusTrap;\n    /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n    private _elementFocusedBeforeDialogWasOpened;\n    /** State of the dialog animation. */\n    _state: 'void' | 'enter' | 'exit';\n    /** Emits when an animation state changes. */\n    _animationStateChanged: EventEmitter<AnimationEvent>;\n    /** ID of the element that should be considered as the dialog's label. */\n    _ariaLabelledBy: string | null;\n    /** ID for the container DOM element. */\n    _id: string;\n    constructor(_elementRef: ElementRef, _focusTrapFactory: FocusTrapFactory, _changeDetectorRef: ChangeDetectorRef, _document: any, \n    /** The dialog configuration. */\n    _config: MatDialogConfig);\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    /** Moves the focus inside the focus trap. */\n    private _trapFocus;\n    /** Restores focus to the element that was focused before the dialog opened. */\n    private _restoreFocus;\n    /** Saves a reference to the element that was focused before the dialog was opened. */\n    private _savePreviouslyFocusedElement;\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone(event: AnimationEvent): void;\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart(event: AnimationEvent): void;\n    /** Starts the dialog exit animation. */\n    _startExitAnimation(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/dialog/dialog-content-directives.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OnChanges, OnInit, SimpleChanges, ElementRef } from '@angular/core';\nimport { MatDialog } from './dialog';\nimport { MatDialogRef } from './dialog-ref';\n/**\n * Button that will close the current dialog.\n */\nexport declare class MatDialogClose implements OnInit, OnChanges {\n    dialogRef: MatDialogRef<any>;\n    private _elementRef;\n    private _dialog;\n    /** Screenreader label for the button. */\n    ariaLabel: string;\n    /** Dialog close input. */\n    dialogResult: any;\n    _matDialogClose: any;\n    constructor(dialogRef: MatDialogRef<any>, _elementRef: ElementRef<HTMLElement>, _dialog: MatDialog);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n}\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport declare class MatDialogTitle implements OnInit {\n    private _dialogRef;\n    private _elementRef;\n    private _dialog;\n    id: string;\n    constructor(_dialogRef: MatDialogRef<any>, _elementRef: ElementRef<HTMLElement>, _dialog: MatDialog);\n    ngOnInit(): void;\n}\n/**\n * Scrollable content container of a dialog.\n */\nexport declare class MatDialogContent {\n}\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport declare class MatDialogActions {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/dialog/dialog-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatDialogModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/dialog/dialog-ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { Location } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { DialogPosition } from './dialog-config';\nimport { MatDialogContainer } from './dialog-container';\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport declare class MatDialogRef<T, R = any> {\n    private _overlayRef;\n    _containerInstance: MatDialogContainer;\n    readonly id: string;\n    /** The instance of component opened into the dialog. */\n    componentInstance: T;\n    /** Whether the user is allowed to close the dialog. */\n    disableClose: boolean | undefined;\n    /** Subject for notifying the user that the dialog has finished opening. */\n    private readonly _afterOpened;\n    /** Subject for notifying the user that the dialog has finished closing. */\n    private readonly _afterClosed;\n    /** Subject for notifying the user that the dialog has started closing. */\n    private readonly _beforeClosed;\n    /** Result to be passed to afterClosed. */\n    private _result;\n    constructor(_overlayRef: OverlayRef, _containerInstance: MatDialogContainer, _location?: Location, id?: string);\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult?: R): void;\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened(): Observable<void>;\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed(): Observable<R | undefined>;\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed(): Observable<R | undefined>;\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick(): Observable<MouseEvent>;\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents(): Observable<KeyboardEvent>;\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position?: DialogPosition): this;\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width?: string, height?: string): this;\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @deprecated Use `afterOpened` instead.\n     * @breaking-change 8.0.0\n     */\n    afterOpen(): Observable<void>;\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @deprecated Use `beforeClosed` instead.\n     * @breaking-change 8.0.0\n     */\n    beforeClose(): Observable<R | undefined>;\n    /** Fetches the position strategy object from the overlay ref. */\n    private _getPositionStrategy;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/dialog/dialog.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Overlay, OverlayContainer, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { Location } from '@angular/common';\nimport { InjectionToken, Injector, OnDestroy, TemplateRef } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { MatDialogConfig } from './dialog-config';\nimport { MatDialogRef } from './dialog-ref';\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport declare const MAT_DIALOG_DATA: InjectionToken<any>;\n/** Injection token that can be used to specify default dialog options. */\nexport declare const MAT_DIALOG_DEFAULT_OPTIONS: InjectionToken<MatDialogConfig<any>>;\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport declare const MAT_DIALOG_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY;\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nexport declare class MatDialog implements OnDestroy {\n    private _overlay;\n    private _injector;\n    private _location;\n    private _defaultOptions;\n    private _parentDialog;\n    private _overlayContainer;\n    private _openDialogsAtThisLevel;\n    private readonly _afterAllClosedAtThisLevel;\n    private readonly _afterOpenedAtThisLevel;\n    private _ariaHiddenElements;\n    private _scrollStrategy;\n    /** Keeps track of the currently-open dialogs. */\n    readonly openDialogs: MatDialogRef<any>[];\n    /** Stream that emits when a dialog has been opened. */\n    readonly afterOpened: Subject<MatDialogRef<any>>;\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @deprecated Use `afterOpened` instead.\n     * @breaking-change 8.0.0\n     */\n    readonly afterOpen: Subject<MatDialogRef<any>>;\n    readonly _afterAllClosed: Subject<void>;\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n    readonly afterAllClosed: Observable<void>;\n    constructor(_overlay: Overlay, _injector: Injector, _location: Location, _defaultOptions: MatDialogConfig, scrollStrategy: any, _parentDialog: MatDialog, _overlayContainer: OverlayContainer);\n    /**\n     * Opens a modal dialog containing the given component.\n     * @param componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param config Extra configuration options.\n     * @returns Reference to the newly-opened dialog.\n     */\n    open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>, config?: MatDialogConfig<D>): MatDialogRef<T, R>;\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll(): void;\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id: string): MatDialogRef<any> | undefined;\n    ngOnDestroy(): void;\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n    private _createOverlay;\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    private _getOverlayConfig;\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    private _attachDialogContainer;\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    private _attachDialogContent;\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param container Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    private _createInjector;\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n    private _removeOpenDialog;\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n    private _hideNonDialogContentFromAssistiveTechnology;\n    /** Closes all of the dialogs in an array. */\n    private _closeDialogs;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/dialog/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/dialog/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './dialog-module';\nexport * from './dialog';\nexport * from './dialog-container';\nexport * from './dialog-content-directives';\nexport * from './dialog-config';\nexport * from './dialog-ref';\nexport * from './dialog-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/divider/divider-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatDividerModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/divider/divider.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatDivider {\n    /** Whether the divider is vertically aligned. */\n    vertical: boolean;\n    private _vertical;\n    /** Whether the divider is an inset divider. */\n    inset: boolean;\n    private _inset;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/divider/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/divider/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './divider';\nexport * from './divider-module';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/autocomplete/autocomplete-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatAutocompleteModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/autocomplete/autocomplete-origin.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef } from '@angular/core';\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nexport declare class MatAutocompleteOrigin {\n    /** Reference to the element on which the directive is applied. */\n    elementRef: ElementRef<HTMLElement>;\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef: ElementRef<HTMLElement>);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/autocomplete/autocomplete-trigger.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ChangeDetectorRef, ElementRef, InjectionToken, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { MatOption, MatOptionSelectionChange } from '@angular/material/core';\nimport { MatFormField } from '@angular/material/form-field';\nimport { Observable } from 'rxjs';\nimport { MatAutocomplete } from './autocomplete';\nimport { MatAutocompleteOrigin } from './autocomplete-origin';\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n/** The height of each autocomplete option. */\nexport declare const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/** The total height of the autocomplete panel. */\nexport declare const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport declare const MAT_AUTOCOMPLETE_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY;\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport declare const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any;\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport declare function getMatAutocompleteMissingPanelError(): Error;\nexport declare class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n    private _element;\n    private _overlay;\n    private _viewContainerRef;\n    private _zone;\n    private _changeDetectorRef;\n    private _dir;\n    private _formField;\n    private _document;\n    private _viewportRuler?;\n    private _overlayRef;\n    private _portal;\n    private _componentDestroyed;\n    private _autocompleteDisabled;\n    private _scrollStrategy;\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private _previousValue;\n    /** Strategy that is used to position the panel. */\n    private _positionStrategy;\n    /** Whether or not the label state is being overridden. */\n    private _manuallyFloatingLabel;\n    /** The subscription for closing actions (some are bound to document). */\n    private _closingActionsSubscription;\n    /** Subscription to viewport size changes. */\n    private _viewportSubscription;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private _canOpenOnNextFocus;\n    /** Stream of keyboard events that can close the panel. */\n    private readonly _closeKeyEventStream;\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private _windowBlurHandler;\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void;\n    /** `View -> model callback called when autocomplete has been touched` */\n    _onTouched: () => void;\n    /** The autocomplete panel to be attached to this trigger. */\n    autocomplete: MatAutocomplete;\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    connectedTo: MatAutocompleteOrigin;\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    autocompleteAttribute: string;\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    autocompleteDisabled: boolean;\n    constructor(_element: ElementRef<HTMLInputElement>, _overlay: Overlay, _viewContainerRef: ViewContainerRef, _zone: NgZone, _changeDetectorRef: ChangeDetectorRef, scrollStrategy: any, _dir: Directionality, _formField: MatFormField, _document: any, _viewportRuler?: ViewportRuler | undefined);\n    ngOnDestroy(): void;\n    /** Whether or not the autocomplete panel is open. */\n    readonly panelOpen: boolean;\n    private _overlayAttached;\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void;\n    /** Closes the autocomplete suggestion panel. */\n    closePanel(): void;\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition(): void;\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    readonly panelClosingActions: Observable<MatOptionSelectionChange | null>;\n    /** Stream of autocomplete option selections. */\n    readonly optionSelections: Observable<MatOptionSelectionChange>;\n    /** The currently active option, coerced to MatOption type. */\n    readonly activeOption: MatOption | null;\n    /** Stream of clicks outside of the autocomplete panel. */\n    private _getOutsideClickStream;\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => {}): void;\n    registerOnTouched(fn: () => {}): void;\n    setDisabledState(isDisabled: boolean): void;\n    _handleKeydown(event: KeyboardEvent): void;\n    _handleInput(event: KeyboardEvent): void;\n    _handleFocus(): void;\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    private _floatLabel;\n    /** If the label has been manually elevated, return it to its normal state. */\n    private _resetLabel;\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private _scrollToOption;\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private _subscribeToClosingActions;\n    /** Destroys the autocomplete suggestion panel. */\n    private _destroyPanel;\n    private _setTriggerValue;\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private _setValueAndClose;\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    private _clearPreviousSelectedOption;\n    private _attachOverlay;\n    private _getOverlayConfig;\n    private _getOverlayPosition;\n    private _getConnectedElement;\n    private _getPanelWidth;\n    /** Returns the width of the input element, so the panel width can match it. */\n    private _getHostWidth;\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private _resetActiveItem;\n    /** Determines whether the panel can be opened. */\n    private _canOpen;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/autocomplete/autocomplete.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, QueryList, TemplateRef } from '@angular/core';\nimport { CanDisableRipple, CanDisableRippleCtor, MatOptgroup, MatOption } from '@angular/material/core';\n/** Event object that is emitted when an autocomplete option is selected. */\nexport declare class MatAutocompleteSelectedEvent {\n    /** Reference to the autocomplete panel that emitted the event. */\n    source: MatAutocomplete;\n    /** Option that was selected. */\n    option: MatOption;\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source: MatAutocomplete, \n    /** Option that was selected. */\n    option: MatOption);\n}\n/** @docs-private */\nexport declare class MatAutocompleteBase {\n}\nexport declare const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase;\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n}\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport declare const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS: InjectionToken<MatAutocompleteDefaultOptions>;\n/** @docs-private */\nexport declare function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions;\nexport declare class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit, CanDisableRipple {\n    private _changeDetectorRef;\n    private _elementRef;\n    /** Manages active item in option list based on key events. */\n    _keyManager: ActiveDescendantKeyManager<MatOption>;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean;\n    /** Whether the autocomplete panel is open. */\n    readonly isOpen: boolean;\n    _isOpen: boolean;\n    /** @docs-private */\n    template: TemplateRef<any>;\n    /** Element for the panel containing the autocomplete options. */\n    panel: ElementRef;\n    /** @docs-private */\n    options: QueryList<MatOption>;\n    /** @docs-private */\n    optionGroups: QueryList<MatOptgroup>;\n    /** Function that maps an option's control value to its display value in the trigger. */\n    displayWith: ((value: any) => string) | null;\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    autoActiveFirstOption: boolean;\n    private _autoActiveFirstOption;\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    panelWidth: string | number;\n    /** Event that is emitted whenever an option from the list is selected. */\n    readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent>;\n    /** Event that is emitted when the autocomplete panel is opened. */\n    readonly opened: EventEmitter<void>;\n    /** Event that is emitted when the autocomplete panel is closed. */\n    readonly closed: EventEmitter<void>;\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    classList: string;\n    _classList: {\n        [key: string]: boolean;\n    };\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _elementRef: ElementRef<HTMLElement>, defaults: MatAutocompleteDefaultOptions);\n    ngAfterContentInit(): void;\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop: number): void;\n    /** Returns the panel's scrollTop. */\n    _getScrollTop(): number;\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility(): void;\n    /** Emits the `select` event. */\n    _emitSelectEvent(option: MatOption): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/autocomplete/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { MatAutocompleteOrigin as ɵa29 } from './autocomplete-origin';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/autocomplete/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './autocomplete';\nexport * from './autocomplete-module';\nexport * from './autocomplete-trigger';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/badge/badge-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatBadgeModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/badge/badge.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AriaDescriber } from '@angular/cdk/a11y';\nimport { ElementRef, NgZone, OnDestroy, Renderer2 } from '@angular/core';\nimport { ThemePalette, CanDisableCtor, CanDisable } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatBadgeBase {\n}\nexport declare const _MatBadgeMixinBase: CanDisableCtor & typeof MatBadgeBase;\nexport declare type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport declare type MatBadgeSize = 'small' | 'medium' | 'large';\n/** Directive to display a text badge. */\nexport declare class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n    private _document;\n    private _ngZone;\n    private _elementRef;\n    private _ariaDescriber;\n    /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n    private _renderer?;\n    /** Whether the badge has any content. */\n    _hasContent: boolean;\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    color: ThemePalette;\n    private _color;\n    /** Whether the badge should overlap its contents or not */\n    overlap: boolean;\n    private _overlap;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    position: MatBadgePosition;\n    /** The content for the badge */\n    content: string;\n    private _content;\n    /** Message used to describe the decorated element via aria-describedby */\n    description: string;\n    private _description;\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    size: MatBadgeSize;\n    /** Whether the badge is hidden. */\n    hidden: boolean;\n    private _hidden;\n    /** Unique id for the badge */\n    _id: number;\n    private _badgeElement;\n    constructor(_document: any, _ngZone: NgZone, _elementRef: ElementRef<HTMLElement>, _ariaDescriber: AriaDescriber, \n    /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n    _renderer?: Renderer2 | undefined);\n    /** Whether the badge is above the host or not */\n    isAbove(): boolean;\n    /** Whether the badge is after the host or not */\n    isAfter(): boolean;\n    ngOnDestroy(): void;\n    /** Injects a span element into the DOM with the content. */\n    private _updateTextContent;\n    /** Creates the badge element */\n    private _createBadgeElement;\n    /** Sets the aria-label property on the element */\n    private _updateHostAriaDescription;\n    /** Adds css theme class given the color to the component host */\n    private _setColor;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/badge/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/badge/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './badge-module';\nexport * from './badge';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/bottom-sheet/bottom-sheet-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/** Animations used by the Material bottom sheet. */\nexport declare const matBottomSheetAnimations: {\n    readonly bottomSheetState: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/bottom-sheet/bottom-sheet-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewContainerRef, InjectionToken } from '@angular/core';\nimport { Direction } from '@angular/cdk/bidi';\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport declare const MAT_BOTTOM_SHEET_DATA: InjectionToken<any>;\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport declare class MatBottomSheetConfig<D = any> {\n    /** The view container to place the overlay for the bottom sheet into. */\n    viewContainerRef?: ViewContainerRef;\n    /** Extra CSS classes to be added to the bottom sheet container. */\n    panelClass?: string | string[];\n    /** Text layout direction for the bottom sheet. */\n    direction?: Direction;\n    /** Data being injected into the child component. */\n    data?: D | null;\n    /** Whether the bottom sheet has a backdrop. */\n    hasBackdrop?: boolean;\n    /** Custom class for the backdrop. */\n    backdropClass?: string;\n    /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n    disableClose?: boolean;\n    /** Aria label to assign to the bottom sheet element. */\n    ariaLabel?: string | null;\n    /**\n     * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    closeOnNavigation?: boolean;\n    /** Whether the bottom sheet should focus the first focusable element on open. */\n    autoFocus?: boolean;\n    /**\n     * Whether the bottom sheet should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n    restoreFocus?: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/bottom-sheet/bottom-sheet-container.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentRef, EmbeddedViewRef, OnDestroy, ElementRef, ChangeDetectorRef, EventEmitter } from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { BasePortalOutlet, ComponentPortal, TemplatePortal, CdkPortalOutlet } from '@angular/cdk/portal';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { MatBottomSheetConfig } from './bottom-sheet-config';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\nexport declare class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n    private _elementRef;\n    private _changeDetectorRef;\n    private _focusTrapFactory;\n    /** The bottom sheet configuration. */\n    bottomSheetConfig: MatBottomSheetConfig;\n    private _breakpointSubscription;\n    /** The portal outlet inside of this container into which the content will be loaded. */\n    _portalOutlet: CdkPortalOutlet;\n    /** The state of the bottom sheet animations. */\n    _animationState: 'void' | 'visible' | 'hidden';\n    /** Emits whenever the state of the animation changes. */\n    _animationStateChanged: EventEmitter<AnimationEvent>;\n    /** The class that traps and manages focus within the bottom sheet. */\n    private _focusTrap;\n    /** Element that was focused before the bottom sheet was opened. */\n    private _elementFocusedBeforeOpened;\n    /** Server-side rendering-compatible reference to the global document object. */\n    private _document;\n    /** Whether the component has been destroyed. */\n    private _destroyed;\n    constructor(_elementRef: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, _focusTrapFactory: FocusTrapFactory, breakpointObserver: BreakpointObserver, document: any, \n    /** The bottom sheet configuration. */\n    bottomSheetConfig: MatBottomSheetConfig);\n    /** Attach a component portal as content to this bottom sheet container. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    /** Attach a template portal as content to this bottom sheet container. */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    /** Begin animation of bottom sheet entrance into view. */\n    enter(): void;\n    /** Begin animation of the bottom sheet exiting from view. */\n    exit(): void;\n    ngOnDestroy(): void;\n    _onAnimationDone(event: AnimationEvent): void;\n    _onAnimationStart(event: AnimationEvent): void;\n    private _toggleClass;\n    private _validatePortalAttached;\n    private _setPanelClass;\n    /** Moves the focus inside the focus trap. */\n    private _trapFocus;\n    /** Restores focus to the element that was focused before the bottom sheet was opened. */\n    private _restoreFocus;\n    /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n    private _savePreviouslyFocusedElement;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/bottom-sheet/bottom-sheet-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatBottomSheetModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/bottom-sheet/bottom-sheet-ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Location } from '@angular/common';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { Observable } from 'rxjs';\nimport { MatBottomSheetContainer } from './bottom-sheet-container';\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport declare class MatBottomSheetRef<T = any, R = any> {\n    private _overlayRef;\n    /** Instance of the component making up the content of the bottom sheet. */\n    instance: T;\n    /**\n     * Instance of the component into which the bottom sheet content is projected.\n     * @docs-private\n     */\n    containerInstance: MatBottomSheetContainer;\n    /** Subject for notifying the user that the bottom sheet has been dismissed. */\n    private readonly _afterDismissed;\n    /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n    private readonly _afterOpened;\n    /** Result to be passed down to the `afterDismissed` stream. */\n    private _result;\n    constructor(containerInstance: MatBottomSheetContainer, _overlayRef: OverlayRef, _location?: Location);\n    /**\n     * Dismisses the bottom sheet.\n     * @param result Data to be passed back to the bottom sheet opener.\n     */\n    dismiss(result?: R): void;\n    /** Gets an observable that is notified when the bottom sheet is finished closing. */\n    afterDismissed(): Observable<R | undefined>;\n    /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n    afterOpened(): Observable<void>;\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick(): Observable<MouseEvent>;\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents(): Observable<KeyboardEvent>;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/bottom-sheet/bottom-sheet.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Overlay } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { Injector, TemplateRef, InjectionToken, OnDestroy } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { MatBottomSheetConfig } from './bottom-sheet-config';\nimport { MatBottomSheetRef } from './bottom-sheet-ref';\n/** Injection token that can be used to specify default bottom sheet options. */\nexport declare const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS: InjectionToken<MatBottomSheetConfig<any>>;\n/**\n * Service to trigger Material Design bottom sheets.\n */\nexport declare class MatBottomSheet implements OnDestroy {\n    private _overlay;\n    private _injector;\n    private _parentBottomSheet;\n    private _location?;\n    private _defaultOptions?;\n    private _bottomSheetRefAtThisLevel;\n    /** Reference to the currently opened bottom sheet. */\n    _openedBottomSheetRef: MatBottomSheetRef<any> | null;\n    constructor(_overlay: Overlay, _injector: Injector, _parentBottomSheet: MatBottomSheet, _location?: Location | undefined, _defaultOptions?: MatBottomSheetConfig<any> | undefined);\n    open<T, D = any, R = any>(component: ComponentType<T>, config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n    open<T, D = any, R = any>(template: TemplateRef<T>, config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n    /**\n     * Dismisses the currently-visible bottom sheet.\n     */\n    dismiss(): void;\n    ngOnDestroy(): void;\n    /**\n     * Attaches the bottom sheet container component to the overlay.\n     */\n    private _attachContainer;\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified bottom sheet config.\n     */\n    private _createOverlay;\n    /**\n     * Creates an injector to be used inside of a bottom sheet component.\n     * @param config Config that was used to create the bottom sheet.\n     * @param bottomSheetRef Reference to the bottom sheet.\n     */\n    private _createInjector;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/bottom-sheet/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/bottom-sheet/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './bottom-sheet-module';\nexport * from './bottom-sheet';\nexport * from './bottom-sheet-config';\nexport * from './bottom-sheet-container';\nexport * from './bottom-sheet-animations';\nexport * from './bottom-sheet-ref';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/button-toggle/button-toggle-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatButtonToggleModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/button-toggle/button-toggle.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList, InjectionToken } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanDisableRipple, CanDisableRippleCtor } from '@angular/material/core';\n/** Acceptable types for a button toggle. */\nexport declare type ToggleType = 'checkbox' | 'radio';\n/** Possible appearance styles for the button toggle. */\nexport declare type MatButtonToggleAppearance = 'legacy' | 'standard';\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n    appearance?: MatButtonToggleAppearance;\n}\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport declare const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS: InjectionToken<MatButtonToggleDefaultOptions>;\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport declare const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any;\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport declare class MatButtonToggleGroupMultiple {\n}\n/** Change event object emitted by MatButtonToggle. */\nexport declare class MatButtonToggleChange {\n    /** The MatButtonToggle that emits the event. */\n    source: MatButtonToggle;\n    /** The value assigned to the MatButtonToggle. */\n    value: any;\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source: MatButtonToggle, \n    /** The value assigned to the MatButtonToggle. */\n    value: any);\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nexport declare class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n    private _changeDetector;\n    private _vertical;\n    private _multiple;\n    private _disabled;\n    private _selectionModel;\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private _rawValue;\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    _controlValueAccessorChangeFn: (value: any) => void;\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    _onTouched: () => any;\n    /** Child button toggle buttons. */\n    _buttonToggles: QueryList<MatButtonToggle>;\n    /** The appearance for all the buttons in the group. */\n    appearance: MatButtonToggleAppearance;\n    /** `name` attribute for the underlying `input` element. */\n    name: string;\n    private _name;\n    /** Whether the toggle group is vertical. */\n    vertical: boolean;\n    /** Value of the toggle group. */\n    value: any;\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    readonly valueChange: EventEmitter<any>;\n    /** Selected button toggles in the group. */\n    readonly selected: MatButtonToggle | MatButtonToggle[];\n    /** Whether multiple button toggles can be selected. */\n    multiple: boolean;\n    /** Whether multiple button toggle group is disabled. */\n    disabled: boolean;\n    /** Event emitted when the group's value changes. */\n    readonly change: EventEmitter<MatButtonToggleChange>;\n    constructor(_changeDetector: ChangeDetectorRef, defaultOptions?: MatButtonToggleDefaultOptions);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent(): void;\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput?: boolean): void;\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle: MatButtonToggle): boolean;\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle: MatButtonToggle): boolean;\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private _setSelectionByValue;\n    /** Clears the selected toggles. */\n    private _clearSelection;\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private _selectValue;\n}\n/** @docs-private */\nexport declare class MatButtonToggleBase {\n}\nexport declare const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase;\n/** Single button inside of a toggle group. */\nexport declare class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit, CanDisableRipple, OnDestroy {\n    private _changeDetectorRef;\n    private _elementRef;\n    private _focusMonitor;\n    private _isSingleSelector;\n    private _checked;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    ariaLabel: string;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    ariaLabelledby: string | null;\n    /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n    _type: ToggleType;\n    _buttonElement: ElementRef<HTMLButtonElement>;\n    /** The parent button toggle group (exclusive selection). Optional. */\n    buttonToggleGroup: MatButtonToggleGroup;\n    /** Unique ID for the underlying `button` element. */\n    readonly buttonId: string;\n    /** The unique ID for this button toggle. */\n    id: string;\n    /** HTML's 'name' attribute used to group radios for unique selection. */\n    name: string;\n    /** MatButtonToggleGroup reads this to assign its own value. */\n    value: any;\n    /** Tabindex for the toggle. */\n    tabIndex: number | null;\n    /** The appearance style of the button. */\n    appearance: MatButtonToggleAppearance;\n    private _appearance;\n    /** Whether the button is checked. */\n    checked: boolean;\n    /** Whether the button is disabled. */\n    disabled: boolean;\n    private _disabled;\n    /** Event emitted when the group value changes. */\n    readonly change: EventEmitter<MatButtonToggleChange>;\n    constructor(toggleGroup: MatButtonToggleGroup, _changeDetectorRef: ChangeDetectorRef, _elementRef: ElementRef<HTMLElement>, _focusMonitor: FocusMonitor, defaultTabIndex: string, defaultOptions?: MatButtonToggleDefaultOptions);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /** Focuses the button. */\n    focus(): void;\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick(): void;\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/button-toggle/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/button-toggle/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './button-toggle';\nexport * from './button-toggle-module';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/button/button-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatButtonModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/button/button.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Platform } from '@angular/cdk/platform';\nimport { ElementRef, OnDestroy } from '@angular/core';\nimport { CanColor, CanDisable, CanDisableRipple, CanColorCtor, CanDisableCtor, CanDisableRippleCtor, MatRipple } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatButtonBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase;\n/**\n * Material design button.\n */\nexport declare class MatButton extends _MatButtonMixinBase implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n    /**\n     * @deprecated Platform checks for SSR are no longer needed\n     * @breaking-change 8.0.0\n     */\n    private _platform;\n    private _focusMonitor;\n    _animationMode?: string | undefined;\n    /** Whether the button is round. */\n    readonly isRoundButton: boolean;\n    /** Whether the button is icon button. */\n    readonly isIconButton: boolean;\n    /** Reference to the MatRipple instance of the button. */\n    ripple: MatRipple;\n    constructor(elementRef: ElementRef, \n    /**\n     * @deprecated Platform checks for SSR are no longer needed\n     * @breaking-change 8.0.0\n     */\n    _platform: Platform, _focusMonitor: FocusMonitor, _animationMode?: string | undefined);\n    ngOnDestroy(): void;\n    /** Focuses the button. */\n    focus(): void;\n    _getHostElement(): any;\n    _isRippleDisabled(): boolean;\n    /** Gets whether the button has one of the given attributes. */\n    _hasHostAttributes(...attributes: string[]): boolean;\n}\n/**\n * Raised Material design button.\n */\nexport declare class MatAnchor extends MatButton {\n    /** Tabindex of the button. */\n    tabIndex: number;\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef, animationMode?: string);\n    _haltDisabledEvents(event: Event): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/button/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/button/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './button-module';\nexport * from './button';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/card/card-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatCardModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/card/card.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nexport declare class MatCardContent {\n}\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nexport declare class MatCardTitle {\n}\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nexport declare class MatCardSubtitle {\n}\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nexport declare class MatCardActions {\n    /** Position of the actions inside the card. */\n    align: 'start' | 'end';\n}\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nexport declare class MatCardFooter {\n}\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nexport declare class MatCardImage {\n}\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nexport declare class MatCardSmImage {\n}\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nexport declare class MatCardMdImage {\n}\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nexport declare class MatCardLgImage {\n}\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nexport declare class MatCardXlImage {\n}\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nexport declare class MatCardAvatar {\n}\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\nexport declare class MatCard {\n}\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\nexport declare class MatCardHeader {\n}\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\nexport declare class MatCardTitleGroup {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/card/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/card/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './card';\nexport * from './card-module';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/checkbox/checkbox-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport declare type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport declare const MAT_CHECKBOX_CLICK_ACTION: InjectionToken<MatCheckboxClickAction>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/checkbox/checkbox-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatCheckboxModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/checkbox/checkbox-required-validator.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Provider } from '@angular/core';\nimport { CheckboxRequiredValidator } from '@angular/forms';\nexport declare const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider;\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nexport declare class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/checkbox/checkbox.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, AfterViewChecked } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, HasTabIndex, HasTabIndexCtor, MatRipple } from '@angular/material/core';\nimport { MatCheckboxClickAction } from './checkbox-config';\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport declare const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any;\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport declare enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init = 0,\n    /** The state representing the component when it's becoming checked. */\n    Checked = 1,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked = 2,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate = 3\n}\n/** Change event object emitted by MatCheckbox. */\nexport declare class MatCheckboxChange {\n    /** The source MatCheckbox of the event. */\n    source: MatCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n/** @docs-private */\nexport declare class MatCheckboxBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatCheckboxMixinBase: HasTabIndexCtor & CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatCheckboxBase;\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nexport declare class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor, AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n    private _changeDetectorRef;\n    private _focusMonitor;\n    private _ngZone;\n    private _clickAction;\n    _animationMode?: string | undefined;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    ariaLabel: string;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    ariaLabelledby: string | null;\n    private _uniqueId;\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    id: string;\n    /** Returns the unique id for the visual hidden input. */\n    readonly inputId: string;\n    /** Whether the checkbox is required. */\n    required: boolean;\n    private _required;\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    labelPosition: 'before' | 'after';\n    /** Name value will be applied to the input element if present */\n    name: string | null;\n    /** Event emitted when the checkbox's `checked` value changes. */\n    readonly change: EventEmitter<MatCheckboxChange>;\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    readonly indeterminateChange: EventEmitter<boolean>;\n    /** The value attribute of the native input element */\n    value: string;\n    /** The native `<input type=\"checkbox\">` element */\n    _inputElement: ElementRef<HTMLInputElement>;\n    /** Reference to the ripple instance of the checkbox. */\n    ripple: MatRipple;\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any;\n    private _currentAnimationClass;\n    private _currentCheckState;\n    private _controlValueAccessorChangeFn;\n    constructor(elementRef: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, _focusMonitor: FocusMonitor, _ngZone: NgZone, tabIndex: string, _clickAction: MatCheckboxClickAction, _animationMode?: string | undefined);\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    /**\n     * Whether the checkbox is checked.\n     */\n    checked: boolean;\n    private _checked;\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    disabled: any;\n    private _disabled;\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    indeterminate: boolean;\n    private _indeterminate;\n    _isRippleDisabled(): any;\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange(): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    _getAriaChecked(): 'true' | 'false' | 'mixed';\n    private _transitionCheckState;\n    private _emitChangeEvent;\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void;\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event): void;\n    /** Focuses the checkbox. */\n    focus(): void;\n    _onInteractionEvent(event: Event): void;\n    private _getAnimationClassForCheckStateTransition;\n    /**\n     * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n     * for the application.\n     */\n    private _calculateRippleRadius;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/checkbox/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/checkbox/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './checkbox';\nexport * from './checkbox-config';\nexport * from './checkbox-module';\nexport * from './checkbox-required-validator';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/chips/chip-default-options.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n    /** The list of key codes that will trigger a chipEnd event. */\n    separatorKeyCodes: number[] | Set<number>;\n}\n/** Injection token to be used to override the default options for the chips module. */\nexport declare const MAT_CHIPS_DEFAULT_OPTIONS: InjectionToken<MatChipsDefaultOptions>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/chips/chip-input.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, EventEmitter, OnChanges } from '@angular/core';\nimport { MatChipsDefaultOptions } from './chip-default-options';\nimport { MatChipList } from './chip-list';\nimport { MatChipTextControl } from './chip-text-control';\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n    /** The native `<input>` element that the event is being fired for. */\n    input: HTMLInputElement;\n    /** The value of the input. */\n    value: string;\n}\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nexport declare class MatChipInput implements MatChipTextControl, OnChanges {\n    protected _elementRef: ElementRef<HTMLInputElement>;\n    private _defaultOptions;\n    /** Whether the control is focused. */\n    focused: boolean;\n    _chipList: MatChipList;\n    /** Register input for chip list */\n    chipList: MatChipList;\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    addOnBlur: boolean;\n    _addOnBlur: boolean;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    separatorKeyCodes: number[] | Set<number>;\n    /** Emitted when a chip is to be added. */\n    chipEnd: EventEmitter<MatChipInputEvent>;\n    /** The input's placeholder text. */\n    placeholder: string;\n    /** Unique id for the input. */\n    id: string;\n    /** Whether the input is disabled. */\n    disabled: boolean;\n    private _disabled;\n    /** Whether the input is empty. */\n    readonly empty: boolean;\n    /** The native input element to which this directive is attached. */\n    protected _inputElement: HTMLInputElement;\n    constructor(_elementRef: ElementRef<HTMLInputElement>, _defaultOptions: MatChipsDefaultOptions);\n    ngOnChanges(): void;\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event?: KeyboardEvent): void;\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur(): void;\n    _focus(): void;\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event?: KeyboardEvent): void;\n    _onInput(): void;\n    /** Focuses the input. */\n    focus(): void;\n    /** Checks whether a keycode is one of the configured separators. */\n    private _isSeparatorKey;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/chips/chip-list.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { AfterContentInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { CanUpdateErrorState, CanUpdateErrorStateCtor, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Observable } from 'rxjs';\nimport { MatChip, MatChipEvent, MatChipSelectionChange } from './chip';\nimport { MatChipTextControl } from './chip-text-control';\n/** @docs-private */\nexport declare class MatChipListBase {\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    _parentForm: NgForm;\n    _parentFormGroup: FormGroupDirective;\n    /** @docs-private */\n    ngControl: NgControl;\n    constructor(_defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, \n    /** @docs-private */\n    ngControl: NgControl);\n}\nexport declare const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase;\n/** Change event object that is emitted when the chip list value has changed. */\nexport declare class MatChipListChange {\n    /** Chip list that emitted the event. */\n    source: MatChipList;\n    /** Value of the chip list when the event was emitted. */\n    value: any;\n    constructor(\n    /** Chip list that emitted the event. */\n    source: MatChipList, \n    /** Value of the chip list when the event was emitted. */\n    value: any);\n}\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\nexport declare class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>, ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n    protected _elementRef: ElementRef<HTMLElement>;\n    private _changeDetectorRef;\n    private _dir;\n    /** @docs-private */\n    ngControl: NgControl;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly controlType: string;\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     */\n    private _lastDestroyedChipIndex;\n    /** Subject that emits when the component has been destroyed. */\n    private _destroyed;\n    /** Subscription to focus changes in the chips. */\n    private _chipFocusSubscription;\n    /** Subscription to blur changes in the chips. */\n    private _chipBlurSubscription;\n    /** Subscription to selection changes in chips. */\n    private _chipSelectionSubscription;\n    /** Subscription to remove changes in chips. */\n    private _chipRemoveSubscription;\n    /** The chip input to add more chips */\n    protected _chipInput: MatChipTextControl;\n    /** Uid of the chip list */\n    _uid: string;\n    /** The aria-describedby attribute on the chip list for improved a11y. */\n    _ariaDescribedby: string;\n    /** Tab index for the chip list. */\n    _tabIndex: number;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n    _userTabIndex: number | null;\n    /** The FocusKeyManager which handles focus. */\n    _keyManager: FocusKeyManager<MatChip>;\n    /** Function when touched */\n    _onTouched: () => void;\n    /** Function when changed */\n    _onChange: (value: any) => void;\n    _selectionModel: SelectionModel<MatChip>;\n    /** The array of selected chips inside chip list. */\n    readonly selected: MatChip[] | MatChip;\n    /** The ARIA role applied to the chip list. */\n    readonly role: string | null;\n    /** An object used to control when error messages are shown. */\n    errorStateMatcher: ErrorStateMatcher;\n    /** Whether the user should be allowed to select multiple chips. */\n    multiple: boolean;\n    private _multiple;\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    compareWith: (o1: any, o2: any) => boolean;\n    private _compareWith;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    value: any;\n    protected _value: any;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly id: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    required: boolean;\n    protected _required: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    placeholder: string;\n    protected _placeholder: string;\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    readonly focused: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly empty: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly shouldLabelFloat: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    disabled: boolean;\n    protected _disabled: boolean;\n    /** Orientation of the chip list. */\n    ariaOrientation: 'horizontal' | 'vertical';\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n    selectable: boolean;\n    protected _selectable: boolean;\n    tabIndex: number;\n    /** Combined stream of all of the child chips' selection change events. */\n    readonly chipSelectionChanges: Observable<MatChipSelectionChange>;\n    /** Combined stream of all of the child chips' focus change events. */\n    readonly chipFocusChanges: Observable<MatChipEvent>;\n    /** Combined stream of all of the child chips' blur change events. */\n    readonly chipBlurChanges: Observable<MatChipEvent>;\n    /** Combined stream of all of the child chips' remove change events. */\n    readonly chipRemoveChanges: Observable<MatChipEvent>;\n    /** Event emitted when the selected chip list value has been changed by the user. */\n    readonly change: EventEmitter<MatChipListChange>;\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    readonly valueChange: EventEmitter<any>;\n    /** The chip components contained within this chip list. */\n    chips: QueryList<MatChip>;\n    constructor(_elementRef: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, _dir: Directionality, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _defaultErrorStateMatcher: ErrorStateMatcher, \n    /** @docs-private */\n    ngControl: NgControl);\n    ngAfterContentInit(): void;\n    ngOnInit(): void;\n    ngDoCheck(): void;\n    ngOnDestroy(): void;\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement: MatChipTextControl): void;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids: string[]): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: () => void): void;\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event: MouseEvent): void;\n    /**\n     * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(): void;\n    /** Attempt to focus an input if we have one. */\n    _focusInput(): void;\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event: KeyboardEvent): void;\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    protected _updateTabIndex(): void;\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    protected _updateFocusForDestroyedChips(): void;\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    private _isValidIndex;\n    private _isInputEmpty;\n    _setSelectionByValue(value: any, isUserInput?: boolean): void;\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    private _selectValue;\n    private _initializeSelection;\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    private _clearSelection;\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private _sortValues;\n    /** Emits change event to set the model value. */\n    private _propagateChanges;\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur(): void;\n    /** Mark the field as touched */\n    _markAsTouched(): void;\n    private _resetChips;\n    private _dropSubscriptions;\n    /** Listens to user-generated selection events on each chip. */\n    private _listenToChipsSelection;\n    /** Listens to user-generated selection events on each chip. */\n    private _listenToChipsFocus;\n    private _listenToChipsRemoved;\n    /** Checks whether an event comes from inside a chip element. */\n    private _originatesFromChip;\n    /** Checks whether any of the chips is focused. */\n    private _hasFocusedChip;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/chips/chip-text-control.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Interface for a text control that is used to drive interaction with a mat-chip-list. */\nexport interface MatChipTextControl {\n    /** Unique identifier for the text control. */\n    id: string;\n    /** The text control's placeholder text. */\n    placeholder: string;\n    /** Whether the text control has browser focus. */\n    focused: boolean;\n    /** Whether the text control is empty. */\n    empty: boolean;\n    /** Focuses the text control. */\n    focus(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/chips/chip.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusableOption } from '@angular/cdk/a11y';\nimport { Platform } from '@angular/cdk/platform';\nimport { ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, RippleConfig, RippleGlobalOptions, RippleTarget } from '@angular/material/core';\nimport { Subject } from 'rxjs';\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n    /** The chip the event was fired on. */\n    chip: MatChip;\n}\n/** Event object emitted by MatChip when selected or deselected. */\nexport declare class MatChipSelectionChange {\n    /** Reference to the chip that emitted the event. */\n    source: MatChip;\n    /** Whether the chip that emitted the event is selected. */\n    selected: boolean;\n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput: boolean;\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source: MatChip, \n    /** Whether the chip that emitted the event is selected. */\n    selected: boolean, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput?: boolean);\n}\n/** @docs-private */\nexport declare class MatChipBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase;\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nexport declare class MatChipAvatar {\n}\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nexport declare class MatChipTrailingIcon {\n}\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nexport declare class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor, CanDisable, CanDisableRipple, RippleTarget {\n    _elementRef: ElementRef;\n    private _ngZone;\n    /** Reference to the RippleRenderer for the chip. */\n    private _chipRipple;\n    /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n    private _ripplesGloballyDisabled;\n    /**\n     * Ripple configuration for ripples that are launched on pointer down.\n     * @docs-private\n     */\n    rippleConfig: RippleConfig;\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    readonly rippleDisabled: boolean;\n    /** Whether the chip has focus. */\n    _hasFocus: boolean;\n    /** Whether the chip list is selectable */\n    chipListSelectable: boolean;\n    /** The chip avatar */\n    avatar: MatChipAvatar;\n    /** The chip's trailing icon. */\n    trailingIcon: MatChipTrailingIcon;\n    /** The chip's remove toggler. */\n    removeIcon: MatChipRemove;\n    /** Whether the chip is selected. */\n    selected: boolean;\n    protected _selected: boolean;\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    value: any;\n    protected _value: any;\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to it's selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if it's parent chip list is\n     * not selectable.\n     */\n    selectable: boolean;\n    protected _selectable: boolean;\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    removable: boolean;\n    protected _removable: boolean;\n    /** Emits when the chip is focused. */\n    readonly _onFocus: Subject<MatChipEvent>;\n    /** Emits when the chip is blured. */\n    readonly _onBlur: Subject<MatChipEvent>;\n    /** Emitted when the chip is selected or deselected. */\n    readonly selectionChange: EventEmitter<MatChipSelectionChange>;\n    /** Emitted when the chip is destroyed. */\n    readonly destroyed: EventEmitter<MatChipEvent>;\n    /** Emitted when a chip is to be removed. */\n    readonly removed: EventEmitter<MatChipEvent>;\n    /** The ARIA selected applied to the chip. */\n    readonly ariaSelected: string | null;\n    constructor(_elementRef: ElementRef, _ngZone: NgZone, platform: Platform, globalOptions: RippleGlobalOptions);\n    _addHostClassName(): void;\n    ngOnDestroy(): void;\n    /** Selects the chip. */\n    select(): void;\n    /** Deselects the chip. */\n    deselect(): void;\n    /** Select this chip and emit selected event */\n    selectViaInteraction(): void;\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput?: boolean): boolean;\n    /** Allows for programmatic focusing of the chip. */\n    focus(): void;\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove(): void;\n    /** Handles click events on the chip. */\n    _handleClick(event: Event): void;\n    /** Handle custom key presses. */\n    _handleKeydown(event: KeyboardEvent): void;\n    _blur(): void;\n    private _dispatchSelectionChange;\n}\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nexport declare class MatChipRemove {\n    protected _parentChip: MatChip;\n    constructor(_parentChip: MatChip);\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event: Event): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/chips/chips-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatChipsModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/chips/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/chips/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './chips-module';\nexport * from './chip-list';\nexport * from './chip';\nexport * from './chip-input';\nexport * from './chip-default-options';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/animation/animation.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nexport declare class AnimationCurves {\n    static STANDARD_CURVE: string;\n    static DECELERATION_CURVE: string;\n    static ACCELERATION_CURVE: string;\n    static SHARP_CURVE: string;\n}\n/** @docs-private */\nexport declare class AnimationDurations {\n    static COMPLEX: string;\n    static ENTERING: string;\n    static EXITING: string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/common-behaviors/color.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Constructor } from './constructor';\nimport { ElementRef } from '@angular/core';\n/** @docs-private */\nexport interface CanColor {\n    /** Theme color palette for the component. */\n    color: ThemePalette;\n}\n/** @docs-private */\nexport declare type CanColorCtor = Constructor<CanColor>;\n/** @docs-private */\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n/** Possible color palette values. */\nexport declare type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/** Mixin to augment a directive with a `color` property. */\nexport declare function mixinColor<T extends Constructor<HasElementRef>>(base: T, defaultColor?: ThemePalette): CanColorCtor & T;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/common-behaviors/common-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { HammerLoader } from '@angular/platform-browser';\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport declare const MATERIAL_SANITY_CHECKS: InjectionToken<boolean>;\n/** @docs-private */\nexport declare function MATERIAL_SANITY_CHECKS_FACTORY(): boolean;\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\nexport declare class MatCommonModule {\n    private _sanityChecksEnabled;\n    private _hammerLoader?;\n    /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n    private _hasDoneGlobalChecks;\n    /** Whether we've already checked for HammerJs availability. */\n    private _hasCheckedHammer;\n    /** Reference to the global `document` object. */\n    private _document;\n    /** Reference to the global 'window' object. */\n    private _window;\n    constructor(_sanityChecksEnabled: boolean, _hammerLoader?: HammerLoader | undefined);\n    /** Whether any sanity checks are enabled */\n    private _areChecksEnabled;\n    /** Whether the code is running in tests. */\n    private _isTestEnv;\n    private _checkDoctypeIsDefined;\n    private _checkThemeIsPresent;\n    /** Checks whether HammerJS is available. */\n    _checkHammerIsAvailable(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/common-behaviors/constructor.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nexport declare type Constructor<T> = new (...args: any[]) => T;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/common-behaviors/disable-ripple.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Constructor } from './constructor';\n/** @docs-private */\nexport interface CanDisableRipple {\n    /** Whether ripples are disabled. */\n    disableRipple: boolean;\n}\n/** @docs-private */\nexport declare type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport declare function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/common-behaviors/disabled.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Constructor } from './constructor';\n/** @docs-private */\nexport interface CanDisable {\n    /** Whether the component is disabled. */\n    disabled: boolean;\n}\n/** @docs-private */\nexport declare type CanDisableCtor = Constructor<CanDisable>;\n/** Mixin to augment a directive with a `disabled` property. */\nexport declare function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/common-behaviors/error-state.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { ErrorStateMatcher } from '../error/error-options';\nimport { Constructor } from './constructor';\n/** @docs-private */\nexport interface CanUpdateErrorState {\n    updateErrorState(): void;\n    readonly stateChanges: Subject<void>;\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n}\n/** @docs-private */\nexport declare type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport declare function mixinErrorState<T extends Constructor<HasErrorState>>(base: T): CanUpdateErrorStateCtor & T;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/common-behaviors/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { MatCommonModule, MATERIAL_SANITY_CHECKS } from './common-module';\nexport { CanDisable, CanDisableCtor, mixinDisabled } from './disabled';\nexport { CanColor, CanColorCtor, mixinColor, ThemePalette } from './color';\nexport { CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple } from './disable-ripple';\nexport { HasTabIndex, HasTabIndexCtor, mixinTabIndex } from './tabindex';\nexport { CanUpdateErrorState, CanUpdateErrorStateCtor, mixinErrorState } from './error-state';\nexport { HasInitialized, HasInitializedCtor, mixinInitialized } from './initialized';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/common-behaviors/initialized.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { Constructor } from './constructor';\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n    /** Stream that emits once during the directive/component's ngOnInit. */\n    initialized: Observable<void>;\n    /**\n     * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n     * the directive has been initialized.\n     * @docs-private\n     */\n    _markInitialized: () => void;\n}\n/** @docs-private */\nexport declare type HasInitializedCtor = Constructor<HasInitialized>;\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport declare function mixinInitialized<T extends Constructor<{}>>(base: T): HasInitializedCtor & T;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/common-behaviors/tabindex.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n/** @docs-private */\nexport interface HasTabIndex {\n    /** Tabindex of the component. */\n    tabIndex: number;\n}\n/** @docs-private */\nexport declare type HasTabIndexCtor = Constructor<HasTabIndex>;\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport declare function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex?: number): HasTabIndexCtor & T;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/datetime/date-adapter.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport declare const MAT_DATE_LOCALE: InjectionToken<string>;\n/** @docs-private */\nexport declare function MAT_DATE_LOCALE_FACTORY(): string;\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport declare const MAT_DATE_LOCALE_PROVIDER: {\n    provide: InjectionToken<string>;\n    useExisting: InjectionToken<string>;\n};\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport declare abstract class DateAdapter<D> {\n    /** The locale to use for all dates. */\n    protected locale: any;\n    /** A stream that emits when the locale changes. */\n    readonly localeChanges: Observable<void>;\n    protected _localeChanges: Subject<void>;\n    /**\n     * Gets the year component of the given date.\n     * @param date The date to extract the year from.\n     * @returns The year component.\n     */\n    abstract getYear(date: D): number;\n    /**\n     * Gets the month component of the given date.\n     * @param date The date to extract the month from.\n     * @returns The month component (0-indexed, 0 = January).\n     */\n    abstract getMonth(date: D): number;\n    /**\n     * Gets the date of the month component of the given date.\n     * @param date The date to extract the date of the month from.\n     * @returns The month component (1-indexed, 1 = first of month).\n     */\n    abstract getDate(date: D): number;\n    /**\n     * Gets the day of the week component of the given date.\n     * @param date The date to extract the day of the week from.\n     * @returns The month component (0-indexed, 0 = Sunday).\n     */\n    abstract getDayOfWeek(date: D): number;\n    /**\n     * Gets a list of names for the months.\n     * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n     * @returns An ordered list of all month names, starting with January.\n     */\n    abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n    /**\n     * Gets a list of names for the dates of the month.\n     * @returns An ordered list of all date of the month names, starting with '1'.\n     */\n    abstract getDateNames(): string[];\n    /**\n     * Gets a list of names for the days of the week.\n     * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n     * @returns An ordered list of all weekday names, starting with Sunday.\n     */\n    abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n    /**\n     * Gets the name for the year of the given date.\n     * @param date The date to get the year name for.\n     * @returns The name of the given year (e.g. '2017').\n     */\n    abstract getYearName(date: D): string;\n    /**\n     * Gets the first day of the week.\n     * @returns The first day of the week (0-indexed, 0 = Sunday).\n     */\n    abstract getFirstDayOfWeek(): number;\n    /**\n     * Gets the number of days in the month of the given date.\n     * @param date The date whose month should be checked.\n     * @returns The number of days in the month of the given date.\n     */\n    abstract getNumDaysInMonth(date: D): number;\n    /**\n     * Clones the given date.\n     * @param date The date to clone\n     * @returns A new date equal to the given date.\n     */\n    abstract clone(date: D): D;\n    /**\n     * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n     * month and date.\n     * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n     * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n     * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n     * @returns The new date, or null if invalid.\n     */\n    abstract createDate(year: number, month: number, date: number): D;\n    /**\n     * Gets today's date.\n     * @returns Today's date.\n     */\n    abstract today(): D;\n    /**\n     * Parses a date from a user-provided value.\n     * @param value The value to parse.\n     * @param parseFormat The expected format of the value being parsed\n     *     (type is implementation-dependent).\n     * @returns The parsed date.\n     */\n    abstract parse(value: any, parseFormat: any): D | null;\n    /**\n     * Formats a date as a string according to the given format.\n     * @param date The value to format.\n     * @param displayFormat The format to use to display the date as a string.\n     * @returns The formatted date string.\n     */\n    abstract format(date: D, displayFormat: any): string;\n    /**\n     * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n     * calendar for each year and then finding the closest date in the new month. For example when\n     * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n     * @param date The date to add years to.\n     * @param years The number of years to add (may be negative).\n     * @returns A new date equal to the given one with the specified number of years added.\n     */\n    abstract addCalendarYears(date: D, years: number): D;\n    /**\n     * Adds the given number of months to the date. Months are counted as if flipping a page on the\n     * calendar for each month and then finding the closest date in the new month. For example when\n     * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n     * @param date The date to add months to.\n     * @param months The number of months to add (may be negative).\n     * @returns A new date equal to the given one with the specified number of months added.\n     */\n    abstract addCalendarMonths(date: D, months: number): D;\n    /**\n     * Adds the given number of days to the date. Days are counted as if moving one cell on the\n     * calendar for each day.\n     * @param date The date to add days to.\n     * @param days The number of days to add (may be negative).\n     * @returns A new date equal to the given one with the specified number of days added.\n     */\n    abstract addCalendarDays(date: D, days: number): D;\n    /**\n     * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n     * This method is used to generate date strings that are compatible with native HTML attributes\n     * such as the `min` or `max` attribute of an `<input>`.\n     * @param date The date to get the ISO date string for.\n     * @returns The ISO date string date string.\n     */\n    abstract toIso8601(date: D): string;\n    /**\n     * Checks whether the given object is considered a date instance by this DateAdapter.\n     * @param obj The object to check\n     * @returns Whether the object is a date instance.\n     */\n    abstract isDateInstance(obj: any): boolean;\n    /**\n     * Checks whether the given date is valid.\n     * @param date The date to check.\n     * @returns Whether the date is valid.\n     */\n    abstract isValid(date: D): boolean;\n    /**\n     * Gets date instance that is not valid.\n     * @returns An invalid date.\n     */\n    abstract invalid(): D;\n    /**\n     * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n     * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n     * string). The default implementation does not allow any deserialization, it simply checks that\n     * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n     * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n     * support passing values from your backend directly to these properties by overriding this method\n     * to also deserialize the format used by your backend.\n     * @param value The value to be deserialized into a date object.\n     * @returns The deserialized date object, either a valid date, null if the value can be\n     *     deserialized into a null date (e.g. the empty string), or an invalid date.\n     */\n    deserialize(value: any): D | null;\n    /**\n     * Sets the locale used for all dates.\n     * @param locale The new locale.\n     */\n    setLocale(locale: any): void;\n    /**\n     * Compares two dates.\n     * @param first The first date to compare.\n     * @param second The second date to compare.\n     * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n     *     a number greater than 0 if the first date is later.\n     */\n    compareDate(first: D, second: D): number;\n    /**\n     * Checks if two dates are equal.\n     * @param first The first date to check.\n     * @param second The second date to check.\n     * @returns Whether the two dates are equal.\n     *     Null dates are considered equal to other null dates.\n     */\n    sameDate(first: D | null, second: D | null): boolean;\n    /**\n     * Clamp the given date between min and max dates.\n     * @param date The date to clamp.\n     * @param min The minimum value to allow. If null or omitted no min is enforced.\n     * @param max The maximum value to allow. If null or omitted no max is enforced.\n     * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n     *     otherwise `date`.\n     */\n    clampDate(date: D, min?: D | null, max?: D | null): D;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/datetime/date-formats.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nexport declare type MatDateFormats = {\n    parse: {\n        dateInput: any;\n    };\n    display: {\n        dateInput: any;\n        monthYearLabel: any;\n        dateA11yLabel: any;\n        monthYearA11yLabel: any;\n    };\n};\nexport declare const MAT_DATE_FORMATS: InjectionToken<MatDateFormats>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/datetime/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\nexport declare class NativeDateModule {\n}\nexport declare class MatNativeDateModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/datetime/native-date-adapter.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { DateAdapter } from './date-adapter';\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\nexport declare class NativeDateAdapter extends DateAdapter<Date> {\n    /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n    private readonly _clampDate;\n    /**\n     * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n     * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n     * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n     * will produce `'8/13/1800'`.\n     *\n     * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n     * getting the string representation of a Date object from it's utc representation. We're keeping\n     * it here for sometime, just for precaution, in case we decide to revert some of these changes\n     * though.\n     */\n    useUtcForDisplay: boolean;\n    constructor(matDateLocale: string, platform: Platform);\n    getYear(date: Date): number;\n    getMonth(date: Date): number;\n    getDate(date: Date): number;\n    getDayOfWeek(date: Date): number;\n    getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n    getDateNames(): string[];\n    getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n    getYearName(date: Date): string;\n    getFirstDayOfWeek(): number;\n    getNumDaysInMonth(date: Date): number;\n    clone(date: Date): Date;\n    createDate(year: number, month: number, date: number): Date;\n    today(): Date;\n    parse(value: any): Date | null;\n    format(date: Date, displayFormat: Object): string;\n    addCalendarYears(date: Date, years: number): Date;\n    addCalendarMonths(date: Date, months: number): Date;\n    addCalendarDays(date: Date, days: number): Date;\n    toIso8601(date: Date): string;\n    /**\n     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n     * invalid date for all other values.\n     */\n    deserialize(value: any): Date | null;\n    isDateInstance(obj: any): boolean;\n    isValid(date: Date): boolean;\n    invalid(): Date;\n    /** Creates a date but allows the month and date to overflow. */\n    private _createDateWithOverflow;\n    /**\n     * Pads a number to make it two digits.\n     * @param n The number to pad.\n     * @returns The padded number.\n     */\n    private _2digit;\n    /**\n     * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n     * other browsers do not. We remove them to make output consistent and because they interfere with\n     * date parsing.\n     * @param str The string to strip direction characters from.\n     * @returns The stripped string.\n     */\n    private _stripDirectionalityCharacters;\n    /**\n     * When converting Date object to string, javascript built-in functions may return wrong\n     * results because it applies its internal DST rules. The DST rules around the world change\n     * very frequently, and the current valid rule is not always valid in previous years though.\n     * We work around this problem building a new Date object which has its internal UTC\n     * representation with the local date and time.\n     * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n     *    timeZone set to 'utc' to work fine.\n     * @param date Date from which we want to get the string representation according to dtf\n     * @returns A Date object with its UTC representation based on the passed in date info\n     */\n    private _format;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/datetime/native-date-formats.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MatDateFormats } from './date-formats';\nexport declare const MAT_NATIVE_DATE_FORMATS: MatDateFormats;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/error/error-options.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n/** Error state matcher that matches when a control is invalid and dirty. */\nexport declare class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;\n}\n/** Provider that defines how form controls behave with regards to displaying error messages. */\nexport declare class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/gestures/gesture-annotations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Stripped-down HammerJS annotations to be used within Material, which are necessary,\n * because HammerJS is an optional dependency. For the full annotations see:\n * https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/hammerjs/index.d.ts\n */\n/** @docs-private */\nexport interface HammerInput {\n    preventDefault: () => {};\n    deltaX: number;\n    deltaY: number;\n    center: {\n        x: number;\n        y: number;\n    };\n}\n/** @docs-private */\nexport interface HammerStatic {\n    new (element: HTMLElement | SVGElement, options?: any): HammerManager;\n    Pan: Recognizer;\n    Swipe: Recognizer;\n    Press: Recognizer;\n}\n/** @docs-private */\nexport interface Recognizer {\n    new (options?: any): Recognizer;\n    recognizeWith(otherRecognizer: Recognizer | string): Recognizer;\n}\n/** @docs-private */\nexport interface RecognizerStatic {\n    new (options?: any): Recognizer;\n}\n/** @docs-private */\nexport interface HammerInstance {\n    on(eventName: string, callback: Function): void;\n    off(eventName: string, callback: Function): void;\n}\n/** @docs-private */\nexport interface HammerManager {\n    add(recogniser: Recognizer | Recognizer[]): Recognizer;\n    set(options: any): HammerManager;\n    emit(event: string, data: any): void;\n    off(events: string, handler?: Function): void;\n    on(events: string, handler: Function): void;\n}\n/** @docs-private */\nexport interface HammerOptions {\n    cssProps?: {\n        [key: string]: string;\n    };\n    domEvents?: boolean;\n    enable?: boolean | ((manager: HammerManager) => boolean);\n    preset?: any[];\n    touchAction?: string;\n    recognizers?: any[];\n    inputClass?: HammerInput;\n    inputTarget?: EventTarget;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/gestures/gesture-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { HammerGestureConfig } from '@angular/platform-browser';\nimport { MatCommonModule } from '../common-behaviors/common-module';\nimport { HammerInstance, HammerOptions } from './gesture-annotations';\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport declare const MAT_HAMMER_OPTIONS: InjectionToken<HammerOptions>;\n/** Adjusts configuration of our gesture library, Hammer. */\nexport declare class GestureConfig extends HammerGestureConfig {\n    private _hammerOptions?;\n    /** List of new event names to add to the gesture support list */\n    events: string[];\n    constructor(_hammerOptions?: HammerOptions | undefined, commonModule?: MatCommonModule);\n    /**\n     * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n     *\n     * Our gesture names come from the Material Design gestures spec:\n     * https://material.io/design/#gestures-touch-mechanics\n     *\n     * More information on default recognizers can be found in Hammer docs:\n     * http://hammerjs.github.io/recognizer-pan/\n     * http://hammerjs.github.io/recognizer-press/\n     *\n     * @param element Element to which to assign the new HammerJS gestures.\n     * @returns Newly-created HammerJS instance.\n     */\n    buildHammer(element: HTMLElement): HammerInstance;\n    /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n    private _createRecognizer;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { MATERIAL_SANITY_CHECKS_FACTORY as ɵa1 } from './common-behaviors/common-module';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/label/label-options.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/** InjectionToken that can be used to specify the global label options. */\nexport declare const MAT_LABEL_GLOBAL_OPTIONS: InjectionToken<LabelOptions>;\n/** Type for the available floatLabel values. */\nexport declare type FloatLabelType = 'always' | 'never' | 'auto';\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/line/line.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, QueryList } from '@angular/core';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\nexport declare class MatLine {\n}\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport declare function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>): void;\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport declare class MatLineSetter {\n    constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>);\n}\nexport declare class MatLineModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/option/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatOptionModule {\n}\nexport * from './option';\nexport * from './optgroup';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/option/optgroup.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CanDisable, CanDisableCtor } from '../common-behaviors/disabled';\n/** @docs-private */\nexport declare class MatOptgroupBase {\n}\nexport declare const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase;\n/**\n * Component that is used to group instances of `mat-option`.\n */\nexport declare class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    label: string;\n    /** Unique id for the underlying label. */\n    _labelId: string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/option/option.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterViewChecked, ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, OnDestroy, QueryList } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MatOptgroup } from './optgroup';\n/** Event object emitted by MatOption when selected or deselected. */\nexport declare class MatOptionSelectionChange {\n    /** Reference to the option that emitted the event. */\n    source: MatOption;\n    /** Whether the change in the option's value was a result of a user action. */\n    isUserInput: boolean;\n    constructor(\n    /** Reference to the option that emitted the event. */\n    source: MatOption, \n    /** Whether the change in the option's value was a result of a user action. */\n    isUserInput?: boolean);\n}\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n    disableRipple?: boolean;\n    multiple?: boolean;\n}\n/**\n * Injection token used to provide the parent component to options.\n */\nexport declare const MAT_OPTION_PARENT_COMPONENT: InjectionToken<MatOptionParentComponent>;\n/**\n * Single option inside of a `<mat-select>` element.\n */\nexport declare class MatOption implements AfterViewChecked, OnDestroy {\n    private _element;\n    private _changeDetectorRef;\n    private _parent;\n    readonly group: MatOptgroup;\n    private _selected;\n    private _active;\n    private _disabled;\n    private _mostRecentViewValue;\n    /** Whether the wrapping component is in multiple selection mode. */\n    readonly multiple: boolean | undefined;\n    /** Whether or not the option is currently selected. */\n    readonly selected: boolean;\n    /** The form value of the option. */\n    value: any;\n    /** The unique ID of the option. */\n    id: string;\n    /** Whether the option is disabled. */\n    disabled: any;\n    /** Whether ripples for the option are disabled. */\n    readonly disableRipple: boolean | undefined;\n    /** Event emitted when the option is selected or deselected. */\n    readonly onSelectionChange: EventEmitter<MatOptionSelectionChange>;\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly _stateChanges: Subject<void>;\n    constructor(_element: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, _parent: MatOptionParentComponent, group: MatOptgroup);\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    readonly active: boolean;\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    readonly viewValue: string;\n    /** Selects the option. */\n    select(): void;\n    /** Deselects the option. */\n    deselect(): void;\n    /** Sets focus onto this option. */\n    focus(): void;\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void;\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void;\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string;\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event: KeyboardEvent): void;\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction(): void;\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    _getTabIndex(): string;\n    /** Gets the host DOM element. */\n    _getHostElement(): HTMLElement;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    /** Emits the selection change event. */\n    private _emitSelectionChangeEvent;\n}\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport declare function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>, optionGroups: QueryList<MatOptgroup>): number;\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport declare function _getOptionScrollPosition(optionIndex: number, optionHeight: number, currentScrollPosition: number, panelHeight: number): number;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './animation/animation';\nexport * from './common-behaviors/index';\nexport * from './datetime/index';\nexport * from './error/error-options';\nexport * from './gestures/gesture-annotations';\nexport * from './gestures/gesture-config';\nexport * from './line/line';\nexport * from './option/index';\nexport * from './label/label-options';\nexport * from './ripple/index';\nexport * from './selection/index';\nexport * from './testing/month-constants';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/ripple/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\nexport declare class MatRippleModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/ripple/ripple-ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { RippleConfig, RippleRenderer } from './ripple-renderer';\n/** Possible states for a ripple element. */\nexport declare enum RippleState {\n    FADING_IN = 0,\n    VISIBLE = 1,\n    FADING_OUT = 2,\n    HIDDEN = 3\n}\n/**\n * Reference to a previously launched ripple element.\n */\nexport declare class RippleRef {\n    private _renderer;\n    /** Reference to the ripple HTML element. */\n    element: HTMLElement;\n    /** Ripple configuration used for the ripple. */\n    config: RippleConfig;\n    /** Current state of the ripple. */\n    state: RippleState;\n    constructor(_renderer: RippleRenderer, \n    /** Reference to the ripple HTML element. */\n    element: HTMLElement, \n    /** Ripple configuration used for the ripple. */\n    config: RippleConfig);\n    /** Fades out the ripple element. */\n    fadeOut(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/ripple/ripple-renderer.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, NgZone } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { RippleRef } from './ripple-ref';\nexport declare type RippleConfig = {\n    color?: string;\n    centered?: boolean;\n    radius?: number;\n    persistent?: boolean;\n    animation?: RippleAnimationConfig;\n    terminateOnPointerUp?: boolean;\n};\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n    /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n    enterDuration?: number;\n    /** Duration in milliseconds for the exit animation (fade-out). */\n    exitDuration?: number;\n}\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n    /** Configuration for ripples that are launched on pointer down. */\n    rippleConfig: RippleConfig;\n    /** Whether ripples on pointer down should be disabled. */\n    rippleDisabled: boolean;\n}\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport declare const defaultRippleAnimationConfig: {\n    enterDuration: number;\n    exitDuration: number;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport declare class RippleRenderer {\n    private _target;\n    private _ngZone;\n    /** Element where the ripples are being added to. */\n    private _containerElement;\n    /** Element which triggers the ripple elements on mouse events. */\n    private _triggerElement;\n    /** Whether the pointer is currently down or not. */\n    private _isPointerDown;\n    /** Events to be registered on the trigger element. */\n    private _triggerEvents;\n    /** Set of currently active ripple references. */\n    private _activeRipples;\n    /** Latest non-persistent ripple that was triggered. */\n    private _mostRecentTransientRipple;\n    /** Time in milliseconds when the last touchstart event happened. */\n    private _lastTouchStartEvent;\n    /**\n     * Cached dimensions of the ripple container. Set when the first\n     * ripple is shown and cleared once no more ripples are visible.\n     */\n    private _containerRect;\n    constructor(_target: RippleTarget, _ngZone: NgZone, elementRef: ElementRef<HTMLElement>, platform: Platform);\n    /**\n     * Fades in a ripple at the given coordinates.\n     * @param x Coordinate within the element, along the X axis at which to start the ripple.\n     * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n     * @param config Extra ripple options.\n     */\n    fadeInRipple(x: number, y: number, config?: RippleConfig): RippleRef;\n    /** Fades out a ripple reference. */\n    fadeOutRipple(rippleRef: RippleRef): void;\n    /** Fades out all currently active ripples. */\n    fadeOutAll(): void;\n    /** Sets up the trigger event listeners */\n    setupTriggerEvents(element: HTMLElement): void;\n    /** Function being called whenever the trigger is being pressed using mouse. */\n    private onMousedown;\n    /** Function being called whenever the trigger is being pressed using touch. */\n    private onTouchStart;\n    /** Function being called whenever the trigger is being released. */\n    private onPointerUp;\n    /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n    private runTimeoutOutsideZone;\n    /** Removes previously registered event listeners from the trigger element. */\n    _removeTriggerEvents(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/ripple/ripple.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { ElementRef, InjectionToken, NgZone, OnDestroy, OnInit } from '@angular/core';\nimport { RippleRef } from './ripple-ref';\nimport { RippleAnimationConfig, RippleConfig, RippleTarget } from './ripple-renderer';\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n    /**\n     * Whether ripples should be disabled. Ripples can be still launched manually by using\n     * the `launch()` method. Therefore focus indicators will still show up.\n     */\n    disabled?: boolean;\n    /**\n     * Configuration for the animation duration of the ripples. There are two phases with different\n     * durations for the ripples. The animation durations will be overwritten if the\n     * `NoopAnimationsModule` is being used.\n     */\n    animation?: RippleAnimationConfig;\n    /**\n     * Whether ripples should start fading out immediately after the mouse our touch is released. By\n     * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n     */\n    terminateOnPointerUp?: boolean;\n}\n/** Injection token that can be used to specify the global ripple options. */\nexport declare const MAT_RIPPLE_GLOBAL_OPTIONS: InjectionToken<RippleGlobalOptions>;\nexport declare class MatRipple implements OnInit, OnDestroy, RippleTarget {\n    private _elementRef;\n    /** Custom color for all ripples. */\n    color: string;\n    /** Whether the ripples should be visible outside the component's bounds. */\n    unbounded: boolean;\n    /**\n     * Whether the ripple always originates from the center of the host element's bounds, rather\n     * than originating from the location of the click event.\n     */\n    centered: boolean;\n    /**\n     * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n     * will be the distance from the center of the ripple to the furthest corner of the host element's\n     * bounding rectangle.\n     */\n    radius: number;\n    /**\n     * Configuration for the ripple animation. Allows modifying the enter and exit animation\n     * duration of the ripples. The animation durations will be overwritten if the\n     * `NoopAnimationsModule` is being used.\n     */\n    animation: RippleAnimationConfig;\n    /**\n     * Whether click events will not trigger the ripple. Ripples can be still launched manually\n     * by using the `launch()` method.\n     */\n    disabled: boolean;\n    private _disabled;\n    /**\n     * The element that triggers the ripple when click events are received.\n     * Defaults to the directive's host element.\n     */\n    trigger: HTMLElement;\n    private _trigger;\n    /** Renderer for the ripple DOM manipulations. */\n    private _rippleRenderer;\n    /** Options that are set globally for all ripples. */\n    private _globalOptions;\n    /** Whether ripple directive is initialized and the input bindings are set. */\n    private _isInitialized;\n    constructor(_elementRef: ElementRef<HTMLElement>, ngZone: NgZone, platform: Platform, globalOptions: RippleGlobalOptions, animationMode?: string);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /** Fades out all currently showing ripple elements. */\n    fadeOutAll(): void;\n    /**\n     * Ripple configuration from the directive's input values.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    readonly rippleConfig: RippleConfig;\n    /**\n     * Whether ripples on pointer-down are disabled or not.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    readonly rippleDisabled: boolean;\n    /** Sets up the the trigger event listeners if ripples are enabled. */\n    private _setupTriggerEventsIfEnabled;\n    /**\n     * Launches a manual ripple using the specified ripple configuration.\n     * @param config Configuration for the manual ripple.\n     */\n    launch(config: RippleConfig): RippleRef;\n    /**\n     * Launches a manual ripple at the specified coordinates within the element.\n     * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n     * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n     * @param config Optional ripple configuration for the manual ripple.\n     */\n    launch(x: number, y: number, config?: RippleConfig): RippleRef;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/selection/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatPseudoCheckboxModule {\n}\nexport * from './pseudo-checkbox/pseudo-checkbox';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/selection/pseudo-checkbox/pseudo-checkbox.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport declare type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\nexport declare class MatPseudoCheckbox {\n    _animationMode?: string | undefined;\n    /** Display state of the checkbox. */\n    state: MatPseudoCheckboxState;\n    /** Whether the checkbox is disabled. */\n    disabled: boolean;\n    constructor(_animationMode?: string | undefined);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/core/testing/month-constants.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport declare const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8, OCT = 9, NOV = 10, DEC = 11;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/datepicker/calendar-body.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, EventEmitter, NgZone, OnChanges, SimpleChanges } from '@angular/core';\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport declare type MatCalendarCellCssClasses = string | string[] | Set<string> | {\n    [key: string]: any;\n};\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport declare class MatCalendarCell {\n    value: number;\n    displayValue: string;\n    ariaLabel: string;\n    enabled: boolean;\n    cssClasses?: string | Set<string> | {\n        [key: string]: any;\n    } | string[] | undefined;\n    constructor(value: number, displayValue: string, ariaLabel: string, enabled: boolean, cssClasses?: string | Set<string> | {\n        [key: string]: any;\n    } | string[] | undefined);\n}\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\nexport declare class MatCalendarBody implements OnChanges {\n    private _elementRef;\n    private _ngZone;\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    label: string;\n    /** The cells to display in the table. */\n    rows: MatCalendarCell[][];\n    /** The value in the table that corresponds to today. */\n    todayValue: number;\n    /** The value in the table that is currently selected. */\n    selectedValue: number;\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    labelMinRequiredCells: number;\n    /** The number of columns in the table. */\n    numCols: number;\n    /** The cell number of the active cell in the table. */\n    activeCell: number;\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    cellAspectRatio: number;\n    /** Emits when a new value is selected. */\n    readonly selectedValueChange: EventEmitter<number>;\n    /** The number of blank cells to put at the beginning for the first row. */\n    _firstRowOffset: number;\n    /** Padding for the individual date cells. */\n    _cellPadding: string;\n    /** Width of an individual cell. */\n    _cellWidth: string;\n    constructor(_elementRef: ElementRef<HTMLElement>, _ngZone: NgZone);\n    _cellClicked(cell: MatCalendarCell): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    _isActiveCell(rowIndex: number, colIndex: number): boolean;\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/datepicker/calendar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentType, Portal } from '@angular/cdk/portal';\nimport { AfterContentInit, AfterViewChecked, ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { DateAdapter, MatDateFormats } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { MatDatepickerIntl } from './datepicker-intl';\nimport { MatMonthView } from './month-view';\nimport { MatMultiYearView } from './multi-year-view';\nimport { MatYearView } from './year-view';\nimport { MatCalendarCellCssClasses } from './calendar-body';\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport declare type MatCalendarView = 'month' | 'year' | 'multi-year';\n/** Default header for MatCalendar */\nexport declare class MatCalendarHeader<D> {\n    private _intl;\n    calendar: MatCalendar<D>;\n    private _dateAdapter;\n    private _dateFormats;\n    constructor(_intl: MatDatepickerIntl, calendar: MatCalendar<D>, _dateAdapter: DateAdapter<D>, _dateFormats: MatDateFormats, changeDetectorRef: ChangeDetectorRef);\n    /** The label for the current calendar view. */\n    readonly periodButtonText: string;\n    readonly periodButtonLabel: string;\n    /** The label for the the previous button. */\n    readonly prevButtonLabel: string;\n    /** The label for the the next button. */\n    readonly nextButtonLabel: string;\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked(): void;\n    /** Handles user clicks on the previous button. */\n    previousClicked(): void;\n    /** Handles user clicks on the next button. */\n    nextClicked(): void;\n    /** Whether the previous period button is enabled. */\n    previousEnabled(): boolean;\n    /** Whether the next period button is enabled. */\n    nextEnabled(): boolean;\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    private _isSameView;\n}\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\nexport declare class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n    private _dateAdapter;\n    private _dateFormats;\n    private _changeDetectorRef;\n    /** An input indicating the type of the header component, if set. */\n    headerComponent: ComponentType<any>;\n    /** A portal containing the header component type for this calendar. */\n    _calendarHeaderPortal: Portal<any>;\n    private _intlChanges;\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    private _moveFocusOnNextTick;\n    /** A date representing the period (month or year) to start the calendar in. */\n    startAt: D | null;\n    private _startAt;\n    /** Whether the calendar should be started in month or year view. */\n    startView: MatCalendarView;\n    /** The currently selected date. */\n    selected: D | null;\n    private _selected;\n    /** The minimum selectable date. */\n    minDate: D | null;\n    private _minDate;\n    /** The maximum selectable date. */\n    maxDate: D | null;\n    private _maxDate;\n    /** Function used to filter which dates are selectable. */\n    dateFilter: (date: D) => boolean;\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass: (date: D) => MatCalendarCellCssClasses;\n    /** Emits when the currently selected date changes. */\n    readonly selectedChange: EventEmitter<D>;\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    readonly yearSelected: EventEmitter<D>;\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    readonly monthSelected: EventEmitter<D>;\n    /** Emits when any date is selected. */\n    readonly _userSelection: EventEmitter<void>;\n    /** Reference to the current month view component. */\n    monthView: MatMonthView<D>;\n    /** Reference to the current year view component. */\n    yearView: MatYearView<D>;\n    /** Reference to the current multi-year view component. */\n    multiYearView: MatMultiYearView<D>;\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    activeDate: D;\n    private _clampedActiveDate;\n    /** Whether the calendar is in month view. */\n    currentView: MatCalendarView;\n    private _currentView;\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges: Subject<void>;\n    constructor(_intl: MatDatepickerIntl, _dateAdapter: DateAdapter<D>, _dateFormats: MatDateFormats, _changeDetectorRef: ChangeDetectorRef);\n    ngAfterContentInit(): void;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    focusActiveCell(): void;\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate(): void;\n    /** Handles date selection in the month view. */\n    _dateSelected(date: D): void;\n    /** Handles year selection in the multiyear view. */\n    _yearSelectedInMultiYearView(normalizedYear: D): void;\n    /** Handles month selection in the year view. */\n    _monthSelectedInYearView(normalizedMonth: D): void;\n    _userSelected(): void;\n    /** Handles year/month selection in the multi-year/year views. */\n    _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Returns the component instance that corresponds to the current calendar view. */\n    private _getCurrentViewComponent;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/datepicker/datepicker-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport declare const matDatepickerAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInCalendar: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/datepicker/datepicker-errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nexport declare function createMissingDateImplError(provider: string): Error;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/datepicker/datepicker-input.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, EventEmitter, OnDestroy } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';\nimport { DateAdapter, MatDateFormats, ThemePalette } from '@angular/material/core';\nimport { MatFormField } from '@angular/material/form-field';\nimport { MatDatepicker } from './datepicker';\n/** @docs-private */\nexport declare const MAT_DATEPICKER_VALUE_ACCESSOR: any;\n/** @docs-private */\nexport declare const MAT_DATEPICKER_VALIDATORS: any;\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport declare class MatDatepickerInputEvent<D> {\n    /** Reference to the datepicker input component that emitted the event. */\n    target: MatDatepickerInput<D>;\n    /** Reference to the native input element associated with the datepicker input. */\n    targetElement: HTMLElement;\n    /** The new value for the target datepicker input. */\n    value: D | null;\n    constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    target: MatDatepickerInput<D>, \n    /** Reference to the native input element associated with the datepicker input. */\n    targetElement: HTMLElement);\n}\n/** Directive used to connect an input to a MatDatepicker. */\nexport declare class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n    private _elementRef;\n    _dateAdapter: DateAdapter<D>;\n    private _dateFormats;\n    private _formField;\n    /** The datepicker that this input is associated with. */\n    matDatepicker: MatDatepicker<D>;\n    _datepicker: MatDatepicker<D>;\n    /** Function that can be used to filter out dates within the datepicker. */\n    matDatepickerFilter: (date: D | null) => boolean;\n    _dateFilter: (date: D | null) => boolean;\n    /** The value of the input. */\n    value: D | null;\n    private _value;\n    /** The minimum valid date. */\n    min: D | null;\n    private _min;\n    /** The maximum valid date. */\n    max: D | null;\n    private _max;\n    /** Whether the datepicker-input is disabled. */\n    disabled: boolean;\n    private _disabled;\n    /** Emits when a `change` event is fired on this `<input>`. */\n    readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>>;\n    /** Emits when an `input` event is fired on this `<input>`. */\n    readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>>;\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    _valueChange: EventEmitter<D | null>;\n    /** Emits when the disabled state has changed */\n    _disabledChange: EventEmitter<boolean>;\n    _onTouched: () => void;\n    private _cvaOnChange;\n    private _validatorOnChange;\n    private _datepickerSubscription;\n    private _localeSubscription;\n    /** The form control validator for whether the input parses. */\n    private _parseValidator;\n    /** The form control validator for the min date. */\n    private _minValidator;\n    /** The form control validator for the max date. */\n    private _maxValidator;\n    /** The form control validator for the date filter. */\n    private _filterValidator;\n    /** The combined form control validator for this input. */\n    private _validator;\n    /** Whether the last value set on the input was valid. */\n    private _lastValueValid;\n    constructor(_elementRef: ElementRef<HTMLInputElement>, _dateAdapter: DateAdapter<D>, _dateFormats: MatDateFormats, _formField: MatFormField);\n    ngOnDestroy(): void;\n    /** @docs-private */\n    registerOnValidatorChange(fn: () => void): void;\n    /** @docs-private */\n    validate(c: AbstractControl): ValidationErrors | null;\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n     */\n    getPopupConnectionElementRef(): ElementRef;\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return The element to connect the popup to.\n     */\n    getConnectedOverlayOrigin(): ElementRef;\n    writeValue(value: D): void;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: () => void): void;\n    setDisabledState(isDisabled: boolean): void;\n    _onKeydown(event: KeyboardEvent): void;\n    _onInput(value: string): void;\n    _onChange(): void;\n    /** Returns the palette used by the input's form field, if any. */\n    _getThemePalette(): ThemePalette;\n    /** Handles blur events on the input. */\n    _onBlur(): void;\n    /** Formats a value and sets it on the input element. */\n    private _formatValue;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/datepicker/datepicker-intl.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\n/** Datepicker data that requires internationalization. */\nexport declare class MatDatepickerIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void>;\n    /** A label for the calendar popup (used by screen readers). */\n    calendarLabel: string;\n    /** A label for the button used to open the calendar popup (used by screen readers). */\n    openCalendarLabel: string;\n    /** A label for the previous month button (used by screen readers). */\n    prevMonthLabel: string;\n    /** A label for the next month button (used by screen readers). */\n    nextMonthLabel: string;\n    /** A label for the previous year button (used by screen readers). */\n    prevYearLabel: string;\n    /** A label for the next year button (used by screen readers). */\n    nextYearLabel: string;\n    /** A label for the previous multi-year button (used by screen readers). */\n    prevMultiYearLabel: string;\n    /** A label for the next multi-year button (used by screen readers). */\n    nextMultiYearLabel: string;\n    /** A label for the 'switch to month view' button (used by screen readers). */\n    switchToMonthViewLabel: string;\n    /** A label for the 'switch to year view' button (used by screen readers). */\n    switchToMultiYearViewLabel: string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/datepicker/datepicker-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatDatepickerModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/datepicker/datepicker-toggle.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ChangeDetectorRef, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { MatButton } from '@angular/material/button';\nimport { MatDatepicker } from './datepicker';\nimport { MatDatepickerIntl } from './datepicker-intl';\n/** Can be used to override the icon of a `matDatepickerToggle`. */\nexport declare class MatDatepickerToggleIcon {\n}\nexport declare class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n    _intl: MatDatepickerIntl;\n    private _changeDetectorRef;\n    private _stateChanges;\n    /** Datepicker instance that the button will toggle. */\n    datepicker: MatDatepicker<D>;\n    /** Tabindex for the toggle. */\n    tabIndex: number | null;\n    /** Whether the toggle button is disabled. */\n    disabled: boolean;\n    private _disabled;\n    /** Whether ripples on the toggle should be disabled. */\n    disableRipple: boolean;\n    /** Custom icon set by the consumer. */\n    _customIcon: MatDatepickerToggleIcon;\n    /** Underlying button element. */\n    _button: MatButton;\n    constructor(_intl: MatDatepickerIntl, _changeDetectorRef: ChangeDetectorRef, defaultTabIndex: string);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    ngAfterContentInit(): void;\n    _open(event: Event): void;\n    private _watchStateChanges;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/datepicker/datepicker.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayRef, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { AfterViewInit, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { CanColor, CanColorCtor, DateAdapter, ThemePalette } from '@angular/material/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Subject } from 'rxjs';\nimport { MatCalendar } from './calendar';\nimport { MatDatepickerInput } from './datepicker-input';\nimport { MatCalendarCellCssClasses } from './calendar-body';\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport declare const MAT_DATEPICKER_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY;\n};\n/** @docs-private */\nexport declare class MatDatepickerContentBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase;\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\nexport declare class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase implements AfterViewInit, CanColor {\n    /** Reference to the internal calendar component. */\n    _calendar: MatCalendar<D>;\n    /** Reference to the datepicker that created the overlay. */\n    datepicker: MatDatepicker<D>;\n    /** Whether the datepicker is above or below the input. */\n    _isAbove: boolean;\n    constructor(elementRef: ElementRef);\n    ngAfterViewInit(): void;\n}\n/** Component responsible for managing the datepicker popup/dialog. */\nexport declare class MatDatepicker<D> implements OnDestroy, CanColor {\n    private _dialog;\n    private _overlay;\n    private _ngZone;\n    private _viewContainerRef;\n    private _dateAdapter;\n    private _dir;\n    private _document;\n    private _scrollStrategy;\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    calendarHeaderComponent: ComponentType<any>;\n    /** The date to open the calendar to initially. */\n    startAt: D | null;\n    private _startAt;\n    /** The view that the calendar should start in. */\n    startView: 'month' | 'year' | 'multi-year';\n    /** Color palette to use on the datepicker's calendar. */\n    color: ThemePalette;\n    _color: ThemePalette;\n    /**\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n     * than a popup and elements have more padding to allow for bigger touch targets.\n     */\n    touchUi: boolean;\n    private _touchUi;\n    /** Whether the datepicker pop-up should be disabled. */\n    disabled: boolean;\n    private _disabled;\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    readonly yearSelected: EventEmitter<D>;\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    readonly monthSelected: EventEmitter<D>;\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n    panelClass: string | string[];\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass: (date: D) => MatCalendarCellCssClasses;\n    /** Emits when the datepicker has been opened. */\n    openedStream: EventEmitter<void>;\n    /** Emits when the datepicker has been closed. */\n    closedStream: EventEmitter<void>;\n    /** Whether the calendar is open. */\n    opened: boolean;\n    private _opened;\n    /** The id for the datepicker calendar. */\n    id: string;\n    /** The currently selected date. */\n    _selected: D | null;\n    private _validSelected;\n    /** The minimum selectable date. */\n    readonly _minDate: D | null;\n    /** The maximum selectable date. */\n    readonly _maxDate: D | null;\n    readonly _dateFilter: (date: D | null) => boolean;\n    /** A reference to the overlay when the calendar is opened as a popup. */\n    _popupRef: OverlayRef;\n    /** A reference to the dialog when the calendar is opened as a dialog. */\n    private _dialogRef;\n    /** A portal containing the calendar for this datepicker. */\n    private _calendarPortal;\n    /** Reference to the component instantiated in popup mode. */\n    private _popupComponentRef;\n    /** The element that was focused before the datepicker was opened. */\n    private _focusedElementBeforeOpen;\n    /** Subscription to value changes in the associated input element. */\n    private _inputSubscription;\n    /** The input element this datepicker is associated with. */\n    _datepickerInput: MatDatepickerInput<D>;\n    /** Emits when the datepicker is disabled. */\n    readonly _disabledChange: Subject<boolean>;\n    /** Emits new selected date when selected date changes. */\n    readonly _selectedChanged: Subject<D>;\n    constructor(_dialog: MatDialog, _overlay: Overlay, _ngZone: NgZone, _viewContainerRef: ViewContainerRef, scrollStrategy: any, _dateAdapter: DateAdapter<D>, _dir: Directionality, _document: any);\n    ngOnDestroy(): void;\n    /** Selects the given date */\n    select(date: D): void;\n    /** Emits the selected year in multiyear view */\n    _selectYear(normalizedYear: D): void;\n    /** Emits selected month in year view */\n    _selectMonth(normalizedMonth: D): void;\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    _registerInput(input: MatDatepickerInput<D>): void;\n    /** Open the calendar. */\n    open(): void;\n    /** Close the calendar. */\n    close(): void;\n    /** Open the calendar as a dialog. */\n    private _openAsDialog;\n    /** Open the calendar as a popup. */\n    private _openAsPopup;\n    /** Create the popup. */\n    private _createPopup;\n    /** Create the popup PositionStrategy. */\n    private _createPopupPositionStrategy;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Passes the current theme color along to the calendar overlay. */\n    private _setColor;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/datepicker/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { MatMultiYearView as ɵa34 } from './multi-year-view';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/datepicker/month-view.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter } from '@angular/core';\nimport { DateAdapter, MatDateFormats } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses } from './calendar-body';\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\nexport declare class MatMonthView<D> implements AfterContentInit {\n    private _changeDetectorRef;\n    private _dateFormats;\n    _dateAdapter: DateAdapter<D>;\n    private _dir?;\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    activeDate: D;\n    private _activeDate;\n    /** The currently selected date. */\n    selected: D | null;\n    private _selected;\n    /** The minimum selectable date. */\n    minDate: D | null;\n    private _minDate;\n    /** The maximum selectable date. */\n    maxDate: D | null;\n    private _maxDate;\n    /** Function used to filter which dates are selectable. */\n    dateFilter: (date: D) => boolean;\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass: (date: D) => MatCalendarCellCssClasses;\n    /** Emits when a new date is selected. */\n    readonly selectedChange: EventEmitter<D | null>;\n    /** Emits when any date is selected. */\n    readonly _userSelection: EventEmitter<void>;\n    /** Emits when any date is activated. */\n    readonly activeDateChange: EventEmitter<D>;\n    /** The body of calendar table */\n    _matCalendarBody: MatCalendarBody;\n    /** The label for this month (e.g. \"January 2017\"). */\n    _monthLabel: string;\n    /** Grid of calendar cells representing the dates of the month. */\n    _weeks: MatCalendarCell[][];\n    /** The number of blank cells in the first row before the 1st of the month. */\n    _firstWeekOffset: number;\n    /**\n     * The date of the month that the currently selected Date falls on.\n     * Null if the currently selected Date is in another month.\n     */\n    _selectedDate: number | null;\n    /** The date of the month that today falls on. Null if today is in another month. */\n    _todayDate: number | null;\n    /** The names of the weekdays. */\n    _weekdays: {\n        long: string;\n        narrow: string;\n    }[];\n    constructor(_changeDetectorRef: ChangeDetectorRef, _dateFormats: MatDateFormats, _dateAdapter: DateAdapter<D>, _dir?: Directionality | undefined);\n    ngAfterContentInit(): void;\n    /** Handles when a new date is selected. */\n    _dateSelected(date: number): void;\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    _handleCalendarBodyKeydown(event: KeyboardEvent): void;\n    /** Initializes this month view. */\n    _init(): void;\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(): void;\n    /** Creates MatCalendarCells for the dates in this month. */\n    private _createWeekCells;\n    /** Date filter for the month */\n    private _shouldEnableDate;\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    private _getDateInCurrentMonth;\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    private _hasSameMonthAndYear;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Determines whether the user has the RTL layout direction. */\n    private _isRtl;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/datepicker/multi-year-view.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter } from '@angular/core';\nimport { DateAdapter } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { MatCalendarBody, MatCalendarCell } from './calendar-body';\nexport declare const yearsPerPage = 24;\nexport declare const yearsPerRow = 4;\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\nexport declare class MatMultiYearView<D> implements AfterContentInit {\n    private _changeDetectorRef;\n    _dateAdapter: DateAdapter<D>;\n    private _dir?;\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    activeDate: D;\n    private _activeDate;\n    /** The currently selected date. */\n    selected: D | null;\n    private _selected;\n    /** The minimum selectable date. */\n    minDate: D | null;\n    private _minDate;\n    /** The maximum selectable date. */\n    maxDate: D | null;\n    private _maxDate;\n    /** A function used to filter which dates are selectable. */\n    dateFilter: (date: D) => boolean;\n    /** Emits when a new year is selected. */\n    readonly selectedChange: EventEmitter<D>;\n    /** Emits the selected year. This doesn't imply a change on the selected date */\n    readonly yearSelected: EventEmitter<D>;\n    /** Emits when any date is activated. */\n    readonly activeDateChange: EventEmitter<D>;\n    /** The body of calendar table */\n    _matCalendarBody: MatCalendarBody;\n    /** Grid of calendar cells representing the currently displayed years. */\n    _years: MatCalendarCell[][];\n    /** The year that today falls on. */\n    _todayYear: number;\n    /** The year of the selected date. Null if the selected date is null. */\n    _selectedYear: number | null;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _dateAdapter: DateAdapter<D>, _dir?: Directionality | undefined);\n    ngAfterContentInit(): void;\n    /** Initializes this multi-year view. */\n    _init(): void;\n    /** Handles when a new year is selected. */\n    _yearSelected(year: number): void;\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    _handleCalendarBodyKeydown(event: KeyboardEvent): void;\n    _getActiveCell(): number;\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(): void;\n    /** Creates an MatCalendarCell for the given year. */\n    private _createCellForYear;\n    /** Whether the given year is enabled. */\n    private _shouldEnableYear;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Determines whether the user has the RTL layout direction. */\n    private _isRtl;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/datepicker/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './datepicker-module';\nexport * from './calendar';\nexport * from './calendar-body';\nexport * from './datepicker';\nexport * from './datepicker-animations';\nexport * from './datepicker-input';\nexport * from './datepicker-intl';\nexport * from './datepicker-toggle';\nexport * from './month-view';\nexport * from './year-view';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/datepicker/year-view.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter } from '@angular/core';\nimport { DateAdapter, MatDateFormats } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { MatCalendarBody, MatCalendarCell } from './calendar-body';\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\nexport declare class MatYearView<D> implements AfterContentInit {\n    private _changeDetectorRef;\n    private _dateFormats;\n    _dateAdapter: DateAdapter<D>;\n    private _dir?;\n    /** The date to display in this year view (everything other than the year is ignored). */\n    activeDate: D;\n    private _activeDate;\n    /** The currently selected date. */\n    selected: D | null;\n    private _selected;\n    /** The minimum selectable date. */\n    minDate: D | null;\n    private _minDate;\n    /** The maximum selectable date. */\n    maxDate: D | null;\n    private _maxDate;\n    /** A function used to filter which dates are selectable. */\n    dateFilter: (date: D) => boolean;\n    /** Emits when a new month is selected. */\n    readonly selectedChange: EventEmitter<D>;\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    readonly monthSelected: EventEmitter<D>;\n    /** Emits when any date is activated. */\n    readonly activeDateChange: EventEmitter<D>;\n    /** The body of calendar table */\n    _matCalendarBody: MatCalendarBody;\n    /** Grid of calendar cells representing the months of the year. */\n    _months: MatCalendarCell[][];\n    /** The label for this year (e.g. \"2017\"). */\n    _yearLabel: string;\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    _todayMonth: number | null;\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    _selectedMonth: number | null;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _dateFormats: MatDateFormats, _dateAdapter: DateAdapter<D>, _dir?: Directionality | undefined);\n    ngAfterContentInit(): void;\n    /** Handles when a new month is selected. */\n    _monthSelected(month: number): void;\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    _handleCalendarBodyKeydown(event: KeyboardEvent): void;\n    /** Initializes this year view. */\n    _init(): void;\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(): void;\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    private _getMonthInCurrentYear;\n    /** Creates an MatCalendarCell for the given month. */\n    private _createCellForMonth;\n    /** Whether the given month is enabled. */\n    private _shouldEnableMonth;\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    private _isYearAndMonthAfterMaxDate;\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    private _isYearAndMonthBeforeMinDate;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Determines whether the user has the RTL layout direction. */\n    private _isRtl;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/dialog/dialog-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport declare const matDialogAnimations: {\n    readonly dialogContainer: AnimationTriggerMetadata;\n    readonly slideDialog: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/dialog/dialog-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewContainerRef } from '@angular/core';\nimport { Direction } from '@angular/cdk/bidi';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\n/** Valid ARIA roles for a dialog element. */\nexport declare type DialogRole = 'dialog' | 'alertdialog';\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n    /** Override for the dialog's top position. */\n    top?: string;\n    /** Override for the dialog's bottom position. */\n    bottom?: string;\n    /** Override for the dialog's left position. */\n    left?: string;\n    /** Override for the dialog's right position. */\n    right?: string;\n}\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport declare class MatDialogConfig<D = any> {\n    /**\n     * Where the attached component should live in Angular's *logical* component tree.\n     * This affects what is available for injection and the change detection order for the\n     * component instantiated inside of the dialog. This does not affect where the dialog\n     * content will be rendered.\n     */\n    viewContainerRef?: ViewContainerRef;\n    /** ID for the dialog. If omitted, a unique one will be generated. */\n    id?: string;\n    /** The ARIA role of the dialog element. */\n    role?: DialogRole;\n    /** Custom class for the overlay pane. */\n    panelClass?: string | string[];\n    /** Whether the dialog has a backdrop. */\n    hasBackdrop?: boolean;\n    /** Custom class for the backdrop, */\n    backdropClass?: string;\n    /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n    disableClose?: boolean;\n    /** Width of the dialog. */\n    width?: string;\n    /** Height of the dialog. */\n    height?: string;\n    /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n    minWidth?: number | string;\n    /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n    minHeight?: number | string;\n    /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n    maxWidth?: number | string;\n    /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n    maxHeight?: number | string;\n    /** Position overrides. */\n    position?: DialogPosition;\n    /** Data being injected into the child component. */\n    data?: D | null;\n    /** Layout direction for the dialog's content. */\n    direction?: Direction;\n    /** ID of the element that describes the dialog. */\n    ariaDescribedBy?: string | null;\n    /** Aria label to assign to the dialog element */\n    ariaLabel?: string | null;\n    /** Whether the dialog should focus the first focusable element on open. */\n    autoFocus?: boolean;\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n    restoreFocus?: boolean;\n    /** Scroll strategy to be used for the dialog. */\n    scrollStrategy?: ScrollStrategy;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    closeOnNavigation?: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/dialog/dialog-container.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentRef, ElementRef, EmbeddedViewRef, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { BasePortalOutlet, ComponentPortal, CdkPortalOutlet, TemplatePortal } from '@angular/cdk/portal';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { MatDialogConfig } from './dialog-config';\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport declare function throwMatDialogContentAlreadyAttachedError(): void;\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nexport declare class MatDialogContainer extends BasePortalOutlet {\n    private _elementRef;\n    private _focusTrapFactory;\n    private _changeDetectorRef;\n    private _document;\n    /** The dialog configuration. */\n    _config: MatDialogConfig;\n    /** The portal outlet inside of this container into which the dialog content will be loaded. */\n    _portalOutlet: CdkPortalOutlet;\n    /** The class that traps and manages focus within the dialog. */\n    private _focusTrap;\n    /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n    private _elementFocusedBeforeDialogWasOpened;\n    /** State of the dialog animation. */\n    _state: 'void' | 'enter' | 'exit';\n    /** Emits when an animation state changes. */\n    _animationStateChanged: EventEmitter<AnimationEvent>;\n    /** ID of the element that should be considered as the dialog's label. */\n    _ariaLabelledBy: string | null;\n    /** ID for the container DOM element. */\n    _id: string;\n    constructor(_elementRef: ElementRef, _focusTrapFactory: FocusTrapFactory, _changeDetectorRef: ChangeDetectorRef, _document: any, \n    /** The dialog configuration. */\n    _config: MatDialogConfig);\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    /** Moves the focus inside the focus trap. */\n    private _trapFocus;\n    /** Restores focus to the element that was focused before the dialog opened. */\n    private _restoreFocus;\n    /** Saves a reference to the element that was focused before the dialog was opened. */\n    private _savePreviouslyFocusedElement;\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone(event: AnimationEvent): void;\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart(event: AnimationEvent): void;\n    /** Starts the dialog exit animation. */\n    _startExitAnimation(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/dialog/dialog-content-directives.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OnChanges, OnInit, SimpleChanges, ElementRef } from '@angular/core';\nimport { MatDialog } from './dialog';\nimport { MatDialogRef } from './dialog-ref';\n/**\n * Button that will close the current dialog.\n */\nexport declare class MatDialogClose implements OnInit, OnChanges {\n    dialogRef: MatDialogRef<any>;\n    private _elementRef;\n    private _dialog;\n    /** Screenreader label for the button. */\n    ariaLabel: string;\n    /** Dialog close input. */\n    dialogResult: any;\n    _matDialogClose: any;\n    constructor(dialogRef: MatDialogRef<any>, _elementRef: ElementRef<HTMLElement>, _dialog: MatDialog);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n}\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport declare class MatDialogTitle implements OnInit {\n    private _dialogRef;\n    private _elementRef;\n    private _dialog;\n    id: string;\n    constructor(_dialogRef: MatDialogRef<any>, _elementRef: ElementRef<HTMLElement>, _dialog: MatDialog);\n    ngOnInit(): void;\n}\n/**\n * Scrollable content container of a dialog.\n */\nexport declare class MatDialogContent {\n}\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport declare class MatDialogActions {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/dialog/dialog-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatDialogModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/dialog/dialog-ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { Location } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { DialogPosition } from './dialog-config';\nimport { MatDialogContainer } from './dialog-container';\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport declare class MatDialogRef<T, R = any> {\n    private _overlayRef;\n    _containerInstance: MatDialogContainer;\n    readonly id: string;\n    /** The instance of component opened into the dialog. */\n    componentInstance: T;\n    /** Whether the user is allowed to close the dialog. */\n    disableClose: boolean | undefined;\n    /** Subject for notifying the user that the dialog has finished opening. */\n    private readonly _afterOpened;\n    /** Subject for notifying the user that the dialog has finished closing. */\n    private readonly _afterClosed;\n    /** Subject for notifying the user that the dialog has started closing. */\n    private readonly _beforeClosed;\n    /** Result to be passed to afterClosed. */\n    private _result;\n    constructor(_overlayRef: OverlayRef, _containerInstance: MatDialogContainer, _location?: Location, id?: string);\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult?: R): void;\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened(): Observable<void>;\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed(): Observable<R | undefined>;\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed(): Observable<R | undefined>;\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick(): Observable<MouseEvent>;\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents(): Observable<KeyboardEvent>;\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position?: DialogPosition): this;\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width?: string, height?: string): this;\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @deprecated Use `afterOpened` instead.\n     * @breaking-change 8.0.0\n     */\n    afterOpen(): Observable<void>;\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @deprecated Use `beforeClosed` instead.\n     * @breaking-change 8.0.0\n     */\n    beforeClose(): Observable<R | undefined>;\n    /** Fetches the position strategy object from the overlay ref. */\n    private _getPositionStrategy;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/dialog/dialog.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Overlay, OverlayContainer, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { Location } from '@angular/common';\nimport { InjectionToken, Injector, OnDestroy, TemplateRef } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { MatDialogConfig } from './dialog-config';\nimport { MatDialogRef } from './dialog-ref';\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport declare const MAT_DIALOG_DATA: InjectionToken<any>;\n/** Injection token that can be used to specify default dialog options. */\nexport declare const MAT_DIALOG_DEFAULT_OPTIONS: InjectionToken<MatDialogConfig<any>>;\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport declare const MAT_DIALOG_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY;\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nexport declare class MatDialog implements OnDestroy {\n    private _overlay;\n    private _injector;\n    private _location;\n    private _defaultOptions;\n    private _parentDialog;\n    private _overlayContainer;\n    private _openDialogsAtThisLevel;\n    private readonly _afterAllClosedAtThisLevel;\n    private readonly _afterOpenedAtThisLevel;\n    private _ariaHiddenElements;\n    private _scrollStrategy;\n    /** Keeps track of the currently-open dialogs. */\n    readonly openDialogs: MatDialogRef<any>[];\n    /** Stream that emits when a dialog has been opened. */\n    readonly afterOpened: Subject<MatDialogRef<any>>;\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @deprecated Use `afterOpened` instead.\n     * @breaking-change 8.0.0\n     */\n    readonly afterOpen: Subject<MatDialogRef<any>>;\n    readonly _afterAllClosed: Subject<void>;\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n    readonly afterAllClosed: Observable<void>;\n    constructor(_overlay: Overlay, _injector: Injector, _location: Location, _defaultOptions: MatDialogConfig, scrollStrategy: any, _parentDialog: MatDialog, _overlayContainer: OverlayContainer);\n    /**\n     * Opens a modal dialog containing the given component.\n     * @param componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param config Extra configuration options.\n     * @returns Reference to the newly-opened dialog.\n     */\n    open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>, config?: MatDialogConfig<D>): MatDialogRef<T, R>;\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll(): void;\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id: string): MatDialogRef<any> | undefined;\n    ngOnDestroy(): void;\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n    private _createOverlay;\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    private _getOverlayConfig;\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    private _attachDialogContainer;\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    private _attachDialogContent;\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param container Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    private _createInjector;\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n    private _removeOpenDialog;\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n    private _hideNonDialogContentFromAssistiveTechnology;\n    /** Closes all of the dialogs in an array. */\n    private _closeDialogs;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/dialog/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/dialog/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './dialog-module';\nexport * from './dialog';\nexport * from './dialog-container';\nexport * from './dialog-content-directives';\nexport * from './dialog-config';\nexport * from './dialog-ref';\nexport * from './dialog-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/divider/divider-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatDividerModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/divider/divider.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatDivider {\n    /** Whether the divider is vertically aligned. */\n    vertical: boolean;\n    private _vertical;\n    /** Whether the divider is an inset divider. */\n    inset: boolean;\n    private _inset;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/divider/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/divider/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './divider';\nexport * from './divider-module';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/expansion/accordion-base.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { CdkAccordion } from '@angular/cdk/accordion';\n/** MatAccordion's display modes. */\nexport declare type MatAccordionDisplayMode = 'default' | 'flat';\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n    /** Whether the expansion indicator should be hidden. */\n    hideToggle: boolean;\n    /** Display mode used for all expansion panels in the accordion. */\n    displayMode: MatAccordionDisplayMode;\n    /** Handles keyboard events coming in from the panel headers. */\n    _handleHeaderKeydown: (event: KeyboardEvent) => void;\n    /** Handles focus events on the panel headers. */\n    _handleHeaderFocus: (header: any) => void;\n}\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport declare const MAT_ACCORDION: InjectionToken<MatAccordionBase>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/expansion/accordion.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { QueryList, AfterContentInit } from '@angular/core';\nimport { CdkAccordion } from '@angular/cdk/accordion';\nimport { MatAccordionBase, MatAccordionDisplayMode } from './accordion-base';\nimport { MatExpansionPanelHeader } from './expansion-panel-header';\n/**\n * Directive for a Material Design Accordion.\n */\nexport declare class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n    private _keyManager;\n    _headers: QueryList<MatExpansionPanelHeader>;\n    /** Whether the expansion indicator should be hidden. */\n    hideToggle: boolean;\n    private _hideToggle;\n    /**\n     * Display mode used for all expansion panels in the accordion. Currently two display\n     * modes exist:\n     *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n     *     panel at a different elevation from the rest of the accordion.\n     *  flat - no spacing is placed around expanded panels, showing all panels at the same\n     *     elevation.\n     */\n    displayMode: MatAccordionDisplayMode;\n    ngAfterContentInit(): void;\n    /** Handles keyboard events coming in from the panel headers. */\n    _handleHeaderKeydown(event: KeyboardEvent): void;\n    _handleHeaderFocus(header: MatExpansionPanelHeader): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/expansion/expansion-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/** Time and timing curve for expansion panel animations. */\nexport declare const EXPANSION_PANEL_ANIMATION_TIMING = \"225ms cubic-bezier(0.4,0.0,0.2,1)\";\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport declare const matExpansionAnimations: {\n    readonly indicatorRotate: AnimationTriggerMetadata;\n    readonly expansionHeaderHeight: AnimationTriggerMetadata;\n    readonly bodyExpansion: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/expansion/expansion-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatExpansionModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/expansion/expansion-panel-content.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplateRef } from '@angular/core';\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nexport declare class MatExpansionPanelContent {\n    _template: TemplateRef<any>;\n    constructor(_template: TemplateRef<any>);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/expansion/expansion-panel-header.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor, FocusableOption, FocusOrigin } from '@angular/cdk/a11y';\nimport { ChangeDetectorRef, ElementRef, OnDestroy } from '@angular/core';\nimport { MatExpansionPanel } from './expansion-panel';\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\nexport declare class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n    panel: MatExpansionPanel;\n    private _element;\n    private _focusMonitor;\n    private _changeDetectorRef;\n    private _parentChangeSubscription;\n    constructor(panel: MatExpansionPanel, _element: ElementRef, _focusMonitor: FocusMonitor, _changeDetectorRef: ChangeDetectorRef);\n    /** Height of the header while the panel is expanded. */\n    expandedHeight: string;\n    /** Height of the header while the panel is collapsed. */\n    collapsedHeight: string;\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * @docs-private\n     */\n    readonly disabled: any;\n    /** Toggles the expanded state of the panel. */\n    _toggle(): void;\n    /** Gets whether the panel is expanded. */\n    _isExpanded(): boolean;\n    /** Gets the expanded state string of the panel. */\n    _getExpandedState(): string;\n    /** Gets the panel id. */\n    _getPanelId(): string;\n    /** Gets whether the expand indicator should be shown. */\n    _showToggle(): boolean;\n    /** Handle keydown event calling to toggle() if appropriate. */\n    _keydown(event: KeyboardEvent): void;\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n    focus(origin?: FocusOrigin): void;\n    ngOnDestroy(): void;\n}\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nexport declare class MatExpansionPanelDescription {\n}\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nexport declare class MatExpansionPanelTitle {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/expansion/expansion-panel.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationEvent } from '@angular/animations';\nimport { CdkAccordionItem } from '@angular/cdk/accordion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter, ElementRef, OnChanges, OnDestroy, SimpleChanges, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MatExpansionPanelContent } from './expansion-panel-content';\nimport { MatAccordionBase } from './accordion-base';\n/** MatExpansionPanel's states. */\nexport declare type MatExpansionPanelState = 'expanded' | 'collapsed';\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nexport declare class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges, OnDestroy {\n    private _viewContainerRef;\n    _animationMode?: string | undefined;\n    private _document;\n    /** Whether the toggle indicator should be hidden. */\n    hideToggle: boolean;\n    private _hideToggle;\n    /** An event emitted after the body's expansion animation happens. */\n    afterExpand: EventEmitter<void>;\n    /** An event emitted after the body's collapse animation happens. */\n    afterCollapse: EventEmitter<void>;\n    /** Stream that emits for changes in `@Input` properties. */\n    readonly _inputChanges: Subject<SimpleChanges>;\n    /** Optionally defined accordion the expansion panel belongs to. */\n    accordion: MatAccordionBase;\n    /** Content that will be rendered lazily. */\n    _lazyContent: MatExpansionPanelContent;\n    /** Element containing the panel's user-provided content. */\n    _body: ElementRef<HTMLElement>;\n    /** Portal holding the user's content. */\n    _portal: TemplatePortal;\n    /** ID for the associated header element. Used for a11y labelling. */\n    _headerId: string;\n    /** Stream of body animation done events. */\n    _bodyAnimationDone: Subject<AnimationEvent>;\n    constructor(accordion: MatAccordionBase, _changeDetectorRef: ChangeDetectorRef, _uniqueSelectionDispatcher: UniqueSelectionDispatcher, _viewContainerRef: ViewContainerRef, _document?: any, _animationMode?: string | undefined);\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    _hasSpacing(): boolean;\n    /** Gets the expanded state string. */\n    _getExpandedState(): MatExpansionPanelState;\n    ngAfterContentInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n    _containsFocus(): boolean;\n}\nexport declare class MatExpansionPanelActionRow {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/expansion/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/expansion/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './expansion-module';\nexport * from './accordion';\nexport * from './accordion-base';\nexport * from './expansion-panel';\nexport * from './expansion-panel-header';\nexport * from './expansion-panel-content';\nexport * from './expansion-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/form-field/error.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Single error message to be shown underneath the form field. */\nexport declare class MatError {\n    id: string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/form-field/form-field-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport declare const matFormFieldAnimations: {\n    readonly transitionMessages: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/form-field/form-field-control.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { NgControl } from '@angular/forms';\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport declare abstract class MatFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n    /** The element ID for this control. */\n    readonly id: string;\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n    /** Whether the `MatFormField` label should try to float. */\n    readonly shouldLabelFloat: boolean;\n    /** Whether the control is required. */\n    readonly required: boolean;\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n    /**\n     * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mat-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n    /**\n     * Whether the input is currently in an autofilled state. If property is not present on the\n     * control it is assumed to be false.\n     */\n    readonly autofilled?: boolean;\n    /** Sets the list of element IDs that currently describe this control. */\n    abstract setDescribedByIds(ids: string[]): void;\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/form-field/form-field-errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nexport declare function getMatFormFieldPlaceholderConflictError(): Error;\n/** @docs-private */\nexport declare function getMatFormFieldDuplicatedHintError(align: string): Error;\n/** @docs-private */\nexport declare function getMatFormFieldMissingControlError(): Error;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/form-field/form-field-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatFormFieldModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/form-field/form-field.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { AfterContentChecked, AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, InjectionToken, NgZone, QueryList } from '@angular/core';\nimport { CanColor, CanColorCtor, FloatLabelType, LabelOptions } from '@angular/material/core';\nimport { MatError } from './error';\nimport { MatFormFieldControl } from './form-field-control';\nimport { MatHint } from './hint';\nimport { MatLabel } from './label';\nimport { MatPlaceholder } from './placeholder';\nimport { MatPrefix } from './prefix';\nimport { MatSuffix } from './suffix';\nimport { Platform } from '@angular/cdk/platform';\nimport { NgControl } from '@angular/forms';\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport declare class MatFormFieldBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport declare const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase;\n/** Possible appearance styles for the form field. */\nexport declare type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n    appearance?: MatFormFieldAppearance;\n}\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport declare const MAT_FORM_FIELD_DEFAULT_OPTIONS: InjectionToken<MatFormFieldDefaultOptions>;\n/** Container for form controls that applies Material Design styling and behavior. */\nexport declare class MatFormField extends _MatFormFieldMixinBase implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n    _elementRef: ElementRef;\n    private _changeDetectorRef;\n    private _dir;\n    private _defaults;\n    private _platform?;\n    private _ngZone?;\n    private _labelOptions;\n    private _outlineGapCalculationNeeded;\n    /** The form-field appearance style. */\n    appearance: MatFormFieldAppearance;\n    _appearance: MatFormFieldAppearance;\n    /** Whether the required marker should be hidden. */\n    hideRequiredMarker: boolean;\n    private _hideRequiredMarker;\n    /** Override for the logic that disables the label animation in certain cases. */\n    private _showAlwaysAnimate;\n    /** Whether the floating label should always float or not. */\n    readonly _shouldAlwaysFloat: boolean;\n    /** Whether the label can float or not. */\n    readonly _canLabelFloat: boolean;\n    /** State of the mat-hint and mat-error animations. */\n    _subscriptAnimationState: string;\n    /** Text for the form field hint. */\n    hintLabel: string;\n    private _hintLabel;\n    _hintLabelId: string;\n    _labelId: string;\n    /**\n     * Whether the label should always float, never float or float as the user types.\n     *\n     * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n     * way to make the floating label emulate the behavior of a standard input placeholder. However\n     * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n     * appearances the `never` option has been disabled in favor of just using the placeholder.\n     */\n    floatLabel: FloatLabelType;\n    private _floatLabel;\n    /** Whether the Angular animations are enabled. */\n    _animationsEnabled: boolean;\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    underlineRef: ElementRef;\n    _connectionContainerRef: ElementRef;\n    _inputContainerRef: ElementRef;\n    private _label;\n    _control: MatFormFieldControl<any>;\n    _placeholderChild: MatPlaceholder;\n    _labelChild: MatLabel;\n    _errorChildren: QueryList<MatError>;\n    _hintChildren: QueryList<MatHint>;\n    _prefixChildren: QueryList<MatPrefix>;\n    _suffixChildren: QueryList<MatSuffix>;\n    constructor(_elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef, labelOptions: LabelOptions, _dir: Directionality, _defaults: MatFormFieldDefaultOptions, _platform?: Platform | undefined, _ngZone?: NgZone | undefined, _animationMode?: string);\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin(): ElementRef;\n    ngAfterContentInit(): void;\n    ngAfterContentChecked(): void;\n    ngAfterViewInit(): void;\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: keyof NgControl): boolean;\n    _hasPlaceholder(): boolean;\n    _hasLabel(): boolean;\n    _shouldLabelFloat(): boolean;\n    _hideControlPlaceholder(): boolean;\n    _hasFloatingLabel(): boolean;\n    /** Determines whether to display hints or errors. */\n    _getDisplayedMessages(): 'error' | 'hint';\n    /** Animates the placeholder up and locks it in position. */\n    _animateAndLockLabel(): void;\n    /**\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n     * or child element with the `mat-placeholder` directive).\n     */\n    private _validatePlaceholders;\n    /** Does any extra processing that is required when handling the hints. */\n    private _processHints;\n    /**\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     */\n    private _validateHints;\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     */\n    private _syncDescribedByIds;\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild(): void;\n    /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     */\n    updateOutlineGap(): void;\n    /** Gets the start end of the rect considering the current directionality. */\n    private _getStartEnd;\n    /** Updates the outline gap the new time the zone stabilizes. */\n    private _updateOutlineGapOnStable;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/form-field/hint.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Hint text to be shown underneath the form field control. */\nexport declare class MatHint {\n    /** Whether to align the hint label at the start or end of the line. */\n    align: 'start' | 'end';\n    /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n    id: string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/form-field/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/form-field/label.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The floating label for a `mat-form-field`. */\nexport declare class MatLabel {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/form-field/placeholder.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\nexport declare class MatPlaceholder {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/form-field/prefix.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Prefix to be placed the the front of the form field. */\nexport declare class MatPrefix {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/form-field/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './form-field-module';\nexport * from './error';\nexport * from './form-field';\nexport * from './form-field-control';\nexport * from './form-field-errors';\nexport * from './hint';\nexport * from './placeholder';\nexport * from './prefix';\nexport * from './suffix';\nexport * from './label';\nexport * from './form-field-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/form-field/suffix.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Suffix to be placed at the end of the form field. */\nexport declare class MatSuffix {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/grid-list/grid-list-base.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport declare const MAT_GRID_LIST: InjectionToken<MatGridListBase>;\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n    cols: number;\n    gutterSize: string;\n    rowHeight: number | string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/grid-list/grid-list-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatGridListModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/grid-list/grid-list.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentChecked, OnInit, QueryList, ElementRef } from '@angular/core';\nimport { MatGridTile } from './grid-tile';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { MatGridListBase } from './grid-list-base';\nexport declare class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n    private _element;\n    private _dir;\n    /** Number of columns being rendered. */\n    private _cols;\n    /** Used for determiningthe position of each tile in the grid. */\n    private _tileCoordinator;\n    /**\n     * Row height value passed in by user. This can be one of three types:\n     * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n     * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n     * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n     */\n    private _rowHeight;\n    /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n    private _gutter;\n    /** Sets position and size styles for a tile */\n    private _tileStyler;\n    /** Query list of tiles that are being rendered. */\n    _tiles: QueryList<MatGridTile>;\n    constructor(_element: ElementRef<HTMLElement>, _dir: Directionality);\n    /** Amount of columns in the grid list. */\n    cols: number;\n    /** Size of the grid list's gutter in pixels. */\n    gutterSize: string;\n    /** Set internal representation of row height from the user-provided value. */\n    rowHeight: string | number;\n    ngOnInit(): void;\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     */\n    ngAfterContentChecked(): void;\n    /** Throw a friendly error if cols property is missing */\n    private _checkCols;\n    /** Default to equal width:height if rowHeight property is missing */\n    private _checkRowHeight;\n    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n    private _setTileStyler;\n    /** Computes and applies the size and position for all children grid tiles. */\n    private _layoutTiles;\n    /** Sets style on the main grid-list element, given the style name and value. */\n    _setListStyle(style: [string, string | null] | null): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/grid-list/grid-tile.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, QueryList, AfterContentInit } from '@angular/core';\nimport { MatLine } from '@angular/material/core';\nimport { MatGridListBase } from './grid-list-base';\nexport declare class MatGridTile {\n    private _element;\n    _gridList?: MatGridListBase | undefined;\n    _rowspan: number;\n    _colspan: number;\n    constructor(_element: ElementRef<HTMLElement>, _gridList?: MatGridListBase | undefined);\n    /** Amount of rows that the grid tile takes up. */\n    rowspan: number;\n    /** Amount of columns that the grid tile takes up. */\n    colspan: number;\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     */\n    _setStyle(property: string, value: any): void;\n}\nexport declare class MatGridTileText implements AfterContentInit {\n    private _element;\n    _lines: QueryList<MatLine>;\n    constructor(_element: ElementRef<HTMLElement>);\n    ngAfterContentInit(): void;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatGridAvatarCssMatStyler {\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatGridTileHeaderCssMatStyler {\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatGridTileFooterCssMatStyler {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/grid-list/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { MAT_GRID_LIST as ɵa11, MatGridListBase as ɵb11 } from './grid-list-base';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/grid-list/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './grid-list-module';\nexport * from './grid-list';\nexport * from './grid-tile';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/grid-list/tile-coordinator.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MatGridTile } from './grid-tile';\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport declare class TileCoordinator {\n    /** Tracking array (see class description). */\n    tracker: number[];\n    /** Index at which the search for the next gap will start. */\n    columnIndex: number;\n    /** The current row index. */\n    rowIndex: number;\n    /** Gets the total number of rows occupied by tiles */\n    readonly rowCount: number;\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     */\n    readonly rowspan: number;\n    /** The computed (row, col) position of each tile (the output). */\n    positions: TilePosition[];\n    /**\n     * Updates the tile positions.\n     * @param numColumns Amount of columns in the grid.\n     */\n    update(numColumns: number, tiles: MatGridTile[]): void;\n    /** Calculates the row and col position of a tile. */\n    private _trackTile;\n    /** Finds the next available space large enough to fit the tile. */\n    private _findMatchingGap;\n    /** Move \"down\" to the next row. */\n    private _nextRow;\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     */\n    private _findGapEndIndex;\n    /** Update the tile tracker to account for the given tile in the given space. */\n    private _markTilePosition;\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport declare class TilePosition {\n    row: number;\n    col: number;\n    constructor(row: number, col: number);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/grid-list/tile-styler.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MatGridList } from './grid-list';\nimport { MatGridTile } from './grid-tile';\nimport { TileCoordinator } from './tile-coordinator';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport declare abstract class TileStyler {\n    _gutterSize: string;\n    _rows: number;\n    _rowspan: number;\n    _cols: number;\n    _direction: string;\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param gutterSize Size of the grid's gutter.\n     * @param tracker Instance of the TileCoordinator.\n     * @param cols Amount of columns in the grid.\n     * @param direction Layout direction of the grid.\n     */\n    init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void;\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent: number, gutterFraction: number): string;\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize: string, offset: number): string;\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize: string, span: number): string;\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n    setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void;\n    /** Sets the horizontal placement of the tile in the list. */\n    setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number, gutterWidth: number): void;\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n    getGutterSpan(): string;\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n    getTileSpan(tileHeight: string): string;\n    /**\n     * Sets the vertical placement of the tile in the list.\n     * This method will be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number, gutterWidth: number): void;\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    getComputedHeight(): [string, string] | null;\n    /**\n     * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n     * @param list Grid list that the styler was attached to.\n     * @docs-private\n     */\n    abstract reset(list: MatGridList): void;\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport declare class FixedTileStyler extends TileStyler {\n    fixedRowHeight: string;\n    constructor(fixedRowHeight: string);\n    init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void;\n    setRowStyles(tile: MatGridTile, rowIndex: number): void;\n    getComputedHeight(): [string, string];\n    reset(list: MatGridList): void;\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport declare class RatioTileStyler extends TileStyler {\n    /** Ratio width:height given by user to determine row height. */\n    rowHeightRatio: number;\n    baseTileHeight: string;\n    constructor(value: string);\n    setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number, gutterWidth: number): void;\n    getComputedHeight(): [string, string];\n    reset(list: MatGridList): void;\n    private _parseRatio;\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport declare class FitTileStyler extends TileStyler {\n    setRowStyles(tile: MatGridTile, rowIndex: number): void;\n    reset(list: MatGridList): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/icon/icon-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatIconModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/icon/icon-registry.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HttpClient } from '@angular/common/http';\nimport { Optional } from '@angular/core';\nimport { DomSanitizer, SafeResourceUrl, SafeHtml } from '@angular/platform-browser';\nimport { Observable } from 'rxjs';\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport declare function getMatIconNameNotFoundError(iconName: string): Error;\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport declare function getMatIconNoHttpProviderError(): Error;\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport declare function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error;\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport declare function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error;\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport declare class MatIconRegistry {\n    private _httpClient;\n    private _sanitizer;\n    private _document;\n    /**\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n     */\n    private _svgIconConfigs;\n    /**\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n     * Multiple icon sets can be registered under the same namespace.\n     */\n    private _iconSetConfigs;\n    /** Cache for icons loaded by direct URLs. */\n    private _cachedIconsByUrl;\n    /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n    private _inProgressUrlFetches;\n    /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n    private _fontCssClassesByAlias;\n    /**\n     * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n     * The default 'material-icons' value assumes that the material icon font has been loaded as\n     * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n     */\n    private _defaultFontSetClass;\n    constructor(_httpClient: HttpClient, _sanitizer: DomSanitizer, document: any);\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName: string, url: SafeResourceUrl): this;\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName: string, literal: SafeHtml): this;\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this;\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this;\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url: SafeResourceUrl): this;\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal: SafeHtml): this;\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this;\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this;\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias: string, className?: string): this;\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias: string): string;\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n    setDefaultFontSetClass(className: string): this;\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass(): string;\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement>;\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name: string, namespace?: string): Observable<SVGElement>;\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    private _getSvgFromConfig;\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    private _getSvgFromIconSetConfigs;\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    private _extractIconWithNameFromAnySet;\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    private _loadSvgIconFromConfig;\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    private _loadSvgIconSetFromConfig;\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     */\n    private _createSvgElementForSingleIcon;\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    private _extractSvgIconFromSet;\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    private _svgElementFromString;\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    private _toSvgElement;\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    private _setSvgAttributes;\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    private _fetchUrl;\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    private _addSvgIconConfig;\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    private _addSvgIconSetConfig;\n}\n/** @docs-private */\nexport declare function ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry: MatIconRegistry, httpClient: HttpClient, sanitizer: DomSanitizer, document?: any): MatIconRegistry;\n/** @docs-private */\nexport declare const ICON_REGISTRY_PROVIDER: {\n    provide: typeof MatIconRegistry;\n    deps: (Optional[] | typeof DomSanitizer)[];\n    useFactory: typeof ICON_REGISTRY_PROVIDER_FACTORY;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/icon/icon.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, OnChanges, OnInit, SimpleChanges, InjectionToken, OnDestroy, AfterViewChecked } from '@angular/core';\nimport { CanColor, CanColorCtor } from '@angular/material/core';\nimport { MatIconRegistry } from './icon-registry';\n/** @docs-private */\nexport declare class MatIconBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatIconMixinBase: CanColorCtor & typeof MatIconBase;\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport declare const MAT_ICON_LOCATION: InjectionToken<MatIconLocation>;\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n    getPathname: () => string;\n}\n/** @docs-private */\nexport declare function MAT_ICON_LOCATION_FACTORY(): MatIconLocation;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nexport declare class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked, CanColor, OnDestroy {\n    private _iconRegistry;\n    /**\n     * @deprecated `location` parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    private _location?;\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    inline: boolean;\n    private _inline;\n    /** Name of the icon in the SVG icon set. */\n    svgIcon: string;\n    /** Font set that the icon is a part of. */\n    fontSet: string;\n    private _fontSet;\n    /** Name of an icon within a font set. */\n    fontIcon: string;\n    private _fontIcon;\n    private _previousFontSetClass;\n    private _previousFontIconClass;\n    /** Keeps track of the current page path. */\n    private _previousPath?;\n    /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n    private _elementsWithExternalReferences?;\n    constructor(elementRef: ElementRef<HTMLElement>, _iconRegistry: MatIconRegistry, ariaHidden: string, \n    /**\n     * @deprecated `location` parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    _location?: MatIconLocation | undefined);\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    private _splitIconName;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnInit(): void;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    private _usingFontIcon;\n    private _setSvgElement;\n    private _clearSvgElement;\n    private _updateFontIconClasses;\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    private _cleanupFontValue;\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    private _prependPathToReferences;\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    private _cacheChildrenWithExternalReferences;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/icon/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/icon/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './icon-module';\nexport * from './icon';\nexport * from './icon-registry';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/input/autosize.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTextareaAutosize } from '@angular/cdk/text-field';\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\nexport declare class MatTextareaAutosize extends CdkTextareaAutosize {\n    matAutosizeMinRows: number;\n    matAutosizeMaxRows: number;\n    matAutosize: boolean;\n    matTextareaAutosize: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/input/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/input/input-errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nexport declare function getMatInputUnsupportedTypeError(type: string): Error;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/input/input-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatInputModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/input/input-value-accessor.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport declare const MAT_INPUT_VALUE_ACCESSOR: InjectionToken<{\n    value: any;\n}>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/input/input.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { AutofillMonitor } from '@angular/cdk/text-field';\nimport { DoCheck, ElementRef, NgZone, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { CanUpdateErrorState, CanUpdateErrorStateCtor, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n/** @docs-private */\nexport declare class MatInputBase {\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    _parentForm: NgForm;\n    _parentFormGroup: FormGroupDirective;\n    /** @docs-private */\n    ngControl: NgControl;\n    constructor(_defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, \n    /** @docs-private */\n    ngControl: NgControl);\n}\nexport declare const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase;\n/** Directive that allows a native input to work inside a `MatFormField`. */\nexport declare class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges, OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>;\n    protected _platform: Platform;\n    /** @docs-private */\n    ngControl: NgControl;\n    private _autofillMonitor;\n    protected _uid: string;\n    protected _previousNativeValue: any;\n    private _inputValueAccessor;\n    /** The aria-describedby attribute on the input for improved a11y. */\n    _ariaDescribedby: string;\n    /** Whether the component is being rendered on the server. */\n    _isServer: boolean;\n    /** Whether the component is a native html select. */\n    _isNativeSelect: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void>;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    controlType: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    autofilled: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    disabled: boolean;\n    protected _disabled: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    id: string;\n    protected _id: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    placeholder: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    required: boolean;\n    protected _required: boolean;\n    /** Input type of the element. */\n    type: string;\n    protected _type: string;\n    /** An object used to control when error messages are shown. */\n    errorStateMatcher: ErrorStateMatcher;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    value: string;\n    /** Whether the element is readonly. */\n    readonly: boolean;\n    private _readonly;\n    protected _neverEmptyInputTypes: string[];\n    constructor(_elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>, _platform: Platform, \n    /** @docs-private */\n    ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _defaultErrorStateMatcher: ErrorStateMatcher, inputValueAccessor: any, _autofillMonitor: AutofillMonitor, ngZone: NgZone);\n    ngOnInit(): void;\n    ngOnChanges(): void;\n    ngOnDestroy(): void;\n    ngDoCheck(): void;\n    /** Focuses the input. */\n    focus(): void;\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean): void;\n    _onInput(): void;\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue(): void;\n    /** Make sure the input is a supported type. */\n    protected _validateType(): void;\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty(): boolean;\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput(): boolean;\n    /** Determines if the component host is a textarea. */\n    protected _isTextarea(): boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly empty: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly shouldLabelFloat: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids: string[]): void;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/input/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './autosize';\nexport * from './input';\nexport * from './input-errors';\nexport * from './input-module';\nexport * from './input-value-accessor';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/list/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/list/list-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatListModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/list/list.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ElementRef, QueryList } from '@angular/core';\nimport { CanDisableRipple, CanDisableRippleCtor, MatLine } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatListBase {\n}\nexport declare const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase;\n/** @docs-private */\nexport declare class MatListItemBase {\n}\nexport declare const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase;\nexport declare class MatNavList extends _MatListMixinBase implements CanDisableRipple {\n}\nexport declare class MatList extends _MatListMixinBase implements CanDisableRipple {\n    private _elementRef?;\n    /**\n     * @deprecated _elementRef parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    constructor(_elementRef?: ElementRef<HTMLElement> | undefined);\n    _getListType(): 'list' | 'action-list' | null;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatListAvatarCssMatStyler {\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatListIconCssMatStyler {\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatListSubheaderCssMatStyler {\n}\n/** An item within a Material Design list. */\nexport declare class MatListItem extends _MatListItemMixinBase implements AfterContentInit, CanDisableRipple {\n    private _element;\n    private _isInteractiveList;\n    private _list?;\n    _lines: QueryList<MatLine>;\n    _avatar: MatListAvatarCssMatStyler;\n    _icon: MatListIconCssMatStyler;\n    constructor(_element: ElementRef<HTMLElement>, navList?: MatNavList, list?: MatList);\n    ngAfterContentInit(): void;\n    /** Whether this list item should show a ripple effect when clicked. */\n    _isRippleDisabled(): boolean;\n    /** Retrieves the DOM element of the component host. */\n    _getHostElement(): HTMLElement;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/list/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './list-module';\nexport * from './list';\nexport * from './selection-list';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/list/selection-list.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusableOption, FocusKeyManager } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';\nimport { CanDisableRipple, CanDisableRippleCtor, MatLine } from '@angular/material/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { MatListAvatarCssMatStyler, MatListIconCssMatStyler } from './list';\n/** @docs-private */\nexport declare class MatSelectionListBase {\n}\nexport declare const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase;\n/** @docs-private */\nexport declare class MatListOptionBase {\n}\nexport declare const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase;\n/** @docs-private */\nexport declare const MAT_SELECTION_LIST_VALUE_ACCESSOR: any;\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport declare class MatSelectionListChange {\n    /** Reference to the selection list that emitted the event. */\n    source: MatSelectionList;\n    /** Reference to the option that has been changed. */\n    option: MatListOption;\n    constructor(\n    /** Reference to the selection list that emitted the event. */\n    source: MatSelectionList, \n    /** Reference to the option that has been changed. */\n    option: MatListOption);\n}\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\nexport declare class MatListOption extends _MatListOptionMixinBase implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n    private _element;\n    private _changeDetector;\n    /** @docs-private */\n    selectionList: MatSelectionList;\n    private _selected;\n    private _disabled;\n    private _hasFocus;\n    _avatar: MatListAvatarCssMatStyler;\n    _icon: MatListIconCssMatStyler;\n    _lines: QueryList<MatLine>;\n    /** DOM element containing the item's text. */\n    _text: ElementRef;\n    /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n    checkboxPosition: 'before' | 'after';\n    /** Value of the option */\n    value: any;\n    /** Whether the option is disabled. */\n    disabled: any;\n    /** Whether the option is selected. */\n    selected: boolean;\n    constructor(_element: ElementRef<HTMLElement>, _changeDetector: ChangeDetectorRef, \n    /** @docs-private */\n    selectionList: MatSelectionList);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Toggles the selection state of the option. */\n    toggle(): void;\n    /** Allows for programmatic focusing of the option. */\n    focus(): void;\n    /**\n     * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n     * @docs-private\n     */\n    getLabel(): any;\n    /** Whether this list item should show a ripple effect when clicked. */\n    _isRippleDisabled(): any;\n    _handleClick(): void;\n    _handleFocus(): void;\n    _handleBlur(): void;\n    /** Retrieves the DOM element of the component host. */\n    _getHostElement(): HTMLElement;\n    /** Sets the selected state of the option. Returns whether the value has changed. */\n    _setSelected(selected: boolean): boolean;\n    /**\n     * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n     * used to trigger an update of the list option if the disabled state of the selection list\n     * changed.\n     */\n    _markForCheck(): void;\n}\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\nexport declare class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n    private _element;\n    /** The FocusKeyManager which handles focus. */\n    _keyManager: FocusKeyManager<MatListOption>;\n    /** The option components contained within this selection-list. */\n    options: QueryList<MatListOption>;\n    /** Emits a change event whenever the selected state of an option changes. */\n    readonly selectionChange: EventEmitter<MatSelectionListChange>;\n    /** Tabindex of the selection list. */\n    tabIndex: number;\n    /**\n     * Function used for comparing an option against the selected value when determining which\n     * options should appear as selected. The first argument is the value of an options. The second\n     * one is a value from the selected value. A boolean must be returned.\n     */\n    compareWith: (o1: any, o2: any) => boolean;\n    /** Whether the selection list is disabled. */\n    disabled: boolean;\n    private _disabled;\n    /** The currently selected options. */\n    selectedOptions: SelectionModel<MatListOption>;\n    /** View to model callback that should be called whenever the selected options change. */\n    private _onChange;\n    /** Used for storing the values that were assigned before the options were initialized. */\n    private _tempValues;\n    /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n    private _modelChanges;\n    /** View to model callback that should be called if the list or its options lost focus. */\n    _onTouched: () => void;\n    constructor(_element: ElementRef<HTMLElement>, tabIndex: string);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Focuses the last active list option. */\n    focus(): void;\n    /** Selects all of the options. */\n    selectAll(): void;\n    /** Deselects all of the options. */\n    deselectAll(): void;\n    /** Sets the focused option of the selection-list. */\n    _setFocusedOption(option: MatListOption): void;\n    /**\n     * Removes an option from the selection list and updates the active item.\n     * @returns Currently-active item.\n     */\n    _removeOptionFromList(option: MatListOption): MatListOption | null;\n    /** Passes relevant key presses to our key manager. */\n    _keydown(event: KeyboardEvent): void;\n    /** Reports a value change to the ControlValueAccessor */\n    _reportValueChange(): void;\n    /** Emits a change event if the selected state of an option changed. */\n    _emitChangeEvent(option: MatListOption): void;\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(values: string[]): void;\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled: boolean): void;\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn: (value: any) => void): void;\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn: () => void): void;\n    /** Sets the selected options based on the specified values. */\n    private _setOptionsFromValues;\n    /** Returns the values of the selected options. */\n    private _getSelectedOptionValues;\n    /** Toggles the state of the currently focused option if enabled. */\n    private _toggleFocusedOption;\n    /**\n     * Sets the selected state on all of the options\n     * and emits an event if anything changed.\n     */\n    private _setAllOptionsSelected;\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex;\n    /** Returns the index of the specified list option. */\n    private _getOptionIndex;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/menu/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵa23 } from './menu-directive';\nexport { MatMenuItemBase as ɵb23, _MatMenuItemMixinBase as ɵc23 } from './menu-item';\nexport { MAT_MENU_PANEL as ɵf23 } from './menu-panel';\nexport { MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵd23, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵe23 } from './menu-trigger';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/menu/menu-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport declare const matMenuAnimations: {\n    readonly transformMenu: AnimationTriggerMetadata;\n    readonly fadeInItems: AnimationTriggerMetadata;\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport declare const fadeInItems: AnimationTriggerMetadata;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport declare const transformMenu: AnimationTriggerMetadata;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/menu/menu-content.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplateRef, ComponentFactoryResolver, ApplicationRef, Injector, ViewContainerRef, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nexport declare class MatMenuContent implements OnDestroy {\n    private _template;\n    private _componentFactoryResolver;\n    private _appRef;\n    private _injector;\n    private _viewContainerRef;\n    private _document;\n    private _portal;\n    private _outlet;\n    /** Emits when the menu content has been attached. */\n    _attached: Subject<void>;\n    constructor(_template: TemplateRef<any>, _componentFactoryResolver: ComponentFactoryResolver, _appRef: ApplicationRef, _injector: Injector, _viewContainerRef: ViewContainerRef, _document: any);\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context?: any): void;\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach(): void;\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/menu/menu-directive.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport { Direction } from '@angular/cdk/bidi';\nimport { AfterContentInit, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, TemplateRef, QueryList, OnInit } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { MatMenuContent } from './menu-content';\nimport { MatMenuItem } from './menu-item';\nimport { MatMenuPanel } from './menu-panel';\nimport { MenuPositionX, MenuPositionY } from './menu-positions';\nimport { AnimationEvent } from '@angular/animations';\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n    /** The x-axis position of the menu. */\n    xPosition: MenuPositionX;\n    /** The y-axis position of the menu. */\n    yPosition: MenuPositionY;\n    /** Whether the menu should overlap the menu trigger. */\n    overlapTrigger: boolean;\n    /** Class to be applied to the menu's backdrop. */\n    backdropClass: string;\n    /** Whether the menu has a backdrop. */\n    hasBackdrop?: boolean;\n}\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport declare const MAT_MENU_DEFAULT_OPTIONS: InjectionToken<MatMenuDefaultOptions>;\n/** @docs-private */\nexport declare function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions;\nexport declare class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n    private _elementRef;\n    private _ngZone;\n    private _defaultOptions;\n    private _keyManager;\n    private _xPosition;\n    private _yPosition;\n    private _previousElevation;\n    /** Menu items inside the current menu. */\n    private _items;\n    /** Emits whenever the amount of menu items changes. */\n    private _itemChanges;\n    /** Subscription to tab events on the menu panel */\n    private _tabSubscription;\n    /** Config object to be passed into the menu's ngClass */\n    _classList: {\n        [key: string]: boolean;\n    };\n    /** Current state of the panel animation. */\n    _panelAnimationState: 'void' | 'enter';\n    /** Emits whenever an animation on the menu completes. */\n    _animationDone: Subject<AnimationEvent>;\n    /** Whether the menu is animating. */\n    _isAnimating: boolean;\n    /** Parent menu of the current menu panel. */\n    parentMenu: MatMenuPanel | undefined;\n    /** Layout direction of the menu. */\n    direction: Direction;\n    /** Class to be added to the backdrop element. */\n    backdropClass: string;\n    /** Position of the menu in the X axis. */\n    xPosition: MenuPositionX;\n    /** Position of the menu in the Y axis. */\n    yPosition: MenuPositionY;\n    /** @docs-private */\n    templateRef: TemplateRef<any>;\n    /**\n     * List of the items inside of a menu.\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    items: QueryList<MatMenuItem>;\n    /**\n     * Menu content that will be rendered lazily.\n     * @docs-private\n     */\n    lazyContent: MatMenuContent;\n    /** Whether the menu should overlap its trigger. */\n    overlapTrigger: boolean;\n    private _overlapTrigger;\n    /** Whether the menu has a backdrop. */\n    hasBackdrop: boolean | undefined;\n    private _hasBackdrop;\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    panelClass: string;\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    classList: string;\n    /** Event emitted when the menu is closed. */\n    readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    /**\n     * Event emitted when the menu is closed.\n     * @deprecated Switch to `closed` instead\n     * @breaking-change 8.0.0\n     */\n    close: EventEmitter<void | \"click\" | \"keydown\" | \"tab\">;\n    constructor(_elementRef: ElementRef<HTMLElement>, _ngZone: NgZone, _defaultOptions: MatMenuDefaultOptions);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered(): Observable<MatMenuItem>;\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event: KeyboardEvent): void;\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin?: FocusOrigin): void;\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem(): void;\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth: number): void;\n    /**\n     * Registers a menu item with the menu.\n     * @docs-private\n     */\n    addItem(item: MatMenuItem): void;\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     */\n    removeItem(item: MatMenuItem): void;\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX?: MenuPositionX, posY?: MenuPositionY): void;\n    /** Starts the enter animation. */\n    _startAnimation(): void;\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation(): void;\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event: AnimationEvent): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/menu/menu-errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport declare function throwMatMenuMissingError(): void;\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport declare function throwMatMenuInvalidPositionX(): void;\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport declare function throwMatMenuInvalidPositionY(): void;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/menu/menu-item.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusableOption, FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { ElementRef, OnDestroy } from '@angular/core';\nimport { CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { MatMenuPanel } from './menu-panel';\n/** @docs-private */\nexport declare class MatMenuItemBase {\n}\nexport declare const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase;\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\nexport declare class MatMenuItem extends _MatMenuItemMixinBase implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n    private _elementRef;\n    private _focusMonitor?;\n    private _parentMenu?;\n    private _document;\n    /** Stream that emits when the menu item is hovered. */\n    readonly _hovered: Subject<MatMenuItem>;\n    /** Whether the menu item is highlighted. */\n    _highlighted: boolean;\n    /** Whether the menu item acts as a trigger for a sub-menu. */\n    _triggersSubmenu: boolean;\n    constructor(_elementRef: ElementRef<HTMLElement>, document?: any, _focusMonitor?: FocusMonitor | undefined, _parentMenu?: MatMenuPanel<MatMenuItem> | undefined);\n    /** Focuses the menu item. */\n    focus(origin?: FocusOrigin): void;\n    ngOnDestroy(): void;\n    /** Used to set the `tabindex`. */\n    _getTabIndex(): string;\n    /** Returns the host DOM element. */\n    _getHostElement(): HTMLElement;\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event: Event): void;\n    /** Emits to the hover stream. */\n    _handleMouseEnter(): void;\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/menu/menu-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatMenuModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/menu/menu-panel.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, TemplateRef, InjectionToken } from '@angular/core';\nimport { MenuPositionX, MenuPositionY } from './menu-positions';\nimport { Direction } from '@angular/cdk/bidi';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport { MatMenuContent } from './menu-content';\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport declare const MAT_MENU_PANEL: InjectionToken<MatMenuPanel<any>>;\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n    xPosition: MenuPositionX;\n    yPosition: MenuPositionY;\n    overlapTrigger: boolean;\n    templateRef: TemplateRef<any>;\n    close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    parentMenu?: MatMenuPanel | undefined;\n    direction?: Direction;\n    focusFirstItem: (origin?: FocusOrigin) => void;\n    resetActiveItem: () => void;\n    setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n    setElevation?(depth: number): void;\n    lazyContent?: MatMenuContent;\n    backdropClass?: string;\n    hasBackdrop?: boolean;\n    addItem?: (item: T) => void;\n    removeItem?: (item: T) => void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/menu/menu-positions.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare type MenuPositionX = 'before' | 'after';\nexport declare type MenuPositionY = 'above' | 'below';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/menu/menu-trigger.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { Overlay, ScrollStrategy } from '@angular/cdk/overlay';\nimport { AfterContentInit, ElementRef, EventEmitter, InjectionToken, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { MatMenu } from './menu-directive';\nimport { MatMenuItem } from './menu-item';\nimport { MatMenuPanel } from './menu-panel';\n/** Injection token that determines the scroll handling while the menu is open. */\nexport declare const MAT_MENU_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_MENU_SCROLL_STRATEGY_FACTORY;\n};\n/** Default top padding of the menu panel. */\nexport declare const MENU_PANEL_TOP_PADDING = 8;\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nexport declare class MatMenuTrigger implements AfterContentInit, OnDestroy {\n    private _overlay;\n    private _element;\n    private _viewContainerRef;\n    private _parentMenu;\n    private _menuItemInstance;\n    private _dir;\n    private _focusMonitor?;\n    private _portal;\n    private _overlayRef;\n    private _menuOpen;\n    private _closeSubscription;\n    private _hoverSubscription;\n    private _menuCloseSubscription;\n    private _scrollStrategy;\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n    private _handleTouchStart;\n    _openedBy: 'mouse' | 'touch' | null;\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    _deprecatedMatMenuTriggerFor: MatMenuPanel;\n    /** References the menu instance that the trigger is associated with. */\n    menu: MatMenuPanel;\n    private _menu;\n    /** Data to be passed along to any lazily-rendered content. */\n    menuData: any;\n    /** Event emitted when the associated menu is opened. */\n    readonly menuOpened: EventEmitter<void>;\n    /**\n     * Event emitted when the associated menu is opened.\n     * @deprecated Switch to `menuOpened` instead\n     * @breaking-change 8.0.0\n     */\n    readonly onMenuOpen: EventEmitter<void>;\n    /** Event emitted when the associated menu is closed. */\n    readonly menuClosed: EventEmitter<void>;\n    /**\n     * Event emitted when the associated menu is closed.\n     * @deprecated Switch to `menuClosed` instead\n     * @breaking-change 8.0.0\n     */\n    readonly onMenuClose: EventEmitter<void>;\n    constructor(_overlay: Overlay, _element: ElementRef<HTMLElement>, _viewContainerRef: ViewContainerRef, scrollStrategy: any, _parentMenu: MatMenu, _menuItemInstance: MatMenuItem, _dir: Directionality, _focusMonitor?: FocusMonitor | undefined);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Whether the menu is open. */\n    readonly menuOpen: boolean;\n    /** The text direction of the containing app. */\n    readonly dir: Direction;\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu(): boolean;\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu(): void;\n    /** Opens the menu. */\n    openMenu(): void;\n    /** Closes the menu. */\n    closeMenu(): void;\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin?: FocusOrigin): void;\n    /** Closes the menu and does the necessary cleanup. */\n    private _destroyMenu;\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    private _initMenu;\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    private _setMenuElevation;\n    /**\n     * This method resets the menu when it's closed, most importantly restoring\n     * focus to the menu trigger if the menu was opened via the keyboard.\n     */\n    private _resetMenu;\n    private _setIsMenuOpen;\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     */\n    private _checkMenu;\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    private _createOverlay;\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    private _getOverlayConfig;\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    private _subscribeToPositions;\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    private _setPosition;\n    /** Cleans up the active subscriptions. */\n    private _cleanUpSubscriptions;\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    private _menuClosingActions;\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event: MouseEvent): void;\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event: KeyboardEvent): void;\n    /** Handles click events on the trigger. */\n    _handleClick(event: MouseEvent): void;\n    /** Handles the cases where the user hovers over the trigger. */\n    private _handleHover;\n    /** Gets the portal that should be attached to the overlay. */\n    private _getPortal;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/menu/menu.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { MatMenu, MatMenuDefaultOptions, MAT_MENU_DEFAULT_OPTIONS } from './menu-directive';\nexport { MatMenuItem } from './menu-item';\nexport { MatMenuTrigger } from './menu-trigger';\nexport { MatMenuPanel } from './menu-panel';\nexport { MenuPositionX, MenuPositionY } from './menu-positions';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/menu/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './menu-module';\nexport * from './menu';\nexport * from './menu-animations';\nexport * from './menu-content';\nexport { MAT_MENU_SCROLL_STRATEGY } from './menu-trigger';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/paginator/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/paginator/paginator-intl.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional } from '@angular/core';\nimport { Subject } from 'rxjs';\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nexport declare class MatPaginatorIntl {\n    /**\n     * Stream to emit from when labels are changed. Use this to notify components when the labels have\n     * changed after initialization.\n     */\n    readonly changes: Subject<void>;\n    /** A label for the page size selector. */\n    itemsPerPageLabel: string;\n    /** A label for the button that increments the current page. */\n    nextPageLabel: string;\n    /** A label for the button that decrements the current page. */\n    previousPageLabel: string;\n    /** A label for the button that moves to the first page. */\n    firstPageLabel: string;\n    /** A label for the button that moves to the last page. */\n    lastPageLabel: string;\n    /** A label for the range of items within the current page and the length of the whole list. */\n    getRangeLabel: (page: number, pageSize: number, length: number) => string;\n}\n/** @docs-private */\nexport declare function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl): MatPaginatorIntl;\n/** @docs-private */\nexport declare const MAT_PAGINATOR_INTL_PROVIDER: {\n    provide: typeof MatPaginatorIntl;\n    deps: Optional[][];\n    useFactory: typeof MAT_PAGINATOR_INTL_PROVIDER_FACTORY;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/paginator/paginator-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatPaginatorModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/paginator/paginator.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\nimport { MatPaginatorIntl } from './paginator-intl';\nimport { HasInitialized, HasInitializedCtor, ThemePalette, CanDisableCtor, CanDisable } from '@angular/material/core';\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport declare class PageEvent {\n    /** The current page index. */\n    pageIndex: number;\n    /**\n     * Index of the page that was selected previously.\n     * @breaking-change 8.0.0 To be made into a required property.\n     */\n    previousPageIndex?: number;\n    /** The current page size */\n    pageSize: number;\n    /** The current total number of items being paged */\n    length: number;\n}\n/** @docs-private */\nexport declare class MatPaginatorBase {\n}\nexport declare const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase;\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nexport declare class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable, HasInitialized {\n    _intl: MatPaginatorIntl;\n    private _changeDetectorRef;\n    private _initialized;\n    private _intlChanges;\n    /** Theme color to be used for the underlying form controls. */\n    color: ThemePalette;\n    /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n    pageIndex: number;\n    _pageIndex: number;\n    /** The length of the total number of items that are being paginated. Defaulted to 0. */\n    length: number;\n    _length: number;\n    /** Number of items to display on a page. By default set to 50. */\n    pageSize: number;\n    private _pageSize;\n    /** The set of provided page size options to display to the user. */\n    pageSizeOptions: number[];\n    private _pageSizeOptions;\n    /** Whether to hide the page size selection UI from the user. */\n    hidePageSize: boolean;\n    private _hidePageSize;\n    /** Whether to show the first/last buttons UI to the user. */\n    showFirstLastButtons: boolean;\n    private _showFirstLastButtons;\n    /** Event emitted when the paginator changes the page size or page index. */\n    readonly page: EventEmitter<PageEvent>;\n    /** Displayed set of page size options. Will be sorted and include current page size. */\n    _displayedPageSizeOptions: number[];\n    constructor(_intl: MatPaginatorIntl, _changeDetectorRef: ChangeDetectorRef);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /** Advances to the next page if it exists. */\n    nextPage(): void;\n    /** Move back to the previous page if it exists. */\n    previousPage(): void;\n    /** Move to the first page if not already there. */\n    firstPage(): void;\n    /** Move to the last page if not already there. */\n    lastPage(): void;\n    /** Whether there is a previous page. */\n    hasPreviousPage(): boolean;\n    /** Whether there is a next page. */\n    hasNextPage(): boolean;\n    /** Calculate the number of pages */\n    getNumberOfPages(): number;\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     */\n    _changePageSize(pageSize: number): void;\n    /** Checks whether the buttons for going forwards should be disabled. */\n    _nextButtonsDisabled(): boolean;\n    /** Checks whether the buttons for going backwards should be disabled. */\n    _previousButtonsDisabled(): boolean;\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     */\n    private _updateDisplayedPageSizeOptions;\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    private _emitPageEvent;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/paginator/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './paginator-module';\nexport * from './paginator';\nexport * from './paginator-intl';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/progress-bar/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/progress-bar/progress-bar-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatProgressBarModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/progress-bar/progress-bar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, EventEmitter, NgZone, AfterViewInit, OnDestroy, InjectionToken } from '@angular/core';\nimport { CanColor, CanColorCtor } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatProgressBarBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n    value: number;\n}\nexport declare const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase;\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport declare const MAT_PROGRESS_BAR_LOCATION: InjectionToken<MatProgressBarLocation>;\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n    getPathname: () => string;\n}\n/** @docs-private */\nexport declare function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation;\n/**\n * `<mat-progress-bar>` component.\n */\nexport declare class MatProgressBar extends _MatProgressBarMixinBase implements CanColor, AfterViewInit, OnDestroy {\n    _elementRef: ElementRef;\n    private _ngZone;\n    _animationMode?: string | undefined;\n    constructor(_elementRef: ElementRef, _ngZone: NgZone, _animationMode?: string | undefined, \n    /**\n     * @deprecated `location` parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    location?: MatProgressBarLocation);\n    /** Flag that indicates whether NoopAnimations mode is set to true. */\n    _isNoopAnimation: boolean;\n    /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n    value: number;\n    private _value;\n    /** Buffer value of the progress bar. Defaults to zero. */\n    bufferValue: number;\n    private _bufferValue;\n    _primaryValueBar: ElementRef;\n    /**\n     * Event emitted when animation of the primary progress bar completes. This event will not\n     * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n     * animations (indeterminate and query).\n     */\n    animationEnd: EventEmitter<ProgressAnimationEnd>;\n    /** Reference to animation end subscription to be unsubscribed on destroy. */\n    private _animationEndSubscription;\n    /**\n     * Mode of the progress bar.\n     *\n     * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n     * 'determinate'.\n     * Mirrored to mode attribute.\n     */\n    mode: 'determinate' | 'indeterminate' | 'buffer' | 'query';\n    /** ID of the progress bar. */\n    progressbarId: string;\n    /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n    _rectangleFillValue: string;\n    /** Gets the current transform value for the progress bar's primary indicator. */\n    _primaryTransform(): {\n        transform: string;\n    };\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     */\n    _bufferTransform(): {\n        transform: string;\n    } | undefined;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /** Emit an animationEnd event if in determinate or buffer mode. */\n    private emitAnimationEnd;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/progress-bar/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './progress-bar-module';\nexport * from './progress-bar';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/progress-spinner/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/progress-spinner/progress-spinner-module.d.ts",
    "content": "declare class MatProgressSpinnerModule {\n}\nexport { MatProgressSpinnerModule };\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/progress-spinner/progress-spinner.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { ElementRef, InjectionToken } from '@angular/core';\nimport { CanColor, CanColorCtor } from '@angular/material/core';\n/** Possible mode for a progress spinner. */\nexport declare type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n/** @docs-private */\nexport declare class MatProgressSpinnerBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase;\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n    /** Diameter of the spinner. */\n    diameter?: number;\n    /** Width of the spinner's stroke. */\n    strokeWidth?: number;\n    /**\n     * Whether the animations should be force to be enabled, ignoring if the current environment is\n     * using NoopAnimationsModule.\n     */\n    _forceAnimations?: boolean;\n}\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport declare const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS: InjectionToken<MatProgressSpinnerDefaultOptions>;\n/** @docs-private */\nexport declare function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions;\n/**\n * `<mat-progress-spinner>` component.\n */\nexport declare class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n    _elementRef: ElementRef;\n    private _document;\n    private animationMode?;\n    private defaults?;\n    private _value;\n    private _strokeWidth;\n    private _fallbackAnimation;\n    /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n    private static diameters;\n    /**\n     * Used for storing all of the generated keyframe animations.\n     * @dynamic\n     */\n    private static styleTag;\n    /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n    _noopAnimations: boolean;\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    diameter: number;\n    private _diameter;\n    /** Stroke width of the progress spinner. */\n    strokeWidth: number;\n    /** Mode of the progress circle */\n    mode: ProgressSpinnerMode;\n    /** Value of the progress circle. */\n    value: number;\n    constructor(_elementRef: ElementRef, platform: Platform, _document: any, animationMode?: string | undefined, defaults?: MatProgressSpinnerDefaultOptions | undefined);\n    /** The radius of the spinner, adjusted for stroke width. */\n    readonly _circleRadius: number;\n    /** The view box of the spinner's svg element. */\n    readonly _viewBox: string;\n    /** The stroke circumference of the svg circle. */\n    readonly _strokeCircumference: number;\n    /** The dash offset of the svg circle. */\n    readonly _strokeDashOffset: number | null;\n    /** Stroke width of the circle in percent. */\n    readonly _circleStrokeWidth: number;\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    private _attachStyleNode;\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    private _getAnimationText;\n}\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nexport declare class MatSpinner extends MatProgressSpinner {\n    constructor(elementRef: ElementRef, platform: Platform, document: any, animationMode?: string, defaults?: MatProgressSpinnerDefaultOptions);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/progress-spinner/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './progress-spinner-module';\nexport * from './progress-spinner';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './version';\nexport * from '@angular/material/autocomplete';\nexport * from '@angular/material/badge';\nexport * from '@angular/material/bottom-sheet';\nexport * from '@angular/material/button';\nexport * from '@angular/material/button-toggle';\nexport * from '@angular/material/card';\nexport * from '@angular/material/checkbox';\nexport * from '@angular/material/chips';\nexport * from '@angular/material/core';\nexport * from '@angular/material/datepicker';\nexport * from '@angular/material/dialog';\nexport * from '@angular/material/divider';\nexport * from '@angular/material/expansion';\nexport * from '@angular/material/form-field';\nexport * from '@angular/material/grid-list';\nexport * from '@angular/material/icon';\nexport * from '@angular/material/input';\nexport * from '@angular/material/list';\nexport * from '@angular/material/menu';\nexport * from '@angular/material/paginator';\nexport * from '@angular/material/progress-bar';\nexport * from '@angular/material/progress-spinner';\nexport * from '@angular/material/radio';\nexport * from '@angular/material/select';\nexport * from '@angular/material/sidenav';\nexport * from '@angular/material/slide-toggle';\nexport * from '@angular/material/slider';\nexport * from '@angular/material/snack-bar';\nexport * from '@angular/material/sort';\nexport * from '@angular/material/stepper';\nexport * from '@angular/material/table';\nexport * from '@angular/material/tabs';\nexport * from '@angular/material/toolbar';\nexport * from '@angular/material/tooltip';\nexport * from '@angular/material/tree';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/radio/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/radio/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './radio-module';\nexport * from './radio';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/radio/radio-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatRadioModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/radio/radio.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, HasTabIndex, HasTabIndexCtor } from '@angular/material/core';\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport declare const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any;\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport declare class MatRadioChange {\n    /** The MatRadioButton that emits the change event. */\n    source: MatRadioButton;\n    /** The value of the MatRadioButton. */\n    value: any;\n    constructor(\n    /** The MatRadioButton that emits the change event. */\n    source: MatRadioButton, \n    /** The value of the MatRadioButton. */\n    value: any);\n}\n/** @docs-private */\nexport declare class MatRadioGroupBase {\n}\nexport declare const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase;\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nexport declare class MatRadioGroup extends _MatRadioGroupMixinBase implements AfterContentInit, ControlValueAccessor, CanDisable {\n    private _changeDetector;\n    /** Selected value for the radio group. */\n    private _value;\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name;\n    /** The currently selected radio button. Should match value. */\n    private _selected;\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized;\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition;\n    /** Whether the radio group is disabled. */\n    private _disabled;\n    /** Whether the radio group is required. */\n    private _required;\n    /** The method to be called in order to update ngModel */\n    _controlValueAccessorChangeFn: (value: any) => void;\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    onTouched: () => any;\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    readonly change: EventEmitter<MatRadioChange>;\n    /** Child radio buttons. */\n    _radios: QueryList<MatRadioButton>;\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    name: string;\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    labelPosition: 'before' | 'after';\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    value: any;\n    _checkSelectedRadioButton(): void;\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    selected: MatRadioButton | null;\n    /** Whether the radio group is disabled */\n    disabled: boolean;\n    /** Whether the radio group is required */\n    required: boolean;\n    constructor(_changeDetector: ChangeDetectorRef);\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit(): void;\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch(): void;\n    private _updateRadioButtonNames;\n    /** Updates the `selected` radio button from the internal _value state. */\n    private _updateSelectedRadioFromValue;\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent(): void;\n    _markRadiosForCheck(): void;\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any): void;\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void): void;\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean): void;\n}\n/** @docs-private */\nexport declare class MatRadioButtonBase {\n    _elementRef: ElementRef;\n    disabled: boolean;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatRadioButtonMixinBase: CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase;\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nexport declare class MatRadioButton extends _MatRadioButtonMixinBase implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n    private _changeDetector;\n    private _focusMonitor;\n    private _radioDispatcher;\n    _animationMode?: string | undefined;\n    private _uniqueId;\n    /** The unique ID for the radio button. */\n    id: string;\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    name: string;\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    ariaLabel: string;\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    ariaLabelledby: string;\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    ariaDescribedby: string;\n    /** Whether this radio button is checked. */\n    checked: boolean;\n    /** The value of this radio button. */\n    value: any;\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    labelPosition: 'before' | 'after';\n    private _labelPosition;\n    /** Whether the radio button is disabled. */\n    disabled: boolean;\n    /** Whether the radio button is required. */\n    required: boolean;\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    readonly change: EventEmitter<MatRadioChange>;\n    /** The parent radio group. May or may not be present. */\n    radioGroup: MatRadioGroup;\n    /** ID of the native input element inside `<mat-radio-button>` */\n    readonly inputId: string;\n    /** Whether this radio is checked. */\n    private _checked;\n    /** Whether this radio is disabled. */\n    private _disabled;\n    /** Whether this radio is required. */\n    private _required;\n    /** Value assigned to this radio. */\n    private _value;\n    /** Unregister function for _radioDispatcher */\n    private _removeUniqueSelectionListener;\n    /** The native `<input type=radio>` element */\n    _inputElement: ElementRef<HTMLInputElement>;\n    constructor(radioGroup: MatRadioGroup, elementRef: ElementRef, _changeDetector: ChangeDetectorRef, _focusMonitor: FocusMonitor, _radioDispatcher: UniqueSelectionDispatcher, _animationMode?: string | undefined);\n    /** Focuses the radio button. */\n    focus(): void;\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /** Dispatch change event with current value. */\n    private _emitChangeEvent;\n    _isRippleDisabled(): boolean;\n    _onInputClick(event: Event): void;\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     */\n    _onInputChange(event: Event): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/select/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/select/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './select-module';\nexport * from './select';\nexport * from './select-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/select/select-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport declare const matSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport declare const transformPanel: AnimationTriggerMetadata;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport declare const fadeInContent: AnimationTriggerMetadata;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/select/select-errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport declare function getMatSelectDynamicMultipleError(): Error;\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport declare function getMatSelectNonArrayValueError(): Error;\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport declare function getMatSelectNonFunctionValueError(): Error;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/select/select-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatSelectModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/select/select.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { CdkConnectedOverlay, Overlay, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { AfterContentInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, InjectionToken, NgZone, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, CanUpdateErrorState, CanUpdateErrorStateCtor, ErrorStateMatcher, HasTabIndex, HasTabIndexCtor, MatOptgroup, MatOption, MatOptionSelectionChange } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl } from '@angular/material/form-field';\nimport { Observable, Subject } from 'rxjs';\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel */\nexport declare const SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis */\nexport declare const SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport declare const SELECT_PANEL_INDENT_PADDING_X: number;\n/** The height of the select items in `em` units. */\nexport declare const SELECT_ITEM_HEIGHT_EM = 3;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport declare let SELECT_MULTIPLE_PANEL_PADDING_X: number;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport declare const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nexport declare const MAT_SELECT_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_SELECT_SCROLL_STRATEGY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY;\n};\n/** Change event object that is emitted when the select value has changed. */\nexport declare class MatSelectChange {\n    /** Reference to the select that emitted the change event. */\n    source: MatSelect;\n    /** Current value of the select that emitted the event. */\n    value: any;\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source: MatSelect, \n    /** Current value of the select that emitted the event. */\n    value: any);\n}\n/** @docs-private */\nexport declare class MatSelectBase {\n    _elementRef: ElementRef;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    _parentForm: NgForm;\n    _parentFormGroup: FormGroupDirective;\n    ngControl: NgControl;\n    constructor(_elementRef: ElementRef, _defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, ngControl: NgControl);\n}\nexport declare const _MatSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanDisableRippleCtor & CanUpdateErrorStateCtor & typeof MatSelectBase;\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nexport declare class MatSelectTrigger {\n}\nexport declare class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex, MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n    private _viewportRuler;\n    private _changeDetectorRef;\n    private _ngZone;\n    private _dir;\n    private _parentFormField;\n    ngControl: NgControl;\n    private _scrollStrategyFactory;\n    /** Whether or not the overlay panel is open. */\n    private _panelOpen;\n    /** Whether filling out the select is required in the form. */\n    private _required;\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private _scrollTop;\n    /** The placeholder displayed in the trigger of the select. */\n    private _placeholder;\n    /** Whether the component is in multiple selection mode. */\n    private _multiple;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith;\n    /** Unique id for this input. */\n    private _uid;\n    /** Emits whenever the component is destroyed. */\n    private readonly _destroy;\n    /** The last measured value for the trigger's client bounding rect. */\n    _triggerRect: ClientRect;\n    /** The aria-describedby attribute on the select for improved a11y. */\n    _ariaDescribedby: string;\n    /** The cached font-size of the trigger element. */\n    _triggerFontSize: number;\n    /** Deals with the selection logic. */\n    _selectionModel: SelectionModel<MatOption>;\n    /** Manages keyboard events for options in the panel. */\n    _keyManager: ActiveDescendantKeyManager<MatOption>;\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void;\n    /** `View -> model callback called when select has been touched` */\n    _onTouched: () => void;\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    _optionIds: string;\n    /** The value of the select panel's transform-origin property. */\n    _transformOrigin: string;\n    /** Emits when the panel element is finished transforming in. */\n    _panelDoneAnimatingStream: Subject<string>;\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    _scrollStrategy: ScrollStrategy;\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    _offsetY: number;\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    _positions: {\n        originX: string;\n        originY: string;\n        overlayX: string;\n        overlayY: string;\n    }[];\n    /** Whether the component is disabling centering of the active option over the trigger. */\n    private _disableOptionCentering;\n    /** Whether the select is focused. */\n    /**\n    * @deprecated Setter to be removed as this property is intended to be readonly.\n    * @breaking-change 8.0.0\n    */\n    focused: boolean;\n    private _focused;\n    /** A name for this control that can be used by `mat-form-field`. */\n    controlType: string;\n    /** Trigger that opens the select. */\n    trigger: ElementRef;\n    /** Panel containing the select options. */\n    panel: ElementRef;\n    /** Overlay pane containing the options. */\n    overlayDir: CdkConnectedOverlay;\n    /** All of the defined select options. */\n    options: QueryList<MatOption>;\n    /** All of the defined groups of options. */\n    optionGroups: QueryList<MatOptgroup>;\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    panelClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    /** User-supplied override of the trigger element. */\n    customTrigger: MatSelectTrigger;\n    /** Placeholder to be shown if no value has been selected. */\n    placeholder: string;\n    /** Whether the component is required. */\n    required: boolean;\n    /** Whether the user should be allowed to select multiple options. */\n    multiple: boolean;\n    /** Whether to center the active option over the trigger. */\n    disableOptionCentering: boolean;\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    compareWith: (o1: any, o2: any) => boolean;\n    /** Value of the select control. */\n    value: any;\n    private _value;\n    /** Aria label of the select. If not specified, the placeholder will be used as label. */\n    ariaLabel: string;\n    /** Input that can be used to specify the `aria-labelledby` attribute. */\n    ariaLabelledby: string;\n    /** Object used to control when error messages are shown. */\n    errorStateMatcher: ErrorStateMatcher;\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n    /** Unique id of the element. */\n    id: string;\n    private _id;\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<MatOptionSelectionChange>;\n    /** Event emitted when the select panel has been toggled. */\n    readonly openedChange: EventEmitter<boolean>;\n    /** Event emitted when the select has been opened. */\n    readonly _openedStream: Observable<void>;\n    /** Event emitted when the select has been closed. */\n    readonly _closedStream: Observable<void>;\n    /** Event emitted when the selected value has been changed by the user. */\n    readonly selectionChange: EventEmitter<MatSelectChange>;\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    readonly valueChange: EventEmitter<any>;\n    constructor(_viewportRuler: ViewportRuler, _changeDetectorRef: ChangeDetectorRef, _ngZone: NgZone, _defaultErrorStateMatcher: ErrorStateMatcher, elementRef: ElementRef, _dir: Directionality, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _parentFormField: MatFormField, ngControl: NgControl, tabIndex: string, scrollStrategyFactory: any);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngDoCheck(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void;\n    /** Opens the overlay panel. */\n    open(): void;\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void;\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void;\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void;\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void;\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /** Whether or not the overlay panel is open. */\n    readonly panelOpen: boolean;\n    /** The currently selected option. */\n    readonly selected: MatOption | MatOption[];\n    /** The value displayed in the trigger. */\n    readonly triggerValue: string;\n    /** Whether the element is in RTL mode. */\n    _isRtl(): boolean;\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event: KeyboardEvent): void;\n    /** Handles keyboard events while the select is closed. */\n    private _handleClosedKeydown;\n    /** Handles keyboard events when the selected is open. */\n    private _handleOpenKeydown;\n    _onFocus(): void;\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur(): void;\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached(): void;\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme(): string;\n    /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n    private _setPseudoCheckboxPaddingSize;\n    /** Whether the select has a value. */\n    readonly empty: boolean;\n    private _initializeSelection;\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private _setSelectionByValue;\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private _selectValue;\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private _initKeyManager;\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private _resetOptions;\n    /** Invoked when an option is clicked. */\n    private _onSelect;\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private _sortValues;\n    /** Emits change event to set the model value. */\n    private _propagateChanges;\n    /** Records option IDs to pass to the aria-owns property. */\n    private _setOptionIds;\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private _highlightCorrectOption;\n    /** Scrolls the active option into view. */\n    private _scrollActiveOptionIntoView;\n    /** Focuses the select element. */\n    focus(): void;\n    /** Gets the index of the provided option in the option list. */\n    private _getOptionIndex;\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private _calculateOverlayPosition;\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number;\n    /** Returns the aria-label of the select component. */\n    _getAriaLabel(): string | null;\n    /** Returns the aria-labelledby of the select component. */\n    _getAriaLabelledby(): string | null;\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant(): string | null;\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private _calculateOverlayOffsetX;\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private _calculateOverlayOffsetY;\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private _checkOverlayWithinViewport;\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private _adjustPanelUp;\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private _adjustPanelDown;\n    /** Sets the transform origin point based on the selected option. */\n    private _getOriginBasedOnOption;\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private _getItemCount;\n    /** Calculates the height of the select's options. */\n    private _getItemHeight;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids: string[]): void;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(): void;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly shouldLabelFloat: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/sidenav/drawer-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport declare const matDrawerAnimations: {\n    readonly transformDrawer: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/sidenav/drawer.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationEvent } from '@angular/animations';\nimport { FocusMonitor, FocusOrigin, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { AfterContentChecked, AfterContentInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, QueryList } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport declare function throwMatDuplicatedDrawerError(position: string): void;\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport declare type MatDrawerToggleResult = 'open' | 'close';\n/** Configures whether drawers should use auto sizing by default. */\nexport declare const MAT_DRAWER_DEFAULT_AUTOSIZE: InjectionToken<boolean>;\n/** @docs-private */\nexport declare function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean;\nexport declare class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n    private _changeDetectorRef;\n    _container: MatDrawerContainer;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _container: MatDrawerContainer, elementRef: ElementRef<HTMLElement>, scrollDispatcher: ScrollDispatcher, ngZone: NgZone);\n    ngAfterContentInit(): void;\n}\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nexport declare class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n    private _elementRef;\n    private _focusTrapFactory;\n    private _focusMonitor;\n    private _platform;\n    private _ngZone;\n    private _doc;\n    private _focusTrap;\n    private _elementFocusedBeforeDrawerWasOpened;\n    /** Whether the drawer is initialized. Used for disabling the initial animation. */\n    private _enableAnimations;\n    /** The side that the drawer is attached to. */\n    position: 'start' | 'end';\n    private _position;\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n    mode: 'over' | 'push' | 'side';\n    private _mode;\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n    disableClose: boolean;\n    private _disableClose;\n    /** Whether the drawer should focus the first focusable element automatically when opened. */\n    autoFocus: boolean;\n    private _autoFocus;\n    /** How the sidenav was opened (keypress, mouse click etc.) */\n    private _openedVia;\n    /** Emits whenever the drawer has started animating. */\n    _animationStarted: Subject<AnimationEvent>;\n    /** Emits whenever the drawer is done animating. */\n    _animationEnd: Subject<AnimationEvent>;\n    /** Current state of the sidenav animation. */\n    _animationState: 'open-instant' | 'open' | 'void';\n    /** Event emitted when the drawer open state is changed. */\n    readonly openedChange: EventEmitter<boolean>;\n    /** Event emitted when the drawer has been opened. */\n    readonly _openedStream: Observable<void>;\n    /** Event emitted when the drawer has started opening. */\n    readonly openedStart: Observable<void>;\n    /** Event emitted when the drawer has been closed. */\n    readonly _closedStream: Observable<void>;\n    /** Event emitted when the drawer has started closing. */\n    readonly closedStart: Observable<void>;\n    /** Event emitted when the drawer's position changes. */\n    onPositionChanged: EventEmitter<void>;\n    /**\n     * An observable that emits when the drawer mode changes. This is used by the drawer container to\n     * to know when to when the mode changes so it can adapt the margins on the content.\n     */\n    readonly _modeChanged: Subject<{}>;\n    readonly _isFocusTrapEnabled: boolean;\n    constructor(_elementRef: ElementRef<HTMLElement>, _focusTrapFactory: FocusTrapFactory, _focusMonitor: FocusMonitor, _platform: Platform, _ngZone: NgZone, _doc: any);\n    /** Traps focus inside the drawer. */\n    private _trapFocus;\n    /**\n     * If focus is currently inside the drawer, restores it to where it was before the drawer\n     * opened.\n     */\n    private _restoreFocus;\n    ngAfterContentInit(): void;\n    ngAfterContentChecked(): void;\n    ngOnDestroy(): void;\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n    opened: boolean;\n    private _opened;\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult>;\n    /** Close the drawer. */\n    close(): Promise<MatDrawerToggleResult>;\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    toggle(isOpen?: boolean, openedVia?: FocusOrigin): Promise<MatDrawerToggleResult>;\n    readonly _width: number;\n}\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nexport declare class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n    private _dir;\n    private _element;\n    private _ngZone;\n    private _changeDetectorRef;\n    private _animationMode?;\n    _drawers: QueryList<MatDrawer>;\n    _content: MatDrawerContent;\n    _userContent: MatDrawerContent;\n    /** The drawer child with the `start` position. */\n    readonly start: MatDrawer | null;\n    /** The drawer child with the `end` position. */\n    readonly end: MatDrawer | null;\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n    autosize: boolean;\n    private _autosize;\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n    hasBackdrop: any;\n    _backdropOverride: boolean | null;\n    /** Event emitted when the drawer backdrop is clicked. */\n    readonly backdropClick: EventEmitter<void>;\n    /** The drawer at the start/end position, independent of direction. */\n    private _start;\n    private _end;\n    /**\n     * The drawer at the left/right. When direction changes, these will change as well.\n     * They're used as aliases for the above to set the left/right style properly.\n     * In LTR, _left == _start and _right == _end.\n     * In RTL, _left == _end and _right == _start.\n     */\n    private _left;\n    private _right;\n    /** Emits when the component is destroyed. */\n    private readonly _destroyed;\n    /** Emits on every ngDoCheck. Used for debouncing reflows. */\n    private readonly _doCheckSubject;\n    /**\n     * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n     * drawer is open. We use margin rather than transform even for push mode because transform breaks\n     * fixed position elements inside of the transformed element.\n     */\n    _contentMargins: {\n        left: number | null;\n        right: number | null;\n    };\n    readonly _contentMarginChanges: Subject<{\n        left: number | null;\n        right: number | null;\n    }>;\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n    readonly scrollable: CdkScrollable;\n    constructor(_dir: Directionality, _element: ElementRef<HTMLElement>, _ngZone: NgZone, _changeDetectorRef: ChangeDetectorRef, defaultAutosize?: boolean, _animationMode?: string | undefined);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Calls `open` of both start and end drawers */\n    open(): void;\n    /** Calls `close` of both start and end drawers */\n    close(): void;\n    ngDoCheck(): void;\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n    private _watchDrawerToggle;\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n    private _watchDrawerPosition;\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n    private _watchDrawerMode;\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n    private _setContainerClass;\n    /** Validate the state of the drawer children components. */\n    private _validateDrawers;\n    /** Whether the container is being pushed to the side by one of the drawers. */\n    private _isPushed;\n    _onBackdropClicked(): void;\n    _closeModalDrawer(): void;\n    _isShowingBackdrop(): boolean;\n    private _canHaveBackdrop;\n    private _isDrawerOpen;\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n    private _updateContentMargins;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/sidenav/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/sidenav/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './sidenav-module';\nexport * from './drawer';\nexport * from './sidenav';\nexport * from './drawer-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/sidenav/sidenav-module.d.ts",
    "content": "export declare class MatSidenavModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/sidenav/sidenav.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, QueryList, ElementRef, NgZone } from '@angular/core';\nimport { MatDrawer, MatDrawerContainer, MatDrawerContent } from './drawer';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nexport declare class MatSidenavContent extends MatDrawerContent {\n    constructor(changeDetectorRef: ChangeDetectorRef, container: MatSidenavContainer, elementRef: ElementRef<HTMLElement>, scrollDispatcher: ScrollDispatcher, ngZone: NgZone);\n}\nexport declare class MatSidenav extends MatDrawer {\n    /** Whether the sidenav is fixed in the viewport. */\n    fixedInViewport: boolean;\n    private _fixedInViewport;\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n    fixedTopGap: number;\n    private _fixedTopGap;\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n    fixedBottomGap: number;\n    private _fixedBottomGap;\n}\nexport declare class MatSidenavContainer extends MatDrawerContainer {\n    _drawers: QueryList<MatSidenav>;\n    _content: MatSidenavContent;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/slide-toggle/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/slide-toggle/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './slide-toggle-module';\nexport * from './slide-toggle';\nexport * from './slide-toggle-config';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/slide-toggle/slide-toggle-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n    /** Whether toggle action triggers value changes in slide toggle. */\n    disableToggleValue?: boolean;\n    /** Whether drag action triggers value changes in slide toggle. */\n    disableDragValue?: boolean;\n}\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport declare const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS: InjectionToken<MatSlideToggleDefaultOptions>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/slide-toggle/slide-toggle-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatSlideToggleModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/slide-toggle/slide-toggle.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, NgZone } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, HammerInput, HasTabIndex, HasTabIndexCtor } from '@angular/material/core';\nimport { MatSlideToggleDefaultOptions } from './slide-toggle-config';\n/** @docs-private */\nexport declare const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any;\n/** Change event object emitted by a MatSlideToggle. */\nexport declare class MatSlideToggleChange {\n    /** The source MatSlideToggle of the event. */\n    source: MatSlideToggle;\n    /** The new `checked` value of the MatSlideToggle. */\n    checked: boolean;\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source: MatSlideToggle, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked: boolean);\n}\n/** @docs-private */\nexport declare class MatSlideToggleBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatSlideToggleMixinBase: HasTabIndexCtor & CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatSlideToggleBase;\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nexport declare class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit, ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n    private _focusMonitor;\n    private _changeDetectorRef;\n    private _ngZone;\n    defaults: MatSlideToggleDefaultOptions;\n    _animationMode?: string | undefined;\n    private _dir?;\n    private onChange;\n    private onTouched;\n    private _uniqueId;\n    private _required;\n    private _checked;\n    /** Whether the thumb is currently being dragged. */\n    private _dragging;\n    /** Previous checked state before drag started. */\n    private _previousChecked;\n    /** Width of the thumb bar of the slide-toggle. */\n    private _thumbBarWidth;\n    /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n    private _dragPercentage;\n    /** Reference to the thumb HTMLElement. */\n    _thumbEl: ElementRef;\n    /** Reference to the thumb bar HTMLElement. */\n    _thumbBarEl: ElementRef;\n    /** Name value will be applied to the input element if present. */\n    name: string | null;\n    /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n    id: string;\n    /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n    labelPosition: 'before' | 'after';\n    /** Used to set the aria-label attribute on the underlying input element. */\n    ariaLabel: string | null;\n    /** Used to set the aria-labelledby attribute on the underlying input element. */\n    ariaLabelledby: string | null;\n    /** Whether the slide-toggle is required. */\n    required: boolean;\n    /** Whether the slide-toggle element is checked or not. */\n    checked: boolean;\n    /** An event will be dispatched each time the slide-toggle changes its value. */\n    readonly change: EventEmitter<MatSlideToggleChange>;\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed. The event does not fire when the user drags to change\n     * the slide toggle value.\n     */\n    readonly toggleChange: EventEmitter<void>;\n    /**\n     * An event will be dispatched each time the slide-toggle is dragged.\n     * This event is always emitted when the user drags the slide toggle to make a change greater\n     * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n     * the user toggles the slide toggle to change its value.\n     */\n    readonly dragChange: EventEmitter<void>;\n    /** Returns the unique id for the visual hidden input. */\n    readonly inputId: string;\n    /** Reference to the underlying input element. */\n    _inputElement: ElementRef<HTMLInputElement>;\n    constructor(elementRef: ElementRef, \n    /**\n     * @deprecated The `_platform` parameter to be removed.\n     * @breaking-change 8.0.0\n     */\n    _platform: Platform, _focusMonitor: FocusMonitor, _changeDetectorRef: ChangeDetectorRef, tabIndex: string, _ngZone: NgZone, defaults: MatSlideToggleDefaultOptions, _animationMode?: string | undefined, _dir?: Directionality | undefined);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event: Event): void;\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event: Event): void;\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value: any): void;\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn: any): void;\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn: any): void;\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled: boolean): void;\n    /** Focuses the slide-toggle. */\n    focus(): void;\n    /** Toggles the checked state of the slide-toggle. */\n    toggle(): void;\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    private _emitChangeEvent;\n    /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n    private _getDragPercentage;\n    _onDragStart(): void;\n    _onDrag(event: HammerInput): void;\n    _onDragEnd(): void;\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/slider/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/slider/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './slider-module';\nexport * from './slider';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/slider/slider-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatSliderModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/slider/slider.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, HammerInput, HasTabIndex, HasTabIndexCtor } from '@angular/material/core';\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport declare const MAT_SLIDER_VALUE_ACCESSOR: any;\n/** A simple change event emitted by the MatSlider component. */\nexport declare class MatSliderChange {\n    /** The MatSlider that changed. */\n    source: MatSlider;\n    /** The new value of the source slider. */\n    value: number | null;\n}\n/** @docs-private */\nexport declare class MatSliderBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatSliderMixinBase: HasTabIndexCtor & CanColorCtor & CanDisableCtor & typeof MatSliderBase;\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport declare class MatSlider extends _MatSliderMixinBase implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n    private _focusMonitor;\n    private _changeDetectorRef;\n    private _dir;\n    _animationMode?: string | undefined;\n    /** Whether the slider is inverted. */\n    invert: boolean;\n    private _invert;\n    /** The maximum value that the slider can have. */\n    max: number;\n    private _max;\n    /** The minimum value that the slider can have. */\n    min: number;\n    private _min;\n    /** The values at which the thumb will snap. */\n    step: number;\n    private _step;\n    /** Whether or not to show the thumb label. */\n    thumbLabel: boolean;\n    private _thumbLabel;\n    /**\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n     */\n    tickInterval: 'auto' | number;\n    private _tickInterval;\n    /** Value of the slider. */\n    value: number | null;\n    private _value;\n    /**\n     * Function that will be used to format the value before it is displayed\n     * in the thumb label. Can be used to format very large number in order\n     * for them to fit into the slider thumb.\n     */\n    displayWith: (value: number | null) => string | number;\n    /** Whether the slider is vertical. */\n    vertical: boolean;\n    private _vertical;\n    /** Event emitted when the slider value has changed. */\n    readonly change: EventEmitter<MatSliderChange>;\n    /** Event emitted when the slider thumb moves. */\n    readonly input: EventEmitter<MatSliderChange>;\n    /**\n     * Emits when the raw value of the slider changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    readonly valueChange: EventEmitter<number | null>;\n    /** The value to be used for display purposes. */\n    readonly displayValue: string | number;\n    /** set focus to the host element */\n    focus(): void;\n    /** blur the host element */\n    blur(): void;\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    onTouched: () => any;\n    /** The percentage of the slider that coincides with the value. */\n    readonly percent: number;\n    private _percent;\n    /**\n     * Whether or not the thumb is sliding.\n     * Used to determine if there should be a transition for the thumb and fill track.\n     */\n    _isSliding: boolean;\n    /**\n     * Whether or not the slider is active (clicked or sliding).\n     * Used to shrink and grow the thumb as according to the Material Design spec.\n     */\n    _isActive: boolean;\n    /**\n     * Whether the axis of the slider is inverted.\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n     */\n    readonly _invertAxis: boolean;\n    /** Whether the slider is at its minimum value. */\n    readonly _isMinValue: boolean;\n    /**\n     * The amount of space to leave between the slider thumb and the track fill & track background\n     * elements.\n     */\n    readonly _thumbGap: 7 | 10 | 0;\n    /** CSS styles for the track background element. */\n    readonly _trackBackgroundStyles: {\n        [key: string]: string;\n    };\n    /** CSS styles for the track fill element. */\n    readonly _trackFillStyles: {\n        [key: string]: string;\n    };\n    /** CSS styles for the ticks container element. */\n    readonly _ticksContainerStyles: {\n        [key: string]: string;\n    };\n    /** CSS styles for the ticks element. */\n    readonly _ticksStyles: {\n        [key: string]: string;\n    };\n    readonly _thumbContainerStyles: {\n        [key: string]: string;\n    };\n    /** The size of a tick interval as a percentage of the size of the track. */\n    private _tickIntervalPercent;\n    /** The dimensions of the slider. */\n    private _sliderDimensions;\n    private _controlValueAccessorChangeFn;\n    /** Decimal places to round to, based on the step amount. */\n    private _roundToDecimal;\n    /** Subscription to the Directionality change EventEmitter. */\n    private _dirChangeSubscription;\n    /** The value of the slider when the slide start event fires. */\n    private _valueOnSlideStart;\n    /** Reference to the inner slider wrapper element. */\n    private _sliderWrapper;\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     */\n    private _shouldInvertMouseCoords;\n    /** The language direction for this slider element. */\n    private _getDirection;\n    constructor(elementRef: ElementRef, _focusMonitor: FocusMonitor, _changeDetectorRef: ChangeDetectorRef, _dir: Directionality, tabIndex: string, _animationMode?: string | undefined);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    _onMouseenter(): void;\n    _onMousedown(event: MouseEvent): void;\n    _onSlide(event: HammerInput): void;\n    _onSlideStart(event: HammerInput | null): void;\n    _onSlideEnd(): void;\n    _onFocus(): void;\n    _onBlur(): void;\n    _onKeydown(event: KeyboardEvent): void;\n    _onKeyup(): void;\n    /** Increments the slider by the given number of steps (negative number decrements). */\n    private _increment;\n    /** Calculate the new value from the new physical location. The value will always be snapped. */\n    private _updateValueFromPosition;\n    /** Emits a change event if the current value is different from the last emitted value. */\n    private _emitChangeEvent;\n    /** Emits an input event when the current value is different from the last emitted value. */\n    private _emitInputEvent;\n    /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n    private _updateTickIntervalPercent;\n    /** Creates a slider change object from the specified value. */\n    private _createChangeEvent;\n    /** Calculates the percentage of the slider that a value is. */\n    private _calculatePercentage;\n    /** Calculates the value a percentage of the slider corresponds to. */\n    private _calculateValue;\n    /** Return a number between two numbers. */\n    private _clamp;\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     */\n    private _getSliderDimensions;\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     */\n    private _focusHostElement;\n    /** Blurs the native element. */\n    private _blurHostElement;\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any): void;\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void): void;\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled: boolean): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/snack-bar/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/snack-bar/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './snack-bar-module';\nexport * from './snack-bar';\nexport * from './snack-bar-container';\nexport * from './snack-bar-config';\nexport * from './snack-bar-ref';\nexport * from './simple-snack-bar';\nexport * from './snack-bar-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/snack-bar/simple-snack-bar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MatSnackBarRef } from './snack-bar-ref';\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nexport declare class SimpleSnackBar {\n    snackBarRef: MatSnackBarRef<SimpleSnackBar>;\n    /** Data that was injected into the snack bar. */\n    data: {\n        message: string;\n        action: string;\n    };\n    constructor(snackBarRef: MatSnackBarRef<SimpleSnackBar>, data: any);\n    /** Performs the action on the snack bar. */\n    action(): void;\n    /** If the action button should be shown. */\n    readonly hasAction: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/snack-bar/snack-bar-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport declare const matSnackBarAnimations: {\n    readonly snackBarState: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/snack-bar/snack-bar-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewContainerRef, InjectionToken } from '@angular/core';\nimport { AriaLivePoliteness } from '@angular/cdk/a11y';\nimport { Direction } from '@angular/cdk/bidi';\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport declare const MAT_SNACK_BAR_DATA: InjectionToken<any>;\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport declare type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport declare type MatSnackBarVerticalPosition = 'top' | 'bottom';\n/**\n * Configuration used when opening a snack-bar.\n */\nexport declare class MatSnackBarConfig<D = any> {\n    /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n    politeness?: AriaLivePoliteness;\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     */\n    announcementMessage?: string;\n    /** The view container to place the overlay for the snack bar into. */\n    viewContainerRef?: ViewContainerRef;\n    /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n    duration?: number;\n    /** Extra CSS classes to be added to the snack bar container. */\n    panelClass?: string | string[];\n    /** Text layout direction for the snack bar. */\n    direction?: Direction;\n    /** Data being injected into the child component. */\n    data?: D | null;\n    /** The horizontal position to place the snack bar. */\n    horizontalPosition?: MatSnackBarHorizontalPosition;\n    /** The vertical position to place the snack bar. */\n    verticalPosition?: MatSnackBarVerticalPosition;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/snack-bar/snack-bar-container.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationEvent } from '@angular/animations';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { ChangeDetectorRef, ComponentRef, ElementRef, EmbeddedViewRef, NgZone, OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { MatSnackBarConfig } from './snack-bar-config';\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nexport declare class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n    private _ngZone;\n    private _elementRef;\n    private _changeDetectorRef;\n    /** The snack bar configuration. */\n    snackBarConfig: MatSnackBarConfig;\n    /** Whether the component has been destroyed. */\n    private _destroyed;\n    /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n    _portalOutlet: CdkPortalOutlet;\n    /** Subject for notifying that the snack bar has exited from view. */\n    readonly _onExit: Subject<any>;\n    /** Subject for notifying that the snack bar has finished entering the view. */\n    readonly _onEnter: Subject<any>;\n    /** The state of the snack bar animations. */\n    _animationState: string;\n    /** ARIA role for the snack bar container. */\n    _role: 'alert' | 'status' | null;\n    constructor(_ngZone: NgZone, _elementRef: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, \n    /** The snack bar configuration. */\n    snackBarConfig: MatSnackBarConfig);\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event: AnimationEvent): void;\n    /** Begin animation of snack bar entrance into view. */\n    enter(): void;\n    /** Begin animation of the snack bar exiting from view. */\n    exit(): Observable<void>;\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy(): void;\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    private _completeExit;\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    private _applySnackBarClasses;\n    /** Asserts that no content is already attached to the container. */\n    private _assertNotAttached;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/snack-bar/snack-bar-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatSnackBarModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/snack-bar/snack-bar-ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { Observable } from 'rxjs';\nimport { MatSnackBarContainer } from './snack-bar-container';\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n    /** Whether the snack bar was dismissed using the action button. */\n    dismissedByAction: boolean;\n}\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport declare class MatSnackBarRef<T> {\n    private _overlayRef;\n    /** The instance of the component making up the content of the snack bar. */\n    instance: T;\n    /**\n     * The instance of the component making up the content of the snack bar.\n     * @docs-private\n     */\n    containerInstance: MatSnackBarContainer;\n    /** Subject for notifying the user that the snack bar has been dismissed. */\n    private readonly _afterDismissed;\n    /** Subject for notifying the user that the snack bar has opened and appeared. */\n    private readonly _afterOpened;\n    /** Subject for notifying the user that the snack bar action was called. */\n    private readonly _onAction;\n    /**\n     * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n     * dismissed before the duration passes.\n     */\n    private _durationTimeoutId;\n    /** Whether the snack bar was dismissed using the action button. */\n    private _dismissedByAction;\n    constructor(containerInstance: MatSnackBarContainer, _overlayRef: OverlayRef);\n    /** Dismisses the snack bar. */\n    dismiss(): void;\n    /** Marks the snackbar action clicked. */\n    dismissWithAction(): void;\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction(): void;\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration: number): void;\n    /** Marks the snackbar as opened */\n    _open(): void;\n    /** Cleans up the DOM after closing. */\n    private _finishDismiss;\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed(): Observable<MatSnackBarDismiss>;\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened(): Observable<void>;\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction(): Observable<void>;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/snack-bar/snack-bar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { EmbeddedViewRef, InjectionToken, Injector, TemplateRef, OnDestroy } from '@angular/core';\nimport { SimpleSnackBar } from './simple-snack-bar';\nimport { MatSnackBarConfig } from './snack-bar-config';\nimport { MatSnackBarRef } from './snack-bar-ref';\n/** Injection token that can be used to specify default snack bar. */\nexport declare const MAT_SNACK_BAR_DEFAULT_OPTIONS: InjectionToken<MatSnackBarConfig<any>>;\n/** @docs-private */\nexport declare function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig;\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport declare class MatSnackBar implements OnDestroy {\n    private _overlay;\n    private _live;\n    private _injector;\n    private _breakpointObserver;\n    private _parentSnackBar;\n    private _defaultConfig;\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n    private _snackBarRefAtThisLevel;\n    /** Reference to the currently opened snackbar at *any* level. */\n    _openedSnackBarRef: MatSnackBarRef<any> | null;\n    constructor(_overlay: Overlay, _live: LiveAnnouncer, _injector: Injector, _breakpointObserver: BreakpointObserver, _parentSnackBar: MatSnackBar, _defaultConfig: MatSnackBarConfig);\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T>;\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig): MatSnackBarRef<EmbeddedViewRef<any>>;\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message: string, action?: string, config?: MatSnackBarConfig): MatSnackBarRef<SimpleSnackBar>;\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss(): void;\n    ngOnDestroy(): void;\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    private _attachSnackBarContainer;\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    private _attach;\n    /** Animates the old snack bar out and the new one in. */\n    private _animateSnackBar;\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    private _createOverlay;\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    private _createInjector;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/sort/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/sort/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './sort-module';\nexport * from './sort-direction';\nexport * from './sort-header';\nexport * from './sort-header-intl';\nexport * from './sort';\nexport * from './sort-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/sort/sort-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport declare const matSortAnimations: {\n    readonly indicator: AnimationTriggerMetadata;\n    readonly leftPointer: AnimationTriggerMetadata;\n    readonly rightPointer: AnimationTriggerMetadata;\n    readonly arrowOpacity: AnimationTriggerMetadata;\n    readonly arrowPosition: AnimationTriggerMetadata;\n    readonly allowChildren: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/sort/sort-direction.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare type SortDirection = 'asc' | 'desc' | '';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/sort/sort-errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nexport declare function getSortDuplicateSortableIdError(id: string): Error;\n/** @docs-private */\nexport declare function getSortHeaderNotContainedWithinSortError(): Error;\n/** @docs-private */\nexport declare function getSortHeaderMissingIdError(): Error;\n/** @docs-private */\nexport declare function getSortInvalidDirectionError(direction: string): Error;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/sort/sort-header-intl.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional } from '@angular/core';\nimport { Subject } from 'rxjs';\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nexport declare class MatSortHeaderIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void>;\n    /** ARIA label for the sorting button. */\n    sortButtonLabel: (id: string) => string;\n}\n/** @docs-private */\nexport declare function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl): MatSortHeaderIntl;\n/** @docs-private */\nexport declare const MAT_SORT_HEADER_INTL_PROVIDER: {\n    provide: typeof MatSortHeaderIntl;\n    deps: Optional[][];\n    useFactory: typeof MAT_SORT_HEADER_INTL_PROVIDER_FACTORY;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/sort/sort-header.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';\nimport { CanDisable, CanDisableCtor } from '@angular/material/core';\nimport { MatSort, MatSortable } from './sort';\nimport { SortDirection } from './sort-direction';\nimport { MatSortHeaderIntl } from './sort-header-intl';\n/** @docs-private */\nexport declare class MatSortHeaderBase {\n}\nexport declare const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase;\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport declare type ArrowViewState = SortDirection | 'hint' | 'active';\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n    fromState?: ArrowViewState;\n    toState: ArrowViewState;\n}\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n    name: string;\n}\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nexport declare class MatSortHeader extends _MatSortHeaderMixinBase implements CanDisable, MatSortable, OnDestroy, OnInit {\n    _intl: MatSortHeaderIntl;\n    _sort: MatSort;\n    _columnDef: MatSortHeaderColumnDef;\n    private _rerenderSubscription;\n    /**\n     * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n     * provide an affordance that the header is sortable by showing on focus and hover.\n     */\n    _showIndicatorHint: boolean;\n    /**\n     * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n     * position through the animation. If animations are currently disabled, the fromState is removed\n     * so that there is no animation displayed.\n     */\n    _viewState: ArrowViewStateTransition;\n    /** The direction the arrow should be facing according to the current state. */\n    _arrowDirection: SortDirection;\n    /**\n     * Whether the view state animation should show the transition between the `from` and `to` states.\n     */\n    _disableViewStateAnimation: boolean;\n    /**\n     * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n     * the column's name.\n     */\n    id: string;\n    /** Sets the position of the arrow that displays when sorted. */\n    arrowPosition: 'before' | 'after';\n    /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n    start: 'asc' | 'desc';\n    /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n    disableClear: boolean;\n    private _disableClear;\n    constructor(_intl: MatSortHeaderIntl, changeDetectorRef: ChangeDetectorRef, _sort: MatSort, _columnDef: MatSortHeaderColumnDef);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     */\n    _setIndicatorHintVisible(visible: boolean): void;\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     */\n    _setAnimationTransitionState(viewState: ArrowViewStateTransition): void;\n    /** Triggers the sort on this sort header and removes the indicator hint. */\n    _handleClick(): void;\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n    _isSorted(): boolean;\n    /** Returns the animation state for the arrow direction (indicator and pointers). */\n    _getArrowDirectionState(): string;\n    /** Returns the arrow position state (opacity, translation). */\n    _getArrowViewState(): string;\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     */\n    _updateArrowDirection(): void;\n    _isDisabled(): boolean;\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     */\n    _getAriaSortAttribute(): \"ascending\" | \"descending\" | null;\n}\nexport {};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/sort/sort-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatSortModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/sort/sort.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { CanDisable, CanDisableCtor, HasInitialized, HasInitializedCtor } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { SortDirection } from './sort-direction';\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n    /** The id of the column being sorted. */\n    id: string;\n    /** Starting sort direction. */\n    start: 'asc' | 'desc';\n    /** Whether to disable clearing the sorting state. */\n    disableClear: boolean;\n}\n/** The current sort state. */\nexport interface Sort {\n    /** The id of the column being sorted. */\n    active: string;\n    /** The sort direction. */\n    direction: SortDirection;\n}\n/** @docs-private */\nexport declare class MatSortBase {\n}\nexport declare const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase;\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\nexport declare class MatSort extends _MatSortMixinBase implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n    /** Collection of all registered sortables that this directive manages. */\n    sortables: Map<string, MatSortable>;\n    /** Used to notify any child components listening to state changes. */\n    readonly _stateChanges: Subject<void>;\n    /** The id of the most recently sorted MatSortable. */\n    active: string;\n    /**\n     * The direction to set when an MatSortable is initially sorted.\n     * May be overriden by the MatSortable's sort start.\n     */\n    start: 'asc' | 'desc';\n    /** The sort direction of the currently active MatSortable. */\n    direction: SortDirection;\n    private _direction;\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     */\n    disableClear: boolean;\n    private _disableClear;\n    /** Event emitted when the user changes either the active sort or sort direction. */\n    readonly sortChange: EventEmitter<Sort>;\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     */\n    register(sortable: MatSortable): void;\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     */\n    deregister(sortable: MatSortable): void;\n    /** Sets the active sort id and determines the new sort direction. */\n    sort(sortable: MatSortable): void;\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n    getNextSortDirection(sortable: MatSortable): SortDirection;\n    ngOnInit(): void;\n    ngOnChanges(): void;\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/stepper/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/stepper/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './stepper-module';\nexport * from './step-label';\nexport * from './stepper';\nexport * from './stepper-button';\nexport * from './step-header';\nexport * from './stepper-intl';\nexport * from './stepper-animations';\nexport * from './stepper-icon';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/stepper/step-header.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ChangeDetectorRef, ElementRef, OnDestroy, TemplateRef } from '@angular/core';\nimport { MatStepLabel } from './step-label';\nimport { MatStepperIntl } from './stepper-intl';\nimport { MatStepperIconContext } from './stepper-icon';\nimport { CdkStepHeader, StepState } from '@angular/cdk/stepper';\nexport declare class MatStepHeader extends CdkStepHeader implements OnDestroy {\n    _intl: MatStepperIntl;\n    private _focusMonitor;\n    private _intlSubscription;\n    /** State of the given step. */\n    state: StepState;\n    /** Label of the given step. */\n    label: MatStepLabel | string;\n    /** Error message to display when there's an error. */\n    errorMessage: string;\n    /** Overrides for the header icons, passed in via the stepper. */\n    iconOverrides: {\n        [key: string]: TemplateRef<MatStepperIconContext>;\n    };\n    /** Index of the given step. */\n    index: number;\n    /** Whether the given step is selected. */\n    selected: boolean;\n    /** Whether the given step label is active. */\n    active: boolean;\n    /** Whether the given step is optional. */\n    optional: boolean;\n    constructor(_intl: MatStepperIntl, _focusMonitor: FocusMonitor, _elementRef: ElementRef<HTMLElement>, changeDetectorRef: ChangeDetectorRef);\n    ngOnDestroy(): void;\n    /** Returns string label of given step if it is a text label. */\n    _stringLabel(): string | null;\n    /** Returns MatStepLabel if the label of given step is a template label. */\n    _templateLabel(): MatStepLabel | null;\n    /** Returns the host HTML element. */\n    _getHostElement(): HTMLElement;\n    /** Template context variables that are exposed to the `matStepperIcon` instances. */\n    _getIconContext(): MatStepperIconContext;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/stepper/step-label.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkStepLabel } from '@angular/cdk/stepper';\nexport declare class MatStepLabel extends CdkStepLabel {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/stepper/stepper-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport declare const matStepperAnimations: {\n    readonly horizontalStepTransition: AnimationTriggerMetadata;\n    readonly verticalStepTransition: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/stepper/stepper-button.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkStepperNext, CdkStepperPrevious } from '@angular/cdk/stepper';\n/** Button that moves to the next step in a stepper workflow. */\nexport declare class MatStepperNext extends CdkStepperNext {\n}\n/** Button that moves to the previous step in a stepper workflow. */\nexport declare class MatStepperPrevious extends CdkStepperPrevious {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/stepper/stepper-icon.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplateRef } from '@angular/core';\nimport { StepState } from '@angular/cdk/stepper';\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n    /** Index of the step. */\n    index: number;\n    /** Whether the step is currently active. */\n    active: boolean;\n    /** Whether the step is optional. */\n    optional: boolean;\n}\n/**\n * Template to be used to override the icons inside the step header.\n */\nexport declare class MatStepperIcon {\n    templateRef: TemplateRef<MatStepperIconContext>;\n    /** Name of the icon to be overridden. */\n    name: StepState;\n    constructor(templateRef: TemplateRef<MatStepperIconContext>);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/stepper/stepper-intl.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional } from '@angular/core';\nimport { Subject } from 'rxjs';\n/** Stepper data that is required for internationalization. */\nexport declare class MatStepperIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void>;\n    /** Label that is rendered below optional steps. */\n    optionalLabel: string;\n}\n/** @docs-private */\nexport declare function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl): MatStepperIntl;\n/** @docs-private */\nexport declare const MAT_STEPPER_INTL_PROVIDER: {\n    provide: typeof MatStepperIntl;\n    deps: Optional[][];\n    useFactory: typeof MAT_STEPPER_INTL_PROVIDER_FACTORY;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/stepper/stepper-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatStepperModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/stepper/stepper.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { CdkStep, CdkStepper, StepperOptions } from '@angular/cdk/stepper';\nimport { AnimationEvent } from '@angular/animations';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, QueryList, TemplateRef } from '@angular/core';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { MatStepHeader } from './step-header';\nimport { MatStepLabel } from './step-label';\nimport { MatStepperIcon, MatStepperIconContext } from './stepper-icon';\nexport declare class MatStep extends CdkStep implements ErrorStateMatcher {\n    private _errorStateMatcher;\n    /** Content for step label given by `<ng-template matStepLabel>`. */\n    stepLabel: MatStepLabel;\n    /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n    constructor(stepper: MatStepper, _errorStateMatcher: ErrorStateMatcher, stepperOptions?: StepperOptions);\n    /** Custom error state matcher that additionally checks for validity of interacted form. */\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;\n}\nexport declare class MatStepper extends CdkStepper implements AfterContentInit {\n    /** The list of step headers of the steps in the stepper. */\n    _stepHeader: QueryList<MatStepHeader>;\n    /** Steps that the stepper holds. */\n    _steps: QueryList<MatStep>;\n    /** Custom icon overrides passed in by the consumer. */\n    _icons: QueryList<MatStepperIcon>;\n    /** Event emitted when the current step is done transitioning in. */\n    readonly animationDone: EventEmitter<void>;\n    /** Consumer-specified template-refs to be used to override the header icons. */\n    _iconOverrides: {\n        [key: string]: TemplateRef<MatStepperIconContext>;\n    };\n    /** Stream of animation `done` events when the body expands/collapses. */\n    _animationDone: Subject<AnimationEvent>;\n    ngAfterContentInit(): void;\n}\nexport declare class MatHorizontalStepper extends MatStepper {\n    /** Whether the label should display in bottom or end position. */\n    labelPosition: 'bottom' | 'end';\n}\nexport declare class MatVerticalStepper extends MatStepper {\n    constructor(dir: Directionality, changeDetectorRef: ChangeDetectorRef, elementRef?: ElementRef<HTMLElement>, _document?: any);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/table/cell.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef } from '@angular/core';\nimport { CdkCell, CdkCellDef, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkHeaderCell, CdkHeaderCellDef } from '@angular/cdk/table';\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport declare class MatCellDef extends CdkCellDef {\n}\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport declare class MatHeaderCellDef extends CdkHeaderCellDef {\n}\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nexport declare class MatFooterCellDef extends CdkFooterCellDef {\n}\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nexport declare class MatColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    name: string;\n    /** Whether this column should be sticky positioned at the start of the row */\n    sticky: boolean;\n    /** Whether this column should be sticky positioned on the end of the row */\n    stickyEnd: boolean;\n}\n/** Header cell template container that adds the right classes and role. */\nexport declare class MatHeaderCell extends CdkHeaderCell {\n    constructor(columnDef: CdkColumnDef, elementRef: ElementRef<HTMLElement>);\n}\n/** Footer cell template container that adds the right classes and role. */\nexport declare class MatFooterCell extends CdkFooterCell {\n    constructor(columnDef: CdkColumnDef, elementRef: ElementRef);\n}\n/** Cell template container that adds the right classes and role. */\nexport declare class MatCell extends CdkCell {\n    constructor(columnDef: CdkColumnDef, elementRef: ElementRef<HTMLElement>);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/table/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/table/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './table-module';\nexport * from './cell';\nexport * from './table';\nexport * from './row';\nexport * from './table-data-source';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/table/row.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef } from '@angular/cdk/table';\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport declare class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nexport declare class MatFooterRowDef extends CdkFooterRowDef {\n}\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nexport declare class MatRowDef<T> extends CdkRowDef<T> {\n}\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nexport declare class MatHeaderRow extends CdkHeaderRow {\n}\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nexport declare class MatFooterRow extends CdkFooterRow {\n}\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nexport declare class MatRow extends CdkRow {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/table/table-data-source.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DataSource } from '@angular/cdk/table';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport declare class MatTableDataSource<T> extends DataSource<T> {\n    /** Stream that emits when a new data array is set on the data source. */\n    private readonly _data;\n    /** Stream emitting render data to the table (depends on ordered data changes). */\n    private readonly _renderData;\n    /** Stream that emits when a new filter string is set on the data source. */\n    private readonly _filter;\n    /**\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\n     * as filtering, sorting, pagination, or base data changes.\n     */\n    _renderChangesSubscription: Subscription;\n    /**\n     * The filtered set of data that has been matched by the filter string, or all the data if there\n     * is no filter. Useful for knowing the set of data the table represents.\n     * For example, a 'selectAll()' function would likely want to select the set of filtered data\n     * shown to the user rather than all the data.\n     */\n    filteredData: T[];\n    /** Array of data that should be rendered by the table, where each object represents one row. */\n    data: T[];\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n    filter: string;\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n    sort: MatSort | null;\n    private _sort;\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n    paginator: MatPaginator | null;\n    private _paginator;\n    /**\n     * Data accessor function that is used for accessing data properties for sorting through\n     * the default sortData function.\n     * This default function assumes that the sort header IDs (which defaults to the column name)\n     * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n     * May be set to a custom function for different behavior.\n     * @param data Data object that is being accessed.\n     * @param sortHeaderId The name of the column that represents the data.\n     */\n    sortingDataAccessor: ((data: T, sortHeaderId: string) => string | number);\n    /**\n     * Gets a sorted copy of the data array based on the state of the MatSort. Called\n     * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n     * By default, the function retrieves the active sort and its direction and compares data\n     * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n     * of data ordering.\n     * @param data The array of data that should be sorted.\n     * @param sort The connected MatSort that holds the current sort state.\n     */\n    sortData: ((data: T[], sort: MatSort) => T[]);\n    /**\n     * Checks if a data object matches the data source's filter string. By default, each data object\n     * is converted to a string of its properties and returns true if the filter has\n     * at least one occurrence in that string. By default, the filter string has its whitespace\n     * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n     * filter matching.\n     * @param data Data object used to check against the filter.\n     * @param filter Filter string that has been set on the data source.\n     * @returns Whether the filter matches against the data\n     */\n    filterPredicate: ((data: T, filter: string) => boolean);\n    constructor(initialData?: T[]);\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription(): void;\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     */\n    _filterData(data: T[]): T[];\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    _orderData(data: T[]): T[];\n    /**\n     * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    _pageData(data: T[]): T[];\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    _updatePaginator(filteredDataLength: number): void;\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    connect(): BehaviorSubject<T[]>;\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * @docs-private\n     */\n    disconnect(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/table/table-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatTableModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/table/table.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTable } from '@angular/cdk/table';\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nexport declare class MatTable<T> extends CdkTable<T> {\n    /** Overrides the sticky CSS class set by the `CdkTable`. */\n    protected stickyCssClass: string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tabs/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { _MAT_INK_BAR_POSITIONER_FACTORY as ɵa22 } from './ink-bar';\nexport { MatTabBase as ɵf22, _MatTabMixinBase as ɵg22 } from './tab';\nexport { MatTabHeaderBase as ɵb22, _MatTabHeaderMixinBase as ɵc22 } from './tab-header';\nexport { MatTabLabelWrapperBase as ɵd22, _MatTabLabelWrapperMixinBase as ɵe22 } from './tab-label-wrapper';\nexport { MatTabLinkBase as ɵj22, MatTabNavBase as ɵh22, _MatTabLinkMixinBase as ɵk22, _MatTabNavMixinBase as ɵi22 } from './tab-nav-bar/tab-nav-bar';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tabs/ink-bar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, InjectionToken, NgZone } from '@angular/core';\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\nexport interface _MatInkBarPositioner {\n    (element: HTMLElement): {\n        left: string;\n        width: string;\n    };\n}\n/** Injection token for the MatInkBar's Positioner. */\nexport declare const _MAT_INK_BAR_POSITIONER: InjectionToken<_MatInkBarPositioner>;\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport declare function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner;\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\nexport declare class MatInkBar {\n    private _elementRef;\n    private _ngZone;\n    private _inkBarPositioner;\n    constructor(_elementRef: ElementRef<HTMLElement>, _ngZone: NgZone, _inkBarPositioner: _MatInkBarPositioner);\n    /**\n     * Calculates the styles from the provided element in order to align the ink-bar to that element.\n     * Shows the ink bar if previously set as hidden.\n     * @param element\n     */\n    alignToElement(element: HTMLElement): void;\n    /** Shows the ink bar. */\n    show(): void;\n    /** Hides the ink bar. */\n    hide(): void;\n    /**\n     * Sets the proper styles to the ink bar element.\n     * @param element\n     */\n    private _setStyles;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tabs/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './tabs-module';\nexport * from './tab-group';\nexport { MatInkBar, _MatInkBarPositioner, _MAT_INK_BAR_POSITIONER } from './ink-bar';\nexport { MatTabBody, MatTabBodyOriginState, MatTabBodyPositionState, MatTabBodyPortal } from './tab-body';\nexport { MatTabHeader, ScrollDirection } from './tab-header';\nexport { MatTabLabelWrapper } from './tab-label-wrapper';\nexport { MatTab } from './tab';\nexport { MatTabLabel } from './tab-label';\nexport { MatTabNav, MatTabLink } from './tab-nav-bar/index';\nexport { MatTabContent } from './tab-content';\nexport * from './tabs-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tabs/tab-body.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit, ElementRef, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { TemplatePortal, CdkPortalOutlet, PortalHostDirective } from '@angular/cdk/portal';\nimport { Directionality, Direction } from '@angular/cdk/bidi';\nimport { Subject } from 'rxjs';\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport declare type MatTabBodyPositionState = 'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport declare type MatTabBodyOriginState = 'left' | 'right';\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\nexport declare class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n    private _host;\n    /** Subscription to events for when the tab body begins centering. */\n    private _centeringSub;\n    /** Subscription to events for when the tab body finishes leaving from center position. */\n    private _leavingSub;\n    constructor(componentFactoryResolver: ComponentFactoryResolver, viewContainerRef: ViewContainerRef, _host: MatTabBody);\n    /** Set initial visibility or set up subscription for changing visibility. */\n    ngOnInit(): void;\n    /** Clean up centering subscription. */\n    ngOnDestroy(): void;\n}\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\nexport declare class MatTabBody implements OnInit, OnDestroy {\n    private _elementRef;\n    private _dir;\n    /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n    private _positionIndex;\n    /** Subscription to the directionality change observable. */\n    private _dirChangeSubscription;\n    /** Tab body position state. Used by the animation trigger for the current state. */\n    _position: MatTabBodyPositionState;\n    /** Emits when an animation on the tab is complete. */\n    _translateTabComplete: Subject<AnimationEvent>;\n    /** Event emitted when the tab begins to animate towards the center as the active tab. */\n    readonly _onCentering: EventEmitter<number>;\n    /** Event emitted before the centering of the tab begins. */\n    readonly _beforeCentering: EventEmitter<boolean>;\n    /** Event emitted before the centering of the tab begins. */\n    readonly _afterLeavingCenter: EventEmitter<boolean>;\n    /** Event emitted when the tab completes its animation towards the center. */\n    readonly _onCentered: EventEmitter<void>;\n    /** The portal host inside of this container into which the tab body content will be loaded. */\n    _portalHost: PortalHostDirective;\n    /** The tab body content to display. */\n    _content: TemplatePortal;\n    /** Position that will be used when the tab is immediately becoming visible after creation. */\n    origin: number;\n    /** Duration for the tab's animation. */\n    animationDuration: string;\n    /** The shifted index position of the tab body, where zero represents the active center tab. */\n    position: number;\n    constructor(_elementRef: ElementRef<HTMLElement>, _dir: Directionality, \n    /**\n     * @breaking-change 8.0.0 changeDetectorRef to be made required.\n     */\n    changeDetectorRef?: ChangeDetectorRef);\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     */\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    _onTranslateTabStarted(event: AnimationEvent): void;\n    /** The text direction of the containing app. */\n    _getLayoutDirection(): Direction;\n    /** Whether the provided position state is considered center, regardless of origin. */\n    _isCenterPosition(position: MatTabBodyPositionState | string): boolean;\n    /** Computes the position state that will be used for the tab-body animation trigger. */\n    private _computePositionAnimationState;\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     */\n    private _computePositionFromOrigin;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tabs/tab-content.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplateRef } from '@angular/core';\n/** Decorates the `ng-template` tags and reads out the template from it. */\nexport declare class MatTabContent {\n    template: TemplateRef<any>;\n    constructor(template: TemplateRef<any>);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tabs/tab-group.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentChecked, AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList, InjectionToken } from '@angular/core';\nimport { CanColor, CanColorCtor, CanDisableRipple, CanDisableRippleCtor, ThemePalette } from '@angular/material/core';\nimport { MatTab } from './tab';\nimport { MatTabHeader } from './tab-header';\n/** A simple change event emitted on focus or selection changes. */\nexport declare class MatTabChangeEvent {\n    /** Index of the currently-selected tab. */\n    index: number;\n    /** Reference to the currently-selected tab. */\n    tab: MatTab;\n}\n/** Possible positions for the tab header. */\nexport declare type MatTabHeaderPosition = 'above' | 'below';\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    animationDuration?: string;\n}\n/** Injection token that can be used to provide the default options the tabs module. */\nexport declare const MAT_TABS_CONFIG: InjectionToken<{}>;\n/** @docs-private */\nexport declare class MatTabGroupBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase;\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\nexport declare class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit, AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n    private _changeDetectorRef;\n    _tabs: QueryList<MatTab>;\n    _tabBodyWrapper: ElementRef;\n    _tabHeader: MatTabHeader;\n    /** The tab index that should be selected after the content has been checked. */\n    private _indexToSelect;\n    /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n    private _tabBodyWrapperHeight;\n    /** Subscription to tabs being added/removed. */\n    private _tabsSubscription;\n    /** Subscription to changes in the tab labels. */\n    private _tabLabelSubscription;\n    /** Whether the tab group should grow to the size of the active tab. */\n    dynamicHeight: boolean;\n    private _dynamicHeight;\n    /** The index of the active tab. */\n    selectedIndex: number | null;\n    private _selectedIndex;\n    /** Position of the tab header. */\n    headerPosition: MatTabHeaderPosition;\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    animationDuration: string;\n    /** Background color of the tab group. */\n    backgroundColor: ThemePalette;\n    private _backgroundColor;\n    /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n    readonly selectedIndexChange: EventEmitter<number>;\n    /** Event emitted when focus has changed within a tab group. */\n    readonly focusChange: EventEmitter<MatTabChangeEvent>;\n    /** Event emitted when the body animation has completed */\n    readonly animationDone: EventEmitter<void>;\n    /** Event emitted when the tab selection has changed. */\n    readonly selectedTabChange: EventEmitter<MatTabChangeEvent>;\n    private _groupId;\n    constructor(elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef, defaultConfig?: MatTabsConfig);\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     */\n    ngAfterContentChecked(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Re-aligns the ink bar to the selected tab element. */\n    realignInkBar(): void;\n    _focusChanged(index: number): void;\n    private _createChangeEvent;\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n     * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     */\n    private _subscribeToTabLabels;\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\n    private _clampTabIndex;\n    /** Returns a unique id for each tab label element */\n    _getTabLabelId(i: number): string;\n    /** Returns a unique id for each tab content element */\n    _getTabContentId(i: number): string;\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     */\n    _setTabBodyWrapperHeight(tabHeight: number): void;\n    /** Removes the height of the tab body wrapper. */\n    _removeTabBodyWrapperHeight(): void;\n    /** Handle click events, setting new selected index if appropriate. */\n    _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number): void;\n    /** Retrieves the tabindex for the tab. */\n    _getTabIndex(tab: MatTab, idx: number): number | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tabs/tab-header.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { AfterContentChecked, AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, QueryList } from '@angular/core';\nimport { CanDisableRipple, CanDisableRippleCtor } from '@angular/material/core';\nimport { MatInkBar } from './ink-bar';\nimport { MatTabLabelWrapper } from './tab-label-wrapper';\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport declare type ScrollDirection = 'after' | 'before';\n/** @docs-private */\nexport declare class MatTabHeaderBase {\n}\nexport declare const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase;\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\nexport declare class MatTabHeader extends _MatTabHeaderMixinBase implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n    private _elementRef;\n    private _changeDetectorRef;\n    private _viewportRuler;\n    private _dir;\n    private _ngZone?;\n    _labelWrappers: QueryList<MatTabLabelWrapper>;\n    _inkBar: MatInkBar;\n    _tabListContainer: ElementRef;\n    _tabList: ElementRef;\n    /** The distance in pixels that the tab labels should be translated to the left. */\n    private _scrollDistance;\n    /** Whether the header should scroll to the selected index after the view has been checked. */\n    private _selectedIndexChanged;\n    /** Emits when the component is destroyed. */\n    private readonly _destroyed;\n    /** Whether the controls for pagination should be displayed */\n    _showPaginationControls: boolean;\n    /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n    _disableScrollAfter: boolean;\n    /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n    _disableScrollBefore: boolean;\n    /**\n     * The number of tab labels that are displayed on the header. When this changes, the header\n     * should re-evaluate the scroll position.\n     */\n    private _tabLabelCount;\n    /** Whether the scroll distance has changed and should be applied after the view is checked. */\n    private _scrollDistanceChanged;\n    /** Used to manage focus between the tabs. */\n    private _keyManager;\n    private _selectedIndex;\n    /** The index of the active tab. */\n    selectedIndex: number;\n    /** Event emitted when the option is selected. */\n    readonly selectFocusedIndex: EventEmitter<{}>;\n    /** Event emitted when a label is focused. */\n    readonly indexFocused: EventEmitter<{}>;\n    constructor(_elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef, _viewportRuler: ViewportRuler, _dir: Directionality, _ngZone?: NgZone | undefined);\n    ngAfterContentChecked(): void;\n    _handleKeydown(event: KeyboardEvent): void;\n    /**\n     * Aligns the ink bar to the selected tab on load.\n     */\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     */\n    _onContentChanges(): void;\n    /**\n     * Updates the view whether pagination should be enabled or not.\n     *\n     * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     */\n    updatePagination(): void;\n    /** Tracks which element has focus; used for keyboard navigation */\n    /** When the focus index is set, we must manually send focus to the correct label */\n    focusIndex: number;\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     */\n    _isValidIndex(index: number): boolean;\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     */\n    _setTabFocus(tabIndex: number): void;\n    /** The layout direction of the containing app. */\n    _getLayoutDirection(): Direction;\n    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n    _updateTabScrollPosition(): void;\n    /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n    scrollDistance: number;\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _scrollHeader(scrollDir: ScrollDirection): void;\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _scrollToLabel(labelIndex: number): void;\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _checkPaginationEnabled(): void;\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _checkScrollingControls(): void;\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _getMaxScrollDistance(): number;\n    /** Tells the ink-bar to align itself to the current label wrapper */\n    _alignInkBarToSelectedTab(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tabs/tab-label-wrapper.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef } from '@angular/core';\nimport { CanDisable, CanDisableCtor } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatTabLabelWrapperBase {\n}\nexport declare const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase;\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\nexport declare class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n    elementRef: ElementRef;\n    constructor(elementRef: ElementRef);\n    /** Sets focus on the wrapper element */\n    focus(): void;\n    getOffsetLeft(): number;\n    getOffsetWidth(): number;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tabs/tab-label.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkPortal } from '@angular/cdk/portal';\n/** Used to flag tab labels for use with the portal directive */\nexport declare class MatTabLabel extends CdkPortal {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tabs/tab-nav-bar/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './tab-nav-bar';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tabs/tab-nav-bar/tab-nav-bar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { AfterContentChecked, AfterContentInit, ChangeDetectorRef, ElementRef, NgZone, OnDestroy, QueryList } from '@angular/core';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, HasTabIndex, HasTabIndexCtor, RippleConfig, RippleGlobalOptions, RippleRenderer, RippleTarget, ThemePalette } from '@angular/material/core';\nimport { MatInkBar } from '../ink-bar';\nimport { FocusMonitor } from '@angular/cdk/a11y';\n/** @docs-private */\nexport declare class MatTabNavBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase;\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nexport declare class MatTabNav extends _MatTabNavMixinBase implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n    private _dir;\n    private _ngZone;\n    private _changeDetectorRef;\n    private _viewportRuler;\n    /** Subject that emits when the component has been destroyed. */\n    private readonly _onDestroy;\n    private _activeLinkChanged;\n    private _activeLinkElement;\n    _inkBar: MatInkBar;\n    /** Query list of all tab links of the tab navigation. */\n    _tabLinks: QueryList<MatTabLink>;\n    /** Background color of the tab nav. */\n    backgroundColor: ThemePalette;\n    private _backgroundColor;\n    constructor(elementRef: ElementRef, _dir: Directionality, _ngZone: NgZone, _changeDetectorRef: ChangeDetectorRef, _viewportRuler: ViewportRuler);\n    /**\n     * Notifies the component that the active link has been changed.\n     * @breaking-change 8.0.0 `element` parameter to be removed.\n     */\n    updateActiveLink(element: ElementRef): void;\n    ngAfterContentInit(): void;\n    /** Checks if the active link has been changed and, if so, will update the ink bar. */\n    ngAfterContentChecked(): void;\n    ngOnDestroy(): void;\n    /** Aligns the ink bar to the active link. */\n    _alignInkBar(): void;\n}\nexport declare class MatTabLinkBase {\n}\nexport declare const _MatTabLinkMixinBase: HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase;\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\nexport declare class MatTabLink extends _MatTabLinkMixinBase implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n    private _tabNavBar;\n    _elementRef: ElementRef;\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n     */\n    private _focusMonitor?;\n    /** Whether the tab link is active or not. */\n    protected _isActive: boolean;\n    /** Reference to the RippleRenderer for the tab-link. */\n    protected _tabLinkRipple: RippleRenderer;\n    /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n    private _ripplesGloballyDisabled;\n    /** Whether the link is active. */\n    active: boolean;\n    /**\n     * Ripple configuration for ripples that are launched on pointer down.\n     * @docs-private\n     */\n    rippleConfig: RippleConfig;\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    readonly rippleDisabled: boolean;\n    constructor(_tabNavBar: MatTabNav, _elementRef: ElementRef, ngZone: NgZone, platform: Platform, globalOptions: RippleGlobalOptions, tabIndex: string, \n    /**\n     * @deprecated\n     * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n     */\n    _focusMonitor?: FocusMonitor | undefined);\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tabs/tab.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { CanDisable, CanDisableCtor } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { MatTabLabel } from './tab-label';\n/** @docs-private */\nexport declare class MatTabBase {\n}\nexport declare const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase;\nexport declare class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n    private _viewContainerRef;\n    /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n    templateLabel: MatTabLabel;\n    /**\n     * Template provided in the tab content that will be used if present, used to enable lazy-loading\n     */\n    _explicitContent: TemplateRef<any>;\n    /** Template inside the MatTab view that contains an `<ng-content>`. */\n    _implicitContent: TemplateRef<any>;\n    /** Plain text label for the tab, used when there is no template label. */\n    textLabel: string;\n    /** Aria label for the tab. */\n    ariaLabel: string;\n    /**\n     * Reference to the element that the tab is labelled by.\n     * Will be cleared if `aria-label` is set at the same time.\n     */\n    ariaLabelledby: string;\n    /** Portal that will be the hosted content of the tab */\n    private _contentPortal;\n    /** @docs-private */\n    readonly content: TemplatePortal | null;\n    /** Emits whenever the internal state of the tab changes. */\n    readonly _stateChanges: Subject<void>;\n    /**\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\n     * represents the right.\n     */\n    position: number | null;\n    /**\n     * The initial relatively index origin of the tab if it was created and selected after there\n     * was already a selected tab. Provides context of what position the tab should originate from.\n     */\n    origin: number | null;\n    /**\n     * Whether the tab is currently active.\n     */\n    isActive: boolean;\n    constructor(_viewContainerRef: ViewContainerRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tabs/tabs-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport declare const matTabsAnimations: {\n    readonly translateTab: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tabs/tabs-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatTabsModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/toolbar/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/toolbar/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './toolbar-module';\nexport * from './toolbar';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/toolbar/toolbar-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatToolbarModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/toolbar/toolbar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { AfterViewInit, ElementRef, QueryList } from '@angular/core';\nimport { CanColor, CanColorCtor } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatToolbarBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase;\nexport declare class MatToolbarRow {\n}\nexport declare class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n    private _platform;\n    private _document;\n    /** Reference to all toolbar row elements that have been projected. */\n    _toolbarRows: QueryList<MatToolbarRow>;\n    constructor(elementRef: ElementRef, _platform: Platform, document?: any);\n    ngAfterViewInit(): void;\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     */\n    private _checkToolbarMixedModes;\n}\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport declare function throwToolbarMixedModesError(): void;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tooltip/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tooltip/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './tooltip-module';\nexport * from './tooltip';\nexport * from './tooltip-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tooltip/tooltip-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport declare const matTooltipAnimations: {\n    readonly tooltipState: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tooltip/tooltip-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatTooltipModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tooltip/tooltip.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationEvent } from '@angular/animations';\nimport { AriaDescriber, FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { HammerLoader } from '@angular/platform-browser';\nimport { OriginConnectionPosition, Overlay, OverlayConnectionPosition, OverlayRef, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { Platform } from '@angular/cdk/platform';\nimport { ChangeDetectorRef, ElementRef, InjectionToken, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { Observable } from 'rxjs';\nexport declare type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n/** Time in ms to throttle repositioning after scroll events. */\nexport declare const SCROLL_THROTTLE_MS = 20;\n/** CSS class that will be attached to the overlay panel. */\nexport declare const TOOLTIP_PANEL_CLASS = \"mat-tooltip-panel\";\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport declare function getMatTooltipInvalidPositionError(position: string): Error;\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport declare const MAT_TOOLTIP_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY;\n};\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n    showDelay: number;\n    hideDelay: number;\n    touchendHideDelay: number;\n}\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport declare const MAT_TOOLTIP_DEFAULT_OPTIONS: InjectionToken<MatTooltipDefaultOptions>;\n/** @docs-private */\nexport declare function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions;\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nexport declare class MatTooltip implements OnDestroy {\n    private _overlay;\n    private _elementRef;\n    private _scrollDispatcher;\n    private _viewContainerRef;\n    private _ngZone;\n    private _ariaDescriber;\n    private _focusMonitor;\n    private _dir;\n    private _defaultOptions;\n    _overlayRef: OverlayRef | null;\n    _tooltipInstance: TooltipComponent | null;\n    private _portal;\n    private _position;\n    private _disabled;\n    private _tooltipClass;\n    private _scrollStrategy;\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    position: TooltipPosition;\n    /** Disables the display of the tooltip. */\n    disabled: boolean;\n    /** The default delay in ms before showing the tooltip after show is called */\n    showDelay: number;\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    hideDelay: number;\n    private _message;\n    /** The message to be displayed in the tooltip */\n    message: string;\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    tooltipClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    private _manualListeners;\n    /** Emits when the component is destroyed. */\n    private readonly _destroyed;\n    constructor(_overlay: Overlay, _elementRef: ElementRef<HTMLElement>, _scrollDispatcher: ScrollDispatcher, _viewContainerRef: ViewContainerRef, _ngZone: NgZone, platform: Platform, _ariaDescriber: AriaDescriber, _focusMonitor: FocusMonitor, scrollStrategy: any, _dir: Directionality, _defaultOptions: MatTooltipDefaultOptions, hammerLoader?: HammerLoader);\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy(): void;\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay?: number): void;\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay?: number): void;\n    /** Shows/hides the tooltip */\n    toggle(): void;\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible(): boolean;\n    /** Handles the keydown events on the host element. */\n    _handleKeydown(e: KeyboardEvent): void;\n    /** Handles the touchend events on the host element. */\n    _handleTouchend(): void;\n    /** Create the overlay config and position strategy */\n    private _createOverlay;\n    /** Detaches the currently-attached tooltip. */\n    private _detach;\n    /** Updates the position of the current tooltip. */\n    private _updatePosition;\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin(): {\n        main: OriginConnectionPosition;\n        fallback: OriginConnectionPosition;\n    };\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition(): {\n        main: OverlayConnectionPosition;\n        fallback: OverlayConnectionPosition;\n    };\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    private _updateTooltipMessage;\n    /** Updates the tooltip class */\n    private _setTooltipClass;\n    /** Inverts an overlay position. */\n    private _invertPosition;\n}\nexport declare type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nexport declare class TooltipComponent {\n    private _changeDetectorRef;\n    private _breakpointObserver;\n    /** Message to display in the tooltip */\n    message: string;\n    /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n    tooltipClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    /** The timeout ID of any current timer set to show the tooltip */\n    _showTimeoutId: number | null;\n    /** The timeout ID of any current timer set to hide the tooltip */\n    _hideTimeoutId: number | null;\n    /** Property watched by the animation framework to show or hide the tooltip */\n    _visibility: TooltipVisibility;\n    /** Whether interactions on the page should close the tooltip */\n    private _closeOnInteraction;\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly _onHide;\n    /** Stream that emits whether the user has a handset-sized display.  */\n    _isHandset: Observable<BreakpointState>;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _breakpointObserver: BreakpointObserver);\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay: number): void;\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay: number): void;\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void>;\n    /** Whether the tooltip is being displayed. */\n    isVisible(): boolean;\n    _animationStart(): void;\n    _animationDone(event: AnimationEvent): void;\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction(): void;\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tree/data-source/flat-data-source.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport { FlatTreeControl, TreeControl } from '@angular/cdk/tree';\nimport { BehaviorSubject, Observable } from 'rxjs';\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport declare class MatTreeFlattener<T, F> {\n    transformFunction: (node: T, level: number) => F;\n    getLevel: (node: F) => number;\n    isExpandable: (node: F) => boolean;\n    getChildren: (node: T) => Observable<T[]> | T[];\n    constructor(transformFunction: (node: T, level: number) => F, getLevel: (node: F) => number, isExpandable: (node: F) => boolean, getChildren: (node: T) => Observable<T[]> | T[]);\n    _flattenNode(node: T, level: number, resultNodes: F[], parentMap: boolean[]): F[];\n    _flattenChildren(children: T[], level: number, resultNodes: F[], parentMap: boolean[]): void;\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[];\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[];\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport declare class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n    private treeControl;\n    private treeFlattener;\n    _flattenedData: BehaviorSubject<F[]>;\n    _expandedData: BehaviorSubject<F[]>;\n    _data: BehaviorSubject<T[]>;\n    data: T[];\n    constructor(treeControl: FlatTreeControl<F>, treeFlattener: MatTreeFlattener<T, F>, initialData?: T[]);\n    connect(collectionViewer: CollectionViewer): Observable<F[]>;\n    disconnect(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tree/data-source/nested-data-source.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, Observable } from 'rxjs';\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport declare class MatTreeNestedDataSource<T> extends DataSource<T> {\n    _data: BehaviorSubject<T[]>;\n    /**\n     * Data for the nested tree\n     */\n    data: T[];\n    connect(collectionViewer: CollectionViewer): Observable<T[]>;\n    disconnect(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tree/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tree/node.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef } from '@angular/cdk/tree';\nimport { AfterContentInit, ElementRef, IterableDiffers, OnDestroy, QueryList } from '@angular/core';\nimport { CanDisable, CanDisableCtor, HasTabIndex, HasTabIndexCtor } from '@angular/material/core';\nimport { MatTreeNodeOutlet } from './outlet';\nexport declare const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode;\nexport declare const _MatNestedTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode;\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nexport declare class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements CanDisable, HasTabIndex {\n    protected _elementRef: ElementRef<HTMLElement>;\n    protected _tree: CdkTree<T>;\n    role: 'treeitem' | 'group';\n    constructor(_elementRef: ElementRef<HTMLElement>, _tree: CdkTree<T>, tabIndex: string);\n}\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\nexport declare class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    data: T;\n}\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nexport declare class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n    protected _elementRef: ElementRef<HTMLElement>;\n    protected _tree: CdkTree<T>;\n    protected _differs: IterableDiffers;\n    node: T;\n    nodeOutlet: QueryList<MatTreeNodeOutlet>;\n    constructor(_elementRef: ElementRef<HTMLElement>, _tree: CdkTree<T>, _differs: IterableDiffers, tabIndex: string);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tree/outlet.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTreeNodeOutlet } from '@angular/cdk/tree';\nimport { ViewContainerRef } from '@angular/core';\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nexport declare class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n    viewContainer: ViewContainerRef;\n    constructor(viewContainer: ViewContainerRef);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tree/padding.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTreeNodePadding } from '@angular/cdk/tree';\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nexport declare class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    level: number;\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n    indent: number;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tree/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './node';\nexport * from './padding';\nexport * from './tree';\nexport * from './tree-module';\nexport * from './toggle';\nexport * from './outlet';\nexport * from './data-source/flat-data-source';\nexport * from './data-source/nested-data-source';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tree/toggle.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTreeNodeToggle } from '@angular/cdk/tree';\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\nexport declare class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n    recursive: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tree/tree-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatTreeModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/tree/tree.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTree } from '@angular/cdk/tree';\nimport { MatTreeNodeOutlet } from './outlet';\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nexport declare class MatTree<T> extends CdkTree<T> {\n    _nodeOutlet: MatTreeNodeOutlet;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/esm5/version.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Version } from '@angular/core';\n/** Current version of Angular Material. */\nexport declare const VERSION: Version;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/expansion/accordion-base.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { CdkAccordion } from '@angular/cdk/accordion';\n/** MatAccordion's display modes. */\nexport declare type MatAccordionDisplayMode = 'default' | 'flat';\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n    /** Whether the expansion indicator should be hidden. */\n    hideToggle: boolean;\n    /** Display mode used for all expansion panels in the accordion. */\n    displayMode: MatAccordionDisplayMode;\n    /** Handles keyboard events coming in from the panel headers. */\n    _handleHeaderKeydown: (event: KeyboardEvent) => void;\n    /** Handles focus events on the panel headers. */\n    _handleHeaderFocus: (header: any) => void;\n}\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport declare const MAT_ACCORDION: InjectionToken<MatAccordionBase>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/expansion/accordion.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { QueryList, AfterContentInit } from '@angular/core';\nimport { CdkAccordion } from '@angular/cdk/accordion';\nimport { MatAccordionBase, MatAccordionDisplayMode } from './accordion-base';\nimport { MatExpansionPanelHeader } from './expansion-panel-header';\n/**\n * Directive for a Material Design Accordion.\n */\nexport declare class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n    private _keyManager;\n    _headers: QueryList<MatExpansionPanelHeader>;\n    /** Whether the expansion indicator should be hidden. */\n    hideToggle: boolean;\n    private _hideToggle;\n    /**\n     * Display mode used for all expansion panels in the accordion. Currently two display\n     * modes exist:\n     *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n     *     panel at a different elevation from the rest of the accordion.\n     *  flat - no spacing is placed around expanded panels, showing all panels at the same\n     *     elevation.\n     */\n    displayMode: MatAccordionDisplayMode;\n    ngAfterContentInit(): void;\n    /** Handles keyboard events coming in from the panel headers. */\n    _handleHeaderKeydown(event: KeyboardEvent): void;\n    _handleHeaderFocus(header: MatExpansionPanelHeader): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/expansion/expansion-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/** Time and timing curve for expansion panel animations. */\nexport declare const EXPANSION_PANEL_ANIMATION_TIMING = \"225ms cubic-bezier(0.4,0.0,0.2,1)\";\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport declare const matExpansionAnimations: {\n    readonly indicatorRotate: AnimationTriggerMetadata;\n    readonly expansionHeaderHeight: AnimationTriggerMetadata;\n    readonly bodyExpansion: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/expansion/expansion-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatExpansionModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/expansion/expansion-panel-content.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplateRef } from '@angular/core';\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nexport declare class MatExpansionPanelContent {\n    _template: TemplateRef<any>;\n    constructor(_template: TemplateRef<any>);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/expansion/expansion-panel-header.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor, FocusableOption, FocusOrigin } from '@angular/cdk/a11y';\nimport { ChangeDetectorRef, ElementRef, OnDestroy } from '@angular/core';\nimport { MatExpansionPanel } from './expansion-panel';\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\nexport declare class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n    panel: MatExpansionPanel;\n    private _element;\n    private _focusMonitor;\n    private _changeDetectorRef;\n    private _parentChangeSubscription;\n    constructor(panel: MatExpansionPanel, _element: ElementRef, _focusMonitor: FocusMonitor, _changeDetectorRef: ChangeDetectorRef);\n    /** Height of the header while the panel is expanded. */\n    expandedHeight: string;\n    /** Height of the header while the panel is collapsed. */\n    collapsedHeight: string;\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * @docs-private\n     */\n    readonly disabled: any;\n    /** Toggles the expanded state of the panel. */\n    _toggle(): void;\n    /** Gets whether the panel is expanded. */\n    _isExpanded(): boolean;\n    /** Gets the expanded state string of the panel. */\n    _getExpandedState(): string;\n    /** Gets the panel id. */\n    _getPanelId(): string;\n    /** Gets whether the expand indicator should be shown. */\n    _showToggle(): boolean;\n    /** Handle keydown event calling to toggle() if appropriate. */\n    _keydown(event: KeyboardEvent): void;\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n    focus(origin?: FocusOrigin): void;\n    ngOnDestroy(): void;\n}\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nexport declare class MatExpansionPanelDescription {\n}\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nexport declare class MatExpansionPanelTitle {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/expansion/expansion-panel.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationEvent } from '@angular/animations';\nimport { CdkAccordionItem } from '@angular/cdk/accordion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter, ElementRef, OnChanges, OnDestroy, SimpleChanges, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MatExpansionPanelContent } from './expansion-panel-content';\nimport { MatAccordionBase } from './accordion-base';\n/** MatExpansionPanel's states. */\nexport declare type MatExpansionPanelState = 'expanded' | 'collapsed';\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nexport declare class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges, OnDestroy {\n    private _viewContainerRef;\n    _animationMode?: string | undefined;\n    private _document;\n    /** Whether the toggle indicator should be hidden. */\n    hideToggle: boolean;\n    private _hideToggle;\n    /** An event emitted after the body's expansion animation happens. */\n    afterExpand: EventEmitter<void>;\n    /** An event emitted after the body's collapse animation happens. */\n    afterCollapse: EventEmitter<void>;\n    /** Stream that emits for changes in `@Input` properties. */\n    readonly _inputChanges: Subject<SimpleChanges>;\n    /** Optionally defined accordion the expansion panel belongs to. */\n    accordion: MatAccordionBase;\n    /** Content that will be rendered lazily. */\n    _lazyContent: MatExpansionPanelContent;\n    /** Element containing the panel's user-provided content. */\n    _body: ElementRef<HTMLElement>;\n    /** Portal holding the user's content. */\n    _portal: TemplatePortal;\n    /** ID for the associated header element. Used for a11y labelling. */\n    _headerId: string;\n    /** Stream of body animation done events. */\n    _bodyAnimationDone: Subject<AnimationEvent>;\n    constructor(accordion: MatAccordionBase, _changeDetectorRef: ChangeDetectorRef, _uniqueSelectionDispatcher: UniqueSelectionDispatcher, _viewContainerRef: ViewContainerRef, _document?: any, _animationMode?: string | undefined);\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    _hasSpacing(): boolean;\n    /** Gets the expanded state string. */\n    _getExpandedState(): MatExpansionPanelState;\n    ngAfterContentInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n    _containsFocus(): boolean;\n}\nexport declare class MatExpansionPanelActionRow {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/expansion/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/expansion/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './expansion-module';\nexport * from './accordion';\nexport * from './accordion-base';\nexport * from './expansion-panel';\nexport * from './expansion-panel-header';\nexport * from './expansion-panel-content';\nexport * from './expansion-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/form-field/error.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Single error message to be shown underneath the form field. */\nexport declare class MatError {\n    id: string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/form-field/form-field-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport declare const matFormFieldAnimations: {\n    readonly transitionMessages: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/form-field/form-field-control.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { NgControl } from '@angular/forms';\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport declare abstract class MatFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n    /** The element ID for this control. */\n    readonly id: string;\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n    /** Whether the `MatFormField` label should try to float. */\n    readonly shouldLabelFloat: boolean;\n    /** Whether the control is required. */\n    readonly required: boolean;\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n    /**\n     * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mat-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n    /**\n     * Whether the input is currently in an autofilled state. If property is not present on the\n     * control it is assumed to be false.\n     */\n    readonly autofilled?: boolean;\n    /** Sets the list of element IDs that currently describe this control. */\n    abstract setDescribedByIds(ids: string[]): void;\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/form-field/form-field-errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nexport declare function getMatFormFieldPlaceholderConflictError(): Error;\n/** @docs-private */\nexport declare function getMatFormFieldDuplicatedHintError(align: string): Error;\n/** @docs-private */\nexport declare function getMatFormFieldMissingControlError(): Error;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/form-field/form-field-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatFormFieldModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/form-field/form-field.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { AfterContentChecked, AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, InjectionToken, NgZone, QueryList } from '@angular/core';\nimport { CanColor, CanColorCtor, FloatLabelType, LabelOptions } from '@angular/material/core';\nimport { MatError } from './error';\nimport { MatFormFieldControl } from './form-field-control';\nimport { MatHint } from './hint';\nimport { MatLabel } from './label';\nimport { MatPlaceholder } from './placeholder';\nimport { MatPrefix } from './prefix';\nimport { MatSuffix } from './suffix';\nimport { Platform } from '@angular/cdk/platform';\nimport { NgControl } from '@angular/forms';\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport declare class MatFormFieldBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport declare const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase;\n/** Possible appearance styles for the form field. */\nexport declare type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n    appearance?: MatFormFieldAppearance;\n}\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport declare const MAT_FORM_FIELD_DEFAULT_OPTIONS: InjectionToken<MatFormFieldDefaultOptions>;\n/** Container for form controls that applies Material Design styling and behavior. */\nexport declare class MatFormField extends _MatFormFieldMixinBase implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n    _elementRef: ElementRef;\n    private _changeDetectorRef;\n    private _dir;\n    private _defaults;\n    private _platform?;\n    private _ngZone?;\n    private _labelOptions;\n    private _outlineGapCalculationNeeded;\n    /** The form-field appearance style. */\n    appearance: MatFormFieldAppearance;\n    _appearance: MatFormFieldAppearance;\n    /** Whether the required marker should be hidden. */\n    hideRequiredMarker: boolean;\n    private _hideRequiredMarker;\n    /** Override for the logic that disables the label animation in certain cases. */\n    private _showAlwaysAnimate;\n    /** Whether the floating label should always float or not. */\n    readonly _shouldAlwaysFloat: boolean;\n    /** Whether the label can float or not. */\n    readonly _canLabelFloat: boolean;\n    /** State of the mat-hint and mat-error animations. */\n    _subscriptAnimationState: string;\n    /** Text for the form field hint. */\n    hintLabel: string;\n    private _hintLabel;\n    _hintLabelId: string;\n    _labelId: string;\n    /**\n     * Whether the label should always float, never float or float as the user types.\n     *\n     * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n     * way to make the floating label emulate the behavior of a standard input placeholder. However\n     * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n     * appearances the `never` option has been disabled in favor of just using the placeholder.\n     */\n    floatLabel: FloatLabelType;\n    private _floatLabel;\n    /** Whether the Angular animations are enabled. */\n    _animationsEnabled: boolean;\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    underlineRef: ElementRef;\n    _connectionContainerRef: ElementRef;\n    _inputContainerRef: ElementRef;\n    private _label;\n    _control: MatFormFieldControl<any>;\n    _placeholderChild: MatPlaceholder;\n    _labelChild: MatLabel;\n    _errorChildren: QueryList<MatError>;\n    _hintChildren: QueryList<MatHint>;\n    _prefixChildren: QueryList<MatPrefix>;\n    _suffixChildren: QueryList<MatSuffix>;\n    constructor(_elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef, labelOptions: LabelOptions, _dir: Directionality, _defaults: MatFormFieldDefaultOptions, _platform?: Platform | undefined, _ngZone?: NgZone | undefined, _animationMode?: string);\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin(): ElementRef;\n    ngAfterContentInit(): void;\n    ngAfterContentChecked(): void;\n    ngAfterViewInit(): void;\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: keyof NgControl): boolean;\n    _hasPlaceholder(): boolean;\n    _hasLabel(): boolean;\n    _shouldLabelFloat(): boolean;\n    _hideControlPlaceholder(): boolean;\n    _hasFloatingLabel(): boolean;\n    /** Determines whether to display hints or errors. */\n    _getDisplayedMessages(): 'error' | 'hint';\n    /** Animates the placeholder up and locks it in position. */\n    _animateAndLockLabel(): void;\n    /**\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n     * or child element with the `mat-placeholder` directive).\n     */\n    private _validatePlaceholders;\n    /** Does any extra processing that is required when handling the hints. */\n    private _processHints;\n    /**\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     */\n    private _validateHints;\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     */\n    private _syncDescribedByIds;\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild(): void;\n    /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     */\n    updateOutlineGap(): void;\n    /** Gets the start end of the rect considering the current directionality. */\n    private _getStartEnd;\n    /** Updates the outline gap the new time the zone stabilizes. */\n    private _updateOutlineGapOnStable;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/form-field/hint.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Hint text to be shown underneath the form field control. */\nexport declare class MatHint {\n    /** Whether to align the hint label at the start or end of the line. */\n    align: 'start' | 'end';\n    /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n    id: string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/form-field/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/form-field/label.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The floating label for a `mat-form-field`. */\nexport declare class MatLabel {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/form-field/placeholder.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\nexport declare class MatPlaceholder {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/form-field/prefix.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Prefix to be placed the the front of the form field. */\nexport declare class MatPrefix {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/form-field/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './form-field-module';\nexport * from './error';\nexport * from './form-field';\nexport * from './form-field-control';\nexport * from './form-field-errors';\nexport * from './hint';\nexport * from './placeholder';\nexport * from './prefix';\nexport * from './suffix';\nexport * from './label';\nexport * from './form-field-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/form-field/suffix.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Suffix to be placed at the end of the form field. */\nexport declare class MatSuffix {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/grid-list/grid-list-base.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport declare const MAT_GRID_LIST: InjectionToken<MatGridListBase>;\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n    cols: number;\n    gutterSize: string;\n    rowHeight: number | string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/grid-list/grid-list-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatGridListModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/grid-list/grid-list.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentChecked, OnInit, QueryList, ElementRef } from '@angular/core';\nimport { MatGridTile } from './grid-tile';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { MatGridListBase } from './grid-list-base';\nexport declare class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n    private _element;\n    private _dir;\n    /** Number of columns being rendered. */\n    private _cols;\n    /** Used for determiningthe position of each tile in the grid. */\n    private _tileCoordinator;\n    /**\n     * Row height value passed in by user. This can be one of three types:\n     * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n     * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n     * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n     */\n    private _rowHeight;\n    /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n    private _gutter;\n    /** Sets position and size styles for a tile */\n    private _tileStyler;\n    /** Query list of tiles that are being rendered. */\n    _tiles: QueryList<MatGridTile>;\n    constructor(_element: ElementRef<HTMLElement>, _dir: Directionality);\n    /** Amount of columns in the grid list. */\n    cols: number;\n    /** Size of the grid list's gutter in pixels. */\n    gutterSize: string;\n    /** Set internal representation of row height from the user-provided value. */\n    rowHeight: string | number;\n    ngOnInit(): void;\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     */\n    ngAfterContentChecked(): void;\n    /** Throw a friendly error if cols property is missing */\n    private _checkCols;\n    /** Default to equal width:height if rowHeight property is missing */\n    private _checkRowHeight;\n    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n    private _setTileStyler;\n    /** Computes and applies the size and position for all children grid tiles. */\n    private _layoutTiles;\n    /** Sets style on the main grid-list element, given the style name and value. */\n    _setListStyle(style: [string, string | null] | null): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/grid-list/grid-tile.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, QueryList, AfterContentInit } from '@angular/core';\nimport { MatLine } from '@angular/material/core';\nimport { MatGridListBase } from './grid-list-base';\nexport declare class MatGridTile {\n    private _element;\n    _gridList?: MatGridListBase | undefined;\n    _rowspan: number;\n    _colspan: number;\n    constructor(_element: ElementRef<HTMLElement>, _gridList?: MatGridListBase | undefined);\n    /** Amount of rows that the grid tile takes up. */\n    rowspan: number;\n    /** Amount of columns that the grid tile takes up. */\n    colspan: number;\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     */\n    _setStyle(property: string, value: any): void;\n}\nexport declare class MatGridTileText implements AfterContentInit {\n    private _element;\n    _lines: QueryList<MatLine>;\n    constructor(_element: ElementRef<HTMLElement>);\n    ngAfterContentInit(): void;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatGridAvatarCssMatStyler {\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatGridTileHeaderCssMatStyler {\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatGridTileFooterCssMatStyler {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/grid-list/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { MAT_GRID_LIST as ɵa11, MatGridListBase as ɵb11 } from './grid-list-base';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/grid-list/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './grid-list-module';\nexport * from './grid-list';\nexport * from './grid-tile';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/grid-list/tile-coordinator.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MatGridTile } from './grid-tile';\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport declare class TileCoordinator {\n    /** Tracking array (see class description). */\n    tracker: number[];\n    /** Index at which the search for the next gap will start. */\n    columnIndex: number;\n    /** The current row index. */\n    rowIndex: number;\n    /** Gets the total number of rows occupied by tiles */\n    readonly rowCount: number;\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     */\n    readonly rowspan: number;\n    /** The computed (row, col) position of each tile (the output). */\n    positions: TilePosition[];\n    /**\n     * Updates the tile positions.\n     * @param numColumns Amount of columns in the grid.\n     */\n    update(numColumns: number, tiles: MatGridTile[]): void;\n    /** Calculates the row and col position of a tile. */\n    private _trackTile;\n    /** Finds the next available space large enough to fit the tile. */\n    private _findMatchingGap;\n    /** Move \"down\" to the next row. */\n    private _nextRow;\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     */\n    private _findGapEndIndex;\n    /** Update the tile tracker to account for the given tile in the given space. */\n    private _markTilePosition;\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport declare class TilePosition {\n    row: number;\n    col: number;\n    constructor(row: number, col: number);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/grid-list/tile-styler.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MatGridList } from './grid-list';\nimport { MatGridTile } from './grid-tile';\nimport { TileCoordinator } from './tile-coordinator';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport declare abstract class TileStyler {\n    _gutterSize: string;\n    _rows: number;\n    _rowspan: number;\n    _cols: number;\n    _direction: string;\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param gutterSize Size of the grid's gutter.\n     * @param tracker Instance of the TileCoordinator.\n     * @param cols Amount of columns in the grid.\n     * @param direction Layout direction of the grid.\n     */\n    init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void;\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent: number, gutterFraction: number): string;\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize: string, offset: number): string;\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize: string, span: number): string;\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n    setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void;\n    /** Sets the horizontal placement of the tile in the list. */\n    setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number, gutterWidth: number): void;\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n    getGutterSpan(): string;\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n    getTileSpan(tileHeight: string): string;\n    /**\n     * Sets the vertical placement of the tile in the list.\n     * This method will be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number, gutterWidth: number): void;\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    getComputedHeight(): [string, string] | null;\n    /**\n     * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n     * @param list Grid list that the styler was attached to.\n     * @docs-private\n     */\n    abstract reset(list: MatGridList): void;\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport declare class FixedTileStyler extends TileStyler {\n    fixedRowHeight: string;\n    constructor(fixedRowHeight: string);\n    init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void;\n    setRowStyles(tile: MatGridTile, rowIndex: number): void;\n    getComputedHeight(): [string, string];\n    reset(list: MatGridList): void;\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport declare class RatioTileStyler extends TileStyler {\n    /** Ratio width:height given by user to determine row height. */\n    rowHeightRatio: number;\n    baseTileHeight: string;\n    constructor(value: string);\n    setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number, gutterWidth: number): void;\n    getComputedHeight(): [string, string];\n    reset(list: MatGridList): void;\n    private _parseRatio;\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport declare class FitTileStyler extends TileStyler {\n    setRowStyles(tile: MatGridTile, rowIndex: number): void;\n    reset(list: MatGridList): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/icon/icon-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatIconModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/icon/icon-registry.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HttpClient } from '@angular/common/http';\nimport { Optional } from '@angular/core';\nimport { DomSanitizer, SafeResourceUrl, SafeHtml } from '@angular/platform-browser';\nimport { Observable } from 'rxjs';\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport declare function getMatIconNameNotFoundError(iconName: string): Error;\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport declare function getMatIconNoHttpProviderError(): Error;\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport declare function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error;\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport declare function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error;\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport declare class MatIconRegistry {\n    private _httpClient;\n    private _sanitizer;\n    private _document;\n    /**\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n     */\n    private _svgIconConfigs;\n    /**\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n     * Multiple icon sets can be registered under the same namespace.\n     */\n    private _iconSetConfigs;\n    /** Cache for icons loaded by direct URLs. */\n    private _cachedIconsByUrl;\n    /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n    private _inProgressUrlFetches;\n    /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n    private _fontCssClassesByAlias;\n    /**\n     * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n     * The default 'material-icons' value assumes that the material icon font has been loaded as\n     * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n     */\n    private _defaultFontSetClass;\n    constructor(_httpClient: HttpClient, _sanitizer: DomSanitizer, document: any);\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName: string, url: SafeResourceUrl): this;\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName: string, literal: SafeHtml): this;\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this;\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this;\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url: SafeResourceUrl): this;\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal: SafeHtml): this;\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this;\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this;\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias: string, className?: string): this;\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias: string): string;\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n    setDefaultFontSetClass(className: string): this;\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass(): string;\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement>;\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name: string, namespace?: string): Observable<SVGElement>;\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    private _getSvgFromConfig;\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    private _getSvgFromIconSetConfigs;\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    private _extractIconWithNameFromAnySet;\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    private _loadSvgIconFromConfig;\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    private _loadSvgIconSetFromConfig;\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     */\n    private _createSvgElementForSingleIcon;\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    private _extractSvgIconFromSet;\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    private _svgElementFromString;\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    private _toSvgElement;\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    private _setSvgAttributes;\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    private _fetchUrl;\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    private _addSvgIconConfig;\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    private _addSvgIconSetConfig;\n}\n/** @docs-private */\nexport declare function ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry: MatIconRegistry, httpClient: HttpClient, sanitizer: DomSanitizer, document?: any): MatIconRegistry;\n/** @docs-private */\nexport declare const ICON_REGISTRY_PROVIDER: {\n    provide: typeof MatIconRegistry;\n    deps: (Optional[] | typeof DomSanitizer)[];\n    useFactory: typeof ICON_REGISTRY_PROVIDER_FACTORY;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/icon/icon.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, OnChanges, OnInit, SimpleChanges, InjectionToken, OnDestroy, AfterViewChecked } from '@angular/core';\nimport { CanColor, CanColorCtor } from '@angular/material/core';\nimport { MatIconRegistry } from './icon-registry';\n/** @docs-private */\nexport declare class MatIconBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatIconMixinBase: CanColorCtor & typeof MatIconBase;\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport declare const MAT_ICON_LOCATION: InjectionToken<MatIconLocation>;\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n    getPathname: () => string;\n}\n/** @docs-private */\nexport declare function MAT_ICON_LOCATION_FACTORY(): MatIconLocation;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nexport declare class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked, CanColor, OnDestroy {\n    private _iconRegistry;\n    /**\n     * @deprecated `location` parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    private _location?;\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    inline: boolean;\n    private _inline;\n    /** Name of the icon in the SVG icon set. */\n    svgIcon: string;\n    /** Font set that the icon is a part of. */\n    fontSet: string;\n    private _fontSet;\n    /** Name of an icon within a font set. */\n    fontIcon: string;\n    private _fontIcon;\n    private _previousFontSetClass;\n    private _previousFontIconClass;\n    /** Keeps track of the current page path. */\n    private _previousPath?;\n    /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n    private _elementsWithExternalReferences?;\n    constructor(elementRef: ElementRef<HTMLElement>, _iconRegistry: MatIconRegistry, ariaHidden: string, \n    /**\n     * @deprecated `location` parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    _location?: MatIconLocation | undefined);\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    private _splitIconName;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnInit(): void;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    private _usingFontIcon;\n    private _setSvgElement;\n    private _clearSvgElement;\n    private _updateFontIconClasses;\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    private _cleanupFontValue;\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    private _prependPathToReferences;\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    private _cacheChildrenWithExternalReferences;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/icon/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/icon/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './icon-module';\nexport * from './icon';\nexport * from './icon-registry';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/input/autosize.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTextareaAutosize } from '@angular/cdk/text-field';\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\nexport declare class MatTextareaAutosize extends CdkTextareaAutosize {\n    matAutosizeMinRows: number;\n    matAutosizeMaxRows: number;\n    matAutosize: boolean;\n    matTextareaAutosize: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/input/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/input/input-errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nexport declare function getMatInputUnsupportedTypeError(type: string): Error;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/input/input-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatInputModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/input/input-value-accessor.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport declare const MAT_INPUT_VALUE_ACCESSOR: InjectionToken<{\n    value: any;\n}>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/input/input.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { AutofillMonitor } from '@angular/cdk/text-field';\nimport { DoCheck, ElementRef, NgZone, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { CanUpdateErrorState, CanUpdateErrorStateCtor, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n/** @docs-private */\nexport declare class MatInputBase {\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    _parentForm: NgForm;\n    _parentFormGroup: FormGroupDirective;\n    /** @docs-private */\n    ngControl: NgControl;\n    constructor(_defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, \n    /** @docs-private */\n    ngControl: NgControl);\n}\nexport declare const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase;\n/** Directive that allows a native input to work inside a `MatFormField`. */\nexport declare class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges, OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>;\n    protected _platform: Platform;\n    /** @docs-private */\n    ngControl: NgControl;\n    private _autofillMonitor;\n    protected _uid: string;\n    protected _previousNativeValue: any;\n    private _inputValueAccessor;\n    /** The aria-describedby attribute on the input for improved a11y. */\n    _ariaDescribedby: string;\n    /** Whether the component is being rendered on the server. */\n    _isServer: boolean;\n    /** Whether the component is a native html select. */\n    _isNativeSelect: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void>;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    controlType: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    autofilled: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    disabled: boolean;\n    protected _disabled: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    id: string;\n    protected _id: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    placeholder: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    required: boolean;\n    protected _required: boolean;\n    /** Input type of the element. */\n    type: string;\n    protected _type: string;\n    /** An object used to control when error messages are shown. */\n    errorStateMatcher: ErrorStateMatcher;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    value: string;\n    /** Whether the element is readonly. */\n    readonly: boolean;\n    private _readonly;\n    protected _neverEmptyInputTypes: string[];\n    constructor(_elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>, _platform: Platform, \n    /** @docs-private */\n    ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _defaultErrorStateMatcher: ErrorStateMatcher, inputValueAccessor: any, _autofillMonitor: AutofillMonitor, ngZone: NgZone);\n    ngOnInit(): void;\n    ngOnChanges(): void;\n    ngOnDestroy(): void;\n    ngDoCheck(): void;\n    /** Focuses the input. */\n    focus(): void;\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean): void;\n    _onInput(): void;\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue(): void;\n    /** Make sure the input is a supported type. */\n    protected _validateType(): void;\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty(): boolean;\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput(): boolean;\n    /** Determines if the component host is a textarea. */\n    protected _isTextarea(): boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly empty: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly shouldLabelFloat: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids: string[]): void;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/input/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './autosize';\nexport * from './input';\nexport * from './input-errors';\nexport * from './input-module';\nexport * from './input-value-accessor';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/list/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/list/list-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatListModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/list/list.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ElementRef, QueryList } from '@angular/core';\nimport { CanDisableRipple, CanDisableRippleCtor, MatLine } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatListBase {\n}\nexport declare const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase;\n/** @docs-private */\nexport declare class MatListItemBase {\n}\nexport declare const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase;\nexport declare class MatNavList extends _MatListMixinBase implements CanDisableRipple {\n}\nexport declare class MatList extends _MatListMixinBase implements CanDisableRipple {\n    private _elementRef?;\n    /**\n     * @deprecated _elementRef parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    constructor(_elementRef?: ElementRef<HTMLElement> | undefined);\n    _getListType(): 'list' | 'action-list' | null;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatListAvatarCssMatStyler {\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatListIconCssMatStyler {\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatListSubheaderCssMatStyler {\n}\n/** An item within a Material Design list. */\nexport declare class MatListItem extends _MatListItemMixinBase implements AfterContentInit, CanDisableRipple {\n    private _element;\n    private _isInteractiveList;\n    private _list?;\n    _lines: QueryList<MatLine>;\n    _avatar: MatListAvatarCssMatStyler;\n    _icon: MatListIconCssMatStyler;\n    constructor(_element: ElementRef<HTMLElement>, navList?: MatNavList, list?: MatList);\n    ngAfterContentInit(): void;\n    /** Whether this list item should show a ripple effect when clicked. */\n    _isRippleDisabled(): boolean;\n    /** Retrieves the DOM element of the component host. */\n    _getHostElement(): HTMLElement;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/list/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './list-module';\nexport * from './list';\nexport * from './selection-list';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/list/selection-list.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusableOption, FocusKeyManager } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';\nimport { CanDisableRipple, CanDisableRippleCtor, MatLine } from '@angular/material/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { MatListAvatarCssMatStyler, MatListIconCssMatStyler } from './list';\n/** @docs-private */\nexport declare class MatSelectionListBase {\n}\nexport declare const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase;\n/** @docs-private */\nexport declare class MatListOptionBase {\n}\nexport declare const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase;\n/** @docs-private */\nexport declare const MAT_SELECTION_LIST_VALUE_ACCESSOR: any;\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport declare class MatSelectionListChange {\n    /** Reference to the selection list that emitted the event. */\n    source: MatSelectionList;\n    /** Reference to the option that has been changed. */\n    option: MatListOption;\n    constructor(\n    /** Reference to the selection list that emitted the event. */\n    source: MatSelectionList, \n    /** Reference to the option that has been changed. */\n    option: MatListOption);\n}\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\nexport declare class MatListOption extends _MatListOptionMixinBase implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n    private _element;\n    private _changeDetector;\n    /** @docs-private */\n    selectionList: MatSelectionList;\n    private _selected;\n    private _disabled;\n    private _hasFocus;\n    _avatar: MatListAvatarCssMatStyler;\n    _icon: MatListIconCssMatStyler;\n    _lines: QueryList<MatLine>;\n    /** DOM element containing the item's text. */\n    _text: ElementRef;\n    /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n    checkboxPosition: 'before' | 'after';\n    /** Value of the option */\n    value: any;\n    /** Whether the option is disabled. */\n    disabled: any;\n    /** Whether the option is selected. */\n    selected: boolean;\n    constructor(_element: ElementRef<HTMLElement>, _changeDetector: ChangeDetectorRef, \n    /** @docs-private */\n    selectionList: MatSelectionList);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Toggles the selection state of the option. */\n    toggle(): void;\n    /** Allows for programmatic focusing of the option. */\n    focus(): void;\n    /**\n     * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n     * @docs-private\n     */\n    getLabel(): any;\n    /** Whether this list item should show a ripple effect when clicked. */\n    _isRippleDisabled(): any;\n    _handleClick(): void;\n    _handleFocus(): void;\n    _handleBlur(): void;\n    /** Retrieves the DOM element of the component host. */\n    _getHostElement(): HTMLElement;\n    /** Sets the selected state of the option. Returns whether the value has changed. */\n    _setSelected(selected: boolean): boolean;\n    /**\n     * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n     * used to trigger an update of the list option if the disabled state of the selection list\n     * changed.\n     */\n    _markForCheck(): void;\n}\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\nexport declare class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n    private _element;\n    /** The FocusKeyManager which handles focus. */\n    _keyManager: FocusKeyManager<MatListOption>;\n    /** The option components contained within this selection-list. */\n    options: QueryList<MatListOption>;\n    /** Emits a change event whenever the selected state of an option changes. */\n    readonly selectionChange: EventEmitter<MatSelectionListChange>;\n    /** Tabindex of the selection list. */\n    tabIndex: number;\n    /**\n     * Function used for comparing an option against the selected value when determining which\n     * options should appear as selected. The first argument is the value of an options. The second\n     * one is a value from the selected value. A boolean must be returned.\n     */\n    compareWith: (o1: any, o2: any) => boolean;\n    /** Whether the selection list is disabled. */\n    disabled: boolean;\n    private _disabled;\n    /** The currently selected options. */\n    selectedOptions: SelectionModel<MatListOption>;\n    /** View to model callback that should be called whenever the selected options change. */\n    private _onChange;\n    /** Used for storing the values that were assigned before the options were initialized. */\n    private _tempValues;\n    /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n    private _modelChanges;\n    /** View to model callback that should be called if the list or its options lost focus. */\n    _onTouched: () => void;\n    constructor(_element: ElementRef<HTMLElement>, tabIndex: string);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Focuses the last active list option. */\n    focus(): void;\n    /** Selects all of the options. */\n    selectAll(): void;\n    /** Deselects all of the options. */\n    deselectAll(): void;\n    /** Sets the focused option of the selection-list. */\n    _setFocusedOption(option: MatListOption): void;\n    /**\n     * Removes an option from the selection list and updates the active item.\n     * @returns Currently-active item.\n     */\n    _removeOptionFromList(option: MatListOption): MatListOption | null;\n    /** Passes relevant key presses to our key manager. */\n    _keydown(event: KeyboardEvent): void;\n    /** Reports a value change to the ControlValueAccessor */\n    _reportValueChange(): void;\n    /** Emits a change event if the selected state of an option changed. */\n    _emitChangeEvent(option: MatListOption): void;\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(values: string[]): void;\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled: boolean): void;\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn: (value: any) => void): void;\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn: () => void): void;\n    /** Sets the selected options based on the specified values. */\n    private _setOptionsFromValues;\n    /** Returns the values of the selected options. */\n    private _getSelectedOptionValues;\n    /** Toggles the state of the currently focused option if enabled. */\n    private _toggleFocusedOption;\n    /**\n     * Sets the selected state on all of the options\n     * and emits an event if anything changed.\n     */\n    private _setAllOptionsSelected;\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex;\n    /** Returns the index of the specified list option. */\n    private _getOptionIndex;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/menu/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵa23 } from './menu-directive';\nexport { MatMenuItemBase as ɵb23, _MatMenuItemMixinBase as ɵc23 } from './menu-item';\nexport { MAT_MENU_PANEL as ɵf23 } from './menu-panel';\nexport { MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵd23, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵe23 } from './menu-trigger';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/menu/menu-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport declare const matMenuAnimations: {\n    readonly transformMenu: AnimationTriggerMetadata;\n    readonly fadeInItems: AnimationTriggerMetadata;\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport declare const fadeInItems: AnimationTriggerMetadata;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport declare const transformMenu: AnimationTriggerMetadata;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/menu/menu-content.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplateRef, ComponentFactoryResolver, ApplicationRef, Injector, ViewContainerRef, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nexport declare class MatMenuContent implements OnDestroy {\n    private _template;\n    private _componentFactoryResolver;\n    private _appRef;\n    private _injector;\n    private _viewContainerRef;\n    private _document;\n    private _portal;\n    private _outlet;\n    /** Emits when the menu content has been attached. */\n    _attached: Subject<void>;\n    constructor(_template: TemplateRef<any>, _componentFactoryResolver: ComponentFactoryResolver, _appRef: ApplicationRef, _injector: Injector, _viewContainerRef: ViewContainerRef, _document: any);\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context?: any): void;\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach(): void;\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/menu/menu-directive.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport { Direction } from '@angular/cdk/bidi';\nimport { AfterContentInit, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, TemplateRef, QueryList, OnInit } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { MatMenuContent } from './menu-content';\nimport { MatMenuItem } from './menu-item';\nimport { MatMenuPanel } from './menu-panel';\nimport { MenuPositionX, MenuPositionY } from './menu-positions';\nimport { AnimationEvent } from '@angular/animations';\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n    /** The x-axis position of the menu. */\n    xPosition: MenuPositionX;\n    /** The y-axis position of the menu. */\n    yPosition: MenuPositionY;\n    /** Whether the menu should overlap the menu trigger. */\n    overlapTrigger: boolean;\n    /** Class to be applied to the menu's backdrop. */\n    backdropClass: string;\n    /** Whether the menu has a backdrop. */\n    hasBackdrop?: boolean;\n}\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport declare const MAT_MENU_DEFAULT_OPTIONS: InjectionToken<MatMenuDefaultOptions>;\n/** @docs-private */\nexport declare function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions;\nexport declare class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n    private _elementRef;\n    private _ngZone;\n    private _defaultOptions;\n    private _keyManager;\n    private _xPosition;\n    private _yPosition;\n    private _previousElevation;\n    /** Menu items inside the current menu. */\n    private _items;\n    /** Emits whenever the amount of menu items changes. */\n    private _itemChanges;\n    /** Subscription to tab events on the menu panel */\n    private _tabSubscription;\n    /** Config object to be passed into the menu's ngClass */\n    _classList: {\n        [key: string]: boolean;\n    };\n    /** Current state of the panel animation. */\n    _panelAnimationState: 'void' | 'enter';\n    /** Emits whenever an animation on the menu completes. */\n    _animationDone: Subject<AnimationEvent>;\n    /** Whether the menu is animating. */\n    _isAnimating: boolean;\n    /** Parent menu of the current menu panel. */\n    parentMenu: MatMenuPanel | undefined;\n    /** Layout direction of the menu. */\n    direction: Direction;\n    /** Class to be added to the backdrop element. */\n    backdropClass: string;\n    /** Position of the menu in the X axis. */\n    xPosition: MenuPositionX;\n    /** Position of the menu in the Y axis. */\n    yPosition: MenuPositionY;\n    /** @docs-private */\n    templateRef: TemplateRef<any>;\n    /**\n     * List of the items inside of a menu.\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    items: QueryList<MatMenuItem>;\n    /**\n     * Menu content that will be rendered lazily.\n     * @docs-private\n     */\n    lazyContent: MatMenuContent;\n    /** Whether the menu should overlap its trigger. */\n    overlapTrigger: boolean;\n    private _overlapTrigger;\n    /** Whether the menu has a backdrop. */\n    hasBackdrop: boolean | undefined;\n    private _hasBackdrop;\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    panelClass: string;\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    classList: string;\n    /** Event emitted when the menu is closed. */\n    readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    /**\n     * Event emitted when the menu is closed.\n     * @deprecated Switch to `closed` instead\n     * @breaking-change 8.0.0\n     */\n    close: EventEmitter<void | \"click\" | \"keydown\" | \"tab\">;\n    constructor(_elementRef: ElementRef<HTMLElement>, _ngZone: NgZone, _defaultOptions: MatMenuDefaultOptions);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered(): Observable<MatMenuItem>;\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event: KeyboardEvent): void;\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin?: FocusOrigin): void;\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem(): void;\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth: number): void;\n    /**\n     * Registers a menu item with the menu.\n     * @docs-private\n     */\n    addItem(item: MatMenuItem): void;\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     */\n    removeItem(item: MatMenuItem): void;\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX?: MenuPositionX, posY?: MenuPositionY): void;\n    /** Starts the enter animation. */\n    _startAnimation(): void;\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation(): void;\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event: AnimationEvent): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/menu/menu-errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport declare function throwMatMenuMissingError(): void;\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport declare function throwMatMenuInvalidPositionX(): void;\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport declare function throwMatMenuInvalidPositionY(): void;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/menu/menu-item.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusableOption, FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { ElementRef, OnDestroy } from '@angular/core';\nimport { CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { MatMenuPanel } from './menu-panel';\n/** @docs-private */\nexport declare class MatMenuItemBase {\n}\nexport declare const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase;\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\nexport declare class MatMenuItem extends _MatMenuItemMixinBase implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n    private _elementRef;\n    private _focusMonitor?;\n    private _parentMenu?;\n    private _document;\n    /** Stream that emits when the menu item is hovered. */\n    readonly _hovered: Subject<MatMenuItem>;\n    /** Whether the menu item is highlighted. */\n    _highlighted: boolean;\n    /** Whether the menu item acts as a trigger for a sub-menu. */\n    _triggersSubmenu: boolean;\n    constructor(_elementRef: ElementRef<HTMLElement>, document?: any, _focusMonitor?: FocusMonitor | undefined, _parentMenu?: MatMenuPanel<MatMenuItem> | undefined);\n    /** Focuses the menu item. */\n    focus(origin?: FocusOrigin): void;\n    ngOnDestroy(): void;\n    /** Used to set the `tabindex`. */\n    _getTabIndex(): string;\n    /** Returns the host DOM element. */\n    _getHostElement(): HTMLElement;\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event: Event): void;\n    /** Emits to the hover stream. */\n    _handleMouseEnter(): void;\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/menu/menu-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatMenuModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/menu/menu-panel.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, TemplateRef, InjectionToken } from '@angular/core';\nimport { MenuPositionX, MenuPositionY } from './menu-positions';\nimport { Direction } from '@angular/cdk/bidi';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport { MatMenuContent } from './menu-content';\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport declare const MAT_MENU_PANEL: InjectionToken<MatMenuPanel<any>>;\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n    xPosition: MenuPositionX;\n    yPosition: MenuPositionY;\n    overlapTrigger: boolean;\n    templateRef: TemplateRef<any>;\n    close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    parentMenu?: MatMenuPanel | undefined;\n    direction?: Direction;\n    focusFirstItem: (origin?: FocusOrigin) => void;\n    resetActiveItem: () => void;\n    setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n    setElevation?(depth: number): void;\n    lazyContent?: MatMenuContent;\n    backdropClass?: string;\n    hasBackdrop?: boolean;\n    addItem?: (item: T) => void;\n    removeItem?: (item: T) => void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/menu/menu-positions.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare type MenuPositionX = 'before' | 'after';\nexport declare type MenuPositionY = 'above' | 'below';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/menu/menu-trigger.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { Overlay, ScrollStrategy } from '@angular/cdk/overlay';\nimport { AfterContentInit, ElementRef, EventEmitter, InjectionToken, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { MatMenu } from './menu-directive';\nimport { MatMenuItem } from './menu-item';\nimport { MatMenuPanel } from './menu-panel';\n/** Injection token that determines the scroll handling while the menu is open. */\nexport declare const MAT_MENU_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_MENU_SCROLL_STRATEGY_FACTORY;\n};\n/** Default top padding of the menu panel. */\nexport declare const MENU_PANEL_TOP_PADDING = 8;\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nexport declare class MatMenuTrigger implements AfterContentInit, OnDestroy {\n    private _overlay;\n    private _element;\n    private _viewContainerRef;\n    private _parentMenu;\n    private _menuItemInstance;\n    private _dir;\n    private _focusMonitor?;\n    private _portal;\n    private _overlayRef;\n    private _menuOpen;\n    private _closeSubscription;\n    private _hoverSubscription;\n    private _menuCloseSubscription;\n    private _scrollStrategy;\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n    private _handleTouchStart;\n    _openedBy: 'mouse' | 'touch' | null;\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    _deprecatedMatMenuTriggerFor: MatMenuPanel;\n    /** References the menu instance that the trigger is associated with. */\n    menu: MatMenuPanel;\n    private _menu;\n    /** Data to be passed along to any lazily-rendered content. */\n    menuData: any;\n    /** Event emitted when the associated menu is opened. */\n    readonly menuOpened: EventEmitter<void>;\n    /**\n     * Event emitted when the associated menu is opened.\n     * @deprecated Switch to `menuOpened` instead\n     * @breaking-change 8.0.0\n     */\n    readonly onMenuOpen: EventEmitter<void>;\n    /** Event emitted when the associated menu is closed. */\n    readonly menuClosed: EventEmitter<void>;\n    /**\n     * Event emitted when the associated menu is closed.\n     * @deprecated Switch to `menuClosed` instead\n     * @breaking-change 8.0.0\n     */\n    readonly onMenuClose: EventEmitter<void>;\n    constructor(_overlay: Overlay, _element: ElementRef<HTMLElement>, _viewContainerRef: ViewContainerRef, scrollStrategy: any, _parentMenu: MatMenu, _menuItemInstance: MatMenuItem, _dir: Directionality, _focusMonitor?: FocusMonitor | undefined);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Whether the menu is open. */\n    readonly menuOpen: boolean;\n    /** The text direction of the containing app. */\n    readonly dir: Direction;\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu(): boolean;\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu(): void;\n    /** Opens the menu. */\n    openMenu(): void;\n    /** Closes the menu. */\n    closeMenu(): void;\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin?: FocusOrigin): void;\n    /** Closes the menu and does the necessary cleanup. */\n    private _destroyMenu;\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    private _initMenu;\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    private _setMenuElevation;\n    /**\n     * This method resets the menu when it's closed, most importantly restoring\n     * focus to the menu trigger if the menu was opened via the keyboard.\n     */\n    private _resetMenu;\n    private _setIsMenuOpen;\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     */\n    private _checkMenu;\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    private _createOverlay;\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    private _getOverlayConfig;\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    private _subscribeToPositions;\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    private _setPosition;\n    /** Cleans up the active subscriptions. */\n    private _cleanUpSubscriptions;\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    private _menuClosingActions;\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event: MouseEvent): void;\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event: KeyboardEvent): void;\n    /** Handles click events on the trigger. */\n    _handleClick(event: MouseEvent): void;\n    /** Handles the cases where the user hovers over the trigger. */\n    private _handleHover;\n    /** Gets the portal that should be attached to the overlay. */\n    private _getPortal;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/menu/menu.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { MatMenu, MatMenuDefaultOptions, MAT_MENU_DEFAULT_OPTIONS } from './menu-directive';\nexport { MatMenuItem } from './menu-item';\nexport { MatMenuTrigger } from './menu-trigger';\nexport { MatMenuPanel } from './menu-panel';\nexport { MenuPositionX, MenuPositionY } from './menu-positions';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/menu/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './menu-module';\nexport * from './menu';\nexport * from './menu-animations';\nexport * from './menu-content';\nexport { MAT_MENU_SCROLL_STRATEGY } from './menu-trigger';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/paginator/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/paginator/paginator-intl.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional } from '@angular/core';\nimport { Subject } from 'rxjs';\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nexport declare class MatPaginatorIntl {\n    /**\n     * Stream to emit from when labels are changed. Use this to notify components when the labels have\n     * changed after initialization.\n     */\n    readonly changes: Subject<void>;\n    /** A label for the page size selector. */\n    itemsPerPageLabel: string;\n    /** A label for the button that increments the current page. */\n    nextPageLabel: string;\n    /** A label for the button that decrements the current page. */\n    previousPageLabel: string;\n    /** A label for the button that moves to the first page. */\n    firstPageLabel: string;\n    /** A label for the button that moves to the last page. */\n    lastPageLabel: string;\n    /** A label for the range of items within the current page and the length of the whole list. */\n    getRangeLabel: (page: number, pageSize: number, length: number) => string;\n}\n/** @docs-private */\nexport declare function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl): MatPaginatorIntl;\n/** @docs-private */\nexport declare const MAT_PAGINATOR_INTL_PROVIDER: {\n    provide: typeof MatPaginatorIntl;\n    deps: Optional[][];\n    useFactory: typeof MAT_PAGINATOR_INTL_PROVIDER_FACTORY;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/paginator/paginator-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatPaginatorModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/paginator/paginator.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\nimport { MatPaginatorIntl } from './paginator-intl';\nimport { HasInitialized, HasInitializedCtor, ThemePalette, CanDisableCtor, CanDisable } from '@angular/material/core';\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport declare class PageEvent {\n    /** The current page index. */\n    pageIndex: number;\n    /**\n     * Index of the page that was selected previously.\n     * @breaking-change 8.0.0 To be made into a required property.\n     */\n    previousPageIndex?: number;\n    /** The current page size */\n    pageSize: number;\n    /** The current total number of items being paged */\n    length: number;\n}\n/** @docs-private */\nexport declare class MatPaginatorBase {\n}\nexport declare const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase;\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nexport declare class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable, HasInitialized {\n    _intl: MatPaginatorIntl;\n    private _changeDetectorRef;\n    private _initialized;\n    private _intlChanges;\n    /** Theme color to be used for the underlying form controls. */\n    color: ThemePalette;\n    /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n    pageIndex: number;\n    _pageIndex: number;\n    /** The length of the total number of items that are being paginated. Defaulted to 0. */\n    length: number;\n    _length: number;\n    /** Number of items to display on a page. By default set to 50. */\n    pageSize: number;\n    private _pageSize;\n    /** The set of provided page size options to display to the user. */\n    pageSizeOptions: number[];\n    private _pageSizeOptions;\n    /** Whether to hide the page size selection UI from the user. */\n    hidePageSize: boolean;\n    private _hidePageSize;\n    /** Whether to show the first/last buttons UI to the user. */\n    showFirstLastButtons: boolean;\n    private _showFirstLastButtons;\n    /** Event emitted when the paginator changes the page size or page index. */\n    readonly page: EventEmitter<PageEvent>;\n    /** Displayed set of page size options. Will be sorted and include current page size. */\n    _displayedPageSizeOptions: number[];\n    constructor(_intl: MatPaginatorIntl, _changeDetectorRef: ChangeDetectorRef);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /** Advances to the next page if it exists. */\n    nextPage(): void;\n    /** Move back to the previous page if it exists. */\n    previousPage(): void;\n    /** Move to the first page if not already there. */\n    firstPage(): void;\n    /** Move to the last page if not already there. */\n    lastPage(): void;\n    /** Whether there is a previous page. */\n    hasPreviousPage(): boolean;\n    /** Whether there is a next page. */\n    hasNextPage(): boolean;\n    /** Calculate the number of pages */\n    getNumberOfPages(): number;\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     */\n    _changePageSize(pageSize: number): void;\n    /** Checks whether the buttons for going forwards should be disabled. */\n    _nextButtonsDisabled(): boolean;\n    /** Checks whether the buttons for going backwards should be disabled. */\n    _previousButtonsDisabled(): boolean;\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     */\n    private _updateDisplayedPageSizeOptions;\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    private _emitPageEvent;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/paginator/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './paginator-module';\nexport * from './paginator';\nexport * from './paginator-intl';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/progress-bar/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/progress-bar/progress-bar-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatProgressBarModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/progress-bar/progress-bar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, EventEmitter, NgZone, AfterViewInit, OnDestroy, InjectionToken } from '@angular/core';\nimport { CanColor, CanColorCtor } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatProgressBarBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n    value: number;\n}\nexport declare const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase;\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport declare const MAT_PROGRESS_BAR_LOCATION: InjectionToken<MatProgressBarLocation>;\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n    getPathname: () => string;\n}\n/** @docs-private */\nexport declare function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation;\n/**\n * `<mat-progress-bar>` component.\n */\nexport declare class MatProgressBar extends _MatProgressBarMixinBase implements CanColor, AfterViewInit, OnDestroy {\n    _elementRef: ElementRef;\n    private _ngZone;\n    _animationMode?: string | undefined;\n    constructor(_elementRef: ElementRef, _ngZone: NgZone, _animationMode?: string | undefined, \n    /**\n     * @deprecated `location` parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    location?: MatProgressBarLocation);\n    /** Flag that indicates whether NoopAnimations mode is set to true. */\n    _isNoopAnimation: boolean;\n    /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n    value: number;\n    private _value;\n    /** Buffer value of the progress bar. Defaults to zero. */\n    bufferValue: number;\n    private _bufferValue;\n    _primaryValueBar: ElementRef;\n    /**\n     * Event emitted when animation of the primary progress bar completes. This event will not\n     * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n     * animations (indeterminate and query).\n     */\n    animationEnd: EventEmitter<ProgressAnimationEnd>;\n    /** Reference to animation end subscription to be unsubscribed on destroy. */\n    private _animationEndSubscription;\n    /**\n     * Mode of the progress bar.\n     *\n     * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n     * 'determinate'.\n     * Mirrored to mode attribute.\n     */\n    mode: 'determinate' | 'indeterminate' | 'buffer' | 'query';\n    /** ID of the progress bar. */\n    progressbarId: string;\n    /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n    _rectangleFillValue: string;\n    /** Gets the current transform value for the progress bar's primary indicator. */\n    _primaryTransform(): {\n        transform: string;\n    };\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     */\n    _bufferTransform(): {\n        transform: string;\n    } | undefined;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /** Emit an animationEnd event if in determinate or buffer mode. */\n    private emitAnimationEnd;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/progress-bar/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './progress-bar-module';\nexport * from './progress-bar';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/progress-spinner/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/progress-spinner/progress-spinner-module.d.ts",
    "content": "declare class MatProgressSpinnerModule {\n}\nexport { MatProgressSpinnerModule };\n"
  },
  {
    "path": "node_modules/@angular/material/typings/progress-spinner/progress-spinner.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { ElementRef, InjectionToken } from '@angular/core';\nimport { CanColor, CanColorCtor } from '@angular/material/core';\n/** Possible mode for a progress spinner. */\nexport declare type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n/** @docs-private */\nexport declare class MatProgressSpinnerBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase;\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n    /** Diameter of the spinner. */\n    diameter?: number;\n    /** Width of the spinner's stroke. */\n    strokeWidth?: number;\n    /**\n     * Whether the animations should be force to be enabled, ignoring if the current environment is\n     * using NoopAnimationsModule.\n     */\n    _forceAnimations?: boolean;\n}\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport declare const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS: InjectionToken<MatProgressSpinnerDefaultOptions>;\n/** @docs-private */\nexport declare function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions;\n/**\n * `<mat-progress-spinner>` component.\n */\nexport declare class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n    _elementRef: ElementRef;\n    private _document;\n    private animationMode?;\n    private defaults?;\n    private _value;\n    private _strokeWidth;\n    private _fallbackAnimation;\n    /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n    private static diameters;\n    /**\n     * Used for storing all of the generated keyframe animations.\n     * @dynamic\n     */\n    private static styleTag;\n    /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n    _noopAnimations: boolean;\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    diameter: number;\n    private _diameter;\n    /** Stroke width of the progress spinner. */\n    strokeWidth: number;\n    /** Mode of the progress circle */\n    mode: ProgressSpinnerMode;\n    /** Value of the progress circle. */\n    value: number;\n    constructor(_elementRef: ElementRef, platform: Platform, _document: any, animationMode?: string | undefined, defaults?: MatProgressSpinnerDefaultOptions | undefined);\n    /** The radius of the spinner, adjusted for stroke width. */\n    readonly _circleRadius: number;\n    /** The view box of the spinner's svg element. */\n    readonly _viewBox: string;\n    /** The stroke circumference of the svg circle. */\n    readonly _strokeCircumference: number;\n    /** The dash offset of the svg circle. */\n    readonly _strokeDashOffset: number | null;\n    /** Stroke width of the circle in percent. */\n    readonly _circleStrokeWidth: number;\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    private _attachStyleNode;\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    private _getAnimationText;\n}\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nexport declare class MatSpinner extends MatProgressSpinner {\n    constructor(elementRef: ElementRef, platform: Platform, document: any, animationMode?: string, defaults?: MatProgressSpinnerDefaultOptions);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/progress-spinner/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './progress-spinner-module';\nexport * from './progress-spinner';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './version';\nexport * from '@angular/material/autocomplete';\nexport * from '@angular/material/badge';\nexport * from '@angular/material/bottom-sheet';\nexport * from '@angular/material/button';\nexport * from '@angular/material/button-toggle';\nexport * from '@angular/material/card';\nexport * from '@angular/material/checkbox';\nexport * from '@angular/material/chips';\nexport * from '@angular/material/core';\nexport * from '@angular/material/datepicker';\nexport * from '@angular/material/dialog';\nexport * from '@angular/material/divider';\nexport * from '@angular/material/expansion';\nexport * from '@angular/material/form-field';\nexport * from '@angular/material/grid-list';\nexport * from '@angular/material/icon';\nexport * from '@angular/material/input';\nexport * from '@angular/material/list';\nexport * from '@angular/material/menu';\nexport * from '@angular/material/paginator';\nexport * from '@angular/material/progress-bar';\nexport * from '@angular/material/progress-spinner';\nexport * from '@angular/material/radio';\nexport * from '@angular/material/select';\nexport * from '@angular/material/sidenav';\nexport * from '@angular/material/slide-toggle';\nexport * from '@angular/material/slider';\nexport * from '@angular/material/snack-bar';\nexport * from '@angular/material/sort';\nexport * from '@angular/material/stepper';\nexport * from '@angular/material/table';\nexport * from '@angular/material/tabs';\nexport * from '@angular/material/toolbar';\nexport * from '@angular/material/tooltip';\nexport * from '@angular/material/tree';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/radio/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/radio/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './radio-module';\nexport * from './radio';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/radio/radio-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatRadioModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/radio/radio.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, HasTabIndex, HasTabIndexCtor } from '@angular/material/core';\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport declare const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any;\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport declare class MatRadioChange {\n    /** The MatRadioButton that emits the change event. */\n    source: MatRadioButton;\n    /** The value of the MatRadioButton. */\n    value: any;\n    constructor(\n    /** The MatRadioButton that emits the change event. */\n    source: MatRadioButton, \n    /** The value of the MatRadioButton. */\n    value: any);\n}\n/** @docs-private */\nexport declare class MatRadioGroupBase {\n}\nexport declare const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase;\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nexport declare class MatRadioGroup extends _MatRadioGroupMixinBase implements AfterContentInit, ControlValueAccessor, CanDisable {\n    private _changeDetector;\n    /** Selected value for the radio group. */\n    private _value;\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name;\n    /** The currently selected radio button. Should match value. */\n    private _selected;\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized;\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition;\n    /** Whether the radio group is disabled. */\n    private _disabled;\n    /** Whether the radio group is required. */\n    private _required;\n    /** The method to be called in order to update ngModel */\n    _controlValueAccessorChangeFn: (value: any) => void;\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    onTouched: () => any;\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    readonly change: EventEmitter<MatRadioChange>;\n    /** Child radio buttons. */\n    _radios: QueryList<MatRadioButton>;\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    name: string;\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    labelPosition: 'before' | 'after';\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    value: any;\n    _checkSelectedRadioButton(): void;\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    selected: MatRadioButton | null;\n    /** Whether the radio group is disabled */\n    disabled: boolean;\n    /** Whether the radio group is required */\n    required: boolean;\n    constructor(_changeDetector: ChangeDetectorRef);\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit(): void;\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch(): void;\n    private _updateRadioButtonNames;\n    /** Updates the `selected` radio button from the internal _value state. */\n    private _updateSelectedRadioFromValue;\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent(): void;\n    _markRadiosForCheck(): void;\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any): void;\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void): void;\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean): void;\n}\n/** @docs-private */\nexport declare class MatRadioButtonBase {\n    _elementRef: ElementRef;\n    disabled: boolean;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatRadioButtonMixinBase: CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase;\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nexport declare class MatRadioButton extends _MatRadioButtonMixinBase implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n    private _changeDetector;\n    private _focusMonitor;\n    private _radioDispatcher;\n    _animationMode?: string | undefined;\n    private _uniqueId;\n    /** The unique ID for the radio button. */\n    id: string;\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    name: string;\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    ariaLabel: string;\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    ariaLabelledby: string;\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    ariaDescribedby: string;\n    /** Whether this radio button is checked. */\n    checked: boolean;\n    /** The value of this radio button. */\n    value: any;\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    labelPosition: 'before' | 'after';\n    private _labelPosition;\n    /** Whether the radio button is disabled. */\n    disabled: boolean;\n    /** Whether the radio button is required. */\n    required: boolean;\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    readonly change: EventEmitter<MatRadioChange>;\n    /** The parent radio group. May or may not be present. */\n    radioGroup: MatRadioGroup;\n    /** ID of the native input element inside `<mat-radio-button>` */\n    readonly inputId: string;\n    /** Whether this radio is checked. */\n    private _checked;\n    /** Whether this radio is disabled. */\n    private _disabled;\n    /** Whether this radio is required. */\n    private _required;\n    /** Value assigned to this radio. */\n    private _value;\n    /** Unregister function for _radioDispatcher */\n    private _removeUniqueSelectionListener;\n    /** The native `<input type=radio>` element */\n    _inputElement: ElementRef<HTMLInputElement>;\n    constructor(radioGroup: MatRadioGroup, elementRef: ElementRef, _changeDetector: ChangeDetectorRef, _focusMonitor: FocusMonitor, _radioDispatcher: UniqueSelectionDispatcher, _animationMode?: string | undefined);\n    /** Focuses the radio button. */\n    focus(): void;\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /** Dispatch change event with current value. */\n    private _emitChangeEvent;\n    _isRippleDisabled(): boolean;\n    _onInputClick(event: Event): void;\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     */\n    _onInputChange(event: Event): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-add/fonts/material-fonts.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Tree } from '@angular-devkit/schematics';\nimport { Schema } from '../schema';\n/** Adds the Material Design fonts to the index HTML file. */\nexport declare function addFontsToIndex(options: Schema): (host: Tree) => Tree;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-add/fonts/project-index-html.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { WorkspaceProject } from '@angular-devkit/core/src/workspace';\n/** Looks for the index HTML file in the given project and returns its path. */\nexport declare function getIndexHtmlPath(project: WorkspaceProject): string;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-add/gestures/hammerjs-import.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Rule } from '@angular-devkit/schematics';\nimport { Schema } from '../schema';\n/** Adds HammerJS to the main file of the specified Angular CLI project. */\nexport declare function addHammerJsToMain(options: Schema): Rule;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-add/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Rule } from '@angular-devkit/schematics';\nimport { Schema } from './schema';\n/**\n * Schematic factory entry-point for the `ng-add` schematic. The ng-add schematic will be\n * automatically executed if developers run `ng add @angular/material`.\n *\n * Since the Angular Material schematics depend on the schematic utility functions from the CDK,\n * we need to install the CDK before loading the schematic files that import from the CDK.\n */\nexport default function (options: Schema): Rule;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-add/package-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Tree } from '@angular-devkit/schematics';\n/** Adds a package to the package.json in the given host tree. */\nexport declare function addPackageToPackageJson(host: Tree, pkg: string, version: string): Tree;\n/** Gets the version of the specified package by looking at the package.json in the given tree. */\nexport declare function getPackageVersionFromPackageJson(tree: Tree, name: string): string | null;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-add/schema.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport interface Schema {\n    /** Name of the project. */\n    project: string;\n    /** Whether gesture support should be set up. */\n    gestures: boolean;\n    /** Whether Angular browser animations should be set up. */\n    animations: boolean;\n    /** Name of pre-built theme to install. */\n    theme: 'indigo-pink' | 'deeppurple-amber' | 'pink-bluegrey' | 'purple-green' | 'custom';\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-add/setup-project.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Rule } from '@angular-devkit/schematics';\nimport { Schema } from './schema';\n/**\n * Scaffolds the basics of a Angular Material application, this includes:\n *  - Add Packages to package.json\n *  - Adds pre-built themes to styles.ext\n *  - Adds Browser Animation to app.module\n */\nexport default function (options: Schema): Rule;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-add/theming/custom-theme.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Create custom theme for the given application configuration. */\nexport declare function createCustomTheme(name?: string): string;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-add/theming/theming.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Tree } from '@angular-devkit/schematics';\nimport { Schema } from '../schema';\n/** Add pre-built styles to the main project style file. */\nexport declare function addThemeToAppStyles(options: Schema): (host: Tree) => Tree;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-add/version-names.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Name of the Material version that is shipped together with the schematics. */\nexport declare const materialVersion: string | null;\n/**\n * Range of Angular versions that can be used together with the Angular Material version\n * that provides these schematics.\n */\nexport declare const requiredAngularVersionRange = \">=7.0.0\";\n/** HammerJS version that should be installed if gestures will be set up. */\nexport declare const hammerjsVersion = \"^2.0.8\";\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-generate/address-form/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Rule } from '@angular-devkit/schematics';\nimport { Schema } from './schema';\n/**\n * Scaffolds a new table component.\n * Internally it bootstraps the base component schematic\n */\nexport default function (options: Schema): Rule;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-generate/address-form/schema.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Schema as ComponentSchema } from '@schematics/angular/component/schema';\nexport interface Schema extends ComponentSchema {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-generate/dashboard/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Rule } from '@angular-devkit/schematics';\nimport { Schema } from './schema';\n/**\n * Scaffolds a new dashboard component.\n * Internally it bootstraps the base component schematic\n */\nexport default function (options: Schema): Rule;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-generate/dashboard/schema.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Schema as ComponentSchema } from '@schematics/angular/component/schema';\nexport interface Schema extends ComponentSchema {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-generate/nav/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Rule } from '@angular-devkit/schematics';\nimport { Schema } from './schema';\n/**\n * Scaffolds a new navigation component.\n * Internally it bootstraps the base component schematic\n */\nexport default function (options: Schema): Rule;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-generate/nav/schema.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Schema as ComponentSchema } from '@schematics/angular/component/schema';\nexport interface Schema extends ComponentSchema {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-generate/table/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Rule } from '@angular-devkit/schematics';\nimport { Schema } from './schema';\n/**\n * Scaffolds a new table component.\n * Internally it bootstraps the base component schematic\n */\nexport default function (options: Schema): Rule;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-generate/table/schema.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Schema as ComponentSchema } from '@schematics/angular/component/schema';\nexport interface Schema extends ComponentSchema {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-generate/tree/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Rule } from '@angular-devkit/schematics';\nimport { Schema } from './schema';\n/**\n * Scaffolds a new tree component.\n * Internally it bootstraps the base component schematic\n */\nexport default function (options: Schema): Rule;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-generate/tree/schema.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Schema as ComponentSchema } from '@schematics/angular/component/schema';\nexport interface Schema extends ComponentSchema {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/data/attribute-selectors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AttributeSelectorUpgradeData, VersionChanges } from '@angular/cdk/schematics';\nexport declare const attributeSelectors: VersionChanges<AttributeSelectorUpgradeData>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/data/class-names.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ClassNameUpgradeData, VersionChanges } from '@angular/cdk/schematics';\nexport declare const classNames: VersionChanges<ClassNameUpgradeData>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/data/constructor-checks.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ConstructorChecksUpgradeData, VersionChanges } from '@angular/cdk/schematics';\n/**\n * List of class names for which the constructor signature has been changed. The new constructor\n * signature types don't need to be stored here because the signature will be determined\n * automatically through type checking.\n */\nexport declare const constructorChecks: VersionChanges<ConstructorChecksUpgradeData>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/data/css-selectors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { VersionChanges } from '@angular/cdk/schematics';\nexport interface MaterialCssSelectorData {\n    /** The CSS selector to replace. */\n    replace: string;\n    /** The new CSS selector. */\n    replaceWith: string;\n    /** Whitelist where this replacement is made. If omitted it is made in all files. */\n    whitelist?: {\n        /** Replace this name in stylesheet files. */\n        stylesheet?: boolean;\n        /** Replace this name in HTML files. */\n        html?: boolean;\n        /** Replace this name in TypeScript strings. */\n        strings?: boolean;\n    };\n}\nexport declare const cssSelectors: VersionChanges<MaterialCssSelectorData>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/data/element-selectors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementSelectorUpgradeData, VersionChanges } from '@angular/cdk/schematics';\nexport declare const elementSelectors: VersionChanges<ElementSelectorUpgradeData>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/data/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './attribute-selectors';\nexport * from './class-names';\nexport * from './constructor-checks';\nexport * from './css-selectors';\nexport * from './element-selectors';\nexport * from './input-names';\nexport * from './method-call-checks';\nexport * from './output-names';\nexport * from './property-names';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/data/input-names.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InputNameUpgradeData, VersionChanges } from '@angular/cdk/schematics';\nexport declare const inputNames: VersionChanges<InputNameUpgradeData>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/data/method-call-checks.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MethodCallUpgradeData, VersionChanges } from '@angular/cdk/schematics';\nexport declare const methodCallChecks: VersionChanges<MethodCallUpgradeData>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/data/output-names.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OutputNameUpgradeData, VersionChanges } from '@angular/cdk/schematics';\nexport declare const outputNames: VersionChanges<OutputNameUpgradeData>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/data/property-names.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PropertyNameUpgradeData, VersionChanges } from '@angular/cdk/schematics';\nexport declare const propertyNames: VersionChanges<PropertyNameUpgradeData>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Rule } from '@angular-devkit/schematics';\n/** Entry point for the migration schematics with target of Angular Material v6 */\nexport declare function updateToV6(): Rule;\n/** Entry point for the migration schematics with target of Angular Material v7 */\nexport declare function updateToV7(): Rule;\n/** Post-update schematic to be called when update is finished. */\nexport declare function postUpdate(): Rule;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/typescript/module-specifiers.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ts from 'typescript';\n/** Name of the Angular Material module specifier. */\nexport declare const materialModuleSpecifier = \"@angular/material\";\n/** Name of the Angular CDK module specifier. */\nexport declare const cdkModuleSpecifier = \"@angular/cdk\";\n/** Whether the specified node is part of an Angular Material or CDK import declaration. */\nexport declare function isMaterialImportDeclaration(node: ts.Node): boolean;\n/** Whether the specified node is part of an Angular Material or CDK import declaration. */\nexport declare function isMaterialExportDeclaration(node: ts.Node): boolean;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/upgrade-data.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { RuleUpgradeData } from '@angular/cdk/schematics';\n/** Upgrade data that will be used for the Angular Material ng-update schematic. */\nexport declare const materialUpgradeData: RuleUpgradeData;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/upgrade-rules/misc-checks/checkClassInheritanceMiscRule.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ProgramAwareRuleWalker, RuleFailure, Rules } from 'tslint';\nimport * as ts from 'typescript';\n/**\n * Rule that checks for classes that extend Angular Material classes which have changed\n * their API.\n */\nexport declare class Rule extends Rules.TypedRule {\n    applyWithProgram(sourceFile: ts.SourceFile, program: ts.Program): RuleFailure[];\n}\nexport declare class Walker extends ProgramAwareRuleWalker {\n    visitClassDeclaration(node: ts.ClassDeclaration): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/upgrade-rules/misc-checks/checkClassNamesMiscRule.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { RuleFailure, Rules, RuleWalker } from 'tslint';\nimport * as ts from 'typescript';\n/**\n * Rule that looks for class name identifiers that have been removed but cannot be\n * automatically migrated.\n */\nexport declare class Rule extends Rules.AbstractRule {\n    apply(sourceFile: ts.SourceFile): RuleFailure[];\n}\nexport declare class Walker extends RuleWalker {\n    visitIdentifier(identifier: ts.Identifier): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/upgrade-rules/misc-checks/checkImportsMiscRule.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ProgramAwareRuleWalker, RuleFailure, Rules } from 'tslint';\nimport * as ts from 'typescript';\n/**\n * Rule that detects import declarations that refer to outdated identifiers from Angular Material\n * or the CDK which cannot be updated automatically.\n */\nexport declare class Rule extends Rules.TypedRule {\n    applyWithProgram(sourceFile: ts.SourceFile, program: ts.Program): RuleFailure[];\n}\nexport declare class Walker extends ProgramAwareRuleWalker {\n    visitImportDeclaration(node: ts.ImportDeclaration): void;\n    /**\n     * Checks for named imports that refer to the deleted animation constants.\n     * https://github.com/angular/material2/commit/9f3bf274c4f15f0b0fbd8ab7dbf1a453076e66d9\n     */\n    private _checkAnimationConstants;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/upgrade-rules/misc-checks/checkPropertyNamesMiscRule.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ProgramAwareRuleWalker, RuleFailure, Rules } from 'tslint';\nimport * as ts from 'typescript';\n/**\n * Rule that walks through every property access expression and and reports to TSLint if\n * a given property name is no longer existing but cannot be automatically migrated.\n */\nexport declare class Rule extends Rules.TypedRule {\n    applyWithProgram(sourceFile: ts.SourceFile, program: ts.Program): RuleFailure[];\n}\nexport declare class Walker extends ProgramAwareRuleWalker {\n    visitPropertyAccessExpression(node: ts.PropertyAccessExpression): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/upgrade-rules/misc-checks/checkTemplateMiscRule.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentWalker, ExternalResource } from '@angular/cdk/schematics';\nimport { RuleFailure, Rules } from 'tslint';\nimport * as ts from 'typescript';\n/**\n * Rule that walks through every inline or external template and reports if there are outdated\n * usages of the Angular Material API that needs to be updated manually.\n */\nexport declare class Rule extends Rules.AbstractRule {\n    apply(sourceFile: ts.SourceFile): RuleFailure[];\n}\nexport declare class Walker extends ComponentWalker {\n    visitInlineTemplate(node: ts.StringLiteralLike): void;\n    visitExternalTemplate(node: ExternalResource): void;\n    private _createFailuresForContent;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/upgrade-rules/misc-ripples-v7/ripple-speed-factor.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Converts the specified speed factor into the exact static enter duration. */\nexport declare function convertSpeedFactorToDuration(factor: number): number;\n/**\n * Creates a runtime TypeScript expression that can be used in order to calculate the duration\n * from the speed factor expression that couldn't be statically analyzed.\n *\n * @param speedFactorValue Speed factor expression that couldn't be statically analyzed.\n */\nexport declare function createSpeedFactorConvertExpression(speedFactorValue: string): string;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/upgrade-rules/misc-ripples-v7/rippleSpeedFactorAssignmentRule.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ProgramAwareRuleWalker, RuleFailure, Rules } from 'tslint';\nimport * as ts from 'typescript';\n/**\n * Rule that walks through every property assignment and switches the global `baseSpeedFactor`\n * ripple option to the new global animation config. Also updates every class member assignment\n * that refers to MatRipple#speedFactor.\n */\nexport declare class Rule extends Rules.TypedRule {\n    applyWithProgram(sourceFile: ts.SourceFile, program: ts.Program): RuleFailure[];\n}\nexport declare class Walker extends ProgramAwareRuleWalker {\n    /** Switches binary expressions (e.g. myRipple.speedFactor = 0.5) to the new animation config. */\n    visitBinaryExpression(expression: ts.BinaryExpression): void;\n    /**\n     * Switches a potential global option `baseSpeedFactor` to the new animation config. For this\n     * we assume that the `baseSpeedFactor` is not used in combination with individual speed factors.\n     */\n    visitPropertyAssignment(assignment: ts.PropertyAssignment): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/schematics/ng-update/upgrade-rules/misc-ripples-v7/rippleSpeedFactorTemplateRule.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentWalker, ExternalResource } from '@angular/cdk/schematics';\nimport { RuleFailure, Rules } from 'tslint';\nimport * as ts from 'typescript';\n/**\n * Rule that walks through every inline or external template and updates the deprecated\n * [matRippleSpeedFactor] to [matRippleAnimation].\n */\nexport declare class Rule extends Rules.AbstractRule {\n    apply(sourceFile: ts.SourceFile): RuleFailure[];\n}\nexport declare class Walker extends ComponentWalker {\n    visitInlineTemplate(node: ts.StringLiteralLike): void;\n    visitExternalTemplate(node: ExternalResource): void;\n    private _createReplacementsForContent;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/select/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/select/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './select-module';\nexport * from './select';\nexport * from './select-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/select/select-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport declare const matSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport declare const transformPanel: AnimationTriggerMetadata;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport declare const fadeInContent: AnimationTriggerMetadata;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/select/select-errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport declare function getMatSelectDynamicMultipleError(): Error;\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport declare function getMatSelectNonArrayValueError(): Error;\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport declare function getMatSelectNonFunctionValueError(): Error;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/select/select-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatSelectModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/select/select.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { CdkConnectedOverlay, Overlay, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { AfterContentInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, InjectionToken, NgZone, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, CanUpdateErrorState, CanUpdateErrorStateCtor, ErrorStateMatcher, HasTabIndex, HasTabIndexCtor, MatOptgroup, MatOption, MatOptionSelectionChange } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl } from '@angular/material/form-field';\nimport { Observable, Subject } from 'rxjs';\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel */\nexport declare const SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis */\nexport declare const SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport declare const SELECT_PANEL_INDENT_PADDING_X: number;\n/** The height of the select items in `em` units. */\nexport declare const SELECT_ITEM_HEIGHT_EM = 3;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport declare let SELECT_MULTIPLE_PANEL_PADDING_X: number;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport declare const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nexport declare const MAT_SELECT_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_SELECT_SCROLL_STRATEGY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY;\n};\n/** Change event object that is emitted when the select value has changed. */\nexport declare class MatSelectChange {\n    /** Reference to the select that emitted the change event. */\n    source: MatSelect;\n    /** Current value of the select that emitted the event. */\n    value: any;\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source: MatSelect, \n    /** Current value of the select that emitted the event. */\n    value: any);\n}\n/** @docs-private */\nexport declare class MatSelectBase {\n    _elementRef: ElementRef;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    _parentForm: NgForm;\n    _parentFormGroup: FormGroupDirective;\n    ngControl: NgControl;\n    constructor(_elementRef: ElementRef, _defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, ngControl: NgControl);\n}\nexport declare const _MatSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanDisableRippleCtor & CanUpdateErrorStateCtor & typeof MatSelectBase;\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nexport declare class MatSelectTrigger {\n}\nexport declare class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex, MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n    private _viewportRuler;\n    private _changeDetectorRef;\n    private _ngZone;\n    private _dir;\n    private _parentFormField;\n    ngControl: NgControl;\n    private _scrollStrategyFactory;\n    /** Whether or not the overlay panel is open. */\n    private _panelOpen;\n    /** Whether filling out the select is required in the form. */\n    private _required;\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private _scrollTop;\n    /** The placeholder displayed in the trigger of the select. */\n    private _placeholder;\n    /** Whether the component is in multiple selection mode. */\n    private _multiple;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith;\n    /** Unique id for this input. */\n    private _uid;\n    /** Emits whenever the component is destroyed. */\n    private readonly _destroy;\n    /** The last measured value for the trigger's client bounding rect. */\n    _triggerRect: ClientRect;\n    /** The aria-describedby attribute on the select for improved a11y. */\n    _ariaDescribedby: string;\n    /** The cached font-size of the trigger element. */\n    _triggerFontSize: number;\n    /** Deals with the selection logic. */\n    _selectionModel: SelectionModel<MatOption>;\n    /** Manages keyboard events for options in the panel. */\n    _keyManager: ActiveDescendantKeyManager<MatOption>;\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void;\n    /** `View -> model callback called when select has been touched` */\n    _onTouched: () => void;\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    _optionIds: string;\n    /** The value of the select panel's transform-origin property. */\n    _transformOrigin: string;\n    /** Emits when the panel element is finished transforming in. */\n    _panelDoneAnimatingStream: Subject<string>;\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    _scrollStrategy: ScrollStrategy;\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    _offsetY: number;\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    _positions: {\n        originX: string;\n        originY: string;\n        overlayX: string;\n        overlayY: string;\n    }[];\n    /** Whether the component is disabling centering of the active option over the trigger. */\n    private _disableOptionCentering;\n    /** Whether the select is focused. */\n    /**\n    * @deprecated Setter to be removed as this property is intended to be readonly.\n    * @breaking-change 8.0.0\n    */\n    focused: boolean;\n    private _focused;\n    /** A name for this control that can be used by `mat-form-field`. */\n    controlType: string;\n    /** Trigger that opens the select. */\n    trigger: ElementRef;\n    /** Panel containing the select options. */\n    panel: ElementRef;\n    /** Overlay pane containing the options. */\n    overlayDir: CdkConnectedOverlay;\n    /** All of the defined select options. */\n    options: QueryList<MatOption>;\n    /** All of the defined groups of options. */\n    optionGroups: QueryList<MatOptgroup>;\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    panelClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    /** User-supplied override of the trigger element. */\n    customTrigger: MatSelectTrigger;\n    /** Placeholder to be shown if no value has been selected. */\n    placeholder: string;\n    /** Whether the component is required. */\n    required: boolean;\n    /** Whether the user should be allowed to select multiple options. */\n    multiple: boolean;\n    /** Whether to center the active option over the trigger. */\n    disableOptionCentering: boolean;\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    compareWith: (o1: any, o2: any) => boolean;\n    /** Value of the select control. */\n    value: any;\n    private _value;\n    /** Aria label of the select. If not specified, the placeholder will be used as label. */\n    ariaLabel: string;\n    /** Input that can be used to specify the `aria-labelledby` attribute. */\n    ariaLabelledby: string;\n    /** Object used to control when error messages are shown. */\n    errorStateMatcher: ErrorStateMatcher;\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n    /** Unique id of the element. */\n    id: string;\n    private _id;\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<MatOptionSelectionChange>;\n    /** Event emitted when the select panel has been toggled. */\n    readonly openedChange: EventEmitter<boolean>;\n    /** Event emitted when the select has been opened. */\n    readonly _openedStream: Observable<void>;\n    /** Event emitted when the select has been closed. */\n    readonly _closedStream: Observable<void>;\n    /** Event emitted when the selected value has been changed by the user. */\n    readonly selectionChange: EventEmitter<MatSelectChange>;\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    readonly valueChange: EventEmitter<any>;\n    constructor(_viewportRuler: ViewportRuler, _changeDetectorRef: ChangeDetectorRef, _ngZone: NgZone, _defaultErrorStateMatcher: ErrorStateMatcher, elementRef: ElementRef, _dir: Directionality, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _parentFormField: MatFormField, ngControl: NgControl, tabIndex: string, scrollStrategyFactory: any);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngDoCheck(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void;\n    /** Opens the overlay panel. */\n    open(): void;\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void;\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void;\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void;\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void;\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /** Whether or not the overlay panel is open. */\n    readonly panelOpen: boolean;\n    /** The currently selected option. */\n    readonly selected: MatOption | MatOption[];\n    /** The value displayed in the trigger. */\n    readonly triggerValue: string;\n    /** Whether the element is in RTL mode. */\n    _isRtl(): boolean;\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event: KeyboardEvent): void;\n    /** Handles keyboard events while the select is closed. */\n    private _handleClosedKeydown;\n    /** Handles keyboard events when the selected is open. */\n    private _handleOpenKeydown;\n    _onFocus(): void;\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur(): void;\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached(): void;\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme(): string;\n    /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n    private _setPseudoCheckboxPaddingSize;\n    /** Whether the select has a value. */\n    readonly empty: boolean;\n    private _initializeSelection;\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private _setSelectionByValue;\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private _selectValue;\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private _initKeyManager;\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private _resetOptions;\n    /** Invoked when an option is clicked. */\n    private _onSelect;\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private _sortValues;\n    /** Emits change event to set the model value. */\n    private _propagateChanges;\n    /** Records option IDs to pass to the aria-owns property. */\n    private _setOptionIds;\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private _highlightCorrectOption;\n    /** Scrolls the active option into view. */\n    private _scrollActiveOptionIntoView;\n    /** Focuses the select element. */\n    focus(): void;\n    /** Gets the index of the provided option in the option list. */\n    private _getOptionIndex;\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private _calculateOverlayPosition;\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number;\n    /** Returns the aria-label of the select component. */\n    _getAriaLabel(): string | null;\n    /** Returns the aria-labelledby of the select component. */\n    _getAriaLabelledby(): string | null;\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant(): string | null;\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private _calculateOverlayOffsetX;\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private _calculateOverlayOffsetY;\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private _checkOverlayWithinViewport;\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private _adjustPanelUp;\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private _adjustPanelDown;\n    /** Sets the transform origin point based on the selected option. */\n    private _getOriginBasedOnOption;\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private _getItemCount;\n    /** Calculates the height of the select's options. */\n    private _getItemHeight;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids: string[]): void;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(): void;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly shouldLabelFloat: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/sidenav/drawer-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport declare const matDrawerAnimations: {\n    readonly transformDrawer: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/sidenav/drawer.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationEvent } from '@angular/animations';\nimport { FocusMonitor, FocusOrigin, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { AfterContentChecked, AfterContentInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, QueryList } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport declare function throwMatDuplicatedDrawerError(position: string): void;\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport declare type MatDrawerToggleResult = 'open' | 'close';\n/** Configures whether drawers should use auto sizing by default. */\nexport declare const MAT_DRAWER_DEFAULT_AUTOSIZE: InjectionToken<boolean>;\n/** @docs-private */\nexport declare function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean;\nexport declare class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n    private _changeDetectorRef;\n    _container: MatDrawerContainer;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _container: MatDrawerContainer, elementRef: ElementRef<HTMLElement>, scrollDispatcher: ScrollDispatcher, ngZone: NgZone);\n    ngAfterContentInit(): void;\n}\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nexport declare class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n    private _elementRef;\n    private _focusTrapFactory;\n    private _focusMonitor;\n    private _platform;\n    private _ngZone;\n    private _doc;\n    private _focusTrap;\n    private _elementFocusedBeforeDrawerWasOpened;\n    /** Whether the drawer is initialized. Used for disabling the initial animation. */\n    private _enableAnimations;\n    /** The side that the drawer is attached to. */\n    position: 'start' | 'end';\n    private _position;\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n    mode: 'over' | 'push' | 'side';\n    private _mode;\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n    disableClose: boolean;\n    private _disableClose;\n    /** Whether the drawer should focus the first focusable element automatically when opened. */\n    autoFocus: boolean;\n    private _autoFocus;\n    /** How the sidenav was opened (keypress, mouse click etc.) */\n    private _openedVia;\n    /** Emits whenever the drawer has started animating. */\n    _animationStarted: Subject<AnimationEvent>;\n    /** Emits whenever the drawer is done animating. */\n    _animationEnd: Subject<AnimationEvent>;\n    /** Current state of the sidenav animation. */\n    _animationState: 'open-instant' | 'open' | 'void';\n    /** Event emitted when the drawer open state is changed. */\n    readonly openedChange: EventEmitter<boolean>;\n    /** Event emitted when the drawer has been opened. */\n    readonly _openedStream: Observable<void>;\n    /** Event emitted when the drawer has started opening. */\n    readonly openedStart: Observable<void>;\n    /** Event emitted when the drawer has been closed. */\n    readonly _closedStream: Observable<void>;\n    /** Event emitted when the drawer has started closing. */\n    readonly closedStart: Observable<void>;\n    /** Event emitted when the drawer's position changes. */\n    onPositionChanged: EventEmitter<void>;\n    /**\n     * An observable that emits when the drawer mode changes. This is used by the drawer container to\n     * to know when to when the mode changes so it can adapt the margins on the content.\n     */\n    readonly _modeChanged: Subject<{}>;\n    readonly _isFocusTrapEnabled: boolean;\n    constructor(_elementRef: ElementRef<HTMLElement>, _focusTrapFactory: FocusTrapFactory, _focusMonitor: FocusMonitor, _platform: Platform, _ngZone: NgZone, _doc: any);\n    /** Traps focus inside the drawer. */\n    private _trapFocus;\n    /**\n     * If focus is currently inside the drawer, restores it to where it was before the drawer\n     * opened.\n     */\n    private _restoreFocus;\n    ngAfterContentInit(): void;\n    ngAfterContentChecked(): void;\n    ngOnDestroy(): void;\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n    opened: boolean;\n    private _opened;\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult>;\n    /** Close the drawer. */\n    close(): Promise<MatDrawerToggleResult>;\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    toggle(isOpen?: boolean, openedVia?: FocusOrigin): Promise<MatDrawerToggleResult>;\n    readonly _width: number;\n}\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nexport declare class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n    private _dir;\n    private _element;\n    private _ngZone;\n    private _changeDetectorRef;\n    private _animationMode?;\n    _drawers: QueryList<MatDrawer>;\n    _content: MatDrawerContent;\n    _userContent: MatDrawerContent;\n    /** The drawer child with the `start` position. */\n    readonly start: MatDrawer | null;\n    /** The drawer child with the `end` position. */\n    readonly end: MatDrawer | null;\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n    autosize: boolean;\n    private _autosize;\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n    hasBackdrop: any;\n    _backdropOverride: boolean | null;\n    /** Event emitted when the drawer backdrop is clicked. */\n    readonly backdropClick: EventEmitter<void>;\n    /** The drawer at the start/end position, independent of direction. */\n    private _start;\n    private _end;\n    /**\n     * The drawer at the left/right. When direction changes, these will change as well.\n     * They're used as aliases for the above to set the left/right style properly.\n     * In LTR, _left == _start and _right == _end.\n     * In RTL, _left == _end and _right == _start.\n     */\n    private _left;\n    private _right;\n    /** Emits when the component is destroyed. */\n    private readonly _destroyed;\n    /** Emits on every ngDoCheck. Used for debouncing reflows. */\n    private readonly _doCheckSubject;\n    /**\n     * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n     * drawer is open. We use margin rather than transform even for push mode because transform breaks\n     * fixed position elements inside of the transformed element.\n     */\n    _contentMargins: {\n        left: number | null;\n        right: number | null;\n    };\n    readonly _contentMarginChanges: Subject<{\n        left: number | null;\n        right: number | null;\n    }>;\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n    readonly scrollable: CdkScrollable;\n    constructor(_dir: Directionality, _element: ElementRef<HTMLElement>, _ngZone: NgZone, _changeDetectorRef: ChangeDetectorRef, defaultAutosize?: boolean, _animationMode?: string | undefined);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Calls `open` of both start and end drawers */\n    open(): void;\n    /** Calls `close` of both start and end drawers */\n    close(): void;\n    ngDoCheck(): void;\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n    private _watchDrawerToggle;\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n    private _watchDrawerPosition;\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n    private _watchDrawerMode;\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n    private _setContainerClass;\n    /** Validate the state of the drawer children components. */\n    private _validateDrawers;\n    /** Whether the container is being pushed to the side by one of the drawers. */\n    private _isPushed;\n    _onBackdropClicked(): void;\n    _closeModalDrawer(): void;\n    _isShowingBackdrop(): boolean;\n    private _canHaveBackdrop;\n    private _isDrawerOpen;\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n    private _updateContentMargins;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/sidenav/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/sidenav/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './sidenav-module';\nexport * from './drawer';\nexport * from './sidenav';\nexport * from './drawer-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/sidenav/sidenav-module.d.ts",
    "content": "export declare class MatSidenavModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/sidenav/sidenav.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, QueryList, ElementRef, NgZone } from '@angular/core';\nimport { MatDrawer, MatDrawerContainer, MatDrawerContent } from './drawer';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nexport declare class MatSidenavContent extends MatDrawerContent {\n    constructor(changeDetectorRef: ChangeDetectorRef, container: MatSidenavContainer, elementRef: ElementRef<HTMLElement>, scrollDispatcher: ScrollDispatcher, ngZone: NgZone);\n}\nexport declare class MatSidenav extends MatDrawer {\n    /** Whether the sidenav is fixed in the viewport. */\n    fixedInViewport: boolean;\n    private _fixedInViewport;\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n    fixedTopGap: number;\n    private _fixedTopGap;\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n    fixedBottomGap: number;\n    private _fixedBottomGap;\n}\nexport declare class MatSidenavContainer extends MatDrawerContainer {\n    _drawers: QueryList<MatSidenav>;\n    _content: MatSidenavContent;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/slide-toggle/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/slide-toggle/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './slide-toggle-module';\nexport * from './slide-toggle';\nexport * from './slide-toggle-config';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/slide-toggle/slide-toggle-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n    /** Whether toggle action triggers value changes in slide toggle. */\n    disableToggleValue?: boolean;\n    /** Whether drag action triggers value changes in slide toggle. */\n    disableDragValue?: boolean;\n}\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport declare const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS: InjectionToken<MatSlideToggleDefaultOptions>;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/slide-toggle/slide-toggle-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatSlideToggleModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/slide-toggle/slide-toggle.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, NgZone } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, HammerInput, HasTabIndex, HasTabIndexCtor } from '@angular/material/core';\nimport { MatSlideToggleDefaultOptions } from './slide-toggle-config';\n/** @docs-private */\nexport declare const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any;\n/** Change event object emitted by a MatSlideToggle. */\nexport declare class MatSlideToggleChange {\n    /** The source MatSlideToggle of the event. */\n    source: MatSlideToggle;\n    /** The new `checked` value of the MatSlideToggle. */\n    checked: boolean;\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source: MatSlideToggle, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked: boolean);\n}\n/** @docs-private */\nexport declare class MatSlideToggleBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatSlideToggleMixinBase: HasTabIndexCtor & CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatSlideToggleBase;\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nexport declare class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit, ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n    private _focusMonitor;\n    private _changeDetectorRef;\n    private _ngZone;\n    defaults: MatSlideToggleDefaultOptions;\n    _animationMode?: string | undefined;\n    private _dir?;\n    private onChange;\n    private onTouched;\n    private _uniqueId;\n    private _required;\n    private _checked;\n    /** Whether the thumb is currently being dragged. */\n    private _dragging;\n    /** Previous checked state before drag started. */\n    private _previousChecked;\n    /** Width of the thumb bar of the slide-toggle. */\n    private _thumbBarWidth;\n    /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n    private _dragPercentage;\n    /** Reference to the thumb HTMLElement. */\n    _thumbEl: ElementRef;\n    /** Reference to the thumb bar HTMLElement. */\n    _thumbBarEl: ElementRef;\n    /** Name value will be applied to the input element if present. */\n    name: string | null;\n    /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n    id: string;\n    /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n    labelPosition: 'before' | 'after';\n    /** Used to set the aria-label attribute on the underlying input element. */\n    ariaLabel: string | null;\n    /** Used to set the aria-labelledby attribute on the underlying input element. */\n    ariaLabelledby: string | null;\n    /** Whether the slide-toggle is required. */\n    required: boolean;\n    /** Whether the slide-toggle element is checked or not. */\n    checked: boolean;\n    /** An event will be dispatched each time the slide-toggle changes its value. */\n    readonly change: EventEmitter<MatSlideToggleChange>;\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed. The event does not fire when the user drags to change\n     * the slide toggle value.\n     */\n    readonly toggleChange: EventEmitter<void>;\n    /**\n     * An event will be dispatched each time the slide-toggle is dragged.\n     * This event is always emitted when the user drags the slide toggle to make a change greater\n     * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n     * the user toggles the slide toggle to change its value.\n     */\n    readonly dragChange: EventEmitter<void>;\n    /** Returns the unique id for the visual hidden input. */\n    readonly inputId: string;\n    /** Reference to the underlying input element. */\n    _inputElement: ElementRef<HTMLInputElement>;\n    constructor(elementRef: ElementRef, \n    /**\n     * @deprecated The `_platform` parameter to be removed.\n     * @breaking-change 8.0.0\n     */\n    _platform: Platform, _focusMonitor: FocusMonitor, _changeDetectorRef: ChangeDetectorRef, tabIndex: string, _ngZone: NgZone, defaults: MatSlideToggleDefaultOptions, _animationMode?: string | undefined, _dir?: Directionality | undefined);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event: Event): void;\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event: Event): void;\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value: any): void;\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn: any): void;\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn: any): void;\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled: boolean): void;\n    /** Focuses the slide-toggle. */\n    focus(): void;\n    /** Toggles the checked state of the slide-toggle. */\n    toggle(): void;\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    private _emitChangeEvent;\n    /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n    private _getDragPercentage;\n    _onDragStart(): void;\n    _onDrag(event: HammerInput): void;\n    _onDragEnd(): void;\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/slider/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/slider/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './slider-module';\nexport * from './slider';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/slider/slider-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatSliderModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/slider/slider.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, HammerInput, HasTabIndex, HasTabIndexCtor } from '@angular/material/core';\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport declare const MAT_SLIDER_VALUE_ACCESSOR: any;\n/** A simple change event emitted by the MatSlider component. */\nexport declare class MatSliderChange {\n    /** The MatSlider that changed. */\n    source: MatSlider;\n    /** The new value of the source slider. */\n    value: number | null;\n}\n/** @docs-private */\nexport declare class MatSliderBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatSliderMixinBase: HasTabIndexCtor & CanColorCtor & CanDisableCtor & typeof MatSliderBase;\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport declare class MatSlider extends _MatSliderMixinBase implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n    private _focusMonitor;\n    private _changeDetectorRef;\n    private _dir;\n    _animationMode?: string | undefined;\n    /** Whether the slider is inverted. */\n    invert: boolean;\n    private _invert;\n    /** The maximum value that the slider can have. */\n    max: number;\n    private _max;\n    /** The minimum value that the slider can have. */\n    min: number;\n    private _min;\n    /** The values at which the thumb will snap. */\n    step: number;\n    private _step;\n    /** Whether or not to show the thumb label. */\n    thumbLabel: boolean;\n    private _thumbLabel;\n    /**\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n     */\n    tickInterval: 'auto' | number;\n    private _tickInterval;\n    /** Value of the slider. */\n    value: number | null;\n    private _value;\n    /**\n     * Function that will be used to format the value before it is displayed\n     * in the thumb label. Can be used to format very large number in order\n     * for them to fit into the slider thumb.\n     */\n    displayWith: (value: number | null) => string | number;\n    /** Whether the slider is vertical. */\n    vertical: boolean;\n    private _vertical;\n    /** Event emitted when the slider value has changed. */\n    readonly change: EventEmitter<MatSliderChange>;\n    /** Event emitted when the slider thumb moves. */\n    readonly input: EventEmitter<MatSliderChange>;\n    /**\n     * Emits when the raw value of the slider changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    readonly valueChange: EventEmitter<number | null>;\n    /** The value to be used for display purposes. */\n    readonly displayValue: string | number;\n    /** set focus to the host element */\n    focus(): void;\n    /** blur the host element */\n    blur(): void;\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    onTouched: () => any;\n    /** The percentage of the slider that coincides with the value. */\n    readonly percent: number;\n    private _percent;\n    /**\n     * Whether or not the thumb is sliding.\n     * Used to determine if there should be a transition for the thumb and fill track.\n     */\n    _isSliding: boolean;\n    /**\n     * Whether or not the slider is active (clicked or sliding).\n     * Used to shrink and grow the thumb as according to the Material Design spec.\n     */\n    _isActive: boolean;\n    /**\n     * Whether the axis of the slider is inverted.\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n     */\n    readonly _invertAxis: boolean;\n    /** Whether the slider is at its minimum value. */\n    readonly _isMinValue: boolean;\n    /**\n     * The amount of space to leave between the slider thumb and the track fill & track background\n     * elements.\n     */\n    readonly _thumbGap: 7 | 10 | 0;\n    /** CSS styles for the track background element. */\n    readonly _trackBackgroundStyles: {\n        [key: string]: string;\n    };\n    /** CSS styles for the track fill element. */\n    readonly _trackFillStyles: {\n        [key: string]: string;\n    };\n    /** CSS styles for the ticks container element. */\n    readonly _ticksContainerStyles: {\n        [key: string]: string;\n    };\n    /** CSS styles for the ticks element. */\n    readonly _ticksStyles: {\n        [key: string]: string;\n    };\n    readonly _thumbContainerStyles: {\n        [key: string]: string;\n    };\n    /** The size of a tick interval as a percentage of the size of the track. */\n    private _tickIntervalPercent;\n    /** The dimensions of the slider. */\n    private _sliderDimensions;\n    private _controlValueAccessorChangeFn;\n    /** Decimal places to round to, based on the step amount. */\n    private _roundToDecimal;\n    /** Subscription to the Directionality change EventEmitter. */\n    private _dirChangeSubscription;\n    /** The value of the slider when the slide start event fires. */\n    private _valueOnSlideStart;\n    /** Reference to the inner slider wrapper element. */\n    private _sliderWrapper;\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     */\n    private _shouldInvertMouseCoords;\n    /** The language direction for this slider element. */\n    private _getDirection;\n    constructor(elementRef: ElementRef, _focusMonitor: FocusMonitor, _changeDetectorRef: ChangeDetectorRef, _dir: Directionality, tabIndex: string, _animationMode?: string | undefined);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    _onMouseenter(): void;\n    _onMousedown(event: MouseEvent): void;\n    _onSlide(event: HammerInput): void;\n    _onSlideStart(event: HammerInput | null): void;\n    _onSlideEnd(): void;\n    _onFocus(): void;\n    _onBlur(): void;\n    _onKeydown(event: KeyboardEvent): void;\n    _onKeyup(): void;\n    /** Increments the slider by the given number of steps (negative number decrements). */\n    private _increment;\n    /** Calculate the new value from the new physical location. The value will always be snapped. */\n    private _updateValueFromPosition;\n    /** Emits a change event if the current value is different from the last emitted value. */\n    private _emitChangeEvent;\n    /** Emits an input event when the current value is different from the last emitted value. */\n    private _emitInputEvent;\n    /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n    private _updateTickIntervalPercent;\n    /** Creates a slider change object from the specified value. */\n    private _createChangeEvent;\n    /** Calculates the percentage of the slider that a value is. */\n    private _calculatePercentage;\n    /** Calculates the value a percentage of the slider corresponds to. */\n    private _calculateValue;\n    /** Return a number between two numbers. */\n    private _clamp;\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     */\n    private _getSliderDimensions;\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     */\n    private _focusHostElement;\n    /** Blurs the native element. */\n    private _blurHostElement;\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any): void;\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void): void;\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled: boolean): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/snack-bar/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/snack-bar/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './snack-bar-module';\nexport * from './snack-bar';\nexport * from './snack-bar-container';\nexport * from './snack-bar-config';\nexport * from './snack-bar-ref';\nexport * from './simple-snack-bar';\nexport * from './snack-bar-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/snack-bar/simple-snack-bar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MatSnackBarRef } from './snack-bar-ref';\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nexport declare class SimpleSnackBar {\n    snackBarRef: MatSnackBarRef<SimpleSnackBar>;\n    /** Data that was injected into the snack bar. */\n    data: {\n        message: string;\n        action: string;\n    };\n    constructor(snackBarRef: MatSnackBarRef<SimpleSnackBar>, data: any);\n    /** Performs the action on the snack bar. */\n    action(): void;\n    /** If the action button should be shown. */\n    readonly hasAction: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/snack-bar/snack-bar-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport declare const matSnackBarAnimations: {\n    readonly snackBarState: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/snack-bar/snack-bar-config.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewContainerRef, InjectionToken } from '@angular/core';\nimport { AriaLivePoliteness } from '@angular/cdk/a11y';\nimport { Direction } from '@angular/cdk/bidi';\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport declare const MAT_SNACK_BAR_DATA: InjectionToken<any>;\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport declare type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport declare type MatSnackBarVerticalPosition = 'top' | 'bottom';\n/**\n * Configuration used when opening a snack-bar.\n */\nexport declare class MatSnackBarConfig<D = any> {\n    /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n    politeness?: AriaLivePoliteness;\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     */\n    announcementMessage?: string;\n    /** The view container to place the overlay for the snack bar into. */\n    viewContainerRef?: ViewContainerRef;\n    /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n    duration?: number;\n    /** Extra CSS classes to be added to the snack bar container. */\n    panelClass?: string | string[];\n    /** Text layout direction for the snack bar. */\n    direction?: Direction;\n    /** Data being injected into the child component. */\n    data?: D | null;\n    /** The horizontal position to place the snack bar. */\n    horizontalPosition?: MatSnackBarHorizontalPosition;\n    /** The vertical position to place the snack bar. */\n    verticalPosition?: MatSnackBarVerticalPosition;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/snack-bar/snack-bar-container.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationEvent } from '@angular/animations';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { ChangeDetectorRef, ComponentRef, ElementRef, EmbeddedViewRef, NgZone, OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { MatSnackBarConfig } from './snack-bar-config';\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nexport declare class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n    private _ngZone;\n    private _elementRef;\n    private _changeDetectorRef;\n    /** The snack bar configuration. */\n    snackBarConfig: MatSnackBarConfig;\n    /** Whether the component has been destroyed. */\n    private _destroyed;\n    /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n    _portalOutlet: CdkPortalOutlet;\n    /** Subject for notifying that the snack bar has exited from view. */\n    readonly _onExit: Subject<any>;\n    /** Subject for notifying that the snack bar has finished entering the view. */\n    readonly _onEnter: Subject<any>;\n    /** The state of the snack bar animations. */\n    _animationState: string;\n    /** ARIA role for the snack bar container. */\n    _role: 'alert' | 'status' | null;\n    constructor(_ngZone: NgZone, _elementRef: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, \n    /** The snack bar configuration. */\n    snackBarConfig: MatSnackBarConfig);\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event: AnimationEvent): void;\n    /** Begin animation of snack bar entrance into view. */\n    enter(): void;\n    /** Begin animation of the snack bar exiting from view. */\n    exit(): Observable<void>;\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy(): void;\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    private _completeExit;\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    private _applySnackBarClasses;\n    /** Asserts that no content is already attached to the container. */\n    private _assertNotAttached;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/snack-bar/snack-bar-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatSnackBarModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/snack-bar/snack-bar-ref.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { Observable } from 'rxjs';\nimport { MatSnackBarContainer } from './snack-bar-container';\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n    /** Whether the snack bar was dismissed using the action button. */\n    dismissedByAction: boolean;\n}\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport declare class MatSnackBarRef<T> {\n    private _overlayRef;\n    /** The instance of the component making up the content of the snack bar. */\n    instance: T;\n    /**\n     * The instance of the component making up the content of the snack bar.\n     * @docs-private\n     */\n    containerInstance: MatSnackBarContainer;\n    /** Subject for notifying the user that the snack bar has been dismissed. */\n    private readonly _afterDismissed;\n    /** Subject for notifying the user that the snack bar has opened and appeared. */\n    private readonly _afterOpened;\n    /** Subject for notifying the user that the snack bar action was called. */\n    private readonly _onAction;\n    /**\n     * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n     * dismissed before the duration passes.\n     */\n    private _durationTimeoutId;\n    /** Whether the snack bar was dismissed using the action button. */\n    private _dismissedByAction;\n    constructor(containerInstance: MatSnackBarContainer, _overlayRef: OverlayRef);\n    /** Dismisses the snack bar. */\n    dismiss(): void;\n    /** Marks the snackbar action clicked. */\n    dismissWithAction(): void;\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction(): void;\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration: number): void;\n    /** Marks the snackbar as opened */\n    _open(): void;\n    /** Cleans up the DOM after closing. */\n    private _finishDismiss;\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed(): Observable<MatSnackBarDismiss>;\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened(): Observable<void>;\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction(): Observable<void>;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/snack-bar/snack-bar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { EmbeddedViewRef, InjectionToken, Injector, TemplateRef, OnDestroy } from '@angular/core';\nimport { SimpleSnackBar } from './simple-snack-bar';\nimport { MatSnackBarConfig } from './snack-bar-config';\nimport { MatSnackBarRef } from './snack-bar-ref';\n/** Injection token that can be used to specify default snack bar. */\nexport declare const MAT_SNACK_BAR_DEFAULT_OPTIONS: InjectionToken<MatSnackBarConfig<any>>;\n/** @docs-private */\nexport declare function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig;\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport declare class MatSnackBar implements OnDestroy {\n    private _overlay;\n    private _live;\n    private _injector;\n    private _breakpointObserver;\n    private _parentSnackBar;\n    private _defaultConfig;\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n    private _snackBarRefAtThisLevel;\n    /** Reference to the currently opened snackbar at *any* level. */\n    _openedSnackBarRef: MatSnackBarRef<any> | null;\n    constructor(_overlay: Overlay, _live: LiveAnnouncer, _injector: Injector, _breakpointObserver: BreakpointObserver, _parentSnackBar: MatSnackBar, _defaultConfig: MatSnackBarConfig);\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T>;\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig): MatSnackBarRef<EmbeddedViewRef<any>>;\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message: string, action?: string, config?: MatSnackBarConfig): MatSnackBarRef<SimpleSnackBar>;\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss(): void;\n    ngOnDestroy(): void;\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    private _attachSnackBarContainer;\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    private _attach;\n    /** Animates the old snack bar out and the new one in. */\n    private _animateSnackBar;\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    private _createOverlay;\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    private _createInjector;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/sort/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/sort/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './sort-module';\nexport * from './sort-direction';\nexport * from './sort-header';\nexport * from './sort-header-intl';\nexport * from './sort';\nexport * from './sort-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/sort/sort-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport declare const matSortAnimations: {\n    readonly indicator: AnimationTriggerMetadata;\n    readonly leftPointer: AnimationTriggerMetadata;\n    readonly rightPointer: AnimationTriggerMetadata;\n    readonly arrowOpacity: AnimationTriggerMetadata;\n    readonly arrowPosition: AnimationTriggerMetadata;\n    readonly allowChildren: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/sort/sort-direction.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare type SortDirection = 'asc' | 'desc' | '';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/sort/sort-errors.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nexport declare function getSortDuplicateSortableIdError(id: string): Error;\n/** @docs-private */\nexport declare function getSortHeaderNotContainedWithinSortError(): Error;\n/** @docs-private */\nexport declare function getSortHeaderMissingIdError(): Error;\n/** @docs-private */\nexport declare function getSortInvalidDirectionError(direction: string): Error;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/sort/sort-header-intl.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional } from '@angular/core';\nimport { Subject } from 'rxjs';\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nexport declare class MatSortHeaderIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void>;\n    /** ARIA label for the sorting button. */\n    sortButtonLabel: (id: string) => string;\n}\n/** @docs-private */\nexport declare function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl): MatSortHeaderIntl;\n/** @docs-private */\nexport declare const MAT_SORT_HEADER_INTL_PROVIDER: {\n    provide: typeof MatSortHeaderIntl;\n    deps: Optional[][];\n    useFactory: typeof MAT_SORT_HEADER_INTL_PROVIDER_FACTORY;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/sort/sort-header.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';\nimport { CanDisable, CanDisableCtor } from '@angular/material/core';\nimport { MatSort, MatSortable } from './sort';\nimport { SortDirection } from './sort-direction';\nimport { MatSortHeaderIntl } from './sort-header-intl';\n/** @docs-private */\nexport declare class MatSortHeaderBase {\n}\nexport declare const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase;\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport declare type ArrowViewState = SortDirection | 'hint' | 'active';\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n    fromState?: ArrowViewState;\n    toState: ArrowViewState;\n}\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n    name: string;\n}\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nexport declare class MatSortHeader extends _MatSortHeaderMixinBase implements CanDisable, MatSortable, OnDestroy, OnInit {\n    _intl: MatSortHeaderIntl;\n    _sort: MatSort;\n    _columnDef: MatSortHeaderColumnDef;\n    private _rerenderSubscription;\n    /**\n     * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n     * provide an affordance that the header is sortable by showing on focus and hover.\n     */\n    _showIndicatorHint: boolean;\n    /**\n     * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n     * position through the animation. If animations are currently disabled, the fromState is removed\n     * so that there is no animation displayed.\n     */\n    _viewState: ArrowViewStateTransition;\n    /** The direction the arrow should be facing according to the current state. */\n    _arrowDirection: SortDirection;\n    /**\n     * Whether the view state animation should show the transition between the `from` and `to` states.\n     */\n    _disableViewStateAnimation: boolean;\n    /**\n     * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n     * the column's name.\n     */\n    id: string;\n    /** Sets the position of the arrow that displays when sorted. */\n    arrowPosition: 'before' | 'after';\n    /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n    start: 'asc' | 'desc';\n    /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n    disableClear: boolean;\n    private _disableClear;\n    constructor(_intl: MatSortHeaderIntl, changeDetectorRef: ChangeDetectorRef, _sort: MatSort, _columnDef: MatSortHeaderColumnDef);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     */\n    _setIndicatorHintVisible(visible: boolean): void;\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     */\n    _setAnimationTransitionState(viewState: ArrowViewStateTransition): void;\n    /** Triggers the sort on this sort header and removes the indicator hint. */\n    _handleClick(): void;\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n    _isSorted(): boolean;\n    /** Returns the animation state for the arrow direction (indicator and pointers). */\n    _getArrowDirectionState(): string;\n    /** Returns the arrow position state (opacity, translation). */\n    _getArrowViewState(): string;\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     */\n    _updateArrowDirection(): void;\n    _isDisabled(): boolean;\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     */\n    _getAriaSortAttribute(): \"ascending\" | \"descending\" | null;\n}\nexport {};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/sort/sort-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatSortModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/sort/sort.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { CanDisable, CanDisableCtor, HasInitialized, HasInitializedCtor } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { SortDirection } from './sort-direction';\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n    /** The id of the column being sorted. */\n    id: string;\n    /** Starting sort direction. */\n    start: 'asc' | 'desc';\n    /** Whether to disable clearing the sorting state. */\n    disableClear: boolean;\n}\n/** The current sort state. */\nexport interface Sort {\n    /** The id of the column being sorted. */\n    active: string;\n    /** The sort direction. */\n    direction: SortDirection;\n}\n/** @docs-private */\nexport declare class MatSortBase {\n}\nexport declare const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase;\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\nexport declare class MatSort extends _MatSortMixinBase implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n    /** Collection of all registered sortables that this directive manages. */\n    sortables: Map<string, MatSortable>;\n    /** Used to notify any child components listening to state changes. */\n    readonly _stateChanges: Subject<void>;\n    /** The id of the most recently sorted MatSortable. */\n    active: string;\n    /**\n     * The direction to set when an MatSortable is initially sorted.\n     * May be overriden by the MatSortable's sort start.\n     */\n    start: 'asc' | 'desc';\n    /** The sort direction of the currently active MatSortable. */\n    direction: SortDirection;\n    private _direction;\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     */\n    disableClear: boolean;\n    private _disableClear;\n    /** Event emitted when the user changes either the active sort or sort direction. */\n    readonly sortChange: EventEmitter<Sort>;\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     */\n    register(sortable: MatSortable): void;\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     */\n    deregister(sortable: MatSortable): void;\n    /** Sets the active sort id and determines the new sort direction. */\n    sort(sortable: MatSortable): void;\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n    getNextSortDirection(sortable: MatSortable): SortDirection;\n    ngOnInit(): void;\n    ngOnChanges(): void;\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/stepper/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/stepper/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './stepper-module';\nexport * from './step-label';\nexport * from './stepper';\nexport * from './stepper-button';\nexport * from './step-header';\nexport * from './stepper-intl';\nexport * from './stepper-animations';\nexport * from './stepper-icon';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/stepper/step-header.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ChangeDetectorRef, ElementRef, OnDestroy, TemplateRef } from '@angular/core';\nimport { MatStepLabel } from './step-label';\nimport { MatStepperIntl } from './stepper-intl';\nimport { MatStepperIconContext } from './stepper-icon';\nimport { CdkStepHeader, StepState } from '@angular/cdk/stepper';\nexport declare class MatStepHeader extends CdkStepHeader implements OnDestroy {\n    _intl: MatStepperIntl;\n    private _focusMonitor;\n    private _intlSubscription;\n    /** State of the given step. */\n    state: StepState;\n    /** Label of the given step. */\n    label: MatStepLabel | string;\n    /** Error message to display when there's an error. */\n    errorMessage: string;\n    /** Overrides for the header icons, passed in via the stepper. */\n    iconOverrides: {\n        [key: string]: TemplateRef<MatStepperIconContext>;\n    };\n    /** Index of the given step. */\n    index: number;\n    /** Whether the given step is selected. */\n    selected: boolean;\n    /** Whether the given step label is active. */\n    active: boolean;\n    /** Whether the given step is optional. */\n    optional: boolean;\n    constructor(_intl: MatStepperIntl, _focusMonitor: FocusMonitor, _elementRef: ElementRef<HTMLElement>, changeDetectorRef: ChangeDetectorRef);\n    ngOnDestroy(): void;\n    /** Returns string label of given step if it is a text label. */\n    _stringLabel(): string | null;\n    /** Returns MatStepLabel if the label of given step is a template label. */\n    _templateLabel(): MatStepLabel | null;\n    /** Returns the host HTML element. */\n    _getHostElement(): HTMLElement;\n    /** Template context variables that are exposed to the `matStepperIcon` instances. */\n    _getIconContext(): MatStepperIconContext;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/stepper/step-label.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkStepLabel } from '@angular/cdk/stepper';\nexport declare class MatStepLabel extends CdkStepLabel {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/stepper/stepper-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport declare const matStepperAnimations: {\n    readonly horizontalStepTransition: AnimationTriggerMetadata;\n    readonly verticalStepTransition: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/stepper/stepper-button.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkStepperNext, CdkStepperPrevious } from '@angular/cdk/stepper';\n/** Button that moves to the next step in a stepper workflow. */\nexport declare class MatStepperNext extends CdkStepperNext {\n}\n/** Button that moves to the previous step in a stepper workflow. */\nexport declare class MatStepperPrevious extends CdkStepperPrevious {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/stepper/stepper-icon.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplateRef } from '@angular/core';\nimport { StepState } from '@angular/cdk/stepper';\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n    /** Index of the step. */\n    index: number;\n    /** Whether the step is currently active. */\n    active: boolean;\n    /** Whether the step is optional. */\n    optional: boolean;\n}\n/**\n * Template to be used to override the icons inside the step header.\n */\nexport declare class MatStepperIcon {\n    templateRef: TemplateRef<MatStepperIconContext>;\n    /** Name of the icon to be overridden. */\n    name: StepState;\n    constructor(templateRef: TemplateRef<MatStepperIconContext>);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/stepper/stepper-intl.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional } from '@angular/core';\nimport { Subject } from 'rxjs';\n/** Stepper data that is required for internationalization. */\nexport declare class MatStepperIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void>;\n    /** Label that is rendered below optional steps. */\n    optionalLabel: string;\n}\n/** @docs-private */\nexport declare function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl): MatStepperIntl;\n/** @docs-private */\nexport declare const MAT_STEPPER_INTL_PROVIDER: {\n    provide: typeof MatStepperIntl;\n    deps: Optional[][];\n    useFactory: typeof MAT_STEPPER_INTL_PROVIDER_FACTORY;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/stepper/stepper-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatStepperModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/stepper/stepper.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { CdkStep, CdkStepper, StepperOptions } from '@angular/cdk/stepper';\nimport { AnimationEvent } from '@angular/animations';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, QueryList, TemplateRef } from '@angular/core';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { MatStepHeader } from './step-header';\nimport { MatStepLabel } from './step-label';\nimport { MatStepperIcon, MatStepperIconContext } from './stepper-icon';\nexport declare class MatStep extends CdkStep implements ErrorStateMatcher {\n    private _errorStateMatcher;\n    /** Content for step label given by `<ng-template matStepLabel>`. */\n    stepLabel: MatStepLabel;\n    /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n    constructor(stepper: MatStepper, _errorStateMatcher: ErrorStateMatcher, stepperOptions?: StepperOptions);\n    /** Custom error state matcher that additionally checks for validity of interacted form. */\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;\n}\nexport declare class MatStepper extends CdkStepper implements AfterContentInit {\n    /** The list of step headers of the steps in the stepper. */\n    _stepHeader: QueryList<MatStepHeader>;\n    /** Steps that the stepper holds. */\n    _steps: QueryList<MatStep>;\n    /** Custom icon overrides passed in by the consumer. */\n    _icons: QueryList<MatStepperIcon>;\n    /** Event emitted when the current step is done transitioning in. */\n    readonly animationDone: EventEmitter<void>;\n    /** Consumer-specified template-refs to be used to override the header icons. */\n    _iconOverrides: {\n        [key: string]: TemplateRef<MatStepperIconContext>;\n    };\n    /** Stream of animation `done` events when the body expands/collapses. */\n    _animationDone: Subject<AnimationEvent>;\n    ngAfterContentInit(): void;\n}\nexport declare class MatHorizontalStepper extends MatStepper {\n    /** Whether the label should display in bottom or end position. */\n    labelPosition: 'bottom' | 'end';\n}\nexport declare class MatVerticalStepper extends MatStepper {\n    constructor(dir: Directionality, changeDetectorRef: ChangeDetectorRef, elementRef?: ElementRef<HTMLElement>, _document?: any);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/table/cell.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef } from '@angular/core';\nimport { CdkCell, CdkCellDef, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkHeaderCell, CdkHeaderCellDef } from '@angular/cdk/table';\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport declare class MatCellDef extends CdkCellDef {\n}\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport declare class MatHeaderCellDef extends CdkHeaderCellDef {\n}\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nexport declare class MatFooterCellDef extends CdkFooterCellDef {\n}\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nexport declare class MatColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    name: string;\n    /** Whether this column should be sticky positioned at the start of the row */\n    sticky: boolean;\n    /** Whether this column should be sticky positioned on the end of the row */\n    stickyEnd: boolean;\n}\n/** Header cell template container that adds the right classes and role. */\nexport declare class MatHeaderCell extends CdkHeaderCell {\n    constructor(columnDef: CdkColumnDef, elementRef: ElementRef<HTMLElement>);\n}\n/** Footer cell template container that adds the right classes and role. */\nexport declare class MatFooterCell extends CdkFooterCell {\n    constructor(columnDef: CdkColumnDef, elementRef: ElementRef);\n}\n/** Cell template container that adds the right classes and role. */\nexport declare class MatCell extends CdkCell {\n    constructor(columnDef: CdkColumnDef, elementRef: ElementRef<HTMLElement>);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/table/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/table/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './table-module';\nexport * from './cell';\nexport * from './table';\nexport * from './row';\nexport * from './table-data-source';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/table/row.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef } from '@angular/cdk/table';\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport declare class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nexport declare class MatFooterRowDef extends CdkFooterRowDef {\n}\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nexport declare class MatRowDef<T> extends CdkRowDef<T> {\n}\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nexport declare class MatHeaderRow extends CdkHeaderRow {\n}\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nexport declare class MatFooterRow extends CdkFooterRow {\n}\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nexport declare class MatRow extends CdkRow {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/table/table-data-source.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DataSource } from '@angular/cdk/table';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport declare class MatTableDataSource<T> extends DataSource<T> {\n    /** Stream that emits when a new data array is set on the data source. */\n    private readonly _data;\n    /** Stream emitting render data to the table (depends on ordered data changes). */\n    private readonly _renderData;\n    /** Stream that emits when a new filter string is set on the data source. */\n    private readonly _filter;\n    /**\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\n     * as filtering, sorting, pagination, or base data changes.\n     */\n    _renderChangesSubscription: Subscription;\n    /**\n     * The filtered set of data that has been matched by the filter string, or all the data if there\n     * is no filter. Useful for knowing the set of data the table represents.\n     * For example, a 'selectAll()' function would likely want to select the set of filtered data\n     * shown to the user rather than all the data.\n     */\n    filteredData: T[];\n    /** Array of data that should be rendered by the table, where each object represents one row. */\n    data: T[];\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n    filter: string;\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n    sort: MatSort | null;\n    private _sort;\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n    paginator: MatPaginator | null;\n    private _paginator;\n    /**\n     * Data accessor function that is used for accessing data properties for sorting through\n     * the default sortData function.\n     * This default function assumes that the sort header IDs (which defaults to the column name)\n     * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n     * May be set to a custom function for different behavior.\n     * @param data Data object that is being accessed.\n     * @param sortHeaderId The name of the column that represents the data.\n     */\n    sortingDataAccessor: ((data: T, sortHeaderId: string) => string | number);\n    /**\n     * Gets a sorted copy of the data array based on the state of the MatSort. Called\n     * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n     * By default, the function retrieves the active sort and its direction and compares data\n     * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n     * of data ordering.\n     * @param data The array of data that should be sorted.\n     * @param sort The connected MatSort that holds the current sort state.\n     */\n    sortData: ((data: T[], sort: MatSort) => T[]);\n    /**\n     * Checks if a data object matches the data source's filter string. By default, each data object\n     * is converted to a string of its properties and returns true if the filter has\n     * at least one occurrence in that string. By default, the filter string has its whitespace\n     * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n     * filter matching.\n     * @param data Data object used to check against the filter.\n     * @param filter Filter string that has been set on the data source.\n     * @returns Whether the filter matches against the data\n     */\n    filterPredicate: ((data: T, filter: string) => boolean);\n    constructor(initialData?: T[]);\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription(): void;\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     */\n    _filterData(data: T[]): T[];\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    _orderData(data: T[]): T[];\n    /**\n     * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    _pageData(data: T[]): T[];\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    _updatePaginator(filteredDataLength: number): void;\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    connect(): BehaviorSubject<T[]>;\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * @docs-private\n     */\n    disconnect(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/table/table-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatTableModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/table/table.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTable } from '@angular/cdk/table';\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nexport declare class MatTable<T> extends CdkTable<T> {\n    /** Overrides the sticky CSS class set by the `CdkTable`. */\n    protected stickyCssClass: string;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tabs/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { _MAT_INK_BAR_POSITIONER_FACTORY as ɵa22 } from './ink-bar';\nexport { MatTabBase as ɵf22, _MatTabMixinBase as ɵg22 } from './tab';\nexport { MatTabHeaderBase as ɵb22, _MatTabHeaderMixinBase as ɵc22 } from './tab-header';\nexport { MatTabLabelWrapperBase as ɵd22, _MatTabLabelWrapperMixinBase as ɵe22 } from './tab-label-wrapper';\nexport { MatTabLinkBase as ɵj22, MatTabNavBase as ɵh22, _MatTabLinkMixinBase as ɵk22, _MatTabNavMixinBase as ɵi22 } from './tab-nav-bar/tab-nav-bar';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tabs/ink-bar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, InjectionToken, NgZone } from '@angular/core';\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\nexport interface _MatInkBarPositioner {\n    (element: HTMLElement): {\n        left: string;\n        width: string;\n    };\n}\n/** Injection token for the MatInkBar's Positioner. */\nexport declare const _MAT_INK_BAR_POSITIONER: InjectionToken<_MatInkBarPositioner>;\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport declare function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner;\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\nexport declare class MatInkBar {\n    private _elementRef;\n    private _ngZone;\n    private _inkBarPositioner;\n    constructor(_elementRef: ElementRef<HTMLElement>, _ngZone: NgZone, _inkBarPositioner: _MatInkBarPositioner);\n    /**\n     * Calculates the styles from the provided element in order to align the ink-bar to that element.\n     * Shows the ink bar if previously set as hidden.\n     * @param element\n     */\n    alignToElement(element: HTMLElement): void;\n    /** Shows the ink bar. */\n    show(): void;\n    /** Hides the ink bar. */\n    hide(): void;\n    /**\n     * Sets the proper styles to the ink bar element.\n     * @param element\n     */\n    private _setStyles;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tabs/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './tabs-module';\nexport * from './tab-group';\nexport { MatInkBar, _MatInkBarPositioner, _MAT_INK_BAR_POSITIONER } from './ink-bar';\nexport { MatTabBody, MatTabBodyOriginState, MatTabBodyPositionState, MatTabBodyPortal } from './tab-body';\nexport { MatTabHeader, ScrollDirection } from './tab-header';\nexport { MatTabLabelWrapper } from './tab-label-wrapper';\nexport { MatTab } from './tab';\nexport { MatTabLabel } from './tab-label';\nexport { MatTabNav, MatTabLink } from './tab-nav-bar/index';\nexport { MatTabContent } from './tab-content';\nexport * from './tabs-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tabs/tab-body.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit, ElementRef, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { TemplatePortal, CdkPortalOutlet, PortalHostDirective } from '@angular/cdk/portal';\nimport { Directionality, Direction } from '@angular/cdk/bidi';\nimport { Subject } from 'rxjs';\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport declare type MatTabBodyPositionState = 'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport declare type MatTabBodyOriginState = 'left' | 'right';\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\nexport declare class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n    private _host;\n    /** Subscription to events for when the tab body begins centering. */\n    private _centeringSub;\n    /** Subscription to events for when the tab body finishes leaving from center position. */\n    private _leavingSub;\n    constructor(componentFactoryResolver: ComponentFactoryResolver, viewContainerRef: ViewContainerRef, _host: MatTabBody);\n    /** Set initial visibility or set up subscription for changing visibility. */\n    ngOnInit(): void;\n    /** Clean up centering subscription. */\n    ngOnDestroy(): void;\n}\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\nexport declare class MatTabBody implements OnInit, OnDestroy {\n    private _elementRef;\n    private _dir;\n    /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n    private _positionIndex;\n    /** Subscription to the directionality change observable. */\n    private _dirChangeSubscription;\n    /** Tab body position state. Used by the animation trigger for the current state. */\n    _position: MatTabBodyPositionState;\n    /** Emits when an animation on the tab is complete. */\n    _translateTabComplete: Subject<AnimationEvent>;\n    /** Event emitted when the tab begins to animate towards the center as the active tab. */\n    readonly _onCentering: EventEmitter<number>;\n    /** Event emitted before the centering of the tab begins. */\n    readonly _beforeCentering: EventEmitter<boolean>;\n    /** Event emitted before the centering of the tab begins. */\n    readonly _afterLeavingCenter: EventEmitter<boolean>;\n    /** Event emitted when the tab completes its animation towards the center. */\n    readonly _onCentered: EventEmitter<void>;\n    /** The portal host inside of this container into which the tab body content will be loaded. */\n    _portalHost: PortalHostDirective;\n    /** The tab body content to display. */\n    _content: TemplatePortal;\n    /** Position that will be used when the tab is immediately becoming visible after creation. */\n    origin: number;\n    /** Duration for the tab's animation. */\n    animationDuration: string;\n    /** The shifted index position of the tab body, where zero represents the active center tab. */\n    position: number;\n    constructor(_elementRef: ElementRef<HTMLElement>, _dir: Directionality, \n    /**\n     * @breaking-change 8.0.0 changeDetectorRef to be made required.\n     */\n    changeDetectorRef?: ChangeDetectorRef);\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     */\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    _onTranslateTabStarted(event: AnimationEvent): void;\n    /** The text direction of the containing app. */\n    _getLayoutDirection(): Direction;\n    /** Whether the provided position state is considered center, regardless of origin. */\n    _isCenterPosition(position: MatTabBodyPositionState | string): boolean;\n    /** Computes the position state that will be used for the tab-body animation trigger. */\n    private _computePositionAnimationState;\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     */\n    private _computePositionFromOrigin;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tabs/tab-content.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplateRef } from '@angular/core';\n/** Decorates the `ng-template` tags and reads out the template from it. */\nexport declare class MatTabContent {\n    template: TemplateRef<any>;\n    constructor(template: TemplateRef<any>);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tabs/tab-group.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentChecked, AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList, InjectionToken } from '@angular/core';\nimport { CanColor, CanColorCtor, CanDisableRipple, CanDisableRippleCtor, ThemePalette } from '@angular/material/core';\nimport { MatTab } from './tab';\nimport { MatTabHeader } from './tab-header';\n/** A simple change event emitted on focus or selection changes. */\nexport declare class MatTabChangeEvent {\n    /** Index of the currently-selected tab. */\n    index: number;\n    /** Reference to the currently-selected tab. */\n    tab: MatTab;\n}\n/** Possible positions for the tab header. */\nexport declare type MatTabHeaderPosition = 'above' | 'below';\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    animationDuration?: string;\n}\n/** Injection token that can be used to provide the default options the tabs module. */\nexport declare const MAT_TABS_CONFIG: InjectionToken<{}>;\n/** @docs-private */\nexport declare class MatTabGroupBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase;\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\nexport declare class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit, AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n    private _changeDetectorRef;\n    _tabs: QueryList<MatTab>;\n    _tabBodyWrapper: ElementRef;\n    _tabHeader: MatTabHeader;\n    /** The tab index that should be selected after the content has been checked. */\n    private _indexToSelect;\n    /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n    private _tabBodyWrapperHeight;\n    /** Subscription to tabs being added/removed. */\n    private _tabsSubscription;\n    /** Subscription to changes in the tab labels. */\n    private _tabLabelSubscription;\n    /** Whether the tab group should grow to the size of the active tab. */\n    dynamicHeight: boolean;\n    private _dynamicHeight;\n    /** The index of the active tab. */\n    selectedIndex: number | null;\n    private _selectedIndex;\n    /** Position of the tab header. */\n    headerPosition: MatTabHeaderPosition;\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    animationDuration: string;\n    /** Background color of the tab group. */\n    backgroundColor: ThemePalette;\n    private _backgroundColor;\n    /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n    readonly selectedIndexChange: EventEmitter<number>;\n    /** Event emitted when focus has changed within a tab group. */\n    readonly focusChange: EventEmitter<MatTabChangeEvent>;\n    /** Event emitted when the body animation has completed */\n    readonly animationDone: EventEmitter<void>;\n    /** Event emitted when the tab selection has changed. */\n    readonly selectedTabChange: EventEmitter<MatTabChangeEvent>;\n    private _groupId;\n    constructor(elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef, defaultConfig?: MatTabsConfig);\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     */\n    ngAfterContentChecked(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Re-aligns the ink bar to the selected tab element. */\n    realignInkBar(): void;\n    _focusChanged(index: number): void;\n    private _createChangeEvent;\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n     * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     */\n    private _subscribeToTabLabels;\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\n    private _clampTabIndex;\n    /** Returns a unique id for each tab label element */\n    _getTabLabelId(i: number): string;\n    /** Returns a unique id for each tab content element */\n    _getTabContentId(i: number): string;\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     */\n    _setTabBodyWrapperHeight(tabHeight: number): void;\n    /** Removes the height of the tab body wrapper. */\n    _removeTabBodyWrapperHeight(): void;\n    /** Handle click events, setting new selected index if appropriate. */\n    _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number): void;\n    /** Retrieves the tabindex for the tab. */\n    _getTabIndex(tab: MatTab, idx: number): number | null;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tabs/tab-header.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { AfterContentChecked, AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, QueryList } from '@angular/core';\nimport { CanDisableRipple, CanDisableRippleCtor } from '@angular/material/core';\nimport { MatInkBar } from './ink-bar';\nimport { MatTabLabelWrapper } from './tab-label-wrapper';\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport declare type ScrollDirection = 'after' | 'before';\n/** @docs-private */\nexport declare class MatTabHeaderBase {\n}\nexport declare const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase;\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\nexport declare class MatTabHeader extends _MatTabHeaderMixinBase implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n    private _elementRef;\n    private _changeDetectorRef;\n    private _viewportRuler;\n    private _dir;\n    private _ngZone?;\n    _labelWrappers: QueryList<MatTabLabelWrapper>;\n    _inkBar: MatInkBar;\n    _tabListContainer: ElementRef;\n    _tabList: ElementRef;\n    /** The distance in pixels that the tab labels should be translated to the left. */\n    private _scrollDistance;\n    /** Whether the header should scroll to the selected index after the view has been checked. */\n    private _selectedIndexChanged;\n    /** Emits when the component is destroyed. */\n    private readonly _destroyed;\n    /** Whether the controls for pagination should be displayed */\n    _showPaginationControls: boolean;\n    /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n    _disableScrollAfter: boolean;\n    /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n    _disableScrollBefore: boolean;\n    /**\n     * The number of tab labels that are displayed on the header. When this changes, the header\n     * should re-evaluate the scroll position.\n     */\n    private _tabLabelCount;\n    /** Whether the scroll distance has changed and should be applied after the view is checked. */\n    private _scrollDistanceChanged;\n    /** Used to manage focus between the tabs. */\n    private _keyManager;\n    private _selectedIndex;\n    /** The index of the active tab. */\n    selectedIndex: number;\n    /** Event emitted when the option is selected. */\n    readonly selectFocusedIndex: EventEmitter<{}>;\n    /** Event emitted when a label is focused. */\n    readonly indexFocused: EventEmitter<{}>;\n    constructor(_elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef, _viewportRuler: ViewportRuler, _dir: Directionality, _ngZone?: NgZone | undefined);\n    ngAfterContentChecked(): void;\n    _handleKeydown(event: KeyboardEvent): void;\n    /**\n     * Aligns the ink bar to the selected tab on load.\n     */\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     */\n    _onContentChanges(): void;\n    /**\n     * Updates the view whether pagination should be enabled or not.\n     *\n     * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     */\n    updatePagination(): void;\n    /** Tracks which element has focus; used for keyboard navigation */\n    /** When the focus index is set, we must manually send focus to the correct label */\n    focusIndex: number;\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     */\n    _isValidIndex(index: number): boolean;\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     */\n    _setTabFocus(tabIndex: number): void;\n    /** The layout direction of the containing app. */\n    _getLayoutDirection(): Direction;\n    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n    _updateTabScrollPosition(): void;\n    /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n    scrollDistance: number;\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _scrollHeader(scrollDir: ScrollDirection): void;\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _scrollToLabel(labelIndex: number): void;\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _checkPaginationEnabled(): void;\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _checkScrollingControls(): void;\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _getMaxScrollDistance(): number;\n    /** Tells the ink-bar to align itself to the current label wrapper */\n    _alignInkBarToSelectedTab(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tabs/tab-label-wrapper.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef } from '@angular/core';\nimport { CanDisable, CanDisableCtor } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatTabLabelWrapperBase {\n}\nexport declare const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase;\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\nexport declare class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n    elementRef: ElementRef;\n    constructor(elementRef: ElementRef);\n    /** Sets focus on the wrapper element */\n    focus(): void;\n    getOffsetLeft(): number;\n    getOffsetWidth(): number;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tabs/tab-label.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkPortal } from '@angular/cdk/portal';\n/** Used to flag tab labels for use with the portal directive */\nexport declare class MatTabLabel extends CdkPortal {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tabs/tab-nav-bar/index.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './tab-nav-bar';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tabs/tab-nav-bar/tab-nav-bar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { AfterContentChecked, AfterContentInit, ChangeDetectorRef, ElementRef, NgZone, OnDestroy, QueryList } from '@angular/core';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, HasTabIndex, HasTabIndexCtor, RippleConfig, RippleGlobalOptions, RippleRenderer, RippleTarget, ThemePalette } from '@angular/material/core';\nimport { MatInkBar } from '../ink-bar';\nimport { FocusMonitor } from '@angular/cdk/a11y';\n/** @docs-private */\nexport declare class MatTabNavBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase;\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nexport declare class MatTabNav extends _MatTabNavMixinBase implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n    private _dir;\n    private _ngZone;\n    private _changeDetectorRef;\n    private _viewportRuler;\n    /** Subject that emits when the component has been destroyed. */\n    private readonly _onDestroy;\n    private _activeLinkChanged;\n    private _activeLinkElement;\n    _inkBar: MatInkBar;\n    /** Query list of all tab links of the tab navigation. */\n    _tabLinks: QueryList<MatTabLink>;\n    /** Background color of the tab nav. */\n    backgroundColor: ThemePalette;\n    private _backgroundColor;\n    constructor(elementRef: ElementRef, _dir: Directionality, _ngZone: NgZone, _changeDetectorRef: ChangeDetectorRef, _viewportRuler: ViewportRuler);\n    /**\n     * Notifies the component that the active link has been changed.\n     * @breaking-change 8.0.0 `element` parameter to be removed.\n     */\n    updateActiveLink(element: ElementRef): void;\n    ngAfterContentInit(): void;\n    /** Checks if the active link has been changed and, if so, will update the ink bar. */\n    ngAfterContentChecked(): void;\n    ngOnDestroy(): void;\n    /** Aligns the ink bar to the active link. */\n    _alignInkBar(): void;\n}\nexport declare class MatTabLinkBase {\n}\nexport declare const _MatTabLinkMixinBase: HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase;\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\nexport declare class MatTabLink extends _MatTabLinkMixinBase implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n    private _tabNavBar;\n    _elementRef: ElementRef;\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n     */\n    private _focusMonitor?;\n    /** Whether the tab link is active or not. */\n    protected _isActive: boolean;\n    /** Reference to the RippleRenderer for the tab-link. */\n    protected _tabLinkRipple: RippleRenderer;\n    /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n    private _ripplesGloballyDisabled;\n    /** Whether the link is active. */\n    active: boolean;\n    /**\n     * Ripple configuration for ripples that are launched on pointer down.\n     * @docs-private\n     */\n    rippleConfig: RippleConfig;\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    readonly rippleDisabled: boolean;\n    constructor(_tabNavBar: MatTabNav, _elementRef: ElementRef, ngZone: NgZone, platform: Platform, globalOptions: RippleGlobalOptions, tabIndex: string, \n    /**\n     * @deprecated\n     * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n     */\n    _focusMonitor?: FocusMonitor | undefined);\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tabs/tab.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { CanDisable, CanDisableCtor } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { MatTabLabel } from './tab-label';\n/** @docs-private */\nexport declare class MatTabBase {\n}\nexport declare const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase;\nexport declare class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n    private _viewContainerRef;\n    /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n    templateLabel: MatTabLabel;\n    /**\n     * Template provided in the tab content that will be used if present, used to enable lazy-loading\n     */\n    _explicitContent: TemplateRef<any>;\n    /** Template inside the MatTab view that contains an `<ng-content>`. */\n    _implicitContent: TemplateRef<any>;\n    /** Plain text label for the tab, used when there is no template label. */\n    textLabel: string;\n    /** Aria label for the tab. */\n    ariaLabel: string;\n    /**\n     * Reference to the element that the tab is labelled by.\n     * Will be cleared if `aria-label` is set at the same time.\n     */\n    ariaLabelledby: string;\n    /** Portal that will be the hosted content of the tab */\n    private _contentPortal;\n    /** @docs-private */\n    readonly content: TemplatePortal | null;\n    /** Emits whenever the internal state of the tab changes. */\n    readonly _stateChanges: Subject<void>;\n    /**\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\n     * represents the right.\n     */\n    position: number | null;\n    /**\n     * The initial relatively index origin of the tab if it was created and selected after there\n     * was already a selected tab. Provides context of what position the tab should originate from.\n     */\n    origin: number | null;\n    /**\n     * Whether the tab is currently active.\n     */\n    isActive: boolean;\n    constructor(_viewContainerRef: ViewContainerRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tabs/tabs-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport declare const matTabsAnimations: {\n    readonly translateTab: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tabs/tabs-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatTabsModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/toolbar/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/toolbar/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './toolbar-module';\nexport * from './toolbar';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/toolbar/toolbar-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatToolbarModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/toolbar/toolbar.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { AfterViewInit, ElementRef, QueryList } from '@angular/core';\nimport { CanColor, CanColorCtor } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatToolbarBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase;\nexport declare class MatToolbarRow {\n}\nexport declare class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n    private _platform;\n    private _document;\n    /** Reference to all toolbar row elements that have been projected. */\n    _toolbarRows: QueryList<MatToolbarRow>;\n    constructor(elementRef: ElementRef, _platform: Platform, document?: any);\n    ngAfterViewInit(): void;\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     */\n    private _checkToolbarMixedModes;\n}\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport declare function throwToolbarMixedModesError(): void;\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tooltip/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tooltip/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './tooltip-module';\nexport * from './tooltip';\nexport * from './tooltip-animations';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tooltip/tooltip-animations.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationTriggerMetadata } from '@angular/animations';\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport declare const matTooltipAnimations: {\n    readonly tooltipState: AnimationTriggerMetadata;\n};\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tooltip/tooltip-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatTooltipModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tooltip/tooltip.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationEvent } from '@angular/animations';\nimport { AriaDescriber, FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { HammerLoader } from '@angular/platform-browser';\nimport { OriginConnectionPosition, Overlay, OverlayConnectionPosition, OverlayRef, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { Platform } from '@angular/cdk/platform';\nimport { ChangeDetectorRef, ElementRef, InjectionToken, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { Observable } from 'rxjs';\nexport declare type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n/** Time in ms to throttle repositioning after scroll events. */\nexport declare const SCROLL_THROTTLE_MS = 20;\n/** CSS class that will be attached to the overlay panel. */\nexport declare const TOOLTIP_PANEL_CLASS = \"mat-tooltip-panel\";\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport declare function getMatTooltipInvalidPositionError(position: string): Error;\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport declare const MAT_TOOLTIP_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY;\n};\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n    showDelay: number;\n    hideDelay: number;\n    touchendHideDelay: number;\n}\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport declare const MAT_TOOLTIP_DEFAULT_OPTIONS: InjectionToken<MatTooltipDefaultOptions>;\n/** @docs-private */\nexport declare function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions;\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nexport declare class MatTooltip implements OnDestroy {\n    private _overlay;\n    private _elementRef;\n    private _scrollDispatcher;\n    private _viewContainerRef;\n    private _ngZone;\n    private _ariaDescriber;\n    private _focusMonitor;\n    private _dir;\n    private _defaultOptions;\n    _overlayRef: OverlayRef | null;\n    _tooltipInstance: TooltipComponent | null;\n    private _portal;\n    private _position;\n    private _disabled;\n    private _tooltipClass;\n    private _scrollStrategy;\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    position: TooltipPosition;\n    /** Disables the display of the tooltip. */\n    disabled: boolean;\n    /** The default delay in ms before showing the tooltip after show is called */\n    showDelay: number;\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    hideDelay: number;\n    private _message;\n    /** The message to be displayed in the tooltip */\n    message: string;\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    tooltipClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    private _manualListeners;\n    /** Emits when the component is destroyed. */\n    private readonly _destroyed;\n    constructor(_overlay: Overlay, _elementRef: ElementRef<HTMLElement>, _scrollDispatcher: ScrollDispatcher, _viewContainerRef: ViewContainerRef, _ngZone: NgZone, platform: Platform, _ariaDescriber: AriaDescriber, _focusMonitor: FocusMonitor, scrollStrategy: any, _dir: Directionality, _defaultOptions: MatTooltipDefaultOptions, hammerLoader?: HammerLoader);\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy(): void;\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay?: number): void;\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay?: number): void;\n    /** Shows/hides the tooltip */\n    toggle(): void;\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible(): boolean;\n    /** Handles the keydown events on the host element. */\n    _handleKeydown(e: KeyboardEvent): void;\n    /** Handles the touchend events on the host element. */\n    _handleTouchend(): void;\n    /** Create the overlay config and position strategy */\n    private _createOverlay;\n    /** Detaches the currently-attached tooltip. */\n    private _detach;\n    /** Updates the position of the current tooltip. */\n    private _updatePosition;\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin(): {\n        main: OriginConnectionPosition;\n        fallback: OriginConnectionPosition;\n    };\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition(): {\n        main: OverlayConnectionPosition;\n        fallback: OverlayConnectionPosition;\n    };\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    private _updateTooltipMessage;\n    /** Updates the tooltip class */\n    private _setTooltipClass;\n    /** Inverts an overlay position. */\n    private _invertPosition;\n}\nexport declare type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nexport declare class TooltipComponent {\n    private _changeDetectorRef;\n    private _breakpointObserver;\n    /** Message to display in the tooltip */\n    message: string;\n    /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n    tooltipClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    /** The timeout ID of any current timer set to show the tooltip */\n    _showTimeoutId: number | null;\n    /** The timeout ID of any current timer set to hide the tooltip */\n    _hideTimeoutId: number | null;\n    /** Property watched by the animation framework to show or hide the tooltip */\n    _visibility: TooltipVisibility;\n    /** Whether interactions on the page should close the tooltip */\n    private _closeOnInteraction;\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly _onHide;\n    /** Stream that emits whether the user has a handset-sized display.  */\n    _isHandset: Observable<BreakpointState>;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _breakpointObserver: BreakpointObserver);\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay: number): void;\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay: number): void;\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void>;\n    /** Whether the tooltip is being displayed. */\n    isVisible(): boolean;\n    _animationStart(): void;\n    _animationDone(event: AnimationEvent): void;\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction(): void;\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tree/data-source/flat-data-source.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport { FlatTreeControl, TreeControl } from '@angular/cdk/tree';\nimport { BehaviorSubject, Observable } from 'rxjs';\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport declare class MatTreeFlattener<T, F> {\n    transformFunction: (node: T, level: number) => F;\n    getLevel: (node: F) => number;\n    isExpandable: (node: F) => boolean;\n    getChildren: (node: T) => Observable<T[]> | T[];\n    constructor(transformFunction: (node: T, level: number) => F, getLevel: (node: F) => number, isExpandable: (node: F) => boolean, getChildren: (node: T) => Observable<T[]> | T[]);\n    _flattenNode(node: T, level: number, resultNodes: F[], parentMap: boolean[]): F[];\n    _flattenChildren(children: T[], level: number, resultNodes: F[], parentMap: boolean[]): void;\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[];\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[];\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport declare class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n    private treeControl;\n    private treeFlattener;\n    _flattenedData: BehaviorSubject<F[]>;\n    _expandedData: BehaviorSubject<F[]>;\n    _data: BehaviorSubject<T[]>;\n    data: T[];\n    constructor(treeControl: FlatTreeControl<F>, treeFlattener: MatTreeFlattener<T, F>, initialData?: T[]);\n    connect(collectionViewer: CollectionViewer): Observable<F[]>;\n    disconnect(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tree/data-source/nested-data-source.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, Observable } from 'rxjs';\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport declare class MatTreeNestedDataSource<T> extends DataSource<T> {\n    _data: BehaviorSubject<T[]>;\n    /**\n     * Data for the nested tree\n     */\n    data: T[];\n    connect(collectionViewer: CollectionViewer): Observable<T[]>;\n    disconnect(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tree/index.d.ts",
    "content": "/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tree/node.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef } from '@angular/cdk/tree';\nimport { AfterContentInit, ElementRef, IterableDiffers, OnDestroy, QueryList } from '@angular/core';\nimport { CanDisable, CanDisableCtor, HasTabIndex, HasTabIndexCtor } from '@angular/material/core';\nimport { MatTreeNodeOutlet } from './outlet';\nexport declare const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode;\nexport declare const _MatNestedTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode;\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nexport declare class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements CanDisable, HasTabIndex {\n    protected _elementRef: ElementRef<HTMLElement>;\n    protected _tree: CdkTree<T>;\n    role: 'treeitem' | 'group';\n    constructor(_elementRef: ElementRef<HTMLElement>, _tree: CdkTree<T>, tabIndex: string);\n}\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\nexport declare class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    data: T;\n}\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nexport declare class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n    protected _elementRef: ElementRef<HTMLElement>;\n    protected _tree: CdkTree<T>;\n    protected _differs: IterableDiffers;\n    node: T;\n    nodeOutlet: QueryList<MatTreeNodeOutlet>;\n    constructor(_elementRef: ElementRef<HTMLElement>, _tree: CdkTree<T>, _differs: IterableDiffers, tabIndex: string);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tree/outlet.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTreeNodeOutlet } from '@angular/cdk/tree';\nimport { ViewContainerRef } from '@angular/core';\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nexport declare class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n    viewContainer: ViewContainerRef;\n    constructor(viewContainer: ViewContainerRef);\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tree/padding.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTreeNodePadding } from '@angular/cdk/tree';\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nexport declare class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    level: number;\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n    indent: number;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tree/public-api.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './node';\nexport * from './padding';\nexport * from './tree';\nexport * from './tree-module';\nexport * from './toggle';\nexport * from './outlet';\nexport * from './data-source/flat-data-source';\nexport * from './data-source/nested-data-source';\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tree/toggle.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTreeNodeToggle } from '@angular/cdk/tree';\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\nexport declare class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n    recursive: boolean;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tree/tree-module.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport declare class MatTreeModule {\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/tree/tree.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTree } from '@angular/cdk/tree';\nimport { MatTreeNodeOutlet } from './outlet';\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nexport declare class MatTree<T> extends CdkTree<T> {\n    _nodeOutlet: MatTreeNodeOutlet;\n}\n"
  },
  {
    "path": "node_modules/@angular/material/typings/version.d.ts",
    "content": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Version } from '@angular/core';\n/** Current version of Angular Material. */\nexport declare const VERSION: Version;\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/bindCallback.d.ts",
    "content": "import 'rxjs-compat/add/observable/bindCallback';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/bindNodeCallback.d.ts",
    "content": "import 'rxjs-compat/add/observable/bindNodeCallback';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/combineLatest.d.ts",
    "content": "import 'rxjs-compat/add/observable/combineLatest';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/concat.d.ts",
    "content": "import 'rxjs-compat/add/observable/concat';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/defer.d.ts",
    "content": "import 'rxjs-compat/add/observable/defer';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/dom/ajax.d.ts",
    "content": "import 'rxjs-compat/add/observable/dom/ajax';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/dom/webSocket.d.ts",
    "content": "import 'rxjs-compat/add/observable/dom/webSocket';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/empty.d.ts",
    "content": "import 'rxjs-compat/add/observable/empty';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/forkJoin.d.ts",
    "content": "import 'rxjs-compat/add/observable/forkJoin';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/from.d.ts",
    "content": "import 'rxjs-compat/add/observable/from';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/fromEvent.d.ts",
    "content": "import 'rxjs-compat/add/observable/fromEvent';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/fromEventPattern.d.ts",
    "content": "import 'rxjs-compat/add/observable/fromEventPattern';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/fromPromise.d.ts",
    "content": "import 'rxjs-compat/add/observable/fromPromise';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/generate.d.ts",
    "content": "import 'rxjs-compat/add/observable/generate';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/if.d.ts",
    "content": "import 'rxjs-compat/add/observable/if';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/interval.d.ts",
    "content": "import 'rxjs-compat/add/observable/interval';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/merge.d.ts",
    "content": "import 'rxjs-compat/add/observable/merge';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/never.d.ts",
    "content": "import 'rxjs-compat/add/observable/never';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/of.d.ts",
    "content": "import 'rxjs-compat/add/observable/of';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/onErrorResumeNext.d.ts",
    "content": "import 'rxjs-compat/add/observable/onErrorResumeNext';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/pairs.d.ts",
    "content": "import 'rxjs-compat/add/observable/pairs';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/race.d.ts",
    "content": "import 'rxjs-compat/add/observable/race';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/range.d.ts",
    "content": "import 'rxjs-compat/add/observable/range';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/throw.d.ts",
    "content": "import 'rxjs-compat/add/observable/throw';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/timer.d.ts",
    "content": "import 'rxjs-compat/add/observable/timer';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/using.d.ts",
    "content": "import 'rxjs-compat/add/observable/using';\n"
  },
  {
    "path": "node_modules/rxjs/add/observable/zip.d.ts",
    "content": "import 'rxjs-compat/add/observable/zip';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/audit.d.ts",
    "content": "import 'rxjs-compat/add/operator/audit';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/auditTime.d.ts",
    "content": "import 'rxjs-compat/add/operator/auditTime';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/buffer.d.ts",
    "content": "import 'rxjs-compat/add/operator/buffer';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/bufferCount.d.ts",
    "content": "import 'rxjs-compat/add/operator/bufferCount';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/bufferTime.d.ts",
    "content": "import 'rxjs-compat/add/operator/bufferTime';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/bufferToggle.d.ts",
    "content": "import 'rxjs-compat/add/operator/bufferToggle';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/bufferWhen.d.ts",
    "content": "import 'rxjs-compat/add/operator/bufferWhen';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/catch.d.ts",
    "content": "import 'rxjs-compat/add/operator/catch';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/combineAll.d.ts",
    "content": "import 'rxjs-compat/add/operator/combineAll';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/combineLatest.d.ts",
    "content": "import 'rxjs-compat/add/operator/combineLatest';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/concat.d.ts",
    "content": "import 'rxjs-compat/add/operator/concat';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/concatAll.d.ts",
    "content": "import 'rxjs-compat/add/operator/concatAll';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/concatMap.d.ts",
    "content": "import 'rxjs-compat/add/operator/concatMap';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/concatMapTo.d.ts",
    "content": "import 'rxjs-compat/add/operator/concatMapTo';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/count.d.ts",
    "content": "import 'rxjs-compat/add/operator/count';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/debounce.d.ts",
    "content": "import 'rxjs-compat/add/operator/debounce';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/debounceTime.d.ts",
    "content": "import 'rxjs-compat/add/operator/debounceTime';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/defaultIfEmpty.d.ts",
    "content": "import 'rxjs-compat/add/operator/defaultIfEmpty';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/delay.d.ts",
    "content": "import 'rxjs-compat/add/operator/delay';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/delayWhen.d.ts",
    "content": "import 'rxjs-compat/add/operator/delayWhen';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/dematerialize.d.ts",
    "content": "import 'rxjs-compat/add/operator/dematerialize';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/distinct.d.ts",
    "content": "import 'rxjs-compat/add/operator/distinct';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/distinctUntilChanged.d.ts",
    "content": "import 'rxjs-compat/add/operator/distinctUntilChanged';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/distinctUntilKeyChanged.d.ts",
    "content": "import 'rxjs-compat/add/operator/distinctUntilKeyChanged';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/do.d.ts",
    "content": "import 'rxjs-compat/add/operator/do';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/elementAt.d.ts",
    "content": "import 'rxjs-compat/add/operator/elementAt';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/every.d.ts",
    "content": "import 'rxjs-compat/add/operator/every';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/exhaust.d.ts",
    "content": "import 'rxjs-compat/add/operator/exhaust';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/exhaustMap.d.ts",
    "content": "import 'rxjs-compat/add/operator/exhaustMap';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/expand.d.ts",
    "content": "import 'rxjs-compat/add/operator/expand';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/filter.d.ts",
    "content": "import 'rxjs-compat/add/operator/filter';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/finally.d.ts",
    "content": "import 'rxjs-compat/add/operator/finally';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/find.d.ts",
    "content": "import 'rxjs-compat/add/operator/find';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/findIndex.d.ts",
    "content": "import 'rxjs-compat/add/operator/findIndex';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/first.d.ts",
    "content": "import 'rxjs-compat/add/operator/first';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/groupBy.d.ts",
    "content": "import 'rxjs-compat/add/operator/groupBy';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/ignoreElements.d.ts",
    "content": "import 'rxjs-compat/add/operator/ignoreElements';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/isEmpty.d.ts",
    "content": "import 'rxjs-compat/add/operator/isEmpty';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/last.d.ts",
    "content": "import 'rxjs-compat/add/operator/last';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/let.d.ts",
    "content": "import 'rxjs-compat/add/operator/let';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/map.d.ts",
    "content": "import 'rxjs-compat/add/operator/map';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/mapTo.d.ts",
    "content": "import 'rxjs-compat/add/operator/mapTo';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/materialize.d.ts",
    "content": "import 'rxjs-compat/add/operator/materialize';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/max.d.ts",
    "content": "import 'rxjs-compat/add/operator/max';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/merge.d.ts",
    "content": "import 'rxjs-compat/add/operator/merge';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/mergeAll.d.ts",
    "content": "import 'rxjs-compat/add/operator/mergeAll';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/mergeMap.d.ts",
    "content": "import 'rxjs-compat/add/operator/mergeMap';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/mergeMapTo.d.ts",
    "content": "import 'rxjs-compat/add/operator/mergeMapTo';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/mergeScan.d.ts",
    "content": "import 'rxjs-compat/add/operator/mergeScan';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/min.d.ts",
    "content": "import 'rxjs-compat/add/operator/min';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/multicast.d.ts",
    "content": "import 'rxjs-compat/add/operator/multicast';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/observeOn.d.ts",
    "content": "import 'rxjs-compat/add/operator/observeOn';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/onErrorResumeNext.d.ts",
    "content": "import 'rxjs-compat/add/operator/onErrorResumeNext';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/pairwise.d.ts",
    "content": "import 'rxjs-compat/add/operator/pairwise';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/partition.d.ts",
    "content": "import 'rxjs-compat/add/operator/partition';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/pluck.d.ts",
    "content": "import 'rxjs-compat/add/operator/pluck';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/publish.d.ts",
    "content": "import 'rxjs-compat/add/operator/publish';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/publishBehavior.d.ts",
    "content": "import 'rxjs-compat/add/operator/publishBehavior';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/publishLast.d.ts",
    "content": "import 'rxjs-compat/add/operator/publishLast';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/publishReplay.d.ts",
    "content": "import 'rxjs-compat/add/operator/publishReplay';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/race.d.ts",
    "content": "import 'rxjs-compat/add/operator/race';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/reduce.d.ts",
    "content": "import 'rxjs-compat/add/operator/reduce';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/repeat.d.ts",
    "content": "import 'rxjs-compat/add/operator/repeat';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/repeatWhen.d.ts",
    "content": "import 'rxjs-compat/add/operator/repeatWhen';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/retry.d.ts",
    "content": "import 'rxjs-compat/add/operator/retry';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/retryWhen.d.ts",
    "content": "import 'rxjs-compat/add/operator/retryWhen';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/sample.d.ts",
    "content": "import 'rxjs-compat/add/operator/sample';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/sampleTime.d.ts",
    "content": "import 'rxjs-compat/add/operator/sampleTime';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/scan.d.ts",
    "content": "import 'rxjs-compat/add/operator/scan';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/sequenceEqual.d.ts",
    "content": "import 'rxjs-compat/add/operator/sequenceEqual';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/share.d.ts",
    "content": "import 'rxjs-compat/add/operator/share';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/shareReplay.d.ts",
    "content": "import 'rxjs-compat/add/operator/shareReplay';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/single.d.ts",
    "content": "import 'rxjs-compat/add/operator/single';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/skip.d.ts",
    "content": "import 'rxjs-compat/add/operator/skip';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/skipLast.d.ts",
    "content": "import 'rxjs-compat/add/operator/skipLast';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/skipUntil.d.ts",
    "content": "import 'rxjs-compat/add/operator/skipUntil';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/skipWhile.d.ts",
    "content": "import 'rxjs-compat/add/operator/skipWhile';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/startWith.d.ts",
    "content": "import 'rxjs-compat/add/operator/startWith';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/subscribeOn.d.ts",
    "content": "import 'rxjs-compat/add/operator/subscribeOn';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/switch.d.ts",
    "content": "import 'rxjs-compat/add/operator/switch';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/switchMap.d.ts",
    "content": "import 'rxjs-compat/add/operator/switchMap';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/switchMapTo.d.ts",
    "content": "import 'rxjs-compat/add/operator/switchMapTo';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/take.d.ts",
    "content": "import 'rxjs-compat/add/operator/take';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/takeLast.d.ts",
    "content": "import 'rxjs-compat/add/operator/takeLast';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/takeUntil.d.ts",
    "content": "import 'rxjs-compat/add/operator/takeUntil';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/takeWhile.d.ts",
    "content": "import 'rxjs-compat/add/operator/takeWhile';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/throttle.d.ts",
    "content": "import 'rxjs-compat/add/operator/throttle';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/throttleTime.d.ts",
    "content": "import 'rxjs-compat/add/operator/throttleTime';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/timeInterval.d.ts",
    "content": "import 'rxjs-compat/add/operator/timeInterval';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/timeout.d.ts",
    "content": "import 'rxjs-compat/add/operator/timeout';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/timeoutWith.d.ts",
    "content": "import 'rxjs-compat/add/operator/timeoutWith';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/timestamp.d.ts",
    "content": "import 'rxjs-compat/add/operator/timestamp';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/toArray.d.ts",
    "content": "import 'rxjs-compat/add/operator/toArray';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/toPromise.d.ts",
    "content": "import 'rxjs-compat/add/operator/toPromise';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/window.d.ts",
    "content": "import 'rxjs-compat/add/operator/window';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/windowCount.d.ts",
    "content": "import 'rxjs-compat/add/operator/windowCount';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/windowTime.d.ts",
    "content": "import 'rxjs-compat/add/operator/windowTime';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/windowToggle.d.ts",
    "content": "import 'rxjs-compat/add/operator/windowToggle';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/windowWhen.d.ts",
    "content": "import 'rxjs-compat/add/operator/windowWhen';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/withLatestFrom.d.ts",
    "content": "import 'rxjs-compat/add/operator/withLatestFrom';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/zip.d.ts",
    "content": "import 'rxjs-compat/add/operator/zip';\n"
  },
  {
    "path": "node_modules/rxjs/add/operator/zipAll.d.ts",
    "content": "import 'rxjs-compat/add/operator/zipAll';\n"
  },
  {
    "path": "node_modules/rxjs/ajax/index.d.ts",
    "content": "export { ajax } from '../internal/observable/dom/ajax';\nexport { AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError } from '../internal/observable/dom/AjaxObservable';\n"
  },
  {
    "path": "node_modules/rxjs/AsyncSubject.d.ts",
    "content": "export * from 'rxjs-compat/AsyncSubject';\n"
  },
  {
    "path": "node_modules/rxjs/BehaviorSubject.d.ts",
    "content": "export * from 'rxjs-compat/BehaviorSubject';\n"
  },
  {
    "path": "node_modules/rxjs/index.d.ts",
    "content": "export { Observable } from './internal/Observable';\nexport { ConnectableObservable } from './internal/observable/ConnectableObservable';\nexport { GroupedObservable } from './internal/operators/groupBy';\nexport { Operator } from './internal/Operator';\nexport { observable } from './internal/symbol/observable';\nexport { Subject } from './internal/Subject';\nexport { BehaviorSubject } from './internal/BehaviorSubject';\nexport { ReplaySubject } from './internal/ReplaySubject';\nexport { AsyncSubject } from './internal/AsyncSubject';\nexport { asap as asapScheduler } from './internal/scheduler/asap';\nexport { async as asyncScheduler } from './internal/scheduler/async';\nexport { queue as queueScheduler } from './internal/scheduler/queue';\nexport { animationFrame as animationFrameScheduler } from './internal/scheduler/animationFrame';\nexport { VirtualTimeScheduler, VirtualAction } from './internal/scheduler/VirtualTimeScheduler';\nexport { Scheduler } from './internal/Scheduler';\nexport { Subscription } from './internal/Subscription';\nexport { Subscriber } from './internal/Subscriber';\nexport { Notification } from './internal/Notification';\nexport { pipe } from './internal/util/pipe';\nexport { noop } from './internal/util/noop';\nexport { identity } from './internal/util/identity';\nexport { isObservable } from './internal/util/isObservable';\nexport { ArgumentOutOfRangeError } from './internal/util/ArgumentOutOfRangeError';\nexport { EmptyError } from './internal/util/EmptyError';\nexport { ObjectUnsubscribedError } from './internal/util/ObjectUnsubscribedError';\nexport { UnsubscriptionError } from './internal/util/UnsubscriptionError';\nexport { TimeoutError } from './internal/util/TimeoutError';\nexport { bindCallback } from './internal/observable/bindCallback';\nexport { bindNodeCallback } from './internal/observable/bindNodeCallback';\nexport { combineLatest } from './internal/observable/combineLatest';\nexport { concat } from './internal/observable/concat';\nexport { defer } from './internal/observable/defer';\nexport { empty } from './internal/observable/empty';\nexport { forkJoin } from './internal/observable/forkJoin';\nexport { from } from './internal/observable/from';\nexport { fromEvent } from './internal/observable/fromEvent';\nexport { fromEventPattern } from './internal/observable/fromEventPattern';\nexport { generate } from './internal/observable/generate';\nexport { iif } from './internal/observable/iif';\nexport { interval } from './internal/observable/interval';\nexport { merge } from './internal/observable/merge';\nexport { never } from './internal/observable/never';\nexport { of } from './internal/observable/of';\nexport { onErrorResumeNext } from './internal/observable/onErrorResumeNext';\nexport { pairs } from './internal/observable/pairs';\nexport { race } from './internal/observable/race';\nexport { range } from './internal/observable/range';\nexport { throwError } from './internal/observable/throwError';\nexport { timer } from './internal/observable/timer';\nexport { using } from './internal/observable/using';\nexport { zip } from './internal/observable/zip';\nexport { EMPTY } from './internal/observable/empty';\nexport { NEVER } from './internal/observable/never';\nexport * from './internal/types';\nexport { config } from './internal/config';\n"
  },
  {
    "path": "node_modules/rxjs/InnerSubscriber.d.ts",
    "content": "export * from 'rxjs-compat/InnerSubscriber';\n"
  },
  {
    "path": "node_modules/rxjs/interfaces.d.ts",
    "content": "export * from 'rxjs-compat/interfaces';\n"
  },
  {
    "path": "node_modules/rxjs/internal-compatibility/index.d.ts",
    "content": "export { config } from '../internal/config';\nexport { InnerSubscriber } from '../internal/InnerSubscriber';\nexport { OuterSubscriber } from '../internal/OuterSubscriber';\nexport { Scheduler } from '../internal/Scheduler';\nexport { AnonymousSubject } from '../internal/Subject';\nexport { SubjectSubscription } from '../internal/SubjectSubscription';\nexport { Subscriber } from '../internal/Subscriber';\nexport { fromPromise } from '../internal/observable/fromPromise';\nexport { fromIterable } from '../internal/observable/fromIterable';\nexport { ajax } from '../internal/observable/dom/ajax';\nexport { webSocket } from '../internal/observable/dom/webSocket';\nexport { AjaxRequest, AjaxCreationMethod, ajaxGet, ajaxPost, ajaxDelete, ajaxPut, ajaxPatch, ajaxGetJSON, AjaxObservable, AjaxSubscriber, AjaxResponse, AjaxError, AjaxTimeoutError } from '../internal/observable/dom/AjaxObservable';\nexport { WebSocketSubjectConfig, WebSocketSubject } from '../internal/observable/dom/WebSocketSubject';\nexport { CombineLatestOperator } from '../internal/observable/combineLatest';\nexport { EventTargetLike } from '../internal/observable/fromEvent';\nexport { ConditionFunc, IterateFunc, ResultFunc, GenerateBaseOptions, GenerateOptions } from '../internal/observable/generate';\nexport { dispatch } from '../internal/observable/range';\nexport { SubscribeOnObservable } from '../internal/observable/SubscribeOnObservable';\nexport { Timestamp } from '../internal/operators/timestamp';\nexport { TimeInterval } from '../internal/operators/timeInterval';\nexport { GroupedObservable } from '../internal/operators/groupBy';\nexport { ThrottleConfig, defaultThrottleConfig } from '../internal/operators/throttle';\nexport { rxSubscriber } from '../internal/symbol/rxSubscriber';\nexport { iterator } from '../internal/symbol/iterator';\nexport { observable } from '../internal/symbol/observable';\nexport { ArgumentOutOfRangeError } from '../internal/util/ArgumentOutOfRangeError';\nexport { EmptyError } from '../internal/util/EmptyError';\nexport { Immediate } from '../internal/util/Immediate';\nexport { ObjectUnsubscribedError } from '../internal/util/ObjectUnsubscribedError';\nexport { TimeoutError } from '../internal/util/TimeoutError';\nexport { UnsubscriptionError } from '../internal/util/UnsubscriptionError';\nexport { applyMixins } from '../internal/util/applyMixins';\nexport { errorObject } from '../internal/util/errorObject';\nexport { hostReportError } from '../internal/util/hostReportError';\nexport { identity } from '../internal/util/identity';\nexport { isArray } from '../internal/util/isArray';\nexport { isArrayLike } from '../internal/util/isArrayLike';\nexport { isDate } from '../internal/util/isDate';\nexport { isFunction } from '../internal/util/isFunction';\nexport { isIterable } from '../internal/util/isIterable';\nexport { isNumeric } from '../internal/util/isNumeric';\nexport { isObject } from '../internal/util/isObject';\nexport { isInteropObservable as isObservable } from '../internal/util/isInteropObservable';\nexport { isPromise } from '../internal/util/isPromise';\nexport { isScheduler } from '../internal/util/isScheduler';\nexport { noop } from '../internal/util/noop';\nexport { not } from '../internal/util/not';\nexport { pipe } from '../internal/util/pipe';\nexport { root } from '../internal/util/root';\nexport { subscribeTo } from '../internal/util/subscribeTo';\nexport { subscribeToArray } from '../internal/util/subscribeToArray';\nexport { subscribeToIterable } from '../internal/util/subscribeToIterable';\nexport { subscribeToObservable } from '../internal/util/subscribeToObservable';\nexport { subscribeToPromise } from '../internal/util/subscribeToPromise';\nexport { subscribeToResult } from '../internal/util/subscribeToResult';\nexport { toSubscriber } from '../internal/util/toSubscriber';\nexport { tryCatch } from '../internal/util/tryCatch';\n"
  },
  {
    "path": "node_modules/rxjs/internal/AsyncSubject.d.ts",
    "content": "import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n/**\n * A variant of Subject that only emits a value when it completes. It will emit\n * its latest value to all its observers on completion.\n *\n * @class AsyncSubject<T>\n */\nexport declare class AsyncSubject<T> extends Subject<T> {\n    private value;\n    private hasNext;\n    private hasCompleted;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<any>): Subscription;\n    next(value: T): void;\n    error(error: any): void;\n    complete(): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/BehaviorSubject.d.ts",
    "content": "import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n/**\n * A variant of Subject that requires an initial value and emits its current\n * value whenever it is subscribed to.\n *\n * @class BehaviorSubject<T>\n */\nexport declare class BehaviorSubject<T> extends Subject<T> {\n    private _value;\n    constructor(_value: T);\n    readonly value: T;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<T>): Subscription;\n    getValue(): T;\n    next(value: T): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/config.d.ts",
    "content": "/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport declare const config: {\n    /**\n     * The promise constructor used by default for methods such as\n     * {@link toPromise} and {@link forEach}\n     */\n    Promise: PromiseConstructorLike;\n    /**\n     * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n     * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n     * call in a try/catch block. It also enables producer interference, a nasty bug\n     * where a multicast can be broken for all observers by a downstream consumer with\n     * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n     * FOR MIGRATION REASONS.\n     */\n    useDeprecatedSynchronousErrorHandling: boolean;\n};\n"
  },
  {
    "path": "node_modules/rxjs/internal/InnerSubscriber.d.ts",
    "content": "import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class InnerSubscriber<T, R> extends Subscriber<R> {\n    private parent;\n    outerValue: T;\n    outerIndex: number;\n    private index;\n    constructor(parent: OuterSubscriber<T, R>, outerValue: T, outerIndex: number);\n    protected _next(value: R): void;\n    protected _error(error: any): void;\n    protected _complete(): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/Notification.d.ts",
    "content": "import { PartialObserver } from './types';\nimport { Observable } from './Observable';\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport declare class Notification<T> {\n    kind: string;\n    value?: T;\n    error?: any;\n    hasValue: boolean;\n    constructor(kind: string, value?: T, error?: any);\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    observe(observer: PartialObserver<T>): any;\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any;\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void): any;\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    toObservable(): Observable<T>;\n    private static completeNotification;\n    private static undefinedValueNotification;\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     * @nocollapse\n     */\n    static createNext<T>(value: T): Notification<T>;\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     * @nocollapse\n     */\n    static createError<T>(err?: any): Notification<T>;\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     * @nocollapse\n     */\n    static createComplete(): Notification<any>;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/Observable.d.ts",
    "content": "import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport declare class Observable<T> implements Subscribable<T> {\n    /** Internal implementation detail, do not use directly. */\n    _isScalar: boolean;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    source: Observable<any>;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    operator: Operator<any, T>;\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic);\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     * @nocollapse\n     */\n    static create: Function;\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    lift<R>(operator: Operator<T, R>): Observable<R>;\n    subscribe(observer?: PartialObserver<T>): Subscription;\n    subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _trySubscribe(sink: Subscriber<T>): TeardownLogic;\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void>;\n    /** @internal This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<any>): TeardownLogic;\n    /**\n     * @nocollapse\n     * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n     */\n    static if: typeof iif;\n    /**\n     * @nocollapse\n     * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n     */\n    static throw: typeof throwError;\n    pipe(): Observable<T>;\n    pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n    pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n    pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n    pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n    pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n    pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n    pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n    pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n    pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n    pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>, ...operations: OperatorFunction<any, any>[]): Observable<{}>;\n    toPromise<T>(this: Observable<T>): Promise<T>;\n    toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n    toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/bindCallback.d.ts",
    "content": "import { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\n/** @deprecated resultSelector is no longer supported, use a mapping function. */\nexport declare function bindCallback(callbackFunc: Function, resultSelector: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\nexport declare function bindCallback<R1, R2, R3, R4>(callbackFunc: (callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): () => Observable<any[]>;\nexport declare function bindCallback<R1, R2, R3>(callbackFunc: (callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2, R3]>;\nexport declare function bindCallback<R1, R2>(callbackFunc: (callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2]>;\nexport declare function bindCallback<R1>(callbackFunc: (callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): () => Observable<R1>;\nexport declare function bindCallback(callbackFunc: (callback: () => any) => any, scheduler?: SchedulerLike): () => Observable<void>;\nexport declare function bindCallback<A1, R1, R2, R3, R4>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<any[]>;\nexport declare function bindCallback<A1, R1, R2, R3>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2, R3]>;\nexport declare function bindCallback<A1, R1, R2>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2]>;\nexport declare function bindCallback<A1, R1>(callbackFunc: (arg1: A1, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<R1>;\nexport declare function bindCallback<A1>(callbackFunc: (arg1: A1, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<void>;\nexport declare function bindCallback<A1, A2, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<any[]>;\nexport declare function bindCallback<A1, A2, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2, R3]>;\nexport declare function bindCallback<A1, A2, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2]>;\nexport declare function bindCallback<A1, A2, R1>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<R1>;\nexport declare function bindCallback<A1, A2>(callbackFunc: (arg1: A1, arg2: A2, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<void>;\nexport declare function bindCallback<A1, A2, A3, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<any[]>;\nexport declare function bindCallback<A1, A2, A3, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2, R3]>;\nexport declare function bindCallback<A1, A2, A3, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2]>;\nexport declare function bindCallback<A1, A2, A3, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<R1>;\nexport declare function bindCallback<A1, A2, A3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<void>;\nexport declare function bindCallback<A1, A2, A3, A4, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<any[]>;\nexport declare function bindCallback<A1, A2, A3, A4, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2, R3]>;\nexport declare function bindCallback<A1, A2, A3, A4, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2]>;\nexport declare function bindCallback<A1, A2, A3, A4, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<R1>;\nexport declare function bindCallback<A1, A2, A3, A4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<void>;\nexport declare function bindCallback<A1, A2, A3, A4, A5, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<any[]>;\nexport declare function bindCallback<A1, A2, A3, A4, A5, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2, R3]>;\nexport declare function bindCallback<A1, A2, A3, A4, A5, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2]>;\nexport declare function bindCallback<A1, A2, A3, A4, A5, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<R1>;\nexport declare function bindCallback<A1, A2, A3, A4, A5>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<void>;\nexport declare function bindCallback<A, R>(callbackFunc: (...args: Array<A | ((result: R) => any)>) => any, scheduler?: SchedulerLike): (...args: A[]) => Observable<R>;\nexport declare function bindCallback<A, R>(callbackFunc: (...args: Array<A | ((...results: R[]) => any)>) => any, scheduler?: SchedulerLike): (...args: A[]) => Observable<R[]>;\nexport declare function bindCallback(callbackFunc: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/bindNodeCallback.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n/** @deprecated resultSelector is deprecated, pipe to map instead */\nexport declare function bindNodeCallback(callbackFunc: Function, resultSelector: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\nexport declare function bindNodeCallback<R1, R2, R3, R4>(callbackFunc: (callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport declare function bindNodeCallback<R1, R2, R3>(callbackFunc: (callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2, R3]>;\nexport declare function bindNodeCallback<R1, R2>(callbackFunc: (callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2]>;\nexport declare function bindNodeCallback<R1>(callbackFunc: (callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): () => Observable<R1>;\nexport declare function bindNodeCallback(callbackFunc: (callback: (err: any) => any) => any, scheduler?: SchedulerLike): () => Observable<void>;\nexport declare function bindNodeCallback<A1, R1, R2, R3, R4>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport declare function bindNodeCallback<A1, R1, R2, R3>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2, R3]>;\nexport declare function bindNodeCallback<A1, R1, R2>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2]>;\nexport declare function bindNodeCallback<A1, R1>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<R1>;\nexport declare function bindNodeCallback<A1>(callbackFunc: (arg1: A1, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<void>;\nexport declare function bindNodeCallback<A1, A2, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport declare function bindNodeCallback<A1, A2, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2, R3]>;\nexport declare function bindNodeCallback<A1, A2, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2]>;\nexport declare function bindNodeCallback<A1, A2, R1>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<R1>;\nexport declare function bindNodeCallback<A1, A2>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<void>;\nexport declare function bindNodeCallback<A1, A2, A3, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport declare function bindNodeCallback<A1, A2, A3, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2, R3]>;\nexport declare function bindNodeCallback<A1, A2, A3, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2]>;\nexport declare function bindNodeCallback<A1, A2, A3, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<R1>;\nexport declare function bindNodeCallback<A1, A2, A3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<void>;\nexport declare function bindNodeCallback<A1, A2, A3, A4, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport declare function bindNodeCallback<A1, A2, A3, A4, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2, R3]>;\nexport declare function bindNodeCallback<A1, A2, A3, A4, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2]>;\nexport declare function bindNodeCallback<A1, A2, A3, A4, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<R1>;\nexport declare function bindNodeCallback<A1, A2, A3, A4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<void>;\nexport declare function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport declare function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2, R3]>;\nexport declare function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2]>;\nexport declare function bindNodeCallback<A1, A2, A3, A4, A5, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<R1>;\nexport declare function bindNodeCallback<A1, A2, A3, A4, A5>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<void>;\nexport declare function bindNodeCallback(callbackFunc: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/combineLatest.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Operator } from '../Operator';\nimport { InnerSubscriber } from '../InnerSubscriber';\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function combineLatest<T, R>(v1: ObservableInput<T>, resultSelector: (v1: T) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, resultSelector: (v1: T, v2: T2) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: SchedulerLike): Observable<R>;\nexport declare function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<[T, T2]>;\nexport declare function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<[T, T2, T3]>;\nexport declare function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4]>;\nexport declare function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4, T5]>;\nexport declare function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4, T5, T6]>;\nexport declare function combineLatest<T>(array: ObservableInput<T>[], scheduler?: SchedulerLike): Observable<T[]>;\nexport declare function combineLatest<R>(array: ObservableInput<any>[], scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function combineLatest<T, R>(array: ObservableInput<T>[], resultSelector: (...values: Array<T>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function combineLatest<R>(array: ObservableInput<any>[], resultSelector: (...values: Array<any>) => R, scheduler?: SchedulerLike): Observable<R>;\nexport declare function combineLatest<T>(...observables: Array<ObservableInput<T> | SchedulerLike>): Observable<T[]>;\nexport declare function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | SchedulerLike>): Observable<R>;\nexport declare function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | SchedulerLike>): Observable<R>;\nexport declare class CombineLatestOperator<T, R> implements Operator<T, R> {\n    private resultSelector?;\n    constructor(resultSelector?: (...values: Array<any>) => R);\n    call(subscriber: Subscriber<R>, source: any): any;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n    private resultSelector?;\n    private active;\n    private values;\n    private observables;\n    private toRespond;\n    constructor(destination: Subscriber<R>, resultSelector?: (...values: Array<any>) => R);\n    protected _next(observable: any): void;\n    protected _complete(): void;\n    notifyComplete(unused: Subscriber<R>): void;\n    notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, R>): void;\n    private _tryResultSelector;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/concat.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nexport declare function concat<T>(v1: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport declare function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<T | T2>;\nexport declare function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport declare function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport declare function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport declare function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport declare function concat<T>(...observables: (ObservableInput<T> | SchedulerLike)[]): Observable<T>;\nexport declare function concat<T, R>(...observables: (ObservableInput<any> | SchedulerLike)[]): Observable<R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/ConnectableObservable.d.ts",
    "content": "import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n/**\n * @class ConnectableObservable<T>\n */\nexport declare class ConnectableObservable<T> extends Observable<T> {\n    source: Observable<T>;\n    protected subjectFactory: () => Subject<T>;\n    protected _subject: Subject<T>;\n    protected _refCount: number;\n    protected _connection: Subscription;\n    /** @internal */\n    _isComplete: boolean;\n    constructor(source: Observable<T>, subjectFactory: () => Subject<T>);\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<T>): Subscription;\n    protected getSubject(): Subject<T>;\n    connect(): Subscription;\n    refCount(): Observable<T>;\n}\nexport declare const connectableObservableDescriptor: PropertyDescriptorMap;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/defer.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SubscribableOrPromise } from '../types';\n/**\n * Creates an Observable that, on subscribe, calls an Observable factory to\n * make an Observable for each new Observer.\n *\n * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n * is subscribed.\n * </span>\n *\n * ![](defer.png)\n *\n * `defer` allows you to create the Observable only when the Observer\n * subscribes, and create a fresh Observable for each Observer. It waits until\n * an Observer subscribes to it, and then it generates an Observable,\n * typically with an Observable factory function. It does this afresh for each\n * subscriber, so although each subscriber may think it is subscribing to the\n * same Observable, in fact each subscriber gets its own individual\n * Observable.\n *\n * ## Example\n * ### Subscribe to either an Observable of clicks or an Observable of interval, at random\n * ```javascript\n * const clicksOrInterval = defer(function () {\n *   return Math.random() > 0.5\n *     ? fromEvent(document, 'click')\n *     : interval(1000);\n * });\n * clicksOrInterval.subscribe(x => console.log(x));\n *\n * // Results in the following behavior:\n * // If the result of Math.random() is greater than 0.5 it will listen\n * // for clicks anywhere on the \"document\"; when document is clicked it\n * // will log a MouseEvent object to the console. If the result is less\n * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n * ```\n *\n * @see {@link Observable}\n *\n * @param {function(): SubscribableOrPromise} observableFactory The Observable\n * factory function to invoke for each Observer that subscribes to the output\n * Observable. May also return a Promise, which will be converted on the fly\n * to an Observable.\n * @return {Observable} An Observable whose Observers' subscriptions trigger\n * an invocation of the given Observable factory function.\n * @static true\n * @name defer\n * @owner Observable\n */\nexport declare function defer<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/dom/ajax.d.ts",
    "content": "import { AjaxCreationMethod } from './AjaxObservable';\n/**\n * There is an ajax operator on the Rx object.\n *\n * It creates an observable for an Ajax request with either a request object with\n * url, headers, etc or a string for a URL.\n *\n * ## Using ajax.getJSON() to fetch data from API.\n * ```javascript\n * import { ajax } from 'rxjs/ajax';\n * import { map, catchError } from 'rxjs/operators';\n *\n * const obs$ = ajax.getJSON(`https://api.github.com/users?per_page=5`).pipe(\n *   map(userResponse => console.log('users: ', userResponse)),\n *   catchError(error => console.log('error: ', error))\n * ));\n * ```\n */\nexport declare const ajax: AjaxCreationMethod;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/dom/AjaxObservable.d.ts",
    "content": "import { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../types';\nexport interface AjaxRequest {\n    url?: string;\n    body?: any;\n    user?: string;\n    async?: boolean;\n    method?: string;\n    headers?: Object;\n    timeout?: number;\n    password?: string;\n    hasContent?: boolean;\n    crossDomain?: boolean;\n    withCredentials?: boolean;\n    createXHR?: () => XMLHttpRequest;\n    progressSubscriber?: Subscriber<any>;\n    responseType?: string;\n}\nexport interface AjaxCreationMethod {\n    (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n    get(url: string, headers?: Object): Observable<AjaxResponse>;\n    post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n    put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n    patch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n    delete(url: string, headers?: Object): Observable<AjaxResponse>;\n    getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\nexport declare function ajaxGet(url: string, headers?: Object): AjaxObservable<AjaxResponse>;\nexport declare function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\nexport declare function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse>;\nexport declare function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\nexport declare function ajaxPatch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\nexport declare function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T>;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport declare class AjaxObservable<T> extends Observable<T> {\n    /**\n     * Creates an observable for an Ajax request with either a request object with\n     * url, headers, etc or a string for a URL.\n     *\n     * ## Example\n     * ```javascript\n     * source = Rx.Observable.ajax('/products');\n     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n     * ```\n     *\n     * @param {string|Object} request Can be one of the following:\n     *   A string of the URL to make the Ajax call.\n     *   An object with the following properties\n     *   - url: URL of the request\n     *   - body: The body of the request\n     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n     *   - async: Whether the request is async\n     *   - headers: Optional headers\n     *   - crossDomain: true if a cross domain request, else false\n     *   - createXHR: a function to override if you need to use an alternate\n     *   XMLHttpRequest implementation.\n     *   - resultSelector: a function to use to alter the output value type of\n     *   the Observable. Gets {@link AjaxResponse} as an argument.\n     * @return {Observable} An observable sequence containing the XMLHttpRequest.\n     * @static true\n     * @name ajax\n     * @owner Observable\n     * @nocollapse\n    */\n    static create: AjaxCreationMethod;\n    private request;\n    constructor(urlOrRequest: string | AjaxRequest);\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<T>): TeardownLogic;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class AjaxSubscriber<T> extends Subscriber<Event> {\n    request: AjaxRequest;\n    private xhr;\n    private done;\n    constructor(destination: Subscriber<T>, request: AjaxRequest);\n    next(e: Event): void;\n    private send;\n    private serializeBody;\n    private setHeaders;\n    private setupEvents;\n    unsubscribe(): void;\n}\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport declare class AjaxResponse {\n    originalEvent: Event;\n    xhr: XMLHttpRequest;\n    request: AjaxRequest;\n    /** @type {number} The HTTP status code */\n    status: number;\n    /** @type {string|ArrayBuffer|Document|object|any} The response data */\n    response: any;\n    /** @type {string} The raw responseText */\n    responseText: string;\n    /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n    responseType: string;\n    constructor(originalEvent: Event, xhr: XMLHttpRequest, request: AjaxRequest);\n}\nexport declare type AjaxErrorNames = 'AjaxError' | 'AjaxTimeoutError';\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport interface AjaxError extends Error {\n    /** @type {XMLHttpRequest} The XHR instance associated with the error */\n    xhr: XMLHttpRequest;\n    /** @type {AjaxRequest} The AjaxRequest associated with the error */\n    request: AjaxRequest;\n    /** @type {number} The HTTP status code */\n    status: number;\n    /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n    responseType: string;\n    /** @type {string|ArrayBuffer|Document|object|any} The response data */\n    response: any;\n}\nexport interface AjaxErrorCtor {\n    new (message: string, xhr: XMLHttpRequest, request: AjaxRequest): AjaxError;\n}\nexport declare const AjaxError: AjaxErrorCtor;\nexport interface AjaxTimeoutError extends AjaxError {\n}\nexport interface AjaxTimeoutErrorCtor {\n    new (xhr: XMLHttpRequest, request: AjaxRequest): AjaxTimeoutError;\n}\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport declare const AjaxTimeoutError: AjaxTimeoutErrorCtor;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/dom/webSocket.d.ts",
    "content": "import { WebSocketSubject, WebSocketSubjectConfig } from './WebSocketSubject';\n/**\n * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n *\n * <span class=\"informal\">{@link Subject} that communicates with a server via WebSocket</span>\n *\n * `webSocket` is a factory function that produces a `WebSocketSubject`,\n * which can be used to make WebSocket connection with an arbitrary endpoint.\n * `webSocket` accepts as an argument either a string with url of WebSocket endpoint, or an\n * {@link WebSocketSubjectConfig} object for providing additional configuration, as\n * well as Observers for tracking lifecycle of WebSocket connection.\n *\n * When `WebSocketSubject` is subscribed, it attempts to make a socket connection,\n * unless there is one made already. This means that many subscribers will always listen\n * on the same socket, thus saving resources. If however, two instances are made of `WebSocketSubject`,\n * even if these two were provided with the same url, they will attempt to make separate\n * connections. When consumer of a `WebSocketSubject` unsubscribes, socket connection is closed,\n * only if there are no more subscribers still listening. If after some time a consumer starts\n * subscribing again, connection is reestablished.\n *\n * Once connection is made, whenever a new message comes from the server, `WebSocketSubject` will emit that\n * message as a value in the stream. By default, a message from the socket is parsed via `JSON.parse`. If you\n * want to customize how deserialization is handled (if at all), you can provide custom `resultSelector`\n * function in {@link WebSocketSubject}. When connection closes, stream will complete, provided it happened without\n * any errors. If at any point (starting, maintaining or closing a connection) there is an error,\n * stream will also error with whatever WebSocket API has thrown.\n *\n * By virtue of being a {@link Subject}, `WebSocketSubject` allows for receiving and sending messages from the server. In order\n * to communicate with a connected endpoint, use `next`, `error` and `complete` methods. `next` sends a value to the server, so bear in mind\n * that this value will not be serialized beforehand. Because of This, `JSON.stringify` will have to be called on a value by hand,\n * before calling `next` with a result. Note also that if at the moment of nexting value\n * there is no socket connection (for example no one is subscribing), those values will be buffered, and sent when connection\n * is finally established. `complete` method closes socket connection. `error` does the same,\n * as well as notifying the server that something went wrong via status code and string with details of what happened.\n * Since status code is required in WebSocket API, `WebSocketSubject` does not allow, like regular `Subject`,\n * arbitrary values being passed to the `error` method. It needs to be called with an object that has `code`\n * property with status code number and optional `reason` property with string describing details\n * of an error.\n *\n * Calling `next` does not affect subscribers of `WebSocketSubject` - they have no\n * information that something was sent to the server (unless of course the server\n * responds somehow to a message). On the other hand, since calling `complete` triggers\n * an attempt to close socket connection. If that connection is closed without any errors, stream will\n * complete, thus notifying all subscribers. And since calling `error` closes\n * socket connection as well, just with a different status code for the server, if closing itself proceeds\n * without errors, subscribed Observable will not error, as one might expect, but complete as usual. In both cases\n * (calling `complete` or `error`), if process of closing socket connection results in some errors, *then* stream\n * will error.\n *\n * **Multiplexing**\n *\n * `WebSocketSubject` has an additional operator, not found in other Subjects. It is called `multiplex` and it is\n * used to simulate opening several socket connections, while in reality maintaining only one.\n * For example, an application has both chat panel and real-time notifications about sport news. Since these are two distinct functions,\n * it would make sense to have two separate connections for each. Perhaps there could even be two separate services with WebSocket\n * endpoints, running on separate machines with only GUI combining them together. Having a socket connection\n * for each functionality could become too resource expensive. It is a common pattern to have single\n * WebSocket endpoint that acts as a gateway for the other services (in this case chat and sport news services).\n * Even though there is a single connection in a client app, having the ability to manipulate streams as if it\n * were two separate sockets is desirable. This eliminates manually registering and unregistering in a gateway for\n * given service and filter out messages of interest. This is exactly what `multiplex` method is for.\n *\n * Method accepts three parameters. First two are functions returning subscription and unsubscription messages\n * respectively. These are messages that will be sent to the server, whenever consumer of resulting Observable\n * subscribes and unsubscribes. Server can use them to verify that some kind of messages should start or stop\n * being forwarded to the client. In case of the above example application, after getting subscription message with proper identifier,\n * gateway server can decide that it should connect to real sport news service and start forwarding messages from it.\n * Note that both messages will be sent as returned by the functions, meaning they will have to be serialized manually, just\n * as messages pushed via `next`. Also bear in mind that these messages will be sent on *every* subscription and\n * unsubscription. This is potentially dangerous, because one consumer of an Observable may unsubscribe and the server\n * might stop sending messages, since it got unsubscription message. This needs to be handled\n * on the server or using {@link publish} on a Observable returned from 'multiplex'.\n *\n * Last argument to `multiplex` is a `messageFilter` function which filters out messages\n * sent by the server to only those that belong to simulated WebSocket stream. For example, server might mark these\n * messages with some kind of string identifier on a message object and `messageFilter` would return `true`\n * if there is such identifier on an object emitted by the socket.\n *\n * Return value of `multiplex` is an Observable with messages incoming from emulated socket connection. Note that this\n * is not a `WebSocketSubject`, so calling `next` or `multiplex` again will fail. For pushing values to the\n * server, use root `WebSocketSubject`.\n *\n * ### Examples\n * #### Listening for messages from the server\n * const subject = Rx.Observable.webSocket('ws://localhost:8081');\n *\n * subject.subscribe(\n *    (msg) => console.log('message received: ' + msg), // Called whenever there is a message from the server.\n *    (err) => console.log(err), // Called if at any point WebSocket API signals some kind of error.\n *    () => console.log('complete') // Called when connection is closed (for whatever reason).\n *  );\n *\n *\n * #### Pushing messages to the server\n * const subject = Rx.Observable.webSocket('ws://localhost:8081');\n *\n * subject.subscribe(); // Note that at least one consumer has to subscribe to\n *                      // the created subject - otherwise \"nexted\" values will be just\n *                      // buffered and not sent, since no connection was established!\n *\n * subject.next(JSON.stringify({message: 'some message'})); // This will send a message to the server\n *                                                          // once a connection is made.\n *                                                          // Remember to serialize sent value first!\n *\n * subject.complete(); // Closes the connection.\n *\n *\n * subject.error({code: 4000, reason: 'I think our app just broke!'}); // Also closes the connection,\n *                                                                     // but let's the server know that\n *                                                                     // this closing is caused by some error.\n *\n *\n * #### Multiplexing WebSocket\n * const subject = Rx.Observable.webSocket('ws://localhost:8081');\n *\n * const observableA = subject.multiplex(\n *   () => JSON.stringify({subscribe: 'A'}), // When server gets this message, it will start sending messages for 'A'...\n *   () => JSON.stringify({unsubscribe: 'A'}), // ...and when gets this one, it will stop.\n *   message => message.type === 'A' // Server will tag all messages for 'A' with type property.\n * );\n *\n * const observableB = subject.multiplex( // And the same goes for 'B'.\n *   () => JSON.stringify({subscribe: 'B'}),\n *   () => JSON.stringify({unsubscribe: 'B'}),\n *   message => message.type === 'B'\n * );\n *\n * const subA = observableA.subscribe(messageForA => console.log(messageForA));\n * // At this moment WebSocket connection\n * // is established. Server gets '{\"subscribe\": \"A\"}'\n * // message and starts sending messages for 'A',\n * // which we log here.\n *\n * const subB = observableB.subscribe(messageForB => console.log(messageForB));\n * // Since we already have a connection,\n * // we just send '{\"subscribe\": \"B\"}' message\n * // to the server. It starts sending\n * // messages for 'B', which we log here.\n *\n * subB.unsubscribe();\n * // Message '{\"unsubscribe\": \"B\"}' is sent to the\n * // server, which stops sending 'B' messages.\n *\n * subA.unubscribe();\n * // Message '{\"unsubscribe\": \"A\"}' makes the server\n * // stop sending messages for 'A'. Since there is\n * // no more subscribers to root Subject, socket\n * // connection closes.\n *\n *\n *\n * @param {string|WebSocketSubjectConfig} urlConfigOrSource The WebSocket endpoint as an url or an object with\n * configuration and additional Observers.\n * @return {WebSocketSubject} Subject which allows to both send and receive messages via WebSocket connection.\n */\nexport declare function webSocket<T>(urlConfigOrSource: string | WebSocketSubjectConfig<T>): WebSocketSubject<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/dom/WebSocketSubject.d.ts",
    "content": "import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { Observer, NextObserver } from '../../types';\nexport interface WebSocketSubjectConfig<T> {\n    /** The url of the socket server to connect to */\n    url: string;\n    /** The protocol to use to connect */\n    protocol?: string | Array<string>;\n    /** @deprecated use {@link deserializer} */\n    resultSelector?: (e: MessageEvent) => T;\n    /**\n     * A serializer used to create messages from passed values before the\n     * messages are sent to the server. Defaults to JSON.stringify.\n     */\n    serializer?: (value: T) => WebSocketMessage;\n    /**\n     * A deserializer used for messages arriving on the socket from the\n     * server. Defaults to JSON.parse.\n     */\n    deserializer?: (e: MessageEvent) => T;\n    /**\n     * An Observer that watches when open events occur on the underlying web socket.\n     */\n    openObserver?: NextObserver<Event>;\n    /**\n     * An Observer than watches when close events occur on the underlying webSocket\n     */\n    closeObserver?: NextObserver<CloseEvent>;\n    /**\n     * An Observer that watches when a close is about to occur due to\n     * unsubscription.\n     */\n    closingObserver?: NextObserver<void>;\n    /**\n     * A WebSocket constructor to use. This is useful for situations like using a\n     * WebSocket impl in Node (WebSocket is a DOM API), or for mocking a WebSocket\n     * for testing purposes\n     */\n    WebSocketCtor?: {\n        new (url: string, protocols?: string | string[]): WebSocket;\n    };\n    /** Sets the `binaryType` property of the underlying WebSocket. */\n    binaryType?: 'blob' | 'arraybuffer';\n}\nexport declare type WebSocketMessage = string | ArrayBuffer | Blob | ArrayBufferView;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport declare class WebSocketSubject<T> extends AnonymousSubject<T> {\n    private _config;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _output: Subject<T>;\n    private _socket;\n    constructor(urlConfigOrSource: string | WebSocketSubjectConfig<T> | Observable<T>, destination?: Observer<T>);\n    lift<R>(operator: Operator<T, R>): WebSocketSubject<R>;\n    private _resetState;\n    /**\n     * Creates an {@link Observable}, that when subscribed to, sends a message,\n     * defined by the `subMsg` function, to the server over the socket to begin a\n     * subscription to data over that socket. Once data arrives, the\n     * `messageFilter` argument will be used to select the appropriate data for\n     * the resulting Observable. When teardown occurs, either due to\n     * unsubscription, completion or error, a message defined by the `unsubMsg`\n     * argument will be send to the server over the WebSocketSubject.\n     *\n     * @param subMsg A function to generate the subscription message to be sent to\n     * the server. This will still be processed by the serializer in the\n     * WebSocketSubject's config. (Which defaults to JSON serialization)\n     * @param unsubMsg A function to generate the unsubscription message to be\n     * sent to the server at teardown. This will still be processed by the\n     * serializer in the WebSocketSubject's config.\n     * @param messageFilter A predicate for selecting the appropriate messages\n     * from the server for the output stream.\n     */\n    multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean): Observable<any>;\n    private _connectSocket;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<T>): Subscription;\n    unsubscribe(): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/empty.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * `scheduler`. It is preferrable to use this over `empty()`.\n */\nexport declare const EMPTY: Observable<never>;\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * ![](empty.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then complete\n * ```javascript\n * const result = empty().pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\n * ```javascript\n * const interval$ = interval(1000);\n * result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n * ```\n *\n * @see {@link Observable}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throwError}\n *\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emission of the complete notification.\n * @return {Observable} An \"empty\" Observable: emits only the complete\n * notification.\n * @static true\n * @name empty\n * @owner Observable\n * @deprecated Deprecated in favor of using {@link index/EMPTY} constant.\n */\nexport declare function empty(scheduler?: SchedulerLike): Observable<never>;\nexport declare function emptyScheduled(scheduler: SchedulerLike): Observable<never>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/forkJoin.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nexport declare function forkJoin<T>(sources: [ObservableInput<T>]): Observable<T[]>;\nexport declare function forkJoin<T, T2>(sources: [ObservableInput<T>, ObservableInput<T2>]): Observable<[T, T2]>;\nexport declare function forkJoin<T, T2, T3>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>]): Observable<[T, T2, T3]>;\nexport declare function forkJoin<T, T2, T3, T4>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>]): Observable<[T, T2, T3, T4]>;\nexport declare function forkJoin<T, T2, T3, T4, T5>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>, ObservableInput<T5>]): Observable<[T, T2, T3, T4, T5]>;\nexport declare function forkJoin<T, T2, T3, T4, T5, T6>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>, ObservableInput<T5>, ObservableInput<T6>]): Observable<[T, T2, T3, T4, T5, T6]>;\nexport declare function forkJoin<T>(sources: Array<ObservableInput<T>>): Observable<T[]>;\nexport declare function forkJoin<T>(v1: ObservableInput<T>): Observable<T[]>;\nexport declare function forkJoin<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport declare function forkJoin<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport declare function forkJoin<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport declare function forkJoin<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport declare function forkJoin<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n/** @deprecated resultSelector is deprecated, pipe to map instead */\nexport declare function forkJoin(...args: Array<ObservableInput<any> | Function>): Observable<any>;\nexport declare function forkJoin<T>(...sources: ObservableInput<T>[]): Observable<T[]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/from.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nexport declare function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport declare function from<T>(input: ObservableInput<ObservableInput<T>>, scheduler?: SchedulerLike): Observable<Observable<T>>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/fromArray.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nexport declare function fromArray<T>(input: ArrayLike<T>, scheduler?: SchedulerLike): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/fromEvent.d.ts",
    "content": "import { Observable } from '../Observable';\nexport interface NodeStyleEventEmitter {\n    addListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n    removeListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n}\nexport declare type NodeEventHandler = (...args: any[]) => void;\nexport interface NodeCompatibleEventEmitter {\n    addListener: (eventName: string, handler: NodeEventHandler) => void | {};\n    removeListener: (eventName: string, handler: NodeEventHandler) => void | {};\n}\nexport interface JQueryStyleEventEmitter {\n    on: (eventName: string, handler: Function) => void;\n    off: (eventName: string, handler: Function) => void;\n}\nexport interface HasEventTargetAddRemove<E> {\n    addEventListener(type: string, listener: ((evt: E) => void) | null, options?: boolean | AddEventListenerOptions): void;\n    removeEventListener(type: string, listener?: ((evt: E) => void) | null, options?: EventListenerOptions | boolean): void;\n}\nexport declare type EventTargetLike<T> = HasEventTargetAddRemove<T> | NodeStyleEventEmitter | NodeCompatibleEventEmitter | JQueryStyleEventEmitter;\nexport declare type FromEventTarget<T> = EventTargetLike<T> | ArrayLike<EventTargetLike<T>>;\nexport interface EventListenerOptions {\n    capture?: boolean;\n    passive?: boolean;\n    once?: boolean;\n}\nexport interface AddEventListenerOptions extends EventListenerOptions {\n    once?: boolean;\n    passive?: boolean;\n}\nexport declare function fromEvent<T>(target: FromEventTarget<T>, eventName: string): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function fromEvent<T>(target: FromEventTarget<T>, eventName: string, resultSelector: (...args: any[]) => T): Observable<T>;\nexport declare function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions, resultSelector: (...args: any[]) => T): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/fromEventPattern.d.ts",
    "content": "import { Observable } from '../Observable';\nexport declare function fromEventPattern<T>(addHandler: (handler: Function) => any, removeHandler?: (handler: Function, signal?: any) => void): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport declare function fromEventPattern<T>(addHandler: (handler: Function) => any, removeHandler?: (handler: Function, signal?: any) => void, resultSelector?: (...args: any[]) => T): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/fromIterable.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nexport declare function fromIterable<T>(input: Iterable<T>, scheduler: SchedulerLike): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/fromObservable.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { InteropObservable, SchedulerLike } from '../types';\nexport declare function fromObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/fromPromise.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nexport declare function fromPromise<T>(input: PromiseLike<T>, scheduler?: SchedulerLike): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/generate.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nexport declare type ConditionFunc<S> = (state: S) => boolean;\nexport declare type IterateFunc<S> = (state: S) => S;\nexport declare type ResultFunc<S, T> = (state: S) => T;\nexport interface GenerateBaseOptions<S> {\n    /**\n     * Initial state.\n     */\n    initialState: S;\n    /**\n     * Condition function that accepts state and returns boolean.\n     * When it returns false, the generator stops.\n     * If not specified, a generator never stops.\n     */\n    condition?: ConditionFunc<S>;\n    /**\n     * Iterate function that accepts state and returns new state.\n     */\n    iterate: IterateFunc<S>;\n    /**\n     * SchedulerLike to use for generation process.\n     * By default, a generator starts immediately.\n     */\n    scheduler?: SchedulerLike;\n}\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n    /**\n     * Result selection function that accepts state and returns a value to emit.\n     */\n    resultSelector: ResultFunc<S, T>;\n}\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n *\n * ![](generate.png)\n *\n * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n * const res = generate(0, x => x < 10, x => x + 1, x => x);\n *\n * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n * const res = generate(1, x => x < 5, x =>  * 2, x => x + 1, asap);\n *\n * @see {@link from}\n * @see {@link Observable}\n *\n * @param {S} initialState Initial state.\n * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n * @param {function (state: S): S} iterate Iteration step function.\n * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence. (deprecated)\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} on which to run the generator loop. If not provided, defaults to emit immediately.\n * @returns {Observable<T>} The generated sequence.\n */\nexport declare function generate<T, S>(initialState: S, condition: ConditionFunc<S>, iterate: IterateFunc<S>, resultSelector: ResultFunc<S, T>, scheduler?: SchedulerLike): Observable<T>;\n/**\n * Generates an Observable by running a state-driven loop\n * that emits an element on each iteration.\n *\n * <span class=\"informal\">Use it instead of nexting values in a for loop.</span>\n *\n * <img src=\"./img/generate.png\" width=\"100%\">\n *\n * `generate` allows you to create stream of values generated with a loop very similar to\n * traditional for loop. First argument of `generate` is a beginning value. Second argument\n * is a function that accepts this value and tests if some condition still holds. If it does,\n * loop continues, if not, it stops. Third value is a function which takes previously defined\n * value and modifies it in some way on each iteration. Note how these three parameters\n * are direct equivalents of three expressions in regular for loop: first expression\n * initializes some state (for example numeric index), second tests if loop can make next\n * iteration (for example if index is lower than 10) and third states how defined value\n * will be modified on every step (index will be incremented by one).\n *\n * Return value of a `generate` operator is an Observable that on each loop iteration\n * emits a value. First, condition function is ran. If it returned true, Observable\n * emits currently stored value (initial value at the first iteration) and then updates\n * that value with iterate function. If at some point condition returned false, Observable\n * completes at that moment.\n *\n * Optionally you can pass fourth parameter to `generate` - a result selector function which allows you\n * to immediately map value that would normally be emitted by an Observable.\n *\n * If you find three anonymous functions in `generate` call hard to read, you can provide\n * single object to the operator instead. That object has properties: `initialState`,\n * `condition`, `iterate` and `resultSelector`, which should have respective values that you\n * would normally pass to `generate`. `resultSelector` is still optional, but that form\n * of calling `generate` allows you to omit `condition` as well. If you omit it, that means\n * condition always holds, so output Observable will never complete.\n *\n * Both forms of `generate` can optionally accept a scheduler. In case of multi-parameter call,\n * scheduler simply comes as a last argument (no matter if there is resultSelector\n * function or not). In case of single-parameter call, you can provide it as a\n * `scheduler` property on object passed to the operator. In both cases scheduler decides when\n * next iteration of the loop will happen and therefore when next value will be emitted\n * by the Observable. For example to ensure that each value is pushed to the observer\n * on separate task in event loop, you could use `async` scheduler. Note that\n * by default (when no scheduler is passed) values are simply emitted synchronously.\n *\n *\n * @example <caption>Use with condition and iterate functions.</caption>\n * const generated = generate(0, x => x < 3, x => x + 1);\n *\n * generated.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('Yo!')\n * );\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * // \"Yo!\"\n *\n *\n * @example <caption>Use with condition, iterate and resultSelector functions.</caption>\n * const generated = generate(0, x => x < 3, x => x + 1, x => x * 1000);\n *\n * generated.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('Yo!')\n * );\n *\n * // Logs:\n * // 0\n * // 1000\n * // 2000\n * // \"Yo!\"\n *\n *\n * @example <caption>Use with options object.</caption>\n * const generated = generate({\n *   initialState: 0,\n *   condition(value) { return value < 3; },\n *   iterate(value) { return value + 1; },\n *   resultSelector(value) { return value * 1000; }\n * });\n *\n * generated.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('Yo!')\n * );\n *\n * // Logs:\n * // 0\n * // 1000\n * // 2000\n * // \"Yo!\"\n *\n * @example <caption>Use options object without condition function.</caption>\n * const generated = generate({\n *   initialState: 0,\n *   iterate(value) { return value + 1; },\n *   resultSelector(value) { return value * 1000; }\n * });\n *\n * generated.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('Yo!') // This will never run.\n * );\n *\n * // Logs:\n * // 0\n * // 1000\n * // 2000\n * // 3000\n * // ...and never stops.\n *\n *\n * @see {@link from}\n * @see {@link create}\n *\n * @param {S} initialState Initial state.\n * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n * @param {function (state: S): S} iterate Iteration step function.\n * @param {function (state: S): T} [resultSelector] Selector function for results produced in the sequence.\n * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emitting immediately.\n * @return {Observable<T>} The generated sequence.\n */\nexport declare function generate<S>(initialState: S, condition: ConditionFunc<S>, iterate: IterateFunc<S>, scheduler?: SchedulerLike): Observable<S>;\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n * The overload accepts options object that might contain initial state, iterate,\n * condition and scheduler.\n *\n * ![](generate.png)\n *\n * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n * const res = generate({\n *   initialState: 0,\n *   condition: x => x < 10,\n *   iterate: x => x + 1,\n * });\n *\n * @see {@link from}\n * @see {@link Observable}\n *\n * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n * @returns {Observable<S>} The generated sequence.\n */\nexport declare function generate<S>(options: GenerateBaseOptions<S>): Observable<S>;\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n * The overload accepts options object that might contain initial state, iterate,\n * condition, result selector and scheduler.\n *\n * ![](generate.png)\n *\n * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n * const res = generate({\n *   initialState: 0,\n *   condition: x => x < 10,\n *   iterate: x => x + 1,\n *   resultSelector: x => x,\n * });\n *\n * @see {@link from}\n * @see {@link Observable}\n *\n * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n * @returns {Observable<T>} The generated sequence.\n */\nexport declare function generate<T, S>(options: GenerateOptions<T, S>): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/iif.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SubscribableOrPromise } from '../types';\n/**\n * Decides at subscription time which Observable will actually be subscribed.\n *\n * <span class=\"informal\">`If` statement for Observables.</span>\n *\n * `iif` accepts a condition function and two Observables. When\n * an Observable returned by the operator is subscribed, condition function will be called.\n * Based on what boolean it returns at that moment, consumer will subscribe either to\n * the first Observable (if condition was true) or to the second (if condition was false). Condition\n * function may also not return anything - in that case condition will be evaluated as false and\n * second Observable will be subscribed.\n *\n * Note that Observables for both cases (true and false) are optional. If condition points to an Observable that\n * was left undefined, resulting stream will simply complete immediately. That allows you to, rather\n * then controlling which Observable will be subscribed, decide at runtime if consumer should have access\n * to given Observable or not.\n *\n * If you have more complex logic that requires decision between more than two Observables, {@link defer}\n * will probably be a better choice. Actually `iif` can be easily implemented with {@link defer}\n * and exists only for convenience and readability reasons.\n *\n *\n * ## Examples\n * ### Change at runtime which Observable will be subscribed\n * ```javascript\n * let subscribeToFirst;\n * const firstOrSecond = iif(\n *   () => subscribeToFirst,\n *   of('first'),\n *   of('second'),\n * );\n *\n * subscribeToFirst = true;\n * firstOrSecond.subscribe(value => console.log(value));\n *\n * // Logs:\n * // \"first\"\n *\n * subscribeToFirst = false;\n * firstOrSecond.subscribe(value => console.log(value));\n *\n * // Logs:\n * // \"second\"\n *\n * ```\n *\n * ### Control an access to an Observable\n * ```javascript\n * let accessGranted;\n * const observableIfYouHaveAccess = iif(\n *   () => accessGranted,\n *   of('It seems you have an access...'), // Note that only one Observable is passed to the operator.\n * );\n *\n * accessGranted = true;\n * observableIfYouHaveAccess.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('The end'),\n * );\n *\n * // Logs:\n * // \"It seems you have an access...\"\n * // \"The end\"\n *\n * accessGranted = false;\n * observableIfYouHaveAccess.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('The end'),\n * );\n *\n * // Logs:\n * // \"The end\"\n * ```\n *\n * @see {@link defer}\n *\n * @param {function(): boolean} condition Condition which Observable should be chosen.\n * @param {Observable} [trueObservable] An Observable that will be subscribed if condition is true.\n * @param {Observable} [falseObservable] An Observable that will be subscribed if condition is false.\n * @return {Observable} Either first or second Observable, depending on condition.\n * @static true\n * @name iif\n * @owner Observable\n */\nexport declare function iif<T, F>(condition: () => boolean, trueResult?: SubscribableOrPromise<T>, falseResult?: SubscribableOrPromise<F>): Observable<T | F>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/interval.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n/**\n * Creates an Observable that emits sequential numbers every specified\n * interval of time, on a specified {@link SchedulerLike}.\n *\n * <span class=\"informal\">Emits incremental numbers periodically in time.\n * </span>\n *\n * ![](interval.png)\n *\n * `interval` returns an Observable that emits an infinite sequence of\n * ascending integers, with a constant interval of time of your choosing\n * between those emissions. The first emission is not sent immediately, but\n * only after the first period has passed. By default, this operator uses the\n * `async` {@link SchedulerLike} to provide a notion of time, but you may pass any\n * {@link SchedulerLike} to it.\n *\n * ## Example\n * Emits ascending numbers, one every second (1000ms) up to the number 3\n * ```javascript\n * import { interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const numbers = interval(1000);\n *\n * const takeFourNumbers = numbers.pipe(take(4));\n *\n * takeFourNumbers.subscribe(x => console.log('Next: ', x));\n *\n * // Logs:\n * // Next: 0\n * // Next: 1\n * // Next: 2\n * // Next: 3\n * ```\n *\n * @see {@link timer}\n * @see {@link delay}\n *\n * @param {number} [period=0] The interval size in milliseconds (by default)\n * or the time unit determined by the scheduler's clock.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a sequential number each time\n * interval.\n * @static true\n * @name interval\n * @owner Observable\n */\nexport declare function interval(period?: number, scheduler?: SchedulerLike): Observable<number>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/merge.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nexport declare function merge<T>(v1: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport declare function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: SchedulerLike): Observable<T>;\nexport declare function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<T | T2>;\nexport declare function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2>;\nexport declare function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport declare function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport declare function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport declare function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport declare function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport declare function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport declare function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport declare function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport declare function merge<T>(...observables: (ObservableInput<T> | SchedulerLike | number)[]): Observable<T>;\nexport declare function merge<T, R>(...observables: (ObservableInput<any> | SchedulerLike | number)[]): Observable<R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/never.d.ts",
    "content": "import { Observable } from '../Observable';\n/**\n * An Observable that emits no items to the Observer and never completes.\n *\n * ![](never.png)\n *\n * A simple Observable that emits neither values nor errors nor the completion\n * notification. It can be used for testing purposes or for composing with other\n * Observables. Please note that by never emitting a complete notification, this\n * Observable keeps the subscription from being disposed automatically.\n * Subscriptions need to be manually disposed.\n *\n * ##  Example\n * ### Emit the number 7, then never emit anything else (not even complete)\n * ```javascript\n * function info() {\n *   console.log('Will not be called');\n * }\n * const result = NEVER.pipe(startWith(7));\n * result.subscribe(x => console.log(x), info, info);\n *\n * ```\n *\n * @see {@link Observable}\n * @see {@link index/EMPTY}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport declare const NEVER: Observable<never>;\n/**\n * @deprecated Deprecated in favor of using {@link NEVER} constant.\n */\nexport declare function never(): Observable<never>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/of.d.ts",
    "content": "import { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nexport declare function of<T>(a: T, scheduler?: SchedulerLike): Observable<T>;\nexport declare function of<T, T2>(a: T, b: T2, scheduler?: SchedulerLike): Observable<T | T2>;\nexport declare function of<T, T2, T3>(a: T, b: T2, c: T3, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport declare function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport declare function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport declare function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport declare function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\nexport declare function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\nexport declare function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\nexport declare function of<T>(...args: Array<T | SchedulerLike>): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/onErrorResumeNext.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nexport declare function onErrorResumeNext<R>(v: ObservableInput<R>): Observable<R>;\nexport declare function onErrorResumeNext<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport declare function onErrorResumeNext<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport declare function onErrorResumeNext<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport declare function onErrorResumeNext<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\nexport declare function onErrorResumeNext<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport declare function onErrorResumeNext<R>(array: ObservableInput<any>[]): Observable<R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/pairs.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n/**\n * Convert an object into an Observable of `[key, value]` pairs.\n *\n * <span class=\"informal\">Turn entries of an object into a stream.</span>\n *\n * <img src=\"./img/pairs.png\" width=\"100%\">\n *\n * `pairs` takes an arbitrary object and returns an Observable that emits arrays. Each\n * emitted array has exactly two elements - the first is a key from the object\n * and the second is a value corresponding to that key. Keys are extracted from\n * an object via `Object.keys` function, which means that they will be only\n * enumerable keys that are present on an object directly - not ones inherited\n * via prototype chain.\n *\n * By default these arrays are emitted synchronously. To change that you can\n * pass a {@link SchedulerLike} as a second argument to `pairs`.\n *\n * @example <caption>Converts a javascript object to an Observable</caption>\n * ```javascript\n * const obj = {\n *   foo: 42,\n *   bar: 56,\n *   baz: 78\n * };\n *\n * pairs(obj)\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('the end!')\n * );\n *\n * // Logs:\n * // [\"foo\": 42],\n * // [\"bar\": 56],\n * // [\"baz\": 78],\n * // \"the end!\"\n * ```\n *\n * @param {Object} obj The object to inspect and turn into an\n * Observable sequence.\n * @param {Scheduler} [scheduler] An optional IScheduler to schedule\n * when resulting Observable will emit values.\n * @returns {(Observable<Array<string|T>>)} An observable sequence of\n * [key, value] pairs from the object.\n */\nexport declare function pairs<T>(obj: Object, scheduler?: SchedulerLike): Observable<[string, T]>;\n/** @internal */\nexport declare function dispatch<T>(this: SchedulerAction<any>, state: {\n    keys: string[];\n    index: number;\n    subscriber: Subscriber<[string, T]>;\n    subscription: Subscription;\n    obj: Object;\n}): void;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/race.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../types';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n *\n * ## Example\n * ### Subscribes to the observable that was the first to start emitting.\n *\n * ```javascript\n * const obs1 = interval(1000).pipe(mapTo('fast one'));\n * const obs2 = interval(3000).pipe(mapTo('medium one'));\n * const obs3 = interval(5000).pipe(mapTo('slow one'));\n *\n * race(obs3, obs1, obs2)\n * .subscribe(\n *   winner => console.log(winner)\n * );\n *\n * // result:\n * // a series of 'fast one'\n * ```\n *\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport declare function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport declare function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport declare function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport declare class RaceOperator<T> implements Operator<T, T> {\n    call(subscriber: Subscriber<T>, source: any): TeardownLogic;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n    private hasFirst;\n    private observables;\n    private subscriptions;\n    constructor(destination: Subscriber<T>);\n    protected _next(observable: any): void;\n    protected _complete(): void;\n    notifyNext(outerValue: T, innerValue: T, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, T>): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/range.d.ts",
    "content": "import { SchedulerAction, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\n/**\n * Creates an Observable that emits a sequence of numbers within a specified\n * range.\n *\n * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n *\n * ![](range.png)\n *\n * `range` operator emits a range of sequential integers, in order, where you\n * select the `start` of the range and its `length`. By default, uses no\n * {@link SchedulerLike} and just delivers the notifications synchronously, but may use\n * an optional {@link SchedulerLike} to regulate those deliveries.\n *\n * ## Example\n * Emits the numbers 1 to 10</caption>\n * ```javascript\n * const numbers = range(1, 10);\n * numbers.subscribe(x => console.log(x));\n * ```\n * @see {@link timer}\n * @see {@link index/interval}\n *\n * @param {number} [start=0] The value of the first integer in the sequence.\n * @param {number} [count=0] The number of sequential integers to generate.\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emissions of the notifications.\n * @return {Observable} An Observable of numbers that emits a finite range of\n * sequential integers.\n * @static true\n * @name range\n * @owner Observable\n */\nexport declare function range(start?: number, count?: number, scheduler?: SchedulerLike): Observable<number>;\n/** @internal */\nexport declare function dispatch(this: SchedulerAction<any>, state: any): void;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/scalar.d.ts",
    "content": "import { Observable } from '../Observable';\nexport declare function scalar<T>(value: T): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/SubscribeOnObservable.d.ts",
    "content": "import { SchedulerLike, SchedulerAction } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nexport interface DispatchArg<T> {\n    source: Observable<T>;\n    subscriber: Subscriber<T>;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport declare class SubscribeOnObservable<T> extends Observable<T> {\n    source: Observable<T>;\n    private delayTime;\n    private scheduler;\n    /** @nocollapse */\n    static create<T>(source: Observable<T>, delay?: number, scheduler?: SchedulerLike): Observable<T>;\n    /** @nocollapse */\n    static dispatch<T>(this: SchedulerAction<T>, arg: DispatchArg<T>): Subscription;\n    constructor(source: Observable<T>, delayTime?: number, scheduler?: SchedulerLike);\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<T>): Subscription;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/throwError.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * ![](throw.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then emit an error\n * ```javascript\n * import { throwError, concat, of } from 'rxjs';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Logs:\n * // 7\n * // Error: oops!\n * ```\n *\n * ---\n *\n * ### Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13\n * ```javascript\n * import { throwError, interval, of } from 'rxjs';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 2\n *     ? throwError('Twos are bad')\n *     : of('a', 'b', 'c')\n *   ),\n * ).subscribe(x => console.log(x), e => console.error(e));\n *\n * // Logs:\n * // a\n * // b\n * // c\n * // a\n * // b\n * // c\n * // Twos are bad\n * ```\n *\n * @see {@link Observable}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throwError\n * @owner Observable\n */\nexport declare function throwError(error: any, scheduler?: SchedulerLike): Observable<never>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/timer.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n/**\n * Creates an Observable that starts emitting after an `dueTime` and\n * emits ever increasing numbers after each `period` of time thereafter.\n *\n * <span class=\"informal\">Its like {@link index/interval}, but you can specify when\n * should the emissions start.</span>\n *\n * ![](timer.png)\n *\n * `timer` returns an Observable that emits an infinite sequence of ascending\n * integers, with a constant interval of time, `period` of your choosing\n * between those emissions. The first emission happens after the specified\n * `dueTime`. The initial delay may be a `Date`. By default, this\n * operator uses the {@link asyncScheduler} {@link SchedulerLike} to provide a notion of time, but you\n * may pass any {@link SchedulerLike} to it. If `period` is not specified, the output\n * Observable emits only one value, `0`. Otherwise, it emits an infinite\n * sequence.\n *\n * ## Examples\n * ### Emits ascending numbers, one every second (1000ms), starting after 3 seconds\n * ```javascript\n * const numbers = timer(3000, 1000);\n * numbers.subscribe(x => console.log(x));\n * ```\n *\n * ### Emits one number after five seconds\n * ```javascript\n * const numbers = timer(5000);\n * numbers.subscribe(x => console.log(x));\n * ```\n * @see {@link index/interval}\n * @see {@link delay}\n *\n * @param {number|Date} [dueTime] The initial delay time specified as a Date object or as an integer denoting\n * milliseconds to wait before emitting the first value of 0`.\n * @param {number|SchedulerLike} [periodOrScheduler] The period of time between emissions of the\n * subsequent numbers.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a `0` after the\n * `dueTime` and ever increasing numbers after each `period` of time\n * thereafter.\n * @static true\n * @name timer\n * @owner Observable\n */\nexport declare function timer(dueTime?: number | Date, periodOrScheduler?: number | SchedulerLike, scheduler?: SchedulerLike): Observable<number>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/using.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { Unsubscribable, ObservableInput } from '../types';\n/**\n * Creates an Observable that uses a resource which will be disposed at the same time as the Observable.\n *\n * <span class=\"informal\">Use it when you catch yourself cleaning up after an Observable.</span>\n *\n * `using` is a factory operator, which accepts two functions. First function returns a disposable resource.\n * It can be an arbitrary object that implements `unsubscribe` method. Second function will be injected with\n * that object and should return an Observable. That Observable can use resource object during its execution.\n * Both functions passed to `using` will be called every time someone subscribes - neither an Observable nor\n * resource object will be shared in any way between subscriptions.\n *\n * When Observable returned by `using` is subscribed, Observable returned from the second function will be subscribed\n * as well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output\n * Observable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,\n * the `unsubscribe` method on resource object will be called. This can be used to do any necessary clean up, which\n * otherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone\n * cancels subscription to an Observable via `unsubscribe`, so `using` can be used as a hook, allowing you to make\n * sure that all resources which need to exist during an Observable execution will be disposed at appropriate time.\n *\n * @see {@link defer}\n *\n * @param {function(): ISubscription} resourceFactory A function which creates any resource object\n * that implements `unsubscribe` method.\n * @param {function(resource: ISubscription): Observable<T>} observableFactory A function which\n * creates an Observable, that can use injected resource object.\n * @return {Observable<T>} An Observable that behaves the same as Observable returned by `observableFactory`, but\n * which - when completed, errored or unsubscribed - will also call `unsubscribe` on created resource object.\n */\nexport declare function using<T>(resourceFactory: () => Unsubscribable | void, observableFactory: (resource: Unsubscribable | void) => ObservableInput<T> | void): Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/observable/zip.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { ObservableInput } from '../types';\nimport { Subscriber } from '../Subscriber';\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport declare function zip<T, R>(v1: ObservableInput<T>, resultSelector: (v1: T) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport declare function zip<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, resultSelector: (v1: T, v2: T2) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport declare function zip<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport declare function zip<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport declare function zip<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport declare function zip<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\nexport declare function zip<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport declare function zip<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport declare function zip<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport declare function zip<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport declare function zip<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\nexport declare function zip<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport declare function zip<R>(array: ObservableInput<any>[]): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport declare function zip<T, R>(array: ObservableInput<T>[], resultSelector: (...values: Array<T>) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport declare function zip<R>(array: ObservableInput<any>[], resultSelector: (...values: Array<any>) => R): Observable<R>;\nexport declare function zip<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport declare function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport declare function zip<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport declare class ZipOperator<T, R> implements Operator<T, R> {\n    resultSelector: (...values: Array<any>) => R;\n    constructor(resultSelector?: (...values: Array<any>) => R);\n    call(subscriber: Subscriber<R>, source: any): any;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class ZipSubscriber<T, R> extends Subscriber<T> {\n    private values;\n    private resultSelector;\n    private iterators;\n    private active;\n    constructor(destination: Subscriber<R>, resultSelector?: (...values: Array<any>) => R, values?: any);\n    protected _next(value: any): void;\n    protected _complete(): void;\n    notifyInactive(): void;\n    checkIterators(): void;\n    protected _tryresultSelector(args: any[]): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/Observer.d.ts",
    "content": "import { Observer } from './types';\nexport declare const empty: Observer<any>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/Operator.d.ts",
    "content": "import { Subscriber } from './Subscriber';\nimport { TeardownLogic } from './types';\nexport interface Operator<T, R> {\n    call(subscriber: Subscriber<R>, source: any): TeardownLogic;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/audit.d.ts",
    "content": "import { MonoTypeOperatorFunction, SubscribableOrPromise } from '../types';\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](audit.png)\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(audit(ev => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport declare function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/auditTime.d.ts",
    "content": "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * ![](auditTime.png)\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link SchedulerLike} for managing timers.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(auditTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport declare function auditTime<T>(duration: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/buffer.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * ![](buffer.png)\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * ## Example\n *\n * On every click, emit array of most recent interval events\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const interval = interval(1000);\n * const buffered = interval.pipe(buffer(clicks));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport declare function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/bufferCount.d.ts",
    "content": "import { OperatorFunction } from '../types';\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * ![](bufferCount.png)\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * ## Examples\n *\n * Emit the last two click events as an array\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferCount(2));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * On every click, emit the last two click events as an array\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferCount(2, 1));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport declare function bufferCount<T>(bufferSize: number, startBufferEvery?: number): OperatorFunction<T, T[]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/bufferTime.d.ts",
    "content": "import { OperatorFunction, SchedulerLike } from '../types';\nexport declare function bufferTime<T>(bufferTimeSpan: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\nexport declare function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number | null | undefined, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\nexport declare function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number | null | undefined, maxBufferSize: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/bufferToggle.d.ts",
    "content": "import { OperatorFunction, SubscribableOrPromise } from '../types';\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * ![](bufferToggle.png)\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * ## Example\n *\n * Every other second, emit the click events from the next 500ms\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const buffered = clicks.pipe(bufferToggle(openings, i =>\n *   i % 2 ? interval(500) : empty()\n * ));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport declare function bufferToggle<T, O>(openings: SubscribableOrPromise<O>, closingSelector: (value: O) => SubscribableOrPromise<any>): OperatorFunction<T, T[]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/bufferWhen.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * ![](bufferWhen.png)\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * ## Example\n *\n * Emit an array of the last clicks every [1-5] random seconds\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferWhen(() =>\n *   interval(1000 + Math.random() * 4000)\n * ));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport declare function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/catchError.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ObservableInput, OperatorFunction, MonoTypeOperatorFunction } from '../types';\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * ![](catch.png)\n *\n * ## Examples\n * Continues with a different Observable when there's an error\n *\n * ```javascript\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *   \t   if (n == 4) {\n * \t       throw 'four!';\n *       }\n *\t     return n;\n *     }),\n *     catchError(err => of('I', 'II', 'III', 'IV', 'V')),\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n * ```\n *\n * Retries the caught source Observable again in case of error, similar to retry() operator\n *\n * ```javascript\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *   \t   if (n === 4) {\n *   \t     throw 'four!';\n *       }\n * \t     return n;\n *     }),\n *     catchError((err, caught) => caught),\n *     take(30),\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n * ```\n *\n * Throws a new error when the source Observable throws an error\n *\n * ```javascript\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *       if (n == 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError(err => {\n *       throw 'error in source. Details: ' + err;\n *     }),\n *   )\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n * ```\n *\n *  @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport declare function catchError<T>(selector: (err: any, caught: Observable<T>) => never): MonoTypeOperatorFunction<T>;\nexport declare function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/combineAll.d.ts",
    "content": "import { OperatorFunction, ObservableInput } from '../types';\nexport declare function combineAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;\nexport declare function combineAll<T>(): OperatorFunction<any, T[]>;\nexport declare function combineAll<T, R>(project: (...values: T[]) => R): OperatorFunction<ObservableInput<T>, R>;\nexport declare function combineAll<R>(project: (...values: Array<any>) => R): OperatorFunction<any, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/combineLatest.d.ts",
    "content": "import { ObservableInput, OperatorFunction } from '../types';\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport declare function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/concat.d.ts",
    "content": "import { ObservableInput, OperatorFunction, MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/** @deprecated Deprecated in favor of static concat. */\nexport declare function concat<T>(scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static concat. */\nexport declare function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;\n/** @deprecated Deprecated in favor of static concat. */\nexport declare function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;\n/** @deprecated Deprecated in favor of static concat. */\nexport declare function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;\n/** @deprecated Deprecated in favor of static concat. */\nexport declare function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\n/** @deprecated Deprecated in favor of static concat. */\nexport declare function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\n/** @deprecated Deprecated in favor of static concat. */\nexport declare function concat<T>(...observables: Array<ObservableInput<T> | SchedulerLike>): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static concat. */\nexport declare function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike>): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/concatAll.d.ts",
    "content": "import { OperatorFunction, ObservableInput } from '../types';\nexport declare function concatAll<T>(): OperatorFunction<ObservableInput<T>, T>;\nexport declare function concatAll<R>(): OperatorFunction<any, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/concatMap.d.ts",
    "content": "import { ObservableInput, OperatorFunction } from '../types';\nexport declare function concatMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport declare function concatMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport declare function concatMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/concatMapTo.d.ts",
    "content": "import { ObservableInput, OperatorFunction } from '../types';\nexport declare function concatMapTo<T>(observable: ObservableInput<T>): OperatorFunction<any, T>;\n/** @deprecated */\nexport declare function concatMapTo<T>(observable: ObservableInput<T>, resultSelector: undefined): OperatorFunction<any, T>;\n/** @deprecated */\nexport declare function concatMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/count.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * ![](count.png)\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * ## Examples\n *\n * Counts how many seconds have passed before the first click happened\n * ```javascript\n * const seconds = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const secondsBeforeClick = seconds.pipe(takeUntil(clicks));\n * const result = secondsBeforeClick.pipe(count());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Counts how many odd numbers are there between 1 and 7\n * ```javascript\n * const numbers = range(1, 7);\n * const result = numbers.pipe(count(i => i % 2 === 1));\n * result.subscribe(x => console.log(x));\n * // Results in:\n * // 4\n * ```\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport declare function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/debounce.d.ts",
    "content": "import { MonoTypeOperatorFunction, SubscribableOrPromise } from '../types';\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * ![](debounce.png)\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * ## Example\n * Emit the most recent click after a burst of clicks\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(debounce(() => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport declare function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/debounceTime.d.ts",
    "content": "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * ![](debounceTime.png)\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link SchedulerLike} for\n * managing timers.\n *\n * ## Example\n * Emit the most recent click after a burst of clicks\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(debounceTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport declare function debounceTime<T>(dueTime: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/defaultIfEmpty.d.ts",
    "content": "import { OperatorFunction, MonoTypeOperatorFunction } from '../types';\nexport declare function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport declare function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/delay.d.ts",
    "content": "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * ![](delay.png)\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * ## Examples\n * Delay each click by one second\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const delayedClicks = clicks.pipe(delay(1000)); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * Delay all clicks until a future date happens\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const date = new Date('March 15, 2050 12:00:00'); // in the future\n * const delayedClicks = clicks.pipe(delay(date)); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport declare function delay<T>(delay: number | Date, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/delayWhen.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\n/** @deprecated In future versions, empty notifiers will no longer re-emit the source value on the output observable. */\nexport declare function delayWhen<T>(delayDurationSelector: (value: T, index: number) => Observable<never>, subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T>;\nexport declare function delayWhen<T>(delayDurationSelector: (value: T, index: number) => Observable<any>, subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/dematerialize.d.ts",
    "content": "import { Notification } from '../Notification';\nimport { OperatorFunction } from '../types';\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * ![](dematerialize.png)\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * ## Example\n * Convert an Observable of Notifications to an actual Observable\n * ```javascript\n * const notifA = new Notification('N', 'A');\n * const notifB = new Notification('N', 'B');\n * const notifE = new Notification('E', undefined,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * const materialized = of(notifA, notifB, notifE);\n * const upperCase = materialized.pipe(dematerialize());\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n * ```\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport declare function dematerialize<T>(): OperatorFunction<Notification<T>, T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/distinct.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * ## Examples\n * A simple example with numbers\n * ```javascript\n * of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1).pipe(\n *     distinct(),\n *   )\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n * ```\n *\n * An example using a keySelector function\n * ```typescript\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *   ).pipe(\n *     distinct((p: Person) => p.name),\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * ```\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport declare function distinct<T, K>(keySelector?: (value: T) => K, flushes?: Observable<any>): MonoTypeOperatorFunction<T>;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n    private keySelector;\n    private values;\n    constructor(destination: Subscriber<T>, keySelector: (value: T) => K, flushes: Observable<any>);\n    notifyNext(outerValue: T, innerValue: T, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, T>): void;\n    notifyError(error: any, innerSub: InnerSubscriber<T, T>): void;\n    protected _next(value: T): void;\n    private _useKeySelector;\n    private _finalizeNext;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/distinctUntilChanged.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\nexport declare function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport declare function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/distinctUntilKeyChanged.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\nexport declare function distinctUntilKeyChanged<T>(key: keyof T): MonoTypeOperatorFunction<T>;\nexport declare function distinctUntilKeyChanged<T, K extends keyof T>(key: K, compare: (x: T[K], y: T[K]) => boolean): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/elementAt.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * ![](elementAt.png)\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * ## Example\n * Emit only the third click event\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(elementAt(2));\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n * ```\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport declare function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/endWith.d.ts",
    "content": "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nexport declare function endWith<T>(scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport declare function endWith<T>(v1: T, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport declare function endWith<T>(v1: T, v2: T, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport declare function endWith<T>(v1: T, v2: T, v3: T, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport declare function endWith<T>(v1: T, v2: T, v3: T, v4: T, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport declare function endWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport declare function endWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport declare function endWith<T>(...array: Array<T | SchedulerLike>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/every.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * ## Example\n * A simple example emitting true if all elements are less than 5, false otherwise\n * ```javascript\n *  of(1, 2, 3, 4, 5, 6).pipe(\n *     every(x => x < 5),\n * )\n * .subscribe(x => console.log(x)); // -> false\n * ```\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport declare function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): OperatorFunction<T, boolean>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/exhaust.d.ts",
    "content": "import { ObservableInput, OperatorFunction } from '../types';\nexport declare function exhaust<T>(): OperatorFunction<ObservableInput<T>, T>;\nexport declare function exhaust<R>(): OperatorFunction<any, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/exhaustMap.d.ts",
    "content": "import { ObservableInput, OperatorFunction } from '../types';\nexport declare function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported. Use inner map instead. */\nexport declare function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported. Use inner map instead. */\nexport declare function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/expand.d.ts",
    "content": "import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { MonoTypeOperatorFunction, OperatorFunction, ObservableInput, SchedulerLike } from '../types';\nexport declare function expand<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, R>;\nexport declare function expand<T>(project: (value: T, index: number) => ObservableInput<T>, concurrent?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport declare class ExpandOperator<T, R> implements Operator<T, R> {\n    private project;\n    private concurrent;\n    private scheduler;\n    constructor(project: (value: T, index: number) => ObservableInput<R>, concurrent: number, scheduler: SchedulerLike);\n    call(subscriber: Subscriber<R>, source: any): any;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n    private project;\n    private concurrent;\n    private scheduler;\n    private index;\n    private active;\n    private hasCompleted;\n    private buffer;\n    constructor(destination: Subscriber<R>, project: (value: T, index: number) => ObservableInput<R>, concurrent: number, scheduler: SchedulerLike);\n    private static dispatch;\n    protected _next(value: any): void;\n    private subscribeToProjection;\n    protected _complete(): void;\n    notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, R>): void;\n    notifyComplete(innerSub: Subscription): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/filter.d.ts",
    "content": "import { OperatorFunction, MonoTypeOperatorFunction } from '../types';\nexport declare function filter<T, S extends T>(predicate: (value: T, index: number) => value is S, thisArg?: any): OperatorFunction<T, S>;\nexport declare function filter<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/finalize.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport declare function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/find.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\nexport declare function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S, thisArg?: any): OperatorFunction<T, S | undefined>;\nexport declare function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): OperatorFunction<T, T | undefined>;\nexport declare class FindValueOperator<T> implements Operator<T, T | number | undefined> {\n    private predicate;\n    private source;\n    private yieldIndex;\n    private thisArg?;\n    constructor(predicate: (value: T, index: number, source: Observable<T>) => boolean, source: Observable<T>, yieldIndex: boolean, thisArg?: any);\n    call(observer: Subscriber<T>, source: any): any;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class FindValueSubscriber<T> extends Subscriber<T> {\n    private predicate;\n    private source;\n    private yieldIndex;\n    private thisArg?;\n    private index;\n    constructor(destination: Subscriber<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean, source: Observable<T>, yieldIndex: boolean, thisArg?: any);\n    private notifyComplete;\n    protected _next(value: T): void;\n    protected _complete(): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/findIndex.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * ![](findIndex.png)\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * ## Example\n * Emit the index of first click that happens on a DIV element\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(findIndex(ev => ev.target.tagName === 'DIV'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport declare function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): OperatorFunction<T, number>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/first.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../../internal/types';\nexport declare function first<T, D = T>(predicate?: null, defaultValue?: D): OperatorFunction<T, T | D>;\nexport declare function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S, defaultValue?: S): OperatorFunction<T, S>;\nexport declare function first<T, D = T>(predicate: (value: T, index: number, source: Observable<T>) => boolean, defaultValue?: D): OperatorFunction<T, T | D>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/groupBy.d.ts",
    "content": "import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\nexport declare function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport declare function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport declare function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport declare function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport interface RefCountSubscription {\n    count: number;\n    unsubscribe: () => void;\n    closed: boolean;\n    attemptedToUnsubscribe: boolean;\n}\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport declare class GroupedObservable<K, T> extends Observable<T> {\n    key: K;\n    private groupSubject;\n    private refCountSubscription?;\n    /** @deprecated Do not construct this type. Internal use only */\n    constructor(key: K, groupSubject: Subject<T>, refCountSubscription?: RefCountSubscription);\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<T>): Subscription;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/ignoreElements.d.ts",
    "content": "import { OperatorFunction } from '../types';\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * ![](ignoreElements.png)\n *\n * ## Examples\n * ### Ignores emitted values, reacts to observable's completion.\n * ```javascript\n * of('you', 'talking', 'to', 'me').pipe(\n *   ignoreElements(),\n * )\n * .subscribe(\n *   word => console.log(word),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'the end'\n * ```\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport declare function ignoreElements(): OperatorFunction<any, never>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/index.d.ts",
    "content": "export { audit } from './audit';\nexport { auditTime } from './auditTime';\nexport { buffer } from './buffer';\nexport { bufferCount } from './bufferCount';\nexport { bufferTime } from './bufferTime';\nexport { bufferToggle } from './bufferToggle';\nexport { bufferWhen } from './bufferWhen';\nexport { catchError } from './catchError';\nexport { combineAll } from './combineAll';\nexport { combineLatest } from './combineLatest';\nexport { concat } from './concat';\nexport { concatAll } from './concatAll';\nexport { concatMap } from './concatMap';\nexport { concatMapTo } from './concatMapTo';\nexport { count } from './count';\nexport { debounce } from './debounce';\nexport { debounceTime } from './debounceTime';\nexport { defaultIfEmpty } from './defaultIfEmpty';\nexport { delay } from './delay';\nexport { delayWhen } from './delayWhen';\nexport { dematerialize } from './dematerialize';\nexport { distinct } from './distinct';\nexport { distinctUntilChanged } from './distinctUntilChanged';\nexport { distinctUntilKeyChanged } from './distinctUntilKeyChanged';\nexport { elementAt } from './elementAt';\nexport { every } from './every';\nexport { exhaust } from './exhaust';\nexport { exhaustMap } from './exhaustMap';\nexport { expand } from './expand';\nexport { filter } from './filter';\nexport { finalize } from './finalize';\nexport { find } from './find';\nexport { findIndex } from './findIndex';\nexport { first } from './first';\nexport { groupBy } from './groupBy';\nexport { ignoreElements } from './ignoreElements';\nexport { isEmpty } from './isEmpty';\nexport { last } from './last';\nexport { map } from './map';\nexport { mapTo } from './mapTo';\nexport { materialize } from './materialize';\nexport { max } from './max';\nexport { merge } from './merge';\nexport { mergeAll } from './mergeAll';\nexport { mergeMap } from './mergeMap';\nexport { mergeMap as flatMap } from './mergeMap';\nexport { mergeMapTo } from './mergeMapTo';\nexport { mergeScan } from './mergeScan';\nexport { min } from './min';\nexport { multicast } from './multicast';\nexport { observeOn } from './observeOn';\nexport { onErrorResumeNext } from './onErrorResumeNext';\nexport { pairwise } from './pairwise';\nexport { partition } from './partition';\nexport { pluck } from './pluck';\nexport { publish } from './publish';\nexport { publishBehavior } from './publishBehavior';\nexport { publishLast } from './publishLast';\nexport { publishReplay } from './publishReplay';\nexport { race } from './race';\nexport { reduce } from './reduce';\nexport { repeat } from './repeat';\nexport { repeatWhen } from './repeatWhen';\nexport { retry } from './retry';\nexport { retryWhen } from './retryWhen';\nexport { refCount } from './refCount';\nexport { sample } from './sample';\nexport { sampleTime } from './sampleTime';\nexport { scan } from './scan';\nexport { sequenceEqual } from './sequenceEqual';\nexport { share } from './share';\nexport { shareReplay } from './shareReplay';\nexport { single } from './single';\nexport { skip } from './skip';\nexport { skipLast } from './skipLast';\nexport { skipUntil } from './skipUntil';\nexport { skipWhile } from './skipWhile';\nexport { startWith } from './startWith';\nexport { subscribeOn } from './subscribeOn';\nexport { switchAll } from './switchAll';\nexport { switchMap } from './switchMap';\nexport { switchMapTo } from './switchMapTo';\nexport { take } from './take';\nexport { takeLast } from './takeLast';\nexport { takeUntil } from './takeUntil';\nexport { takeWhile } from './takeWhile';\nexport { tap } from './tap';\nexport { throttle } from './throttle';\nexport { throttleTime } from './throttleTime';\nexport { timeInterval } from './timeInterval';\nexport { timeout } from './timeout';\nexport { timeoutWith } from './timeoutWith';\nexport { timestamp } from './timestamp';\nexport { toArray } from './toArray';\nexport { window } from './window';\nexport { windowCount } from './windowCount';\nexport { windowTime } from './windowTime';\nexport { windowToggle } from './windowToggle';\nexport { windowWhen } from './windowWhen';\nexport { withLatestFrom } from './withLatestFrom';\nexport { zip } from './zip';\nexport { zipAll } from './zipAll';\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/isEmpty.d.ts",
    "content": "import { OperatorFunction } from '../types';\nexport declare function isEmpty<T>(): OperatorFunction<T, boolean>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/last.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../../internal/types';\nexport declare function last<T, D = T>(predicate?: null, defaultValue?: D): OperatorFunction<T, T | D>;\nexport declare function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S, defaultValue?: S): OperatorFunction<T, S>;\nexport declare function last<T, D = T>(predicate: (value: T, index: number, source: Observable<T>) => boolean, defaultValue?: D): OperatorFunction<T, T | D>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/map.d.ts",
    "content": "import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport declare function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R>;\nexport declare class MapOperator<T, R> implements Operator<T, R> {\n    private project;\n    private thisArg;\n    constructor(project: (value: T, index: number) => R, thisArg: any);\n    call(subscriber: Subscriber<R>, source: any): any;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/mapTo.d.ts",
    "content": "import { OperatorFunction } from '../types';\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * ![](mapTo.png)\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * ## Example\n * Map every click to the string 'Hi'\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const greetings = clicks.pipe(mapTo('Hi'));\n * greetings.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport declare function mapTo<T, R>(value: R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/materialize.d.ts",
    "content": "import { Notification } from '../Notification';\nimport { OperatorFunction } from '../types';\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * ![](materialize.png)\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * ## Example\n * Convert a faulty Observable to an Observable of Notifications\n * ```javascript\n * const letters = of('a', 'b', 13, 'd');\n * const upperCase = letters.pipe(map(x => x.toUpperCase()));\n * const materialized = upperCase.pipe(materialize());\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n * ```\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport declare function materialize<T>(): OperatorFunction<T, Notification<T>>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/max.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * ![](max.png)\n *\n * ## Examples\n * Get the maximal value of a series of numbers\n * ```javascript\n * of(5, 4, 7, 2, 8).pipe(\n *   max(),\n * )\n * .subscribe(x => console.log(x)); // -> 8\n * ```\n *\n * Use a comparer function to get the maximal item\n * ```typescript\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * of<Person>(\n *   {age: 7, name: 'Foo'},\n *   {age: 5, name: 'Bar'},\n *   {age: 9, name: 'Beer'},\n * ).pipe(\n *   max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1),\n * )\n * .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * ```\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport declare function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/merge.d.ts",
    "content": "import { ObservableInput, OperatorFunction, MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T>(scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T>(concurrent?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T>(...observables: Array<ObservableInput<T> | SchedulerLike | number>): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static merge. */\nexport declare function merge<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number>): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/mergeAll.d.ts",
    "content": "import { OperatorFunction, ObservableInput } from '../types';\nexport declare function mergeAll<T>(concurrent?: number): OperatorFunction<ObservableInput<T>, T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/mergeMap.d.ts",
    "content": "import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { ObservableInput, OperatorFunction } from '../types';\nexport declare function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport declare function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport declare function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\nexport declare class MergeMapOperator<T, R> implements Operator<T, R> {\n    private project;\n    private concurrent;\n    constructor(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number);\n    call(observer: Subscriber<R>, source: any): any;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class MergeMapSubscriber<T, R> extends OuterSubscriber<T, R> {\n    private project;\n    private concurrent;\n    private hasCompleted;\n    private buffer;\n    private active;\n    protected index: number;\n    constructor(destination: Subscriber<R>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number);\n    protected _next(value: T): void;\n    protected _tryNext(value: T): void;\n    private _innerSub;\n    protected _complete(): void;\n    notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, R>): void;\n    notifyComplete(innerSub: Subscription): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/mergeMapTo.d.ts",
    "content": "import { OperatorFunction } from '../../internal/types';\nimport { ObservableInput } from '../types';\nexport declare function mergeMapTo<T>(innerObservable: ObservableInput<T>, concurrent?: number): OperatorFunction<any, T>;\n/** @deprecated */\nexport declare function mergeMapTo<T, I, R>(innerObservable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/mergeScan.d.ts",
    "content": "import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { ObservableInput, OperatorFunction } from '../types';\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * ## Example\n * Count the number of click events\n * ```javascript\n * const click$ = fromEvent(document, 'click');\n * const one$ = click$.pipe(mapTo(1));\n * const seed = 0;\n * const count$ = one$.pipe(\n *   mergeScan((acc, one) => of(acc + one), seed),\n * );\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n * ```\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport declare function mergeScan<T, R>(accumulator: (acc: R, value: T) => ObservableInput<R>, seed: R, concurrent?: number): OperatorFunction<T, R>;\nexport declare class MergeScanOperator<T, R> implements Operator<T, R> {\n    private accumulator;\n    private seed;\n    private concurrent;\n    constructor(accumulator: (acc: R, value: T) => ObservableInput<R>, seed: R, concurrent: number);\n    call(subscriber: Subscriber<R>, source: any): any;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n    private accumulator;\n    private acc;\n    private concurrent;\n    private hasValue;\n    private hasCompleted;\n    private buffer;\n    private active;\n    protected index: number;\n    constructor(destination: Subscriber<R>, accumulator: (acc: R, value: T) => ObservableInput<R>, acc: R, concurrent: number);\n    protected _next(value: any): void;\n    private _innerSub;\n    protected _complete(): void;\n    notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, R>): void;\n    notifyComplete(innerSub: Subscription): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/min.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * ![](min.png)\n *\n * ## Examples\n * Get the minimal value of a series of numbers\n * ```javascript\n * of(5, 4, 7, 2, 8).pipe(\n *   min(),\n * )\n * .subscribe(x => console.log(x)); // -> 2\n * ```\n *\n * Use a comparer function to get the minimal item\n * ```typescript\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * of<Person>(\n *   {age: 7, name: 'Foo'},\n *   {age: 5, name: 'Bar'},\n *   {age: 9, name: 'Beer'},\n * ).pipe(\n *   min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1),\n * )\n * .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * ```\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport declare function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/multicast.d.ts",
    "content": "import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../types';\nexport declare function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport declare function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport declare function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport declare function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<R>>;\nexport declare function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\nexport declare class MulticastOperator<T, R> implements Operator<T, R> {\n    private subjectFactory;\n    private selector;\n    constructor(subjectFactory: () => Subject<T>, selector: (source: Observable<T>) => Observable<R>);\n    call(subscriber: Subscriber<R>, source: any): any;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/observeOn.d.ts",
    "content": "import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n * Ensure values in subscribe are called just before browser repaint.\n * ```javascript\n * const intervals = interval(10);                // Intervals are scheduled\n *                                                // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler),          // ...but we will observe on animationFrame\n * )                                              // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport declare function observeOn<T>(scheduler: SchedulerLike, delay?: number): MonoTypeOperatorFunction<T>;\nexport declare class ObserveOnOperator<T> implements Operator<T, T> {\n    private scheduler;\n    private delay;\n    constructor(scheduler: SchedulerLike, delay?: number);\n    call(subscriber: Subscriber<T>, source: any): TeardownLogic;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class ObserveOnSubscriber<T> extends Subscriber<T> {\n    private scheduler;\n    private delay;\n    /** @nocollapse */\n    static dispatch(this: SchedulerAction<ObserveOnMessage>, arg: ObserveOnMessage): void;\n    constructor(destination: Subscriber<T>, scheduler: SchedulerLike, delay?: number);\n    private scheduleMessage;\n    protected _next(value: T): void;\n    protected _error(err: any): void;\n    protected _complete(): void;\n}\nexport declare class ObserveOnMessage {\n    notification: Notification<any>;\n    destination: PartialObserver<any>;\n    constructor(notification: Notification<any>, destination: PartialObserver<any>);\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/onErrorResumeNext.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ObservableInput, OperatorFunction } from '../types';\nexport declare function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport declare function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport declare function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport declare function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport declare function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R>;\nexport declare function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport declare function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport declare function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport declare function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport declare function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport declare function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport declare function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\nexport declare function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport declare function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/pairwise.d.ts",
    "content": "import { OperatorFunction } from '../types';\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * ![](pairwise.png)\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * ## Example\n * On every click (starting from the second), emit the relative distance to the previous click\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const pairs = clicks.pipe(pairwise());\n * const distance = pairs.pipe(\n *   map(pair => {\n *     const x0 = pair[0].clientX;\n *     const y0 = pair[0].clientY;\n *     const x1 = pair[1].clientX;\n *     const y1 = pair[1].clientY;\n *     return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n *   }),\n * );\n * distance.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport declare function pairwise<T>(): OperatorFunction<T, [T, T]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/partition.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { UnaryFunction } from '../types';\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * ![](partition.png)\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * ## Example\n * Partition click events into those on DIV elements and those elsewhere\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const parts = clicks.pipe(partition(ev => ev.target.tagName === 'DIV'));\n * const clicksOnDivs = parts[0];\n * const clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n * ```\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport declare function partition<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/pluck.d.ts",
    "content": "import { OperatorFunction } from '../types';\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * ![](pluck.png)\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * ## Example\n * Map every click to the tagName of the clicked target element\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const tagNames = clicks.pipe(pluck('target', 'tagName'));\n * tagNames.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport declare function pluck<T, R>(...properties: string[]): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/publish.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../types';\nexport declare function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport declare function publish<T, R>(selector: OperatorFunction<T, R>): OperatorFunction<T, R>;\nexport declare function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/publishBehavior.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../types';\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport declare function publishBehavior<T>(value: T): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/publishLast.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../types';\n/**\n * Returns a connectable observable sequence that shares a single subscription to the\n * underlying sequence containing only the last notification.\n *\n * ![](publishLast.png)\n *\n * Similar to {@link publish}, but it waits until the source observable completes and stores\n * the last emitted value.\n * Similarly to {@link publishReplay} and {@link publishBehavior}, this keeps storing the last\n * value even if it has no more subscribers. If subsequent subscriptions happen, they will\n * immediately get that last stored value and complete.\n *\n * ## Example\n *\n * ```js\n * const connectable =\n *   interval(1000)\n *     .pipe(\n *       tap(x => console.log(\"side effect\", x)),\n *       take(3),\n *       publishLast());\n *\n * connectable.subscribe(\n *   x => console.log(  \"Sub. A\", x),\n *   err => console.log(\"Sub. A Error\", err),\n *   () => console.log( \"Sub. A Complete\"));\n *\n * connectable.subscribe(\n *   x => console.log(  \"Sub. B\", x),\n *   err => console.log(\"Sub. B Error\", err),\n *   () => console.log( \"Sub. B Complete\"));\n *\n * connectable.connect();\n *\n * // Results:\n * //    \"side effect 0\"\n * //    \"side effect 1\"\n * //    \"side effect 2\"\n * //    \"Sub. A 2\"\n * //    \"Sub. B 2\"\n * //    \"Sub. A Complete\"\n * //    \"Sub. B Complete\"\n * ```\n *\n * @see {@link ConnectableObservable}\n * @see {@link publish}\n * @see {@link publishReplay}\n * @see {@link publishBehavior}\n *\n * @return {ConnectableObservable} An observable sequence that contains the elements of a\n * sequence produced by multicasting the source sequence.\n * @method publishLast\n * @owner Observable\n */\nexport declare function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/publishReplay.d.ts",
    "content": "import { MonoTypeOperatorFunction, OperatorFunction, SchedulerLike } from '../types';\nexport declare function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport declare function publishReplay<T, R>(bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>, scheduler?: SchedulerLike): OperatorFunction<T, R>;\nexport declare function publishReplay<T>(bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/race.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../types';\n/** @deprecated Deprecated in favor of static race. */\nexport declare function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static race. */\nexport declare function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static race. */\nexport declare function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static race. */\nexport declare function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/reduce.d.ts",
    "content": "import { OperatorFunction, MonoTypeOperatorFunction } from '../types';\nexport declare function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport declare function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport declare function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/refCount.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\nexport declare function refCount<T>(): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/repeat.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * ![](repeat.png)\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport declare function repeat<T>(count?: number): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/repeatWhen.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * ![](repeatWhen.png)\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport declare function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/retry.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * ![](retry.png)\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport declare function retry<T>(count?: number): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/retryWhen.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * ![](retryWhen.png)\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport declare function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/sample.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * ![](sample.png)\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * ## Example\n * On every click, sample the most recent \"seconds\" timer\n * ```javascript\n * const seconds = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = seconds.pipe(sample(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport declare function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/sampleTime.d.ts",
    "content": "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * ![](sampleTime.png)\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * ## Example\n * Every second, emit the most recent click at most once\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(sampleTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport declare function sampleTime<T>(period: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/scan.d.ts",
    "content": "import { OperatorFunction, MonoTypeOperatorFunction } from '../types';\nexport declare function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport declare function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport declare function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/sequenceEqual.d.ts",
    "content": "import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Observer, OperatorFunction } from '../types';\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * ![](sequenceEqual.png)\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * ## Example\n * figure out if the Konami code matches\n * ```javascript\n * const codes = from([\n *   'ArrowUp',\n *   'ArrowUp',\n *   'ArrowDown',\n *   'ArrowDown',\n *   'ArrowLeft',\n *   'ArrowRight',\n *   'ArrowLeft',\n *   'ArrowRight',\n *   'KeyB',\n *   'KeyA',\n *   'Enter', // no start key, clearly.\n * ]);\n *\n * const keys = fromEvent(document, 'keyup').pipe(map(e => e.code));\n * const matches = keys.pipe(\n *   bufferCount(11, 1),\n *   mergeMap(\n *     last11 => from(last11).pipe(sequenceEqual(codes)),\n *   ),\n * );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport declare function sequenceEqual<T>(compareTo: Observable<T>, comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean>;\nexport declare class SequenceEqualOperator<T> implements Operator<T, boolean> {\n    private compareTo;\n    private comparor;\n    constructor(compareTo: Observable<T>, comparor: (a: T, b: T) => boolean);\n    call(subscriber: Subscriber<boolean>, source: any): any;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n    private compareTo;\n    private comparor;\n    private _a;\n    private _b;\n    private _oneComplete;\n    constructor(destination: Observer<R>, compareTo: Observable<T>, comparor: (a: T, b: T) => boolean);\n    protected _next(value: T): void;\n    _complete(): void;\n    checkValues(): void;\n    emit(value: boolean): void;\n    nextB(value: T): void;\n    completeB(): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/share.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for `multicast(() => new Subject()), refCount()`.\n *\n * ![](share.png)\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport declare function share<T>(): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/shareReplay.d.ts",
    "content": "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/**\n * Share source and replay specified number of emissions on subscription.\n *\n * This operator is a specialization of `replay` that connects to a source observable\n * and multicasts through a `ReplaySubject` constructed with the specified arguments.\n * A successfully completed source will stay cached in the `shareReplayed observable` forever,\n * but an errored source can be retried.\n *\n * ## Why use shareReplay?\n * You generally want to use `shareReplay` when you have side-effects or taxing computations\n * that you do not wish to be executed amongst multiple subscribers.\n * It may also be valuable in situations where you know you will have late subscribers to\n * a stream that need access to previously emitted values.\n * This ability to replay values on subscription is what differentiates {@link share} and `shareReplay`.\n *\n * ![](shareReplay.png)\n *\n * ## Example\n * ```javascript\n * const obs$ = interval(1000);\n * const subscription = obs$.pipe(\n *   take(4),\n *   shareReplay(3)\n * );\n * subscription.subscribe(x => console.log('source A: ', x));\n * subscription.subscribe(y => console.log('source B: ', y));\n *\n * ```\n *\n * @see {@link publish}\n * @see {@link share}\n * @see {@link publishReplay}\n *\n * @param {Number} [bufferSize=Number.POSITIVE_INFINITY] Maximum element count of the replay buffer.\n * @param {Number} [windowTime=Number.POSITIVE_INFINITY] Maximum time length of the replay buffer in milliseconds.\n * @param {Scheduler} [scheduler] Scheduler where connected observers within the selector function\n * will be invoked on.\n * @return {Observable} An observable sequence that contains the elements of a sequence produced\n * by multicasting the source sequence within a selector function.\n * @method shareReplay\n * @owner Observable\n */\nexport declare function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/single.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable\n * emits items but none match the specified predicate then `undefined` is emiited.\n *\n * ![](single.png)\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate or `undefined` when no items match.\n *\n * @method single\n * @owner Observable\n */\nexport declare function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/skip.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * ![](skip.png)\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport declare function skip<T>(count: number): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/skipLast.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * ![](skipLast.png)\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * ## Example\n * Skip the last 2 values of an Observable with many values\n * ```javascript\n * const many = range(1, 5);\n * const skipLastTwo = many.pipe(skipLast(2));\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n * ```\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport declare function skipLast<T>(count: number): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/skipUntil.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * ![](skipUntil.png)\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport declare function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/skipWhile.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * ![](skipWhile.png)\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport declare function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/startWith.d.ts",
    "content": "import { MonoTypeOperatorFunction, OperatorFunction, SchedulerLike } from '../types';\nexport declare function startWith<T>(scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport declare function startWith<T, D = T>(v1: D, scheduler?: SchedulerLike): OperatorFunction<T, T | D>;\nexport declare function startWith<T, D = T, E = T>(v1: D, v2: E, scheduler?: SchedulerLike): OperatorFunction<T, T | D | E>;\nexport declare function startWith<T, D = T, E = T, F = T>(v1: D, v2: E, v3: F, scheduler?: SchedulerLike): OperatorFunction<T, T | D | E | F>;\nexport declare function startWith<T, D = T, E = T, F = T, G = T>(v1: D, v2: E, v3: F, v4: G, scheduler?: SchedulerLike): OperatorFunction<T, T | D | E | F | G>;\nexport declare function startWith<T, D = T, E = T, F = T, G = T, H = T>(v1: D, v2: E, v3: F, v4: G, v5: H, scheduler?: SchedulerLike): OperatorFunction<T, T | D | E | F | G | H>;\nexport declare function startWith<T, D = T, E = T, F = T, G = T, H = T, I = T>(v1: D, v2: E, v3: F, v4: G, v5: H, v6: I, scheduler?: SchedulerLike): OperatorFunction<T, T | D | E | F | G | H | I>;\nexport declare function startWith<T, D = T>(...array: Array<D | SchedulerLike>): OperatorFunction<T, T | D>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/subscribeOn.d.ts",
    "content": "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/**\n * Asynchronously subscribes Observers to this Observable on the specified {@link SchedulerLike}.\n *\n * ![](subscribeOn.png)\n *\n * @param {SchedulerLike} scheduler - The {@link SchedulerLike} to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified {@link SchedulerLike}.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport declare function subscribeOn<T>(scheduler: SchedulerLike, delay?: number): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/switchAll.d.ts",
    "content": "import { OperatorFunction, ObservableInput } from '../types';\nexport declare function switchAll<T>(): OperatorFunction<ObservableInput<T>, T>;\nexport declare function switchAll<R>(): OperatorFunction<any, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/switchMap.d.ts",
    "content": "import { ObservableInput, OperatorFunction } from '../types';\nexport declare function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported, use inner map instead */\nexport declare function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported, use inner map instead */\nexport declare function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/switchMapTo.d.ts",
    "content": "import { ObservableInput, OperatorFunction } from '../types';\nexport declare function switchMapTo<R>(observable: ObservableInput<R>): OperatorFunction<any, R>;\n/** @deprecated resultSelector is no longer supported. Switch to using switchMap with an inner map */\nexport declare function switchMapTo<T, R>(observable: ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported. Switch to using switchMap with an inner map */\nexport declare function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/take.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * ![](take.png)\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * ## Example\n * Take the first 5 seconds of an infinite 1-second interval Observable\n * ```javascript\n * import { interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const intervalCount = interval(1000);\n * const takeFive = intervalCount.pipe(take(5));\n * takeFive.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * // 3\n * // 4\n * ```\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport declare function take<T>(count: number): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/takeLast.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * ![](takeLast.png)\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * ## Example\n * Take the last 3 values of an Observable with many values\n * ```javascript\n * const many = range(1, 100);\n * const lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport declare function takeLast<T>(count: number): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/takeUntil.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * ![](takeUntil.png)\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * ## Example\n * Tick every second until the first click happens\n * ```javascript\n * const interval = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = interval.pipe(takeUntil(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport declare function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/takeWhile.d.ts",
    "content": "import { OperatorFunction, MonoTypeOperatorFunction } from '../types';\nexport declare function takeWhile<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\nexport declare function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/tap.d.ts",
    "content": "import { MonoTypeOperatorFunction, PartialObserver } from '../types';\nexport declare function tap<T>(next?: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport declare function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/throttle.d.ts",
    "content": "import { MonoTypeOperatorFunction, SubscribableOrPromise } from '../types';\nexport interface ThrottleConfig {\n    leading?: boolean;\n    trailing?: boolean;\n}\nexport declare const defaultThrottleConfig: ThrottleConfig;\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](throttle.png)\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * ## Example\n * Emit clicks at a rate of at most one click per second\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(throttle(ev => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport declare function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<any>, config?: ThrottleConfig): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/throttleTime.d.ts",
    "content": "import { ThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * ![](throttleTime.png)\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link SchedulerLike} for managing timers.\n *\n * ## Example\n * Emit clicks at a rate of at most one click per second\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(throttleTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the throttling.\n * @param {Object} config a configuration object to define `leading` and\n * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport declare function throttleTime<T>(duration: number, scheduler?: SchedulerLike, config?: ThrottleConfig): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/throwIfEmpty.d.ts",
    "content": "import { MonoTypeOperatorFunction } from '../types';\n/**\n * If the source observable completes without emitting a value, it will emit\n * an error. The error will be created at that time by the optional\n * `errorFactory` argument, otherwise, the error will be {@link EmptyError}.\n *\n * ![](throwIfEmpty.png)\n *\n * ## Example\n * ```javascript\n * const click$ = fromEvent(button, 'click');\n *\n * clicks$.pipe(\n *   takeUntil(timer(1000)),\n *   throwIfEmpty(\n *     () => new Error('the button was not clicked within 1 second')\n *   ),\n * )\n * .subscribe({\n *   next() { console.log('The button was clicked'); },\n *   error(err) { console.error(err); },\n * });\n * ```\n *\n * @param {Function} [errorFactory] A factory function called to produce the\n * error to be thrown when the source observable completes without emitting a\n * value.\n */\nexport declare const throwIfEmpty: <T>(errorFactory?: () => any) => MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/timeInterval.d.ts",
    "content": "import { SchedulerLike, OperatorFunction } from '../types';\nexport declare function timeInterval<T>(scheduler?: SchedulerLike): OperatorFunction<T, TimeInterval<T>>;\nexport declare class TimeInterval<T> {\n    value: T;\n    interval: number;\n    constructor(value: T, interval: number);\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/timeout.d.ts",
    "content": "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * ![](timeout.png)\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * ## Examples\n * Check if ticks are emitted within certain timespan\n * ```javascript\n * const seconds = interval(1000);\n *\n * seconds.pipe(timeout(1100))      // Let's use bigger timespan to be safe,\n *                                  // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err),     // Will never be called.\n * );\n *\n * seconds.pipe(timeout(900))\n * .subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err),     // Will emit error before even first value is emitted,\n *                                  // since it did not arrive within 900ms period.\n * );\n * ```\n *\n * Use Date to check if Observable completed\n * ```javascript\n * const seconds = interval(1000);\n *\n * seconds.pipe(\n *   timeout(new Date(\"December 17, 2020 03:24:00\")),\n * )\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err)      // On December 17, 2020 at 03:24:00 it will emit an error,\n *                                  // since Observable did not complete by then.\n * );\n * ```\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {SchedulerLike} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport declare function timeout<T>(due: number | Date, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/timeoutWith.d.ts",
    "content": "import { ObservableInput, OperatorFunction, SchedulerLike } from '../types';\nexport declare function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: SchedulerLike): OperatorFunction<T, T | R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/timestamp.d.ts",
    "content": "import { OperatorFunction, SchedulerLike, Timestamp as TimestampInterface } from '../types';\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport declare function timestamp<T>(scheduler?: SchedulerLike): OperatorFunction<T, Timestamp<T>>;\nexport declare class Timestamp<T> implements TimestampInterface<T> {\n    value: T;\n    timestamp: number;\n    constructor(value: T, timestamp: number);\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/toArray.d.ts",
    "content": "import { OperatorFunction } from '../types';\nexport declare function toArray<T>(): OperatorFunction<T, T[]>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/window.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * ![](window.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * ## Example\n * In every window of 1 second each, emit at most 2 click events\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const interval = interval(1000);\n * const result = clicks.pipe(\n *   window(interval),\n *   map(win => win.take(2)), // each window has at most 2 emissions\n *   mergeAll(),              // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport declare function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/windowCount.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowCount.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * ## Examples\n * Ignore every 3rd click event, starting from the first one\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowCount(3)),\n *   map(win => win.skip(1)), // skip first of every 3 clicks\n *   mergeAll(),              // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Ignore every 3rd click event, starting from the third one\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowCount(2, 3),\n *   mergeAll(),              // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport declare function windowCount<T>(windowSize: number, startWindowEvery?: number): OperatorFunction<T, Observable<T>>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/windowTime.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction, SchedulerLike } from '../types';\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowTime.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * ## Examples\n * In every window of 1 second each, emit at most 2 click events\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowTime(1000),\n *   map(win => win.take(2)),   // each window has at most 2 emissions\n *   mergeAll(),                // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Every 5 seconds start a window 1 second long, and emit at most 2 click events per window\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowTime(1000, 5000),\n *   map(win => win.take(2)),   // each window has at most 2 emissions\n *   mergeAll(),                // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Same as example above but with maxWindowCount instead of take\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowTime(1000, 5000, 2), // each window has still at most 2 emissions\n *   mergeAll(),                // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {SchedulerLike} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport declare function windowTime<T>(windowTimeSpan: number, scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\nexport declare function windowTime<T>(windowTimeSpan: number, windowCreationInterval: number, scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\nexport declare function windowTime<T>(windowTimeSpan: number, windowCreationInterval: number, maxWindowSize: number, scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/windowToggle.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowToggle.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * ## Example\n * Every other second, emit the click events from the next 500ms\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const result = clicks.pipe(\n *   windowToggle(openings, i => i % 2 ? interval(500) : empty()),\n *   mergeAll(),\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport declare function windowToggle<T, O>(openings: Observable<O>, closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/windowWhen.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowWhen.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * ## Example\n * Emit only the first two clicks events in every window of [1-5] random seconds\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowWhen(() => interval(1000 + Math.random() * 4000)),\n *   map(win => win.pipe(take(2))),     // each window has at most 2 emissions\n *   mergeAll(),                        // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport declare function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/withLatestFrom.d.ts",
    "content": "import { ObservableInput, OperatorFunction } from '../types';\nexport declare function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport declare function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport declare function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport declare function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport declare function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport declare function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R>;\nexport declare function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport declare function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport declare function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport declare function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport declare function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]>;\nexport declare function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport declare function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport declare function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/zip.d.ts",
    "content": "import { ObservableInput, OperatorFunction } from '../types';\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport declare function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/operators/zipAll.d.ts",
    "content": "import { OperatorFunction, ObservableInput } from '../types';\nexport declare function zipAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;\nexport declare function zipAll<T>(): OperatorFunction<any, T[]>;\nexport declare function zipAll<T, R>(project: (...values: T[]) => R): OperatorFunction<ObservableInput<T>, R>;\nexport declare function zipAll<R>(project: (...values: Array<any>) => R): OperatorFunction<any, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/OuterSubscriber.d.ts",
    "content": "import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class OuterSubscriber<T, R> extends Subscriber<T> {\n    notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, R>): void;\n    notifyError(error: any, innerSub: InnerSubscriber<T, R>): void;\n    notifyComplete(innerSub: InnerSubscriber<T, R>): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/ReplaySubject.d.ts",
    "content": "import { Subject } from './Subject';\nimport { SchedulerLike } from './types';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n/**\n * A variant of Subject that \"replays\" or emits old values to new subscribers.\n * It buffers a set number of values and will emit those values immediately to\n * any new subscribers in addition to emitting new values to existing subscribers.\n *\n * @class ReplaySubject<T>\n */\nexport declare class ReplaySubject<T> extends Subject<T> {\n    private scheduler?;\n    private _events;\n    private _bufferSize;\n    private _windowTime;\n    private _infiniteTimeWindow;\n    constructor(bufferSize?: number, windowTime?: number, scheduler?: SchedulerLike);\n    private nextInfiniteTimeWindow;\n    private nextTimeWindow;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<T>): Subscription;\n    _getNow(): number;\n    private _trimBufferThenGetEvents;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/Rx.d.ts",
    "content": "export { Subject, AnonymousSubject } from './Subject';\nexport { Observable } from './Observable';\nexport { config } from './config';\nimport 'rxjs-compat/add/observable/bindCallback';\nimport 'rxjs-compat/add/observable/bindNodeCallback';\nimport 'rxjs-compat/add/observable/combineLatest';\nimport 'rxjs-compat/add/observable/concat';\nimport 'rxjs-compat/add/observable/defer';\nimport 'rxjs-compat/add/observable/empty';\nimport 'rxjs-compat/add/observable/forkJoin';\nimport 'rxjs-compat/add/observable/from';\nimport 'rxjs-compat/add/observable/fromEvent';\nimport 'rxjs-compat/add/observable/fromEventPattern';\nimport 'rxjs-compat/add/observable/fromPromise';\nimport 'rxjs-compat/add/observable/generate';\nimport 'rxjs-compat/add/observable/if';\nimport 'rxjs-compat/add/observable/interval';\nimport 'rxjs-compat/add/observable/merge';\nimport 'rxjs-compat/add/observable/race';\nimport 'rxjs-compat/add/observable/never';\nimport 'rxjs-compat/add/observable/of';\nimport 'rxjs-compat/add/observable/onErrorResumeNext';\nimport 'rxjs-compat/add/observable/pairs';\nimport 'rxjs-compat/add/observable/range';\nimport 'rxjs-compat/add/observable/using';\nimport 'rxjs-compat/add/observable/throw';\nimport 'rxjs-compat/add/observable/timer';\nimport 'rxjs-compat/add/observable/zip';\nimport 'rxjs-compat/add/observable/dom/ajax';\nimport 'rxjs-compat/add/observable/dom/webSocket';\nimport 'rxjs-compat/add/operator/buffer';\nimport 'rxjs-compat/add/operator/bufferCount';\nimport 'rxjs-compat/add/operator/bufferTime';\nimport 'rxjs-compat/add/operator/bufferToggle';\nimport 'rxjs-compat/add/operator/bufferWhen';\nimport 'rxjs-compat/add/operator/catch';\nimport 'rxjs-compat/add/operator/combineAll';\nimport 'rxjs-compat/add/operator/combineLatest';\nimport 'rxjs-compat/add/operator/concat';\nimport 'rxjs-compat/add/operator/concatAll';\nimport 'rxjs-compat/add/operator/concatMap';\nimport 'rxjs-compat/add/operator/concatMapTo';\nimport 'rxjs-compat/add/operator/count';\nimport 'rxjs-compat/add/operator/dematerialize';\nimport 'rxjs-compat/add/operator/debounce';\nimport 'rxjs-compat/add/operator/debounceTime';\nimport 'rxjs-compat/add/operator/defaultIfEmpty';\nimport 'rxjs-compat/add/operator/delay';\nimport 'rxjs-compat/add/operator/delayWhen';\nimport 'rxjs-compat/add/operator/distinct';\nimport 'rxjs-compat/add/operator/distinctUntilChanged';\nimport 'rxjs-compat/add/operator/distinctUntilKeyChanged';\nimport 'rxjs-compat/add/operator/do';\nimport 'rxjs-compat/add/operator/exhaust';\nimport 'rxjs-compat/add/operator/exhaustMap';\nimport 'rxjs-compat/add/operator/expand';\nimport 'rxjs-compat/add/operator/elementAt';\nimport 'rxjs-compat/add/operator/filter';\nimport 'rxjs-compat/add/operator/finally';\nimport 'rxjs-compat/add/operator/find';\nimport 'rxjs-compat/add/operator/findIndex';\nimport 'rxjs-compat/add/operator/first';\nimport 'rxjs-compat/add/operator/groupBy';\nimport 'rxjs-compat/add/operator/ignoreElements';\nimport 'rxjs-compat/add/operator/isEmpty';\nimport 'rxjs-compat/add/operator/audit';\nimport 'rxjs-compat/add/operator/auditTime';\nimport 'rxjs-compat/add/operator/last';\nimport 'rxjs-compat/add/operator/let';\nimport 'rxjs-compat/add/operator/every';\nimport 'rxjs-compat/add/operator/map';\nimport 'rxjs-compat/add/operator/mapTo';\nimport 'rxjs-compat/add/operator/materialize';\nimport 'rxjs-compat/add/operator/max';\nimport 'rxjs-compat/add/operator/merge';\nimport 'rxjs-compat/add/operator/mergeAll';\nimport 'rxjs-compat/add/operator/mergeMap';\nimport 'rxjs-compat/add/operator/mergeMapTo';\nimport 'rxjs-compat/add/operator/mergeScan';\nimport 'rxjs-compat/add/operator/min';\nimport 'rxjs-compat/add/operator/multicast';\nimport 'rxjs-compat/add/operator/observeOn';\nimport 'rxjs-compat/add/operator/onErrorResumeNext';\nimport 'rxjs-compat/add/operator/pairwise';\nimport 'rxjs-compat/add/operator/partition';\nimport 'rxjs-compat/add/operator/pluck';\nimport 'rxjs-compat/add/operator/publish';\nimport 'rxjs-compat/add/operator/publishBehavior';\nimport 'rxjs-compat/add/operator/publishReplay';\nimport 'rxjs-compat/add/operator/publishLast';\nimport 'rxjs-compat/add/operator/race';\nimport 'rxjs-compat/add/operator/reduce';\nimport 'rxjs-compat/add/operator/repeat';\nimport 'rxjs-compat/add/operator/repeatWhen';\nimport 'rxjs-compat/add/operator/retry';\nimport 'rxjs-compat/add/operator/retryWhen';\nimport 'rxjs-compat/add/operator/sample';\nimport 'rxjs-compat/add/operator/sampleTime';\nimport 'rxjs-compat/add/operator/scan';\nimport 'rxjs-compat/add/operator/sequenceEqual';\nimport 'rxjs-compat/add/operator/share';\nimport 'rxjs-compat/add/operator/shareReplay';\nimport 'rxjs-compat/add/operator/single';\nimport 'rxjs-compat/add/operator/skip';\nimport 'rxjs-compat/add/operator/skipLast';\nimport 'rxjs-compat/add/operator/skipUntil';\nimport 'rxjs-compat/add/operator/skipWhile';\nimport 'rxjs-compat/add/operator/startWith';\nimport 'rxjs-compat/add/operator/subscribeOn';\nimport 'rxjs-compat/add/operator/switch';\nimport 'rxjs-compat/add/operator/switchMap';\nimport 'rxjs-compat/add/operator/switchMapTo';\nimport 'rxjs-compat/add/operator/take';\nimport 'rxjs-compat/add/operator/takeLast';\nimport 'rxjs-compat/add/operator/takeUntil';\nimport 'rxjs-compat/add/operator/takeWhile';\nimport 'rxjs-compat/add/operator/throttle';\nimport 'rxjs-compat/add/operator/throttleTime';\nimport 'rxjs-compat/add/operator/timeInterval';\nimport 'rxjs-compat/add/operator/timeout';\nimport 'rxjs-compat/add/operator/timeoutWith';\nimport 'rxjs-compat/add/operator/timestamp';\nimport 'rxjs-compat/add/operator/toArray';\nimport 'rxjs-compat/add/operator/toPromise';\nimport 'rxjs-compat/add/operator/window';\nimport 'rxjs-compat/add/operator/windowCount';\nimport 'rxjs-compat/add/operator/windowTime';\nimport 'rxjs-compat/add/operator/windowToggle';\nimport 'rxjs-compat/add/operator/windowWhen';\nimport 'rxjs-compat/add/operator/withLatestFrom';\nimport 'rxjs-compat/add/operator/zip';\nimport 'rxjs-compat/add/operator/zipAll';\nexport { Operator } from './Operator';\nexport { Observer } from './types';\nexport { Subscription } from './Subscription';\nexport { Subscriber } from './Subscriber';\nexport { AsyncSubject } from './AsyncSubject';\nexport { ReplaySubject } from './ReplaySubject';\nexport { BehaviorSubject } from './BehaviorSubject';\nexport { ConnectableObservable } from './observable/ConnectableObservable';\nexport { Notification } from './Notification';\nexport { EmptyError } from './util/EmptyError';\nexport { ArgumentOutOfRangeError } from './util/ArgumentOutOfRangeError';\nexport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nexport { TimeoutError } from './util/TimeoutError';\nexport { UnsubscriptionError } from './util/UnsubscriptionError';\nexport { TimeInterval } from './operators/timeInterval';\nexport { Timestamp } from './operators/timestamp';\nexport { TestScheduler } from './testing/TestScheduler';\nexport { VirtualTimeScheduler } from './scheduler/VirtualTimeScheduler';\nexport { AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError } from './observable/dom/AjaxObservable';\nexport { pipe } from './util/pipe';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport * as _operators from './operators/index';\nexport declare const operators: typeof _operators;\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {SchedulerLike} asap Schedules on the micro task queue, which is the same\n * queue used for promises. Basically after the current job, but before the next job.\n * Use this for asynchronous conversions.\n * @property {SchedulerLike} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {SchedulerLike} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting.\n * @property {SchedulerLike} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n */\ndeclare let Scheduler: {\n    asap: AsapScheduler;\n    queue: QueueScheduler;\n    animationFrame: AnimationFrameScheduler;\n    async: AsyncScheduler;\n};\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\ndeclare let Symbol: {\n    rxSubscriber: string | symbol;\n    observable: string | symbol;\n    iterator: symbol;\n};\nexport { Scheduler, Symbol };\n"
  },
  {
    "path": "node_modules/rxjs/internal/Scheduler.d.ts",
    "content": "import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\nimport { SchedulerLike, SchedulerAction } from './types';\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an `Action`.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}\n */\nexport declare class Scheduler implements SchedulerLike {\n    private SchedulerAction;\n    /**\n     * Note: the extra arrow function wrapper is to make testing by overriding\n     * Date.now easier.\n     * @nocollapse\n     */\n    static now: () => number;\n    constructor(SchedulerAction: typeof Action, now?: () => number);\n    /**\n     * A getter method that returns a number representing the current time\n     * (at the time this function was called) according to the scheduler's own\n     * internal clock.\n     * @return {number} A number that represents the current time. May or may not\n     * have a relation to wall-clock time. May or may not refer to a time unit\n     * (e.g. milliseconds).\n     */\n    now: () => number;\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/Action.d.ts",
    "content": "import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n/**\n * A unit of work to be executed in a `scheduler`. An action is typically\n * created from within a {@link SchedulerLike} and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport declare class Action<T> extends Subscription {\n    constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void);\n    /**\n     * Schedules this action on its parent {@link SchedulerLike} for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    schedule(state?: T, delay?: number): Subscription;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/animationFrame.d.ts",
    "content": "import { AnimationFrameScheduler } from './AnimationFrameScheduler';\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link asyncScheduler} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * ## Example\n * Schedule div height animation\n * ```javascript\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.animationFrame.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n * ```\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\nexport declare const animationFrame: AnimationFrameScheduler;\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/AnimationFrameAction.d.ts",
    "content": "import { AsyncAction } from './AsyncAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nimport { SchedulerAction } from '../types';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class AnimationFrameAction<T> extends AsyncAction<T> {\n    protected scheduler: AnimationFrameScheduler;\n    protected work: (this: SchedulerAction<T>, state?: T) => void;\n    constructor(scheduler: AnimationFrameScheduler, work: (this: SchedulerAction<T>, state?: T) => void);\n    protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay?: number): any;\n    protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay?: number): any;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/AnimationFrameScheduler.d.ts",
    "content": "import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nexport declare class AnimationFrameScheduler extends AsyncScheduler {\n    flush(action?: AsyncAction<any>): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/asap.d.ts",
    "content": "import { AsapScheduler } from './AsapScheduler';\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link asyncScheduler} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * ## Example\n * Compare async and asap scheduler<\n * ```javascript\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n * ```\n * @static true\n * @name asap\n * @owner Scheduler\n */\nexport declare const asap: AsapScheduler;\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/AsapAction.d.ts",
    "content": "import { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class AsapAction<T> extends AsyncAction<T> {\n    protected scheduler: AsapScheduler;\n    protected work: (this: SchedulerAction<T>, state?: T) => void;\n    constructor(scheduler: AsapScheduler, work: (this: SchedulerAction<T>, state?: T) => void);\n    protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay?: number): any;\n    protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay?: number): any;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/AsapScheduler.d.ts",
    "content": "import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nexport declare class AsapScheduler extends AsyncScheduler {\n    flush(action?: AsyncAction<any>): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/async.d.ts",
    "content": "import { AsyncScheduler } from './AsyncScheduler';\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asapScheduler} scheduler.\n *\n * ## Examples\n * Use async scheduler to delay task\n * ```javascript\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n * ```\n *\n * Use async scheduler to repeat task in intervals\n * ```javascript\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n * ```\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexport declare const async: AsyncScheduler;\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/AsyncAction.d.ts",
    "content": "import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class AsyncAction<T> extends Action<T> {\n    protected scheduler: AsyncScheduler;\n    protected work: (this: SchedulerAction<T>, state?: T) => void;\n    id: any;\n    state: T;\n    delay: number;\n    protected pending: boolean;\n    constructor(scheduler: AsyncScheduler, work: (this: SchedulerAction<T>, state?: T) => void);\n    schedule(state?: T, delay?: number): Subscription;\n    protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay?: number): any;\n    protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay?: number): any;\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    execute(state: T, delay: number): any;\n    protected _execute(state: T, delay: number): any;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _unsubscribe(): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/AsyncScheduler.d.ts",
    "content": "import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nexport declare class AsyncScheduler extends Scheduler {\n    static delegate?: Scheduler;\n    actions: Array<AsyncAction<any>>;\n    /**\n     * A flag to indicate whether the Scheduler is currently executing a batch of\n     * queued actions.\n     * @type {boolean}\n     * @deprecated internal use only\n     */\n    active: boolean;\n    /**\n     * An internal ID used to track the latest asynchronous task such as those\n     * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n     * others.\n     * @type {any}\n     * @deprecated internal use only\n     */\n    scheduled: any;\n    constructor(SchedulerAction: typeof Action, now?: () => number);\n    schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n    flush(action: AsyncAction<any>): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/queue.d.ts",
    "content": "import { QueueScheduler } from './QueueScheduler';\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link asyncScheduler} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * ## Examples\n * Schedule recursively first, then do something\n * ```javascript\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n * ```\n *\n * Reschedule itself recursively\n * ```javascript\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n * ```\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexport declare const queue: QueueScheduler;\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/QueueAction.d.ts",
    "content": "import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\nimport { SchedulerAction } from '../types';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class QueueAction<T> extends AsyncAction<T> {\n    protected scheduler: QueueScheduler;\n    protected work: (this: SchedulerAction<T>, state?: T) => void;\n    constructor(scheduler: QueueScheduler, work: (this: SchedulerAction<T>, state?: T) => void);\n    schedule(state?: T, delay?: number): Subscription;\n    execute(state: T, delay: number): any;\n    protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay?: number): any;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/QueueScheduler.d.ts",
    "content": "import { AsyncScheduler } from './AsyncScheduler';\nexport declare class QueueScheduler extends AsyncScheduler {\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/scheduler/VirtualTimeScheduler.d.ts",
    "content": "import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { SchedulerAction } from '../types';\nexport declare class VirtualTimeScheduler extends AsyncScheduler {\n    maxFrames: number;\n    protected static frameTimeFactor: number;\n    frame: number;\n    index: number;\n    constructor(SchedulerAction?: typeof AsyncAction, maxFrames?: number);\n    /**\n     * Prompt the Scheduler to execute all of its queued actions, therefore\n     * clearing its queue.\n     * @return {void}\n     */\n    flush(): void;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @nodoc\n */\nexport declare class VirtualAction<T> extends AsyncAction<T> {\n    protected scheduler: VirtualTimeScheduler;\n    protected work: (this: SchedulerAction<T>, state?: T) => void;\n    protected index: number;\n    protected active: boolean;\n    constructor(scheduler: VirtualTimeScheduler, work: (this: SchedulerAction<T>, state?: T) => void, index?: number);\n    schedule(state?: T, delay?: number): Subscription;\n    protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay?: number): any;\n    protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay?: number): any;\n    protected _execute(state: T, delay: number): any;\n    static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>): 1 | -1 | 0;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/Subject.d.ts",
    "content": "import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\n/**\n * @class SubjectSubscriber<T>\n */\nexport declare class SubjectSubscriber<T> extends Subscriber<T> {\n    protected destination: Subject<T>;\n    constructor(destination: Subject<T>);\n}\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observables. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n *\n * @class Subject<T>\n */\nexport declare class Subject<T> extends Observable<T> implements SubscriptionLike {\n    observers: Observer<T>[];\n    closed: boolean;\n    isStopped: boolean;\n    hasError: boolean;\n    thrownError: any;\n    constructor();\n    /**@nocollapse */\n    static create: Function;\n    lift<R>(operator: Operator<T, R>): Observable<R>;\n    next(value?: T): void;\n    error(err: any): void;\n    complete(): void;\n    unsubscribe(): void;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _trySubscribe(subscriber: Subscriber<T>): TeardownLogic;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<T>): Subscription;\n    /**\n     * Creates a new Observable with this Subject as the source. You can do this\n     * to create customize Observer-side logic of the Subject and conceal it from\n     * code that uses the Observable.\n     * @return {Observable} Observable that the Subject casts to\n     */\n    asObservable(): Observable<T>;\n}\n/**\n * @class AnonymousSubject<T>\n */\nexport declare class AnonymousSubject<T> extends Subject<T> {\n    protected destination?: Observer<T>;\n    constructor(destination?: Observer<T>, source?: Observable<T>);\n    next(value: T): void;\n    error(err: any): void;\n    complete(): void;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<T>): Subscription;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/SubjectSubscription.d.ts",
    "content": "import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class SubjectSubscription<T> extends Subscription {\n    subject: Subject<T>;\n    subscriber: Observer<T>;\n    closed: boolean;\n    constructor(subject: Subject<T>, subscriber: Observer<T>);\n    unsubscribe(): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/Subscriber.d.ts",
    "content": "import { Observer, PartialObserver } from './types';\nimport { Subscription } from './Subscription';\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport declare class Subscriber<T> extends Subscription implements Observer<T> {\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     * @nocollapse\n     */\n    static create<T>(next?: (x?: T) => void, error?: (e?: any) => void, complete?: () => void): Subscriber<T>;\n    /** @internal */ syncErrorValue: any;\n    /** @internal */ syncErrorThrown: boolean;\n    /** @internal */ syncErrorThrowable: boolean;\n    protected isStopped: boolean;\n    protected destination: PartialObserver<any> | Subscriber<any>;\n    private _parentSubscription;\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void), error?: (e?: any) => void, complete?: () => void);\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    next(value?: T): void;\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached `Error`. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    error(err?: any): void;\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    complete(): void;\n    unsubscribe(): void;\n    protected _next(value: T): void;\n    protected _error(err: any): void;\n    protected _complete(): void;\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _unsubscribeAndRecycle(): Subscriber<T>;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class SafeSubscriber<T> extends Subscriber<T> {\n    private _parentSubscriber;\n    private _context;\n    constructor(_parentSubscriber: Subscriber<T>, observerOrNext?: PartialObserver<T> | ((value: T) => void), error?: (e?: any) => void, complete?: () => void);\n    next(value?: T): void;\n    error(err?: any): void;\n    complete(): void;\n    private __tryOrUnsub;\n    private __tryOrSetError;\n    /** @internal This is an internal implementation detail, do not use. */\n    _unsubscribe(): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/Subscription.d.ts",
    "content": "import { SubscriptionLike, TeardownLogic } from './types';\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport declare class Subscription implements SubscriptionLike {\n    /** @nocollapse */\n    static EMPTY: Subscription;\n    /**\n     * A flag to indicate whether this Subscription has already been unsubscribed.\n     * @type {boolean}\n     */\n    closed: boolean;\n    /** @internal */\n    protected _parent: Subscription;\n    /** @internal */\n    protected _parents: Subscription[];\n    /** @internal */\n    private _subscriptions;\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    constructor(unsubscribe?: () => void);\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    unsubscribe(): void;\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    add(teardown: TeardownLogic): Subscription;\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    remove(subscription: Subscription): void;\n    /** @internal */\n    private _addParent;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/symbol/iterator.d.ts",
    "content": "export declare function getSymbolIterator(): symbol;\nexport declare const iterator: symbol;\n/**\n * @deprecated use {@link iterator} instead\n */\nexport declare const $$iterator: symbol;\n"
  },
  {
    "path": "node_modules/rxjs/internal/symbol/observable.d.ts",
    "content": "/** Symbol.observable addition */\ndeclare global {\n    interface SymbolConstructor {\n        readonly observable: symbol;\n    }\n}\n/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport declare const observable: string | symbol;\n"
  },
  {
    "path": "node_modules/rxjs/internal/symbol/rxSubscriber.d.ts",
    "content": "/** @deprecated do not use, this is no longer checked by RxJS internals */\nexport declare const rxSubscriber: string | symbol;\n/**\n * @deprecated use rxSubscriber instead\n */\nexport declare const $$rxSubscriber: string | symbol;\n"
  },
  {
    "path": "node_modules/rxjs/internal/testing/ColdObservable.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { Subscriber } from '../Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n    messages: TestMessage[];\n    subscriptions: SubscriptionLog[];\n    scheduler: Scheduler;\n    logSubscribedFrame: () => number;\n    logUnsubscribedFrame: (index: number) => void;\n    constructor(messages: TestMessage[], scheduler: Scheduler);\n    scheduleMessages(subscriber: Subscriber<any>): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/testing/HotObservable.d.ts",
    "content": "import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n    messages: TestMessage[];\n    subscriptions: SubscriptionLog[];\n    scheduler: Scheduler;\n    logSubscribedFrame: () => number;\n    logUnsubscribedFrame: (index: number) => void;\n    constructor(messages: TestMessage[], scheduler: Scheduler);\n    /** @deprecated This is an internal implementation detail, do not use. */\n    _subscribe(subscriber: Subscriber<any>): Subscription;\n    setup(): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/testing/SubscriptionLog.d.ts",
    "content": "export declare class SubscriptionLog {\n    subscribedFrame: number;\n    unsubscribedFrame: number;\n    constructor(subscribedFrame: number, unsubscribedFrame?: number);\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/testing/SubscriptionLoggable.d.ts",
    "content": "import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\nexport declare class SubscriptionLoggable {\n    subscriptions: SubscriptionLog[];\n    scheduler: Scheduler;\n    logSubscribedFrame(): number;\n    logUnsubscribedFrame(index: number): void;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/testing/TestMessage.d.ts",
    "content": "import { Notification } from '../Notification';\nexport interface TestMessage {\n    frame: number;\n    notification: Notification<any>;\n    isGhost?: boolean;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/testing/TestScheduler.d.ts",
    "content": "import { Observable } from '../Observable';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { VirtualTimeScheduler } from '../scheduler/VirtualTimeScheduler';\nexport interface RunHelpers {\n    cold: typeof TestScheduler.prototype.createColdObservable;\n    hot: typeof TestScheduler.prototype.createHotObservable;\n    flush: typeof TestScheduler.prototype.flush;\n    expectObservable: typeof TestScheduler.prototype.expectObservable;\n    expectSubscriptions: typeof TestScheduler.prototype.expectSubscriptions;\n}\nexport declare type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport declare type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\nexport declare class TestScheduler extends VirtualTimeScheduler {\n    assertDeepEqual: (actual: any, expected: any) => boolean | void;\n    readonly hotObservables: HotObservable<any>[];\n    readonly coldObservables: ColdObservable<any>[];\n    private flushTests;\n    private runMode;\n    constructor(assertDeepEqual: (actual: any, expected: any) => boolean | void);\n    createTime(marbles: string): number;\n    /**\n     * @param marbles A diagram in the marble DSL. Letters map to keys in `values` if provided.\n     * @param values Values to use for the letters in `marbles`. If ommitted, the letters themselves are used.\n     * @param error The error to use for the `#` marble (if present).\n     */\n    createColdObservable<T = string>(marbles: string, values?: {\n        [marble: string]: T;\n    }, error?: any): ColdObservable<T>;\n    /**\n     * @param marbles A diagram in the marble DSL. Letters map to keys in `values` if provided.\n     * @param values Values to use for the letters in `marbles`. If ommitted, the letters themselves are used.\n     * @param error The error to use for the `#` marble (if present).\n     */\n    createHotObservable<T = string>(marbles: string, values?: {\n        [marble: string]: T;\n    }, error?: any): HotObservable<T>;\n    private materializeInnerObservable;\n    expectObservable(observable: Observable<any>, subscriptionMarbles?: string): ({\n        toBe: observableToBeFn;\n    });\n    expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({\n        toBe: subscriptionLogsToBeFn;\n    });\n    flush(): void;\n    /** @nocollapse */\n    static parseMarblesAsSubscriptions(marbles: string, runMode?: boolean): SubscriptionLog;\n    /** @nocollapse */\n    static parseMarbles(marbles: string, values?: any, errorValue?: any, materializeInnerObservables?: boolean, runMode?: boolean): TestMessage[];\n    run<T>(callback: (helpers: RunHelpers) => T): T;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/types.d.ts",
    "content": "import { Observable } from './Observable';\nimport { Subscription } from './Subscription';\n/** OPERATOR INTERFACES */\nexport interface UnaryFunction<T, R> {\n    (source: T): R;\n}\nexport interface OperatorFunction<T, R> extends UnaryFunction<Observable<T>, Observable<R>> {\n}\nexport declare type FactoryOrValue<T> = T | (() => T);\nexport interface MonoTypeOperatorFunction<T> extends OperatorFunction<T, T> {\n}\nexport interface Timestamp<T> {\n    value: T;\n    timestamp: number;\n}\nexport interface TimeInterval<T> {\n    value: T;\n    interval: number;\n}\n/** SUBSCRIPTION INTERFACES */\nexport interface Unsubscribable {\n    unsubscribe(): void;\n}\nexport declare type TeardownLogic = Unsubscribable | Function | void;\nexport interface SubscriptionLike extends Unsubscribable {\n    unsubscribe(): void;\n    readonly closed: boolean;\n}\nexport declare type SubscribableOrPromise<T> = Subscribable<T> | Subscribable<never> | PromiseLike<T> | InteropObservable<T>;\n/** OBSERVABLE INTERFACES */\nexport interface Subscribable<T> {\n    subscribe(observer?: PartialObserver<T>): Unsubscribable;\n    subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Unsubscribable;\n}\nexport declare type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T> | Iterable<T>;\n/** @deprecated use {@link InteropObservable } */\nexport declare type ObservableLike<T> = InteropObservable<T>;\nexport declare type InteropObservable<T> = {\n    [Symbol.observable]: () => Subscribable<T>;\n};\n/** OBSERVER INTERFACES */\nexport interface NextObserver<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error?: (err: any) => void;\n    complete?: () => void;\n}\nexport interface ErrorObserver<T> {\n    closed?: boolean;\n    next?: (value: T) => void;\n    error: (err: any) => void;\n    complete?: () => void;\n}\nexport interface CompletionObserver<T> {\n    closed?: boolean;\n    next?: (value: T) => void;\n    error?: (err: any) => void;\n    complete: () => void;\n}\nexport declare type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n/** SCHEDULER INTERFACES */\nexport interface SchedulerLike {\n    now(): number;\n    schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\nexport interface SchedulerAction<T> extends Subscription {\n    schedule(state?: T, delay?: number): Subscription;\n}\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/applyMixins.d.ts",
    "content": "export declare function applyMixins(derivedCtor: any, baseCtors: any[]): void;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/ArgumentOutOfRangeError.d.ts",
    "content": "export interface ArgumentOutOfRangeError extends Error {\n}\nexport interface ArgumentOutOfRangeErrorCtor {\n    new (): ArgumentOutOfRangeError;\n}\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport declare const ArgumentOutOfRangeError: ArgumentOutOfRangeErrorCtor;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/canReportError.d.ts",
    "content": "import { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n/**\n * Determines whether the ErrorObserver is closed or stopped or has a\n * destination that is closed or stopped - in which case errors will\n * need to be reported via a different mechanism.\n * @param observer the observer\n */\nexport declare function canReportError(observer: Subscriber<any> | Subject<any>): boolean;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/EmptyError.d.ts",
    "content": "export interface EmptyError extends Error {\n}\nexport interface EmptyErrorCtor {\n    new (): EmptyError;\n}\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport declare const EmptyError: EmptyErrorCtor;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/errorObject.d.ts",
    "content": "export declare const errorObject: any;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/hostReportError.d.ts",
    "content": "/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\nexport declare function hostReportError(err: any): void;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/identity.d.ts",
    "content": "export declare function identity<T>(x: T): T;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/Immediate.d.ts",
    "content": "export declare const Immediate: {\n    setImmediate(cb: () => void): number;\n    clearImmediate(handle: number): void;\n};\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isArray.d.ts",
    "content": "export declare const isArray: (arg: any) => arg is any[];\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isArrayLike.d.ts",
    "content": "export declare const isArrayLike: <T>(x: any) => x is ArrayLike<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isDate.d.ts",
    "content": "export declare function isDate(value: any): value is Date;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isFunction.d.ts",
    "content": "export declare function isFunction(x: any): x is Function;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isInteropObservable.d.ts",
    "content": "import { InteropObservable } from '../types';\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport declare function isInteropObservable(input: any): input is InteropObservable<any>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isIterable.d.ts",
    "content": "/** Identifies an input as being an Iterable */\nexport declare function isIterable(input: any): input is Iterable<any>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isNumeric.d.ts",
    "content": "export declare function isNumeric(val: any): val is number | string;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isObject.d.ts",
    "content": "export declare function isObject(x: any): x is Object;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isObservable.d.ts",
    "content": "import { Observable } from '../Observable';\n/**\n * Tests to see if the object is an RxJS {@link Observable}\n * @param obj the object to test\n */\nexport declare function isObservable<T>(obj: any): obj is Observable<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isPromise.d.ts",
    "content": "export declare function isPromise(value: any): value is PromiseLike<any>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/isScheduler.d.ts",
    "content": "import { SchedulerLike } from '../types';\nexport declare function isScheduler(value: any): value is SchedulerLike;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/noop.d.ts",
    "content": "export declare function noop(): void;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/not.d.ts",
    "content": "export declare function not(pred: Function, thisArg: any): Function;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/ObjectUnsubscribedError.d.ts",
    "content": "export interface ObjectUnsubscribedError extends Error {\n}\nexport interface ObjectUnsubscribedErrorCtor {\n    new (): ObjectUnsubscribedError;\n}\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport declare const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/pipe.d.ts",
    "content": "import { UnaryFunction } from '../types';\nexport declare function pipe<T>(): UnaryFunction<T, T>;\nexport declare function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport declare function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport declare function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport declare function pipe<T, A, B, C, D>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport declare function pipe<T, A, B, C, D, E>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport declare function pipe<T, A, B, C, D, E, F>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport declare function pipe<T, A, B, C, D, E, F, G>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport declare function pipe<T, A, B, C, D, E, F, G, H>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport declare function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>): UnaryFunction<T, I>;\nexport declare function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>, ...fns: UnaryFunction<any, any>[]): UnaryFunction<T, {}>;\n/** @internal */\nexport declare function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/root.d.ts",
    "content": "declare const _root: any;\nexport { _root as root };\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/subscribeTo.d.ts",
    "content": "import { ObservableInput } from '../types';\nimport { Subscriber } from '../Subscriber';\nexport declare const subscribeTo: <T>(result: ObservableInput<T>) => (subscriber: Subscriber<{}>) => any;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/subscribeToArray.d.ts",
    "content": "import { Subscriber } from '../Subscriber';\n/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\nexport declare const subscribeToArray: <T>(array: ArrayLike<T>) => (subscriber: Subscriber<T>) => void;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/subscribeToIterable.d.ts",
    "content": "import { Subscriber } from '../Subscriber';\nexport declare const subscribeToIterable: <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => Subscriber<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/subscribeToObservable.d.ts",
    "content": "import { Subscriber } from '../Subscriber';\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport declare const subscribeToObservable: <T>(obj: any) => (subscriber: Subscriber<T>) => any;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/subscribeToPromise.d.ts",
    "content": "import { Subscriber } from '../Subscriber';\nexport declare const subscribeToPromise: <T>(promise: PromiseLike<T>) => (subscriber: Subscriber<T>) => Subscriber<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/subscribeToResult.d.ts",
    "content": "import { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Subscriber } from '../Subscriber';\nexport declare function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>, result: any, outerValue?: T, outerIndex?: number, destination?: Subscriber<any>): Subscription;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/TimeoutError.d.ts",
    "content": "export interface TimeoutError extends Error {\n}\nexport interface TimeoutErrorCtor {\n    new (): TimeoutError;\n}\n/**\n * An error thrown when duetime elapses.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nexport declare const TimeoutError: TimeoutErrorCtor;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/toSubscriber.d.ts",
    "content": "import { Subscriber } from '../Subscriber';\nimport { PartialObserver } from '../types';\nexport declare function toSubscriber<T>(nextOrObserver?: PartialObserver<T> | ((value: T) => void), error?: (error: any) => void, complete?: () => void): Subscriber<T>;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/tryCatch.d.ts",
    "content": "export declare function tryCatch<T extends Function>(fn: T): T;\n"
  },
  {
    "path": "node_modules/rxjs/internal/util/UnsubscriptionError.d.ts",
    "content": "export interface UnsubscriptionError extends Error {\n    readonly errors: any[];\n}\nexport interface UnsubscriptionErrorCtor {\n    new (errors: any[]): UnsubscriptionError;\n}\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport declare const UnsubscriptionError: UnsubscriptionErrorCtor;\n"
  },
  {
    "path": "node_modules/rxjs/Notification.d.ts",
    "content": "export * from 'rxjs-compat/Notification';\n"
  },
  {
    "path": "node_modules/rxjs/Observable.d.ts",
    "content": "export * from 'rxjs-compat/Observable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/ArrayLikeObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/ArrayLikeObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/ArrayObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/ArrayObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/bindCallback.d.ts",
    "content": "export * from 'rxjs-compat/observable/bindCallback';\n"
  },
  {
    "path": "node_modules/rxjs/observable/bindNodeCallback.d.ts",
    "content": "export * from 'rxjs-compat/observable/bindNodeCallback';\n"
  },
  {
    "path": "node_modules/rxjs/observable/BoundCallbackObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/BoundCallbackObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/BoundNodeCallbackObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/BoundNodeCallbackObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/combineLatest.d.ts",
    "content": "export * from 'rxjs-compat/observable/combineLatest';\n"
  },
  {
    "path": "node_modules/rxjs/observable/concat.d.ts",
    "content": "export * from 'rxjs-compat/observable/concat';\n"
  },
  {
    "path": "node_modules/rxjs/observable/ConnectableObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/ConnectableObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/defer.d.ts",
    "content": "export * from 'rxjs-compat/observable/defer';\n"
  },
  {
    "path": "node_modules/rxjs/observable/DeferObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/DeferObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/dom/ajax.d.ts",
    "content": "export * from 'rxjs-compat/observable/dom/ajax';\n"
  },
  {
    "path": "node_modules/rxjs/observable/dom/AjaxObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/dom/AjaxObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/dom/webSocket.d.ts",
    "content": "export * from 'rxjs-compat/observable/dom/webSocket';\n"
  },
  {
    "path": "node_modules/rxjs/observable/dom/WebSocketSubject.d.ts",
    "content": "export * from 'rxjs-compat/observable/dom/WebSocketSubject';\n"
  },
  {
    "path": "node_modules/rxjs/observable/empty.d.ts",
    "content": "export * from 'rxjs-compat/observable/empty';\n"
  },
  {
    "path": "node_modules/rxjs/observable/EmptyObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/EmptyObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/ErrorObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/ErrorObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/forkJoin.d.ts",
    "content": "export * from 'rxjs-compat/observable/forkJoin';\n"
  },
  {
    "path": "node_modules/rxjs/observable/ForkJoinObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/ForkJoinObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/from.d.ts",
    "content": "export * from 'rxjs-compat/observable/from';\n"
  },
  {
    "path": "node_modules/rxjs/observable/fromArray.d.ts",
    "content": "export * from 'rxjs-compat/observable/fromArray';\n"
  },
  {
    "path": "node_modules/rxjs/observable/fromEvent.d.ts",
    "content": "export * from 'rxjs-compat/observable/fromEvent';\n"
  },
  {
    "path": "node_modules/rxjs/observable/FromEventObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/FromEventObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/fromEventPattern.d.ts",
    "content": "export * from 'rxjs-compat/observable/fromEventPattern';\n"
  },
  {
    "path": "node_modules/rxjs/observable/FromEventPatternObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/FromEventPatternObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/fromIterable.d.ts",
    "content": "export * from 'rxjs-compat/observable/fromIterable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/FromObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/FromObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/fromPromise.d.ts",
    "content": "export * from 'rxjs-compat/observable/fromPromise';\n"
  },
  {
    "path": "node_modules/rxjs/observable/generate.d.ts",
    "content": "export * from 'rxjs-compat/observable/generate';\n"
  },
  {
    "path": "node_modules/rxjs/observable/GenerateObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/GenerateObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/if.d.ts",
    "content": "export * from 'rxjs-compat/observable/if';\n"
  },
  {
    "path": "node_modules/rxjs/observable/IfObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/IfObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/interval.d.ts",
    "content": "export * from 'rxjs-compat/observable/interval';\n"
  },
  {
    "path": "node_modules/rxjs/observable/IntervalObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/IntervalObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/IteratorObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/IteratorObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/merge.d.ts",
    "content": "export * from 'rxjs-compat/observable/merge';\n"
  },
  {
    "path": "node_modules/rxjs/observable/never.d.ts",
    "content": "export * from 'rxjs-compat/observable/never';\n"
  },
  {
    "path": "node_modules/rxjs/observable/NeverObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/NeverObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/of.d.ts",
    "content": "export * from 'rxjs-compat/observable/of';\n"
  },
  {
    "path": "node_modules/rxjs/observable/onErrorResumeNext.d.ts",
    "content": "export * from 'rxjs-compat/observable/onErrorResumeNext';\n"
  },
  {
    "path": "node_modules/rxjs/observable/pairs.d.ts",
    "content": "export * from 'rxjs-compat/observable/pairs';\n"
  },
  {
    "path": "node_modules/rxjs/observable/PairsObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/PairsObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/PromiseObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/PromiseObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/race.d.ts",
    "content": "export * from 'rxjs-compat/observable/race';\n"
  },
  {
    "path": "node_modules/rxjs/observable/range.d.ts",
    "content": "export * from 'rxjs-compat/observable/range';\n"
  },
  {
    "path": "node_modules/rxjs/observable/RangeObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/RangeObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/ScalarObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/ScalarObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/SubscribeOnObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/SubscribeOnObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/throw.d.ts",
    "content": "export * from 'rxjs-compat/observable/throw';\n"
  },
  {
    "path": "node_modules/rxjs/observable/timer.d.ts",
    "content": "export * from 'rxjs-compat/observable/timer';\n"
  },
  {
    "path": "node_modules/rxjs/observable/TimerObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/TimerObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/using.d.ts",
    "content": "export * from 'rxjs-compat/observable/using';\n"
  },
  {
    "path": "node_modules/rxjs/observable/UsingObservable.d.ts",
    "content": "export * from 'rxjs-compat/observable/UsingObservable';\n"
  },
  {
    "path": "node_modules/rxjs/observable/zip.d.ts",
    "content": "export * from 'rxjs-compat/observable/zip';\n"
  },
  {
    "path": "node_modules/rxjs/Observer.d.ts",
    "content": "export * from 'rxjs-compat/Observer';\n"
  },
  {
    "path": "node_modules/rxjs/Operator.d.ts",
    "content": "export * from 'rxjs-compat/Operator';\n"
  },
  {
    "path": "node_modules/rxjs/operator/audit.d.ts",
    "content": "export * from 'rxjs-compat/operator/audit';\n"
  },
  {
    "path": "node_modules/rxjs/operator/auditTime.d.ts",
    "content": "export * from 'rxjs-compat/operator/auditTime';\n"
  },
  {
    "path": "node_modules/rxjs/operator/buffer.d.ts",
    "content": "export * from 'rxjs-compat/operator/buffer';\n"
  },
  {
    "path": "node_modules/rxjs/operator/bufferCount.d.ts",
    "content": "export * from 'rxjs-compat/operator/bufferCount';\n"
  },
  {
    "path": "node_modules/rxjs/operator/bufferTime.d.ts",
    "content": "export * from 'rxjs-compat/operator/bufferTime';\n"
  },
  {
    "path": "node_modules/rxjs/operator/bufferToggle.d.ts",
    "content": "export * from 'rxjs-compat/operator/bufferToggle';\n"
  },
  {
    "path": "node_modules/rxjs/operator/bufferWhen.d.ts",
    "content": "export * from 'rxjs-compat/operator/bufferWhen';\n"
  },
  {
    "path": "node_modules/rxjs/operator/catch.d.ts",
    "content": "export * from 'rxjs-compat/operator/catch';\n"
  },
  {
    "path": "node_modules/rxjs/operator/combineAll.d.ts",
    "content": "export * from 'rxjs-compat/operator/combineAll';\n"
  },
  {
    "path": "node_modules/rxjs/operator/combineLatest.d.ts",
    "content": "export * from 'rxjs-compat/operator/combineLatest';\n"
  },
  {
    "path": "node_modules/rxjs/operator/concat.d.ts",
    "content": "export * from 'rxjs-compat/operator/concat';\n"
  },
  {
    "path": "node_modules/rxjs/operator/concatAll.d.ts",
    "content": "export * from 'rxjs-compat/operator/concatAll';\n"
  },
  {
    "path": "node_modules/rxjs/operator/concatMap.d.ts",
    "content": "export * from 'rxjs-compat/operator/concatMap';\n"
  },
  {
    "path": "node_modules/rxjs/operator/concatMapTo.d.ts",
    "content": "export * from 'rxjs-compat/operator/concatMapTo';\n"
  },
  {
    "path": "node_modules/rxjs/operator/count.d.ts",
    "content": "export * from 'rxjs-compat/operator/count';\n"
  },
  {
    "path": "node_modules/rxjs/operator/debounce.d.ts",
    "content": "export * from 'rxjs-compat/operator/debounce';\n"
  },
  {
    "path": "node_modules/rxjs/operator/debounceTime.d.ts",
    "content": "export * from 'rxjs-compat/operator/debounceTime';\n"
  },
  {
    "path": "node_modules/rxjs/operator/defaultIfEmpty.d.ts",
    "content": "export * from 'rxjs-compat/operator/defaultIfEmpty';\n"
  },
  {
    "path": "node_modules/rxjs/operator/delay.d.ts",
    "content": "export * from 'rxjs-compat/operator/delay';\n"
  },
  {
    "path": "node_modules/rxjs/operator/delayWhen.d.ts",
    "content": "export * from 'rxjs-compat/operator/delayWhen';\n"
  },
  {
    "path": "node_modules/rxjs/operator/dematerialize.d.ts",
    "content": "export * from 'rxjs-compat/operator/dematerialize';\n"
  },
  {
    "path": "node_modules/rxjs/operator/distinct.d.ts",
    "content": "export * from 'rxjs-compat/operator/distinct';\n"
  },
  {
    "path": "node_modules/rxjs/operator/distinctUntilChanged.d.ts",
    "content": "export * from 'rxjs-compat/operator/distinctUntilChanged';\n"
  },
  {
    "path": "node_modules/rxjs/operator/distinctUntilKeyChanged.d.ts",
    "content": "export * from 'rxjs-compat/operator/distinctUntilKeyChanged';\n"
  },
  {
    "path": "node_modules/rxjs/operator/do.d.ts",
    "content": "export * from 'rxjs-compat/operator/do';\n"
  },
  {
    "path": "node_modules/rxjs/operator/elementAt.d.ts",
    "content": "export * from 'rxjs-compat/operator/elementAt';\n"
  },
  {
    "path": "node_modules/rxjs/operator/every.d.ts",
    "content": "export * from 'rxjs-compat/operator/every';\n"
  },
  {
    "path": "node_modules/rxjs/operator/exhaust.d.ts",
    "content": "export * from 'rxjs-compat/operator/exhaust';\n"
  },
  {
    "path": "node_modules/rxjs/operator/exhaustMap.d.ts",
    "content": "export * from 'rxjs-compat/operator/exhaustMap';\n"
  },
  {
    "path": "node_modules/rxjs/operator/expand.d.ts",
    "content": "export * from 'rxjs-compat/operator/expand';\n"
  },
  {
    "path": "node_modules/rxjs/operator/filter.d.ts",
    "content": "export * from 'rxjs-compat/operator/filter';\n"
  },
  {
    "path": "node_modules/rxjs/operator/finally.d.ts",
    "content": "export * from 'rxjs-compat/operator/finally';\n"
  },
  {
    "path": "node_modules/rxjs/operator/find.d.ts",
    "content": "export * from 'rxjs-compat/operator/find';\n"
  },
  {
    "path": "node_modules/rxjs/operator/findIndex.d.ts",
    "content": "export * from 'rxjs-compat/operator/findIndex';\n"
  },
  {
    "path": "node_modules/rxjs/operator/first.d.ts",
    "content": "export * from 'rxjs-compat/operator/first';\n"
  },
  {
    "path": "node_modules/rxjs/operator/groupBy.d.ts",
    "content": "export * from 'rxjs-compat/operator/groupBy';\n"
  },
  {
    "path": "node_modules/rxjs/operator/ignoreElements.d.ts",
    "content": "export * from 'rxjs-compat/operator/ignoreElements';\n"
  },
  {
    "path": "node_modules/rxjs/operator/isEmpty.d.ts",
    "content": "export * from 'rxjs-compat/operator/isEmpty';\n"
  },
  {
    "path": "node_modules/rxjs/operator/last.d.ts",
    "content": "export * from 'rxjs-compat/operator/last';\n"
  },
  {
    "path": "node_modules/rxjs/operator/let.d.ts",
    "content": "export * from 'rxjs-compat/operator/let';\n"
  },
  {
    "path": "node_modules/rxjs/operator/map.d.ts",
    "content": "export * from 'rxjs-compat/operator/map';\n"
  },
  {
    "path": "node_modules/rxjs/operator/mapTo.d.ts",
    "content": "export * from 'rxjs-compat/operator/mapTo';\n"
  },
  {
    "path": "node_modules/rxjs/operator/materialize.d.ts",
    "content": "export * from 'rxjs-compat/operator/materialize';\n"
  },
  {
    "path": "node_modules/rxjs/operator/max.d.ts",
    "content": "export * from 'rxjs-compat/operator/max';\n"
  },
  {
    "path": "node_modules/rxjs/operator/merge.d.ts",
    "content": "export * from 'rxjs-compat/operator/merge';\n"
  },
  {
    "path": "node_modules/rxjs/operator/mergeAll.d.ts",
    "content": "export * from 'rxjs-compat/operator/mergeAll';\n"
  },
  {
    "path": "node_modules/rxjs/operator/mergeMap.d.ts",
    "content": "export * from 'rxjs-compat/operator/mergeMap';\n"
  },
  {
    "path": "node_modules/rxjs/operator/mergeMapTo.d.ts",
    "content": "export * from 'rxjs-compat/operator/mergeMapTo';\n"
  },
  {
    "path": "node_modules/rxjs/operator/mergeScan.d.ts",
    "content": "export * from 'rxjs-compat/operator/mergeScan';\n"
  },
  {
    "path": "node_modules/rxjs/operator/min.d.ts",
    "content": "export * from 'rxjs-compat/operator/min';\n"
  },
  {
    "path": "node_modules/rxjs/operator/multicast.d.ts",
    "content": "export * from 'rxjs-compat/operator/multicast';\n"
  },
  {
    "path": "node_modules/rxjs/operator/observeOn.d.ts",
    "content": "export * from 'rxjs-compat/operator/observeOn';\n"
  },
  {
    "path": "node_modules/rxjs/operator/onErrorResumeNext.d.ts",
    "content": "export * from 'rxjs-compat/operator/onErrorResumeNext';\n"
  },
  {
    "path": "node_modules/rxjs/operator/pairwise.d.ts",
    "content": "export * from 'rxjs-compat/operator/pairwise';\n"
  },
  {
    "path": "node_modules/rxjs/operator/partition.d.ts",
    "content": "export * from 'rxjs-compat/operator/partition';\n"
  },
  {
    "path": "node_modules/rxjs/operator/pluck.d.ts",
    "content": "export * from 'rxjs-compat/operator/pluck';\n"
  },
  {
    "path": "node_modules/rxjs/operator/publish.d.ts",
    "content": "export * from 'rxjs-compat/operator/publish';\n"
  },
  {
    "path": "node_modules/rxjs/operator/publishBehavior.d.ts",
    "content": "export * from 'rxjs-compat/operator/publishBehavior';\n"
  },
  {
    "path": "node_modules/rxjs/operator/publishLast.d.ts",
    "content": "export * from 'rxjs-compat/operator/publishLast';\n"
  },
  {
    "path": "node_modules/rxjs/operator/publishReplay.d.ts",
    "content": "export * from 'rxjs-compat/operator/publishReplay';\n"
  },
  {
    "path": "node_modules/rxjs/operator/race.d.ts",
    "content": "export * from 'rxjs-compat/operator/race';\n"
  },
  {
    "path": "node_modules/rxjs/operator/reduce.d.ts",
    "content": "export * from 'rxjs-compat/operator/reduce';\n"
  },
  {
    "path": "node_modules/rxjs/operator/repeat.d.ts",
    "content": "export * from 'rxjs-compat/operator/repeat';\n"
  },
  {
    "path": "node_modules/rxjs/operator/repeatWhen.d.ts",
    "content": "export * from 'rxjs-compat/operator/repeatWhen';\n"
  },
  {
    "path": "node_modules/rxjs/operator/retry.d.ts",
    "content": "export * from 'rxjs-compat/operator/retry';\n"
  },
  {
    "path": "node_modules/rxjs/operator/retryWhen.d.ts",
    "content": "export * from 'rxjs-compat/operator/retryWhen';\n"
  },
  {
    "path": "node_modules/rxjs/operator/sample.d.ts",
    "content": "export * from 'rxjs-compat/operator/sample';\n"
  },
  {
    "path": "node_modules/rxjs/operator/sampleTime.d.ts",
    "content": "export * from 'rxjs-compat/operator/sampleTime';\n"
  },
  {
    "path": "node_modules/rxjs/operator/scan.d.ts",
    "content": "export * from 'rxjs-compat/operator/scan';\n"
  },
  {
    "path": "node_modules/rxjs/operator/sequenceEqual.d.ts",
    "content": "export * from 'rxjs-compat/operator/sequenceEqual';\n"
  },
  {
    "path": "node_modules/rxjs/operator/share.d.ts",
    "content": "export * from 'rxjs-compat/operator/share';\n"
  },
  {
    "path": "node_modules/rxjs/operator/shareReplay.d.ts",
    "content": "export * from 'rxjs-compat/operator/shareReplay';\n"
  },
  {
    "path": "node_modules/rxjs/operator/single.d.ts",
    "content": "export * from 'rxjs-compat/operator/single';\n"
  },
  {
    "path": "node_modules/rxjs/operator/skip.d.ts",
    "content": "export * from 'rxjs-compat/operator/skip';\n"
  },
  {
    "path": "node_modules/rxjs/operator/skipLast.d.ts",
    "content": "export * from 'rxjs-compat/operator/skipLast';\n"
  },
  {
    "path": "node_modules/rxjs/operator/skipUntil.d.ts",
    "content": "export * from 'rxjs-compat/operator/skipUntil';\n"
  },
  {
    "path": "node_modules/rxjs/operator/skipWhile.d.ts",
    "content": "export * from 'rxjs-compat/operator/skipWhile';\n"
  },
  {
    "path": "node_modules/rxjs/operator/startWith.d.ts",
    "content": "export * from 'rxjs-compat/operator/startWith';\n"
  },
  {
    "path": "node_modules/rxjs/operator/subscribeOn.d.ts",
    "content": "export * from 'rxjs-compat/operator/subscribeOn';\n"
  },
  {
    "path": "node_modules/rxjs/operator/switch.d.ts",
    "content": "export * from 'rxjs-compat/operator/switch';\n"
  },
  {
    "path": "node_modules/rxjs/operator/switchMap.d.ts",
    "content": "export * from 'rxjs-compat/operator/switchMap';\n"
  },
  {
    "path": "node_modules/rxjs/operator/switchMapTo.d.ts",
    "content": "export * from 'rxjs-compat/operator/switchMapTo';\n"
  },
  {
    "path": "node_modules/rxjs/operator/take.d.ts",
    "content": "export * from 'rxjs-compat/operator/take';\n"
  },
  {
    "path": "node_modules/rxjs/operator/takeLast.d.ts",
    "content": "export * from 'rxjs-compat/operator/takeLast';\n"
  },
  {
    "path": "node_modules/rxjs/operator/takeUntil.d.ts",
    "content": "export * from 'rxjs-compat/operator/takeUntil';\n"
  },
  {
    "path": "node_modules/rxjs/operator/takeWhile.d.ts",
    "content": "export * from 'rxjs-compat/operator/takeWhile';\n"
  },
  {
    "path": "node_modules/rxjs/operator/throttle.d.ts",
    "content": "export * from 'rxjs-compat/operator/throttle';\n"
  },
  {
    "path": "node_modules/rxjs/operator/throttleTime.d.ts",
    "content": "export * from 'rxjs-compat/operator/throttleTime';\n"
  },
  {
    "path": "node_modules/rxjs/operator/timeInterval.d.ts",
    "content": "export * from 'rxjs-compat/operator/timeInterval';\n"
  },
  {
    "path": "node_modules/rxjs/operator/timeout.d.ts",
    "content": "export * from 'rxjs-compat/operator/timeout';\n"
  },
  {
    "path": "node_modules/rxjs/operator/timeoutWith.d.ts",
    "content": "export * from 'rxjs-compat/operator/timeoutWith';\n"
  },
  {
    "path": "node_modules/rxjs/operator/timestamp.d.ts",
    "content": "export * from 'rxjs-compat/operator/timestamp';\n"
  },
  {
    "path": "node_modules/rxjs/operator/toArray.d.ts",
    "content": "export * from 'rxjs-compat/operator/toArray';\n"
  },
  {
    "path": "node_modules/rxjs/operator/toPromise.d.ts",
    "content": "export * from 'rxjs-compat/operator/toPromise';\n"
  },
  {
    "path": "node_modules/rxjs/operator/window.d.ts",
    "content": "export * from 'rxjs-compat/operator/window';\n"
  },
  {
    "path": "node_modules/rxjs/operator/windowCount.d.ts",
    "content": "export * from 'rxjs-compat/operator/windowCount';\n"
  },
  {
    "path": "node_modules/rxjs/operator/windowTime.d.ts",
    "content": "export * from 'rxjs-compat/operator/windowTime';\n"
  },
  {
    "path": "node_modules/rxjs/operator/windowToggle.d.ts",
    "content": "export * from 'rxjs-compat/operator/windowToggle';\n"
  },
  {
    "path": "node_modules/rxjs/operator/windowWhen.d.ts",
    "content": "export * from 'rxjs-compat/operator/windowWhen';\n"
  },
  {
    "path": "node_modules/rxjs/operator/withLatestFrom.d.ts",
    "content": "export * from 'rxjs-compat/operator/withLatestFrom';\n"
  },
  {
    "path": "node_modules/rxjs/operator/zip.d.ts",
    "content": "export * from 'rxjs-compat/operator/zip';\n"
  },
  {
    "path": "node_modules/rxjs/operator/zipAll.d.ts",
    "content": "export * from 'rxjs-compat/operator/zipAll';\n"
  },
  {
    "path": "node_modules/rxjs/operators/audit.d.ts",
    "content": "export * from 'rxjs-compat/operators/audit';\n"
  },
  {
    "path": "node_modules/rxjs/operators/auditTime.d.ts",
    "content": "export * from 'rxjs-compat/operators/auditTime';\n"
  },
  {
    "path": "node_modules/rxjs/operators/buffer.d.ts",
    "content": "export * from 'rxjs-compat/operators/buffer';\n"
  },
  {
    "path": "node_modules/rxjs/operators/bufferCount.d.ts",
    "content": "export * from 'rxjs-compat/operators/bufferCount';\n"
  },
  {
    "path": "node_modules/rxjs/operators/bufferTime.d.ts",
    "content": "export * from 'rxjs-compat/operators/bufferTime';\n"
  },
  {
    "path": "node_modules/rxjs/operators/bufferToggle.d.ts",
    "content": "export * from 'rxjs-compat/operators/bufferToggle';\n"
  },
  {
    "path": "node_modules/rxjs/operators/bufferWhen.d.ts",
    "content": "export * from 'rxjs-compat/operators/bufferWhen';\n"
  },
  {
    "path": "node_modules/rxjs/operators/catchError.d.ts",
    "content": "export * from 'rxjs-compat/operators/catchError';\n"
  },
  {
    "path": "node_modules/rxjs/operators/combineAll.d.ts",
    "content": "export * from 'rxjs-compat/operators/combineAll';\n"
  },
  {
    "path": "node_modules/rxjs/operators/combineLatest.d.ts",
    "content": "export * from 'rxjs-compat/operators/combineLatest';\n"
  },
  {
    "path": "node_modules/rxjs/operators/concat.d.ts",
    "content": "export * from 'rxjs-compat/operators/concat';\n"
  },
  {
    "path": "node_modules/rxjs/operators/concatAll.d.ts",
    "content": "export * from 'rxjs-compat/operators/concatAll';\n"
  },
  {
    "path": "node_modules/rxjs/operators/concatMap.d.ts",
    "content": "export * from 'rxjs-compat/operators/concatMap';\n"
  },
  {
    "path": "node_modules/rxjs/operators/concatMapTo.d.ts",
    "content": "export * from 'rxjs-compat/operators/concatMapTo';\n"
  },
  {
    "path": "node_modules/rxjs/operators/count.d.ts",
    "content": "export * from 'rxjs-compat/operators/count';\n"
  },
  {
    "path": "node_modules/rxjs/operators/debounce.d.ts",
    "content": "export * from 'rxjs-compat/operators/debounce';\n"
  },
  {
    "path": "node_modules/rxjs/operators/debounceTime.d.ts",
    "content": "export * from 'rxjs-compat/operators/debounceTime';\n"
  },
  {
    "path": "node_modules/rxjs/operators/defaultIfEmpty.d.ts",
    "content": "export * from 'rxjs-compat/operators/defaultIfEmpty';\n"
  },
  {
    "path": "node_modules/rxjs/operators/delay.d.ts",
    "content": "export * from 'rxjs-compat/operators/delay';\n"
  },
  {
    "path": "node_modules/rxjs/operators/delayWhen.d.ts",
    "content": "export * from 'rxjs-compat/operators/delayWhen';\n"
  },
  {
    "path": "node_modules/rxjs/operators/dematerialize.d.ts",
    "content": "export * from 'rxjs-compat/operators/dematerialize';\n"
  },
  {
    "path": "node_modules/rxjs/operators/distinct.d.ts",
    "content": "export * from 'rxjs-compat/operators/distinct';\n"
  },
  {
    "path": "node_modules/rxjs/operators/distinctUntilChanged.d.ts",
    "content": "export * from 'rxjs-compat/operators/distinctUntilChanged';\n"
  },
  {
    "path": "node_modules/rxjs/operators/distinctUntilKeyChanged.d.ts",
    "content": "export * from 'rxjs-compat/operators/distinctUntilKeyChanged';\n"
  },
  {
    "path": "node_modules/rxjs/operators/elementAt.d.ts",
    "content": "export * from 'rxjs-compat/operators/elementAt';\n"
  },
  {
    "path": "node_modules/rxjs/operators/every.d.ts",
    "content": "export * from 'rxjs-compat/operators/every';\n"
  },
  {
    "path": "node_modules/rxjs/operators/exhaust.d.ts",
    "content": "export * from 'rxjs-compat/operators/exhaust';\n"
  },
  {
    "path": "node_modules/rxjs/operators/exhaustMap.d.ts",
    "content": "export * from 'rxjs-compat/operators/exhaustMap';\n"
  },
  {
    "path": "node_modules/rxjs/operators/expand.d.ts",
    "content": "export * from 'rxjs-compat/operators/expand';\n"
  },
  {
    "path": "node_modules/rxjs/operators/filter.d.ts",
    "content": "export * from 'rxjs-compat/operators/filter';\n"
  },
  {
    "path": "node_modules/rxjs/operators/finalize.d.ts",
    "content": "export * from 'rxjs-compat/operators/finalize';\n"
  },
  {
    "path": "node_modules/rxjs/operators/find.d.ts",
    "content": "export * from 'rxjs-compat/operators/find';\n"
  },
  {
    "path": "node_modules/rxjs/operators/findIndex.d.ts",
    "content": "export * from 'rxjs-compat/operators/findIndex';\n"
  },
  {
    "path": "node_modules/rxjs/operators/first.d.ts",
    "content": "export * from 'rxjs-compat/operators/first';\n"
  },
  {
    "path": "node_modules/rxjs/operators/groupBy.d.ts",
    "content": "export * from 'rxjs-compat/operators/groupBy';\n"
  },
  {
    "path": "node_modules/rxjs/operators/ignoreElements.d.ts",
    "content": "export * from 'rxjs-compat/operators/ignoreElements';\n"
  },
  {
    "path": "node_modules/rxjs/operators/index.d.ts",
    "content": "export { audit } from '../internal/operators/audit';\nexport { auditTime } from '../internal/operators/auditTime';\nexport { buffer } from '../internal/operators/buffer';\nexport { bufferCount } from '../internal/operators/bufferCount';\nexport { bufferTime } from '../internal/operators/bufferTime';\nexport { bufferToggle } from '../internal/operators/bufferToggle';\nexport { bufferWhen } from '../internal/operators/bufferWhen';\nexport { catchError } from '../internal/operators/catchError';\nexport { combineAll } from '../internal/operators/combineAll';\nexport { combineLatest } from '../internal/operators/combineLatest';\nexport { concat } from '../internal/operators/concat';\nexport { concatAll } from '../internal/operators/concatAll';\nexport { concatMap } from '../internal/operators/concatMap';\nexport { concatMapTo } from '../internal/operators/concatMapTo';\nexport { count } from '../internal/operators/count';\nexport { debounce } from '../internal/operators/debounce';\nexport { debounceTime } from '../internal/operators/debounceTime';\nexport { defaultIfEmpty } from '../internal/operators/defaultIfEmpty';\nexport { delay } from '../internal/operators/delay';\nexport { delayWhen } from '../internal/operators/delayWhen';\nexport { dematerialize } from '../internal/operators/dematerialize';\nexport { distinct } from '../internal/operators/distinct';\nexport { distinctUntilChanged } from '../internal/operators/distinctUntilChanged';\nexport { distinctUntilKeyChanged } from '../internal/operators/distinctUntilKeyChanged';\nexport { elementAt } from '../internal/operators/elementAt';\nexport { endWith } from '../internal/operators/endWith';\nexport { every } from '../internal/operators/every';\nexport { exhaust } from '../internal/operators/exhaust';\nexport { exhaustMap } from '../internal/operators/exhaustMap';\nexport { expand } from '../internal/operators/expand';\nexport { filter } from '../internal/operators/filter';\nexport { finalize } from '../internal/operators/finalize';\nexport { find } from '../internal/operators/find';\nexport { findIndex } from '../internal/operators/findIndex';\nexport { first } from '../internal/operators/first';\nexport { groupBy } from '../internal/operators/groupBy';\nexport { ignoreElements } from '../internal/operators/ignoreElements';\nexport { isEmpty } from '../internal/operators/isEmpty';\nexport { last } from '../internal/operators/last';\nexport { map } from '../internal/operators/map';\nexport { mapTo } from '../internal/operators/mapTo';\nexport { materialize } from '../internal/operators/materialize';\nexport { max } from '../internal/operators/max';\nexport { merge } from '../internal/operators/merge';\nexport { mergeAll } from '../internal/operators/mergeAll';\nexport { mergeMap } from '../internal/operators/mergeMap';\nexport { mergeMap as flatMap } from '../internal/operators/mergeMap';\nexport { mergeMapTo } from '../internal/operators/mergeMapTo';\nexport { mergeScan } from '../internal/operators/mergeScan';\nexport { min } from '../internal/operators/min';\nexport { multicast } from '../internal/operators/multicast';\nexport { observeOn } from '../internal/operators/observeOn';\nexport { onErrorResumeNext } from '../internal/operators/onErrorResumeNext';\nexport { pairwise } from '../internal/operators/pairwise';\nexport { partition } from '../internal/operators/partition';\nexport { pluck } from '../internal/operators/pluck';\nexport { publish } from '../internal/operators/publish';\nexport { publishBehavior } from '../internal/operators/publishBehavior';\nexport { publishLast } from '../internal/operators/publishLast';\nexport { publishReplay } from '../internal/operators/publishReplay';\nexport { race } from '../internal/operators/race';\nexport { reduce } from '../internal/operators/reduce';\nexport { repeat } from '../internal/operators/repeat';\nexport { repeatWhen } from '../internal/operators/repeatWhen';\nexport { retry } from '../internal/operators/retry';\nexport { retryWhen } from '../internal/operators/retryWhen';\nexport { refCount } from '../internal/operators/refCount';\nexport { sample } from '../internal/operators/sample';\nexport { sampleTime } from '../internal/operators/sampleTime';\nexport { scan } from '../internal/operators/scan';\nexport { sequenceEqual } from '../internal/operators/sequenceEqual';\nexport { share } from '../internal/operators/share';\nexport { shareReplay } from '../internal/operators/shareReplay';\nexport { single } from '../internal/operators/single';\nexport { skip } from '../internal/operators/skip';\nexport { skipLast } from '../internal/operators/skipLast';\nexport { skipUntil } from '../internal/operators/skipUntil';\nexport { skipWhile } from '../internal/operators/skipWhile';\nexport { startWith } from '../internal/operators/startWith';\nexport { subscribeOn } from '../internal/operators/subscribeOn';\nexport { switchAll } from '../internal/operators/switchAll';\nexport { switchMap } from '../internal/operators/switchMap';\nexport { switchMapTo } from '../internal/operators/switchMapTo';\nexport { take } from '../internal/operators/take';\nexport { takeLast } from '../internal/operators/takeLast';\nexport { takeUntil } from '../internal/operators/takeUntil';\nexport { takeWhile } from '../internal/operators/takeWhile';\nexport { tap } from '../internal/operators/tap';\nexport { throttle } from '../internal/operators/throttle';\nexport { throttleTime } from '../internal/operators/throttleTime';\nexport { throwIfEmpty } from '../internal/operators/throwIfEmpty';\nexport { timeInterval } from '../internal/operators/timeInterval';\nexport { timeout } from '../internal/operators/timeout';\nexport { timeoutWith } from '../internal/operators/timeoutWith';\nexport { timestamp } from '../internal/operators/timestamp';\nexport { toArray } from '../internal/operators/toArray';\nexport { window } from '../internal/operators/window';\nexport { windowCount } from '../internal/operators/windowCount';\nexport { windowTime } from '../internal/operators/windowTime';\nexport { windowToggle } from '../internal/operators/windowToggle';\nexport { windowWhen } from '../internal/operators/windowWhen';\nexport { withLatestFrom } from '../internal/operators/withLatestFrom';\nexport { zip } from '../internal/operators/zip';\nexport { zipAll } from '../internal/operators/zipAll';\n"
  },
  {
    "path": "node_modules/rxjs/operators/isEmpty.d.ts",
    "content": "export * from 'rxjs-compat/operators/isEmpty';\n"
  },
  {
    "path": "node_modules/rxjs/operators/last.d.ts",
    "content": "export * from 'rxjs-compat/operators/last';\n"
  },
  {
    "path": "node_modules/rxjs/operators/map.d.ts",
    "content": "export * from 'rxjs-compat/operators/map';\n"
  },
  {
    "path": "node_modules/rxjs/operators/mapTo.d.ts",
    "content": "export * from 'rxjs-compat/operators/mapTo';\n"
  },
  {
    "path": "node_modules/rxjs/operators/materialize.d.ts",
    "content": "export * from 'rxjs-compat/operators/materialize';\n"
  },
  {
    "path": "node_modules/rxjs/operators/max.d.ts",
    "content": "export * from 'rxjs-compat/operators/max';\n"
  },
  {
    "path": "node_modules/rxjs/operators/merge.d.ts",
    "content": "export * from 'rxjs-compat/operators/merge';\n"
  },
  {
    "path": "node_modules/rxjs/operators/mergeAll.d.ts",
    "content": "export * from 'rxjs-compat/operators/mergeAll';\n"
  },
  {
    "path": "node_modules/rxjs/operators/mergeMap.d.ts",
    "content": "export * from 'rxjs-compat/operators/mergeMap';\n"
  },
  {
    "path": "node_modules/rxjs/operators/mergeMapTo.d.ts",
    "content": "export * from 'rxjs-compat/operators/mergeMapTo';\n"
  },
  {
    "path": "node_modules/rxjs/operators/mergeScan.d.ts",
    "content": "export * from 'rxjs-compat/operators/mergeScan';\n"
  },
  {
    "path": "node_modules/rxjs/operators/min.d.ts",
    "content": "export * from 'rxjs-compat/operators/min';\n"
  },
  {
    "path": "node_modules/rxjs/operators/multicast.d.ts",
    "content": "export * from 'rxjs-compat/operators/multicast';\n"
  },
  {
    "path": "node_modules/rxjs/operators/observeOn.d.ts",
    "content": "export * from 'rxjs-compat/operators/observeOn';\n"
  },
  {
    "path": "node_modules/rxjs/operators/onErrorResumeNext.d.ts",
    "content": "export * from 'rxjs-compat/operators/onErrorResumeNext';\n"
  },
  {
    "path": "node_modules/rxjs/operators/pairwise.d.ts",
    "content": "export * from 'rxjs-compat/operators/pairwise';\n"
  },
  {
    "path": "node_modules/rxjs/operators/partition.d.ts",
    "content": "export * from 'rxjs-compat/operators/partition';\n"
  },
  {
    "path": "node_modules/rxjs/operators/pluck.d.ts",
    "content": "export * from 'rxjs-compat/operators/pluck';\n"
  },
  {
    "path": "node_modules/rxjs/operators/publish.d.ts",
    "content": "export * from 'rxjs-compat/operators/publish';\n"
  },
  {
    "path": "node_modules/rxjs/operators/publishBehavior.d.ts",
    "content": "export * from 'rxjs-compat/operators/publishBehavior';\n"
  },
  {
    "path": "node_modules/rxjs/operators/publishLast.d.ts",
    "content": "export * from 'rxjs-compat/operators/publishLast';\n"
  },
  {
    "path": "node_modules/rxjs/operators/publishReplay.d.ts",
    "content": "export * from 'rxjs-compat/operators/publishReplay';\n"
  },
  {
    "path": "node_modules/rxjs/operators/race.d.ts",
    "content": "export * from 'rxjs-compat/operators/race';\n"
  },
  {
    "path": "node_modules/rxjs/operators/reduce.d.ts",
    "content": "export * from 'rxjs-compat/operators/reduce';\n"
  },
  {
    "path": "node_modules/rxjs/operators/refCount.d.ts",
    "content": "export * from 'rxjs-compat/operators/refCount';\n"
  },
  {
    "path": "node_modules/rxjs/operators/repeat.d.ts",
    "content": "export * from 'rxjs-compat/operators/repeat';\n"
  },
  {
    "path": "node_modules/rxjs/operators/repeatWhen.d.ts",
    "content": "export * from 'rxjs-compat/operators/repeatWhen';\n"
  },
  {
    "path": "node_modules/rxjs/operators/retry.d.ts",
    "content": "export * from 'rxjs-compat/operators/retry';\n"
  },
  {
    "path": "node_modules/rxjs/operators/retryWhen.d.ts",
    "content": "export * from 'rxjs-compat/operators/retryWhen';\n"
  },
  {
    "path": "node_modules/rxjs/operators/sample.d.ts",
    "content": "export * from 'rxjs-compat/operators/sample';\n"
  },
  {
    "path": "node_modules/rxjs/operators/sampleTime.d.ts",
    "content": "export * from 'rxjs-compat/operators/sampleTime';\n"
  },
  {
    "path": "node_modules/rxjs/operators/scan.d.ts",
    "content": "export * from 'rxjs-compat/operators/scan';\n"
  },
  {
    "path": "node_modules/rxjs/operators/sequenceEqual.d.ts",
    "content": "export * from 'rxjs-compat/operators/sequenceEqual';\n"
  },
  {
    "path": "node_modules/rxjs/operators/share.d.ts",
    "content": "export * from 'rxjs-compat/operators/share';\n"
  },
  {
    "path": "node_modules/rxjs/operators/shareReplay.d.ts",
    "content": "export * from 'rxjs-compat/operators/shareReplay';\n"
  },
  {
    "path": "node_modules/rxjs/operators/single.d.ts",
    "content": "export * from 'rxjs-compat/operators/single';\n"
  },
  {
    "path": "node_modules/rxjs/operators/skip.d.ts",
    "content": "export * from 'rxjs-compat/operators/skip';\n"
  },
  {
    "path": "node_modules/rxjs/operators/skipLast.d.ts",
    "content": "export * from 'rxjs-compat/operators/skipLast';\n"
  },
  {
    "path": "node_modules/rxjs/operators/skipUntil.d.ts",
    "content": "export * from 'rxjs-compat/operators/skipUntil';\n"
  },
  {
    "path": "node_modules/rxjs/operators/skipWhile.d.ts",
    "content": "export * from 'rxjs-compat/operators/skipWhile';\n"
  },
  {
    "path": "node_modules/rxjs/operators/startWith.d.ts",
    "content": "export * from 'rxjs-compat/operators/startWith';\n"
  },
  {
    "path": "node_modules/rxjs/operators/subscribeOn.d.ts",
    "content": "export * from 'rxjs-compat/operators/subscribeOn';\n"
  },
  {
    "path": "node_modules/rxjs/operators/switchAll.d.ts",
    "content": "export * from 'rxjs-compat/operators/switchAll';\n"
  },
  {
    "path": "node_modules/rxjs/operators/switchMap.d.ts",
    "content": "export * from 'rxjs-compat/operators/switchMap';\n"
  },
  {
    "path": "node_modules/rxjs/operators/switchMapTo.d.ts",
    "content": "export * from 'rxjs-compat/operators/switchMapTo';\n"
  },
  {
    "path": "node_modules/rxjs/operators/take.d.ts",
    "content": "export * from 'rxjs-compat/operators/take';\n"
  },
  {
    "path": "node_modules/rxjs/operators/takeLast.d.ts",
    "content": "export * from 'rxjs-compat/operators/takeLast';\n"
  },
  {
    "path": "node_modules/rxjs/operators/takeUntil.d.ts",
    "content": "export * from 'rxjs-compat/operators/takeUntil';\n"
  },
  {
    "path": "node_modules/rxjs/operators/takeWhile.d.ts",
    "content": "export * from 'rxjs-compat/operators/takeWhile';\n"
  },
  {
    "path": "node_modules/rxjs/operators/tap.d.ts",
    "content": "export * from 'rxjs-compat/operators/tap';\n"
  },
  {
    "path": "node_modules/rxjs/operators/throttle.d.ts",
    "content": "export * from 'rxjs-compat/operators/throttle';\n"
  },
  {
    "path": "node_modules/rxjs/operators/throttleTime.d.ts",
    "content": "export * from 'rxjs-compat/operators/throttleTime';\n"
  },
  {
    "path": "node_modules/rxjs/operators/throwIfEmpty.d.ts",
    "content": "export * from 'rxjs-compat/operators/throwIfEmpty';\n"
  },
  {
    "path": "node_modules/rxjs/operators/timeInterval.d.ts",
    "content": "export * from 'rxjs-compat/operators/timeInterval';\n"
  },
  {
    "path": "node_modules/rxjs/operators/timeout.d.ts",
    "content": "export * from 'rxjs-compat/operators/timeout';\n"
  },
  {
    "path": "node_modules/rxjs/operators/timeoutWith.d.ts",
    "content": "export * from 'rxjs-compat/operators/timeoutWith';\n"
  },
  {
    "path": "node_modules/rxjs/operators/timestamp.d.ts",
    "content": "export * from 'rxjs-compat/operators/timestamp';\n"
  },
  {
    "path": "node_modules/rxjs/operators/toArray.d.ts",
    "content": "export * from 'rxjs-compat/operators/toArray';\n"
  },
  {
    "path": "node_modules/rxjs/operators/window.d.ts",
    "content": "export * from 'rxjs-compat/operators/window';\n"
  },
  {
    "path": "node_modules/rxjs/operators/windowCount.d.ts",
    "content": "export * from 'rxjs-compat/operators/windowCount';\n"
  },
  {
    "path": "node_modules/rxjs/operators/windowTime.d.ts",
    "content": "export * from 'rxjs-compat/operators/windowTime';\n"
  },
  {
    "path": "node_modules/rxjs/operators/windowToggle.d.ts",
    "content": "export * from 'rxjs-compat/operators/windowToggle';\n"
  },
  {
    "path": "node_modules/rxjs/operators/windowWhen.d.ts",
    "content": "export * from 'rxjs-compat/operators/windowWhen';\n"
  },
  {
    "path": "node_modules/rxjs/operators/withLatestFrom.d.ts",
    "content": "export * from 'rxjs-compat/operators/withLatestFrom';\n"
  },
  {
    "path": "node_modules/rxjs/operators/zip.d.ts",
    "content": "export * from 'rxjs-compat/operators/zip';\n"
  },
  {
    "path": "node_modules/rxjs/operators/zipAll.d.ts",
    "content": "export * from 'rxjs-compat/operators/zipAll';\n"
  },
  {
    "path": "node_modules/rxjs/OuterSubscriber.d.ts",
    "content": "export * from 'rxjs-compat/OuterSubscriber';\n"
  },
  {
    "path": "node_modules/rxjs/ReplaySubject.d.ts",
    "content": "export * from 'rxjs-compat/ReplaySubject';\n"
  },
  {
    "path": "node_modules/rxjs/Rx.d.ts",
    "content": "export * from 'rxjs-compat';\n"
  },
  {
    "path": "node_modules/rxjs/Scheduler.d.ts",
    "content": "export * from 'rxjs-compat/Scheduler';\n"
  },
  {
    "path": "node_modules/rxjs/scheduler/animationFrame.d.ts",
    "content": "export * from 'rxjs-compat/scheduler/animationFrame';\n"
  },
  {
    "path": "node_modules/rxjs/scheduler/asap.d.ts",
    "content": "export * from 'rxjs-compat/scheduler/asap';\n"
  },
  {
    "path": "node_modules/rxjs/scheduler/async.d.ts",
    "content": "export * from 'rxjs-compat/scheduler/async';\n"
  },
  {
    "path": "node_modules/rxjs/scheduler/queue.d.ts",
    "content": "export * from 'rxjs-compat/scheduler/queue';\n"
  },
  {
    "path": "node_modules/rxjs/Subject.d.ts",
    "content": "export * from 'rxjs-compat/Subject';\n"
  },
  {
    "path": "node_modules/rxjs/SubjectSubscription.d.ts",
    "content": "export * from 'rxjs-compat/SubjectSubscription';\n"
  },
  {
    "path": "node_modules/rxjs/Subscriber.d.ts",
    "content": "export * from 'rxjs-compat/Subscriber';\n"
  },
  {
    "path": "node_modules/rxjs/Subscription.d.ts",
    "content": "export * from 'rxjs-compat/Subscription';\n"
  },
  {
    "path": "node_modules/rxjs/symbol/iterator.d.ts",
    "content": "export * from 'rxjs-compat/symbol/iterator';\n"
  },
  {
    "path": "node_modules/rxjs/symbol/observable.d.ts",
    "content": "export * from 'rxjs-compat/symbol/observable';\n"
  },
  {
    "path": "node_modules/rxjs/symbol/rxSubscriber.d.ts",
    "content": "export * from 'rxjs-compat/symbol/rxSubscriber';\n"
  },
  {
    "path": "node_modules/rxjs/testing/index.d.ts",
    "content": "export { TestScheduler } from '../internal/testing/TestScheduler';\n"
  },
  {
    "path": "node_modules/rxjs/util/applyMixins.d.ts",
    "content": "export * from 'rxjs-compat/util/applyMixins';\n"
  },
  {
    "path": "node_modules/rxjs/util/ArgumentOutOfRangeError.d.ts",
    "content": "export * from 'rxjs-compat/util/ArgumentOutOfRangeError';\n"
  },
  {
    "path": "node_modules/rxjs/util/EmptyError.d.ts",
    "content": "export * from 'rxjs-compat/util/EmptyError';\n"
  },
  {
    "path": "node_modules/rxjs/util/errorObject.d.ts",
    "content": "export * from 'rxjs-compat/util/errorObject';\n"
  },
  {
    "path": "node_modules/rxjs/util/hostReportError.d.ts",
    "content": "export * from 'rxjs-compat/util/hostReportError';\n"
  },
  {
    "path": "node_modules/rxjs/util/identity.d.ts",
    "content": "export * from 'rxjs-compat/util/identity';\n"
  },
  {
    "path": "node_modules/rxjs/util/Immediate.d.ts",
    "content": "export * from 'rxjs-compat/util/Immediate';\n"
  },
  {
    "path": "node_modules/rxjs/util/isArray.d.ts",
    "content": "export * from 'rxjs-compat/util/isArray';\n"
  },
  {
    "path": "node_modules/rxjs/util/isArrayLike.d.ts",
    "content": "export * from 'rxjs-compat/util/isArrayLike';\n"
  },
  {
    "path": "node_modules/rxjs/util/isDate.d.ts",
    "content": "export * from 'rxjs-compat/util/isDate';\n"
  },
  {
    "path": "node_modules/rxjs/util/isFunction.d.ts",
    "content": "export * from 'rxjs-compat/util/isFunction';\n"
  },
  {
    "path": "node_modules/rxjs/util/isIterable.d.ts",
    "content": "export * from 'rxjs-compat/util/isIterable';\n"
  },
  {
    "path": "node_modules/rxjs/util/isNumeric.d.ts",
    "content": "export * from 'rxjs-compat/util/isNumeric';\n"
  },
  {
    "path": "node_modules/rxjs/util/isObject.d.ts",
    "content": "export * from 'rxjs-compat/util/isObject';\n"
  },
  {
    "path": "node_modules/rxjs/util/isObservable.d.ts",
    "content": "export * from 'rxjs-compat/util/isObservable';\n"
  },
  {
    "path": "node_modules/rxjs/util/isPromise.d.ts",
    "content": "export * from 'rxjs-compat/util/isPromise';\n"
  },
  {
    "path": "node_modules/rxjs/util/isScheduler.d.ts",
    "content": "export * from 'rxjs-compat/util/isScheduler';\n"
  },
  {
    "path": "node_modules/rxjs/util/noop.d.ts",
    "content": "export * from 'rxjs-compat/util/noop';\n"
  },
  {
    "path": "node_modules/rxjs/util/not.d.ts",
    "content": "export * from 'rxjs-compat/util/not';\n"
  },
  {
    "path": "node_modules/rxjs/util/ObjectUnsubscribedError.d.ts",
    "content": "export * from 'rxjs-compat/util/ObjectUnsubscribedError';\n"
  },
  {
    "path": "node_modules/rxjs/util/pipe.d.ts",
    "content": "export * from 'rxjs-compat/util/pipe';\n"
  },
  {
    "path": "node_modules/rxjs/util/root.d.ts",
    "content": "export * from 'rxjs-compat/util/root';\n"
  },
  {
    "path": "node_modules/rxjs/util/subscribeTo.d.ts",
    "content": "export * from 'rxjs-compat/util/subscribeTo';\n"
  },
  {
    "path": "node_modules/rxjs/util/subscribeToArray.d.ts",
    "content": "export * from 'rxjs-compat/util/subscribeToArray';\n"
  },
  {
    "path": "node_modules/rxjs/util/subscribeToIterable.d.ts",
    "content": "export * from 'rxjs-compat/util/subscribeToIterable';\n"
  },
  {
    "path": "node_modules/rxjs/util/subscribeToObservable.d.ts",
    "content": "export * from 'rxjs-compat/util/subscribeToObservable';\n"
  },
  {
    "path": "node_modules/rxjs/util/subscribeToPromise.d.ts",
    "content": "export * from 'rxjs-compat/util/subscribeToPromise';\n"
  },
  {
    "path": "node_modules/rxjs/util/subscribeToResult.d.ts",
    "content": "export * from 'rxjs-compat/util/subscribeToResult';\n"
  },
  {
    "path": "node_modules/rxjs/util/TimeoutError.d.ts",
    "content": "export * from 'rxjs-compat/util/TimeoutError';\n"
  },
  {
    "path": "node_modules/rxjs/util/toSubscriber.d.ts",
    "content": "export * from 'rxjs-compat/util/toSubscriber';\n"
  },
  {
    "path": "node_modules/rxjs/util/tryCatch.d.ts",
    "content": "export * from 'rxjs-compat/util/tryCatch';\n"
  },
  {
    "path": "node_modules/rxjs/util/UnsubscriptionError.d.ts",
    "content": "export * from 'rxjs-compat/util/UnsubscriptionError';\n"
  },
  {
    "path": "node_modules/rxjs/webSocket/index.d.ts",
    "content": "export { webSocket as webSocket } from '../internal/observable/dom/webSocket';\nexport { WebSocketSubject, WebSocketSubjectConfig } from '../internal/observable/dom/WebSocketSubject';\n"
  }
]