<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE translationbundle [
<!ELEMENT translationbundle (translation)*>
<!ATTLIST translationbundle lang CDATA #REQUIRED>

<!ELEMENT translation (#PCDATA|ph)*>
<!ATTLIST translation id CDATA #REQUIRED>
<!ATTLIST translation desc CDATA #IMPLIED>
<!ATTLIST translation meaning CDATA #IMPLIED>
<!ATTLIST translation xml:space (default|preserve) "default">

<!ELEMENT ph (#PCDATA|ex)*>
<!ATTLIST ph name CDATA #REQUIRED>

<!ELEMENT ex (#PCDATA)>
]>
<translationbundle lang="ru">
  <translation id="2339071718884287683">Angular Codelab</translation>
  <translation id="1477095887109447756">Пока в нашем приложении только один компонент, но со временем в нем вырастет дерево компонентов</translation>
  <translation id="958527444286373588">Любой компонент может отображать другой компонент, используя HTML элемент, соответствующий селектору этого компонента</translation>
  <translation id="3767405923334084568">Поменяйте значения <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>size<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> на <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>100<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> и <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>color<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> на <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>red<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> чтобы получить флаг Японии.</translation>
  <translation id="6502697971057653879">Дочерний класс должен содержать специальный декоратор:
<ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>@Input()<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph></translation>
  <translation id="242686228345857569">Это первый раз, когда мы применяем декораторы к свойствам (а не к классам).</translation>
  <translation id="6993248291969541113">Теперь мы знаем как создать компонент. Давайте переместим всю информацию, связанную с видео, в новый компонент с именем 
VideoComponent.</translation>
  <translation id="8535569169237447692">Мы загрузим компонент для Вас, результат будет следующий:</translation>
  <translation id="1902505859733550335">Милый котенок</translation>
  <translation id="2676566827453590169">Компоненты не будут знать друг о друге, если они не декларированы в одном и том же модуле</translation>
  <translation id="1036270088685658131">В следующем упражнении вы будете использовать созданный ранее компонент</translation>
  <translation id="5532839647985128848">Вот мы и прошли <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>the end<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> курс Codelab. Теперь вы готовы начать путешествие в мир Angular. Ссылки ниже помогут вам продолжить обучение!</translation>
  <translation id="9154976499052576586">Документация, описание функций и событий перечислены здесь</translation>
  <translation id="8354723802427223197">делает создание работающего приложения лёгким, и позволяет генерировать новые компоненты.
                    Также делает работу с билд системами за вас.</translation>
  <translation id="1566812974294525535">Angular - это <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>платформа разработки<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> для создания мобильных и настольных приложений. Angular позволяет вам <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>расширить HTML синтаксис<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> , чтобы кратко и удобно описать компоненты приложения. Привязка данных (data binding) и внедрение зависимостей (Dependency Injection)  позволят вам написать существенно меньше кода.</translation>
  <translation id="7127434905431284986">Допустим у нас есть HTML файл:</translation>
  <translation id="5463471054765192731">Это может быть сделано в три этапа.</translation>
  <translation id="7109785117359301161">Три этапа для создания приложения:</translation>
  <translation id="8986953020363470779">Создайте Angular компонент</translation>
  <translation id="7117530673690701168">Создайте Angular модуль</translation>
  <translation id="1813487159288766093">Запустите (Bootstrap) модуль</translation>
  <translation id="4795937685905293259">В Angular основа компонента - класс, который может содержать свойства и методы.</translation>
  <translation id="7834786013480490982">К классу привязан декоратор <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>@Component<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph></translation>
  <translation id="8311779527003716911">Декораторы привязывают необходимую <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>Angular<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> информацию к классу, оставляя сам класс неизменным.</translation>
  <translation id="7939755324517272859">Декораторы - новая функциональность TypeScript. Они привязывают мета-данные к классу, функции, свойству или переменной.</translation>
  <translation id="7184413576755920741">Создатели декораторов вдохновлены аналогичной функциональностью на языке Python.</translation>
  <translation id="6417780443340936933">Шаблон определяет HTML-код, который генерирует компонент</translation>
  <translation id="2517889020498444165">Если у вас больше пары строчек HTML рекомендуем использовать параметр <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>templateUrl<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>, который позволяет указать ссылку на HTML файл</translation>
  <translation id="924140808641999413">На следующем слайде вы создадите ваш первый <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>Angular<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> компонент! Мы сами подключим и запустим его. Результат должен выглядеть вот так:</translation>
  <translation id="61555616227480717">Создайте первый Angular компонент!</translation>
  <translation id="5472566057749492330">Мы узнаем больше о NgModules в будущих этапах</translation>
  <translation id="5238272395469026108">Как и компонент, <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>Angular<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> модуль это всего лишь класс</translation>
  <translation id="3904962908062507807">Как и компонент, модуль в <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>Angular<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>  имеет декоратор, содержащий метаданные</translation>
  <translation id="789632209497668485">Массив <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>Declarations<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> содержит компоненты, принадлежащие AppModule</translation>
  <translation id="8368596314185297476">Компонент, переданный в массив <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>bootstrap<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>, будет создан и отображен в Вашем <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>index.html<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> файле</translation>
  <translation id="4226122571544649251">На следующем слайде вы создадите свой первый <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>Angular<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> модуль! Мы будем использовать все компоненты из предыдущего упражнения и свяжем их между собой. Результат будет выглядеть следующим образом:</translation>
  <translation id="9406456874883877">Все готово, осталось запустить наше приложение</translation>
  <translation id="7313415582983155780">Как запуск (bootstrap) приложения работает в Angular?</translation>
  <translation id="354134427043166608">1. Запускает среду выполнения. <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>platformBrowserDynamic()<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> cообщает Angular, что мы работаем в браузере
</translation>
  <translation id="3843563559252369284">2. Angular инциализирует компонент из массива <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>bootstrap<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> в <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>app.module.ts<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>
      (в этом случае <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>HelloWorldComponent<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>)</translation>
  <translation id="1478913304849792970">3. Angular ищет в документе элемент по соответствующему селектору, определенному в компоненте <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>HelloWorldComponent<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>
      (<ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>&apos;hello-world&apos;<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> в нашем случае), и вставляет содержимое компонента в найденный элемент</translation>
  <translation id="6926283110773507163">Все готово! На следующей странице вы запустите свое первое <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>Angular<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> приложение!</translation>
  <translation id="2268943717929526857">Теперь, когда у нас есть и NgModule, и готовый компонент, давайте загрузим приложение!</translation>
  <translation id="8145952131430725333">порядок загрузки  index -&gt; main -&gt; app.module -&gt; app.component</translation>
  <translation id="6142704255682990541">Пока Angular загружается, содержимое элементов не меняется (<ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>Загрузка...<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>)</translation>
  <translation id="4135298275558664404">Конец раздела загрузки (Bootstrap)</translation>
  <translation id="470651207723290753">Отлично сработано! Упражнение выполнено!
</translation>
  <translation id="7793166881121401916">Следующий шаг <ph name="START_LINK"><ex>&lt;a&gt;</ex></ph>Перейти к шаблонам<ph name="CLOSE_LINK"><ex>&lt;/a&gt;</ex></ph></translation>
  <translation id="dependencyInjection">Внедрение зависимостей</translation>
  <translation id="dependencyInjectionLearnMore">Узнайте больше про систему внедрения зависимости в Angular
</translation>
  <translation id="4375448281315274325" desc="Есть что-нить лучше чем &quot;хардкодить&quot;?"><ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>Система внедрения зависимости позволяет<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> передать зависимости вашему коду вместо того чтобы хардкодить их</translation>
  <translation id="538295435595855313">Без системы внедрения зависимости, класс <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>Profession<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> инстанциируется внутри класса <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>Person<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph></translation>
  <translation id="6525744507050405173">При использовании внедрения зависимости (DI) Angular делает это за нас</translation>
  <translation id="4400493199164893517">Допустим у нас есть сервис - <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>UnitConverterService<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>, который мы хотим использовать в классе <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>UnitConversionComponent<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>.
Для этого нужно будет сделать 3 простых действия:</translation>
  <translation id="3957097669887217853">Отметим  зависимость декоратором @Injectable()</translation>
  <translation id="5662947366104784178">Передать модулю</translation>
  <translation id="9143596698887173150">Запросить в компоненте</translation>
  <translation id="1117670596218842167">Отметим класс декоратором <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>@Injectable()<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>
      Такое обозначение говорит Angular, что данный класс является частью системы внедрения зависимостей</translation>
  <translation id="1349378066640773383">Если сервис отмечен декоратором @Injectable он может запрашивать другие сервисы в своем конструкторе</translation>
  <translation id="2735369781715347846">Передайте все экспортируемые (injectable) зависимости в секцию <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>providers<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> вашего <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>NgModule<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph></translation>
  <translation id="4525370649719280544">Теперь этот сервис становится доступным для всех <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>компонентов<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> и других сервисов в  <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>NgModule<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>.</translation>
  <translation id="9193697677313937686">Затраты на инъекцию компонентов</translation>
  <translation id="261676783640894862">Благодаря модификатору доступа <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>private<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> , сервис становится доступным внутри класса, и к нему можно обратиться так:   
      <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>this.converter<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>.</translation>
  <translation id="2179039829273699885">На следующем слайде вы будете использовать сервис VideoService, в котором будет еще больше котиков!!! Результат будет таким:</translation>
  <translation id="7541582794652430956">Далее: <ph name="START_LINK"><ex>&lt;a&gt;</ex></ph>Изучите как собирать компоненты вместе<ph name="CLOSE_LINK"><ex>&lt;/a&gt;</ex></ph></translation>
  <translation id="4326093281669549121">Обратные кавычки <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>` `<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> — так называемые волшебные кавычки, поддерживающие многострочную запись и интерполированные строки</translation>
  <translation id="4394745758352985330">Простые выражения также разрешены, вы можете выполнить метод компонента (например fullName() ниже), или вычислить 
      <ph name="START_TAG_CODE"><ex>&lt;code&gt;</ex></ph>323213+34234<ph name="CLOSE_TAG_CODE"><ex>&lt;/code&gt;</ex></ph></translation>
  <translation id="6385657961263768030">При привязке можно использовать произвольные выражения</translation>
  <translation id="2604621775941411917">Angular поддерживает более сложные привязки свойств чем имя атрибута</translation>
  <translation id="1674481147821860289">Все директивы привязки, которые мы видели до сих пор, передают данные в одном направлении: от компонента к элементу</translation>
  <translation id="1414288142928384130">Хотя скобки используются для привязки событий: <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>(event)<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>, мы также можем использовать префикс &quot;on-&quot;, например <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>on-click<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>.</translation>
  <translation id="2089936986742209282">Шаблоны / Условное отображение (*ngIf)</translation>
  <translation id="1248112144489322049">Условные выражения добавляют или удаляют элемент из DOM, в зависимости от значения переданного выражения</translation>
  <translation id="4068857581424650411">На следующем слайде вы добавите обработчик события для кнопки поиска который покажет сообщения в случае, если видео не найдено. Результат будет выглядеть вот так:</translation>
  <translation id="4741557658120551532">В примере внизу <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>*ngFor<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> повторяет HTML элемент, к которому *ngFor  относится (в нашем случае li), для каждого элемента puppy из массива puppies</translation>
  <translation id="7691190167897559246">HTML атрибуты в <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>Angular<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> чувствительны к регистру. Например <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph><ph name="START_STRIKETHROUGH_TEXT"><ex>&lt;s&gt;</ex></ph>*ngfor<ph name="CLOSE_STRIKETHROUGH_TEXT"><ex>&lt;/s&gt;</ex></ph><ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> не будет работать, а <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>*ngFor<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> будет</translation>
  <translation id="595166160893731252">Ура! На следующем слайде вы добавите информацию видео! Результат:</translation>
  <translation id="8787586021636577494">Далее: <ph name="START_LINK"><ex>&lt;a&gt;</ex></ph> Изучим как использовать Внедрение зависимостей в Angular <ph name="CLOSE_LINK"><ex>&lt;/a&gt;</ex></ph></translation>
  <translation id="6225777299423953966">Почему TypeScript?</translation>
  <translation id="4845793289318766506">TypeScript</translation>
  <translation id="2918183727702284411">Более того, в TypeScript включена дополнительная  система типов и декораторов</translation>
  <translation id="5379917036245705937">Вы можете редактировать код выше</translation>
  <translation id="5973606507353383362"><ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>const<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> новый способ объявления переменных (появился в <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>ES6<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>). Похоже на <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>var<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>,
но имеет блочную область видимости (живет только внутри фигурных скобок), и выдаст ошибку если попробовать его переопределить.</translation>
  <translation id="6027504298282045432">TypeScript позволяет объявлять сложные типы с помощью интерфейсов</translation>
  <translation id="702106966820398853">Здесь, <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>realPuppy<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> является экземпляром <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>Puppy<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> интерфейса.</translation>
  <translation id="4690830357394206486">В TypeScript есть<ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph> классы<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>, и Angular часто их использует.</translation>
  <translation id="832290230708229550">private и protected свойства недоступны вне класса</translation>
  <translation id="5575767639565396335">Теперь мы можем использовать класс <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>Puppy<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> в другом файле.</translation>
  <translation id="5612117993680767924">TypeScript поддерживает множество других крутых штук, например:</translation>
  <translation id="3591838911718818191">Интерфейсы</translation>
  <translation id="2778796732744507615">Перечисляемые типы (enums)</translation>
  <translation id="554505692155626925">Асинхронность / Ожидания</translation>
  <translation id="2854346138345342774">Деструктурирование</translation>
  <translation id="4818010747810947110">И много чего еще!</translation>
  <translation id="7824265004931736949">Мы не будем рассматривать их детально, для ознакомления посмотрите на сайте  <ph name="START_LINK"><ex>&lt;a&gt;</ex></ph>TypeScript<ph name="CLOSE_LINK"><ex>&lt;/a&gt;</ex></ph></translation>
  <translation id="1966301836895698534">На следующем слайде будет дано упражнение по TypeScript</translation>
  <translation id="2921334658251839102">Выглядеть будет вот так:</translation>
  <translation id="564343607900892103">Теперь вы знаете достаточно о <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>TypeScript<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> чтобы перейти к изучению <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>Angular<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>! Узнайте больше о TypeScript на <ph name="START_LINK"><ex>&lt;a&gt;</ex></ph>сайте TypeScript<ph name="CLOSE_LINK"><ex>&lt;/a&gt;</ex></ph></translation>
  <translation id="shorthandFunction">Или пользуйтесь сокращенной натацией</translation>
  <translation id="errorNotAPuppy">Ошибка: очевидно, что это не собачка</translation>
  <translation id="thisIsNumber">Это число (number)</translation>
  <translation id="componentTree">Дерево компонентов</translation>
  <translation id="4420604777002064279">Родитель и Потомок</translation>
  <translation id="passingDataParentChild">Передача данных : Родительский компонент -&gt;  Дочерний компонент </translation>
  <translation id="exercise1">Упражнение 1</translation>
  <translation id="3260541536331111879">родительские и дочерние компоненты</translation>
  <translation id="7430680760319628492">Ревью</translation>
  <translation id="5353140049958069641">Упражнение 2</translation>
  <translation id="componentIsDecorator">@Component это декоратор Angular</translation>
  <translation id="decoratorGoesAboveEntity">Декоратор указывается над сущностью (классом)</translation>
  <translation id="componentNameIsClassName">Имя компонента это имя класса (AppComponent)</translation>
  <translation id="firstAngularApp">Первое Angular приложение</translation>
  <translation id="3420408458155669913">Что такое Angular</translation>
  <translation id="intro">Вступление</translation>
  <translation id="step1">Шаг 1</translation>
  <translation id="decorators">Декораторы</translation>
  <translation id="3540108566782816830">Селектор</translation>
  <translation id="1334525262704836521">Встроенный шаблон</translation>
  <translation id="exercise">Упражнение</translation>
  <translation id="step2">Шаг 2</translation>
  <translation id="8988249734928621313">Модуль</translation>
  <translation id="8027333466268729668">Декоратор NgModule</translation>
  <translation id="1434785076190731280">Browser Module</translation>
  <translation id="2046003391679469154">Declarations</translation>
  <translation id="1101953121986747707">Bootstrap</translation>
  <translation id="4814190538810111436">Создание первого Ng модуля</translation>
  <translation id="step3">Шаг 3</translation>
  <translation id="7662751436458775011">Bootstrapping</translation>
  <translation id="699691489139693623">Bootstrapping 1</translation>
  <translation id="4470411477201731376">Bootstrapping 2</translation>
  <translation id="3263507238146950325">Bootstrapping 3</translation>
  <translation id="shorthandMakesProfessionAvailable">*Сокращения в Typescript  делают &apos;profession&apos; доступным в инстансе компонента</translation>
  <translation id="assumingJobHasPropTitle">предполагая, что Job имеет свойство &apos;.title&apos;</translation>
  <translation id="comparison">Сравнение</translation>
  <translation id="2250922476634643797">Параметры</translation>
  <translation id="8985868511640294928">Тестирование</translation>
  <translation id="2384026219516877038">Пример</translation>
  <translation id="4122311947132294677">Этап завершен!</translation>
  <translation id="thisIsValidHTML">Это валидный HTML синтаксис.</translation>
  <translation id="worksOnAttributeSyntax">Так можно привязать значение аттрибутов</translation>
  <translation id="allowsToConditionallyBindClass">Значение будет меняться в зависимости от переданного выражения</translation>
  <translation id="orStyleProps">Или CSS</translation>
  <translation id="worksWithCustomComponents">Все работает с пользовательскими компонентами</translation>
  <translation id="whenUserClicksItCallsSaveUser">При нажатии на кнопку, вызовется метод  компонента &quot;saveUser&quot; и передаст соответствующий event.</translation>
  <translation id="youCanAlsoCreateEventsForCustomComponents">Вы также можете создавать события для кастомных компонентов. 
Здесь у нас есть событие &quot;depleted&quot;, которое вызовет &quot;soundAlarm&quot; когда сработает</translation>
  <translation id="thereAreShortcutEventBindings">Еще есть упрощенный способ привязки событий! 
Если пользователь нажмет CTRL+ENTER, запустится метод submit (это фича ангуляра)</translation>
  <translation id="userNameHasRefToInput">в userName есть ссылка на input</translation>
  <translation id="tryChangingToTrue">Попробуйте изменить на true!</translation>
  <translation id="needToRepeatPuppiesHere">Необходимо повторить собачку тут</translation>
  <translation id="5433675495457939071">Шаблоны</translation>
  <translation id="2093245413873276320">Интерполирование</translation>
  <translation id="8721861281513890587">Cвойства</translation>
  <translation id="7255408982840762838">Привязка свойства</translation>
  <translation id="2911314034876616874">Расходы на binding данных</translation>
  <translation id="2009489920751400915">binding событий</translation>
  <translation id="1858930262589535450">Связывание ссылки</translation>
  <translation id="92659757529171106">Повторяющиеся элементы</translation>
  <translation id="8944028182505149416">Повторение элементов  (*ngFor)</translation>
  <translation id="6964671906994906253">Упражнение 3</translation>
  <translation id="useShorthandNotation">Или используйте сокращенную нотацию для функций</translation>
  <translation id="calledArrowFunction">(стрелочные функции)</translation>
  <translation id="typescriptCanInferNumber">TypeScript может догадаться что это число</translation>
  <translation id="typescriptCanInferString">TypeScript может догадаться что это строка (string)</translation>
  <translation id="cantAddNumAndBool">невозможно сложить число с bool</translation>
  <translation id="cantSliceNum">Нельзя вызвать slice используя число</translation>
  <translation id="canSliceString">Но можно для строки</translation>
  <translation id="works">Работает!</translation>
  <translation id="defineArrayAsArray"/>
  <translation id="typeDoesSameThing">Type[]  делает тоже самое.</translation>
  <translation id="thisIsMethod">Это метод.</translation>
  <translation id="thatsHowRussianDogsTalk">Гав гав</translation>
  <translation id="nowWeCanInstantiate">Теперь мы можем создать экземпляр класса Puppy</translation>
  <translation id="andUseItsMethods">И используйте это в методах</translation>
  <translation id="laterWeWillHaveCode">Потом добавим здесь код</translation>
  <translation id="letsCreateMorePuppies">Создадим еще собачек</translation>
  <translation id="varAllowedNotRecommended">Var по-прежнему разрешен, но не рекомендуется.</translation>
  <translation id="letInsteadOfVar">Let рекомендуется для использования взамен var.</translation>
  <translation id="letUnavailableOutsideIfUnlikeIf">В отличие от var let недоступен вне this.</translation>
  <translation id="constLikeLet">Const похож на let, но если вы попробуете изменить его, то TS выдаст ошибку.</translation>
  <translation id="definitelyBoolean">хорошо, определите boolean</translation>
  <translation id="typescript">TypeScript</translation>
  <translation id="types">Типы</translation>
  <translation id="2703965223476522347">Примитивы (strings, numbers, etc...)</translation>
  <translation id="3570291272341874994">Массивы</translation>
  <translation id="classes">Классы</translation>
  <translation id="6104897002627313660">Конструктор</translation>
  <translation id="6722511841825238135">Модификатор доступа</translation>
  <translation id="7462301153729425254">Экспорт</translation>
  <translation id="1071721880474488785">Импорт</translation>
  <translation id="1012910011980066980">Фильтр (последнее)</translation>
  <translation id="5937251202465808296">Еще...</translation>
  <translation id="4985288594861826441">Этап завершен</translation>
  <translation id="noSemicolon">Тут не должно быть точки с запятой. Декоратор привязывается к классу.</translation>
  <translation id="CreateYFirstAgApp">Первое приложение на Angular</translation>
  <translation id="2628877838206351210">Вы узнаете как создать Angular компонент, добавить его в модуль и запустить приложение.</translation>
  <translation id="3602849743531844327">Знание основ TypeScript</translation>
  <translation id="4175894725989485587">Когда вы передадите <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>AppModule<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> методу <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>bootstrapModule<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>, Angular запустит все компоненты, указанные в свойстве bootstrap этого модуля</translation>
  <translation id="7616600771060273557">Для большинства несложных приложений можно просто скопипастить эти строки.</translation>
  <translation id="templates">Шаблоны</translation>
  <translation id="6346332284188948979">Узнайте больше о шаблонах в Angular!</translation>
  <translation id="createClassCodelab">Создайте класс  с именем &apos;Codelab&apos;</translation>
  <translation id="1425139040251941806">Необходимы базовые знания языка JavaScript.</translation>
  <translation id="6184719411681719003">У JS небезопасная система типов, из-за которой бывает сложно разрабатывать большие масштабные приложения</translation>
  <translation id="1567156650998154030">Новые возможности последнего стандарта JS  (ES6, ES7) не до конца поддерживаются во всех браузерах</translation>
  <translation id="3897582982358500728">Декораторы выглядят так @twitter_handles, позже мы познакомимся с ними ближе</translation>
  <translation id="typeSystem">Система типов</translation>
  <translation id="6273594692169782871">Ниже представлена функция сложения чисел <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>add<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph>, мы складываем 2 + 2. Казалось бы, что может пойти не так?</translation>
  <translation id="addComponentDecoratorAndSetSelectorToMyVideo">video.component.ts: Отметьте компонент декоратором &apos;@Component&apos;  и добавьте в него селектор  &apos;my-video&apos;.</translation>
  <translation id="addVideoComponentToAppModule">app.module.ts: Объявите компонент VideoComponent в свойстве  &apos;declarations&apos; модуля AppModule.</translation>
  <translation id="setTemplateUrlToLoadAppropriateFile">video.component.ts Добавьте ссылку на соответствующий HTML файл с шаблоном в свойство templateUrl , чтобы загрузить шаблон в компонент</translation>
  <translation id="addVideoPropertyAndDecorateWithInput">video.component.ts: Добавьте свойство video  и отметьте его декоратором @Input()</translation>
  <translation id="displayVideoTitle">video.component.html: Отобразите название (title) видео</translation>
  <translation id="displayVideoThumbnail">video.component.html: Отобразите превью (src) видео</translation>
  <translation id="displayVideoDescription">video.component.html: Отобразите описание(description) видео</translation>
  <translation id="displayVideoData">video.component.html: Выведите дату видео</translation>
  <translation id="displayNumberOfVideoViews">video.component.html: Отобразите количество просмотров видео(views)</translation>
  <translation id="displayNumberOfVideoLikes">video.component.html: Отобразите количество отметок &quot;нравится&quot;(likes)</translation>
  <translation id="replaceTitleAndThumbnail">app.html: Замените название видео и превью на наш чудесный компонент my-video</translation>
  <translation id="useDataBindingToPassVideoToComponent">app.html: С помощью биндинга передайте объект видео в компонент(не забудьте про квадратные скобки)</translation>
  <translation id="createClassAppComponent">Создайте класс &apos;AppComponent&apos;</translation>
  <translation id="createClassAppModule">Создайте класс &apos;AppModule&apos;</translation>
  <translation id="allSetBootstrapApp">Всё готово! Загружайте приложение</translation>
  <translation id="exportClass">Экспортируйте класс</translation>
  <translation id="addComponentDecorator">Добавьте классу декоратор @Component</translation>
  <translation id="addSelectorMyApp">Добавьте селектор  &apos;my-app&apos; в декоратор компонента</translation>
  <translation id="addTemplateHelloMewTube">Добавьте шаблон, содержащий тег h1 с текстом &quot;Hello MewTube!&quot;</translation>
  <translation id="addNgModuleDecorator">Добавьте классу декоратор NgModule</translation>
  <translation id="addBrowserModuleToNgModule">Добавьте &apos;BrowserModule&apos; в свойство декоратора NgModule</translation>
  <translation id="addAppComponentToDeclarations">Добавьте компонент &apos;AppComponent&apos; к свойству &apos;declarations&apos; у декоратора</translation>
  <translation id="addAppComponentToBootstrap">Добавьте компонент &apos;AppComponent&apos;  в свойство &apos;bootstrap&apos;  декоратора</translation>
  <translation id="addIjectableDecoraterToClass">video.service.ts: Добавьте классу декоратор @Injectable()</translation>
  <translation id="addVideoServiceToNgModule">app.module.ts: Добавьте VideoService в свойство  providers вашего NgModule</translation>
  <translation id="getRidOfFakeVideos">app.component.ts: Избавьтесь от константы FAKE_VIDEOS</translation>
  <translation id="injectVideoService">app.component.ts: Внедрите &apos;VideoService&apos; в конструктор компонента как
 &apos;videoService&apos;
</translation>
  <translation id="updateAppComponentSearchmethod">app.component.ts: Сделайте так, чтобы метод &apos;search&apos; компонента использовал метод  &apos;search&apos; сервиса &apos;videoService&apos;</translation>
  <translation id="addVideosProperty">app.component.ts: Добавьте свойства &apos;videos&apos;, и установите пустой массив в качестве значения.</translation>
  <translation id="assignFakeVideosToComponent">app.component.ts: Внутри метода &apos;search&apos; установите переменную FAKE_VIDEOS в качестве значения свойства &apos;videos&apos;.</translation>
  <translation id="addH1HeaderWithATitle">app.html: Добавь заголовок H1, отобразите там свойство &apos;title&apos; AppComponent&apos;а</translation>
  <translation id="addSearchMethodOnComponent">app.component.ts: Добавьте в компонент метод &apos;search&apos;, который принимает параметр &apos;searchString&apos;</translation>
  <translation id="addClickHandlerToButtonCallSearch">app.html: Добавьте обработчик нажатия мышки на кнопку, вызовите метод &apos;search&apos; и передайте значние поля ввода (Сам поиск мы сделаем позже)</translation>
  <translation id="addMessageNoVideos">app.html: Добавьте сообщение  &apos;no videos&apos; которое появляется только когда массив videos пустой</translation>
  <translation id="bonusDisplayAllVideosByDefault">#Bonus app.component.ts: Сейчас вам придется нажать кнопку поиска, чтобы отобразились видео. Поправьте код так, чтобы видео отображались по умолчанию, без нажатия кнопки.</translation>
  <translation id="insideSearchMethodFilterFakeVideos">app.component.ts: Внутри метода &apos;search&apos; отфильтруйте FAKE_VIDEOS так, чтобы возвращались только видео, название которых содержит искомую строку searchString. (подсказка: используйте .includes или .indexOf строковый метод)</translation>
  <translation id="alsoDisplayThumbnail">app.html: Отобразите превью</translation>
  <translation id="IterateWithNgForAndDisplayTitle">app.html: Пройдитесь по массиву videos с помощью &apos;*ngFor&apos; и выведите название каждого видео</translation>
  <translation id="addButtonWithtextSearch"/>
  <translation id="addInputWithPlaceholderVideo">app.html: Добавьте тег input с атрибутом  &apos;placeholder&apos; =  &apos;video&apos;</translation>
  <translation id="addConstructor">Объявите конструктор</translation>
  <translation id="makeConstructorTakeParamGuests">Сделайте так, чтобы &apos;guests&apos; был параметром вашего конструткора</translation>
  <translation id="specifyTheTypeForGuests">Объявите тип параметра guests(подсказка: массив типа Guest)</translation>
  <translation id="makeParemeterPublic">Отметьте параметр ключевым словом public (обратите внимание, что теперь вы можете получить к нему доступ в классе, обратившись к this.guests)</translation>
  <translation id="createNewMethodGetGuestsComing">Создайте метод &apos;getGuestsComing&apos;</translation>
  <translation id="modifyGetGuestsComingToFilter">Измените метод getGuestsComing так, чтобы он возвращал массив из  элементов &apos;guests&apos;, у которых свойство &apos;coming&apos; равно true.</translation>
  <translation id="5246563406729441831">Поэтому был создан  <ph name="START_BOLD_TEXT"><ex>&lt;b&gt;</ex></ph>TypeScript<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b&gt;</ex></ph> Он траспайлится в JavaScript, а значит результат можно будет увидеть в любом браузере.</translation>
  <translation id="createFirstNgApp">Создайте ваше первое Angular приложение</translation>
  <translation id="customEvents">Пользовательские события</translation>
  <translation id="angularWrittenInTypescript">Angular написан на TypeScript, который, в свою очередь, является расширением JavaScript. Узнайте больше о TypeScript.</translation>
  <translation id="learnHowToBootstrapApp">Узнайте как создать и запустить ваше первое Angular приложение</translation>
  <translation id="learnUsingTemplates">Узнайте как пользоваться шаблонами в Angular</translation>
  <translation id="learnToProvideDependencies">Узнайте как использовать систему внедрения звисимостей вместо того, чтобы хардкодить их</translation>
  <translation id="learnToStructureAppWithReusableComponents">Узнайте как лучше всего организовать ваше приложение с помощью пользовательских компонентов.</translation>
  <translation id="learnToBindToEvents">Узнайте как привязывать события</translation>
  <translation id="2969609887538562311"/>
  <translation id="2341364040664647079"/>
  <translation id="5517859412360989740"/>
  <translation id="4642174669863123789"/>
  <translation id="846527321118814759"/>
  <translation id="1530303971968447462"/>
  <translation id="8118966197626902883"/>
  <translation id="3356116837774924473"/>
  <translation id="2523071058337090781"/>
  <translation id="2927986224967435730"/>
  <translation id="8207999948726652808"/>
  <translation id="3156349100343034471"/>
  <translation id="300734632059872629"/>
  <translation id="9187573734938183951"/>
  <translation id="5942842029908579620"/>
  <translation id="1576306873939022256"/>
  <translation id="8408791979161842309"/>
  <translation id="4295828568066353117"/>
  <translation id="3893830132734928426"/>
  <translation id="548749131188154528"/>
  <translation id="5879655922336578318"/>
  <translation id="2454403873505344406"/>
  <translation id="8973825181697784965"/>
  <translation id="5188319674624334723"/>
  <translation id="204166739121845714"/>
  <translation id="2249469029341259996"/>
  <translation id="4809937829312056524"/>
  <translation id="697512088423081605"/>
  <translation id="7635170467387258781"/>
  <translation id="specifyTheTypeForB"/>
  <translation id="typescriptHighlightsErrorFix224"/>
  <translation id="AngularIsWrittenInTypescript"/>
  <translation id="599136773381019887"/>
  <translation id="1179660474786144252"/>
  <translation id="2705004390173819794"/>
  <translation id="7622443268195786088"/>
  <translation id="11533551419675311"/>
  <translation id="6406522534980669684"/>
  <translation id="7555895897701490119"/>
  <translation id="4608901841304013912"/>
  <translation id="2297409428574300382"/>
  <translation id="6928931330940820266"/>
  <translation id="479713578361946676"/>
  <translation id="1340674580306338318"/>
  <translation id="1137822156465375184"/>
  <translation id="3197623231967295541"/>
  <translation id="4201926240246235516"/>
  <translation id="3713515765040164069"/>
  <translation id="2068345166343383288"/>
  <translation id="6616853655909301920"/>
  <translation id="6448975034968186570"/>
  <translation id="5499416274506109062"/>
  <translation id="8794380282989826581"/>
  <translation id="7351129024902593075"/>
  <translation id="6118490965246647388"/>
  <translation id="6190090632190394225"/>
  <translation id="5107838485151473796"/>
  <translation id="3886381017593379560"/>
</translationbundle>
